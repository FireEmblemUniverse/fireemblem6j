
	.include "macro.inc"

	.syntax unified

	thumb_func_start sub_802D66C
sub_802D66C: @ 0x0802D66C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	movs r0, #0
	movs r1, #3
	bl ApplyIconPalette
	movs r1, #1
	ldr r0, _0802D6EC @ =gPal
	mov sb, r0
	movs r2, #0x1f
	mov ip, r2
	ldr r0, _0802D6F0 @ =0x02003008
	mov r8, r0
_0802D68A:
	adds r0, r1, #0
	adds r0, #0x30
	lsls r0, r0, #1
	add r0, sb
	ldrh r0, [r0]
	adds r4, r0, #0
	mov r2, ip
	ands r4, r2
	asrs r3, r0, #5
	ands r3, r2
	asrs r2, r0, #0xa
	mov r0, ip
	ands r2, r0
	lsls r0, r1, #1
	adds r7, r1, #1
	mov r1, r8
	adds r5, r0, r1
	movs r6, #7
_0802D6AE:
	lsls r0, r2, #0xa
	lsls r1, r3, #5
	adds r0, r0, r1
	adds r0, r0, r4
	strh r0, [r5]
	adds r4, #3
	cmp r4, #0x1f
	ble _0802D6C0
	movs r4, #0x1f
_0802D6C0:
	adds r3, #3
	cmp r3, #0x1f
	ble _0802D6C8
	movs r3, #0x1f
_0802D6C8:
	adds r2, #3
	cmp r2, #0x1f
	ble _0802D6D0
	movs r2, #0x1f
_0802D6D0:
	adds r5, #0x20
	subs r6, #1
	cmp r6, #0
	bge _0802D6AE
	adds r1, r7, #0
	cmp r1, #0xf
	ble _0802D68A
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0802D6EC: .4byte gPal
_0802D6F0: .4byte 0x02003008

	thumb_func_start sub_802D6F4
sub_802D6F4: @ 0x0802D6F4
	push {r4, r5, r6, lr}
	movs r5, #0
	ldr r6, _0802D728 @ =0x085C8388
_0802D6FA:
	lsls r4, r5, #3
	ldr r0, _0802D72C @ =0x02002FD8
	adds r4, r4, r0
	adds r0, r4, #0
	movs r1, #4
	bl InitText
	ldr r1, [r6]
	movs r0, #0x20
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	ldm r6!, {r3}
	adds r0, r4, #0
	movs r2, #3
	bl Text_InsertDrawString
	adds r5, #1
	cmp r5, #5
	ble _0802D6FA
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802D728: .4byte 0x085C8388
_0802D72C: .4byte 0x02002FD8

	thumb_func_start sub_802D730
sub_802D730: @ 0x0802D730
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #8
	mov r8, r0
	adds r6, r1, #0
	ldr r0, [r2]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r4, r0, #0
	movs r0, #0x30
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r5, r0, #0
	adds r0, r6, #0
	bl ClearText
	movs r0, #0
	str r0, [sp]
	str r4, [sp, #4]
	adds r0, r6, #0
	mov r1, r8
	movs r2, #0
	adds r3, r5, #0
	bl PutDrawText
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_802D774
sub_802D774: @ 0x0802D774
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #8
	mov r8, r0
	adds r6, r1, #0
	adds r0, r2, #0
	bl GetItemName
	adds r4, r0, #0
	movs r0, #0x38
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r5, r0, #0
	adds r0, r6, #0
	bl ClearText
	movs r0, #0
	str r0, [sp]
	str r4, [sp, #4]
	adds r0, r6, #0
	mov r1, r8
	movs r2, #0
	adds r3, r5, #0
	bl PutDrawText
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_802D7B8
sub_802D7B8: @ 0x0802D7B8
	push {r4, lr}
	adds r4, r0, #0
	adds r3, r1, #0
	ldr r0, [r2]
	cmp r0, #0
	ble _0802D7EA
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	ldr r0, [r2]
	subs r0, #1
	str r0, [r2]
	adds r1, r4, #0
	adds r1, #0x4c
	movs r0, #0x20
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0802D7EA
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	ldr r0, [r2]
	subs r0, #1
	str r0, [r2]
_0802D7EA:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_802D7F0
sub_802D7F0: @ 0x0802D7F0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	adds r6, r0, #0
	ldr r7, _0802D8F0 @ =gBattleUnitA
	adds r0, r7, #0
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemUses
	str r0, [sp, #8]
	ldr r0, _0802D8F4 @ =gBattleUnitB
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemUses
	str r0, [sp, #0xc]
	add r1, sp, #4
	mov r0, sp
	bl BattleGetFollowUpOrder
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	adds r4, r6, #0
	adds r4, #0x50
	movs r0, #0
	strb r0, [r4]
	adds r1, r6, #0
	adds r1, #0x52
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x48
	ldrh r0, [r0]
	cmp r0, #0
	bne _0802D848
	adds r0, r7, #0
	adds r0, #0x79
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0802D882
_0802D848:
	add r5, sp, #8
	adds r0, r7, #0
	adds r1, r4, #0
	adds r2, r5, #0
	bl sub_802D7B8
	mov r0, r8
	cmp r0, #0
	beq _0802D868
	ldr r0, [sp]
	cmp r0, r7
	bne _0802D868
	adds r1, r4, #0
	adds r2, r5, #0
	bl sub_802D7B8
_0802D868:
	ldr r0, _0802D8F0 @ =gBattleUnitA
	adds r0, #0x4a
	ldrh r0, [r0]
	ldr r1, _0802D8F4 @ =gBattleUnitB
	bl IsItemEffectiveAgainst
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0802D882
	adds r1, r6, #0
	adds r1, #0x52
	movs r0, #1
	strb r0, [r1]
_0802D882:
	adds r4, r6, #0
	adds r4, #0x51
	movs r0, #0
	strb r0, [r4]
	adds r1, r6, #0
	adds r1, #0x53
	strb r0, [r1]
	ldr r5, _0802D8F4 @ =gBattleUnitB
	adds r0, r5, #0
	adds r0, #0x48
	ldrh r0, [r0]
	adds r7, r1, #0
	cmp r0, #0
	bne _0802D8AC
	adds r0, r5, #0
	adds r0, #0x79
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0802D8E2
_0802D8AC:
	add r6, sp, #0xc
	adds r0, r5, #0
	adds r1, r4, #0
	adds r2, r6, #0
	bl sub_802D7B8
	mov r0, r8
	cmp r0, #0
	beq _0802D8CC
	ldr r0, [sp]
	cmp r0, r5
	bne _0802D8CC
	adds r1, r4, #0
	adds r2, r6, #0
	bl sub_802D7B8
_0802D8CC:
	ldr r0, _0802D8F4 @ =gBattleUnitB
	adds r0, #0x4a
	ldrh r0, [r0]
	ldr r1, _0802D8F0 @ =gBattleUnitA
	bl IsItemEffectiveAgainst
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0802D8E2
	movs r0, #1
	strb r0, [r7]
_0802D8E2:
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0802D8F0: .4byte gBattleUnitA
_0802D8F4: .4byte gBattleUnitB

	thumb_func_start sub_802D8F8
sub_802D8F8: @ 0x0802D8F8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	ldr r0, _0802D978 @ =gUnk_Tm_02003738
	ldr r1, _0802D97C @ =0x08101E54
	movs r2, #0x90
	lsls r2, r2, #5
	bl TmApplyTsa_t
	ldr r4, _0802D980 @ =gUnk_Tm_02003238
	adds r0, r4, #0
	movs r1, #0xa
	movs r2, #0xf
	movs r3, #0
	bl TmFillRect_t
	adds r0, r4, #0
	adds r0, #0x46
	adds r5, r6, #0
	adds r5, #0x38
	ldr r2, _0802D984 @ =gBattleUnitA
	adds r1, r5, #0
	bl sub_802D730
	ldr r1, _0802D988 @ =0x000002C2
	adds r0, r4, r1
	ldr r7, _0802D98C @ =gBattleUnitB
	adds r1, r5, #0
	adds r2, r7, #0
	bl sub_802D730
	ldr r2, _0802D990 @ =0x00000342
	adds r4, r4, r2
	adds r6, #0x48
	adds r0, r7, #0
	adds r0, #0x4a
	ldrh r2, [r0]
	adds r0, r4, #0
	adds r1, r6, #0
	bl sub_802D774
	adds r0, r7, #0
	adds r0, #0x48
	ldrh r0, [r0]
	cmp r0, #0
	bne _0802D994
	adds r0, r7, #0
	adds r0, #0x79
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0802D994
	movs r4, #1
	rsbs r4, r4, #0
	adds r0, r7, #0
	adds r0, #0x62
	movs r1, #0xff
	strh r1, [r0]
	adds r0, #6
	strh r1, [r0]
	mov r8, r7
	b _0802D9B0
	.align 2, 0
_0802D978: .4byte gUnk_Tm_02003738
_0802D97C: .4byte 0x08101E54
_0802D980: .4byte gUnk_Tm_02003238
_0802D984: .4byte gBattleUnitA
_0802D988: .4byte 0x000002C2
_0802D98C: .4byte gBattleUnitB
_0802D990: .4byte 0x00000342
_0802D994:
	ldr r2, _0802DACC @ =gBattleUnitB
	adds r0, r2, #0
	adds r0, #0x58
	movs r3, #0
	ldrsh r1, [r0, r3]
	ldr r0, _0802DAD0 @ =gBattleUnitA
	adds r0, #0x5a
	movs r3, #0
	ldrsh r0, [r0, r3]
	subs r4, r1, r0
	mov r8, r2
	cmp r4, #0
	bge _0802D9B0
	movs r4, #0
_0802D9B0:
	ldr r5, _0802DAD4 @ =0x020032FC
	mov r6, r8
	adds r0, r6, #0
	adds r0, #0x6e
	movs r2, #0
	ldrsb r2, [r0, r2]
	adds r0, r5, #0
	movs r1, #2
	bl PutNumberTwoChr
	adds r0, r5, #0
	adds r0, #0x80
	movs r1, #2
	adds r2, r4, #0
	bl PutNumberTwoChr
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r5, r1
	adds r1, r6, #0
	adds r1, #0x62
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #2
	bl PutNumberTwoChr
	movs r1, #0xc0
	lsls r1, r1, #1
	adds r0, r5, r1
	adds r1, r6, #0
	adds r1, #0x68
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #2
	bl PutNumberTwoChr
	ldr r7, _0802DAD0 @ =gBattleUnitA
	adds r0, r7, #0
	adds r0, #0x58
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r0, r6, #0
	adds r0, #0x5a
	movs r3, #0
	ldrsh r0, [r0, r3]
	subs r4, r1, r0
	cmp r4, #0
	bge _0802DA12
	movs r4, #0
_0802DA12:
	adds r0, r5, #0
	adds r0, #0xc
	adds r1, r7, #0
	adds r1, #0x6e
	movs r2, #0
	ldrsb r2, [r1, r2]
	movs r1, #2
	bl PutNumberTwoChr
	adds r0, r5, #0
	adds r0, #0x8c
	movs r1, #2
	adds r2, r4, #0
	bl PutNumberTwoChr
	movs r1, #0x86
	lsls r1, r1, #1
	adds r0, r5, r1
	adds r1, r7, #0
	adds r1, #0x62
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #2
	bl PutNumberTwoChr
	movs r1, #0xc6
	lsls r1, r1, #1
	adds r0, r5, r1
	adds r1, r7, #0
	adds r1, #0x68
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #2
	bl PutNumberTwoChr
	adds r0, r5, #4
	movs r1, #3
	movs r2, #0x22
	movs r3, #0x23
	bl PutTwoSpecialChar
	ldr r4, _0802DAD8 @ =0x02002FD8
	adds r1, r5, #0
	adds r1, #0x82
	adds r0, r4, #0
	bl PutText
	adds r0, r4, #0
	adds r0, #8
	movs r2, #0x81
	lsls r2, r2, #1
	adds r1, r5, r2
	bl PutText
	adds r4, #0x10
	movs r3, #0xc1
	lsls r3, r3, #1
	adds r1, r5, r3
	adds r0, r4, #0
	bl PutText
	ldr r0, _0802DADC @ =0x0000020A
	adds r4, r5, r0
	mov r0, r8
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemIcon
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r4, #0
	bl PutIcon
	adds r4, r5, #0
	subs r4, #0x82
	adds r0, r7, #0
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemIcon
	adds r1, r0, #0
	movs r2, #0xc0
	lsls r2, r2, #6
	adds r0, r4, #0
	bl PutIcon
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0802DACC: .4byte gBattleUnitB
_0802DAD0: .4byte gBattleUnitA
_0802DAD4: .4byte 0x020032FC
_0802DAD8: .4byte 0x02002FD8
_0802DADC: .4byte 0x0000020A

	thumb_func_start sub_802DAE0
sub_802DAE0: @ 0x0802DAE0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r5, r0, #0
	ldr r0, _0802DCCC @ =gUnk_Tm_02003738
	ldr r1, _0802DCD0 @ =0x08101F98
	movs r2, #0x90
	lsls r2, r2, #5
	bl TmApplyTsa_t
	ldr r7, _0802DCD4 @ =gUnk_Tm_02003238
	adds r0, r7, #0
	movs r1, #0xa
	movs r2, #0x13
	movs r3, #0
	bl TmFillRect_t
	adds r0, r7, #0
	adds r0, #0x46
	adds r4, r5, #0
	adds r4, #0x38
	ldr r1, _0802DCD8 @ =gBattleUnitA
	mov r8, r1
	adds r1, r4, #0
	mov r2, r8
	bl sub_802D730
	ldr r2, _0802DCDC @ =0x000003C2
	adds r0, r7, r2
	ldr r6, _0802DCE0 @ =gBattleUnitB
	adds r1, r4, #0
	adds r2, r6, #0
	bl sub_802D730
	ldr r3, _0802DCE4 @ =0x00000442
	adds r0, r7, r3
	adds r5, #0x48
	movs r1, #0x4a
	adds r1, r1, r6
	mov sb, r1
	ldrh r2, [r1]
	adds r1, r5, #0
	bl sub_802D774
	adds r0, r6, #0
	adds r0, #0x48
	ldrh r0, [r0]
	cmp r0, #0
	bne _0802DB54
	adds r0, r6, #0
	adds r0, #0x58
	movs r1, #0xff
	strh r1, [r0]
	adds r0, #0xa
	strh r1, [r0]
	adds r0, #6
	strh r1, [r0]
_0802DB54:
	adds r0, r7, #0
	adds r0, #0xc4
	adds r1, r6, #0
	adds r1, #0x6e
	movs r2, #0
	ldrsb r2, [r1, r2]
	movs r1, #2
	bl PutNumberTwoChr
	movs r2, #0xa2
	lsls r2, r2, #1
	adds r0, r7, r2
	adds r1, r6, #0
	adds r1, #0x58
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #2
	bl PutNumberTwoChr
	movs r1, #0xe2
	lsls r1, r1, #1
	adds r0, r7, r1
	adds r1, r6, #0
	adds r1, #0x5a
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #2
	bl PutNumberTwoChr
	movs r1, #0x91
	lsls r1, r1, #2
	adds r0, r7, r1
	adds r1, r6, #0
	adds r1, #0x62
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #2
	bl PutNumberTwoChr
	movs r1, #0xb1
	lsls r1, r1, #2
	adds r0, r7, r1
	adds r1, r6, #0
	adds r1, #0x68
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #2
	bl PutNumberTwoChr
	movs r1, #0xd1
	lsls r1, r1, #2
	adds r0, r7, r1
	adds r1, r6, #0
	adds r1, #0x5c
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #2
	bl PutNumberTwoChr
	adds r0, r7, #0
	adds r0, #0xd0
	mov r1, r8
	adds r1, #0x6e
	movs r2, #0
	ldrsb r2, [r1, r2]
	movs r1, #2
	bl PutNumberTwoChr
	movs r1, #0xa8
	lsls r1, r1, #1
	adds r0, r7, r1
	mov r1, r8
	adds r1, #0x58
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #2
	bl PutNumberTwoChr
	movs r1, #0xe8
	lsls r1, r1, #1
	adds r0, r7, r1
	mov r1, r8
	adds r1, #0x5a
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #2
	bl PutNumberTwoChr
	movs r1, #0x94
	lsls r1, r1, #2
	adds r0, r7, r1
	mov r1, r8
	adds r1, #0x62
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #2
	bl PutNumberTwoChr
	movs r1, #0xb4
	lsls r1, r1, #2
	adds r0, r7, r1
	mov r1, r8
	adds r1, #0x68
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #2
	bl PutNumberTwoChr
	movs r1, #0xd4
	lsls r1, r1, #2
	adds r0, r7, r1
	mov r1, r8
	adds r1, #0x5c
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #2
	bl PutNumberTwoChr
	adds r0, r7, #0
	adds r0, #0xc8
	movs r1, #3
	movs r2, #0x22
	movs r3, #0x23
	bl PutTwoSpecialChar
	ldr r4, _0802DCE8 @ =0x02002FF0
	movs r0, #0xa3
	lsls r0, r0, #1
	adds r1, r7, r0
	adds r0, r4, #0
	bl PutText
	adds r0, r4, #0
	adds r0, #8
	movs r2, #0xe3
	lsls r2, r2, #1
	adds r1, r7, r2
	bl PutText
	adds r0, r4, #0
	subs r0, #0x10
	ldr r3, _0802DCEC @ =0x00000246
	adds r1, r7, r3
	bl PutText
	adds r0, r4, #0
	subs r0, #8
	ldr r2, _0802DCF0 @ =0x000002C6
	adds r1, r7, r2
	bl PutText
	adds r0, r4, #0
	adds r0, #0x10
	ldr r3, _0802DCF4 @ =0x00000346
	adds r1, r7, r3
	bl PutText
	ldr r0, _0802DCF8 @ =0x000003CE
	adds r4, r7, r0
	mov r1, sb
	ldrh r0, [r1]
	bl GetItemIcon
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r4, #0
	bl PutIcon
	adds r4, r7, #0
	adds r4, #0x42
	mov r0, r8
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemIcon
	adds r1, r0, #0
	movs r2, #0xc0
	lsls r2, r2, #6
	adds r0, r4, #0
	bl PutIcon
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0802DCCC: .4byte gUnk_Tm_02003738
_0802DCD0: .4byte 0x08101F98
_0802DCD4: .4byte gUnk_Tm_02003238
_0802DCD8: .4byte gBattleUnitA
_0802DCDC: .4byte 0x000003C2
_0802DCE0: .4byte gBattleUnitB
_0802DCE4: .4byte 0x00000442
_0802DCE8: .4byte 0x02002FF0
_0802DCEC: .4byte 0x00000246
_0802DCF0: .4byte 0x000002C6
_0802DCF4: .4byte 0x00000346
_0802DCF8: .4byte 0x000003CE

	thumb_func_start sub_802DCFC
sub_802DCFC: @ 0x0802DCFC
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0
	str r1, [r4, #0x2c]
	adds r0, #0x34
	strb r1, [r0]
	subs r0, #2
	ldrb r0, [r0]
	cmp r0, #1
	beq _0802DD16
	cmp r0, #2
	beq _0802DD24
	b _0802DD30
_0802DD16:
	adds r0, r4, #0
	bl sub_802D7F0
	adds r0, r4, #0
	bl sub_802D8F8
	b _0802DD30
_0802DD24:
	adds r0, r4, #0
	bl sub_802D7F0
	adds r0, r4, #0
	bl sub_802DAE0
_0802DD30:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_802DD38
sub_802DD38: @ 0x0802DD38
	cmp r0, #0x40
	beq _0802DD60
	cmp r0, #0x40
	bgt _0802DD46
	cmp r0, #0
	beq _0802DD50
	b _0802DD6A
_0802DD46:
	cmp r0, #0x80
	beq _0802DD58
	cmp r0, #0xc0
	beq _0802DD68
	b _0802DD6A
_0802DD50:
	ldr r0, _0802DD54 @ =0x08101DD4
	b _0802DD6A
	.align 2, 0
_0802DD54: .4byte 0x08101DD4
_0802DD58:
	ldr r0, _0802DD5C @ =0x08101DF4
	b _0802DD6A
	.align 2, 0
_0802DD5C: .4byte 0x08101DF4
_0802DD60:
	ldr r0, _0802DD64 @ =0x08101E14
	b _0802DD6A
	.align 2, 0
_0802DD64: .4byte 0x08101E14
_0802DD68:
	ldr r0, _0802DD6C @ =0x08101E34
_0802DD6A:
	bx lr
	.align 2, 0
_0802DD6C: .4byte 0x08101E34

	thumb_func_start sub_802DD70
sub_802DD70: @ 0x0802DD70
	push {r4, lr}
	ldr r0, _0802DDA4 @ =gBattleUnitA
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r4, #0xc0
	ands r0, r4
	bl sub_802DD38
	movs r1, #0x20
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r1, _0802DDA8 @ =gBattleUnitB
	movs r0, #0xb
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq _0802DDAC
	ands r0, r4
	bl sub_802DD38
	movs r1, #0x40
	movs r2, #0x20
	bl ApplyPaletteExt
	b _0802DDBA
	.align 2, 0
_0802DDA4: .4byte gBattleUnitA
_0802DDA8: .4byte gBattleUnitB
_0802DDAC:
	movs r0, #0xc0
	bl sub_802DD38
	movs r1, #0x40
	movs r2, #0x20
	bl ApplyPaletteExt
_0802DDBA:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_802DDC0
sub_802DDC0: @ 0x0802DDC0
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _0802DE34 @ =0x08101AE4
	ldr r1, _0802DE38 @ =0x06004000
	bl Decompress
	ldr r0, _0802DE3C @ =0x0810212C
	ldr r4, _0802DE40 @ =gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r1, _0802DE44 @ =0x06015D00
	adds r0, r4, #0
	movs r2, #4
	movs r3, #2
	bl Copy2dChr
	ldr r0, _0802DE48 @ =0x081021D8
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	bl ResetTextFont
	bl InitIcons
	bl sub_802D66C
	bl sub_802D6F4
	adds r0, r5, #0
	adds r0, #0x38
	movs r1, #6
	bl InitTextDb
	adds r0, r5, #0
	adds r0, #0x40
	movs r1, #6
	bl InitTextDb
	adds r0, r5, #0
	adds r0, #0x48
	movs r1, #7
	bl InitTextDb
	ldr r2, _0802DE4C @ =0x0000FFFF
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	adds r1, r5, #0
	adds r1, #0x33
	movs r0, #1
	strb r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0802DE34: .4byte 0x08101AE4
_0802DE38: .4byte 0x06004000
_0802DE3C: .4byte 0x0810212C
_0802DE40: .4byte gBuf
_0802DE44: .4byte 0x06015D00
_0802DE48: .4byte 0x081021D8
_0802DE4C: .4byte 0x0000FFFF

	thumb_func_start sub_802DE50
sub_802DE50: @ 0x0802DE50
	push {lr}
	movs r0, #1
	rsbs r0, r0, #0
	bl sub_8041308
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_802DE60
sub_802DE60: @ 0x0802DE60
	push {r4, lr}
	adds r1, r0, #0
	adds r1, #0x32
	movs r4, #0x14
	ldrb r1, [r1]
	cmp r1, #1
	bne _0802DE70
	movs r4, #0x10
_0802DE70:
	adds r0, #0x35
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _0802DEA8
	ldr r0, _0802DE98 @ =gUnk_Tm_02003238
	ldr r1, _0802DE9C @ =gBg0Tm
	movs r2, #0xa
	adds r3, r4, #0
	bl TmCopyRect_t
	ldr r0, _0802DEA0 @ =gUnk_Tm_02003738
	ldr r1, _0802DEA4 @ =gBg1Tm
	movs r2, #0xa
	adds r3, r4, #0
	bl TmCopyRect_t
	b _0802DEC0
	.align 2, 0
_0802DE98: .4byte gUnk_Tm_02003238
_0802DE9C: .4byte gBg0Tm
_0802DEA0: .4byte gUnk_Tm_02003738
_0802DEA4: .4byte gBg1Tm
_0802DEA8:
	ldr r0, _0802DECC @ =gUnk_Tm_02003238
	ldr r1, _0802DED0 @ =0x02021B30
	movs r2, #0xa
	adds r3, r4, #0
	bl TmCopyRect_t
	ldr r0, _0802DED4 @ =gUnk_Tm_02003738
	ldr r1, _0802DED8 @ =0x02022330
	movs r2, #0xa
	adds r3, r4, #0
	bl TmCopyRect_t
_0802DEC0:
	movs r0, #3
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802DECC: .4byte gUnk_Tm_02003238
_0802DED0: .4byte 0x02021B30
_0802DED4: .4byte gUnk_Tm_02003738
_0802DED8: .4byte 0x02022330

	thumb_func_start sub_802DEDC
sub_802DEDC: @ 0x0802DEDC
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	movs r6, #0
	movs r5, #0
	ldr r0, _0802DF78 @ =gBattleUnitA
	adds r0, #0x51
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble _0802DEF4
	movs r6, #1
_0802DEF4:
	cmp r0, #0
	bge _0802DEFA
	movs r6, #2
_0802DEFA:
	ldr r0, _0802DF7C @ =gBattleUnitB
	adds r0, #0x51
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble _0802DF0A
	movs r5, #1
_0802DF0A:
	cmp r0, #0
	bge _0802DF10
	movs r5, #2
_0802DF10:
	cmp r5, #0
	beq _0802DF40
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r0, #8
	lsls r0, r0, #3
	adds r3, r0, #3
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r0, #0xb
	lsls r1, r0, #3
	movs r2, #0
	cmp r5, #2
	bne _0802DF3A
	movs r2, #1
_0802DF3A:
	adds r0, r3, #0
	bl PutSysArrow
_0802DF40:
	cmp r6, #0
	beq _0802DF70
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r0, #2
	lsls r0, r0, #3
	adds r3, r0, #3
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r0, #1
	lsls r1, r0, #3
	movs r2, #0
	cmp r6, #2
	bne _0802DF6A
	movs r2, #1
_0802DF6A:
	adds r0, r3, #0
	bl PutSysArrow
_0802DF70:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802DF78: .4byte gBattleUnitA
_0802DF7C: .4byte gBattleUnitB

	thumb_func_start sub_802DF80
sub_802DF80: @ 0x0802DF80
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldr r1, [r7, #0x2c]
	lsls r1, r1, #2
	movs r0, #0xff
	ldr r2, _0802E010 @ =gSinLut
	ands r1, r0
	lsls r0, r1, #1
	adds r0, r0, r2
	movs r3, #0
	ldrsh r0, [r0, r3]
	asrs r6, r0, #0xa
	adds r1, #0x40
	lsls r1, r1, #1
	adds r1, r1, r2
	movs r4, #0
	ldrsh r0, [r1, r4]
	asrs r5, r0, #0xb
	subs r1, r6, #3
	adds r0, r7, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r6, r1, r0
	adds r0, r7, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #3
	adds r5, r5, r0
	adds r4, r7, #0
	adds r4, #0x50
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #1
	ble _0802DFE6
	adds r1, r6, #0
	adds r1, #0x48
	adds r2, r5, #0
	adds r2, #0x28
	ldr r3, _0802E014 @ =Sprite_16x16
	ldr r4, _0802E018 @ =0x000022E6
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #4
	bl PutSprite
_0802DFE6:
	adds r4, r7, #0
	adds r4, #0x51
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #1
	ble _0802E008
	adds r1, r6, #0
	adds r1, #0x18
	adds r2, r5, #0
	adds r2, #0x28
	ldr r3, _0802E014 @ =Sprite_16x16
	ldr r4, _0802E018 @ =0x000022E6
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #4
	bl PutSprite
_0802E008:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0802E010: .4byte gSinLut
_0802E014: .4byte Sprite_16x16
_0802E018: .4byte 0x000022E6

	thumb_func_start sub_802E01C
sub_802E01C: @ 0x0802E01C
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x52
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0802E040
	ldr r0, _0802E03C @ =0x085C83A0
	ldr r1, [r4, #0x2c]
	movs r2, #0x1f
	ands r1, r2
	adds r1, r1, r0
	ldrb r0, [r1]
	b _0802E042
	.align 2, 0
_0802E03C: .4byte 0x085C83A0
_0802E040:
	movs r0, #0
_0802E042:
	lsls r0, r0, #5
	ldr r1, _0802E06C @ =0x02003008
	adds r0, r0, r1
	movs r1, #0x60
	movs r2, #0x20
	bl ApplyPaletteExt
	adds r0, r4, #0
	adds r0, #0x53
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0802E074
	ldr r0, _0802E070 @ =0x085C83A0
	ldr r1, [r4, #0x2c]
	movs r2, #0x1f
	ands r1, r2
	adds r1, r1, r0
	ldrb r0, [r1]
	b _0802E076
	.align 2, 0
_0802E06C: .4byte 0x02003008
_0802E070: .4byte 0x085C83A0
_0802E074:
	movs r0, #0
_0802E076:
	lsls r0, r0, #5
	ldr r1, _0802E08C @ =0x02003008
	adds r0, r0, r1
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802E08C: .4byte 0x02003008

	thumb_func_start sub_802E090
sub_802E090: @ 0x0802E090
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	adds r0, #1
	str r0, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0802E0D8
	bl sub_802D638
	adds r1, r0, #0
	cmp r1, #0
	beq _0802E0C8
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r1, r0
	beq _0802E0C8
	adds r0, r4, #0
	bl Proc_Break
	b _0802E0F4
_0802E0C8:
	adds r0, r4, #0
	bl sub_802DCFC
	adds r0, r4, #0
	bl sub_802DE60
	bl sub_802DD70
_0802E0D8:
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #1
	bne _0802E0F4
	adds r0, r4, #0
	bl sub_802DEDC
	adds r0, r4, #0
	bl sub_802DF80
	adds r0, r4, #0
	bl sub_802E01C
_0802E0F4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_802E0FC
sub_802E0FC: @ 0x0802E0FC
	push {r4, lr}
	adds r4, r0, #0
	bl sub_802DCFC
	bl sub_802D638
	adds r1, r4, #0
	adds r1, #0x35
	movs r2, #0
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x36
	strb r2, [r0]
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bge _0802E126
	adds r0, r4, #0
	adds r0, #0x30
	strb r2, [r0]
	b _0802E12E
_0802E126:
	adds r1, r4, #0
	adds r1, #0x30
	movs r0, #0x14
	strb r0, [r1]
_0802E12E:
	adds r1, r4, #0
	adds r1, #0x31
	movs r0, #0
	strb r0, [r1]
	bl sub_802DD70
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_802E140
sub_802E140: @ 0x0802E140
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r0, #0
	adds r0, #0x32
	movs r1, #0x14
	mov sb, r1
	ldrb r0, [r0]
	cmp r0, #1
	bne _0802E15C
	movs r2, #0x10
	mov sb, r2
_0802E15C:
	ldr r0, _0802E1C0 @ =gBg0Tm
	mov r8, r0
	movs r1, #0
	bl TmFill
	ldr r1, _0802E1C4 @ =gBg1Tm
	mov sl, r1
	mov r0, sl
	movs r1, #0
	bl TmFill
	movs r0, #3
	bl EnableBgSync
	ldr r1, _0802E1C8 @ =0x085C83C0
	adds r2, r7, #0
	adds r2, #0x36
	movs r0, #0
	ldrsb r0, [r2, r0]
	adds r0, r0, r1
	movs r5, #0
	ldrsb r5, [r0, r5]
	adds r0, r7, #0
	adds r0, #0x35
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r6, r2, #0
	cmp r0, #0
	bge _0802E1D4
	movs r4, #0xa
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r0, _0802E1CC @ =gUnk_Tm_02003238
	adds r0, r4, r0
	mov r1, r8
	adds r2, r5, #0
	mov r3, sb
	bl TmCopyRect_t
	ldr r0, _0802E1D0 @ =gUnk_Tm_02003738
	adds r4, r4, r0
	adds r0, r4, #0
	mov r1, sl
	adds r2, r5, #0
	mov r3, sb
	bl TmCopyRect_t
	b _0802E1F6
	.align 2, 0
_0802E1C0: .4byte gBg0Tm
_0802E1C4: .4byte gBg1Tm
_0802E1C8: .4byte 0x085C83C0
_0802E1CC: .4byte gUnk_Tm_02003238
_0802E1D0: .4byte gUnk_Tm_02003738
_0802E1D4:
	ldr r0, _0802E21C @ =gUnk_Tm_02003238
	movs r4, #0x1e
	subs r4, r4, r5
	lsls r4, r4, #1
	mov r2, r8
	adds r1, r4, r2
	adds r2, r5, #0
	mov r3, sb
	bl TmCopyRect_t
	ldr r0, _0802E220 @ =gUnk_Tm_02003738
	add r4, sl
	adds r1, r4, #0
	adds r2, r5, #0
	mov r3, sb
	bl TmCopyRect_t
_0802E1F6:
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #4
	bne _0802E20E
	movs r0, #0
	strb r0, [r6]
	adds r0, r7, #0
	bl Proc_Break
_0802E20E:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0802E21C: .4byte gUnk_Tm_02003238
_0802E220: .4byte gUnk_Tm_02003738

	thumb_func_start sub_802E224
sub_802E224: @ 0x0802E224
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r0, #0
	adds r0, #0x32
	movs r1, #0x14
	mov sb, r1
	ldrb r0, [r0]
	cmp r0, #1
	bne _0802E240
	movs r2, #0x10
	mov sb, r2
_0802E240:
	ldr r0, _0802E2A4 @ =gBg0Tm
	mov r8, r0
	movs r1, #0
	bl TmFill
	ldr r1, _0802E2A8 @ =gBg1Tm
	mov sl, r1
	mov r0, sl
	movs r1, #0
	bl TmFill
	movs r0, #3
	bl EnableBgSync
	ldr r1, _0802E2AC @ =0x085C83C4
	adds r2, r7, #0
	adds r2, #0x36
	movs r0, #0
	ldrsb r0, [r2, r0]
	adds r0, r0, r1
	movs r5, #0
	ldrsb r5, [r0, r5]
	adds r0, r7, #0
	adds r0, #0x35
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r6, r2, #0
	cmp r0, #0
	bge _0802E2B8
	movs r4, #0xa
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r0, _0802E2B0 @ =gUnk_Tm_02003238
	adds r0, r4, r0
	mov r1, r8
	adds r2, r5, #0
	mov r3, sb
	bl TmCopyRect_t
	ldr r0, _0802E2B4 @ =gUnk_Tm_02003738
	adds r4, r4, r0
	adds r0, r4, #0
	mov r1, sl
	adds r2, r5, #0
	mov r3, sb
	bl TmCopyRect_t
	b _0802E2DA
	.align 2, 0
_0802E2A4: .4byte gBg0Tm
_0802E2A8: .4byte gBg1Tm
_0802E2AC: .4byte 0x085C83C4
_0802E2B0: .4byte gUnk_Tm_02003238
_0802E2B4: .4byte gUnk_Tm_02003738
_0802E2B8:
	ldr r0, _0802E300 @ =gUnk_Tm_02003238
	movs r4, #0x1e
	subs r4, r4, r5
	lsls r4, r4, #1
	mov r2, r8
	adds r1, r4, r2
	adds r2, r5, #0
	mov r3, sb
	bl TmCopyRect_t
	ldr r0, _0802E304 @ =gUnk_Tm_02003738
	add r4, sl
	adds r1, r4, #0
	adds r2, r5, #0
	mov r3, sb
	bl TmCopyRect_t
_0802E2DA:
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #4
	bne _0802E2F2
	movs r0, #0
	strb r0, [r6]
	adds r0, r7, #0
	bl Proc_Break
_0802E2F2:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0802E300: .4byte gUnk_Tm_02003238
_0802E304: .4byte gUnk_Tm_02003738

	thumb_func_start sub_802E308
sub_802E308: @ 0x0802E308
	push {r4, lr}
	ldr r4, _0802E31C @ =gPlaySt
	ldrb r1, [r4, #0x1e]
	lsls r0, r1, #0x1c
	lsrs r0, r0, #0x1e
	cmp r0, #2
	bne _0802E320
	bl ResetTextFont
	b _0802E360
	.align 2, 0
_0802E31C: .4byte gPlaySt
_0802E320:
	ldr r0, _0802E344 @ =ProcScr_Unk_085C83C8
	movs r1, #3
	bl SpawnProc
	adds r1, r0, #0
	adds r2, r1, #0
	adds r2, #0x33
	movs r0, #0
	strb r0, [r2]
	ldrb r4, [r4, #0x1e]
	lsls r0, r4, #0x1c
	lsrs r0, r0, #0x1e
	cmp r0, #0
	beq _0802E348
	cmp r0, #1
	beq _0802E34E
	b _0802E354
	.align 2, 0
_0802E344: .4byte ProcScr_Unk_085C83C8
_0802E348:
	adds r1, #0x32
	movs r0, #1
	b _0802E352
_0802E34E:
	adds r1, #0x32
	movs r0, #2
_0802E352:
	strb r0, [r1]
_0802E354:
	ldr r0, _0802E368 @ =gMapMovement
	ldr r0, [r0]
	movs r1, #1
	rsbs r1, r1, #0
	bl MapFill
_0802E360:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802E368: .4byte gMapMovement

	thumb_func_start sub_802E36C
sub_802E36C: @ 0x0802E36C
	push {lr}
	ldr r0, _0802E390 @ =ProcScr_Unk_085C83C8
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _0802E38C
	adds r0, #0x33
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0802E38C
	adds r1, #0x34
	movs r0, #1
	strb r0, [r1]
_0802E38C:
	pop {r0}
	bx r0
	.align 2, 0
_0802E390: .4byte ProcScr_Unk_085C83C8

	thumb_func_start sub_802E394
sub_802E394: @ 0x0802E394
	push {r4, lr}
	ldr r0, _0802E3BC @ =ProcScr_Unk_085C83C8
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _0802E3C8
	adds r0, #0x33
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0802E3C0
	bl ClearBg0Bg1
	adds r0, r4, #0
	bl Proc_End
	b _0802E3C8
	.align 2, 0
_0802E3BC: .4byte ProcScr_Unk_085C83C8
_0802E3C0:
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
_0802E3C8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_802E3D0
sub_802E3D0: @ 0x0802E3D0
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, _0802E40C @ =ProcScr_Unk_085C83C8
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _0802E430
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r5, #0x14
	cmp r0, #0
	bge _0802E3F2
	movs r5, #0
_0802E3F2:
	movs r1, #1
	rsbs r1, r1, #0
	movs r0, #0
	bl sub_8070E70
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #1
	beq _0802E410
	cmp r0, #2
	beq _0802E424
	b _0802E430
	.align 2, 0
_0802E40C: .4byte ProcScr_Unk_085C83C8
_0802E410:
	ldr r0, _0802E420 @ =0x08677C4C
	adds r1, r6, #0
	adds r2, r5, #0
	movs r3, #0
	bl sub_8070A0C
	b _0802E430
	.align 2, 0
_0802E420: .4byte 0x08677C4C
_0802E424:
	ldr r0, _0802E438 @ =0x08677CF4
	adds r1, r6, #0
	adds r2, r5, #0
	movs r3, #0
	bl sub_8070A0C
_0802E430:
	movs r0, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0802E438: .4byte 0x08677CF4

	thumb_func_start sub_802E43C
sub_802E43C: @ 0x0802E43C
	lsls r1, r1, #0x18
	movs r2, #0
	cmp r1, #0
	beq _0802E446
	movs r2, #3
_0802E446:
	cmp r0, #0
	bge _0802E44C
	adds r2, #2
_0802E44C:
	cmp r0, #0
	ble _0802E452
	adds r2, #1
_0802E452:
	ldr r0, _0802E45C @ =0x085C8438
	lsls r1, r2, #1
	adds r1, r1, r0
	ldrh r0, [r1]
	bx lr
	.align 2, 0
_0802E45C: .4byte 0x085C8438

	thumb_func_start sub_802E460
sub_802E460: @ 0x0802E460
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0802E488 @ =ProcScr_Unk_085C83C8
	bl Proc_Find
	ldr r1, _0802E48C @ =gBattleUnitA
	adds r1, #0x51
	movs r2, #0
	ldrsb r2, [r1, r2]
	adds r0, #0x52
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r2, #0
	bl sub_802E43C
	adds r4, #0x4c
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802E488: .4byte ProcScr_Unk_085C83C8
_0802E48C: .4byte gBattleUnitA

	thumb_func_start sub_802E490
sub_802E490: @ 0x0802E490
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0802E4B8 @ =ProcScr_Unk_085C83C8
	bl Proc_Find
	ldr r1, _0802E4BC @ =gBattleUnitB
	adds r1, #0x51
	movs r2, #0
	ldrsb r2, [r1, r2]
	adds r0, #0x53
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r0, r2, #0
	bl sub_802E43C
	adds r4, #0x4c
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802E4B8: .4byte ProcScr_Unk_085C83C8
_0802E4BC: .4byte gBattleUnitB

	thumb_func_start sub_802E4C0
sub_802E4C0: @ 0x0802E4C0
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r2, _0802E51C @ =0x020395F8
	adds r3, r2, #0
	adds r3, #0x7b
	movs r1, #0
	movs r0, #1
	strb r0, [r3]
	adds r3, #3
	movs r0, #0xff
	strb r0, [r3]
	adds r0, r2, #0
	adds r0, #0x78
	strb r1, [r0]
	ldr r5, _0802E520 @ =0x0810DA20
	ldr r4, _0802E524 @ =gPlaySt
	movs r3, #0
	movs r1, #7
	adds r0, #0x15
_0802E4E6:
	strb r3, [r0]
	subs r0, #1
	subs r1, #1
	cmp r1, #0
	bge _0802E4E6
	adds r1, r2, #0
	adds r1, #0x80
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r0, [r0]
	str r0, [r1]
	adds r1, #4
	movs r0, #0
	strb r0, [r1]
	bl sub_8032A08
	bl sub_80308B0
	ldr r0, _0802E528 @ =0x085C8498
	adds r1, r6, #0
	bl SpawnProcLocking
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802E51C: .4byte 0x020395F8
_0802E520: .4byte 0x0810DA20
_0802E524: .4byte gPlaySt
_0802E528: .4byte 0x085C8498

	thumb_func_start sub_802E52C
sub_802E52C: @ 0x0802E52C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, _0802E57C @ =0x020395F8
	adds r2, r0, #0
	adds r2, #0x7b
	movs r1, #4
	strb r1, [r2]
	adds r2, #3
	movs r1, #0xff
	strb r1, [r2]
	adds r1, r0, #0
	ldr r5, _0802E580 @ =0x0810DA20
	ldr r4, _0802E584 @ =gPlaySt
	movs r0, #0
	movs r3, #7
	adds r2, r1, #0
	adds r2, #0x8d
_0802E54E:
	strb r0, [r2]
	subs r2, #1
	subs r3, #1
	cmp r3, #0
	bge _0802E54E
	adds r1, #0x80
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r0, [r0]
	str r0, [r1]
	bl sub_8032A08
	bl sub_80308B0
	ldr r0, _0802E588 @ =0x085C84B0
	adds r1, r6, #0
	bl SpawnProcLocking
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802E57C: .4byte 0x020395F8
_0802E580: .4byte 0x0810DA20
_0802E584: .4byte gPlaySt
_0802E588: .4byte 0x085C84B0

	thumb_func_start sub_802E58C
sub_802E58C: @ 0x0802E58C
	ldr r0, _0802E598 @ =0x020395F8
	adds r0, #0x7b
	movs r1, #0
	strb r1, [r0]
	bx lr
	.align 2, 0
_0802E598: .4byte 0x020395F8

	thumb_func_start sub_802E59C
sub_802E59C: @ 0x0802E59C
	push {r4, lr}
	ldr r4, _0802E5BC @ =0x085C84D0
	ldr r2, _0802E5C0 @ =0x020395F8
	adds r2, #0x78
	ldrb r1, [r2]
	adds r3, r1, #1
	strb r3, [r2]
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x16
	adds r1, r1, r4
	ldr r1, [r1]
	bl _call_via_r1
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802E5BC: .4byte 0x085C84D0
_0802E5C0: .4byte 0x020395F8

	thumb_func_start sub_802E5C4
sub_802E5C4: @ 0x0802E5C4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	mov r8, r0
	movs r5, #0
	ldr r0, _0802E654 @ =gPlaySt
	ldrb r2, [r0, #0xf]
	mov r1, sp
	ldr r0, _0802E658 @ =0x0810D668
	ldm r0!, {r3, r4, r6}
	stm r1!, {r3, r4, r6}
	movs r6, #0
	lsrs r0, r2, #6
	lsls r0, r0, #2
	mov r3, sp
	adds r1, r3, r0
	ldr r0, [r1]
	cmp r5, r0
	bge _0802E62A
	adds r7, r1, #0
	adds r4, r2, #1
_0802E5F0:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	ldr r0, [r2]
	cmp r0, #0
	beq _0802E620
	adds r1, r2, #0
	adds r1, #0x2e
	movs r0, #0xf
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #4
	bne _0802E620
	ldr r1, _0802E65C @ =0x00000427
	adds r0, r1, #0
	ldrh r2, [r2, #0xc]
	ands r0, r2
	cmp r0, #0
	bne _0802E620
	ldr r0, _0802E660 @ =0x020395F8
	adds r0, r5, r0
	strb r4, [r0]
	adds r5, #1
_0802E620:
	adds r4, #1
	adds r6, #1
	ldr r0, [r7]
	cmp r6, r0
	blt _0802E5F0
_0802E62A:
	cmp r5, #0
	beq _0802E646
	ldr r0, _0802E660 @ =0x020395F8
	adds r2, r5, r0
	movs r1, #0
	strb r1, [r2]
	str r0, [r0, #0x74]
	ldr r1, _0802E664 @ =0x03004570
	ldr r0, _0802E668 @ =sub_802EABC
	str r0, [r1]
	ldr r0, _0802E66C @ =0x085C8508
	mov r1, r8
	bl SpawnProcLocking
_0802E646:
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0802E654: .4byte gPlaySt
_0802E658: .4byte 0x0810D668
_0802E65C: .4byte 0x00000427
_0802E660: .4byte 0x020395F8
_0802E664: .4byte 0x03004570
_0802E668: .4byte sub_802EABC
_0802E66C: .4byte 0x085C8508

	thumb_func_start sub_802E670
sub_802E670: @ 0x0802E670
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_802E7C8
	adds r4, r0, #0
	cmp r4, #0
	beq _0802E69A
	bl sub_802E868
	ldr r0, _0802E6A0 @ =0x020395F8
	adds r2, r4, r0
	movs r1, #0
	strb r1, [r2]
	str r0, [r0, #0x74]
	ldr r1, _0802E6A4 @ =0x03004570
	ldr r0, _0802E6A8 @ =sub_802EABC
	str r0, [r1]
	ldr r0, _0802E6AC @ =0x085C8508
	adds r1, r5, #0
	bl SpawnProcLocking
_0802E69A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0802E6A0: .4byte 0x020395F8
_0802E6A4: .4byte 0x03004570
_0802E6A8: .4byte sub_802EABC
_0802E6AC: .4byte 0x085C8508

	thumb_func_start sub_802E6B0
sub_802E6B0: @ 0x0802E6B0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	movs r7, #0
	movs r0, #0
	mov r8, r0
	movs r6, #0
	ldrh r4, [r5, #0x1c]
	cmp r4, #0
	beq _0802E72E
_0802E6C6:
	adds r0, r5, #0
	adds r1, r4, #0
	bl CanUnitUseWeapon
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0802E6E2
	adds r0, r5, #0
	adds r1, r4, #0
	bl CanUnitUseStaff
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0802E71A
_0802E6E2:
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #4
	ands r1, r0
	cmp r1, #0
	bne _0802E740
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0802E71A
	adds r0, r4, #0
	bl GetItemMaxRange
	cmp r0, #1
	ble _0802E710
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	b _0802E71A
_0802E710:
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
_0802E71A:
	adds r6, #1
	cmp r6, #4
	bgt _0802E72E
	lsls r1, r6, #1
	adds r0, r5, #0
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r4, [r0]
	cmp r4, #0
	bne _0802E6C6
_0802E72E:
	cmp r7, #0
	beq _0802E736
	movs r0, #0x28
	b _0802E746
_0802E736:
	mov r0, r8
	cmp r0, #0
	bne _0802E744
	movs r0, #0x57
	b _0802E746
_0802E740:
	movs r0, #0x48
	b _0802E746
_0802E744:
	movs r0, #0x14
_0802E746:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_802E750
sub_802E750: @ 0x0802E750
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r1, #0x1a
	ldrsb r1, [r5, r1]
	ldr r0, [r5, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r4, r1, r0
	adds r0, r5, #0
	bl GetUnitLeaderPid
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	adds r6, r2, #0
	ldr r3, [r5]
	ldr r0, [r5, #4]
	ldr r1, [r3, #0x28]
	ldr r0, [r0, #0x24]
	orrs r1, r0
	movs r0, #0x30
	ands r0, r1
	cmp r0, #0
	beq _0802E786
	adds r0, r4, #0
	subs r0, #0x95
	b _0802E7C2
_0802E786:
	movs r0, #1
	ldrb r7, [r5, #0xa]
	ands r0, r7
	cmp r0, #0
	bne _0802E7C0
	lsls r0, r2, #8
	adds r4, r4, r0
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _0802E7A2
	adds r0, r4, #0
	adds r0, #0x3c
	b _0802E7C2
_0802E7A2:
	ldrb r0, [r3, #4]
	cmp r0, r6
	beq _0802E7B2
	movs r0, #0x80
	lsls r0, r0, #6
	ands r1, r0
	cmp r1, #0
	beq _0802E7B8
_0802E7B2:
	adds r0, r4, #0
	adds r0, #0x57
	b _0802E7C2
_0802E7B8:
	adds r0, r5, #0
	bl sub_802E6B0
	adds r4, r4, r0
_0802E7C0:
	adds r0, r4, #0
_0802E7C2:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_802E7C8
sub_802E7C8: @ 0x0802E7C8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	movs r5, #0
	ldr r0, _0802E854 @ =gPlaySt
	ldrb r2, [r0, #0xf]
	ldr r0, _0802E858 @ =0x085C8494
	ldr r0, [r0]
	mov r8, r0
	mov r1, sp
	ldr r0, _0802E85C @ =0x0810D668
	ldm r0!, {r3, r4, r6}
	stm r1!, {r3, r4, r6}
	movs r6, #0
	lsrs r0, r2, #6
	lsls r0, r0, #2
	mov r3, sp
	adds r1, r3, r0
	ldr r0, [r1]
	cmp r5, r0
	bge _0802E846
	adds r7, r1, #0
	adds r4, r2, #1
_0802E7F8:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	ldr r0, [r2]
	cmp r0, #0
	beq _0802E83C
	adds r0, r2, #0
	adds r0, #0x2e
	movs r1, #0xf
	ldrb r0, [r0]
	ands r1, r0
	cmp r1, #2
	beq _0802E83C
	cmp r1, #4
	beq _0802E83C
	ldr r1, _0802E860 @ =0x00000427
	adds r0, r1, #0
	ldrh r3, [r2, #0xc]
	ands r0, r3
	cmp r0, #0
	bne _0802E83C
	ldr r0, _0802E864 @ =0x020395F8
	adds r0, r5, r0
	strb r4, [r0]
	adds r0, r2, #0
	bl sub_802E750
	mov r1, r8
	adds r1, #4
	mov r8, r1
	subs r1, #4
	stm r1!, {r0}
	adds r5, #1
_0802E83C:
	adds r4, #1
	adds r6, #1
	ldr r0, [r7]
	cmp r6, r0
	blt _0802E7F8
_0802E846:
	adds r0, r5, #0
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0802E854: .4byte gPlaySt
_0802E858: .4byte 0x085C8494
_0802E85C: .4byte 0x0810D668
_0802E860: .4byte 0x00000427
_0802E864: .4byte 0x020395F8

	thumb_func_start sub_802E868
sub_802E868: @ 0x0802E868
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	cmp r0, #1
	ble _0802E8BE
	movs r5, #0
	subs r0, #2
	cmp r5, r0
	bgt _0802E8BE
	mov ip, r0
	ldr r1, _0802E8CC @ =0x085C8494
	mov sb, r1
	ldr r1, _0802E8D0 @ =0x020395F8
	mov r8, r1
_0802E886:
	adds r4, r0, #0
	adds r6, r5, #1
	cmp r0, r5
	blt _0802E8B6
	mov r7, sb
	mov r1, r8
	adds r3, r0, r1
_0802E894:
	ldr r1, [r7]
	lsls r0, r4, #2
	adds r0, r0, r1
	ldr r2, [r0]
	ldr r1, [r0, #4]
	cmp r2, r1
	bls _0802E8AE
	str r1, [r0]
	str r2, [r0, #4]
	ldrb r1, [r3]
	ldrb r0, [r3, #1]
	strb r0, [r3]
	strb r1, [r3, #1]
_0802E8AE:
	subs r3, #1
	subs r4, #1
	cmp r4, r5
	bge _0802E894
_0802E8B6:
	adds r5, r6, #0
	mov r0, ip
	cmp r5, r0
	ble _0802E886
_0802E8BE:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0802E8CC: .4byte 0x085C8494
_0802E8D0: .4byte 0x020395F8

	thumb_func_start sub_802E8D4
sub_802E8D4: @ 0x0802E8D4
	push {lr}
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_802E8E0
sub_802E8E0: @ 0x0802E8E0
	push {lr}
	ldr r0, _0802E8F8 @ =gActiveUnit
	ldr r1, [r0]
	movs r0, #0xc0
	ldrb r1, [r1, #0xb]
	ands r0, r1
	cmp r0, #0
	bne _0802E900
	ldr r1, _0802E8FC @ =gAction
	movs r0, #3
	b _0802E904
	.align 2, 0
_0802E8F8: .4byte gActiveUnit
_0802E8FC: .4byte gAction
_0802E900:
	ldr r1, _0802E910 @ =gAction
	movs r0, #2
_0802E904:
	strb r0, [r1, #0x16]
	movs r0, #3
	bl sub_80857B0
	pop {r0}
	bx r0
	.align 2, 0
_0802E910: .4byte gAction

	thumb_func_start sub_802E914
sub_802E914: @ 0x0802E914
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
_0802E918:
	ldr r4, _0802E958 @ =0x020395F8
	adds r0, r4, #0
	adds r0, #0x79
	movs r1, #0
	strb r1, [r0]
	ldr r2, [r4, #0x74]
	ldrb r0, [r2]
	cmp r0, #0
	beq _0802EA04
	adds r0, r4, #0
	adds r0, #0x7c
	strb r1, [r0]
	ldr r1, _0802E95C @ =gActiveUnitId
	ldrb r0, [r2]
	strb r0, [r1]
	ldrb r0, [r1]
	bl GetUnit
	ldr r6, _0802E960 @ =gActiveUnit
	str r0, [r6]
	movs r5, #6
	ldrh r1, [r0, #0xc]
	ands r5, r1
	cmp r5, #0
	bne _0802E950
	ldr r0, [r0]
	cmp r0, #0
	bne _0802E964
_0802E950:
	ldr r0, [r4, #0x74]
	adds r0, #1
	str r0, [r4, #0x74]
	b _0802E918
	.align 2, 0
_0802E958: .4byte 0x020395F8
_0802E95C: .4byte gActiveUnitId
_0802E960: .4byte gActiveUnit
_0802E964:
	bl RefreshEntityMaps
	bl RenderMap
	bl RefreshUnitSprites
	ldr r0, [r6]
	bl sub_8035064
	ldr r1, [r6]
	adds r1, #0x40
	movs r0, #0xf8
	ldrh r1, [r1]
	ands r0, r1
	lsrs r0, r0, #3
	adds r1, r4, #0
	adds r1, #0x7d
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x7a
	strb r5, [r0]
	bl sub_80326C4
	bl sub_802EA10
	ldr r0, _0802E9E0 @ =0x03004570
	ldr r0, [r0]
	bl _call_via_r0
	ldr r1, [r6]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r2, #0
	ldrh r3, [r1, #0xc]
	orrs r0, r3
	strh r0, [r1, #0xc]
	ldr r2, _0802E9E4 @ =gAiDecision
	movs r0, #0xa
	ldrsb r0, [r2, r0]
	cmp r0, #0
	beq _0802E9D0
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	ldrb r3, [r2, #2]
	cmp r0, r3
	bne _0802E9E8
	movs r0, #0xf
	ldrsb r0, [r1, r0]
	ldrb r1, [r2, #3]
	cmp r0, r1
	bne _0802E9E8
	ldrb r0, [r2]
	cmp r0, #0
	bne _0802E9E8
_0802E9D0:
	ldr r0, [r4, #0x74]
	adds r0, #1
	str r0, [r4, #0x74]
	adds r0, r7, #0
	movs r1, #0
	bl Proc_Goto
	b _0802EA0A
	.align 2, 0
_0802E9E0: .4byte 0x03004570
_0802E9E4: .4byte gAiDecision
_0802E9E8:
	ldr r0, _0802E9FC @ =0x020395F8
	ldr r1, [r0, #0x74]
	adds r1, #1
	str r1, [r0, #0x74]
	ldr r0, _0802EA00 @ =0x085C8560
	adds r1, r7, #0
	bl SpawnProcLocking
	b _0802EA0A
	.align 2, 0
_0802E9FC: .4byte 0x020395F8
_0802EA00: .4byte 0x085C8560
_0802EA04:
	adds r0, r7, #0
	bl Proc_End
_0802EA0A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_802EA10
sub_802EA10: @ 0x0802EA10
	ldr r1, _0802EA2C @ =gAiDecision
	movs r0, #0
	strb r0, [r1]
	strb r0, [r1, #1]
	strb r0, [r1, #2]
	strb r0, [r1, #3]
	strb r0, [r1, #4]
	strb r0, [r1, #5]
	strb r0, [r1, #6]
	strb r0, [r1, #7]
	strb r0, [r1, #8]
	strb r0, [r1, #9]
	strb r0, [r1, #0xa]
	bx lr
	.align 2, 0
_0802EA2C: .4byte gAiDecision

	thumb_func_start AiSetDecision
AiSetDecision: @ 0x0802EA30
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	ldr r6, [sp, #0x18]
	ldr r4, [sp, #0x1c]
	mov r8, r4
	ldr r4, [sp, #0x20]
	mov sb, r4
	ldr r4, _0802EA6C @ =gAiDecision
	ldr r5, _0802EA70 @ =gActiveUnitId
	ldrb r5, [r5]
	strb r5, [r4, #1]
	strb r0, [r4, #2]
	strb r1, [r4, #3]
	strb r2, [r4]
	strb r3, [r4, #6]
	strb r6, [r4, #7]
	mov r0, r8
	strb r0, [r4, #8]
	mov r0, sb
	strb r0, [r4, #9]
	movs r0, #1
	strb r0, [r4, #0xa]
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802EA6C: .4byte gAiDecision
_0802EA70: .4byte gActiveUnitId

	thumb_func_start AiUpdateDecision
AiUpdateDecision: @ 0x0802EA74
	push {r4, r5, lr}
	ldr r4, [sp, #0xc]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r5, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r1, _0802EAB8 @ =gAiDecision
	cmp r0, #0xff
	beq _0802EA94
	strb r0, [r1]
_0802EA94:
	cmp r5, #0xff
	beq _0802EA9A
	strb r5, [r1, #6]
_0802EA9A:
	cmp r2, #0xff
	beq _0802EAA0
	strb r2, [r1, #7]
_0802EAA0:
	cmp r3, #0xff
	beq _0802EAA6
	strb r3, [r1, #8]
_0802EAA6:
	cmp r4, #0xff
	beq _0802EAAC
	strb r4, [r1, #9]
_0802EAAC:
	movs r0, #1
	strb r0, [r1, #0xa]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0802EAB8: .4byte gAiDecision

	thumb_func_start sub_802EABC
sub_802EABC: @ 0x0802EABC
	push {r4, r5, lr}
	ldr r2, _0802EB14 @ =0x085C84D8
	ldr r0, _0802EB18 @ =0x020395F8
	adds r1, r0, #0
	adds r1, #0x79
	ldrb r3, [r1]
	lsls r0, r3, #2
	adds r0, r0, r2
	ldr r0, [r0]
	cmp r0, #0
	beq _0802EB0C
	ldr r0, _0802EB1C @ =gAiDecision
	ldrb r0, [r0, #0xa]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0802EB0C
	adds r5, r2, #0
	adds r4, r1, #0
_0802EAE2:
	ldrb r0, [r4]
	adds r1, r0, #1
	strb r1, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x16
	adds r0, r0, r5
	ldr r0, [r0]
	bl _call_via_r0
	ldrb r1, [r4]
	lsls r0, r1, #2
	adds r0, r0, r5
	ldr r0, [r0]
	cmp r0, #0
	beq _0802EB0C
	ldr r0, _0802EB1C @ =gAiDecision
	ldrb r0, [r0, #0xa]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0802EAE2
_0802EB0C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0802EB14: .4byte 0x085C84D8
_0802EB18: .4byte 0x020395F8
_0802EB1C: .4byte gAiDecision

	thumb_func_start sub_802EB20
sub_802EB20: @ 0x0802EB20
	push {r4, lr}
	sub sp, #8
	ldr r1, _0802EB6C @ =0x020395F8
	adds r1, #0x7b
	movs r0, #4
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _0802EBC8
	ldr r4, _0802EB70 @ =gActiveUnit
	ldr r0, [r4]
	bl sub_8032A60
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0802EBAC
	bl sub_8032AE0
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _0802EBC8
	ldr r1, [r4]
	movs r0, #8
	ldrb r1, [r1, #0xa]
	ands r0, r1
	cmp r0, #0
	beq _0802EB74
	bl sub_8032B84
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0802EB74
	bl sub_8033064
	b _0802EBC8
	.align 2, 0
_0802EB6C: .4byte 0x020395F8
_0802EB70: .4byte gActiveUnit
_0802EB74:
	add r4, sp, #4
	adds r0, r4, #0
	bl sub_8032838
	lsls r0, r0, #0x18
	asrs r2, r0, #0x18
	cmp r2, #1
	bne _0802EBC8
	add r0, sp, #4
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r3, #2
	ldrsh r1, [r4, r3]
	str r2, [sp]
	movs r2, #0
	movs r3, #0
	bl sub_803046C
	ldr r0, _0802EBA8 @ =gAiDecision
	ldrb r0, [r0, #0xa]
	cmp r0, #1
	bne _0802EBC8
	bl sub_8033090
	b _0802EBC8
	.align 2, 0
_0802EBA8: .4byte gAiDecision
_0802EBAC:
	ldr r1, [r4]
	movs r0, #8
	ldrb r1, [r1, #0xa]
	ands r0, r1
	cmp r0, #0
	beq _0802EBC8
	bl sub_8032B84
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0802EBC8
	bl sub_8033064
_0802EBC8:
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_802EBD0
sub_802EBD0: @ 0x0802EBD0
	push {lr}
	ldr r1, _0802EBE8 @ =0x020395F8
	adds r1, #0x7b
	movs r0, #4
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _0802EBE4
	bl sub_8034AC8
_0802EBE4:
	pop {r0}
	bx r0
	.align 2, 0
_0802EBE8: .4byte 0x020395F8

	thumb_func_start sub_802EBEC
sub_802EBEC: @ 0x0802EBEC
	push {r4, lr}
	movs r4, #0
	ldr r1, _0802EC04 @ =0x020395F8
	adds r1, #0x7b
	movs r0, #4
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0802EC08
	bl sub_8031894
	b _0802EC1E
	.align 2, 0
_0802EC04: .4byte 0x020395F8
_0802EC08:
	bl sub_8030CE8
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _0802EC1E
	adds r4, #1
	cmp r4, #0xff
	ble _0802EC08
	bl sub_8030D3C
_0802EC1E:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_802EC24
sub_802EC24: @ 0x0802EC24
	push {r4, lr}
	movs r4, #0
	ldr r1, _0802EC3C @ =0x020395F8
	adds r1, #0x7b
	movs r0, #4
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0802EC40
	bl sub_80318B4
	b _0802EC56
	.align 2, 0
_0802EC3C: .4byte 0x020395F8
_0802EC40:
	bl sub_8030D78
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _0802EC56
	adds r4, #1
	cmp r4, #0xff
	ble _0802EC40
	bl sub_8030DCC
_0802EC56:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_802EC5C
sub_802EC5C: @ 0x0802EC5C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	ldr r2, [r4, #0x58]
	bl PutMapCursor
	ldr r0, _0802EC9C @ =gKeySt
	ldr r1, [r0]
	movs r0, #9
	ldrh r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	bne _0802EC86
	adds r0, r4, #0
	adds r0, #0x64
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r2, r0, #0
	cmp r1, #0x2d
	ble _0802EC90
_0802EC86:
	adds r0, r4, #0
	bl Proc_Break
	adds r2, r4, #0
	adds r2, #0x64
_0802EC90:
	ldrh r0, [r2]
	adds r0, #1
	strh r0, [r2]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802EC9C: .4byte gKeySt

	thumb_func_start sub_802ECA0
sub_802ECA0: @ 0x0802ECA0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r1, r3, #0
	ldr r0, _0802ECC4 @ =0x085C8540
	bl SpawnProcLocking
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	str r6, [r0, #0x58]
	adds r0, #0x64
	movs r1, #0
	strh r1, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802ECC4: .4byte 0x085C8540

	thumb_func_start sub_802ECC8
sub_802ECC8: @ 0x0802ECC8
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	movs r0, #0x31
	adds r0, r0, r4
	mov ip, r0
	movs r0, #1
	mov r1, ip
	strb r0, [r1]
	ldr r1, _0802ED24 @ =gPlaySt
	ldrb r0, [r1, #0xd]
	cmp r0, #0
	beq _0802ED4A
	ldrb r1, [r1, #0xf]
	cmp r1, #0x80
	bne _0802ED4A
	ldr r0, _0802ED28 @ =gActiveUnit
	ldr r1, [r0]
	movs r5, #0xf
	ldrsb r5, [r1, r5]
	ldr r0, _0802ED2C @ =gMapFog
	ldr r2, [r0]
	lsls r0, r5, #2
	adds r0, r0, r2
	ldrb r1, [r1, #0xe]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #0
	bne _0802ED1A
	ldr r3, _0802ED30 @ =gAiDecision
	ldrb r6, [r3, #3]
	lsls r0, r6, #2
	adds r0, r0, r2
	ldr r0, [r0]
	ldrb r2, [r3, #2]
	adds r0, r2, r0
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802ED34
_0802ED1A:
	adds r0, r4, #0
	adds r2, r5, #0
	bl CameraMoveWatchPosition
	b _0802ED5C
	.align 2, 0
_0802ED24: .4byte gPlaySt
_0802ED28: .4byte gActiveUnit
_0802ED2C: .4byte gMapFog
_0802ED30: .4byte gAiDecision
_0802ED34:
	mov r6, ip
	strb r0, [r6]
	ldrb r0, [r3]
	cmp r0, #4
	bne _0802ED5C
	ldrb r1, [r3, #2]
	ldrb r2, [r3, #3]
	adds r0, r4, #0
	bl CameraMoveWatchPosition
	b _0802ED5C
_0802ED4A:
	ldr r0, _0802ED64 @ =gActiveUnit
	ldr r0, [r0]
	movs r1, #0xe
	ldrsb r1, [r0, r1]
	movs r2, #0xf
	ldrsb r2, [r0, r2]
	adds r0, r4, #0
	bl CameraMoveWatchPosition
_0802ED5C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802ED64: .4byte gActiveUnit

	thumb_func_start sub_802ED68
sub_802ED68: @ 0x0802ED68
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r5, _0802EDB4 @ =gActiveUnit
	ldr r0, [r5]
	bl UnitBeginAction
	ldr r0, [r5]
	bl HideUnitSprite
	ldr r0, [r5]
	bl MapFlood_08019344
	ldr r0, _0802EDB8 @ =gMapMovement
	ldr r0, [r0]
	bl SetWorkingMap
	ldr r1, _0802EDBC @ =gAiDecision
	ldrb r0, [r1, #2]
	ldrb r1, [r1, #3]
	ldr r6, _0802EDC0 @ =gWorkingMoveScr
	adds r2, r6, #0
	bl BuildBestMoveScript
	adds r4, #0x31
	ldrb r0, [r4]
	cmp r0, #0
	beq _0802EDAE
	ldr r0, [r5]
	bl MU_Start
	bl MU_SetDefaultFacing_Auto
	adds r0, r6, #0
	bl sub_805FC80
_0802EDAE:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802EDB4: .4byte gActiveUnit
_0802EDB8: .4byte gMapMovement
_0802EDBC: .4byte gAiDecision
_0802EDC0: .4byte gWorkingMoveScr

	thumb_func_start sub_802EDC4
sub_802EDC4: @ 0x0802EDC4
	push {r4, lr}
	ldr r4, _0802EDFC @ =gAiDecision
	ldrb r0, [r4, #2]
	ldrb r1, [r4, #3]
	bl SetMapCursorPosition
	ldr r1, _0802EE00 @ =gPlaySt
	ldrb r0, [r1, #0xd]
	cmp r0, #0
	beq _0802EE04
	ldrb r1, [r1, #0xf]
	cmp r1, #0x80
	beq _0802EE04
	bl RenderMapForFade
	ldrb r0, [r4, #2]
	ldrb r1, [r4, #3]
	bl sub_8017EDC
	bl RefreshEntityMaps
	bl RenderMap
	movs r0, #1
	bl StartMapFade
	b _0802EE16
	.align 2, 0
_0802EDFC: .4byte gAiDecision
_0802EE00: .4byte gPlaySt
_0802EE04:
	ldr r1, _0802EE48 @ =gAiDecision
	ldrb r0, [r1, #2]
	ldrb r1, [r1, #3]
	bl sub_8017EDC
	bl RenderMap
	bl RefreshEntityMaps
_0802EE16:
	ldr r0, _0802EE4C @ =gPlaySt
	ldrb r0, [r0, #0xe]
	cmp r0, #0x19
	bne _0802EE2C
	bl sub_806B404
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0802EE2C
	bl sub_806B414
_0802EE2C:
	bl MU_EndAll
	bl RefreshEntityMaps
	ldr r0, _0802EE50 @ =gActiveUnit
	ldr r0, [r0]
	bl ShowUnitSprite
	bl RefreshUnitSprites
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802EE48: .4byte gAiDecision
_0802EE4C: .4byte gPlaySt
_0802EE50: .4byte gActiveUnit

	thumb_func_start sub_802EE54
sub_802EE54: @ 0x0802EE54
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r1, _0802EE98 @ =gAction
	movs r0, #2
	strb r0, [r1, #0x11]
	ldr r5, _0802EE9C @ =gAiDecision
	ldrb r0, [r5, #6]
	strb r0, [r1, #0xd]
	ldr r4, _0802EEA0 @ =gActiveUnit
	ldr r1, [r4]
	ldrb r0, [r5, #2]
	strb r0, [r1, #0xe]
	ldr r1, [r4]
	ldrb r0, [r5, #3]
	strb r0, [r1, #0xf]
	movs r1, #7
	ldrsb r1, [r5, r1]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _0802EEA4
	ldr r0, [r4]
	ldrb r1, [r5, #7]
	bl UnitEquipItemSlot
	ldr r4, [r4]
	ldrb r0, [r5, #6]
	bl GetUnit
	adds r1, r0, #0
	adds r0, r4, #0
	bl BattleGenerateReal
	b _0802EEB4
	.align 2, 0
_0802EE98: .4byte gAction
_0802EE9C: .4byte gAiDecision
_0802EEA0: .4byte gActiveUnit
_0802EEA4:
	ldr r4, [r4]
	ldrb r0, [r5, #6]
	bl GetUnit
	adds r1, r0, #0
	adds r0, r4, #0
	bl BattleGenerateBallistaReal
_0802EEB4:
	ldr r0, _0802EED8 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _0802EEC8
	bl MU_EndAll
_0802EEC8:
	ldr r0, _0802EEDC @ =ProcScr_CombatAction
	adds r1, r6, #0
	bl SpawnProcLocking
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802EED8: .4byte gKeySt
_0802EEDC: .4byte ProcScr_CombatAction

	thumb_func_start sub_802EEE0
sub_802EEE0: @ 0x0802EEE0
	push {r4, lr}
	sub sp, #0xc
	adds r4, r0, #0
	ldr r1, _0802EF18 @ =0x0810D674
	mov r0, sp
	movs r2, #0xc
	bl memcpy
	ldr r1, _0802EF1C @ =gAiDecision
	ldrb r0, [r1, #8]
	cmp r0, #5
	beq _0802EF0E
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802EF0E
	ldrb r2, [r1, #8]
	lsls r0, r2, #1
	adds r0, r0, r2
	add r0, sp
	bl sub_805FC80
_0802EF0E:
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802EF18: .4byte 0x0810D674
_0802EF1C: .4byte gAiDecision

	thumb_func_start sub_802EF20
sub_802EF20: @ 0x0802EF20
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	mov r8, r0
	ldr r4, _0802EF64 @ =gAiDecision
	ldrb r0, [r4, #6]
	bl GetUnit
	adds r6, r0, #0
	ldrb r0, [r4, #7]
	lsls r1, r0, #1
	adds r0, r6, #0
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r5, [r0]
	ldr r0, _0802EF68 @ =gActiveUnit
	ldr r0, [r0]
	adds r1, r5, #0
	bl UnitAddItem
	ldrb r1, [r4, #7]
	adds r0, r6, #0
	bl UnitRemoveItem
	adds r0, r5, #0
	mov r1, r8
	bl StartPopup_08012178
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802EF64: .4byte gAiDecision
_0802EF68: .4byte gActiveUnit

	thumb_func_start sub_802EF6C
sub_802EF6C: @ 0x0802EF6C
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r3, _0802EFA8 @ =gAiDecision
	ldrb r2, [r3, #2]
	ldrb r4, [r3, #3]
	ldr r0, _0802EFAC @ =gMapTerrain
	ldr r1, [r0]
	lsls r0, r4, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r0, #0x21
	bne _0802EFB8
	ldr r1, _0802EFB0 @ =gActiveUnit
	ldr r0, [r1]
	strb r2, [r0, #0xe]
	ldr r1, [r1]
	ldrb r0, [r3, #3]
	strb r0, [r1, #0xf]
	ldr r1, _0802EFB4 @ =gAction
	movs r0, #0x17
	strb r0, [r1, #0x11]
	ldrb r0, [r3, #7]
	strb r0, [r1, #0x12]
	adds r0, r5, #0
	bl DoItemAction
	b _0802EFE2
	.align 2, 0
_0802EFA8: .4byte gAiDecision
_0802EFAC: .4byte gMapTerrain
_0802EFB0: .4byte gActiveUnit
_0802EFB4: .4byte gAction
_0802EFB8:
	subs r1, r4, #1
	lsls r0, r2, #0x18
	asrs r0, r0, #0x18
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_806B06C
	ldr r0, _0802EFEC @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0802EFD6
	movs r0, #0xab
	bl m4aSongNumStart
_0802EFD6:
	ldr r0, _0802EFF0 @ =0x085C85D0
	movs r1, #0x60
	movs r2, #0
	adds r3, r5, #0
	bl StartPopup
_0802EFE2:
	movs r0, #1
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0802EFEC: .4byte gPlaySt
_0802EFF0: .4byte 0x085C85D0

	thumb_func_start sub_802EFF4
sub_802EFF4: @ 0x0802EFF4
	push {r4, lr}
	ldr r4, _0802F020 @ =gActiveUnit
	ldr r2, [r4]
	ldr r3, _0802F024 @ =gAiDecision
	ldrb r1, [r3, #2]
	strb r1, [r2, #0xe]
	ldr r2, [r4]
	ldrb r1, [r3, #3]
	strb r1, [r2, #0xf]
	ldr r2, _0802F028 @ =gAction
	movs r1, #3
	strb r1, [r2, #0x11]
	ldrb r1, [r3, #6]
	strb r1, [r2, #0xd]
	ldrb r1, [r3, #7]
	strb r1, [r2, #0x12]
	bl DoItemAction
	movs r0, #1
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0802F020: .4byte gActiveUnit
_0802F024: .4byte gAiDecision
_0802F028: .4byte gAction

	thumb_func_start sub_802F02C
sub_802F02C: @ 0x0802F02C
	push {r4, lr}
	ldr r4, _0802F054 @ =gActiveUnit
	ldr r2, [r4]
	ldr r3, _0802F058 @ =gAiDecision
	ldrb r1, [r3, #2]
	strb r1, [r2, #0xe]
	ldr r2, [r4]
	ldrb r1, [r3, #3]
	strb r1, [r2, #0xf]
	ldr r2, _0802F05C @ =gAction
	movs r1, #0x17
	strb r1, [r2, #0x11]
	ldrb r1, [r3, #7]
	strb r1, [r2, #0x12]
	bl DoItemAction
	movs r0, #1
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0802F054: .4byte gActiveUnit
_0802F058: .4byte gAiDecision
_0802F05C: .4byte gAction

	thumb_func_start sub_802F060
sub_802F060: @ 0x0802F060
	movs r0, #1
	bx lr

	thumb_func_start sub_802F064
sub_802F064: @ 0x0802F064
	push {r4, r5, lr}
	ldr r2, _0802F0A0 @ =gActiveUnit
	ldr r1, [r2]
	ldr r5, _0802F0A4 @ =gAiDecision
	ldrb r0, [r5, #2]
	strb r0, [r1, #0xe]
	ldr r1, [r2]
	ldrb r0, [r5, #3]
	strb r0, [r1, #0xf]
	ldrb r0, [r5, #6]
	cmp r0, #0
	bne _0802F096
	ldrb r0, [r5, #7]
	bl GetUnit
	ldr r0, [r0]
	ldrb r4, [r0, #4]
	ldrb r0, [r5, #8]
	bl GetUnit
	ldr r0, [r0]
	ldrb r1, [r0, #4]
	adds r0, r4, #0
	bl sub_806AF90
_0802F096:
	movs r0, #1
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0802F0A0: .4byte gActiveUnit
_0802F0A4: .4byte gAiDecision

	thumb_func_start sub_802F0A8
sub_802F0A8: @ 0x0802F0A8
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r5, #0
	movs r4, #0
	ldr r0, _0802F0C4 @ =gAiDecision
	ldrb r1, [r0]
	adds r2, r0, #0
	cmp r1, #8
	bhi _0802F112
	lsls r0, r1, #2
	ldr r1, _0802F0C8 @ =_0802F0CC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802F0C4: .4byte gAiDecision
_0802F0C8: .4byte _0802F0CC
_0802F0CC: @ jump table
	.4byte _0802F128 @ case 0
	.4byte _0802F0F0 @ case 1
	.4byte _0802F128 @ case 2
	.4byte _0802F0F4 @ case 3
	.4byte _0802F128 @ case 4
	.4byte _0802F100 @ case 5
	.4byte _0802F128 @ case 6
	.4byte _0802F0F8 @ case 7
	.4byte _0802F0FC @ case 8
_0802F0F0:
	ldrb r0, [r2, #6]
	b _0802F106
_0802F0F4:
	ldrb r0, [r2, #6]
	b _0802F106
_0802F0F8:
	ldrb r0, [r2, #6]
	b _0802F106
_0802F0FC:
	ldrb r0, [r2, #9]
	b _0802F106
_0802F100:
	ldrb r0, [r2, #6]
	cmp r0, #0
	beq _0802F128
_0802F106:
	bl GetUnit
	movs r5, #0xe
	ldrsb r5, [r0, r5]
	movs r4, #0xf
	ldrsb r4, [r0, r4]
_0802F112:
	adds r0, r6, #0
	adds r1, r5, #0
	adds r2, r4, #0
	bl CameraMoveWatchPosition
	lsls r0, r5, #4
	lsls r1, r4, #4
	movs r2, #2
	adds r3, r6, #0
	bl sub_802ECA0
_0802F128:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_802F130
sub_802F130: @ 0x0802F130
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x30
	movs r1, #0
	strb r1, [r0]
	ldr r0, _0802F14C @ =gAiDecision
	ldrb r0, [r0]
	cmp r0, #8
	bhi _0802F1D4
	lsls r0, r0, #2
	ldr r1, _0802F150 @ =_0802F154
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802F14C: .4byte gAiDecision
_0802F150: .4byte _0802F154
_0802F154: @ jump table
	.4byte _0802F178 @ case 0
	.4byte _0802F180 @ case 1
	.4byte _0802F190 @ case 2
	.4byte _0802F1A0 @ case 3
	.4byte _0802F1B0 @ case 4
	.4byte _0802F1B8 @ case 5
	.4byte _0802F1C0 @ case 6
	.4byte _0802F1C8 @ case 7
	.4byte _0802F1D0 @ case 8
_0802F178:
	ldr r0, _0802F17C @ =sub_802F240
	b _0802F1D2
	.align 2, 0
_0802F17C: .4byte sub_802F240
_0802F180:
	ldr r0, _0802F18C @ =sub_802F240
	str r0, [r4, #0x2c]
	adds r0, r4, #0
	bl sub_802EE54
	b _0802F1D4
	.align 2, 0
_0802F18C: .4byte sub_802F240
_0802F190:
	adds r0, r4, #0
	bl sub_802EEE0
	ldr r0, _0802F19C @ =sub_802F244
	b _0802F1D2
	.align 2, 0
_0802F19C: .4byte sub_802F244
_0802F1A0:
	adds r0, r4, #0
	bl sub_802EF20
	ldr r0, _0802F1AC @ =sub_802F268
	b _0802F1D2
	.align 2, 0
_0802F1AC: .4byte sub_802F268
_0802F1B0:
	ldr r0, _0802F1B4 @ =sub_802EF6C
	b _0802F1D2
	.align 2, 0
_0802F1B4: .4byte sub_802EF6C
_0802F1B8:
	ldr r0, _0802F1BC @ =sub_802EFF4
	b _0802F1D2
	.align 2, 0
_0802F1BC: .4byte sub_802EFF4
_0802F1C0:
	ldr r0, _0802F1C4 @ =sub_802F02C
	b _0802F1D2
	.align 2, 0
_0802F1C4: .4byte sub_802F02C
_0802F1C8:
	ldr r0, _0802F1CC @ =sub_802F060
	b _0802F1D2
	.align 2, 0
_0802F1CC: .4byte sub_802F060
_0802F1D0:
	ldr r0, _0802F1DC @ =sub_802F064
_0802F1D2:
	str r0, [r4, #0x2c]
_0802F1D4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802F1DC: .4byte sub_802F064

	thumb_func_start sub_802F1E0
sub_802F1E0: @ 0x0802F1E0
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x30
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldr r1, [r4, #0x2c]
	adds r0, r4, #0
	bl _call_via_r1
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0802F204
	adds r0, r4, #0
	bl Proc_Break
_0802F204:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_802F20C
sub_802F20C: @ 0x0802F20C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_8032A08
	bl sub_802EDC4
	ldr r0, _0802F23C @ =gActiveUnit
	ldr r1, [r0]
	ldr r0, [r1]
	cmp r0, #0
	beq _0802F22C
	movs r0, #5
	ldrh r1, [r1, #0xc]
	ands r0, r1
	cmp r0, #0
	beq _0802F234
_0802F22C:
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
_0802F234:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0802F23C: .4byte gActiveUnit

	thumb_func_start sub_802F240
sub_802F240: @ 0x0802F240
	movs r0, #1
	bx lr

	thumb_func_start sub_802F244
sub_802F244: @ 0x0802F244
	push {lr}
	bl MU_IsAnyActive
	lsls r0, r0, #0x18
	asrs r1, r0, #0x18
	cmp r1, #0
	beq _0802F256
	movs r0, #0
	b _0802F25E
_0802F256:
	ldr r0, _0802F264 @ =gActiveUnit
	ldr r0, [r0]
	str r1, [r0]
	movs r0, #1
_0802F25E:
	pop {r1}
	bx r1
	.align 2, 0
_0802F264: .4byte gActiveUnit

	thumb_func_start sub_802F268
sub_802F268: @ 0x0802F268
	push {lr}
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #4
	bhi _0802F276
	movs r0, #0
	b _0802F28E
_0802F276:
	ldr r0, _0802F294 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0802F298 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	movs r0, #3
	bl EnableBgSync
	movs r0, #1
_0802F28E:
	pop {r1}
	bx r1
	.align 2, 0
_0802F294: .4byte gBg0Tm
_0802F298: .4byte gBg1Tm

	thumb_func_start sub_802F29C
sub_802F29C: @ 0x0802F29C
	push {r4, r5, r6, lr}
	sub sp, #0x18
	bl sub_8032CB4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0802F2DA
	add r0, sp, #4
	bl sub_8032CE8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0802F2DA
	ldr r1, _0802F2E4 @ =gAiDecision
	ldrb r0, [r1, #2]
	ldrb r1, [r1, #3]
	add r4, sp, #0x10
	mov r5, sp
	adds r5, #0x12
	add r6, sp, #0x14
	str r6, [sp]
	adds r2, r4, #0
	adds r3, r5, #0
	bl sub_8032DF4
	ldrh r0, [r4]
	ldrh r1, [r5]
	ldrh r2, [r6]
	add r3, sp, #4
	bl sub_8032F94
_0802F2DA:
	add sp, #0x18
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0802F2E4: .4byte gAiDecision

	thumb_func_start sub_802F2E8
sub_802F2E8: @ 0x0802F2E8
	adds r3, r0, #0
	lsls r1, r1, #0x18
	lsrs r0, r1, #0x18
	cmp r0, #5
	bhi _0802F348
	lsls r0, r0, #2
	ldr r1, _0802F2FC @ =_0802F300
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0802F2FC: .4byte _0802F300
_0802F300: @ jump table
	.4byte _0802F318 @ case 0
	.4byte _0802F322 @ case 1
	.4byte _0802F32A @ case 2
	.4byte _0802F332 @ case 3
	.4byte _0802F33A @ case 4
	.4byte _0802F342 @ case 5
_0802F318:
	ldrb r3, [r3]
	cmp r3, r2
	bls _0802F348
_0802F31E:
	movs r0, #1
	b _0802F34A
_0802F322:
	ldrb r3, [r3]
	cmp r3, r2
	blo _0802F348
	b _0802F31E
_0802F32A:
	ldrb r0, [r3]
	cmp r0, r2
	bne _0802F348
	b _0802F31E
_0802F332:
	ldrb r3, [r3]
	cmp r3, r2
	bhi _0802F348
	b _0802F31E
_0802F33A:
	ldrb r3, [r3]
	cmp r3, r2
	bhs _0802F348
	b _0802F31E
_0802F342:
	ldrb r0, [r3]
	cmp r0, r2
	bne _0802F31E
_0802F348:
	movs r0, #0
_0802F34A:
	bx lr

	thumb_func_start sub_802F34C
sub_802F34C: @ 0x0802F34C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	adds r6, r1, #0
	ldr r0, _0802F3E0 @ =gActiveUnit
	ldr r2, [r0]
	movs r0, #0xe
	ldrsb r0, [r2, r0]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r2, [r2, #4]
	ldr r2, [r2, #0x34]
	bl MapFlood_080193F4
	bl MapMarkFloodEdges
	ldr r0, _0802F3E4 @ =0x0000FFFF
	strh r0, [r6]
	movs r5, #1
	ldr r0, _0802F3E8 @ =0x0203967E
	mov r8, r0
_0802F378:
	adds r0, r5, #0
	bl GetUnit
	adds r3, r0, #0
	cmp r3, #0
	beq _0802F3CE
	ldr r4, [r3]
	cmp r4, #0
	beq _0802F3CE
	movs r1, #0xf
	ldrsb r1, [r3, r1]
	ldr r0, _0802F3EC @ =gMapRange
	ldr r0, [r0]
	lsls r1, r1, #2
	adds r1, r1, r0
	movs r2, #0xe
	ldrsb r2, [r3, r2]
	ldr r0, [r1]
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _0802F3CE
	ldrb r0, [r4, #4]
	cmp r0, r7
	bne _0802F3CE
	ldrh r1, [r3, #0xc]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	bne _0802F40C
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0802F3C2
	movs r0, #3
	mov r1, r8
	strb r0, [r1]
_0802F3C2:
	movs r0, #0xe
	ldrsb r0, [r3, r0]
	strh r0, [r6]
	movs r0, #0xf
	ldrsb r0, [r3, r0]
	strh r0, [r6, #2]
_0802F3CE:
	adds r5, #1
	cmp r5, #0xbf
	ble _0802F378
	movs r1, #0
	ldrsh r0, [r6, r1]
	cmp r0, #0
	blt _0802F3F0
	movs r0, #1
	b _0802F422
	.align 2, 0
_0802F3E0: .4byte gActiveUnit
_0802F3E4: .4byte 0x0000FFFF
_0802F3E8: .4byte 0x0203967E
_0802F3EC: .4byte gMapRange
_0802F3F0:
	adds r0, r7, #0
	bl GetUnitByPid
	movs r1, #0xc
	ldrh r0, [r0, #0xc]
	ands r1, r0
	cmp r1, #0
	beq _0802F418
	ldr r0, _0802F408 @ =0x020395F8
	adds r0, #0x86
	movs r1, #1
	b _0802F41E
	.align 2, 0
_0802F408: .4byte 0x020395F8
_0802F40C:
	ldr r0, _0802F414 @ =0x020395F8
	adds r0, #0x86
	movs r1, #1
	b _0802F41E
	.align 2, 0
_0802F414: .4byte 0x020395F8
_0802F418:
	ldr r0, _0802F42C @ =0x020395F8
	adds r0, #0x86
	movs r1, #4
_0802F41E:
	strb r1, [r0]
	movs r0, #0
_0802F422:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0802F42C: .4byte 0x020395F8

	thumb_func_start sub_802F430
sub_802F430: @ 0x0802F430
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r5, r1, #0
	movs r6, #0xff
	ldr r0, _0802F4B4 @ =gActiveUnit
	ldr r2, [r0]
	movs r0, #0xe
	ldrsb r0, [r2, r0]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r2, [r2, #4]
	ldr r2, [r2, #0x34]
	bl MapFlood_080193F4
	ldr r0, _0802F4B8 @ =0x0000FFFF
	strh r0, [r5]
	movs r4, #1
_0802F452:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _0802F4A2
	ldr r0, [r2]
	cmp r0, #0
	beq _0802F4A2
	movs r0, #0x25
	ldrh r1, [r2, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _0802F4A2
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r0, _0802F4BC @ =gMapRange
	ldr r0, [r0]
	lsls r1, r1, #2
	adds r1, r1, r0
	movs r3, #0xe
	ldrsb r3, [r2, r3]
	ldr r0, [r1]
	adds r1, r0, r3
	ldrb r0, [r1]
	cmp r0, #0x78
	bhi _0802F4A2
	ldr r0, [r2, #4]
	ldrb r0, [r0, #4]
	cmp r0, r7
	bne _0802F4A2
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r6, r0
	blt _0802F4A2
	ldrb r6, [r1]
	strh r3, [r5]
	movs r0, #0xf
	ldrsb r0, [r2, r0]
	strh r0, [r5, #2]
_0802F4A2:
	adds r4, #1
	cmp r4, #0xbf
	ble _0802F452
	movs r1, #0
	ldrsh r0, [r5, r1]
	cmp r0, #0
	bge _0802F4C0
	movs r0, #0
	b _0802F4C2
	.align 2, 0
_0802F4B4: .4byte gActiveUnit
_0802F4B8: .4byte 0x0000FFFF
_0802F4BC: .4byte gMapRange
_0802F4C0:
	movs r0, #1
_0802F4C2:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_802F4C8
sub_802F4C8: @ 0x0802F4C8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	str r0, [sp]
	str r1, [sp, #4]
	movs r0, #0xff
	str r0, [sp, #8]
	movs r1, #0
	str r1, [sp, #0x10]
	ldr r0, _0802F504 @ =gActiveUnit
	ldr r2, [r0]
	movs r0, #0xe
	ldrsb r0, [r2, r0]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r2, [r2, #4]
	ldr r2, [r2, #0x34]
	bl MapFlood_080193F4
	ldr r2, _0802F508 @ =0x0000FFFF
	str r2, [sp, #0xc]
	ldr r0, _0802F50C @ =gMapSize
	ldrh r0, [r0, #2]
	subs r0, #1
	lsls r0, r0, #0x10
	b _0802F59A
	.align 2, 0
_0802F504: .4byte gActiveUnit
_0802F508: .4byte 0x0000FFFF
_0802F50C: .4byte gMapSize
_0802F510:
	ldr r0, _0802F5AC @ =gMapSize
	ldrh r0, [r0]
	subs r0, #1
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	lsls r4, r6, #0x10
	lsls r1, r1, #0x10
	mov r8, r1
	cmp r4, #0
	blt _0802F596
	mov sl, r8
	ldr r0, _0802F5B0 @ =gMapRange
	mov sb, r0
	asrs r7, r1, #0xe
_0802F52C:
	mov r1, sb
	ldr r0, [r1]
	adds r0, r7, r0
	asrs r5, r4, #0x10
	ldr r0, [r0]
	adds r0, r0, r5
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _0802F588
	ldr r0, _0802F5B4 @ =gMapUnit
	ldr r0, [r0]
	adds r0, r7, r0
	ldr r0, [r0]
	adds r2, r0, r5
	ldrb r1, [r2]
	cmp r1, #0
	beq _0802F588
	ldr r0, _0802F5B8 @ =gActiveUnitId
	ldrb r0, [r0]
	cmp r1, r0
	beq _0802F588
	adds r0, r1, #0
	bl GetUnit
	ldr r2, [sp]
	bl _call_via_r2
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0802F588
	mov r1, sb
	ldr r0, [r1]
	adds r0, r7, r0
	ldr r0, [r0]
	adds r0, r0, r5
	ldrb r2, [r0]
	ldr r1, [sp, #8]
	cmp r2, r1
	bhi _0802F588
	ldrb r0, [r0]
	str r0, [sp, #8]
	lsrs r4, r4, #0x10
	str r4, [sp, #0xc]
	mov r2, sl
	lsrs r2, r2, #0x10
	str r2, [sp, #0x10]
_0802F588:
	lsls r0, r6, #0x10
	ldr r1, _0802F5BC @ =0xFFFF0000
	adds r0, r0, r1
	lsrs r6, r0, #0x10
	lsls r4, r6, #0x10
	cmp r4, #0
	bge _0802F52C
_0802F596:
	ldr r0, _0802F5BC @ =0xFFFF0000
	add r0, r8
_0802F59A:
	lsrs r1, r0, #0x10
	cmp r0, #0
	bge _0802F510
	ldr r2, [sp, #0xc]
	lsls r0, r2, #0x10
	cmp r0, #0
	bge _0802F5C0
	movs r0, #0
	b _0802F5D0
	.align 2, 0
_0802F5AC: .4byte gMapSize
_0802F5B0: .4byte gMapRange
_0802F5B4: .4byte gMapUnit
_0802F5B8: .4byte gActiveUnitId
_0802F5BC: .4byte 0xFFFF0000
_0802F5C0:
	mov r0, sp
	ldrh r1, [r0, #0xc]
	ldr r0, [sp, #4]
	strh r1, [r0]
	mov r2, sp
	ldrh r2, [r2, #0x10]
	strh r2, [r0, #2]
	movs r0, #1
_0802F5D0:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_802F5E0
sub_802F5E0: @ 0x0802F5E0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0x14
	movs r0, #0
	mov r8, r0
	mov sb, r0
	ldr r0, _0802F604 @ =gActiveUnit
	ldr r0, [r0]
	bl MapFlood_08019344
	ldr r3, _0802F608 @ =0x0000FFFF
	ldr r0, _0802F60C @ =gMapSize
	ldrh r0, [r0, #2]
	subs r0, #1
	lsls r0, r0, #0x10
	b _0802F67A
	.align 2, 0
_0802F604: .4byte gActiveUnit
_0802F608: .4byte 0x0000FFFF
_0802F60C: .4byte gMapSize
_0802F610:
	ldr r0, _0802F6B0 @ =gMapSize
	ldrh r0, [r0]
	subs r0, #1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	lsls r4, r5, #0x10
	lsls r7, r1, #0x10
	cmp r4, #0
	blt _0802F676
	adds r2, r7, #0
	asrs r6, r7, #0xe
_0802F626:
	ldr r0, _0802F6B4 @ =gMapMovement
	ldr r0, [r0]
	adds r0, r6, r0
	asrs r1, r4, #0x10
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _0802F668
	ldr r0, _0802F6B8 @ =gMapUnit
	ldr r0, [r0]
	adds r0, r6, r0
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #0
	bne _0802F668
	movs r0, #0x80
	lsls r0, r0, #1
	str r2, [sp, #0xc]
	str r3, [sp, #0x10]
	bl RandNext
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r2, [sp, #0xc]
	ldr r3, [sp, #0x10]
	cmp r0, r8
	blo _0802F668
	mov r8, r0
	lsrs r3, r4, #0x10
	lsrs r1, r2, #0x10
	mov sb, r1
_0802F668:
	lsls r0, r5, #0x10
	ldr r1, _0802F6BC @ =0xFFFF0000
	adds r0, r0, r1
	lsrs r5, r0, #0x10
	lsls r4, r5, #0x10
	cmp r4, #0
	bge _0802F626
_0802F676:
	ldr r1, _0802F6BC @ =0xFFFF0000
	adds r0, r7, r1
_0802F67A:
	lsrs r1, r0, #0x10
	cmp r0, #0
	bge _0802F610
	lsls r0, r3, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _0802F6A0
	mov r0, sb
	lsls r1, r0, #0x10
	asrs r1, r1, #0x10
	movs r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	adds r0, r2, #0
	movs r2, #0
	movs r3, #0
	bl AiSetDecision
_0802F6A0:
	add sp, #0x14
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0802F6B0: .4byte gMapSize
_0802F6B4: .4byte gMapMovement
_0802F6B8: .4byte gMapUnit
_0802F6BC: .4byte 0xFFFF0000

	thumb_func_start sub_802F6C0
sub_802F6C0: @ 0x0802F6C0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	lsls r2, r2, #0x10
	lsrs r6, r2, #0x10
	movs r1, #0xe
	ldrsb r1, [r4, r1]
	movs r0, #0xe
	ldrsb r0, [r5, r0]
	subs r3, r1, r0
	cmp r3, #0
	bge _0802F6DA
	subs r3, r0, r1
_0802F6DA:
	movs r2, #0xf
	ldrsb r2, [r4, r2]
	movs r1, #0xf
	ldrsb r1, [r5, r1]
	subs r0, r2, r1
	cmp r0, #0
	bge _0802F6EA
	subs r0, r1, r2
_0802F6EA:
	adds r5, r3, r0
	adds r0, r6, #0
	bl GetItemMaxRange
	movs r1, #0x1a
	ldrsb r1, [r4, r1]
	ldr r2, [r4, #4]
	ldrb r2, [r2, #0x12]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	adds r1, r1, r2
	adds r1, r1, r0
	cmp r5, r1
	ble _0802F70A
	movs r0, #0
	b _0802F70C
_0802F70A:
	movs r0, #1
_0802F70C:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_802F714
sub_802F714: @ 0x0802F714
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	lsls r2, r2, #0x10
	lsrs r7, r2, #0x10
	movs r3, #0xe
	ldrsb r3, [r4, r3]
	movs r0, #0xe
	ldrsb r0, [r5, r0]
	subs r1, r3, r0
	cmp r1, #0
	bge _0802F72E
	subs r1, r0, r3
_0802F72E:
	movs r2, #0xf
	ldrsb r2, [r4, r2]
	movs r0, #0xf
	ldrsb r0, [r5, r0]
	subs r3, r2, r0
	cmp r3, #0
	blt _0802F740
	adds r6, r1, r3
	b _0802F744
_0802F740:
	subs r0, r0, r2
	adds r6, r1, r0
_0802F744:
	adds r0, r7, #0
	bl GetItemMaxRange
	movs r1, #0x1a
	ldrsb r1, [r4, r1]
	ldr r2, [r4, #4]
	ldrb r2, [r2, #0x12]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	adds r1, r1, r2
	movs r2, #0x1a
	ldrsb r2, [r5, r2]
	ldr r3, [r5, #4]
	ldrb r3, [r3, #0x12]
	lsls r3, r3, #0x18
	asrs r3, r3, #0x18
	adds r2, r2, r3
	adds r1, r1, r2
	adds r1, r1, r0
	cmp r6, r1
	ble _0802F772
	movs r0, #0
	b _0802F774
_0802F772:
	movs r0, #1
_0802F774:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_802F77C
sub_802F77C: @ 0x0802F77C
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	b _0802F78C
_0802F782:
	cmp r2, r1
	bne _0802F78A
	movs r0, #1
	b _0802F794
_0802F78A:
	adds r0, #2
_0802F78C:
	ldrh r2, [r0]
	cmp r2, #0
	bne _0802F782
	movs r0, #0
_0802F794:
	bx lr
	.align 2, 0

	thumb_func_start sub_802F798
sub_802F798: @ 0x0802F798
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	b _0802F7A8
_0802F79E:
	cmp r2, r1
	bne _0802F7A6
	movs r0, #1
	b _0802F7B0
_0802F7A6:
	adds r0, #1
_0802F7A8:
	ldrb r2, [r0]
	cmp r2, #0
	bne _0802F79E
	movs r0, #0
_0802F7B0:
	bx lr
	.align 2, 0

	thumb_func_start sub_802F7B4
sub_802F7B4: @ 0x0802F7B4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	str r0, [sp]
	mov r8, r1
	adds r7, r2, #0
	movs r0, #0xff
	mov sb, r0
	ldr r0, _0802F890 @ =gMapSize
	movs r1, #2
	ldrsh r0, [r0, r1]
	subs r5, r0, #1
	cmp r5, #0
	blt _0802F886
_0802F7D6:
	ldr r0, _0802F890 @ =gMapSize
	movs r1, #0
	ldrsh r0, [r0, r1]
	subs r4, r0, #1
	subs r0, r5, #1
	mov sl, r0
	cmp r4, #0
	blt _0802F880
	lsls r6, r5, #2
_0802F7E8:
	ldr r0, _0802F894 @ =gMapRange
	ldr r0, [r0]
	adds r0, r6, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _0802F87A
	ldr r0, _0802F898 @ =gMapTerrain
	ldr r0, [r0]
	adds r0, r6, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r1, [r0]
	ldr r0, [sp]
	bl sub_802F798
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0802F87A
	movs r0, #1
	mov r1, r8
	ands r0, r1
	cmp r0, #0
	beq _0802F840
	ldr r0, _0802F89C @ =gMapUnit
	ldr r0, [r0]
	adds r0, r6, r0
	ldr r0, [r0]
	adds r1, r0, r4
	ldrb r0, [r1]
	cmp r0, #0
	beq _0802F840
	ldr r0, _0802F8A0 @ =gActiveUnit
	ldr r0, [r0]
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldrb r1, [r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0802F87A
_0802F840:
	movs r0, #2
	mov r1, r8
	ands r0, r1
	cmp r0, #0
	beq _0802F85A
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	lsls r1, r5, #0x10
	asrs r1, r1, #0x10
	bl sub_802FE84
	cmp r0, #0
	bne _0802F87A
_0802F85A:
	ldr r0, _0802F894 @ =gMapRange
	ldr r0, [r0]
	adds r1, r6, r0
	ldr r0, [r1]
	adds r0, r0, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp sb, r0
	ble _0802F87A
	strh r4, [r7]
	strh r5, [r7, #2]
	ldr r0, [r1]
	adds r0, r0, r4
	ldrb r0, [r0]
	mov sb, r0
_0802F87A:
	subs r4, #1
	cmp r4, #0
	bge _0802F7E8
_0802F880:
	mov r5, sl
	cmp r5, #0
	bge _0802F7D6
_0802F886:
	mov r0, sb
	cmp r0, #0xff
	bne _0802F8A4
	movs r0, #0
	b _0802F8A6
	.align 2, 0
_0802F890: .4byte gMapSize
_0802F894: .4byte gMapRange
_0802F898: .4byte gMapTerrain
_0802F89C: .4byte gMapUnit
_0802F8A0: .4byte gActiveUnit
_0802F8A4:
	movs r0, #1
_0802F8A6:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_802F8B8
sub_802F8B8: @ 0x0802F8B8
	push {r4, lr}
	adds r3, r0, #0
	adds r4, r1, #0
	ldr r1, _0802F8F0 @ =gMapRange
	ldr r0, [r1]
	lsls r2, r4, #2
	adds r0, r2, r0
	ldr r0, [r0]
	adds r0, r0, r3
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x77
	bgt _0802F8EC
	ldr r0, _0802F8F4 @ =gMapUnit
	ldr r0, [r0]
	adds r0, r2, r0
	ldr r0, [r0]
	adds r0, r0, r3
	ldrb r2, [r0]
	cmp r2, #0
	beq _0802F8FC
	ldr r0, _0802F8F8 @ =gActiveUnitId
	ldrb r0, [r0]
	cmp r2, r0
	beq _0802F8FC
_0802F8EC:
	movs r0, #0xff
	b _0802F908
	.align 2, 0
_0802F8F0: .4byte gMapRange
_0802F8F4: .4byte gMapUnit
_0802F8F8: .4byte gActiveUnitId
_0802F8FC:
	ldr r1, [r1]
	lsls r0, r4, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r3
	ldrb r0, [r0]
_0802F908:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_802F910
sub_802F910: @ 0x0802F910
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	str r0, [sp, #4]
	mov sl, r1
	mov sb, r2
	movs r0, #0xff
	str r0, [sp, #8]
	ldr r0, _0802FA2C @ =gMapSize
	movs r1, #2
	ldrsh r0, [r0, r1]
	subs r6, r0, #1
	cmp r6, #0
	blt _0802FA20
	mov r8, sp
_0802F934:
	ldr r0, _0802FA2C @ =gMapSize
	movs r2, #0
	ldrsh r0, [r0, r2]
	subs r5, r0, #1
	subs r3, r6, #1
	str r3, [sp, #0xc]
	cmp r5, #0
	blt _0802FA1A
	lsls r7, r6, #2
	str r7, [sp, #0x10]
_0802F948:
	ldr r0, _0802FA30 @ =gMapRange
	ldr r0, [r0]
	ldr r1, [sp, #0x10]
	adds r0, r1, r0
	ldr r0, [r0]
	adds r0, r0, r5
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _0802FA14
	ldr r0, _0802FA34 @ =gMapTerrain
	ldr r0, [r0]
	adds r0, r1, r0
	ldr r0, [r0]
	adds r0, r0, r5
	ldrb r1, [r0]
	ldr r0, [sp, #4]
	bl sub_802F798
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0802FA14
	movs r0, #1
	mov r2, sl
	ands r0, r2
	cmp r0, #0
	beq _0802F9A4
	ldr r0, _0802FA38 @ =gMapUnit
	ldr r0, [r0]
	ldr r3, [sp, #0x10]
	adds r0, r3, r0
	ldr r0, [r0]
	adds r1, r0, r5
	ldrb r0, [r1]
	cmp r0, #0
	beq _0802F9A4
	ldr r0, _0802FA3C @ =gActiveUnit
	ldr r0, [r0]
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldrb r1, [r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0802FA14
_0802F9A4:
	movs r0, #2
	mov r7, sl
	ands r0, r7
	cmp r0, #0
	beq _0802F9BE
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	lsls r1, r6, #0x10
	asrs r1, r1, #0x10
	bl sub_802FE84
	cmp r0, #0
	bne _0802FA14
_0802F9BE:
	mov r4, sp
	adds r0, r5, #0
	adds r1, r6, #0
	ldr r2, _0802FA40 @ =sub_802F8B8
	mov r3, sp
	bl sub_8030180
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0802FA14
	movs r1, #2
	ldrsh r0, [r4, r1]
	ldr r1, _0802FA30 @ =gMapRange
	ldr r2, [r1]
	lsls r0, r0, #2
	adds r0, r0, r2
	mov r3, r8
	movs r7, #0
	ldrsh r1, [r3, r7]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r1, [sp, #8]
	cmp r1, r0
	ble _0802FA14
	ldrh r0, [r3]
	mov r3, sb
	strh r0, [r3]
	ldrh r0, [r4, #2]
	strh r0, [r3, #2]
	movs r7, #2
	ldrsh r0, [r4, r7]
	lsls r0, r0, #2
	adds r0, r0, r2
	mov r2, r8
	movs r3, #0
	ldrsh r1, [r2, r3]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	str r0, [sp, #8]
_0802FA14:
	subs r5, #1
	cmp r5, #0
	bge _0802F948
_0802FA1A:
	ldr r6, [sp, #0xc]
	cmp r6, #0
	bge _0802F934
_0802FA20:
	ldr r7, [sp, #8]
	cmp r7, #0xff
	bne _0802FA44
	movs r0, #0
	b _0802FA46
	.align 2, 0
_0802FA2C: .4byte gMapSize
_0802FA30: .4byte gMapRange
_0802FA34: .4byte gMapTerrain
_0802FA38: .4byte gMapUnit
_0802FA3C: .4byte gActiveUnit
_0802FA40: .4byte sub_802F8B8
_0802FA44:
	movs r0, #1
_0802FA46:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_802FA58
sub_802FA58: @ 0x0802FA58
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	mov sl, r0
	mov r8, r1
	movs r0, #0xff
	str r0, [sp, #4]
	movs r1, #0
	str r1, [sp, #8]
	ldr r0, _0802FACC @ =gMapSize
	movs r2, #2
	ldrsh r0, [r0, r2]
	subs r7, r0, #1
	cmp r7, #0
	bge _0802FA7E
	b _0802FC40
_0802FA7E:
	movs r4, #1
	mov r0, sl
	ands r0, r4
	str r0, [sp, #0xc]
_0802FA86:
	ldr r0, _0802FACC @ =gMapSize
	movs r1, #0
	ldrsh r0, [r0, r1]
	subs r6, r0, #1
	cmp r6, #0
	bge _0802FA94
	b _0802FC38
_0802FA94:
	lsls r2, r7, #2
	mov sb, r2
	mov r5, sp
	movs r4, #2
	mov r0, sl
	ands r0, r4
	str r0, [sp, #0x10]
_0802FAA2:
	ldr r0, _0802FAD0 @ =gMapRange
	ldr r0, [r0]
	add r0, sb
	ldr r0, [r0]
	adds r0, r0, r6
	ldrb r0, [r0]
	cmp r0, #0x78
	bls _0802FAB4
	b _0802FC30
_0802FAB4:
	ldr r0, _0802FAD4 @ =gMapTerrain
	ldr r0, [r0]
	add r0, sb
	ldr r0, [r0]
	adds r0, r0, r6
	ldrb r0, [r0]
	cmp r0, #0x1e
	beq _0802FAD8
	cmp r0, #0x21
	beq _0802FB08
	b _0802FC30
	.align 2, 0
_0802FACC: .4byte gMapSize
_0802FAD0: .4byte gMapRange
_0802FAD4: .4byte gMapTerrain
_0802FAD8:
	ldr r0, [sp, #8]
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #8]
	movs r0, #8
	mov r1, sl
	ands r0, r1
	cmp r0, #0
	beq _0802FAEE
	b _0802FC30
_0802FAEE:
	adds r0, r6, #0
	adds r1, r7, #0
	ldr r2, _0802FB04 @ =sub_802F8B8
	mov r3, sp
	bl sub_8030180
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0802FB02
	b _0802FC30
_0802FB02:
	b _0802FBA4
	.align 2, 0
_0802FB04: .4byte sub_802F8B8
_0802FB08:
	ldr r0, [sp, #8]
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #8]
	movs r0, #4
	mov r2, sl
	ands r0, r2
	cmp r0, #0
	beq _0802FB1E
	b _0802FC30
_0802FB1E:
	strh r6, [r5]
	mov r4, sp
	strh r7, [r4, #2]
	ldr r0, _0802FB98 @ =gMapMovement
	ldr r0, [r0]
	add r0, sb
	ldr r2, [r0]
	adds r2, r2, r6
	ldr r0, _0802FB9C @ =gActiveUnit
	ldr r3, [r0]
	movs r1, #0x1a
	ldrsb r1, [r3, r1]
	ldr r0, [r3, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r1, r0
	ldrb r2, [r2]
	cmp r2, r1
	bgt _0802FBA4
	ldr r0, [sp, #0xc]
	cmp r0, #0
	beq _0802FB76
	movs r1, #2
	ldrsh r0, [r4, r1]
	ldr r1, _0802FBA0 @ =gMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r2, #0
	ldrsh r1, [r5, r2]
	ldr r0, [r0]
	adds r1, r0, r1
	ldrb r0, [r1]
	cmp r0, #0
	beq _0802FB76
	movs r0, #0xb
	ldrsb r0, [r3, r0]
	ldrb r1, [r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0802FC30
_0802FB76:
	ldr r4, [sp, #0x10]
	cmp r4, #0
	beq _0802FB8C
	movs r1, #0
	ldrsh r0, [r5, r1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	bl sub_802FE84
	cmp r0, #0
	bne _0802FC30
_0802FB8C:
	ldrh r0, [r5]
	mov r4, r8
	strh r0, [r4]
	ldrh r0, [r5, #2]
	strh r0, [r4, #2]
	b _0802FC78
	.align 2, 0
_0802FB98: .4byte gMapMovement
_0802FB9C: .4byte gActiveUnit
_0802FBA0: .4byte gMapUnit
_0802FBA4:
	ldr r0, [sp, #0xc]
	cmp r0, #0
	beq _0802FBDA
	movs r1, #2
	ldrsh r0, [r5, r1]
	ldr r1, _0802FC68 @ =gMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r2, #0
	ldrsh r1, [r5, r2]
	ldr r0, [r0]
	adds r1, r0, r1
	ldrb r0, [r1]
	cmp r0, #0
	beq _0802FBDA
	ldr r0, _0802FC6C @ =gActiveUnit
	ldr r0, [r0]
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldrb r1, [r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0802FC30
_0802FBDA:
	ldr r4, [sp, #0x10]
	cmp r4, #0
	beq _0802FBF0
	movs r1, #0
	ldrsh r0, [r5, r1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	bl sub_802FE84
	cmp r0, #0
	bne _0802FC30
_0802FBF0:
	mov r2, sp
	movs r4, #2
	ldrsh r0, [r2, r4]
	ldr r1, _0802FC70 @ =gMapRange
	ldr r3, [r1]
	lsls r0, r0, #2
	adds r0, r0, r3
	movs r4, #0
	ldrsh r1, [r5, r4]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r1, [sp, #4]
	cmp r1, r0
	ble _0802FC30
	ldrh r0, [r5]
	mov r4, r8
	strh r0, [r4]
	ldrh r0, [r2, #2]
	strh r0, [r4, #2]
	movs r1, #2
	ldrsh r0, [r2, r1]
	lsls r0, r0, #2
	adds r0, r0, r3
	movs r2, #0
	ldrsh r1, [r5, r2]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	str r0, [sp, #4]
_0802FC30:
	subs r6, #1
	cmp r6, #0
	blt _0802FC38
	b _0802FAA2
_0802FC38:
	subs r7, #1
	cmp r7, #0
	blt _0802FC40
	b _0802FA86
_0802FC40:
	movs r0, #0
	cmp r0, #0
	bne _0802FC4E
	ldr r0, _0802FC74 @ =0x020395F8
	adds r0, #0x87
	movs r1, #1
	strb r1, [r0]
_0802FC4E:
	ldr r4, [sp, #8]
	cmp r4, #0
	bne _0802FC5C
	ldr r0, _0802FC74 @ =0x020395F8
	adds r0, #0x86
	movs r1, #5
	strb r1, [r0]
_0802FC5C:
	ldr r0, [sp, #4]
	cmp r0, #0xff
	bne _0802FC78
	movs r0, #0
	b _0802FC7A
	.align 2, 0
_0802FC68: .4byte gMapUnit
_0802FC6C: .4byte gActiveUnit
_0802FC70: .4byte gMapRange
_0802FC74: .4byte 0x020395F8
_0802FC78:
	movs r0, #1
_0802FC7A:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_802FC8C
sub_802FC8C: @ 0x0802FC8C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	movs r4, #0
	ldr r1, _0802FCF4 @ =gMapSize
	movs r2, #2
	ldrsh r0, [r1, r2]
	subs r2, r0, #1
	cmp r2, #0
	blt _0802FCE8
	movs r3, #0
	ldrsh r7, [r1, r3]
	ldr r0, _0802FCF8 @ =gMapRange
	mov r8, r0
	ldr r3, _0802FCFC @ =gMapUnit
	mov ip, r3
_0802FCAC:
	subs r1, r7, #1
	subs r5, r2, #1
	cmp r1, #0
	blt _0802FCE2
	mov r3, r8
	ldr r0, [r3]
	lsls r2, r2, #2
	adds r0, r2, r0
	ldr r3, [r0]
	mov r6, ip
_0802FCC0:
	adds r0, r3, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0802FCDC
	ldr r0, [r6]
	adds r0, r2, r0
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802FCDC
	adds r4, #1
_0802FCDC:
	subs r1, #1
	cmp r1, #0
	bge _0802FCC0
_0802FCE2:
	adds r2, r5, #0
	cmp r2, #0
	bge _0802FCAC
_0802FCE8:
	adds r0, r4, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0802FCF4: .4byte gMapSize
_0802FCF8: .4byte gMapRange
_0802FCFC: .4byte gMapUnit

	thumb_func_start sub_802FD00
sub_802FD00: @ 0x0802FD00
	push {r4, r5, r6, r7, lr}
	movs r6, #0
	ldr r0, _0802FD6C @ =gMapSize
	movs r1, #2
	ldrsh r0, [r0, r1]
	subs r1, r0, #1
	cmp r1, #0
	blt _0802FD62
_0802FD10:
	ldr r0, _0802FD6C @ =gMapSize
	movs r2, #0
	ldrsh r0, [r0, r2]
	subs r4, r0, #1
	subs r7, r1, #1
	cmp r4, #0
	blt _0802FD5C
	lsls r5, r1, #2
_0802FD20:
	ldr r0, _0802FD70 @ =gMapRange
	ldr r0, [r0]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0802FD56
	ldr r0, _0802FD74 @ =gMapUnit
	ldr r0, [r0]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r1, r0, r4
	ldrb r0, [r1]
	cmp r0, #0
	beq _0802FD56
	ldr r0, _0802FD78 @ =gActiveUnitId
	ldrb r0, [r0]
	ldrb r1, [r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0802FD56
	adds r6, #1
_0802FD56:
	subs r4, #1
	cmp r4, #0
	bge _0802FD20
_0802FD5C:
	adds r1, r7, #0
	cmp r1, #0
	bge _0802FD10
_0802FD62:
	adds r0, r6, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0802FD6C: .4byte gMapSize
_0802FD70: .4byte gMapRange
_0802FD74: .4byte gMapUnit
_0802FD78: .4byte gActiveUnitId

	thumb_func_start sub_802FD7C
sub_802FD7C: @ 0x0802FD7C
	push {r4, r5, r6, r7, lr}
	movs r6, #0
	ldr r0, _0802FDE8 @ =gMapSize
	movs r1, #2
	ldrsh r0, [r0, r1]
	subs r1, r0, #1
	cmp r1, #0
	blt _0802FDE0
_0802FD8C:
	ldr r0, _0802FDE8 @ =gMapSize
	movs r2, #0
	ldrsh r0, [r0, r2]
	subs r4, r0, #1
	subs r7, r1, #1
	cmp r4, #0
	blt _0802FDDA
	lsls r5, r1, #2
_0802FD9C:
	ldr r0, _0802FDEC @ =gMapRange
	ldr r0, [r0]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0802FDD4
	ldr r0, _0802FDF0 @ =gMapUnit
	ldr r0, [r0]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r1, r0, r4
	ldrb r0, [r1]
	cmp r0, #0
	beq _0802FDD4
	ldr r0, _0802FDF4 @ =gActiveUnitId
	ldrb r0, [r0]
	ldrb r1, [r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0802FDD4
	adds r6, #1
_0802FDD4:
	subs r4, #1
	cmp r4, #0
	bge _0802FD9C
_0802FDDA:
	adds r1, r7, #0
	cmp r1, #0
	bge _0802FD8C
_0802FDE0:
	adds r0, r6, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0802FDE8: .4byte gMapSize
_0802FDEC: .4byte gMapRange
_0802FDF0: .4byte gMapUnit
_0802FDF4: .4byte gActiveUnitId

	thumb_func_start sub_802FDF8
sub_802FDF8: @ 0x0802FDF8
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r6, #0
	ldr r4, _0802FE74 @ =0x085C85E8
	subs r4, #4
	movs r2, #0
	ldrsh r0, [r4, r2]
	ldr r2, _0802FE78 @ =0x0000270F
	cmp r0, r2
	beq _0802FE66
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	mov ip, r0
	ldr r5, _0802FE7C @ =gMapSize
	lsls r0, r1, #0x10
	asrs r7, r0, #0x10
	mov sb, r2
	ldr r0, _0802FE80 @ =gMapUnit
	mov r8, r0
_0802FE2A:
	adds r4, #4
	movs r1, #0
	ldrsh r0, [r4, r1]
	mov r2, ip
	adds r3, r2, r0
	movs r1, #0
	ldrsh r0, [r5, r1]
	cmp r3, r0
	bge _0802FE5E
	movs r2, #2
	ldrsh r0, [r4, r2]
	adds r2, r7, r0
	movs r1, #2
	ldrsh r0, [r5, r1]
	cmp r2, r0
	bge _0802FE5E
	mov r0, r8
	ldr r1, [r0]
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r3
	ldrb r0, [r0]
	cmp r0, #0
	beq _0802FE5E
	adds r6, #1
_0802FE5E:
	movs r1, #0
	ldrsh r0, [r4, r1]
	cmp r0, sb
	bne _0802FE2A
_0802FE66:
	adds r0, r6, #0
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0802FE74: .4byte 0x085C85E8
_0802FE78: .4byte 0x0000270F
_0802FE7C: .4byte gMapSize
_0802FE80: .4byte gMapUnit

	thumb_func_start sub_802FE84
sub_802FE84: @ 0x0802FE84
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r6, #0
	ldr r4, _0802FF0C @ =0x085C85E8
	subs r4, #4
	movs r2, #0
	ldrsh r0, [r4, r2]
	ldr r2, _0802FF10 @ =0x0000270F
	cmp r0, r2
	beq _0802FEFE
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	mov r8, r0
	ldr r5, _0802FF14 @ =gMapSize
	lsls r0, r1, #0x10
	asrs r7, r0, #0x10
	mov sb, r2
_0802FEB2:
	adds r4, #4
	movs r1, #0
	ldrsh r0, [r4, r1]
	mov r2, r8
	adds r3, r2, r0
	movs r1, #0
	ldrsh r0, [r5, r1]
	cmp r3, r0
	bge _0802FEF6
	movs r2, #2
	ldrsh r0, [r4, r2]
	adds r2, r7, r0
	movs r1, #2
	ldrsh r0, [r5, r1]
	cmp r2, r0
	bge _0802FEF6
	ldr r0, _0802FF18 @ =gMapUnit
	ldr r1, [r0]
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r1, r0, r3
	ldrb r0, [r1]
	cmp r0, #0
	beq _0802FEF6
	ldr r0, _0802FF1C @ =gActiveUnitId
	ldrb r0, [r0]
	ldrb r1, [r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0802FEF6
	adds r6, #1
_0802FEF6:
	movs r2, #0
	ldrsh r0, [r4, r2]
	cmp r0, sb
	bne _0802FEB2
_0802FEFE:
	adds r0, r6, #0
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0802FF0C: .4byte 0x085C85E8
_0802FF10: .4byte 0x0000270F
_0802FF14: .4byte gMapSize
_0802FF18: .4byte gMapUnit
_0802FF1C: .4byte gActiveUnitId

	thumb_func_start sub_802FF20
sub_802FF20: @ 0x0802FF20
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r6, #0
	ldr r4, _0802FFAC @ =0x085C85E8
	subs r4, #4
	movs r2, #0
	ldrsh r0, [r4, r2]
	ldr r2, _0802FFB0 @ =0x0000270F
	cmp r0, r2
	beq _0802FF9C
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	mov r8, r0
	ldr r5, _0802FFB4 @ =gMapSize
	lsls r0, r1, #0x10
	asrs r7, r0, #0x10
	mov sb, r2
_0802FF4E:
	adds r4, #4
	movs r1, #0
	ldrsh r0, [r4, r1]
	mov r2, r8
	adds r3, r2, r0
	movs r1, #0
	ldrsh r0, [r5, r1]
	cmp r3, r0
	bge _0802FF94
	movs r2, #2
	ldrsh r0, [r4, r2]
	adds r2, r7, r0
	movs r1, #2
	ldrsh r0, [r5, r1]
	cmp r2, r0
	bge _0802FF94
	ldr r0, _0802FFB8 @ =gMapUnit
	ldr r1, [r0]
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r1, r0, r3
	ldrb r0, [r1]
	cmp r0, #0
	beq _0802FF94
	ldr r0, _0802FFBC @ =gActiveUnitId
	ldrb r0, [r0]
	ldrb r1, [r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0802FF94
	adds r6, #1
_0802FF94:
	movs r2, #0
	ldrsh r0, [r4, r2]
	cmp r0, sb
	bne _0802FF4E
_0802FF9C:
	adds r0, r6, #0
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0802FFAC: .4byte 0x085C85E8
_0802FFB0: .4byte 0x0000270F
_0802FFB4: .4byte gMapSize
_0802FFB8: .4byte gMapUnit
_0802FFBC: .4byte gActiveUnitId

	thumb_func_start sub_802FFC0
sub_802FFC0: @ 0x0802FFC0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov sb, r1
	bl MapFlood_08019344
	ldr r0, _08030054 @ =gMapRange
	ldr r0, [r0]
	movs r1, #0
	bl MapFill
	ldr r0, _08030058 @ =gMapSize
	movs r1, #2
	ldrsh r0, [r0, r1]
	subs r7, r0, #1
	cmp r7, #0
	blt _08030044
_0802FFEA:
	ldr r0, _08030058 @ =gMapSize
	movs r2, #0
	ldrsh r0, [r0, r2]
	subs r6, r0, #1
	subs r0, r7, #1
	mov sl, r0
	cmp r6, #0
	blt _0803003E
	lsls r1, r7, #0x10
	mov r8, r1
_0802FFFE:
	ldr r0, _0803005C @ =gMapMovement
	ldr r1, [r0]
	lsls r0, r7, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r6
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _08030038
	lsls r5, r6, #0x10
	asrs r5, r5, #0x10
	mov r0, sb
	bl GetItemMinRange
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r0, sb
	bl GetItemMaxRange
	adds r3, r0, #0
	lsls r3, r3, #0x10
	asrs r3, r3, #0x10
	adds r0, r5, #0
	mov r2, r8
	asrs r1, r2, #0x10
	adds r2, r4, #0
	bl MapIncInBoundedRange
_08030038:
	subs r6, #1
	cmp r6, #0
	bge _0802FFFE
_0803003E:
	mov r7, sl
	cmp r7, #0
	bge _0802FFEA
_08030044:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08030054: .4byte gMapRange
_08030058: .4byte gMapSize
_0803005C: .4byte gMapMovement

	thumb_func_start sub_8030060
sub_8030060: @ 0x08030060
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	bl GetUnitPower
	cmp r0, #0x14
	bgt _08030076
	adds r0, r4, #0
	bl GetUnitPower
	adds r7, r0, #0
	b _08030078
_08030076:
	movs r7, #0x14
_08030078:
	adds r0, r4, #0
	bl MapFlood_08019344
	ldr r0, _080300D4 @ =gMapRange
	ldr r0, [r0]
	movs r1, #0
	bl MapFill
	ldr r0, _080300D8 @ =gMapSize
	movs r1, #2
	ldrsh r0, [r0, r1]
	subs r5, r0, #1
	cmp r5, #0
	blt _080300CC
_08030094:
	ldr r0, _080300D8 @ =gMapSize
	movs r1, #0
	ldrsh r0, [r0, r1]
	subs r4, r0, #1
	subs r6, r5, #1
	cmp r4, #0
	blt _080300C6
_080300A2:
	ldr r0, _080300DC @ =gMapMovement
	ldr r1, [r0]
	lsls r0, r5, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _080300C0
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r7, #0
	movs r3, #1
	bl MapAddInRange
_080300C0:
	subs r4, #1
	cmp r4, #0
	bge _080300A2
_080300C6:
	adds r5, r6, #0
	cmp r5, #0
	bge _08030094
_080300CC:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080300D4: .4byte gMapRange
_080300D8: .4byte gMapSize
_080300DC: .4byte gMapMovement

	thumb_func_start sub_80300E0
sub_80300E0: @ 0x080300E0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov sb, r1
	bl MapFlood_08019344
	ldr r0, _08030174 @ =gMapRange
	ldr r0, [r0]
	movs r1, #0
	bl MapFill
	ldr r0, _08030178 @ =gMapSize
	movs r1, #2
	ldrsh r0, [r0, r1]
	subs r7, r0, #1
	cmp r7, #0
	blt _08030164
_0803010A:
	ldr r0, _08030178 @ =gMapSize
	movs r2, #0
	ldrsh r0, [r0, r2]
	subs r6, r0, #1
	subs r0, r7, #1
	mov sl, r0
	cmp r6, #0
	blt _0803015E
	lsls r1, r7, #0x10
	mov r8, r1
_0803011E:
	ldr r0, _0803017C @ =gMapMovement
	ldr r1, [r0]
	lsls r0, r7, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r6
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _08030158
	lsls r5, r6, #0x10
	asrs r5, r5, #0x10
	mov r0, sb
	bl GetItemMinRange
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r0, sb
	bl GetItemMaxRange
	adds r3, r0, #0
	lsls r3, r3, #0x10
	asrs r3, r3, #0x10
	adds r0, r5, #0
	mov r2, r8
	asrs r1, r2, #0x10
	adds r2, r4, #0
	bl MapIncInBoundedRange
_08030158:
	subs r6, #1
	cmp r6, #0
	bge _0803011E
_0803015E:
	mov r7, sl
	cmp r7, #0
	bge _0803010A
_08030164:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08030174: .4byte gMapRange
_08030178: .4byte gMapSize
_0803017C: .4byte gMapMovement

	thumb_func_start sub_8030180
sub_8030180: @ 0x08030180
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	adds r7, r0, #0
	adds r6, r1, #0
	adds r5, r3, #0
	mov sb, r2
	movs r0, #0xff
	mov r8, r0
	ldr r1, _080301E8 @ =0x0810D680
	mov r0, sp
	movs r2, #8
	bl memcpy
	mov r4, sp
	movs r2, #3
_080301A4:
	movs r0, #0
	ldrsb r0, [r4, r0]
	adds r0, r7, r0
	movs r1, #1
	ldrsb r1, [r4, r1]
	adds r1, r6, r1
	str r2, [sp, #8]
	bl _call_via_r9
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r2, [sp, #8]
	cmp r0, #0xff
	beq _080301D6
	cmp r8, r0
	bls _080301D6
	mov r8, r0
	movs r0, #0
	ldrsb r0, [r4, r0]
	adds r0, r0, r7
	strh r0, [r5]
	movs r0, #1
	ldrsb r0, [r4, r0]
	adds r0, r0, r6
	strh r0, [r5, #2]
_080301D6:
	adds r4, #2
	subs r2, #1
	cmp r2, #0
	bge _080301A4
	mov r0, r8
	cmp r0, #0xff
	bne _080301EC
	movs r0, #0
	b _080301EE
	.align 2, 0
_080301E8: .4byte 0x0810D680
_080301EC:
	movs r0, #1
_080301EE:
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_80301FC
sub_80301FC: @ 0x080301FC
	push {r4, lr}
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	movs r0, #0
	ldr r2, _08030228 @ =0x085C8834
	ldrh r1, [r2]
	ldr r3, _0803022C @ =0x0000FFFF
	cmp r1, r3
	beq _0803021C
_0803020E:
	cmp r1, r4
	beq _08030220
	adds r2, #2
	adds r0, #1
	ldrh r1, [r2]
	cmp r1, r3
	bne _0803020E
_0803021C:
	movs r0, #1
	rsbs r0, r0, #0
_08030220:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08030228: .4byte 0x085C8834
_0803022C: .4byte 0x0000FFFF

	thumb_func_start sub_8030230
sub_8030230: @ 0x08030230
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	movs r6, #0xff
	movs r5, #0xff
	movs r4, #0
_0803023A:
	lsls r1, r4, #1
	adds r0, r7, #0
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r1, [r0]
	cmp r1, #0
	beq _08030266
	movs r0, #0xff
	ands r1, r0
	adds r0, r1, #0
	bl sub_80301FC
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r6, r0
	blo _08030260
	adds r6, r0, #0
	lsls r0, r4, #0x18
	lsrs r5, r0, #0x18
_08030260:
	adds r4, #1
	cmp r4, #4
	ble _0803023A
_08030266:
	lsls r0, r5, #0x18
	asrs r0, r0, #0x18
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8030270
sub_8030270: @ 0x08030270
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r5, r0, #0
	mov sb, r1
	movs r0, #0xff
	mov sl, r0
	ldr r1, _080302B4 @ =0x020395F8
	adds r1, #0x7b
	movs r0, #2
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _080302BC
	ldr r4, _080302B8 @ =gMapMovement
	ldr r0, [r4]
	movs r1, #1
	rsbs r1, r1, #0
	bl MapFill
	movs r0, #0xf
	ldrsb r0, [r5, r0]
	ldr r1, [r4]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r1, #0xe
	ldrsb r1, [r5, r1]
	ldr r0, [r0]
	adds r0, r0, r1
	movs r1, #0
	strb r1, [r0]
	b _080302C2
	.align 2, 0
_080302B4: .4byte 0x020395F8
_080302B8: .4byte gMapMovement
_080302BC:
	adds r0, r5, #0
	bl MapFlood_08019344
_080302C2:
	ldr r1, _08030340 @ =gMapSize
	movs r2, #2
	ldrsh r0, [r1, r2]
	subs r5, r0, #1
	cmp r5, #0
	blt _08030336
_080302CE:
	ldr r1, _08030340 @ =gMapSize
	movs r2, #0
	ldrsh r0, [r1, r2]
	subs r3, r0, #1
	subs r0, r5, #1
	mov r8, r0
	cmp r3, #0
	blt _08030330
	lsls r4, r5, #2
	ldr r1, _08030344 @ =gMapMovement
	mov ip, r1
	ldr r7, _08030348 @ =gMapUnit
	ldr r6, _0803034C @ =gActiveUnitId
	ldr r1, _08030350 @ =gMapOther
_080302EA:
	mov r2, ip
	ldr r0, [r2]
	adds r0, r4, r0
	ldr r0, [r0]
	adds r0, r0, r3
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _0803032A
	ldr r0, [r7]
	adds r0, r4, r0
	ldr r0, [r0]
	adds r0, r0, r3
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803030E
	ldrb r2, [r6]
	cmp r0, r2
	bne _0803032A
_0803030E:
	ldr r0, [r1]
	adds r2, r4, r0
	ldr r0, [r2]
	adds r0, r0, r3
	ldrb r0, [r0]
	cmp sl, r0
	blo _0803032A
	mov r0, sb
	strh r3, [r0]
	strh r5, [r0, #2]
	ldr r0, [r2]
	adds r0, r0, r3
	ldrb r0, [r0]
	mov sl, r0
_0803032A:
	subs r3, #1
	cmp r3, #0
	bge _080302EA
_08030330:
	mov r5, r8
	cmp r5, #0
	bge _080302CE
_08030336:
	mov r1, sl
	cmp r1, #0xff
	bne _08030354
	movs r0, #0
	b _08030356
	.align 2, 0
_08030340: .4byte gMapSize
_08030344: .4byte gMapMovement
_08030348: .4byte gMapUnit
_0803034C: .4byte gActiveUnitId
_08030350: .4byte gMapOther
_08030354:
	movs r0, #1
_08030356:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8030364
sub_8030364: @ 0x08030364
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	ldr r5, _080303E0 @ =gActiveUnit
	ldr r0, [r5]
	ldr r0, [r0, #4]
	ldr r0, [r0, #0x34]
	bl SetWorkingMovTable
	ldr r0, _080303E4 @ =gMapRange
	ldr r0, [r0]
	bl SetWorkingMap
	ldr r2, [r5]
	movs r0, #0xe
	ldrsb r0, [r2, r0]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	movs r3, #0xb
	ldrsb r3, [r2, r3]
	movs r2, #0x7c
	bl BeginMapFlood
	adds r0, r4, #0
	bl sub_80303F8
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r4, _080303E8 @ =0x085C864C
	cmp r0, #1
	bne _080303A4
	ldr r4, _080303EC @ =0x085C864F
_080303A4:
	adds r0, r4, #0
	movs r1, #1
	adds r2, r6, #0
	bl sub_802F7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _080303F0
	ldr r2, [r5]
	movs r0, #0xe
	ldrsb r0, [r2, r0]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r2, [r2, #4]
	ldr r2, [r2, #0x34]
	bl MapFlood_080193F4
	adds r0, r4, #0
	movs r1, #0
	adds r2, r6, #0
	bl sub_802F7B4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _080303F0
	movs r0, #0
	b _080303F2
	.align 2, 0
_080303E0: .4byte gActiveUnit
_080303E4: .4byte gMapRange
_080303E8: .4byte 0x085C864C
_080303EC: .4byte 0x085C864F
_080303F0:
	movs r0, #1
_080303F2:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_80303F8
sub_80303F8: @ 0x080303F8
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	movs r5, #0
	strb r5, [r6]
	ldr r4, _08030418 @ =gActiveUnit
	ldr r0, [r4]
	bl GetUnitItemCount
	cmp r0, #5
	bne _08030420
	ldr r1, [r4]
	movs r0, #8
	ldrb r2, [r1, #0xa]
	orrs r0, r2
	strb r0, [r1, #0xa]
	b _08030462
	.align 2, 0
_08030418: .4byte gActiveUnit
_0803041C:
	movs r0, #1
	b _08030464
_08030420:
	movs r5, #0
	adds r7, r4, #0
_08030424:
	ldr r0, [r7]
	lsls r1, r5, #1
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r4, [r0]
	cmp r4, #0
	beq _08030462
	strb r5, [r6]
	adds r0, r4, #0
	bl GetItemIid
	cmp r0, #0x64
	beq _0803041C
	adds r0, r4, #0
	bl GetItemIid
	cmp r0, #0x67
	bne _0803045C
	ldr r0, [r7]
	ldr r1, [r0]
	ldr r0, [r0, #4]
	ldr r1, [r1, #0x28]
	ldr r0, [r0, #0x24]
	orrs r1, r0
	movs r0, #4
	ands r1, r0
	cmp r1, #0
	bne _0803041C
_0803045C:
	adds r5, #1
	cmp r5, #4
	ble _08030424
_08030462:
	movs r0, #0
_08030464:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_803046C
sub_803046C: @ 0x0803046C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	ldr r4, [sp, #0x38]
	lsls r0, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r5, r1, #0x10
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp, #0xc]
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	mov sl, r3
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	movs r1, #0
	str r1, [sp, #0x14]
	ldr r1, _080304C8 @ =gActiveUnit
	ldr r1, [r1]
	movs r2, #0xe
	ldrsb r2, [r1, r2]
	lsrs r3, r0, #0x10
	asrs r0, r0, #0x10
	cmp r2, r0
	bne _080304CC
	ldrb r1, [r1, #0xf]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
	cmp r1, r0
	bne _080304CC
	ldr r0, [sp, #0x14]
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	adds r0, r2, #0
	ldr r2, [sp, #0xc]
	movs r3, #0
	bl AiSetDecision
	b _08030620
	.align 2, 0
_080304C8: .4byte gActiveUnit
_080304CC:
	cmp r4, #0
	beq _080304EC
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	lsls r1, r5, #0x10
	asrs r1, r1, #0x10
	ldr r2, _080304E8 @ =gActiveUnit
	ldr r2, [r2]
	ldr r2, [r2, #4]
	ldr r2, [r2, #0x34]
	bl MapFlood_080193F4
	b _080304FC
	.align 2, 0
_080304E8: .4byte gActiveUnit
_080304EC:
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	lsls r1, r5, #0x10
	asrs r1, r1, #0x10
	ldr r2, _0803052C @ =gActiveUnit
	ldr r2, [r2]
	bl sub_8035098
_080304FC:
	ldr r4, _0803052C @ =gActiveUnit
	ldr r0, [r4]
	bl MapFlood_08019344
	ldr r2, [r4]
	movs r0, #0xf
	ldrsb r0, [r2, r0]
	ldr r1, _08030530 @ =gMapRange
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	mov sb, r0
	ldr r1, _08030534 @ =0x0000FFFF
	str r1, [sp, #0x10]
	ldr r0, _08030538 @ =gMapSize
	ldrh r0, [r0, #2]
	subs r0, #1
	lsls r0, r0, #0x10
	b _080305F8
	.align 2, 0
_0803052C: .4byte gActiveUnit
_08030530: .4byte gMapRange
_08030534: .4byte 0x0000FFFF
_08030538: .4byte gMapSize
_0803053C:
	ldr r0, _08030630 @ =gMapSize
	ldrh r0, [r0]
	subs r0, #1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	lsls r1, r4, #0x10
	lsls r7, r2, #0x10
	cmp r1, #0
	blt _080305F4
	asrs r0, r7, #0xe
	mov r8, r0
_08030552:
	ldr r0, _08030634 @ =gMapMovement
	ldr r0, [r0]
	add r0, r8
	asrs r3, r1, #0x10
	ldr r0, [r0]
	adds r0, r0, r3
	lsls r2, r4, #0x10
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _080305E8
	ldr r0, _08030638 @ =gMapUnit
	ldr r0, [r0]
	add r0, r8
	ldr r0, [r0]
	adds r0, r0, r3
	ldrb r1, [r0]
	cmp r1, #0
	beq _0803057E
	ldr r0, _0803063C @ =gActiveUnitId
	ldrb r0, [r0]
	cmp r1, r0
	bne _080305E8
_0803057E:
	mov r1, sl
	cmp r1, #0
	bne _080305B2
	ldr r0, _08030640 @ =gActiveUnit
	ldr r0, [r0]
	movs r1, #0x1a
	ldrsb r1, [r0, r1]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r1, r0
	ldr r0, _08030644 @ =0x020395F8
	adds r0, #0x85
	ldrb r0, [r0]
	cmp r1, r0
	bge _080305B2
	ldr r0, _08030648 @ =gMapOther
	ldr r0, [r0]
	add r0, r8
	ldr r0, [r0]
	adds r0, r0, r3
	ldrb r0, [r0]
	lsls r2, r4, #0x10
	cmp r0, #0
	bne _080305E8
_080305B2:
	lsls r4, r4, #0x10
	asrs r6, r4, #0x10
	asrs r5, r7, #0x10
	adds r0, r6, #0
	adds r1, r5, #0
	mov r2, sl
	bl sub_8032814
	lsls r0, r0, #0x18
	adds r2, r4, #0
	cmp r0, #0
	beq _080305E8
	ldr r0, _0803064C @ =gMapRange
	ldr r1, [r0]
	lsls r0, r5, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r6
	ldrb r1, [r0]
	cmp r1, sb
	bhi _080305E8
	ldrb r0, [r0]
	mov sb, r0
	lsrs r0, r2, #0x10
	str r0, [sp, #0x10]
	lsrs r1, r7, #0x10
	str r1, [sp, #0x14]
_080305E8:
	ldr r1, _08030650 @ =0xFFFF0000
	adds r0, r2, r1
	lsrs r4, r0, #0x10
	lsls r1, r4, #0x10
	cmp r1, #0
	bge _08030552
_080305F4:
	ldr r1, _08030650 @ =0xFFFF0000
	adds r0, r7, r1
_080305F8:
	lsrs r2, r0, #0x10
	cmp r0, #0
	bge _0803053C
	ldr r1, [sp, #0x10]
	lsls r0, r1, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _08030620
	ldr r0, [sp, #0x14]
	lsls r1, r0, #0x10
	asrs r1, r1, #0x10
	movs r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	str r0, [sp, #8]
	adds r0, r2, #0
	ldr r2, [sp, #0xc]
	movs r3, #0
	bl AiSetDecision
_08030620:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08030630: .4byte gMapSize
_08030634: .4byte gMapMovement
_08030638: .4byte gMapUnit
_0803063C: .4byte gActiveUnitId
_08030640: .4byte gActiveUnit
_08030644: .4byte 0x020395F8
_08030648: .4byte gMapOther
_0803064C: .4byte gMapRange
_08030650: .4byte 0xFFFF0000

	thumb_func_start GetUnitClosestValidPosition
GetUnitClosestValidPosition: @ 0x08030654
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r5, r0, #0
	adds r6, r3, #0
	lsls r1, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r0, r2, #0x10
	mov ip, r0
	asrs r4, r2, #0x10
	ldr r2, _080306A0 @ =gMapUnit
	ldr r0, [r2]
	lsls r2, r4, #2
	adds r0, r2, r0
	lsrs r3, r1, #0x10
	mov r8, r3
	asrs r3, r1, #0x10
	ldr r1, [r0]
	adds r1, r1, r3
	ldr r7, _080306A4 @ =gMapOther
	ldr r0, [r7]
	adds r2, r2, r0
	ldr r0, [r2]
	adds r0, r0, r3
	ldrb r0, [r0]
	ldrb r1, [r1]
	orrs r0, r1
	cmp r0, #0
	bne _080306A8
	mov r0, r8
	strh r0, [r6]
	mov r1, ip
	strh r1, [r6, #2]
	b _08030788
	.align 2, 0
_080306A0: .4byte gMapUnit
_080306A4: .4byte gMapOther
_080306A8:
	ldr r0, [r5, #4]
	ldr r2, [r0, #0x34]
	adds r0, r3, #0
	adds r1, r4, #0
	bl MapFlood_080193F4
	adds r0, r5, #0
	bl MapFlood_080193C0
	movs r2, #0x7c
	str r2, [sp]
	ldr r0, _080306CC @ =0x0000FFFF
	strh r0, [r6]
	ldr r1, _080306D0 @ =gMapSize
	ldrh r0, [r1, #2]
	subs r0, #1
	lsls r0, r0, #0x10
	b _08030758
	.align 2, 0
_080306CC: .4byte 0x0000FFFF
_080306D0: .4byte gMapSize
_080306D4:
	ldr r3, _08030770 @ =gMapSize
	ldrh r0, [r3]
	subs r0, #1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	lsls r1, r3, #0x10
	lsls r7, r5, #0x10
	str r7, [sp, #4]
	cmp r1, #0
	blt _08030752
	asrs r4, r7, #0xe
	ldr r0, _08030774 @ =gMapMovement
	mov sl, r0
	ldr r2, _08030778 @ =gMapUnit
	mov sb, r2
	ldr r7, _0803077C @ =gMapOther
	mov r8, r7
	ldr r0, _08030780 @ =gMapRange
	mov ip, r0
_080306FA:
	mov r2, sl
	ldr r0, [r2]
	adds r0, r4, r0
	asrs r2, r1, #0x10
	ldr r0, [r0]
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _08030744
	mov r7, sb
	ldr r0, [r7]
	adds r0, r4, r0
	ldr r1, [r0]
	adds r1, r1, r2
	mov r7, r8
	ldr r0, [r7]
	adds r0, r4, r0
	ldr r0, [r0]
	adds r0, r0, r2
	ldrb r0, [r0]
	ldrb r1, [r1]
	orrs r0, r1
	cmp r0, #0
	bne _08030744
	mov r1, ip
	ldr r0, [r1]
	adds r0, r4, r0
	ldr r0, [r0]
	adds r0, r0, r2
	ldrb r2, [r0]
	ldr r7, [sp]
	cmp r2, r7
	bhi _08030744
	ldrb r0, [r0]
	str r0, [sp]
	strh r3, [r6]
	strh r5, [r6, #2]
_08030744:
	lsls r0, r3, #0x10
	ldr r1, _08030784 @ =0xFFFF0000
	adds r0, r0, r1
	lsrs r3, r0, #0x10
	lsls r1, r3, #0x10
	cmp r1, #0
	bge _080306FA
_08030752:
	ldr r2, [sp, #4]
	ldr r3, _08030784 @ =0xFFFF0000
	adds r0, r2, r3
_08030758:
	lsrs r5, r0, #0x10
	cmp r0, #0
	bge _080306D4
	movs r7, #0
	ldrsh r1, [r6, r7]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08030788
	movs r0, #0
	b _0803078A
	.align 2, 0
_08030770: .4byte gMapSize
_08030774: .4byte gMapMovement
_08030778: .4byte gMapUnit
_0803077C: .4byte gMapOther
_08030780: .4byte gMapRange
_08030784: .4byte 0xFFFF0000
_08030788:
	movs r0, #1
_0803078A:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_803079C
sub_803079C: @ 0x0803079C
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	movs r3, #0
	ldr r2, _080307A8 @ =0x085C8674
	b _080307C4
	.align 2, 0
_080307A8: .4byte 0x085C8674
_080307AC:
	ldr r1, [r2]
	b _080307B6
_080307B0:
	cmp r0, r4
	beq _080307CA
	adds r1, #1
_080307B6:
	ldrb r0, [r1]
	cmp r0, #0
	bne _080307B0
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	adds r2, #4
_080307C4:
	ldr r0, [r2]
	cmp r0, #0
	bne _080307AC
_080307CA:
	adds r0, r3, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80307D4
sub_80307D4: @ 0x080307D4
	push {r4, r5, lr}
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	movs r4, #1
_080307DC:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0803080C
	ldr r0, [r1]
	cmp r0, #0
	beq _0803080C
	ldrb r0, [r0, #4]
	cmp r0, r5
	bne _0803080C
	ldrh r1, [r1, #0xc]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08030802
_080307FE:
	movs r0, #1
	b _08030814
_08030802:
	movs r0, #5
	ands r0, r1
	cmp r0, #0
	bne _08030812
	b _080307FE
_0803080C:
	adds r4, #1
	cmp r4, #0xbf
	ble _080307DC
_08030812:
	movs r0, #0
_08030814:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_803081C
sub_803081C: @ 0x0803081C
	push {r4, r5, r6, lr}
	ldr r4, [sp, #0x10]
	lsls r1, r1, #0x10
	lsrs r5, r1, #0x10
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	adds r6, r3, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	subs r1, r0, r2
	cmp r1, #0
	bge _0803083E
	subs r1, r2, r0
_0803083E:
	lsls r0, r5, #0x10
	asrs r2, r0, #0x10
	subs r0, r2, r3
	cmp r0, #0
	bge _0803084A
	subs r0, r6, r2
_0803084A:
	adds r0, r1, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, r4
	bls _08030858
	movs r0, #0
	b _0803085A
_08030858:
	movs r0, #1
_0803085A:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_8030860
sub_8030860: @ 0x08030860
	push {lr}
	sub sp, #4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	lsls r1, r1, #0x18
	ldr r2, _08030888 @ =gMapTerrain
	ldr r2, [r2]
	lsrs r1, r1, #0x16
	adds r1, r1, r2
	ldr r1, [r1]
	adds r1, r1, r0
	ldrb r0, [r1]
	cmp r0, #5
	beq _080308A4
	cmp r0, #5
	bgt _0803088C
	cmp r0, #3
	beq _080308A4
	b _080308A8
	.align 2, 0
_08030888: .4byte gMapTerrain
_0803088C:
	cmp r0, #0x21
	beq _08030896
	cmp r0, #0x24
	bne _080308A8
	b _080308A4
_08030896:
	mov r0, sp
	bl sub_80303F8
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _080308A8
_080308A4:
	movs r0, #1
	b _080308AA
_080308A8:
	movs r0, #0
_080308AA:
	add sp, #4
	pop {r1}
	bx r1

	thumb_func_start sub_80308B0
sub_80308B0: @ 0x080308B0
	push {r4, r5, r6, r7, lr}
	ldr r0, _08030964 @ =0x020395F8
	adds r0, #0x85
	movs r1, #0
	strb r1, [r0]
	movs r4, #1
_080308BC:
	adds r0, r4, #0
	bl GetUnit
	adds r5, r0, #0
	adds r7, r4, #1
	cmp r5, #0
	beq _08030956
	ldr r0, [r5]
	cmp r0, #0
	beq _08030956
	movs r0, #5
	ldrh r1, [r5, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _08030956
	ldr r0, [r5, #4]
	ldrb r2, [r5, #0x1a]
	ldrb r0, [r0, #0x12]
	adds r0, r2, r0
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	ldr r0, _08030964 @ =0x020395F8
	adds r0, #0x85
	ldrb r2, [r0]
	cmp r1, r2
	bls _080308F2
	strb r1, [r0]
_080308F2:
	movs r6, #0
	ldrh r4, [r5, #0x1c]
	cmp r4, #0
	beq _08030950
_080308FA:
	adds r0, r5, #0
	adds r1, r4, #0
	bl CanUnitUseWeapon
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08030916
	adds r0, r5, #0
	adds r1, r4, #0
	bl CanUnitUseStaff
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803093C
_08030916:
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #2
	ands r1, r0
	cmp r1, #0
	beq _0803092C
	movs r0, #1
	ldrb r1, [r5, #0xa]
	orrs r0, r1
	strb r0, [r5, #0xa]
_0803092C:
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_8030968
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_8030994
_0803093C:
	adds r6, #1
	cmp r6, #4
	bgt _08030950
	lsls r1, r6, #1
	adds r0, r5, #0
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r4, [r0]
	cmp r4, #0
	bne _080308FA
_08030950:
	adds r0, r5, #0
	bl sub_80309E0
_08030956:
	adds r4, r7, #0
	cmp r4, #0x3f
	ble _080308BC
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08030964: .4byte 0x020395F8

	thumb_func_start sub_8030968
sub_8030968: @ 0x08030968
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	lsls r1, r1, #0x10
	lsrs r5, r1, #0x10
	adds r0, r5, #0
	bl GetItemAttributes
	movs r1, #4
	ands r1, r0
	cmp r1, #0
	beq _0803098C
	movs r4, #2
	adds r0, r5, #0
	bl GetItemIid
	ldrb r0, [r6, #0xa]
	orrs r4, r0
	strb r4, [r6, #0xa]
_0803098C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8030994
sub_8030994: @ 0x08030994
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	lsls r1, r1, #0x10
	lsrs r4, r1, #0x10
	movs r5, #0
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _080309B8
	adds r0, r4, #0
	bl GetItemMaxRange
	cmp r0, #1
	ble _080309B8
	movs r5, #0x40
_080309B8:
	adds r0, r4, #0
	bl GetItemEffect
	cmp r0, #2
	blt _080309D2
	cmp r0, #6
	ble _080309CE
	cmp r0, #0x25
	bgt _080309D2
	cmp r0, #0x24
	blt _080309D2
_080309CE:
	movs r0, #4
	orrs r5, r0
_080309D2:
	ldrb r0, [r6, #0xa]
	orrs r5, r0
	strb r5, [r6, #0xa]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80309E0
sub_80309E0: @ 0x080309E0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	movs r0, #0
	mov r8, r0
	ldr r0, _08030A78 @ =gMapMovement
	ldr r0, [r0]
	movs r1, #0
	bl MapFill
	movs r0, #0xe
	ldrsb r0, [r6, r0]
	movs r1, #0xf
	ldrsb r1, [r6, r1]
	movs r2, #1
	movs r3, #8
	bl MapIncInBoundedRange
	ldr r0, _08030A7C @ =gMapSize
	movs r1, #2
	ldrsh r0, [r0, r1]
	subs r1, r0, #1
	cmp r1, #0
	blt _08030A66
_08030A12:
	ldr r0, _08030A7C @ =gMapSize
	movs r2, #0
	ldrsh r0, [r0, r2]
	subs r4, r0, #1
	subs r7, r1, #1
	cmp r4, #0
	blt _08030A60
	lsls r5, r1, #2
_08030A22:
	ldr r0, _08030A78 @ =gMapMovement
	ldr r0, [r0]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08030A5A
	ldr r0, _08030A80 @ =gMapUnit
	ldr r0, [r0]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r1, r0, r4
	ldrb r0, [r1]
	cmp r0, #0
	beq _08030A5A
	movs r0, #0xb
	ldrsb r0, [r6, r0]
	ldrb r1, [r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08030A5A
	movs r0, #1
	add r8, r0
_08030A5A:
	subs r4, #1
	cmp r4, #0
	bge _08030A22
_08030A60:
	adds r1, r7, #0
	cmp r1, #0
	bge _08030A12
_08030A66:
	adds r0, r6, #0
	adds r0, #0x46
	mov r1, r8
	strb r1, [r0]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08030A78: .4byte gMapMovement
_08030A7C: .4byte gMapSize
_08030A80: .4byte gMapUnit

	thumb_func_start sub_8030A84
sub_8030A84: @ 0x08030A84
	adds r3, r0, #0
	ldrb r0, [r1, #0xc]
	adds r2, r3, #0
	adds r2, #0x42
	strb r0, [r2]
	ldrb r2, [r1, #0xd]
	adds r0, r3, #0
	adds r0, #0x44
	strb r2, [r0]
	adds r2, r3, #0
	adds r2, #0x40
	ldr r0, _08030AB0 @ =0x0000FFF8
	ldrh r3, [r2]
	ands r0, r3
	ldrb r3, [r1, #0xe]
	orrs r0, r3
	ldrb r1, [r1, #0xf]
	lsls r1, r1, #8
	orrs r0, r1
	strh r0, [r2]
	bx lr
	.align 2, 0
_08030AB0: .4byte 0x0000FFF8

	thumb_func_start sub_8030AB4
sub_8030AB4: @ 0x08030AB4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	movs r0, #0
	mov sb, r0
	ldr r0, _08030B68 @ =gMapSize
	movs r1, #2
	ldrsh r0, [r0, r1]
	subs r6, r0, #1
	cmp r6, #0
	blt _08030B5E
_08030AD0:
	ldr r0, _08030B68 @ =gMapSize
	movs r1, #0
	ldrsh r0, [r0, r1]
	subs r5, r0, #1
	subs r0, r6, #1
	mov sl, r0
	cmp r5, #0
	blt _08030B58
	lsls r7, r6, #2
_08030AE2:
	ldr r0, _08030B6C @ =gMapMovement
	ldr r0, [r0]
	adds r0, r7, r0
	ldr r0, [r0]
	adds r0, r0, r5
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _08030B52
	ldr r0, _08030B70 @ =gMapRange
	ldr r0, [r0]
	adds r0, r7, r0
	ldr r0, [r0]
	adds r0, r0, r5
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08030B52
	ldr r0, _08030B74 @ =gMapUnit
	ldr r0, [r0]
	adds r0, r7, r0
	ldr r0, [r0]
	adds r0, r0, r5
	ldrb r1, [r0]
	cmp r1, #0
	beq _08030B1E
	ldr r0, _08030B78 @ =gActiveUnitId
	ldrb r0, [r0]
	cmp r1, r0
	bne _08030B52
_08030B1E:
	adds r0, r5, #0
	adds r1, r6, #0
	bl sub_803260C
	adds r4, r0, #0
	adds r0, r5, #0
	adds r1, r6, #0
	bl sub_803264C
	adds r4, r4, r0
	ldr r0, _08030B7C @ =gMapOther
	ldr r0, [r0]
	adds r0, r7, r0
	ldr r0, [r0]
	adds r0, r0, r5
	ldrb r0, [r0]
	lsrs r0, r0, #3
	subs r4, r4, r0
	ldr r1, _08030B80 @ =0x7FFFFFFF
	adds r4, r4, r1
	cmp sb, r4
	bhs _08030B52
	mov r0, r8
	strh r5, [r0]
	strh r6, [r0, #2]
	mov sb, r4
_08030B52:
	subs r5, #1
	cmp r5, #0
	bge _08030AE2
_08030B58:
	mov r6, sl
	cmp r6, #0
	bge _08030AD0
_08030B5E:
	mov r1, sb
	cmp r1, #0
	bne _08030B84
	movs r0, #0
	b _08030B86
	.align 2, 0
_08030B68: .4byte gMapSize
_08030B6C: .4byte gMapMovement
_08030B70: .4byte gMapRange
_08030B74: .4byte gMapUnit
_08030B78: .4byte gActiveUnitId
_08030B7C: .4byte gMapOther
_08030B80: .4byte 0x7FFFFFFF
_08030B84:
	movs r0, #1
_08030B86:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8030B94
sub_8030B94: @ 0x08030B94
	push {r4, r5, r6, lr}
	movs r6, #0
	bl GetActiveFactionAlliance
	adds r5, r0, #0
	adds r4, r5, #1
	b _08030BCE
_08030BA2:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _08030BCA
	ldr r0, [r1]
	cmp r0, #0
	beq _08030BCA
	movs r0, #5
	ldrh r2, [r1, #0xc]
	ands r0, r2
	cmp r0, #0
	bne _08030BCA
	movs r0, #1
	ldrb r1, [r1, #0xa]
	ands r0, r1
	cmp r0, #0
	beq _08030BCA
	adds r6, #1
_08030BCA:
	adds r4, #1
	adds r0, r5, #0
_08030BCE:
	adds r0, #0x80
	cmp r4, r0
	blt _08030BA2
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_8030BDC
sub_8030BDC: @ 0x08030BDC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	movs r7, #0
	ldr r0, _08030C68 @ =gMapSize
	movs r1, #2
	ldrsh r0, [r0, r1]
	subs r1, r0, #1
	cmp r1, #0
	blt _08030C5C
_08030BF0:
	ldr r0, _08030C68 @ =gMapSize
	movs r2, #0
	ldrsh r0, [r0, r2]
	subs r4, r0, #1
	subs r0, r1, #1
	mov r8, r0
	cmp r4, #0
	blt _08030C56
	lsls r5, r1, #2
_08030C02:
	ldr r0, _08030C6C @ =gMapRange
	ldr r0, [r0]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08030C50
	ldr r6, _08030C70 @ =gMapUnit
	ldr r0, [r6]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r1, r0, r4
	ldrb r0, [r1]
	cmp r0, #0
	beq _08030C50
	ldr r0, _08030C74 @ =gActiveUnitId
	ldrb r0, [r0]
	ldrb r1, [r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08030C50
	ldr r0, [r6]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	bl GetUnit
	movs r1, #1
	ldrb r0, [r0, #0xa]
	ands r1, r0
	cmp r1, #0
	beq _08030C50
	adds r7, #1
_08030C50:
	subs r4, #1
	cmp r4, #0
	bge _08030C02
_08030C56:
	mov r1, r8
	cmp r1, #0
	bge _08030BF0
_08030C5C:
	adds r0, r7, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08030C68: .4byte gMapSize
_08030C6C: .4byte gMapRange
_08030C70: .4byte gMapUnit
_08030C74: .4byte gActiveUnitId

	thumb_func_start sub_8030C78
sub_8030C78: @ 0x08030C78
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r5, #0
_08030C7E:
	lsls r0, r5, #1
	adds r1, r6, #0
	adds r1, #0x1c
	adds r1, r1, r0
	ldrh r0, [r1]
	adds r4, r0, #0
	cmp r4, #0
	beq _08030CB4
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #6
	ands r1, r0
	cmp r1, #0
	beq _08030CAE
	adds r0, r6, #0
	adds r1, r4, #0
	bl CanUnitUseStaff
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08030CAE
	movs r0, #1
	b _08030CB6
_08030CAE:
	adds r5, #1
	cmp r5, #4
	ble _08030C7E
_08030CB4:
	movs r0, #0
_08030CB6:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_8030CBC
sub_8030CBC: @ 0x08030CBC
	push {lr}
	adds r2, r0, #0
	ldr r1, _08030CD8 @ =0x020395F8
	adds r1, #0x7b
	movs r0, #2
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _08030CDC
	adds r0, r2, #0
	movs r1, #0
	bl MapFlood_08019384
	b _08030CE2
	.align 2, 0
_08030CD8: .4byte 0x020395F8
_08030CDC:
	adds r0, r2, #0
	bl MapFlood_08019344
_08030CE2:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8030CE8
sub_8030CE8: @ 0x08030CE8
	push {r4, lr}
	ldr r3, _08030D28 @ =0x030013A8
	ldr r1, _08030D2C @ =0x085C97F8
	ldr r0, _08030D30 @ =gActiveUnit
	ldr r0, [r0]
	adds r4, r0, #0
	adds r4, #0x42
	ldr r2, [r1]
	ldrb r4, [r4]
	lsls r1, r4, #2
	adds r1, r1, r2
	ldr r1, [r1]
	str r1, [r3]
	adds r0, #0x43
	ldrb r4, [r0]
	lsls r2, r4, #4
	adds r1, r1, r2
	str r1, [r3]
	ldr r4, _08030D34 @ =0x030013A0
	movs r1, #1
	strb r1, [r4]
	ldr r2, _08030D38 @ =0x030013A4
	movs r1, #0
	str r1, [r2]
	bl sub_8030E08
	movs r0, #0
	ldrsb r0, [r4, r0]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08030D28: .4byte 0x030013A8
_08030D2C: .4byte 0x085C97F8
_08030D30: .4byte gActiveUnit
_08030D34: .4byte 0x030013A0
_08030D38: .4byte 0x030013A4

	thumb_func_start sub_8030D3C
sub_8030D3C: @ 0x08030D3C
	push {r4, lr}
	ldr r1, _08030D64 @ =0x030013A8
	ldr r0, _08030D68 @ =0x085C8654
	str r0, [r1]
	ldr r4, _08030D6C @ =0x030013A0
	movs r0, #1
	strb r0, [r4]
	ldr r1, _08030D70 @ =0x030013A4
	movs r0, #0
	str r0, [r1]
	ldr r0, _08030D74 @ =gActiveUnit
	ldr r0, [r0]
	adds r0, #0x43
	bl sub_8030E08
	movs r0, #0
	ldrsb r0, [r4, r0]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08030D64: .4byte 0x030013A8
_08030D68: .4byte 0x085C8654
_08030D6C: .4byte 0x030013A0
_08030D70: .4byte 0x030013A4
_08030D74: .4byte gActiveUnit

	thumb_func_start sub_8030D78
sub_8030D78: @ 0x08030D78
	push {r4, lr}
	ldr r3, _08030DB8 @ =0x030013A8
	ldr r2, _08030DBC @ =0x085C97EC
	ldr r0, _08030DC0 @ =gActiveUnit
	ldr r0, [r0]
	adds r1, r0, #0
	adds r1, #0x44
	ldr r2, [r2]
	ldrb r1, [r1]
	lsls r1, r1, #2
	adds r1, r1, r2
	ldr r1, [r1]
	str r1, [r3]
	adds r0, #0x45
	ldrb r4, [r0]
	lsls r2, r4, #4
	adds r1, r1, r2
	str r1, [r3]
	ldr r4, _08030DC4 @ =0x030013A0
	movs r1, #1
	strb r1, [r4]
	ldr r2, _08030DC8 @ =0x030013A4
	movs r1, #1
	str r1, [r2]
	bl sub_8030E08
	movs r0, #0
	ldrsb r0, [r4, r0]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08030DB8: .4byte 0x030013A8
_08030DBC: .4byte 0x085C97EC
_08030DC0: .4byte gActiveUnit
_08030DC4: .4byte 0x030013A0
_08030DC8: .4byte 0x030013A4

	thumb_func_start sub_8030DCC
sub_8030DCC: @ 0x08030DCC
	push {r4, lr}
	ldr r1, _08030DF4 @ =0x030013A8
	ldr r0, _08030DF8 @ =0x085C8664
	str r0, [r1]
	ldr r4, _08030DFC @ =0x030013A0
	movs r0, #1
	strb r0, [r4]
	ldr r1, _08030E00 @ =0x030013A4
	movs r0, #1
	str r0, [r1]
	ldr r0, _08030E04 @ =gActiveUnit
	ldr r0, [r0]
	adds r0, #0x45
	bl sub_8030E08
	movs r0, #0
	ldrsb r0, [r4, r0]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08030DF4: .4byte 0x030013A8
_08030DF8: .4byte 0x085C8664
_08030DFC: .4byte 0x030013A0
_08030E00: .4byte 0x030013A4
_08030E04: .4byte gActiveUnit

	thumb_func_start sub_8030E08
sub_8030E08: @ 0x08030E08
	push {r4, lr}
	sub sp, #0x70
	adds r4, r0, #0
	ldr r1, _08030E30 @ =0x0810D688
	mov r0, sp
	movs r2, #0x70
	bl memcpy
	ldr r1, _08030E34 @ =0x030013A8
	ldr r0, [r1]
	ldrb r0, [r0]
	cmp r0, #0x1b
	bls _08030E44
	ldr r0, _08030E38 @ =0x030013A4
	ldr r0, [r0]
	cmp r0, #0
	bne _08030E40
	ldr r0, _08030E3C @ =0x085C8654
	b _08030E42
	.align 2, 0
_08030E30: .4byte 0x0810D688
_08030E34: .4byte 0x030013A8
_08030E38: .4byte 0x030013A4
_08030E3C: .4byte 0x085C8654
_08030E40:
	ldr r0, _08030E68 @ =0x085C8664
_08030E42:
	str r0, [r1]
_08030E44:
	ldr r1, _08030E6C @ =0x020395F8
	ldr r0, _08030E70 @ =0x030013A8
	ldr r2, [r0]
	ldrb r0, [r2, #2]
	adds r1, #0x7e
	strb r0, [r1]
	ldrb r2, [r2]
	lsls r0, r2, #2
	add r0, sp
	ldr r1, [r0]
	adds r0, r4, #0
	bl _call_via_r1
	add sp, #0x70
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08030E68: .4byte 0x085C8664
_08030E6C: .4byte 0x020395F8
_08030E70: .4byte 0x030013A8

	thumb_func_start sub_8030E74
sub_8030E74: @ 0x08030E74
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, _08030EA4 @ =0x030013A8
	ldr r2, [r0]
	ldrb r5, [r2, #3]
	movs r4, #0
	ldr r0, [r2, #8]
	ldrb r1, [r2, #1]
	ldr r2, [r2, #4]
	bl sub_802F2E8
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08030F00
	ldr r0, _08030EA8 @ =0x030013A4
	ldr r0, [r0]
	cmp r0, #0
	bne _08030EB4
	ldr r1, _08030EAC @ =0x085C97F8
	ldr r0, _08030EB0 @ =gActiveUnit
	ldr r0, [r0]
	adds r0, #0x42
	b _08030EBC
	.align 2, 0
_08030EA4: .4byte 0x030013A8
_08030EA8: .4byte 0x030013A4
_08030EAC: .4byte 0x085C97F8
_08030EB0: .4byte gActiveUnit
_08030EB4:
	ldr r1, _08030ED4 @ =0x085C97EC
	ldr r0, _08030ED8 @ =gActiveUnit
	ldr r0, [r0]
	adds r0, #0x44
_08030EBC:
	ldr r1, [r1]
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	cmp r5, #0
	beq _08030EFC
	lsls r0, r4, #4
	adds r0, r0, r1
	ldr r2, _08030EDC @ =0x030013A0
	b _08030EEA
	.align 2, 0
_08030ED4: .4byte 0x085C97EC
_08030ED8: .4byte gActiveUnit
_08030EDC: .4byte 0x030013A0
_08030EE0:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	lsls r0, r4, #4
	adds r0, r0, r1
_08030EEA:
	ldrb r3, [r0]
	cmp r3, #0x1b
	bne _08030EE0
	ldrb r0, [r0, #3]
	cmp r0, r5
	bne _08030EE0
	adds r0, r4, #1
	strb r0, [r6]
	b _08030F08
_08030EFC:
	strb r5, [r6]
	b _08030F06
_08030F00:
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
_08030F06:
	ldr r2, _08030F14 @ =0x030013A0
_08030F08:
	movs r0, #0
	strb r0, [r2]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08030F14: .4byte 0x030013A0

	thumb_func_start sub_8030F18
sub_8030F18: @ 0x08030F18
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, _08030F3C @ =0x030013AC
	ldr r0, _08030F40 @ =0x030013A8
	ldr r0, [r0]
	ldr r1, [r0, #8]
	str r1, [r2]
	ldr r0, [r0, #0xc]
	bl _call_via_r1
	ldr r1, _08030F44 @ =0x030013A0
	strb r0, [r1]
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08030F3C: .4byte 0x030013AC
_08030F40: .4byte 0x030013A8
_08030F44: .4byte 0x030013A0

	thumb_func_start sub_8030F48
sub_8030F48: @ 0x08030F48
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r0, _08030FA8 @ =0x030013A8
	ldr r0, [r0]
	ldrb r3, [r0, #1]
	adds r6, r3, #0
	ldrb r4, [r0, #2]
	adds r7, r4, #0
	cmp r3, #0xff
	beq _08030F6C
	ldr r1, _08030FAC @ =gActiveUnit
	ldr r0, [r1]
	adds r0, #0x42
	movs r2, #0
	strb r3, [r0]
	ldr r0, [r1]
	adds r0, #0x43
	strb r2, [r0]
_08030F6C:
	cmp r4, #0xff
	beq _08030F80
	ldr r1, _08030FAC @ =gActiveUnit
	ldr r0, [r1]
	adds r0, #0x44
	movs r2, #0
	strb r4, [r0]
	ldr r0, [r1]
	adds r0, #0x45
	strb r2, [r0]
_08030F80:
	ldr r0, _08030FB0 @ =0x030013A4
	ldr r0, [r0]
	cmp r0, #0
	bne _08030F8C
	cmp r6, #0xff
	beq _08030F94
_08030F8C:
	cmp r0, #1
	bne _08030F9A
	cmp r7, #0xff
	bne _08030F9A
_08030F94:
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
_08030F9A:
	ldr r0, _08030FB4 @ =0x020395F8
	adds r0, #0x79
	movs r1, #0
	strb r1, [r0]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08030FA8: .4byte 0x030013A8
_08030FAC: .4byte gActiveUnit
_08030FB0: .4byte 0x030013A4
_08030FB4: .4byte 0x020395F8

	thumb_func_start sub_8030FB8
sub_8030FB8: @ 0x08030FB8
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, _08030FD8 @ =0x030013A8
	ldr r0, [r0]
	ldrb r3, [r0, #3]
	movs r2, #0
	ldr r0, _08030FDC @ =0x030013A4
	ldr r0, [r0]
	cmp r0, #0
	bne _08030FE8
	ldr r1, _08030FE0 @ =0x085C97F8
	ldr r0, _08030FE4 @ =gActiveUnit
	ldr r0, [r0]
	adds r0, #0x42
	b _08030FF0
	.align 2, 0
_08030FD8: .4byte 0x030013A8
_08030FDC: .4byte 0x030013A4
_08030FE0: .4byte 0x085C97F8
_08030FE4: .4byte gActiveUnit
_08030FE8:
	ldr r1, _08031008 @ =0x085C97EC
	ldr r0, _0803100C @ =gActiveUnit
	ldr r0, [r0]
	adds r0, #0x44
_08030FF0:
	ldr r1, [r1]
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	cmp r3, #0
	beq _08031030
	lsls r0, r2, #4
	adds r0, r0, r1
	ldr r5, _08031010 @ =0x030013A0
	b _0803101E
	.align 2, 0
_08031008: .4byte 0x085C97EC
_0803100C: .4byte gActiveUnit
_08031010: .4byte 0x030013A0
_08031014:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	lsls r0, r2, #4
	adds r0, r0, r1
_0803101E:
	ldrb r6, [r0]
	cmp r6, #0x1b
	bne _08031014
	ldrb r0, [r0, #3]
	cmp r0, r3
	bne _08031014
	adds r0, r2, #1
	strb r0, [r4]
	b _08031034
_08031030:
	strb r3, [r4]
	ldr r5, _08031040 @ =0x030013A0
_08031034:
	movs r0, #0
	strb r0, [r5]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08031040: .4byte 0x030013A0

	thumb_func_start sub_8031044
sub_8031044: @ 0x08031044
	push {lr}
	adds r1, r0, #0
	ldr r0, _08031068 @ =gActiveUnit
	ldr r0, [r0]
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldrb r1, [r1, #0xb]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0803106C
	movs r0, #1
	b _0803106E
	.align 2, 0
_08031068: .4byte gActiveUnit
_0803106C:
	movs r0, #0
_0803106E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8031074
sub_8031074: @ 0x08031074
	ldr r1, _08031080 @ =gActiveUnit
	ldr r1, [r1]
	cmp r0, r1
	beq _08031084
	movs r0, #1
	b _08031086
	.align 2, 0
_08031080: .4byte gActiveUnit
_08031084:
	movs r0, #0
_08031086:
	bx lr

	thumb_func_start sub_8031088
sub_8031088: @ 0x08031088
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080310C0 @ =0x030013A8
	ldr r0, [r0]
	ldr r0, [r0, #8]
	ldr r1, [r4]
	ldrb r1, [r1, #4]
	bl sub_802F77C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _080310C8
	ldr r0, _080310C4 @ =gActiveUnit
	ldr r0, [r0]
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #0xb
	ldrsb r1, [r4, r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080310C8
	movs r0, #1
	b _080310CA
	.align 2, 0
_080310C0: .4byte 0x030013A8
_080310C4: .4byte gActiveUnit
_080310C8:
	movs r0, #0
_080310CA:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_80310D0
sub_80310D0: @ 0x080310D0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08031108 @ =0x030013A8
	ldr r0, [r0]
	ldr r0, [r0, #8]
	ldr r1, [r4]
	ldrb r1, [r1, #4]
	bl sub_802F77C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _08031102
	ldr r0, _0803110C @ =gActiveUnit
	ldr r0, [r0]
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #0xb
	ldrsb r1, [r4, r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08031110
_08031102:
	movs r0, #1
	b _08031112
	.align 2, 0
_08031108: .4byte 0x030013A8
_0803110C: .4byte gActiveUnit
_08031110:
	movs r0, #0
_08031112:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_8031118
sub_8031118: @ 0x08031118
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2]
	ldr r1, _08031148 @ =0x030013A8
	ldr r1, [r1]
	ldrb r0, [r0, #4]
	ldrb r1, [r1, #4]
	cmp r0, r1
	bne _08031150
	ldr r0, _0803114C @ =gActiveUnit
	ldr r0, [r0]
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #0xb
	ldrsb r1, [r2, r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08031150
	movs r0, #1
	b _08031152
	.align 2, 0
_08031148: .4byte 0x030013A8
_0803114C: .4byte gActiveUnit
_08031150:
	movs r0, #0
_08031152:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8031158
sub_8031158: @ 0x08031158
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #4]
	ldr r1, _08031188 @ =0x030013A8
	ldr r1, [r1]
	ldrb r0, [r0, #4]
	ldrb r1, [r1, #4]
	cmp r0, r1
	bne _08031190
	ldr r0, _0803118C @ =gActiveUnit
	ldr r0, [r0]
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #0xb
	ldrsb r1, [r2, r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08031190
	movs r0, #1
	b _08031192
	.align 2, 0
_08031188: .4byte 0x030013A8
_0803118C: .4byte gActiveUnit
_08031190:
	movs r0, #0
_08031192:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8031198
sub_8031198: @ 0x08031198
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r0, #0x64
	bl RandNext
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r5, _080311E8 @ =0x030013A8
	ldr r1, [r5]
	ldrb r1, [r1, #1]
	cmp r0, r1
	bhi _08031218
	ldr r0, _080311EC @ =sub_8031044
	bl sub_8033C04
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #0
	bne _08031220
	ldr r0, [r5]
	ldrh r0, [r0, #4]
	bl sub_80307D4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08031200
	ldr r0, [r5]
	ldr r0, [r0, #4]
	bl GetUnitByPid
	movs r1, #0x20
	ldrh r0, [r0, #0xc]
	ands r1, r0
	cmp r1, #0
	beq _080311F4
	ldr r0, _080311F0 @ =0x020395F8
	adds r0, #0x86
	movs r1, #3
	b _08031206
	.align 2, 0
_080311E8: .4byte 0x030013A8
_080311EC: .4byte sub_8031044
_080311F0: .4byte 0x020395F8
_080311F4:
	ldr r0, _080311FC @ =sub_8031118
	bl sub_8031900
	b _08031220
	.align 2, 0
_080311FC: .4byte sub_8031118
_08031200:
	ldr r0, _08031210 @ =0x020395F8
	adds r0, #0x86
	movs r1, #1
_08031206:
	strb r1, [r0]
	ldr r0, _08031214 @ =0x030013A0
	strb r4, [r0]
	b _08031220
	.align 2, 0
_08031210: .4byte 0x020395F8
_08031214: .4byte 0x030013A0
_08031218:
	ldr r0, _0803122C @ =0x020395F8
	adds r0, #0x79
	movs r1, #4
	strb r1, [r0]
_08031220:
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803122C: .4byte 0x020395F8

	thumb_func_start sub_8031230
sub_8031230: @ 0x08031230
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #0x64
	bl RandNext
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, _08031264 @ =0x030013A8
	ldr r1, [r1]
	ldrb r2, [r1, #1]
	cmp r0, r2
	bhi _08031288
	ldr r0, [r1, #8]
	cmp r0, #0
	bne _0803126C
	ldr r4, _08031268 @ =sub_8031044
	adds r0, r4, #0
	bl sub_8033C04
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08031290
	adds r0, r4, #0
	bl sub_8031900
	b _08031290
	.align 2, 0
_08031264: .4byte 0x030013A8
_08031268: .4byte sub_8031044
_0803126C:
	ldr r0, _08031280 @ =sub_80310D0
	bl sub_8033C04
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08031290
	ldr r0, _08031284 @ =sub_8031088
	bl sub_8031900
	b _08031290
	.align 2, 0
_08031280: .4byte sub_80310D0
_08031284: .4byte sub_8031088
_08031288:
	ldr r0, _0803129C @ =0x020395F8
	adds r0, #0x79
	movs r1, #4
	strb r1, [r0]
_08031290:
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803129C: .4byte 0x020395F8

	thumb_func_start sub_80312A0
sub_80312A0: @ 0x080312A0
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	bx lr

	thumb_func_start sub_80312A8
sub_80312A8: @ 0x080312A8
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #0x64
	bl RandNext
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, _080312E4 @ =0x030013A8
	ldr r1, [r1]
	ldrb r1, [r1, #1]
	cmp r0, r1
	bhi _080312F0
	ldr r0, _080312E8 @ =0x020395F8
	adds r0, #0x7b
	movs r1, #2
	ldrb r2, [r0]
	orrs r1, r2
	strb r1, [r0]
	ldr r4, _080312EC @ =sub_8031044
	adds r0, r4, #0
	bl sub_8033C04
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080312F8
	adds r0, r4, #0
	bl sub_8031900
	b _080312F8
	.align 2, 0
_080312E4: .4byte 0x030013A8
_080312E8: .4byte 0x020395F8
_080312EC: .4byte sub_8031044
_080312F0:
	ldr r0, _08031304 @ =0x020395F8
	adds r0, #0x79
	movs r1, #4
	strb r1, [r0]
_080312F8:
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08031304: .4byte 0x020395F8

	thumb_func_start sub_8031308
sub_8031308: @ 0x08031308
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #0x64
	bl RandNext
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, _08031338 @ =0x030013A8
	ldr r1, [r1]
	ldrb r1, [r1, #1]
	cmp r0, r1
	bhi _08031340
	ldr r4, _0803133C @ =sub_8031158
	adds r0, r4, #0
	bl sub_8033C04
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08031348
	adds r0, r4, #0
	bl sub_8031900
	b _08031348
	.align 2, 0
_08031338: .4byte 0x030013A8
_0803133C: .4byte sub_8031158
_08031340:
	ldr r0, _08031354 @ =0x020395F8
	adds r0, #0x79
	movs r1, #4
	strb r1, [r0]
_08031348:
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08031354: .4byte 0x020395F8

	thumb_func_start sub_8031358
sub_8031358: @ 0x08031358
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08031370 @ =sub_8031044
	bl sub_8033C04
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08031370: .4byte sub_8031044

	thumb_func_start sub_8031374
sub_8031374: @ 0x08031374
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0803138C @ =sub_8031044
	bl sub_8033C04
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803138C: .4byte sub_8031044

	thumb_func_start sub_8031390
sub_8031390: @ 0x08031390
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080313A8 @ =sub_8031044
	bl sub_8033C04
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080313A8: .4byte sub_8031044

	thumb_func_start sub_80313AC
sub_80313AC: @ 0x080313AC
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r4, _080313F0 @ =0x030013A8
	ldr r2, [r4]
	ldrb r0, [r2, #1]
	ldrb r1, [r2, #3]
	ldrb r3, [r2, #2]
	movs r2, #1
	str r2, [sp]
	movs r2, #0
	bl sub_803046C
	ldr r0, _080313F4 @ =gAiDecision
	ldrb r1, [r0, #0xa]
	cmp r1, #1
	bne _080313E6
	ldr r2, [r4]
	ldrb r3, [r0, #2]
	ldrb r1, [r2, #1]
	cmp r3, r1
	bne _080313E6
	ldrb r0, [r0, #3]
	ldrb r2, [r2, #3]
	cmp r0, r2
	bne _080313E6
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
_080313E6:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080313F0: .4byte 0x030013A8
_080313F4: .4byte gAiDecision

	thumb_func_start sub_80313F8
sub_80313F8: @ 0x080313F8
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	ldr r6, _0803146C @ =0x030013A8
	ldr r0, [r6]
	ldr r0, [r0, #4]
	add r5, sp, #4
	adds r1, r5, #0
	bl sub_802F34C
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #1
	bne _080314A0
	add r0, sp, #4
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	ldr r2, [r6]
	ldrb r3, [r2, #2]
	str r4, [sp]
	movs r2, #0
	bl sub_803046C
	add r0, sp, #4
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	ldr r5, _08031470 @ =gAiDecision
	ldrb r2, [r5, #2]
	ldrb r3, [r5, #3]
	str r4, [sp]
	bl sub_803081C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _080314A6
	ldr r0, [r6]
	ldr r0, [r0, #4]
	bl GetUnitByPid
	adds r1, r0, #0
	movs r0, #0x20
	ldrh r2, [r1, #0xc]
	ands r0, r2
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	beq _08031478
	ldr r0, _08031474 @ =0x020395F8
	adds r0, #0x86
	movs r1, #3
	strb r1, [r0]
	b _080314A6
	.align 2, 0
_0803146C: .4byte 0x030013A8
_08031470: .4byte gAiDecision
_08031474: .4byte 0x020395F8
_08031478:
	ldrb r0, [r1, #0xb]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl AiUpdateDecision
	ldr r0, _08031498 @ =0x020395F8
	adds r0, #0x86
	movs r1, #2
	strb r1, [r0]
	strb r4, [r5, #0xa]
	ldr r0, _0803149C @ =0x030013A0
	strb r4, [r0]
	b _080314A6
	.align 2, 0
_08031498: .4byte 0x020395F8
_0803149C: .4byte 0x030013A0
_080314A0:
	ldr r1, _080314B4 @ =0x030013A0
	movs r0, #0
	strb r0, [r1]
_080314A6:
	ldrb r0, [r7]
	adds r0, #1
	strb r0, [r7]
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080314B4: .4byte 0x030013A0

	thumb_func_start sub_80314B8
sub_80314B8: @ 0x080314B8
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	bx lr

	thumb_func_start sub_80314C0
sub_80314C0: @ 0x080314C0
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r6, r0, #0
	ldr r7, _08031500 @ =0x030013A8
	ldr r0, [r7]
	ldr r0, [r0, #4]
	add r5, sp, #4
	adds r1, r5, #0
	bl sub_802F430
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #1
	bne _080314F2
	add r0, sp, #4
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	ldr r2, [r7]
	ldrb r3, [r2, #2]
	str r4, [sp]
	movs r2, #0
	bl sub_803046C
_080314F2:
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08031500: .4byte 0x030013A8

	thumb_func_start sub_8031504
sub_8031504: @ 0x08031504
	push {r4, r5, lr}
	sub sp, #0x14
	adds r5, r0, #0
	bl sub_8034AC8
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08031554
	ldr r3, _08031548 @ =0x030013A8
	ldr r0, [r3]
	ldrb r0, [r0, #3]
	cmp r0, #0
	beq _080315F0
	ldr r2, _0803154C @ =gActiveUnit
	ldr r0, [r2]
	adds r0, #0x46
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	ldr r0, [r2]
	adds r0, #0x46
	ldr r1, [r3]
	ldrb r0, [r0]
	ldrb r1, [r1, #3]
	cmp r0, r1
	bne _080315F0
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	ldr r1, _08031550 @ =0x030013A0
	movs r0, #0
	b _080315EE
	.align 2, 0
_08031548: .4byte 0x030013A8
_0803154C: .4byte gActiveUnit
_08031550: .4byte 0x030013A0
_08031554:
	add r4, sp, #0x10
	adds r0, r4, #0
	add r1, sp, #0xc
	bl sub_8030364
	lsls r0, r0, #0x18
	asrs r2, r0, #0x18
	cmp r2, #1
	bne _080315E4
	movs r1, #0
	ldrsh r0, [r4, r1]
	movs r3, #2
	ldrsh r1, [r4, r3]
	str r2, [sp]
	movs r2, #0
	movs r3, #0xff
	bl sub_803046C
	ldr r4, _080315D4 @ =gAiDecision
	ldrb r0, [r4, #2]
	ldrb r1, [r4, #3]
	bl sub_8030860
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _080315F0
	ldrb r0, [r4, #2]
	ldrb r1, [r4, #3]
	add r2, sp, #0xc
	ldrb r2, [r2]
	str r2, [sp]
	movs r4, #0
	str r4, [sp, #4]
	str r4, [sp, #8]
	movs r2, #4
	movs r3, #0
	bl AiSetDecision
	ldr r3, _080315D8 @ =0x030013A8
	ldr r0, [r3]
	ldrb r0, [r0, #3]
	cmp r0, #0
	beq _080315F0
	ldr r2, _080315DC @ =gActiveUnit
	ldr r0, [r2]
	adds r0, #0x46
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	ldr r0, [r2]
	adds r0, #0x46
	ldr r1, [r3]
	ldrb r0, [r0]
	ldrb r1, [r1, #3]
	cmp r0, r1
	bne _080315F0
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	ldr r0, _080315E0 @ =0x030013A0
	strb r4, [r0]
	b _080315F0
	.align 2, 0
_080315D4: .4byte gAiDecision
_080315D8: .4byte 0x030013A8
_080315DC: .4byte gActiveUnit
_080315E0: .4byte 0x030013A0
_080315E4:
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	ldr r1, _080315F8 @ =0x030013A0
	movs r0, #0
_080315EE:
	strb r0, [r1]
_080315F0:
	add sp, #0x14
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080315F8: .4byte 0x030013A0

	thumb_func_start sub_80315FC
sub_80315FC: @ 0x080315FC
	push {r4, r5, lr}
	sub sp, #0x10
	adds r5, r0, #0
	ldr r0, _0803163C @ =gActiveUnit
	ldr r0, [r0]
	add r4, sp, #0xc
	adds r1, r4, #0
	bl sub_8030270
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0803162E
	add r0, sp, #0xc
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #2
	ldrsh r1, [r4, r2]
	movs r2, #0
	str r2, [sp]
	str r2, [sp, #4]
	str r2, [sp, #8]
	movs r3, #0
	bl AiSetDecision
_0803162E:
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	add sp, #0x10
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803163C: .4byte gActiveUnit

	thumb_func_start sub_8031640
sub_8031640: @ 0x08031640
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	ldr r6, _0803167C @ =0x030013A8
	ldr r0, [r6]
	ldr r0, [r0, #8]
	cmp r0, #0
	bne _08031684
	ldr r0, _08031680 @ =sub_8031044
	add r5, sp, #4
	adds r1, r5, #0
	bl sub_802F4C8
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #1
	bne _080316AC
	add r0, sp, #4
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	ldr r2, [r6]
	ldrb r3, [r2, #2]
	str r4, [sp]
	movs r2, #0
	bl sub_803046C
	b _080316AC
	.align 2, 0
_0803167C: .4byte 0x030013A8
_08031680: .4byte sub_8031044
_08031684:
	ldr r0, _080316BC @ =sub_8031088
	add r5, sp, #4
	adds r1, r5, #0
	bl sub_802F4C8
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #1
	bne _080316AC
	add r0, sp, #4
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	ldr r2, [r6]
	ldrb r3, [r2, #2]
	str r4, [sp]
	movs r2, #0
	bl sub_803046C
_080316AC:
	ldrb r0, [r7]
	adds r0, #1
	strb r0, [r7]
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080316BC: .4byte sub_8031088

	thumb_func_start sub_80316C0
sub_80316C0: @ 0x080316C0
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	ldr r6, _080316FC @ =0x030013A8
	ldr r0, [r6]
	ldr r0, [r0, #8]
	cmp r0, #0
	bne _08031704
	ldr r0, _08031700 @ =sub_8031044
	add r5, sp, #4
	adds r1, r5, #0
	bl sub_802F4C8
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #1
	bne _0803172C
	add r0, sp, #4
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	ldr r2, [r6]
	ldrb r3, [r2, #2]
	str r4, [sp]
	movs r2, #0
	bl sub_803046C
	b _0803172C
	.align 2, 0
_080316FC: .4byte 0x030013A8
_08031700: .4byte sub_8031044
_08031704:
	ldr r0, _0803173C @ =sub_8031088
	add r5, sp, #4
	adds r1, r5, #0
	bl sub_802F4C8
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #1
	bne _0803172C
	add r0, sp, #4
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	ldr r2, [r6]
	ldrb r3, [r2, #2]
	str r4, [sp]
	movs r2, #0
	bl sub_803046C
_0803172C:
	ldrb r0, [r7]
	adds r0, #1
	strb r0, [r7]
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803173C: .4byte sub_8031088

	thumb_func_start sub_8031740
sub_8031740: @ 0x08031740
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	bx lr

	thumb_func_start sub_8031748
sub_8031748: @ 0x08031748
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	bx lr

	thumb_func_start sub_8031750
sub_8031750: @ 0x08031750
	push {r4, lr}
	adds r4, r0, #0
	bl sub_802F5E0
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8031764
sub_8031764: @ 0x08031764
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08031784 @ =gActiveUnit
	ldr r1, [r0]
	movs r0, #8
	ldrb r2, [r1, #0xa]
	orrs r0, r2
	strb r0, [r1, #0xa]
	bl sub_8032B84
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08031784: .4byte gActiveUnit

	thumb_func_start sub_8031788
sub_8031788: @ 0x08031788
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	bx lr

	thumb_func_start sub_8031790
sub_8031790: @ 0x08031790
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	ldr r0, _080317DC @ =gActiveUnit
	ldr r2, [r0]
	movs r0, #0xe
	ldrsb r0, [r2, r0]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r2, [r2, #4]
	ldr r2, [r2, #0x34]
	bl MapFlood_080193F4
	ldr r6, _080317E0 @ =0x030013A8
	ldr r0, [r6]
	adds r0, #3
	add r5, sp, #4
	movs r1, #0
	adds r2, r5, #0
	bl sub_802F7B4
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #1
	bne _080317E4
	add r0, sp, #4
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	ldr r2, [r6]
	ldrb r3, [r2, #2]
	str r4, [sp]
	movs r2, #0
	bl sub_803046C
	b _080317F2
	.align 2, 0
_080317DC: .4byte gActiveUnit
_080317E0: .4byte 0x030013A8
_080317E4:
	ldr r0, _08031800 @ =0x020395F8
	adds r0, #0x86
	movs r2, #0
	movs r1, #4
	strb r1, [r0]
	ldr r0, _08031804 @ =0x030013A0
	strb r2, [r0]
_080317F2:
	ldrb r0, [r7]
	adds r0, #1
	strb r0, [r7]
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08031800: .4byte 0x020395F8
_08031804: .4byte 0x030013A0

	thumb_func_start sub_8031808
sub_8031808: @ 0x08031808
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	ldr r0, _08031854 @ =gActiveUnit
	ldr r2, [r0]
	movs r0, #0xe
	ldrsb r0, [r2, r0]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r2, [r2, #4]
	ldr r2, [r2, #0x34]
	bl MapFlood_080193F4
	ldr r6, _08031858 @ =0x030013A8
	ldr r0, [r6]
	ldr r0, [r0, #8]
	add r5, sp, #4
	movs r1, #0
	adds r2, r5, #0
	bl sub_802F7B4
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #1
	bne _0803185C
	add r0, sp, #4
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	ldr r2, [r6]
	ldrb r3, [r2, #2]
	str r4, [sp]
	movs r2, #0
	bl sub_803046C
	b _0803186A
	.align 2, 0
_08031854: .4byte gActiveUnit
_08031858: .4byte 0x030013A8
_0803185C:
	ldr r0, _08031878 @ =0x020395F8
	adds r0, #0x86
	movs r2, #0
	movs r1, #4
	strb r1, [r0]
	ldr r0, _0803187C @ =0x030013A0
	strb r2, [r0]
_0803186A:
	ldrb r0, [r7]
	adds r0, #1
	strb r0, [r7]
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08031878: .4byte 0x020395F8
_0803187C: .4byte 0x030013A0

	thumb_func_start AiScriptCmd_1B_NoOp
AiScriptCmd_1B_NoOp: @ 0x08031880
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	ldr r1, _08031890 @ =0x030013A0
	movs r0, #0
	strb r0, [r1]
	bx lr
	.align 2, 0
_08031890: .4byte 0x030013A0

	thumb_func_start sub_8031894
sub_8031894: @ 0x08031894
	push {lr}
	ldr r0, _080318AC @ =sub_8031044
	bl sub_8033C04
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080318A8
	ldr r0, _080318B0 @ =sub_8031074
	bl sub_8031900
_080318A8:
	pop {r0}
	bx r0
	.align 2, 0
_080318AC: .4byte sub_8031044
_080318B0: .4byte sub_8031074

	thumb_func_start sub_80318B4
sub_80318B4: @ 0x080318B4
	push {r4, lr}
	sub sp, #8
	ldr r0, _080318E8 @ =sub_8031074
	add r4, sp, #4
	adds r1, r4, #0
	bl sub_802F4C8
	lsls r0, r0, #0x18
	asrs r2, r0, #0x18
	cmp r2, #1
	bne _080318DE
	add r0, sp, #4
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r3, #2
	ldrsh r1, [r4, r3]
	str r2, [sp]
	movs r2, #0
	movs r3, #0xff
	bl sub_803046C
_080318DE:
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080318E8: .4byte sub_8031074

	thumb_func_start sub_80318EC
sub_80318EC: @ 0x080318EC
	movs r0, #1
	bx lr

	thumb_func_start sub_80318F0
sub_80318F0: @ 0x080318F0
	push {lr}
	ldrb r0, [r0]
	bl sub_803079C
	movs r0, #1
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8031900
sub_8031900: @ 0x08031900
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x28
	str r0, [sp, #0x24]
	ldr r4, _08031948 @ =gActiveUnit
	ldr r2, [r4]
	ldr r0, [r2]
	ldr r1, [r2, #4]
	ldr r0, [r0, #0x28]
	ldr r1, [r1, #0x24]
	orrs r0, r1
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	beq _0803194C
	adds r0, r2, #0
	bl GetUnitItemCount
	cmp r0, #4
	bgt _0803194C
	ldr r0, [r4]
	bl MapFlood_08019344
	bl MapMovementMarkFloodEdges
	bl sub_8031F24
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0803194C
	movs r0, #0
	b _08031ABE
	.align 2, 0
_08031948: .4byte gActiveUnit
_0803194C:
	add r0, sp, #0x18
	movs r5, #0
	strb r5, [r0, #2]
	str r5, [r0, #8]
	ldr r1, _0803198C @ =0x020395F8
	adds r1, #0x7b
	movs r2, #2
	ldrb r1, [r1]
	ands r2, r1
	mov r8, r0
	cmp r2, #0
	beq _08031998
	ldr r4, _08031990 @ =gMapMovement
	ldr r0, [r4]
	movs r1, #1
	rsbs r1, r1, #0
	bl MapFill
	ldr r0, _08031994 @ =gActiveUnit
	ldr r2, [r0]
	movs r0, #0xf
	ldrsb r0, [r2, r0]
	ldr r1, [r4]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r0, [r0]
	adds r0, r0, r1
	strb r5, [r0]
	b _080319A0
	.align 2, 0
_0803198C: .4byte 0x020395F8
_08031990: .4byte gMapMovement
_08031994: .4byte gActiveUnit
_08031998:
	ldr r0, _08031AD0 @ =gActiveUnit
	ldr r0, [r0]
	bl MapFlood_08019344
_080319A0:
	ldr r0, _08031AD4 @ =gMapRange
	ldr r0, [r0]
	bl SetWorkingMap
	movs r0, #0
	mov sb, r0
	ldr r1, _08031AD0 @ =gActiveUnit
	ldr r0, [r1]
	ldrh r5, [r0, #0x1c]
	cmp r5, #0
	beq _08031A5E
	mov sl, r1
_080319B8:
	mov r1, sl
	ldr r0, [r1]
	adds r1, r5, #0
	bl CanUnitUseWeapon
	lsls r0, r0, #0x18
	mov r7, sb
	adds r7, #1
	cmp r0, #0
	beq _08031A48
	add r0, sp, #0xc
	mov r2, sb
	strh r2, [r0, #4]
	movs r6, #1
_080319D4:
	adds r0, r6, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _08031A42
	ldr r0, [r4]
	cmp r0, #0
	beq _08031A42
	movs r0, #0x25
	ldrh r3, [r4, #0xc]
	ands r0, r3
	cmp r0, #0
	bne _08031A42
	adds r0, r4, #0
	ldr r1, [sp, #0x24]
	bl _call_via_r1
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08031A42
	mov r2, sl
	ldr r0, [r2]
	adds r1, r4, #0
	adds r2, r5, #0
	bl sub_802F6C0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08031A42
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_8031C28
	add r1, sp, #0xc
	ldrb r0, [r4, #0xb]
	strb r0, [r1, #2]
	adds r0, r1, #0
	bl sub_803206C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08031A42
	ldr r1, [sp, #0x14]
	mov r3, r8
	ldr r0, [r3, #8]
	cmp r1, r0
	blo _08031A42
	mov r1, r8
	add r0, sp, #0xc
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	mov r0, sb
	mov r4, r8
	strh r0, [r4, #4]
_08031A42:
	adds r6, #1
	cmp r6, #0xbf
	ble _080319D4
_08031A48:
	mov sb, r7
	cmp r7, #4
	bgt _08031A5E
	mov r1, sl
	ldr r0, [r1]
	lsls r1, r7, #1
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r5, [r0]
	cmp r5, #0
	bne _080319B8
_08031A5E:
	ldr r0, _08031AD0 @ =gActiveUnit
	ldr r0, [r0]
	ldr r1, [r0]
	ldr r2, [r0, #4]
	ldr r0, [r1, #0x28]
	ldr r1, [r2, #0x24]
	orrs r0, r1
	movs r1, #0x80
	ands r0, r1
	cmp r0, #0
	beq _08031A96
	ldr r0, [sp, #0x24]
	add r1, sp, #0xc
	bl sub_8031D40
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08031A96
	ldr r1, [sp, #0x14]
	mov r2, r8
	ldr r0, [r2, #8]
	cmp r1, r0
	blo _08031A96
	mov r1, r8
	add r0, sp, #0xc
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
_08031A96:
	mov r1, r8
	ldr r0, [r1, #8]
	cmp r0, #0
	bne _08031AA4
	ldrb r0, [r1, #2]
	cmp r0, #0
	beq _08031ABE
_08031AA4:
	mov r3, r8
	ldrb r0, [r3]
	ldrb r1, [r3, #1]
	ldrb r3, [r3, #2]
	mov r4, r8
	ldrb r2, [r4, #4]
	str r2, [sp]
	movs r2, #0
	str r2, [sp, #4]
	str r2, [sp, #8]
	movs r2, #1
	bl AiSetDecision
_08031ABE:
	add sp, #0x28
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08031AD0: .4byte gActiveUnit
_08031AD4: .4byte gMapRange

	thumb_func_start AiTryDoOffensiveAction
AiTryDoOffensiveAction: @ 0x08031AD8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x28
	str r0, [sp, #0x24]
	add r4, sp, #0x18
	movs r0, #0
	strb r0, [r4, #2]
	str r0, [r4, #8]
	ldr r0, _08031C20 @ =gMapRange
	ldr r0, [r0]
	bl SetWorkingMap
	movs r0, #0
	mov sb, r0
	ldr r1, _08031C24 @ =gActiveUnit
	ldr r0, [r1]
	ldrh r5, [r0, #0x1c]
	mov r8, r4
	cmp r5, #0
	beq _08031BAE
	mov sl, r1
_08031B08:
	mov r1, sl
	ldr r0, [r1]
	adds r1, r5, #0
	bl CanUnitUseWeapon
	lsls r0, r0, #0x18
	mov r7, sb
	adds r7, #1
	cmp r0, #0
	beq _08031B98
	add r0, sp, #0xc
	mov r2, sb
	strh r2, [r0, #4]
	movs r6, #1
_08031B24:
	adds r0, r6, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _08031B92
	ldr r0, [r4]
	cmp r0, #0
	beq _08031B92
	movs r0, #0x25
	ldrh r3, [r4, #0xc]
	ands r0, r3
	cmp r0, #0
	bne _08031B92
	adds r0, r4, #0
	ldr r1, [sp, #0x24]
	bl _call_via_r1
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08031B92
	mov r2, sl
	ldr r0, [r2]
	adds r1, r4, #0
	adds r2, r5, #0
	bl sub_802F6C0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08031B92
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_8031C28
	add r1, sp, #0xc
	ldrb r0, [r4, #0xb]
	strb r0, [r1, #2]
	adds r0, r1, #0
	bl sub_803206C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08031B92
	ldr r1, [sp, #0x14]
	mov r3, r8
	ldr r0, [r3, #8]
	cmp r1, r0
	blo _08031B92
	mov r1, r8
	add r0, sp, #0xc
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	mov r0, sb
	mov r4, r8
	strh r0, [r4, #4]
_08031B92:
	adds r6, #1
	cmp r6, #0xbf
	ble _08031B24
_08031B98:
	mov sb, r7
	cmp r7, #4
	bgt _08031BAE
	mov r1, sl
	ldr r0, [r1]
	lsls r1, r7, #1
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r5, [r0]
	cmp r5, #0
	bne _08031B08
_08031BAE:
	ldr r0, _08031C24 @ =gActiveUnit
	ldr r0, [r0]
	ldr r1, [r0]
	ldr r2, [r0, #4]
	ldr r0, [r1, #0x28]
	ldr r1, [r2, #0x24]
	orrs r0, r1
	movs r1, #0x80
	ands r0, r1
	cmp r0, #0
	beq _08031BE6
	ldr r0, [sp, #0x24]
	add r1, sp, #0xc
	bl sub_8031D40
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08031BE6
	ldr r1, [sp, #0x14]
	mov r2, r8
	ldr r0, [r2, #8]
	cmp r1, r0
	blo _08031BE6
	mov r1, r8
	add r0, sp, #0xc
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
_08031BE6:
	mov r1, r8
	ldr r0, [r1, #8]
	cmp r0, #0
	bne _08031BF4
	ldrb r0, [r1, #2]
	cmp r0, #0
	beq _08031C0E
_08031BF4:
	mov r3, r8
	ldrb r0, [r3]
	ldrb r1, [r3, #1]
	ldrb r3, [r3, #2]
	mov r4, r8
	ldrb r2, [r4, #4]
	str r2, [sp]
	movs r2, #0
	str r2, [sp, #4]
	str r2, [sp, #8]
	movs r2, #1
	bl AiSetDecision
_08031C0E:
	add sp, #0x28
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08031C20: .4byte gMapRange
_08031C24: .4byte gActiveUnit

	thumb_func_start sub_8031C28
sub_8031C28: @ 0x08031C28
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r4, r0, #0
	lsls r5, r1, #0x10
	lsrs r5, r5, #0x10
	ldr r0, _08031C78 @ =gMapRange
	ldr r0, [r0]
	movs r1, #0
	bl MapFill
	movs r6, #0xe
	ldrsb r6, [r4, r6]
	ldrb r4, [r4, #0xf]
	lsls r4, r4, #0x18
	asrs r4, r4, #0x18
	mov r8, r4
	adds r0, r5, #0
	bl GetItemMinRange
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r0, r5, #0
	bl GetItemMaxRange
	adds r3, r0, #0
	lsls r3, r3, #0x10
	asrs r3, r3, #0x10
	adds r0, r6, #0
	mov r1, r8
	adds r2, r4, #0
	bl MapIncInBoundedRange
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08031C78: .4byte gMapRange

	thumb_func_start sub_8031C7C
sub_8031C7C: @ 0x08031C7C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r5, r0, #0
	adds r4, r1, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	mov sl, r2
	ldr r0, [r5, #4]
	ldr r0, [r0, #0x34]
	bl SetWorkingMovTable
	ldr r0, _08031D34 @ =gMapMovement
	ldr r0, [r0]
	bl SetWorkingMap
	movs r0, #0xe
	ldrsb r0, [r5, r0]
	movs r1, #0xf
	ldrsb r1, [r5, r1]
	movs r3, #0xb
	ldrsb r3, [r5, r3]
	adds r2, r4, #0
	bl BeginMapFlood
	ldr r0, _08031D38 @ =gMapRange
	ldr r0, [r0]
	movs r1, #0
	bl MapFill
	ldr r0, _08031D3C @ =gMapSize
	movs r1, #2
	ldrsh r0, [r0, r1]
	subs r7, r0, #1
	cmp r7, #0
	blt _08031D26
_08031CCC:
	ldr r0, _08031D3C @ =gMapSize
	movs r2, #0
	ldrsh r0, [r0, r2]
	subs r6, r0, #1
	subs r0, r7, #1
	mov sb, r0
	cmp r6, #0
	blt _08031D20
	lsls r1, r7, #0x10
	mov r8, r1
_08031CE0:
	ldr r0, _08031D34 @ =gMapMovement
	ldr r1, [r0]
	lsls r0, r7, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r6
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _08031D1A
	lsls r5, r6, #0x10
	asrs r5, r5, #0x10
	mov r0, sl
	bl GetItemMinRange
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r0, sl
	bl GetItemMaxRange
	adds r3, r0, #0
	lsls r3, r3, #0x10
	asrs r3, r3, #0x10
	adds r0, r5, #0
	mov r2, r8
	asrs r1, r2, #0x10
	adds r2, r4, #0
	bl MapIncInBoundedRange
_08031D1A:
	subs r6, #1
	cmp r6, #0
	bge _08031CE0
_08031D20:
	mov r7, sb
	cmp r7, #0
	bge _08031CCC
_08031D26:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08031D34: .4byte gMapMovement
_08031D38: .4byte gMapRange
_08031D3C: .4byte gMapSize

	thumb_func_start sub_8031D40
sub_8031D40: @ 0x08031D40
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	str r0, [sp, #0x10]
	mov r8, r1
	movs r0, #0
	mov sb, r0
	add r4, sp, #0xc
	ldr r1, _08031DD4 @ =0x0810DB24
	adds r0, r4, #0
	movs r2, #3
	bl memcpy
	ldr r0, _08031DD8 @ =gMapSize
	movs r1, #2
	ldrsh r0, [r0, r1]
	subs r7, r0, #1
	cmp r7, #0
	blt _08031DFE
_08031D6C:
	ldr r0, _08031DD8 @ =gMapSize
	movs r2, #0
	ldrsh r0, [r0, r2]
	subs r4, r0, #1
	subs r0, r7, #1
	mov sl, r0
	cmp r4, #0
	blt _08031DF8
	ldr r2, _08031DDC @ =gMapMovement
	lsls r6, r7, #2
	movs r1, #1
	rsbs r1, r1, #0
	adds r3, r1, #0
_08031D86:
	ldr r0, [r2]
	adds r0, r6, r0
	ldr r0, [r0]
	adds r1, r0, r4
	ldrb r0, [r1]
	cmp r0, #0x78
	bhi _08031DF2
	ldr r0, _08031DE0 @ =gMapTerrain
	ldr r0, [r0]
	adds r0, r6, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	subs r0, #0x27
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #2
	bhi _08031DF0
	adds r0, r4, #0
	adds r1, r7, #0
	str r2, [sp, #0x14]
	str r3, [sp, #0x18]
	bl GetBallistaItemAt
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	ldr r2, [sp, #0x14]
	ldr r3, [sp, #0x18]
	cmp r5, #0
	beq _08031DE4
	movs r1, #1
	add sb, r1
	ldr r0, [r2]
	adds r0, r6, r0
	ldr r0, [r0]
	adds r0, r0, r4
	strb r5, [r0]
	b _08031DF2
	.align 2, 0
_08031DD4: .4byte 0x0810DB24
_08031DD8: .4byte gMapSize
_08031DDC: .4byte gMapMovement
_08031DE0: .4byte gMapTerrain
_08031DE4:
	ldr r0, [r2]
	adds r0, r6, r0
	ldr r0, [r0]
	adds r0, r0, r4
	strb r3, [r0]
	b _08031DF2
_08031DF0:
	strb r3, [r1]
_08031DF2:
	subs r4, #1
	cmp r4, #0
	bge _08031D86
_08031DF8:
	mov r7, sl
	cmp r7, #0
	bge _08031D6C
_08031DFE:
	mov r2, sb
	cmp r2, #0
	beq _08031EB8
	movs r0, #0
	mov r1, r8
	strb r0, [r1, #2]
	str r0, [r1, #8]
	movs r1, #0
	mov r6, sp
_08031E10:
	mov r0, sp
	adds r0, r0, r1
	adds r0, #0xc
	ldrb r5, [r0]
	ldr r0, _08031EB0 @ =0x0000FFFF
	mov r2, r8
	strh r0, [r2, #4]
	movs r7, #1
	adds r1, #1
	mov sb, r1
_08031E24:
	adds r0, r7, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _08031E92
	ldr r0, [r4]
	cmp r0, #0
	beq _08031E92
	movs r0, #0x25
	ldrh r1, [r4, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _08031E92
	adds r0, r4, #0
	ldr r2, [sp, #0x10]
	bl _call_via_r2
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08031E92
	ldr r0, _08031EB4 @ =gActiveUnit
	ldr r0, [r0]
	adds r1, r4, #0
	adds r2, r5, #0
	bl sub_802F6C0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08031E92
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_8031C28
	ldrb r0, [r4, #0xb]
	strb r0, [r6, #2]
	mov r0, sp
	adds r1, r5, #0
	bl sub_803212C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08031E92
	ldr r1, [sp, #8]
	mov r2, r8
	ldr r0, [r2, #8]
	cmp r1, r0
	blo _08031E92
	ldrb r0, [r6]
	strb r0, [r2]
	ldrb r0, [r6, #1]
	strb r0, [r2, #1]
	ldrb r0, [r6, #2]
	strb r0, [r2, #2]
	str r1, [r2, #8]
_08031E92:
	adds r7, #1
	cmp r7, #0xbf
	ble _08031E24
	mov r1, sb
	cmp r1, #2
	ble _08031E10
	mov r1, r8
	ldr r0, [r1, #8]
	cmp r0, #0
	bne _08031EAC
	ldrb r0, [r1, #2]
	cmp r0, #0
	beq _08031EB8
_08031EAC:
	movs r0, #1
	b _08031EBA
	.align 2, 0
_08031EB0: .4byte 0x0000FFFF
_08031EB4: .4byte gActiveUnit
_08031EB8:
	movs r0, #0
_08031EBA:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8031ECC
sub_8031ECC: @ 0x08031ECC
	push {r4, lr}
	adds r3, r0, #0
	adds r4, r1, #0
	ldr r1, _08031F04 @ =gMapMovement
	ldr r0, [r1]
	lsls r2, r4, #2
	adds r0, r2, r0
	ldr r0, [r0]
	adds r0, r0, r3
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x77
	bgt _08031F00
	ldr r0, _08031F08 @ =gMapUnit
	ldr r0, [r0]
	adds r0, r2, r0
	ldr r0, [r0]
	adds r0, r0, r3
	ldrb r2, [r0]
	cmp r2, #0
	beq _08031F10
	ldr r0, _08031F0C @ =gActiveUnitId
	ldrb r0, [r0]
	cmp r2, r0
	beq _08031F10
_08031F00:
	movs r0, #0xff
	b _08031F1C
	.align 2, 0
_08031F04: .4byte gMapMovement
_08031F08: .4byte gMapUnit
_08031F0C: .4byte gActiveUnitId
_08031F10:
	ldr r1, [r1]
	lsls r0, r4, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r3
	ldrb r0, [r0]
_08031F1C:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8031F24
sub_8031F24: @ 0x08031F24
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x20
	movs r0, #0
	str r0, [sp, #0x10]
	movs r1, #0xff
	str r1, [sp, #0x14]
	movs r2, #0
	str r2, [sp, #0x18]
	ldr r0, _08031F48 @ =gMapSize
	movs r3, #2
	ldrsh r0, [r0, r3]
	subs r0, #1
	b _0803200A
	.align 2, 0
_08031F48: .4byte gMapSize
_08031F4C:
	ldr r0, _0803201C @ =gMapSize
	movs r1, #0
	ldrsh r0, [r0, r1]
	subs r5, r0, #1
	mov r2, r8
	subs r2, #1
	str r2, [sp, #0x1c]
	cmp r5, #0
	blt _08032008
	mov r3, r8
	lsls r7, r3, #2
_08031F62:
	ldr r0, _08032020 @ =gMapMovement
	ldr r0, [r0]
	adds r0, r7, r0
	ldr r0, [r0]
	adds r0, r0, r5
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _08032002
	ldr r1, _08032024 @ =gMapUnit
	ldr r0, [r1]
	adds r0, r7, r0
	ldr r0, [r0]
	adds r1, r0, r5
	ldrb r0, [r1]
	cmp r0, #0
	beq _08032002
	ldr r0, _08032028 @ =gActiveUnitId
	ldrb r0, [r0]
	ldrb r1, [r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _08032002
	add r2, sp, #0xc
	mov sl, r2
	adds r0, r5, #0
	mov r1, r8
	ldr r2, _0803202C @ =sub_8031ECC
	add r3, sp, #0xc
	bl sub_8030180
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08032002
	ldr r3, _08032024 @ =gMapUnit
	ldr r0, [r3]
	adds r0, r7, r0
	ldr r0, [r0]
	adds r0, r0, r5
	ldrb r0, [r0]
	bl GetUnit
	adds r4, r0, #0
	bl sub_8030230
	lsls r6, r0, #0x18
	asrs r1, r6, #0x18
	cmp r1, #0
	blt _08032002
	lsls r1, r1, #1
	adds r0, r4, #0
	adds r0, #0x1c
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_80301FC
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, [sp, #0x14]
	cmp r1, r0
	blo _08032002
	str r0, [sp, #0x14]
	add r1, sp, #0xc
	mov r2, sl
	ldrh r0, [r2, #2]
	lsls r0, r0, #0x10
	ldrh r1, [r1]
	orrs r1, r0
	mov sb, r1
	ldr r3, _08032024 @ =gMapUnit
	ldr r0, [r3]
	adds r0, r7, r0
	ldr r0, [r0]
	adds r0, r0, r5
	ldrb r0, [r0]
	str r0, [sp, #0x18]
	lsrs r6, r6, #0x18
	str r6, [sp, #0x10]
_08032002:
	subs r5, #1
	cmp r5, #0
	bge _08031F62
_08032008:
	ldr r0, [sp, #0x1c]
_0803200A:
	mov r8, r0
	cmp r0, #0
	bge _08031F4C
	ldr r1, [sp, #0x14]
	cmp r1, #0xff
	bne _08032030
	movs r0, #0
	b _08032058
	.align 2, 0
_0803201C: .4byte gMapSize
_08032020: .4byte gMapMovement
_08032024: .4byte gMapUnit
_08032028: .4byte gActiveUnitId
_0803202C: .4byte sub_8031ECC
_08032030:
	ldr r0, _08032068 @ =gActiveUnit
	ldr r0, [r0]
	adds r0, #0x46
	ldrb r1, [r0]
	adds r1, #1
	movs r2, #0
	strb r1, [r0]
	mov r3, sb
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	asrs r1, r3, #0x10
	ldr r3, [sp, #0x10]
	str r3, [sp]
	str r2, [sp, #4]
	str r2, [sp, #8]
	movs r2, #3
	ldr r3, [sp, #0x18]
	bl AiSetDecision
	movs r0, #1
_08032058:
	add sp, #0x20
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08032068: .4byte gActiveUnit

	thumb_func_start sub_803206C
sub_803206C: @ 0x0803206C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r7, r0, #0
	movs r3, #0
	ldr r0, _08032108 @ =gMapSize
	movs r1, #2
	ldrsh r0, [r0, r1]
	subs r5, r0, #1
	cmp r5, #0
	blt _080320F6
_08032084:
	ldr r0, _08032108 @ =gMapSize
	movs r1, #0
	ldrsh r0, [r0, r1]
	subs r4, r0, #1
	subs r0, r5, #1
	mov r8, r0
	cmp r4, #0
	blt _080320F0
	lsls r6, r5, #2
_08032096:
	ldr r0, _0803210C @ =gMapMovement
	ldr r0, [r0]
	adds r0, r6, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _080320EA
	ldr r0, _08032110 @ =gMapRange
	ldr r0, [r0]
	adds r0, r6, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080320EA
	ldr r0, _08032114 @ =gMapUnit
	ldr r0, [r0]
	adds r0, r6, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r1, [r0]
	cmp r1, #0
	beq _080320D2
	ldr r0, _08032118 @ =gActiveUnitId
	ldrb r0, [r0]
	cmp r1, r0
	bne _080320EA
_080320D2:
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r7, #0
	str r3, [sp]
	bl sub_8032200
	ldr r3, [sp]
	cmp r0, r3
	bls _080320EA
	strb r4, [r7]
	strb r5, [r7, #1]
	adds r3, r0, #0
_080320EA:
	subs r4, #1
	cmp r4, #0
	bge _08032096
_080320F0:
	mov r5, r8
	cmp r5, #0
	bge _08032084
_080320F6:
	cmp r3, #0
	beq _0803211C
	adds r0, r7, #0
	bl AiSimulateBattle
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _0803211E
	.align 2, 0
_08032108: .4byte gMapSize
_0803210C: .4byte gMapMovement
_08032110: .4byte gMapRange
_08032114: .4byte gMapUnit
_08032118: .4byte gActiveUnitId
_0803211C:
	movs r0, #0
_0803211E:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_803212C
sub_803212C: @ 0x0803212C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r7, r0, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov sb, r1
	movs r3, #0
	ldr r0, _080321DC @ =gMapSize
	movs r1, #2
	ldrsh r0, [r0, r1]
	subs r5, r0, #1
	cmp r5, #0
	blt _080321CC
_0803214C:
	ldr r0, _080321DC @ =gMapSize
	movs r2, #0
	ldrsh r0, [r0, r2]
	subs r4, r0, #1
	subs r0, r5, #1
	mov r8, r0
	cmp r4, #0
	blt _080321C6
	lsls r6, r5, #2
_0803215E:
	ldr r0, _080321E0 @ =gMapMovement
	ldr r0, [r0]
	adds r0, r6, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r1, [r0]
	cmp r1, #0x78
	bhi _080321C0
	movs r1, #0
	ldrsb r1, [r0, r1]
	mov r2, sb
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
	cmp r1, r0
	bne _080321C0
	ldr r0, _080321E4 @ =gMapRange
	ldr r0, [r0]
	adds r0, r6, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080321C0
	ldr r0, _080321E8 @ =gMapUnit
	ldr r0, [r0]
	adds r0, r6, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r1, [r0]
	cmp r1, #0
	beq _080321A8
	ldr r0, _080321EC @ =gActiveUnitId
	ldrb r0, [r0]
	cmp r1, r0
	bne _080321C0
_080321A8:
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r7, #0
	str r3, [sp]
	bl sub_8032200
	ldr r3, [sp]
	cmp r0, r3
	bls _080321C0
	strb r4, [r7]
	strb r5, [r7, #1]
	adds r3, r0, #0
_080321C0:
	subs r4, #1
	cmp r4, #0
	bge _0803215E
_080321C6:
	mov r5, r8
	cmp r5, #0
	bge _0803214C
_080321CC:
	cmp r3, #0
	beq _080321F0
	adds r0, r7, #0
	bl AiSimulateBattle
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _080321F2
	.align 2, 0
_080321DC: .4byte gMapSize
_080321E0: .4byte gMapMovement
_080321E4: .4byte gMapRange
_080321E8: .4byte gMapUnit
_080321EC: .4byte gActiveUnitId
_080321F0:
	movs r0, #0
_080321F2:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8032200
sub_8032200: @ 0x08032200
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	ldrb r0, [r2, #2]
	bl GetUnit
	adds r2, r0, #0
	adds r0, r6, #0
	adds r1, r5, #0
	bl sub_80325BC
	adds r4, r0, #0
	adds r0, r6, #0
	adds r1, r5, #0
	bl sub_803260C
	adds r4, r4, r0
	adds r0, r6, #0
	adds r1, r5, #0
	bl sub_803264C
	adds r4, r4, r0
	ldr r0, _0803225C @ =gMapMovement
	ldr r0, [r0]
	lsls r5, r5, #2
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r0, r6
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r4, r4, r0
	ldr r0, _08032260 @ =gMapOther
	ldr r0, [r0]
	adds r5, r5, r0
	ldr r0, [r5]
	adds r0, r0, r6
	ldrb r0, [r0]
	lsrs r0, r0, #3
	subs r4, r4, r0
	ldr r0, _08032264 @ =0x7FFFFFFF
	adds r4, r4, r0
	adds r0, r4, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0803225C: .4byte gMapMovement
_08032260: .4byte gMapOther
_08032264: .4byte 0x7FFFFFFF

	thumb_func_start ShouldAiNotBattle
ShouldAiNotBattle: @ 0x08032268
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, _080322A0 @ =gActiveUnit
	ldr r0, [r0]
	ldrh r2, [r5, #4]
	lsls r1, r2, #1
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r4, [r0]
	ldrb r0, [r5, #2]
	bl GetUnit
	adds r6, r0, #0
	adds r0, r4, #0
	bl GetItemIid
	cmp r0, #0x41
	bne _080322A4
	adds r0, r6, #0
	bl GetUnitCurrentHp
	cmp r0, #5
	bgt _080322A4
	movs r0, #0
	str r0, [r5, #8]
	movs r0, #1
	b _080322A6
	.align 2, 0
_080322A0: .4byte gActiveUnit
_080322A4:
	movs r0, #0
_080322A6:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start AiSimulateBattle
AiSimulateBattle: @ 0x080322AC
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, _080322D4 @ =0x0000FFFF
	ldrh r1, [r5, #4]
	cmp r1, r0
	beq _080322DC
	ldrb r0, [r5, #2]
	bl GetUnit
	adds r1, r0, #0
	ldr r0, _080322D8 @ =gActiveUnit
	ldr r0, [r0]
	ldrb r2, [r5]
	ldrb r3, [r5, #1]
	ldrh r4, [r5, #4]
	str r4, [sp]
	bl BattleGenerateSimulation
	b _080322F2
	.align 2, 0
_080322D4: .4byte 0x0000FFFF
_080322D8: .4byte gActiveUnit
_080322DC:
	ldr r0, _08032304 @ =gActiveUnit
	ldr r4, [r0]
	ldrb r0, [r5, #2]
	bl GetUnit
	adds r1, r0, #0
	ldrb r2, [r5]
	ldrb r3, [r5, #1]
	adds r0, r4, #0
	bl BattleGenerateBallistaSimulation
_080322F2:
	adds r0, r5, #0
	bl ShouldAiNotBattle
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08032308
	movs r0, #0
	b _08032310
	.align 2, 0
_08032304: .4byte gActiveUnit
_08032308:
	adds r0, r5, #0
	bl ComputeAiAttackWeight
	movs r0, #1
_08032310:
	add sp, #4
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_8032318
sub_8032318: @ 0x08032318
	push {r4, lr}
	ldr r3, _08032328 @ =gBattleUnitB
	movs r0, #0x11
	ldrsb r0, [r3, r0]
	cmp r0, #0
	bne _0803232C
	movs r0, #0x32
	b _08032368
	.align 2, 0
_08032328: .4byte gBattleUnitB
_0803232C:
	ldr r1, _08032370 @ =gBattleUnitA
	adds r0, r1, #0
	adds r0, #0x58
	movs r4, #0
	ldrsh r2, [r0, r4]
	adds r0, r3, #0
	adds r0, #0x5a
	movs r3, #0
	ldrsh r0, [r0, r3]
	subs r2, r2, r0
	adds r1, #0x62
	movs r4, #0
	ldrsh r0, [r1, r4]
	muls r2, r0, r2
	cmp r2, #0
	bge _0803234E
	movs r2, #0
_0803234E:
	adds r0, r2, #0
	movs r1, #0x64
	bl Div
	adds r2, r0, #0
	ldr r0, _08032374 @ =0x030013B0
	ldr r0, [r0]
	ldrb r0, [r0]
	muls r2, r0, r2
	cmp r2, #0x28
	ble _08032366
	movs r2, #0x28
_08032366:
	adds r0, r2, #0
_08032368:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08032370: .4byte gBattleUnitA
_08032374: .4byte 0x030013B0

	thumb_func_start sub_8032378
sub_8032378: @ 0x08032378
	ldr r0, _08032394 @ =gBattleUnitB
	movs r1, #0x11
	ldrsb r1, [r0, r1]
	movs r0, #0x14
	subs r1, r0, r1
	ldr r0, _08032398 @ =0x030013B0
	ldr r0, [r0]
	ldrb r0, [r0, #1]
	muls r1, r0, r1
	cmp r1, #0
	bge _08032390
	movs r1, #0
_08032390:
	adds r0, r1, #0
	bx lr
	.align 2, 0
_08032394: .4byte gBattleUnitB
_08032398: .4byte 0x030013B0

	thumb_func_start sub_803239C
sub_803239C: @ 0x0803239C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	movs r5, #0
	ldr r4, _0803242C @ =0x085C9804
	ldrb r2, [r4]
	cmp r2, #0x7f
	beq _08032410
	ldr r0, _08032430 @ =gBattleUnitA
	mov sb, r0
	ldr r1, _08032434 @ =gMapSize
	mov r8, r1
_080323B6:
	mov r3, sb
	ldrb r3, [r3, #0xe]
	adds r2, r2, r3
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	mov r6, sb
	ldrb r6, [r6, #0xf]
	ldrb r7, [r4, #1]
	adds r0, r6, r7
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	ldr r0, _08032438 @ =gMapUnit
	ldr r1, [r0]
	lsls r0, r3, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r2
	ldrb r1, [r0]
	mov r6, r8
	movs r7, #0
	ldrsh r0, [r6, r7]
	cmp r2, r0
	bge _08032408
	movs r2, #2
	ldrsh r0, [r6, r2]
	cmp r3, r0
	bge _08032408
	cmp r1, #0
	beq _08032408
	mov r3, sb
	movs r0, #0xb
	ldrsb r0, [r3, r0]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08032408
	movs r0, #2
	ldrsb r0, [r4, r0]
	adds r5, r5, r0
_08032408:
	adds r4, #4
	ldrb r2, [r4]
	cmp r2, #0x7f
	bne _080323B6
_08032410:
	ldr r0, _0803243C @ =0x030013B0
	ldr r0, [r0]
	ldrb r0, [r0, #2]
	muls r5, r0, r5
	cmp r5, #0xa
	ble _0803241E
	movs r5, #0xa
_0803241E:
	adds r0, r5, #0
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0803242C: .4byte 0x085C9804
_08032430: .4byte gBattleUnitA
_08032434: .4byte gMapSize
_08032438: .4byte gMapUnit
_0803243C: .4byte 0x030013B0

	thumb_func_start sub_8032440
sub_8032440: @ 0x08032440
	push {lr}
	ldr r0, _0803246C @ =gBattleUnitB
	ldr r0, [r0, #4]
	ldrb r0, [r0, #4]
	bl sub_803079C
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, _08032470 @ =0x030013B0
	ldr r2, [r1]
	adds r1, r2, #0
	adds r1, #8
	adds r1, r1, r0
	ldrb r2, [r2, #3]
	ldrb r1, [r1]
	adds r0, r2, #0
	muls r0, r1, r0
	cmp r0, #0x14
	ble _08032468
	movs r0, #0x14
_08032468:
	pop {r1}
	bx r1
	.align 2, 0
_0803246C: .4byte gBattleUnitB
_08032470: .4byte 0x030013B0

	thumb_func_start sub_8032474
sub_8032474: @ 0x08032474
	ldr r1, _08032484 @ =gPlaySt
	ldr r0, _08032488 @ =0x030013B0
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	ldrh r1, [r1, #0x10]
	muls r0, r1, r0
	bx lr
	.align 2, 0
_08032484: .4byte gPlaySt
_08032488: .4byte 0x030013B0

	thumb_func_start sub_803248C
sub_803248C: @ 0x0803248C
	push {lr}
	ldr r2, _080324A0 @ =gBattleUnitB
	adds r0, r2, #0
	adds r0, #0x48
	ldrh r0, [r0]
	cmp r0, #0
	bne _080324A4
	movs r0, #0xa
	rsbs r0, r0, #0
	b _080324E0
	.align 2, 0
_080324A0: .4byte gBattleUnitB
_080324A4:
	adds r0, r2, #0
	adds r0, #0x58
	movs r3, #0
	ldrsh r1, [r0, r3]
	ldr r0, _080324E4 @ =gBattleUnitA
	adds r0, #0x5a
	movs r3, #0
	ldrsh r0, [r0, r3]
	subs r1, r1, r0
	adds r0, r2, #0
	adds r0, #0x62
	movs r2, #0
	ldrsh r0, [r0, r2]
	muls r1, r0, r1
	cmp r1, #0
	bge _080324C6
	movs r1, #0
_080324C6:
	adds r0, r1, #0
	movs r1, #0x64
	bl Div
	adds r1, r0, #0
	ldr r0, _080324E8 @ =0x030013B0
	ldr r0, [r0]
	ldrb r0, [r0, #5]
	muls r1, r0, r1
	cmp r1, #0x28
	ble _080324DE
	movs r1, #0x28
_080324DE:
	adds r0, r1, #0
_080324E0:
	pop {r1}
	bx r1
	.align 2, 0
_080324E4: .4byte gBattleUnitA
_080324E8: .4byte 0x030013B0

	thumb_func_start sub_80324EC
sub_80324EC: @ 0x080324EC
	ldr r2, _08032518 @ =gBattleUnitA
	movs r0, #0xf
	ldrsb r0, [r2, r0]
	ldr r1, _0803251C @ =gMapOther
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	lsrs r1, r0, #3
	ldr r0, _08032520 @ =0x030013B0
	ldr r0, [r0]
	ldrb r0, [r0, #6]
	muls r1, r0, r1
	cmp r1, #0x14
	ble _08032514
	movs r1, #0x14
_08032514:
	adds r0, r1, #0
	bx lr
	.align 2, 0
_08032518: .4byte gBattleUnitA
_0803251C: .4byte gMapOther
_08032520: .4byte 0x030013B0

	thumb_func_start sub_8032524
sub_8032524: @ 0x08032524
	ldr r0, _08032540 @ =gBattleUnitA
	movs r1, #0x11
	ldrsb r1, [r0, r1]
	movs r0, #0x14
	subs r1, r0, r1
	ldr r0, _08032544 @ =0x030013B0
	ldr r0, [r0]
	ldrb r0, [r0, #7]
	muls r1, r0, r1
	cmp r1, #0
	bge _0803253C
	movs r1, #0
_0803253C:
	adds r0, r1, #0
	bx lr
	.align 2, 0
_08032540: .4byte gBattleUnitA
_08032544: .4byte 0x030013B0

	thumb_func_start ComputeAiAttackWeight
ComputeAiAttackWeight: @ 0x08032548
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r2, _080325A4 @ =0x030013B0
	ldr r1, _080325A8 @ =0x020395F8
	adds r1, #0x7d
	ldrb r3, [r1]
	lsls r0, r3, #2
	adds r0, r0, r3
	lsls r0, r0, #2
	ldr r1, _080325AC @ =0x0810D728
	adds r0, r0, r1
	str r0, [r2]
	bl sub_8032318
	adds r4, r0, #0
	adds r5, r4, #0
	bl sub_8032378
	adds r4, r4, r0
	bl sub_803239C
	adds r4, r4, r0
	bl sub_8032440
	adds r4, r4, r0
	bl sub_8032474
	adds r4, r4, r0
	bl sub_803248C
	subs r4, r4, r0
	bl sub_80324EC
	subs r4, r4, r0
	bl sub_8032524
	subs r4, r4, r0
	cmp r4, #0
	bge _08032598
	movs r4, #0
_08032598:
	cmp r4, #0
	beq _080325B0
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r4, r0, #3
	b _080325B2
	.align 2, 0
_080325A4: .4byte 0x030013B0
_080325A8: .4byte 0x020395F8
_080325AC: .4byte 0x0810D728
_080325B0:
	adds r4, r5, #0
_080325B2:
	str r4, [r6, #8]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80325BC
sub_80325BC: @ 0x080325BC
	push {r4, r5, lr}
	movs r4, #0xe
	ldrsb r4, [r2, r4]
	subs r3, r4, r0
	cmp r3, #0
	bge _080325CA
	subs r3, r0, r4
_080325CA:
	movs r0, #0xf
	ldrsb r0, [r2, r0]
	subs r4, r0, r1
	cmp r4, #0
	blt _080325D8
	adds r5, r3, r4
	b _080325DC
_080325D8:
	subs r0, r1, r0
	adds r5, r3, r0
_080325DC:
	adds r0, r2, #0
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	beq _08032602
	adds r0, r4, #0
	bl GetItemMaxRange
	cmp r5, r0
	bgt _080325FE
	adds r0, r4, #0
	bl GetItemMinRange
	cmp r5, r0
	bge _08032602
_080325FE:
	movs r0, #0x32
	b _08032604
_08032602:
	movs r0, #0
_08032604:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_803260C
sub_803260C: @ 0x0803260C
	ldr r2, _08032644 @ =gMapTerrain
	ldr r2, [r2]
	lsls r1, r1, #2
	adds r1, r1, r2
	ldr r1, [r1]
	adds r1, r1, r0
	ldrb r3, [r1]
	ldr r0, _08032648 @ =gActiveUnit
	ldr r0, [r0]
	ldr r2, [r0, #4]
	ldr r0, [r2, #0x38]
	adds r0, r0, r3
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r1, [r2, #0x3c]
	adds r1, r1, r3
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	ldr r1, [r2, #0x40]
	adds r1, r1, r3
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	bx lr
	.align 2, 0
_08032644: .4byte gMapTerrain
_08032648: .4byte gActiveUnit

	thumb_func_start sub_803264C
sub_803264C: @ 0x0803264C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	adds r6, r1, #0
	movs r5, #0
	ldr r4, _0803269C @ =0x085C9868
	movs r1, #0
	ldrsh r0, [r4, r1]
	ldr r1, _080326A0 @ =0x0000270F
	cmp r0, r1
	beq _080326B8
	mov r8, r1
_08032666:
	movs r2, #2
	ldrsh r0, [r4, r2]
	adds r0, r6, r0
	ldr r1, _080326A4 @ =gMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r2, #0
	ldrsh r1, [r4, r2]
	ldr r0, [r0]
	adds r1, r7, r1
	adds r1, r0, r1
	ldrb r0, [r1]
	cmp r0, #0
	beq _080326AE
	ldr r0, _080326A8 @ =gActiveUnitId
	ldrb r0, [r0]
	ldrb r1, [r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _080326AC
	adds r5, #5
	b _080326AE
	.align 2, 0
_0803269C: .4byte 0x085C9868
_080326A0: .4byte 0x0000270F
_080326A4: .4byte gMapUnit
_080326A8: .4byte gActiveUnitId
_080326AC:
	subs r5, #5
_080326AE:
	adds r4, #4
	movs r1, #0
	ldrsh r0, [r4, r1]
	cmp r0, r8
	bne _08032666
_080326B8:
	adds r0, r5, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_80326C4
sub_80326C4: @ 0x080326C4
	push {lr}
	ldr r0, _080326E8 @ =0x020395F8
	adds r1, r0, #0
	adds r1, #0x7a
	ldrb r0, [r1]
	cmp r0, #0
	bne _080326E4
	movs r0, #1
	strb r0, [r1]
	ldr r0, _080326EC @ =gMapOther
	ldr r0, [r0]
	movs r1, #0
	bl MapFill
	bl sub_80326F0
_080326E4:
	pop {r0}
	bx r0
	.align 2, 0
_080326E8: .4byte 0x020395F8
_080326EC: .4byte gMapOther

	thumb_func_start sub_80326F0
sub_80326F0: @ 0x080326F0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	movs r0, #0
	mov r8, r0
	mov sb, r0
	movs r4, #1
_08032702:
	adds r0, r4, #0
	bl GetUnit
	adds r6, r0, #0
	adds r4, #1
	mov sl, r4
	cmp r6, #0
	beq _080327EA
	ldr r0, [r6]
	cmp r0, #0
	beq _080327EA
	movs r0, #0xd
	ldrh r1, [r6, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _080327EA
	ldr r0, _08032800 @ =gActiveUnitId
	ldrb r0, [r0]
	movs r1, #0xb
	ldrsb r1, [r6, r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080327EA
	movs r5, #0
	ldrh r4, [r6, #0x1c]
	cmp r4, #0
	beq _08032776
_0803273C:
	adds r0, r6, #0
	adds r1, r4, #0
	bl CanUnitUseWeapon
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08032762
	adds r0, r4, #0
	bl GetItemMight
	cmp r0, sb
	ble _08032762
	mov r8, r4
	mov r0, r8
	bl GetItemMight
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sb, r0
_08032762:
	adds r5, #1
	cmp r5, #4
	bgt _08032776
	lsls r1, r5, #1
	adds r0, r6, #0
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r4, [r0]
	cmp r4, #0
	bne _0803273C
_08032776:
	mov r2, r8
	cmp r2, #0
	beq _080327EA
	ldr r0, _08032804 @ =gActiveUnit
	ldr r0, [r0]
	adds r1, r6, #0
	bl sub_802F714
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080327EA
	adds r0, r6, #0
	mov r1, r8
	bl sub_802FFC0
	ldr r0, _08032808 @ =gMapSize
	movs r1, #2
	ldrsh r0, [r0, r1]
	subs r1, r0, #1
	cmp r1, #0
	blt _080327EA
_080327A0:
	ldr r0, _08032808 @ =gMapSize
	movs r2, #0
	ldrsh r0, [r0, r2]
	subs r4, r0, #1
	subs r7, r1, #1
	cmp r4, #0
	blt _080327E4
	lsls r5, r1, #2
_080327B0:
	ldr r0, _0803280C @ =gMapRange
	ldr r0, [r0]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080327DE
	adds r0, r6, #0
	bl GetUnitPower
	ldr r1, _08032810 @ =gMapOther
	ldr r1, [r1]
	adds r1, r5, r1
	ldr r1, [r1]
	adds r1, r1, r4
	add r0, sb
	asrs r0, r0, #1
	ldrb r2, [r1]
	adds r0, r2, r0
	strb r0, [r1]
_080327DE:
	subs r4, #1
	cmp r4, #0
	bge _080327B0
_080327E4:
	adds r1, r7, #0
	cmp r1, #0
	bge _080327A0
_080327EA:
	mov r4, sl
	cmp r4, #0xbf
	ble _08032702
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08032800: .4byte gActiveUnitId
_08032804: .4byte gActiveUnit
_08032808: .4byte gMapSize
_0803280C: .4byte gMapRange
_08032810: .4byte gMapOther

	thumb_func_start sub_8032814
sub_8032814: @ 0x08032814
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	ldr r3, _08032830 @ =gMapOther
	ldr r3, [r3]
	lsls r1, r1, #2
	adds r1, r1, r3
	ldr r1, [r1]
	adds r1, r1, r0
	ldrb r1, [r1]
	cmp r1, r2
	bhi _08032834
	movs r0, #1
	b _08032836
	.align 2, 0
_08032830: .4byte gMapOther
_08032834:
	movs r0, #0
_08032836:
	bx lr

	thumb_func_start sub_8032838
sub_8032838: @ 0x08032838
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r8, r0
	ldr r0, _080328FC @ =0x00002710
	str r0, [sp]
	movs r1, #0xff
	mov sb, r1
	ldr r0, _08032900 @ =gActiveUnit
	ldr r2, [r0]
	adds r1, r2, #0
	adds r1, #0x40
	movs r3, #0x80
	lsls r3, r3, #6
	adds r0, r3, #0
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _08032866
	b _080329F4
_08032866:
	ldr r0, [r2]
	ldr r1, [r2, #4]
	ldr r0, [r0, #0x28]
	ldr r1, [r1, #0x24]
	orrs r0, r1
	ands r0, r3
	cmp r0, #0
	beq _08032878
	b _080329F4
_08032878:
	adds r0, r2, #0
	movs r1, #0x7c
	bl MapFlood_08019384
	ldr r0, _08032904 @ =gMapSize
	movs r2, #2
	ldrsh r0, [r0, r2]
	subs r7, r0, #1
	cmp r7, #0
	bge _0803288E
	b _080329AA
_0803288E:
	ldr r0, _08032904 @ =gMapSize
	movs r3, #0
	ldrsh r0, [r0, r3]
	subs r4, r0, #1
	subs r0, r7, #1
	mov sl, r0
	cmp r4, #0
	bge _080328A0
	b _080329A2
_080328A0:
	lsls r5, r7, #2
_080328A2:
	ldr r0, _08032908 @ =gMapMovement
	ldr r0, [r0]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _0803299A
	ldr r0, _0803290C @ =gMapTerrain
	ldr r0, [r0]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r1, [r0]
	ldr r0, _08032910 @ =0x085C98CC
	bl sub_802F798
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0803291C
	ldr r6, _08032914 @ =gMapUnit
	ldr r0, [r6]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r1, r0, r4
	ldrb r0, [r1]
	cmp r0, #0
	beq _0803299A
	ldr r0, _08032918 @ =gActiveUnitId
	ldrb r0, [r0]
	ldrb r1, [r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803299A
	ldr r0, [r6]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	bl GetUnit
	adds r2, r0, #0
	b _0803295E
	.align 2, 0
_080328FC: .4byte 0x00002710
_08032900: .4byte gActiveUnit
_08032904: .4byte gMapSize
_08032908: .4byte gMapMovement
_0803290C: .4byte gMapTerrain
_08032910: .4byte 0x085C98CC
_08032914: .4byte gMapUnit
_08032918: .4byte gActiveUnitId
_0803291C:
	ldr r6, _080329E8 @ =gMapUnit
	ldr r0, [r6]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r1, r0, r4
	ldrb r0, [r1]
	cmp r0, #0
	beq _08032968
	ldr r0, _080329EC @ =gActiveUnitId
	ldrb r0, [r0]
	ldrb r1, [r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803299A
	ldr r0, [r6]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	bl GetUnit
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x40
	movs r3, #0x80
	lsls r3, r3, #6
	adds r0, r3, #0
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _08032968
_0803295E:
	movs r0, #4
	ldrb r2, [r2, #0xa]
	ands r0, r2
	cmp r0, #0
	beq _0803299A
_08032968:
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	lsls r1, r7, #0x10
	asrs r1, r1, #0x10
	bl sub_802FE84
	adds r2, r0, #0
	ldr r0, [sp]
	cmp r2, r0
	bgt _0803299A
	ldr r0, _080329F0 @ =gMapMovement
	ldr r0, [r0]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r1, r0, r4
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, sb
	bgt _0803299A
	str r2, [sp]
	ldrb r1, [r1]
	mov sb, r1
	mov r1, r8
	strh r4, [r1]
	strh r7, [r1, #2]
_0803299A:
	subs r4, #1
	cmp r4, #0
	blt _080329A2
	b _080328A2
_080329A2:
	mov r7, sl
	cmp r7, #0
	blt _080329AA
	b _0803288E
_080329AA:
	mov r2, sb
	cmp r2, #0xff
	beq _080329F4
	mov r3, r8
	movs r1, #2
	ldrsh r0, [r3, r1]
	ldr r1, _080329E8 @ =gMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r2, #0
	ldrsh r1, [r3, r2]
	ldr r0, [r0]
	adds r2, r0, r1
	ldrb r1, [r2]
	cmp r1, #0
	beq _080329E4
	ldr r0, _080329EC @ =gActiveUnitId
	ldrb r0, [r0]
	cmp r1, r0
	beq _080329E4
	adds r0, r1, #0
	bl GetUnit
	adds r2, r0, #0
	movs r0, #2
	ldrb r3, [r2, #0xa]
	orrs r0, r3
	strb r0, [r2, #0xa]
_080329E4:
	movs r0, #1
	b _080329F6
	.align 2, 0
_080329E8: .4byte gMapUnit
_080329EC: .4byte gActiveUnitId
_080329F0: .4byte gMapMovement
_080329F4:
	movs r0, #0
_080329F6:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8032A08
sub_8032A08: @ 0x08032A08
	push {r4, r5, r6, lr}
	sub sp, #0xc
	ldr r0, _08032A58 @ =gPlaySt
	ldrb r2, [r0, #0xf]
	mov r1, sp
	ldr r0, _08032A5C @ =0x0810DB28
	ldm r0!, {r3, r4, r5}
	stm r1!, {r3, r4, r5}
	movs r5, #0
	lsrs r0, r2, #6
	lsls r0, r0, #2
	mov r3, sp
	adds r1, r3, r0
	ldr r0, [r1]
	cmp r5, r0
	bge _08032A4E
	adds r6, r1, #0
	adds r4, r2, #1
_08032A2C:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _08032A44
	ldr r0, [r1]
	cmp r0, #0
	beq _08032A44
	adds r0, r1, #0
	bl sub_8032A60
_08032A44:
	adds r4, #1
	adds r5, #1
	ldr r0, [r6]
	cmp r5, r0
	blt _08032A2C
_08032A4E:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08032A58: .4byte gPlaySt
_08032A5C: .4byte 0x0810DB28

	thumb_func_start sub_8032A60
sub_8032A60: @ 0x08032A60
	push {r4, r5, lr}
	adds r5, r0, #0
	bl GetUnitCurrentHp
	movs r1, #0x64
	adds r4, r0, #0
	muls r4, r1, r4
	adds r0, r5, #0
	bl GetUnitMaxHp
	adds r1, r0, #0
	adds r0, r4, #0
	bl Div
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	ldrb r3, [r5, #0xa]
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	beq _08032AB0
	ldr r2, _08032AAC @ =0x085C8820
	adds r1, r5, #0
	adds r1, #0x40
	movs r0, #7
	ldrh r1, [r1]
	ands r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r0, r4
	bhi _08032AD6
	movs r0, #0xfe
	ands r0, r3
	strb r0, [r5, #0xa]
	movs r0, #0
	b _08032AD8
	.align 2, 0
_08032AAC: .4byte 0x085C8820
_08032AB0:
	ldr r2, _08032ACC @ =0x085C8820
	adds r1, r5, #0
	adds r1, #0x40
	movs r0, #7
	ldrh r1, [r1]
	ands r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	ldrb r0, [r0, #1]
	cmp r0, r4
	bhi _08032AD0
	movs r0, #0
	b _08032AD8
	.align 2, 0
_08032ACC: .4byte 0x085C8820
_08032AD0:
	movs r0, #1
	orrs r0, r3
	strb r0, [r5, #0xa]
_08032AD6:
	movs r0, #1
_08032AD8:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8032AE0
sub_8032AE0: @ 0x08032AE0
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	movs r6, #0
	ldr r7, _08032B48 @ =gActiveUnit
_08032AE8:
	ldr r0, [r7]
	lsls r1, r6, #1
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r0, [r0]
	adds r4, r0, #0
	cmp r4, #0
	beq _08032B7A
	adds r0, r4, #0
	bl GetItemIid
	cmp r0, #0x68
	beq _08032B0C
	adds r0, r4, #0
	bl GetItemIid
	cmp r0, #0x69
	bne _08032B74
_08032B0C:
	ldr r1, _08032B4C @ =0x020395F8
	adds r1, #0x7b
	movs r0, #2
	ldrb r1, [r1]
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #0
	bne _08032B50
	ldr r0, [r7]
	add r5, sp, #0xc
	adds r1, r5, #0
	bl sub_8030270
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08032B74
	add r0, sp, #0xc
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #2
	ldrsh r1, [r5, r2]
	lsls r2, r6, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp]
	str r4, [sp, #4]
	str r4, [sp, #8]
	b _08032B68
	.align 2, 0
_08032B48: .4byte gActiveUnit
_08032B4C: .4byte 0x020395F8
_08032B50:
	ldr r1, [r7]
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	ldrb r1, [r1, #0xf]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r2, r6, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp]
	movs r2, #0
	str r2, [sp, #4]
	str r2, [sp, #8]
_08032B68:
	movs r2, #6
	movs r3, #0
	bl AiSetDecision
	movs r0, #1
	b _08032B7C
_08032B74:
	adds r6, #1
	cmp r6, #4
	ble _08032AE8
_08032B7A:
	movs r0, #0
_08032B7C:
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8032B84
sub_8032B84: @ 0x08032B84
	push {r4, r5, r6, lr}
	sub sp, #0xc
	ldr r6, _08032BF4 @ =gActiveUnit
	ldr r0, [r6]
	movs r1, #0x7c
	bl MapFlood_08019384
	bl sub_8032C2C
	adds r4, r0, #0
	cmp r4, #0
	beq _08032C20
	ldrb r5, [r4, #1]
	ldr r0, _08032BF8 @ =gMapMovement
	ldr r1, [r0]
	lsls r0, r5, #2
	adds r0, r0, r1
	ldrb r3, [r4]
	ldr r0, [r0]
	adds r0, r0, r3
	movs r2, #0
	ldrsb r2, [r0, r2]
	ldr r1, [r6]
	movs r0, #0x1a
	ldrsb r0, [r1, r0]
	ldr r1, [r1, #4]
	ldrb r1, [r1, #0x12]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	cmp r2, r0
	bgt _08032C00
	movs r0, #1
	str r0, [sp]
	adds r0, r3, #0
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0xff
	bl sub_803046C
	ldr r1, _08032BFC @ =gAiDecision
	ldrb r0, [r1, #2]
	ldrb r1, [r1, #3]
	ldrb r3, [r4]
	ldrb r2, [r4, #1]
	str r2, [sp]
	ldrb r2, [r4, #2]
	str r2, [sp, #4]
	movs r2, #0
	str r2, [sp, #8]
	movs r2, #2
	bl AiSetDecision
	movs r0, #1
	b _08032C22
	.align 2, 0
_08032BF4: .4byte gActiveUnit
_08032BF8: .4byte gMapMovement
_08032BFC: .4byte gAiDecision
_08032C00:
	movs r0, #0
	str r0, [sp]
	adds r0, r3, #0
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0xff
	bl sub_803046C
	ldr r0, _08032C1C @ =gAiDecision
	ldrb r0, [r0, #0xa]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _08032C22
	.align 2, 0
_08032C1C: .4byte gAiDecision
_08032C20:
	movs r0, #0
_08032C22:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8032C2C
sub_8032C2C: @ 0x08032C2C
	push {r4, r5, r6, lr}
	movs r1, #0
	movs r5, #0
	ldr r0, _08032C4C @ =gPlaySt
	movs r2, #0xe
	ldrsb r2, [r0, r2]
	movs r4, #0xff
	ldrb r0, [r0, #0xf]
	cmp r0, #0x40
	beq _08032C64
	cmp r0, #0x40
	bgt _08032C50
	cmp r0, #0
	beq _08032C56
	b _08032C6C
	.align 2, 0
_08032C4C: .4byte gPlaySt
_08032C50:
	cmp r0, #0x80
	beq _08032C5A
	b _08032C6C
_08032C56:
	movs r0, #0
	b _08032CA6
_08032C5A:
	ldr r1, _08032C60 @ =0x085C86B8
	b _08032C66
	.align 2, 0
_08032C60: .4byte 0x085C86B8
_08032C64:
	ldr r1, _08032CAC @ =0x085C876C
_08032C66:
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
_08032C6C:
	movs r0, #0
	lsls r0, r0, #2
	adds r1, r0, r1
	ldrb r0, [r1]
	cmp r0, #0xff
	beq _08032CA4
	ldr r0, _08032CB0 @ =gMapMovement
	ldr r3, [r0]
	adds r2, r1, #0
_08032C7E:
	ldrb r1, [r2, #1]
	lsls r0, r1, #2
	adds r0, r0, r3
	ldr r0, [r0]
	ldrb r6, [r2]
	adds r1, r6, r0
	ldrb r0, [r1]
	cmp r0, #0x78
	bhi _08032C9C
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r4, r0
	ble _08032C9C
	ldrb r4, [r1]
	adds r5, r2, #0
_08032C9C:
	adds r2, #4
	ldrb r0, [r2]
	cmp r0, #0xff
	bne _08032C7E
_08032CA4:
	adds r0, r5, #0
_08032CA6:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_08032CAC: .4byte 0x085C876C
_08032CB0: .4byte gMapMovement

	thumb_func_start sub_8032CB4
sub_8032CB4: @ 0x08032CB4
	ldr r0, _08032CDC @ =gActiveUnit
	ldr r1, [r0]
	movs r0, #0x40
	ldrh r2, [r1, #0xc]
	ands r0, r2
	cmp r0, #0
	bne _08032CE4
	ldr r0, _08032CE0 @ =gAiDecision
	ldrb r0, [r0]
	cmp r0, #1
	beq _08032CE4
	adds r1, #0x2e
	movs r0, #0xf
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #4
	beq _08032CE4
	movs r0, #1
	b _08032CE6
	.align 2, 0
_08032CDC: .4byte gActiveUnit
_08032CE0: .4byte gAiDecision
_08032CE4:
	movs r0, #0
_08032CE6:
	bx lr

	thumb_func_start sub_8032CE8
sub_8032CE8: @ 0x08032CE8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	ldr r5, _08032D00 @ =gActiveUnit
	ldr r0, [r5]
	bl GetUnitItemCount
	cmp r0, #0
	bne _08032D04
	movs r0, #0
	b _08032DE6
	.align 2, 0
_08032D00: .4byte gActiveUnit
_08032D04:
	movs r7, #0
	strh r7, [r4]
	ldr r0, [r5]
	ldrh r5, [r0, #0x1c]
	cmp r5, #0
	beq _08032DE6
	adds r6, r4, #0
	movs r0, #0
	mov r8, r0
_08032D16:
	adds r0, r5, #0
	bl GetItemAttributes
	movs r1, #5
	ands r1, r0
	cmp r1, #0
	beq _08032DC8
	adds r0, r5, #0
	bl GetItemAttributes
	movs r1, #0x80
	lsls r1, r1, #3
	ands r1, r0
	cmp r1, #0
	bne _08032DC8
	ldr r4, _08032DA8 @ =gActiveUnit
	ldr r0, [r4]
	adds r1, r5, #0
	bl CanUnitUseWeapon
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08032D52
	ldr r0, [r4]
	adds r1, r5, #0
	bl CanUnitUseStaff
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08032DC8
_08032D52:
	adds r0, r5, #0
	bl GetItemAttributes
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _08032DAC
	adds r0, r5, #0
	bl GetItemMinRange
	cmp r0, #1
	ble _08032D72
	movs r0, #2
	ldrh r1, [r6]
	orrs r0, r1
	strh r0, [r6]
_08032D72:
	adds r0, r5, #0
	bl GetItemMaxRange
	cmp r0, #1
	bne _08032D84
	movs r0, #1
	ldrh r1, [r6]
	orrs r0, r1
	strh r0, [r6]
_08032D84:
	adds r0, r5, #0
	bl GetItemUses
	movs r1, #0x64
	adds r4, r0, #0
	muls r4, r1, r4
	adds r0, r5, #0
	bl GetItemMaxUses
	adds r1, r0, #0
	adds r0, r4, #0
	bl Div
	adds r4, r0, #0
	cmp r4, #0xa
	bhi _08032DBA
	movs r0, #4
	b _08032DB4
	.align 2, 0
_08032DA8: .4byte gActiveUnit
_08032DAC:
	adds r0, r5, #0
	bl sub_8032FBC
	movs r0, #8
_08032DB4:
	ldrh r1, [r6]
	orrs r0, r1
	strh r0, [r6]
_08032DBA:
	adds r0, r5, #0
	bl GetItemMight
	lsls r0, r0, #8
	ldrh r1, [r6]
	orrs r0, r1
	strh r0, [r6]
_08032DC8:
	adds r6, #2
	movs r0, #2
	add r8, r0
	adds r7, #1
	cmp r7, #4
	bgt _08032DE6
	movs r0, #0
	strh r0, [r6]
	ldr r0, _08032DF0 @ =gActiveUnit
	ldr r0, [r0]
	adds r0, #0x1c
	add r0, r8
	ldrh r5, [r0]
	cmp r5, #0
	bne _08032D16
_08032DE6:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08032DF0: .4byte gActiveUnit

	thumb_func_start sub_8032DF4
sub_8032DF4: @ 0x08032DF4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	str r0, [sp, #4]
	str r1, [sp, #8]
	str r2, [sp, #0xc]
	str r3, [sp, #0x10]
	movs r0, #0
	ldr r1, [sp, #0x3c]
	strh r0, [r1]
	ldr r2, [sp, #0x10]
	strh r0, [r2]
	ldr r3, [sp, #0xc]
	strh r0, [r3]
	ldr r0, _08032F38 @ =gMapOther
	ldr r0, [r0]
	movs r1, #0
	bl MapFill
	movs r4, #1
_08032E22:
	adds r0, r4, #0
	bl GetUnit
	adds r5, r0, #0
	adds r4, #1
	str r4, [sp, #0x14]
	cmp r5, #0
	beq _08032F12
	ldr r0, [r5]
	cmp r0, #0
	beq _08032F12
	movs r0, #0x21
	ldrh r7, [r5, #0xc]
	ands r0, r7
	cmp r0, #0
	bne _08032F12
	ldr r0, _08032F3C @ =gActiveUnitId
	ldrb r0, [r0]
	movs r1, #0xb
	ldrsb r1, [r5, r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08032F12
	adds r0, r5, #0
	ldr r1, [sp, #4]
	ldr r2, [sp, #8]
	bl sub_8032FF4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08032F12
	adds r0, r5, #0
	bl MapFlood_08019344
	ldr r4, _08032F40 @ =gMapMovement
	ldr r1, [r4]
	ldr r2, [sp, #8]
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r3, [sp, #4]
	adds r0, r0, r3
	ldrb r0, [r0]
	cmp r0, #0xff
	beq _08032F12
	adds r0, r5, #0
	mov r1, sp
	bl sub_8033038
	adds r6, r0, #0
	mov r0, sp
	ldrh r0, [r0]
	bl GetItemMinRange
	cmp r0, #1
	ble _08032EA0
	ldr r7, [sp, #0xc]
	ldrh r7, [r7]
	adds r0, r7, r6
	ldr r1, [sp, #0xc]
	strh r0, [r1]
_08032EA0:
	mov r0, sp
	ldrh r0, [r0]
	bl GetItemMaxRange
	cmp r0, #1
	bne _08032EB6
	ldr r2, [sp, #0x10]
	ldrh r2, [r2]
	adds r0, r2, r6
	ldr r3, [sp, #0x10]
	strh r0, [r3]
_08032EB6:
	ldr r1, _08032F44 @ =gMapSize
	movs r7, #2
	ldrsh r0, [r1, r7]
	subs r2, r0, #1
	mov sl, r1
	cmp r2, #0
	blt _08032F12
	mov sb, r4
	ldr r0, _08032F38 @ =gMapOther
	mov r8, r0
_08032ECA:
	mov r1, sl
	movs r3, #0
	ldrsh r0, [r1, r3]
	subs r3, r0, #1
	subs r7, r2, #1
	str r7, [sp, #0x18]
	cmp r3, #0
	blt _08032F0C
	lsls r4, r2, #2
	mov r1, sb
	mov r5, r8
	movs r0, #0xff
	mov ip, r0
_08032EE4:
	ldr r0, [r1]
	adds r0, r4, r0
	ldr r0, [r0]
	adds r0, r0, r3
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _08032F06
	ldr r0, [r5]
	adds r0, r4, r0
	ldr r0, [r0]
	adds r0, r0, r3
	ldrb r7, [r0]
	adds r2, r7, r6
	cmp r2, #0xff
	ble _08032F04
	mov r2, ip
_08032F04:
	strb r2, [r0]
_08032F06:
	subs r3, #1
	cmp r3, #0
	bge _08032EE4
_08032F0C:
	ldr r2, [sp, #0x18]
	cmp r2, #0
	bge _08032ECA
_08032F12:
	ldr r4, [sp, #0x14]
	cmp r4, #0xbf
	ble _08032E22
	ldr r3, [sp, #0xc]
	ldrh r7, [r3]
	ldr r3, [sp, #0x10]
	ldrh r3, [r3]
	adds r0, r7, r3
	ldr r7, [sp, #0x3c]
	strh r0, [r7]
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08032F38: .4byte gMapOther
_08032F3C: .4byte gActiveUnitId
_08032F40: .4byte gMapMovement
_08032F44: .4byte gMapSize

	thumb_func_start sub_8032F48
sub_8032F48: @ 0x08032F48
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	movs r5, #1
	rsbs r5, r5, #0
	movs r4, #0
	movs r3, #0
	movs r7, #0xff
	lsls r7, r7, #8
_08032F58:
	ldrh r0, [r1]
	cmp r0, #0
	beq _08032F72
	adds r2, r0, #0
	ands r0, r6
	cmp r0, #0
	beq _08032F72
	adds r0, r7, #0
	ands r0, r2
	cmp r0, r4
	bls _08032F72
	adds r4, r0, #0
	adds r5, r3, #0
_08032F72:
	adds r1, #2
	adds r3, #1
	cmp r3, #4
	ble _08032F58
	cmp r5, #0
	ble _08032F88
	ldr r0, _08032F90 @ =gActiveUnit
	ldr r0, [r0]
	adds r1, r5, #0
	bl UnitEquipItemSlot
_08032F88:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08032F90: .4byte gActiveUnit

	thumb_func_start sub_8032F94
sub_8032F94: @ 0x08032F94
	push {lr}
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	cmn r1, r0
	beq _08032FB8
	cmp r1, r0
	blo _08032FB0
	movs r0, #1
	adds r1, r3, #0
	bl sub_8032F48
	b _08032FB8
_08032FB0:
	movs r0, #2
	adds r1, r3, #0
	bl sub_8032F48
_08032FB8:
	pop {r0}
	bx r0

	thumb_func_start sub_8032FBC
sub_8032FBC: @ 0x08032FBC
	push {lr}
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIid
	cmp r0, #0x43
	blt _08032FEC
	cmp r0, #0x47
	ble _08032FD4
	cmp r0, #0x4e
	beq _08032FE0
	b _08032FEC
_08032FD4:
	ldr r0, _08032FDC @ =gActiveUnit
	ldr r1, [r0]
	movs r0, #4
	b _08032FE6
	.align 2, 0
_08032FDC: .4byte gActiveUnit
_08032FE0:
	ldr r0, _08032FF0 @ =gActiveUnit
	ldr r1, [r0]
	movs r0, #0x10
_08032FE6:
	ldrb r2, [r1, #0xa]
	orrs r0, r2
	strb r0, [r1, #0xa]
_08032FEC:
	pop {r0}
	bx r0
	.align 2, 0
_08032FF0: .4byte gActiveUnit

	thumb_func_start sub_8032FF4
sub_8032FF4: @ 0x08032FF4
	push {r4, r5, lr}
	adds r3, r0, #0
	adds r4, r1, #0
	movs r0, #0x1a
	ldrsb r0, [r3, r0]
	ldr r1, [r3, #4]
	ldrb r1, [r1, #0x12]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r5, r0, r1
	movs r0, #0xe
	ldrsb r0, [r3, r0]
	subs r1, r4, r0
	cmp r1, #0
	bge _08033014
	subs r1, r0, r4
_08033014:
	movs r0, #0xf
	ldrsb r0, [r3, r0]
	subs r3, r2, r0
	cmp r3, #0
	blt _08033022
	adds r0, r1, r3
	b _08033026
_08033022:
	subs r0, r0, r2
	adds r0, r1, r0
_08033026:
	cmp r5, r0
	bge _0803302E
	movs r0, #0
	b _08033030
_0803302E:
	movs r0, #1
_08033030:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8033038
sub_8033038: @ 0x08033038
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	bl GetUnitEquippedWeapon
	adds r4, r0, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	strh r4, [r6]
	adds r0, r5, #0
	bl GetUnitPower
	adds r5, r0, #0
	adds r0, r4, #0
	bl GetItemMight
	adds r5, r5, r0
	adds r0, r5, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8033064
sub_8033064: @ 0x08033064
	push {r4, lr}
	ldr r4, _0803308C @ =gAiDecision
	ldrb r0, [r4]
	cmp r0, #2
	beq _08033086
	ldrb r0, [r4, #2]
	ldrb r1, [r4, #3]
	bl sub_80330C8
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _08033086
	ldrb r0, [r4, #2]
	ldrb r1, [r4, #3]
	bl sub_80331EC
_08033086:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803308C: .4byte gAiDecision

	thumb_func_start sub_8033090
sub_8033090: @ 0x08033090
	push {r4, lr}
	ldr r4, _080330C4 @ =gAiDecision
	ldrb r0, [r4, #2]
	ldrb r1, [r4, #3]
	bl sub_80330C8
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _080330BC
	ldrb r0, [r4, #2]
	ldrb r1, [r4, #3]
	bl sub_80331EC
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _080330BC
	ldrb r0, [r4, #2]
	ldrb r1, [r4, #3]
	bl sub_8033250
_080330BC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080330C4: .4byte gAiDecision

	thumb_func_start sub_80330C8
sub_80330C8: @ 0x080330C8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	mov sl, r0
	str r1, [sp, #0xc]
	movs r0, #0
	mov r8, r0
	mov sb, r0
	ldr r0, _080331A8 @ =gActiveUnit
	ldr r0, [r0]
	ldr r1, [r0]
	ldr r2, [r0, #4]
	ldr r0, [r1, #0x28]
	ldr r1, [r2, #0x24]
	orrs r0, r1
	movs r1, #0x30
	ands r0, r1
	cmp r0, #0
	beq _080331A4
	ldr r0, _080331AC @ =gMapMovement
	ldr r0, [r0]
	movs r1, #1
	rsbs r1, r1, #0
	bl MapFill
	mov r0, sl
	ldr r1, [sp, #0xc]
	movs r2, #1
	movs r3, #1
	bl MapAddInRange
	ldr r0, _080331B0 @ =gMapSize
	movs r1, #2
	ldrsh r0, [r0, r1]
	subs r1, r0, #1
	cmp r1, #0
	blt _0803319E
_08033118:
	ldr r0, _080331B0 @ =gMapSize
	movs r2, #0
	ldrsh r0, [r0, r2]
	subs r4, r0, #1
	subs r7, r1, #1
	cmp r4, #0
	blt _08033198
	lsls r5, r1, #2
_08033128:
	ldr r0, _080331AC @ =gMapMovement
	ldr r0, [r0]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _08033192
	ldr r6, _080331B4 @ =gMapUnit
	ldr r0, [r6]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r1, r0, r4
	ldrb r0, [r1]
	cmp r0, #0
	beq _08033192
	ldr r0, _080331B8 @ =gActiveUnitId
	ldrb r0, [r0]
	ldrb r1, [r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08033192
	ldr r0, [r6]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	bl GetUnit
	adds r2, r0, #0
	ldr r0, [r2]
	ldr r1, [r2, #4]
	ldr r0, [r0, #0x28]
	ldr r1, [r1, #0x24]
	orrs r0, r1
	movs r1, #0x30
	ands r0, r1
	cmp r0, #0
	bne _08033192
	movs r0, #8
	ldrsb r0, [r2, r0]
	cmp r8, r0
	bge _08033192
	ldrb r2, [r2, #8]
	mov r8, r2
	ldr r0, [r6]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	mov sb, r0
_08033192:
	subs r4, #1
	cmp r4, #0
	bge _08033128
_08033198:
	adds r1, r7, #0
	cmp r1, #0
	bge _08033118
_0803319E:
	mov r0, r8
	cmp r0, #0
	bne _080331BC
_080331A4:
	movs r0, #0
	b _080331DA
	.align 2, 0
_080331A8: .4byte gActiveUnit
_080331AC: .4byte gMapMovement
_080331B0: .4byte gMapSize
_080331B4: .4byte gMapUnit
_080331B8: .4byte gActiveUnitId
_080331BC:
	mov r1, sl
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	ldr r2, [sp, #0xc]
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	movs r2, #0
	str r2, [sp]
	str r2, [sp, #4]
	str r2, [sp, #8]
	movs r2, #7
	mov r3, sb
	bl AiSetDecision
	movs r0, #1
_080331DA:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80331EC
sub_80331EC: @ 0x080331EC
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	adds r7, r1, #0
	ldr r0, _08033240 @ =gActiveUnit
	ldr r0, [r0]
	ldr r1, [r0]
	ldr r2, [r0, #4]
	ldr r0, [r1, #0x28]
	ldr r1, [r2, #0x24]
	orrs r0, r1
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	beq _0803323C
	ldr r4, _08033244 @ =gMapMovement
	ldr r0, [r4]
	movs r5, #1
	rsbs r5, r5, #0
	adds r1, r5, #0
	bl MapFill
	ldr r1, [r4]
	lsls r0, r7, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r6
	movs r1, #0
	strb r1, [r0]
	adds r0, r6, #0
	adds r1, r7, #0
	movs r2, #1
	movs r3, #0x78
	bl MapAddInRange
	bl sub_8031F24
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, r5
	bne _08033248
_0803323C:
	movs r0, #0
	b _0803324A
	.align 2, 0
_08033240: .4byte gActiveUnit
_08033244: .4byte gMapMovement
_08033248:
	movs r0, #1
_0803324A:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8033250
sub_8033250: @ 0x08033250
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	str r0, [sp, #0xc]
	mov sl, r1
	ldr r0, _08033274 @ =gActiveUnit
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	cmp r7, #0
	bne _080332A8
	b _0803335E
	.align 2, 0
_08033274: .4byte gActiveUnit
_08033278:
	ldr r0, _080332A4 @ =gActiveUnit
	ldr r0, [r0]
	bl GetUnitEquippedWeaponSlot
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r1, sb
	asrs r2, r1, #0x10
	mov r3, r8
	asrs r1, r3, #0x10
	ldrb r3, [r5, #0xb]
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	str r0, [sp, #8]
	adds r0, r2, #0
	movs r2, #1
	bl AiSetDecision
	movs r0, #1
	b _08033360
	.align 2, 0
_080332A4: .4byte gActiveUnit
_080332A8:
	ldr r0, _08033370 @ =gMapMovement
	ldr r0, [r0]
	movs r1, #0
	bl MapFill
	ldr r0, [sp, #0xc]
	lsls r0, r0, #0x10
	mov sb, r0
	asrs r6, r0, #0x10
	mov r1, sl
	lsls r1, r1, #0x10
	mov r8, r1
	asrs r5, r1, #0x10
	adds r0, r7, #0
	bl GetItemMinRange
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r0, r7, #0
	bl GetItemMaxRange
	adds r3, r0, #0
	lsls r3, r3, #0x10
	asrs r3, r3, #0x10
	adds r0, r6, #0
	adds r1, r5, #0
	adds r2, r4, #0
	bl MapIncInBoundedRange
	ldr r0, _08033374 @ =gMapSize
	movs r3, #2
	ldrsh r0, [r0, r3]
	subs r7, r0, #1
	cmp r7, #0
	blt _0803335E
_080332F0:
	ldr r0, _08033374 @ =gMapSize
	movs r1, #0
	ldrsh r0, [r0, r1]
	subs r4, r0, #1
	cmp r4, #0
	blt _08033358
	lsls r6, r7, #2
_080332FE:
	ldr r0, _08033370 @ =gMapMovement
	ldr r0, [r0]
	adds r0, r6, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08033352
	ldr r5, _08033378 @ =gMapUnit
	ldr r0, [r5]
	adds r0, r6, r0
	ldr r0, [r0]
	adds r1, r0, r4
	ldrb r0, [r1]
	cmp r0, #0
	beq _08033352
	ldr r0, _0803337C @ =gActiveUnitId
	ldrb r0, [r0]
	ldrb r1, [r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _08033352
	ldr r0, [r5]
	adds r0, r6, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	bl GetUnit
	adds r5, r0, #0
	ldr r0, [sp, #0xc]
	mov r1, sl
	adds r2, r5, #0
	bl sub_80325BC
	cmp r0, #0
	bne _08033278
_08033352:
	subs r4, #1
	cmp r4, #0
	bge _080332FE
_08033358:
	subs r7, #1
	cmp r7, #0
	bge _080332F0
_0803335E:
	movs r0, #0
_08033360:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08033370: .4byte gMapMovement
_08033374: .4byte gMapSize
_08033378: .4byte gMapUnit
_0803337C: .4byte gActiveUnitId

	thumb_func_start sub_8033380
sub_8033380: @ 0x08033380
	ldr r2, _080333A4 @ =gMapUnit
	ldr r2, [r2]
	lsls r1, r1, #2
	adds r1, r1, r2
	ldr r1, [r1]
	adds r1, r1, r0
	ldrb r1, [r1]
	cmp r1, #0
	beq _080333A0
	ldr r0, _080333A8 @ =gActiveUnitId
	ldrb r0, [r0]
	eors r0, r1
	movs r1, #0x80
	ands r0, r1
	cmp r0, #0
	bne _080333AC
_080333A0:
	movs r0, #0
	b _080333AE
	.align 2, 0
_080333A4: .4byte gMapUnit
_080333A8: .4byte gActiveUnitId
_080333AC:
	movs r0, #1
_080333AE:
	bx lr

	thumb_func_start sub_80333B0
sub_80333B0: @ 0x080333B0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	movs r7, #0
	ldr r4, _08033448 @ =gActiveUnit
	ldr r0, [r4]
	movs r1, #0x1a
	ldrsb r1, [r0, r1]
	ldr r2, [r0, #4]
	ldrb r2, [r2, #0x12]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	adds r1, r1, r2
	mov r2, r8
	ldrb r2, [r2]
	muls r1, r2, r1
	lsls r1, r1, #0x10
	lsrs r5, r1, #0x14
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	mov r3, r8
	ldrb r0, [r3, #1]
	cmp r0, #0
	beq _08033454
	cmp r2, #0
	beq _08033454
	ldr r0, [r4]
	adds r1, r5, #0
	bl sub_8031C7C
	ldr r0, _0803344C @ =gMapSize
	movs r1, #2
	ldrsh r0, [r0, r1]
	subs r5, r0, #1
	cmp r5, #0
	blt _080334CA
_080333FE:
	ldr r0, _0803344C @ =gMapSize
	movs r2, #0
	ldrsh r0, [r0, r2]
	subs r4, r0, #1
	subs r6, r5, #1
	cmp r4, #0
	blt _0803343E
_0803340C:
	ldr r0, _08033450 @ =gMapRange
	ldr r1, [r0]
	lsls r0, r5, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08033438
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_8033380
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08033438
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_08033438:
	subs r4, #1
	cmp r4, #0
	bge _0803340C
_0803343E:
	adds r5, r6, #0
	cmp r5, #0
	bge _080333FE
	b _080334CA
	.align 2, 0
_08033448: .4byte gActiveUnit
_0803344C: .4byte gMapSize
_08033450: .4byte gMapRange
_08033454:
	ldr r4, _080334E4 @ =gActiveUnit
	ldr r0, [r4]
	ldr r0, [r0, #4]
	ldr r0, [r0, #0x34]
	bl SetWorkingMovTable
	ldr r0, _080334E8 @ =gMapRange
	ldr r0, [r0]
	bl SetWorkingMap
	ldr r1, [r4]
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	ldrb r1, [r1, #0xf]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r2, r5, #0
	movs r3, #0
	bl BeginMapFlood
	ldr r0, _080334EC @ =gMapSize
	movs r3, #2
	ldrsh r0, [r0, r3]
	subs r5, r0, #1
	cmp r5, #0
	blt _080334CA
_08033488:
	ldr r0, _080334EC @ =gMapSize
	movs r1, #0
	ldrsh r0, [r0, r1]
	subs r4, r0, #1
	subs r6, r5, #1
	cmp r4, #0
	blt _080334C4
_08033496:
	ldr r0, _080334E8 @ =gMapRange
	ldr r1, [r0]
	lsls r0, r5, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _080334BE
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_8033380
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _080334BE
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_080334BE:
	subs r4, #1
	cmp r4, #0
	bge _08033496
_080334C4:
	adds r5, r6, #0
	cmp r5, #0
	bge _08033488
_080334CA:
	ldr r0, _080334F0 @ =0x020395F8
	adds r0, #0x86
	mov r2, r8
	ldrb r2, [r2, #2]
	adds r0, r2, r0
	strb r7, [r0]
	movs r0, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080334E4: .4byte gActiveUnit
_080334E8: .4byte gMapRange
_080334EC: .4byte gMapSize
_080334F0: .4byte 0x020395F8

	thumb_func_start sub_80334F4
sub_80334F4: @ 0x080334F4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r4, r0, #0
	ldr r5, _08033590 @ =gActiveUnit
	ldr r0, [r5]
	movs r1, #0x1a
	ldrsb r1, [r0, r1]
	ldr r2, [r0, #4]
	ldrb r2, [r2, #0x12]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	adds r1, r1, r2
	ldrb r2, [r4, #4]
	muls r1, r2, r1
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x14
	str r1, [sp, #4]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov sl, r0
	ldr r2, [r5]
	adds r1, r2, #0
	adds r1, #0x40
	movs r0, #0xfe
	lsls r0, r0, #5
	ldrh r1, [r1]
	ands r0, r1
	lsrs r0, r0, #8
	ldr r1, [r4]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrb r1, [r0]
	mov r8, r1
	ldrb r0, [r0, #1]
	mov sb, r0
	movs r6, #0xe
	ldrsb r6, [r2, r6]
	movs r7, #0xf
	ldrsb r7, [r2, r7]
	strb r1, [r2, #0xe]
	ldr r0, [r5]
	mov r2, sb
	strb r2, [r0, #0xf]
	ldrb r0, [r4, #5]
	cmp r0, #0
	beq _08033598
	mov r0, sl
	cmp r0, #0
	beq _08033598
	ldr r0, [r5]
	ldr r1, [sp, #4]
	mov r2, sl
	bl sub_8031C7C
	ldr r0, _08033594 @ =gMapRange
	ldr r1, [r0]
	mov r2, sb
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r0, [r0]
	add r0, r8
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _080335D2
_08033584:
	ldr r0, [r5]
	strb r6, [r0, #0xe]
	ldr r0, [r5]
	strb r7, [r0, #0xf]
	b _08033684
	.align 2, 0
_08033590: .4byte gActiveUnit
_08033594: .4byte gMapRange
_08033598:
	ldr r5, _08033634 @ =gActiveUnit
	ldr r0, [r5]
	ldr r0, [r0, #4]
	ldr r0, [r0, #0x34]
	bl SetWorkingMovTable
	ldr r4, _08033638 @ =gMapRange
	ldr r0, [r4]
	bl SetWorkingMap
	ldr r1, [r5]
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	ldrb r1, [r1, #0xf]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	ldr r2, [sp, #4]
	movs r3, #0
	bl BeginMapFlood
	ldr r1, [r4]
	mov r2, sb
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r0, [r0]
	add r0, r8
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _08033584
_080335D2:
	ldr r1, _08033634 @ =gActiveUnit
	ldr r0, [r1]
	strb r6, [r0, #0xe]
	ldr r0, [r1]
	strb r7, [r0, #0xf]
	ldr r0, [r1]
	bl MapFlood_08019344
	ldr r1, _0803363C @ =gMapSize
	movs r2, #2
	ldrsh r0, [r1, r2]
	subs r4, r0, #1
	cmp r4, #0
	blt _08033676
_080335EE:
	ldr r1, _0803363C @ =gMapSize
	movs r2, #0
	ldrsh r0, [r1, r2]
	subs r2, r0, #1
	subs r0, r4, #1
	mov ip, r0
	cmp r2, #0
	blt _08033670
	ldr r7, _08033640 @ =gMapMovement
	ldr r6, _08033638 @ =gMapRange
	movs r1, #1
	rsbs r1, r1, #0
	adds r5, r1, #0
_08033608:
	mov r0, sl
	cmp r0, #0
	beq _08033644
	ldr r0, [r7]
	lsls r1, r4, #2
	adds r0, r1, r0
	ldr r0, [r0]
	adds r3, r0, r2
	movs r0, #0
	ldrsb r0, [r3, r0]
	cmp r0, #0x77
	bgt _08033668
	ldr r0, [r6]
	adds r0, r1, r0
	ldr r0, [r0]
	adds r0, r0, r2
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0803366A
	b _08033668
	.align 2, 0
_08033634: .4byte gActiveUnit
_08033638: .4byte gMapRange
_0803363C: .4byte gMapSize
_08033640: .4byte gMapMovement
_08033644:
	ldr r0, [r7]
	lsls r1, r4, #2
	adds r0, r1, r0
	ldr r0, [r0]
	adds r3, r0, r2
	movs r0, #0
	ldrsb r0, [r3, r0]
	cmp r0, #0x77
	bgt _08033668
	ldr r0, [r6]
	adds r0, r1, r0
	ldr r0, [r0]
	adds r0, r0, r2
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x77
	ble _0803366A
_08033668:
	strb r5, [r3]
_0803366A:
	subs r2, #1
	cmp r2, #0
	bge _08033608
_08033670:
	mov r4, ip
	cmp r4, #0
	bge _080335EE
_08033676:
	ldr r0, _080336A8 @ =sub_8031044
	bl AiTryDoOffensiveAction
	ldr r0, _080336AC @ =gAiDecision
	ldrb r0, [r0, #0xa]
	cmp r0, #1
	beq _08033694
_08033684:
	mov r0, r8
	mov r1, sb
	movs r2, #1
	str r2, [sp]
	movs r2, #0
	movs r3, #0xff
	bl sub_803046C
_08033694:
	movs r0, #1
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080336A8: .4byte sub_8031044
_080336AC: .4byte gAiDecision

	thumb_func_start sub_80336B0
sub_80336B0: @ 0x080336B0
	ldr r1, _080336C4 @ =0x020395F8
	ldr r0, _080336C8 @ =gActiveUnit
	ldr r0, [r0]
	adds r0, #0x46
	ldrb r0, [r0]
	adds r1, #0x86
	strb r0, [r1]
	movs r0, #0
	bx lr
	.align 2, 0
_080336C4: .4byte 0x020395F8
_080336C8: .4byte gActiveUnit

	thumb_func_start sub_80336CC
sub_80336CC: @ 0x080336CC
	push {r4, r5, lr}
	bl GetActiveFactionAlliance
	adds r4, r0, #1
	adds r0, #0x80
	cmp r4, r0
	bge _080336E8
	adds r5, r0, #0
_080336DC:
	adds r0, r4, #0
	bl GetUnit
	adds r4, #1
	cmp r4, r5
	blt _080336DC
_080336E8:
	ldr r0, _080336F8 @ =0x020395F8
	adds r0, #0x79
	movs r1, #0
	strb r1, [r0]
	movs r0, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080336F8: .4byte 0x020395F8

	thumb_func_start sub_80336FC
sub_80336FC: @ 0x080336FC
	push {r4, r5, lr}
	bl GetActiveFactionAlliance
	adds r4, r0, #1
	adds r0, #0x80
	cmp r4, r0
	bge _08033718
	adds r5, r0, #0
_0803370C:
	adds r0, r4, #0
	bl GetUnit
	adds r4, #1
	cmp r4, r5
	blt _0803370C
_08033718:
	ldr r0, _08033728 @ =0x020395F8
	adds r0, #0x79
	movs r1, #0
	strb r1, [r0]
	movs r0, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08033728: .4byte 0x020395F8

	thumb_func_start sub_803372C
sub_803372C: @ 0x0803372C
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	ldr r7, _08033760 @ =gActiveUnit
	ldr r2, [r7]
	adds r1, r2, #0
	adds r1, #0x40
	movs r0, #0xfe
	lsls r0, r0, #5
	ldrh r1, [r1]
	ands r0, r1
	lsrs r3, r0, #8
	adds r5, r2, #0
	adds r5, #0x46
	ldrb r4, [r5]
	ldr r0, _08033764 @ =0x085C8878
	ldr r1, [r0]
	cmp r1, #0
	beq _0803375A
	lsls r0, r3, #2
	adds r0, r0, r1
	ldr r2, [r0]
	cmp r2, #0
	bne _08033768
_0803375A:
	movs r0, #0
	b _080337AA
	.align 2, 0
_08033760: .4byte gActiveUnit
_08033764: .4byte 0x085C8878
_08033768:
	lsls r0, r4, #2
	adds r3, r2, r0
	movs r0, #0
	ldrsh r1, [r3, r0]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0803377E
	movs r4, #0
	strb r4, [r5]
	adds r3, r2, #0
_0803377E:
	ldrh r0, [r3]
	strh r0, [r6]
	ldrh r0, [r3, #2]
	strh r0, [r6, #2]
	movs r1, #2
	ldrsh r0, [r3, r1]
	ldr r1, _080337B0 @ =gMapMovement
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r2, #0
	ldrsh r1, [r3, r2]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #0xff
	beq _080337A8
	adds r4, #1
	ldr r0, [r7]
	adds r0, #0x46
	strb r4, [r0]
_080337A8:
	movs r0, #1
_080337AA:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080337B0: .4byte gMapMovement

	thumb_func_start sub_80337B4
sub_80337B4: @ 0x080337B4
	push {r4, lr}
	sub sp, #8
	ldr r4, _080337E4 @ =gActiveUnit
	ldr r0, [r4]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	cmp r1, #0
	beq _080337EC
	ldr r0, [r4]
	bl sub_802FFC0
	bl sub_802FD00
	adds r1, r0, #0
	cmp r1, #0
	beq _080337F2
	ldr r0, _080337E8 @ =0x020395F8
	adds r0, #0x86
	strb r1, [r0]
	movs r0, #0
	b _0803381C
	.align 2, 0
_080337E4: .4byte gActiveUnit
_080337E8: .4byte 0x020395F8
_080337EC:
	ldr r0, [r4]
	bl MapFlood_08019344
_080337F2:
	add r4, sp, #4
	adds r0, r4, #0
	bl sub_803372C
	lsls r0, r0, #0x18
	asrs r2, r0, #0x18
	cmp r2, #1
	beq _08033806
	movs r0, #0
	b _0803381C
_08033806:
	add r0, sp, #4
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r3, #2
	ldrsh r1, [r4, r3]
	str r2, [sp]
	movs r2, #0
	movs r3, #0xff
	bl sub_803046C
	movs r0, #1
_0803381C:
	add sp, #8
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_8033824
sub_8033824: @ 0x08033824
	adds r1, r0, #0
	ldr r0, _08033850 @ =gActiveUnit
	ldr r0, [r0]
	ldrb r2, [r0, #0xe]
	ldrb r0, [r0, #0xf]
	ldrb r3, [r1]
	cmp r3, r2
	bhi _08033858
	ldrb r3, [r1, #2]
	cmp r3, r2
	blo _08033858
	ldrb r2, [r1, #1]
	cmp r2, r0
	bhi _08033858
	ldrb r1, [r1, #3]
	cmp r1, r0
	blo _08033858
	ldr r0, _08033854 @ =0x020395F8
	adds r0, #0x86
	movs r1, #1
	b _0803385E
	.align 2, 0
_08033850: .4byte gActiveUnit
_08033854: .4byte 0x020395F8
_08033858:
	ldr r0, _08033864 @ =0x020395F8
	adds r0, #0x86
	movs r1, #0
_0803385E:
	strb r1, [r0]
	movs r0, #0
	bx lr
	.align 2, 0
_08033864: .4byte 0x020395F8

	thumb_func_start AiFunc_DecideTalk
AiFunc_DecideTalk: @ 0x08033868
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrb r0, [r4]
	bl GetUnitByPid
	ldrb r5, [r0, #0xb]
	ldrb r0, [r4, #1]
	bl GetUnitByPid
	ldrb r3, [r0, #0xb]
	movs r0, #0xff
	str r0, [sp]
	movs r0, #8
	movs r1, #0
	adds r2, r5, #0
	bl AiUpdateDecision
	movs r0, #1
	add sp, #4
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8033898
sub_8033898: @ 0x08033898
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	movs r5, #0
	ldr r7, _080338D0 @ =gActiveUnitId
	ldrb r0, [r7]
	mov r8, r0
	ldr r4, _080338D4 @ =gActiveUnit
	ldr r6, [r4]
	adds r0, r6, #0
	bl GetUnitLeaderPid
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	beq _08033942
	bl GetUnitByPid
	adds r1, r0, #0
	str r1, [r4]
	cmp r1, #0
	bne _080338DC
	str r6, [r4]
	ldr r0, _080338D8 @ =0x020395F8
	adds r0, #0x87
	movs r1, #1
	strb r1, [r0]
	b _08033942
	.align 2, 0
_080338D0: .4byte gActiveUnitId
_080338D4: .4byte gActiveUnit
_080338D8: .4byte 0x020395F8
_080338DC:
	ldrb r0, [r1, #0xb]
	strb r0, [r7]
	adds r0, r1, #0
	adds r0, #0x42
	ldrb r4, [r0]
	adds r0, #1
	ldrb r7, [r0]
_080338EA:
	bl sub_8030CE8
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _08033900
	adds r5, #1
	cmp r5, #0xff
	ble _080338EA
	bl sub_8030D3C
_08033900:
	ldr r1, _08033918 @ =gAiDecision
	ldrb r2, [r1, #0xa]
	cmp r2, #1
	bne _08033920
	ldrb r0, [r1]
	cmp r0, #1
	bne _08033920
	ldr r0, _0803391C @ =0x020395F8
	ldrb r1, [r1, #6]
	adds r0, #0x86
	b _08033926
	.align 2, 0
_08033918: .4byte gAiDecision
_0803391C: .4byte 0x020395F8
_08033920:
	ldr r0, _08033950 @ =0x020395F8
	adds r0, #0x86
	movs r1, #0
_08033926:
	strb r1, [r0]
	bl sub_802EA10
	ldr r1, _08033954 @ =gActiveUnit
	ldr r0, [r1]
	adds r0, #0x42
	strb r4, [r0]
	ldr r0, [r1]
	adds r0, #0x43
	strb r7, [r0]
	ldr r0, _08033958 @ =gActiveUnitId
	mov r2, r8
	strb r2, [r0]
	str r6, [r1]
_08033942:
	movs r0, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08033950: .4byte 0x020395F8
_08033954: .4byte gActiveUnit
_08033958: .4byte gActiveUnitId

	thumb_func_start sub_803395C
sub_803395C: @ 0x0803395C
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2]
	ldr r0, _08033988 @ =0x02039694
	ldrb r1, [r1, #4]
	ldrb r0, [r0]
	cmp r1, r0
	bne _08033990
	ldr r0, _0803398C @ =gActiveUnit
	ldr r0, [r0]
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #0xb
	ldrsb r1, [r2, r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08033990
	movs r0, #1
	b _08033992
	.align 2, 0
_08033988: .4byte 0x02039694
_0803398C: .4byte gActiveUnit
_08033990:
	movs r0, #0
_08033992:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8033998
sub_8033998: @ 0x08033998
	push {lr}
	ldr r2, _080339B8 @ =0x02039694
	ldrb r1, [r0]
	strb r1, [r2]
	ldrb r0, [r0]
	bl sub_80307D4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _080339C0
	ldr r0, _080339BC @ =0x020395F8
	adds r0, #0x87
	movs r1, #1
	strb r1, [r0]
	b _080339E6
	.align 2, 0
_080339B8: .4byte 0x02039694
_080339BC: .4byte 0x020395F8
_080339C0:
	ldr r0, _080339EC @ =sub_803395C
	bl sub_8031900
	ldr r0, _080339F0 @ =0x020395F8
	adds r1, r0, #0
	adds r1, #0x86
	movs r0, #0
	strb r0, [r1]
	ldr r0, _080339F4 @ =gAiDecision
	ldrb r2, [r0, #0xa]
	cmp r2, #1
	bne _080339E2
	ldrb r2, [r0]
	cmp r2, #1
	bne _080339E2
	ldrb r0, [r0, #6]
	strb r0, [r1]
_080339E2:
	bl sub_802EA10
_080339E6:
	movs r0, #0
	pop {r1}
	bx r1
	.align 2, 0
_080339EC: .4byte sub_803395C
_080339F0: .4byte 0x020395F8
_080339F4: .4byte gAiDecision

	thumb_func_start sub_80339F8
sub_80339F8: @ 0x080339F8
	push {lr}
	movs r1, #0xb
	ldrsb r1, [r0, r1]
	ldr r0, _08033A20 @ =0x020395F8
	adds r0, #0x86
	ldrb r0, [r0]
	cmp r1, r0
	bne _08033A28
	ldr r0, _08033A24 @ =gActiveUnit
	ldr r0, [r0]
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08033A28
	movs r0, #1
	b _08033A2A
	.align 2, 0
_08033A20: .4byte 0x020395F8
_08033A24: .4byte gActiveUnit
_08033A28:
	movs r0, #0
_08033A2A:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8033A30
sub_8033A30: @ 0x08033A30
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	ldr r0, _08033A90 @ =0x020395F8
	adds r0, #0x86
	ldrb r0, [r0]
	bl GetUnit
	movs r2, #0xe
	ldrsb r2, [r0, r2]
	ldr r1, _08033A94 @ =gActiveUnit
	ldr r1, [r1]
	movs r3, #0xe
	ldrsb r3, [r1, r3]
	subs r7, r2, r3
	ldrb r0, [r0, #0xf]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r2, #0xf
	ldrsb r2, [r1, r2]
	subs r0, r0, r2
	mov r8, r0
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	subs r5, r0, r3
	movs r0, #0xf
	ldrsb r0, [r4, r0]
	subs r6, r0, r2
	movs r0, #0xb
	ldrsb r0, [r1, r0]
	movs r1, #0xb
	ldrsb r1, [r4, r1]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08033A98
	adds r0, r7, #0
	muls r0, r5, r0
	cmp r0, #0
	blt _08033A98
	mov r0, r8
	muls r0, r6, r0
	cmp r0, #0
	blt _08033A98
	movs r0, #1
	b _08033A9A
	.align 2, 0
_08033A90: .4byte 0x020395F8
_08033A94: .4byte gActiveUnit
_08033A98:
	movs r0, #0
_08033A9A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8033AA4
sub_8033AA4: @ 0x08033AA4
	push {r4, r5, lr}
	sub sp, #4
	ldr r0, _08033AF4 @ =0x020395F8
	adds r1, r0, #0
	adds r1, #0x86
	ldrb r0, [r1]
	cmp r0, #0
	beq _08033AEA
	ldrb r0, [r1]
	bl GetUnit
	adds r4, r0, #0
	ldr r0, _08033AF8 @ =sub_80339F8
	bl sub_8031900
	ldr r5, _08033AFC @ =gAiDecision
	ldrb r0, [r5, #0xa]
	cmp r0, #1
	beq _08033AEA
	ldr r0, _08033B00 @ =sub_8033A30
	bl sub_8031900
	ldrb r5, [r5, #0xa]
	cmp r5, #1
	beq _08033AEA
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	movs r1, #0xf
	ldrsb r1, [r4, r1]
	movs r2, #1
	str r2, [sp]
	movs r2, #0
	movs r3, #0xff
	bl sub_803046C
_08033AEA:
	movs r0, #1
	add sp, #4
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08033AF4: .4byte 0x020395F8
_08033AF8: .4byte sub_80339F8
_08033AFC: .4byte gAiDecision
_08033B00: .4byte sub_8033A30

	thumb_func_start sub_8033B04
sub_8033B04: @ 0x08033B04
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0x64
	bl RandNext
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r3, _08033B38 @ =0x020395F8
	ldrb r2, [r4, #1]
	adds r1, r3, #0
	adds r1, #0x7c
	strb r2, [r1]
	ldrb r4, [r4]
	cmp r0, r4
	bhi _08033B40
	ldr r4, _08033B3C @ =sub_8031044
	adds r0, r4, #0
	bl sub_8033C04
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08033B48
	adds r0, r4, #0
	bl sub_8031900
	b _08033B48
	.align 2, 0
_08033B38: .4byte 0x020395F8
_08033B3C: .4byte sub_8031044
_08033B40:
	adds r1, r3, #0
	adds r1, #0x79
	movs r0, #4
	strb r0, [r1]
_08033B48:
	movs r0, #1
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_8033B50
sub_8033B50: @ 0x08033B50
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #0x64
	bl RandNext
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	ldrb r0, [r5]
	cmp r4, r0
	bhi _08033B88
	bl sub_8034AC8
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08033B90
	movs r0, #0x64
	bl RandNext
	ldrb r5, [r5, #1]
	cmp r4, r5
	bhi _08033B90
	ldr r0, _08033B84 @ =sub_8031044
	bl sub_8031900
	b _08033B90
	.align 2, 0
_08033B84: .4byte sub_8031044
_08033B88:
	ldr r0, _08033B98 @ =0x020395F8
	adds r0, #0x79
	movs r1, #4
	strb r1, [r0]
_08033B90:
	movs r0, #1
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08033B98: .4byte 0x020395F8

	thumb_func_start sub_8033B9C
sub_8033B9C: @ 0x08033B9C
	push {r4, r5, r6, lr}
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	movs r5, #0
	ldr r0, _08033BB8 @ =gActiveUnit
	ldr r0, [r0]
	adds r1, r4, #0
	bl CanUnitUseStaff
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08033BC0
	b _08033BF4
	.align 2, 0
_08033BB8: .4byte gActiveUnit
_08033BBC:
	adds r0, r5, #0
	b _08033BF8
_08033BC0:
	adds r0, r4, #0
	bl GetItemIid
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	ldr r4, _08033C00 @ =0x0810DB34
	ldrh r0, [r4]
	cmp r0, #0
	beq _08033BF4
	movs r3, #0
	adds r2, r4, #4
	adds r1, r4, #0
_08033BD8:
	ldrh r0, [r1]
	cmp r6, r0
	bne _08033BE4
	ldr r0, [r2]
	cmp r0, #0
	bne _08033BBC
_08033BE4:
	adds r3, #8
	adds r2, #8
	adds r1, #8
	adds r5, #1
	adds r0, r3, r4
	ldrh r0, [r0]
	cmp r0, #0
	bne _08033BD8
_08033BF4:
	movs r0, #1
	rsbs r0, r0, #0
_08033BF8:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_08033C00: .4byte 0x0810DB34

	thumb_func_start sub_8033C04
sub_8033C04: @ 0x08033C04
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r6, #0
	movs r5, #0
	ldr r0, _08033C80 @ =gActiveUnit
	ldr r0, [r0]
	ldrh r4, [r0, #0x1c]
	cmp r4, #0
	beq _08033C6C
	ldr r0, _08033C84 @ =0x0810DB38
	mov r8, r0
_08033C1E:
	adds r0, r4, #0
	bl GetItemAttributes
	adds r0, r4, #0
	bl GetItemRequiredExp
	cmp r0, r6
	blt _08033C56
	adds r0, r4, #0
	bl sub_8033B9C
	adds r1, r0, #0
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _08033C56
	lsls r0, r1, #3
	add r0, r8
	ldr r2, [r0]
	adds r0, r5, #0
	adds r1, r7, #0
	bl _call_via_r2
	adds r0, r4, #0
	bl GetItemRequiredExp
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
_08033C56:
	adds r5, #1
	cmp r5, #4
	bgt _08033C6C
	ldr r0, _08033C80 @ =gActiveUnit
	ldr r0, [r0]
	lsls r1, r5, #1
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r4, [r0]
	cmp r4, #0
	bne _08033C1E
_08033C6C:
	ldr r0, _08033C88 @ =gAiDecision
	ldrb r0, [r0, #0xa]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08033C80: .4byte gActiveUnit
_08033C84: .4byte 0x0810DB38
_08033C88: .4byte gAiDecision

	thumb_func_start sub_8033C8C
sub_8033C8C: @ 0x08033C8C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	str r0, [sp]
	str r1, [sp, #4]
	mov r8, r2
	movs r0, #0
	mov sl, r0
	ldr r2, _08033D30 @ =0x085C98D0
	movs r1, #3
	mov sb, r1
_08033CA8:
	ldr r0, [r2]
	ldr r1, [sp]
	adds r5, r1, r0
	ldr r0, [r2, #4]
	ldr r1, [sp, #4]
	adds r7, r1, r0
	ldr r0, _08033D34 @ =gMapMovement
	ldr r0, [r0]
	lsls r6, r7, #2
	adds r0, r6, r0
	ldr r0, [r0]
	adds r0, r0, r5
	ldrb r0, [r0]
	cmp r0, #0x77
	bhi _08033D16
	ldr r0, _08033D38 @ =gMapUnit
	ldr r0, [r0]
	adds r0, r6, r0
	ldr r0, [r0]
	adds r0, r0, r5
	ldrb r1, [r0]
	cmp r1, #0
	beq _08033CDE
	ldr r0, _08033D3C @ =gActiveUnitId
	ldrb r0, [r0]
	cmp r1, r0
	bne _08033D16
_08033CDE:
	adds r0, r5, #0
	adds r1, r7, #0
	str r2, [sp, #8]
	bl sub_803260C
	adds r4, r0, #0
	adds r0, r5, #0
	adds r1, r7, #0
	bl sub_803264C
	adds r4, r4, r0
	ldr r0, _08033D40 @ =gMapOther
	ldr r0, [r0]
	adds r0, r6, r0
	ldr r0, [r0]
	adds r0, r0, r5
	ldrb r0, [r0]
	lsrs r0, r0, #3
	subs r4, r4, r0
	ldr r0, _08033D44 @ =0x7FFFFFFF
	adds r4, r4, r0
	ldr r2, [sp, #8]
	cmp sl, r4
	bhs _08033D16
	mov r1, r8
	strh r5, [r1]
	strh r7, [r1, #2]
	mov sl, r4
_08033D16:
	adds r2, #8
	movs r0, #1
	rsbs r0, r0, #0
	add sb, r0
	mov r1, sb
	cmp r1, #0
	bge _08033CA8
	mov r0, sl
	cmp r0, #0
	bne _08033D48
	movs r0, #0
	b _08033D4A
	.align 2, 0
_08033D30: .4byte 0x085C98D0
_08033D34: .4byte gMapMovement
_08033D38: .4byte gMapUnit
_08033D3C: .4byte gActiveUnitId
_08033D40: .4byte gMapOther
_08033D44: .4byte 0x7FFFFFFF
_08033D48:
	movs r0, #1
_08033D4A:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8033D5C
sub_8033D5C: @ 0x08033D5C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x24
	str r0, [sp, #0x10]
	mov sb, r1
	movs r0, #0x64
	mov sl, r0
	movs r1, #1
	rsbs r1, r1, #0
	str r1, [sp, #0x18]
	str r1, [sp, #0x14]
	movs r2, #0
	str r2, [sp, #0x1c]
	ldr r0, _08033EAC @ =gActiveUnit
	ldr r0, [r0]
	bl sub_8030CBC
	bl MapMovementMarkFloodEdges
	ldr r0, _08033EB0 @ =0x020395F8
	adds r1, r0, #0
	adds r1, #0x7c
	ldrb r0, [r1]
	cmp r0, #0
	beq _08033D98
	adds r1, r0, #0
	mov sl, r1
_08033D98:
	ldr r0, _08033EB4 @ =gMapSize
	movs r4, #2
	ldrsh r0, [r0, r4]
	subs r7, r0, #1
	cmp r7, #0
	blt _08033E78
_08033DA4:
	ldr r0, _08033EB4 @ =gMapSize
	movs r1, #0
	ldrsh r0, [r0, r1]
	subs r6, r0, #1
	subs r2, r7, #1
	str r2, [sp, #0x20]
	cmp r6, #0
	blt _08033E72
	lsls r4, r7, #2
	mov r8, r4
_08033DB8:
	ldr r0, _08033EB8 @ =gMapMovement
	ldr r0, [r0]
	add r0, r8
	ldr r0, [r0]
	adds r0, r0, r6
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _08033E6C
	ldr r0, _08033EBC @ =gMapUnit
	ldr r0, [r0]
	add r0, r8
	ldr r0, [r0]
	adds r2, r0, r6
	ldrb r1, [r2]
	cmp r1, #0
	beq _08033E6C
	ldr r0, _08033EC0 @ =gActiveUnitId
	ldrb r0, [r0]
	cmp r1, r0
	beq _08033E6C
	adds r0, r1, #0
	bl GetUnit
	adds r5, r0, #0
	movs r0, #4
	ldr r1, _08033EC4 @ =0x02039673
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _08033E08
	mov r2, sb
	cmp r2, #0
	beq _08033E08
	adds r0, r5, #0
	bl _call_via_r9
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _08033E6C
_08033E08:
	ldr r4, _08033EC8 @ =0x02039674
	ldrb r0, [r4]
	cmp r0, #0
	bne _08033E1A
	movs r0, #1
	ldrb r1, [r5, #0xa]
	ands r0, r1
	cmp r0, #0
	beq _08033E6C
_08033E1A:
	adds r0, r5, #0
	bl GetUnitCurrentHp
	movs r1, #0x64
	adds r4, r0, #0
	muls r4, r1, r4
	adds r0, r5, #0
	bl GetUnitMaxHp
	adds r1, r0, #0
	adds r0, r4, #0
	bl Div
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, sl
	bhi _08033E6C
	add r5, sp, #0xc
	adds r0, r6, #0
	adds r1, r7, #0
	adds r2, r5, #0
	bl sub_8033C8C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08033E6C
	mov sl, r4
	add r0, sp, #0xc
	movs r4, #0
	ldrsh r2, [r0, r4]
	str r2, [sp, #0x14]
	movs r1, #2
	ldrsh r0, [r5, r1]
	str r0, [sp, #0x18]
	ldr r0, _08033EBC @ =gMapUnit
	ldr r0, [r0]
	add r0, r8
	ldr r0, [r0]
	adds r0, r0, r6
	ldrb r0, [r0]
	str r0, [sp, #0x1c]
_08033E6C:
	subs r6, #1
	cmp r6, #0
	bge _08033DB8
_08033E72:
	ldr r7, [sp, #0x20]
	cmp r7, #0
	bge _08033DA4
_08033E78:
	movs r0, #1
	rsbs r0, r0, #0
	ldr r2, [sp, #0x14]
	cmp r2, r0
	beq _08033E9C
	adds r0, r2, #0
	ldr r1, [sp, #0x18]
	ldr r3, [sp, #0x1c]
	ldr r4, [sp, #0x10]
	lsls r2, r4, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp]
	movs r2, #0
	str r2, [sp, #4]
	str r2, [sp, #8]
	movs r2, #5
	bl AiSetDecision
_08033E9C:
	add sp, #0x24
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08033EAC: .4byte gActiveUnit
_08033EB0: .4byte 0x020395F8
_08033EB4: .4byte gMapSize
_08033EB8: .4byte gMapMovement
_08033EBC: .4byte gMapUnit
_08033EC0: .4byte gActiveUnitId
_08033EC4: .4byte 0x02039673
_08033EC8: .4byte 0x02039674

	thumb_func_start sub_8033ECC
sub_8033ECC: @ 0x08033ECC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x20
	str r0, [sp, #0x10]
	mov sb, r1
	movs r0, #0x64
	mov sl, r0
	movs r1, #1
	rsbs r1, r1, #0
	str r1, [sp, #0x18]
	str r1, [sp, #0x14]
	movs r2, #0
	str r2, [sp, #0x1c]
	ldr r4, _08034078 @ =0x020395F8
	adds r5, r4, #0
	adds r5, #0x7b
	movs r0, #4
	ldrb r3, [r5]
	ands r0, r3
	cmp r0, #0
	beq _08033EFE
	b _08034066
_08033EFE:
	ldr r0, _0803407C @ =gActiveUnit
	ldr r0, [r0]
	bl sub_8030CBC
	adds r1, r4, #0
	adds r1, #0x7c
	ldrb r0, [r1]
	cmp r0, #0
	beq _08033F14
	adds r4, r0, #0
	mov sl, r4
_08033F14:
	movs r0, #1
	mov r8, r0
_08033F18:
	mov r0, r8
	bl GetUnit
	adds r6, r0, #0
	cmp r6, #0
	bne _08033F26
	b _08034036
_08033F26:
	ldr r0, [r6]
	cmp r0, #0
	bne _08033F2E
	b _08034036
_08033F2E:
	movs r1, #0xf
	ldrsb r1, [r6, r1]
	ldr r0, _08034080 @ =gMapUnit
	ldr r0, [r0]
	lsls r1, r1, #2
	adds r1, r1, r0
	movs r2, #0xe
	ldrsb r2, [r6, r2]
	ldr r0, [r1]
	adds r0, r0, r2
	ldr r1, _08034084 @ =gActiveUnitId
	ldrb r0, [r0]
	ldrb r1, [r1]
	cmp r0, r1
	beq _08034036
	movs r0, #5
	ldrh r1, [r6, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _08034036
	movs r0, #4
	ldr r2, _08034088 @ =0x02039673
	ldrb r2, [r2]
	ands r0, r2
	cmp r0, #0
	bne _08033F76
	mov r3, sb
	cmp r3, #0
	beq _08033F76
	adds r0, r6, #0
	bl _call_via_r9
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _08034036
_08033F76:
	ldr r4, _0803408C @ =0x02039674
	ldrb r0, [r4]
	cmp r0, #0
	bne _08033F88
	movs r0, #1
	ldrb r1, [r6, #0xa]
	ands r0, r1
	cmp r0, #0
	beq _08034036
_08033F88:
	ldr r7, _0803407C @ =gActiveUnit
	ldr r0, [r7]
	bl GetUnitMagRange
	ldr r2, [r7]
	ldr r1, [r2, #4]
	ldrb r3, [r2, #0x1a]
	ldrb r1, [r1, #0x12]
	adds r1, r3, r1
	adds r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r4, #0xe
	ldrsb r4, [r2, r4]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldrb r2, [r6, #0xe]
	ldrb r3, [r6, #0xf]
	str r0, [sp]
	adds r0, r4, #0
	bl sub_803081C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08034036
	ldr r0, _08034090 @ =gMapRange
	ldr r0, [r0]
	movs r1, #0
	bl MapFill
	movs r4, #0xe
	ldrsb r4, [r6, r4]
	movs r5, #0xf
	ldrsb r5, [r6, r5]
	ldr r0, [r7]
	bl GetUnitMagRange
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #1
	bl MapAddInRange
	add r5, sp, #0xc
	adds r0, r5, #0
	bl sub_8030AB4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08034036
	adds r0, r6, #0
	bl GetUnitCurrentHp
	movs r1, #0x64
	adds r4, r0, #0
	muls r4, r1, r4
	adds r0, r6, #0
	bl GetUnitMaxHp
	adds r1, r0, #0
	adds r0, r4, #0
	bl Div
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, sl
	bhi _08034036
	mov sl, r0
	add r0, sp, #0xc
	movs r1, #0
	ldrsh r4, [r0, r1]
	str r4, [sp, #0x14]
	movs r3, #2
	ldrsh r2, [r5, r3]
	str r2, [sp, #0x18]
	movs r1, #0xf
	ldrsb r1, [r6, r1]
	ldr r0, _08034080 @ =gMapUnit
	ldr r0, [r0]
	lsls r1, r1, #2
	adds r1, r1, r0
	movs r2, #0xe
	ldrsb r2, [r6, r2]
	ldr r0, [r1]
	adds r0, r0, r2
	ldrb r0, [r0]
	str r0, [sp, #0x1c]
_08034036:
	movs r4, #1
	add r8, r4
	mov r0, r8
	cmp r0, #0xbf
	bgt _08034042
	b _08033F18
_08034042:
	movs r0, #1
	rsbs r0, r0, #0
	ldr r1, [sp, #0x14]
	cmp r1, r0
	beq _08034066
	adds r0, r1, #0
	ldr r1, [sp, #0x18]
	ldr r3, [sp, #0x1c]
	ldr r4, [sp, #0x10]
	lsls r2, r4, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp]
	movs r2, #0
	str r2, [sp, #4]
	str r2, [sp, #8]
	movs r2, #5
	bl AiSetDecision
_08034066:
	add sp, #0x20
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08034078: .4byte 0x020395F8
_0803407C: .4byte gActiveUnit
_08034080: .4byte gMapUnit
_08034084: .4byte gActiveUnitId
_08034088: .4byte 0x02039673
_0803408C: .4byte 0x02039674
_08034090: .4byte gMapRange

	thumb_func_start sub_8034094
sub_8034094: @ 0x08034094
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	mov sl, r0
	movs r7, #0
	movs r0, #0
	mov r8, r0
	mov sb, r0
	ldr r1, _08034164 @ =0x020395F8
	adds r1, #0x7b
	movs r0, #4
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _08034152
	bl sub_8030B94
	cmp r0, #2
	ble _08034152
	ldr r0, _08034168 @ =gActiveUnit
	ldr r0, [r0]
	bl sub_8030CBC
	ldr r0, _0803416C @ =gMapSize
	movs r1, #2
	ldrsh r0, [r0, r1]
	subs r5, r0, #1
	cmp r5, #0
	blt _0803412C
_080340D4:
	ldr r0, _0803416C @ =gMapSize
	movs r2, #0
	ldrsh r0, [r0, r2]
	subs r4, r0, #1
	subs r6, r5, #1
	cmp r4, #0
	blt _08034126
_080340E2:
	ldr r0, _08034170 @ =gMapMovement
	ldr r1, [r0]
	lsls r0, r5, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _08034120
	ldr r0, _08034174 @ =gMapRange
	ldr r0, [r0]
	movs r1, #0
	bl MapFill
	ldr r0, _08034168 @ =gActiveUnit
	ldr r0, [r0]
	bl GetUnitMagRange
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #1
	bl MapAddInRange
	bl sub_8030BDC
	cmp r0, r7
	ble _08034120
	adds r7, r0, #0
	mov r8, r4
	mov sb, r5
_08034120:
	subs r4, #1
	cmp r4, #0
	bge _080340E2
_08034126:
	adds r5, r6, #0
	cmp r5, #0
	bge _080340D4
_0803412C:
	cmp r7, #1
	ble _08034152
	mov r3, r8
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	mov r2, sb
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	mov r3, sl
	lsls r2, r3, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp]
	movs r2, #0
	str r2, [sp, #4]
	str r2, [sp, #8]
	movs r2, #5
	movs r3, #0
	bl AiSetDecision
_08034152:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08034164: .4byte 0x020395F8
_08034168: .4byte gActiveUnit
_0803416C: .4byte gMapSize
_08034170: .4byte gMapMovement
_08034174: .4byte gMapRange

	thumb_func_start sub_8034178
sub_8034178: @ 0x08034178
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x24
	str r0, [sp, #0x10]
	mov sb, r1
	movs r0, #0
	mov sl, r0
	movs r1, #0
	str r1, [sp, #0x14]
	movs r2, #0
	str r2, [sp, #0x18]
	movs r5, #0
	str r5, [sp, #0x1c]
	ldr r1, _080342B0 @ =0x020395F8
	adds r1, #0x7b
	movs r0, #4
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _080342A0
	ldr r0, _080342B4 @ =gActiveUnit
	ldr r0, [r0]
	bl sub_8030CBC
	bl MapMovementMarkFloodEdges
	ldr r0, _080342B8 @ =gMapSize
	movs r1, #2
	ldrsh r0, [r0, r1]
	subs r7, r0, #1
	cmp r7, #0
	blt _0803426A
_080341BE:
	ldr r0, _080342B8 @ =gMapSize
	movs r2, #0
	ldrsh r0, [r0, r2]
	subs r4, r0, #1
	subs r5, r7, #1
	str r5, [sp, #0x20]
	cmp r4, #0
	blt _08034264
	lsls r0, r7, #2
	mov r8, r0
_080341D2:
	ldr r0, _080342BC @ =gMapMovement
	ldr r0, [r0]
	add r0, r8
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _0803425E
	ldr r0, _080342C0 @ =gMapUnit
	ldr r0, [r0]
	add r0, r8
	ldr r0, [r0]
	adds r1, r0, r4
	ldrb r0, [r1]
	cmp r0, #0
	beq _0803425E
	bl GetUnit
	adds r5, r0, #0
	ldr r1, _080342B0 @ =0x020395F8
	adds r1, #0x7b
	movs r0, #4
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _0803421A
	mov r1, sb
	cmp r1, #0
	beq _0803421A
	adds r0, r5, #0
	bl _call_via_r9
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _0803425E
_0803421A:
	movs r0, #9
	ldrb r2, [r5, #0xa]
	ands r0, r2
	cmp r0, #0
	bne _0803425E
	movs r0, #8
	ldrsb r0, [r5, r0]
	cmp r0, sl
	blt _0803425E
	add r6, sp, #0xc
	adds r0, r4, #0
	adds r1, r7, #0
	adds r2, r6, #0
	bl sub_8033C8C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803425E
	ldrb r5, [r5, #8]
	mov sl, r5
	add r0, sp, #0xc
	movs r1, #0
	ldrsh r5, [r0, r1]
	str r5, [sp, #0x14]
	movs r5, #2
	ldrsh r2, [r6, r5]
	str r2, [sp, #0x18]
	ldr r0, _080342C0 @ =gMapUnit
	ldr r0, [r0]
	add r0, r8
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	str r0, [sp, #0x1c]
_0803425E:
	subs r4, #1
	cmp r4, #0
	bge _080341D2
_08034264:
	ldr r7, [sp, #0x20]
	cmp r7, #0
	bge _080341BE
_0803426A:
	mov r0, sl
	cmp r0, #0
	beq _080342A0
	add r4, sp, #0xc
	adds r0, r4, #0
	bl sub_80348DC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080342A0
	ldr r0, [sp, #0x14]
	ldr r1, [sp, #0x18]
	ldr r3, [sp, #0x1c]
	ldr r5, [sp, #0x10]
	lsls r2, r5, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp]
	add r2, sp, #0xc
	ldrb r2, [r2]
	str r2, [sp, #4]
	ldrh r2, [r4, #2]
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp, #8]
	movs r2, #5
	bl AiSetDecision
_080342A0:
	add sp, #0x24
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080342B0: .4byte 0x020395F8
_080342B4: .4byte gActiveUnit
_080342B8: .4byte gMapSize
_080342BC: .4byte gMapMovement
_080342C0: .4byte gMapUnit

	thumb_func_start sub_80342C4
sub_80342C4: @ 0x080342C4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x24
	str r0, [sp, #0x10]
	mov sb, r1
	movs r0, #0
	mov sl, r0
	movs r1, #0
	str r1, [sp, #0x14]
	movs r2, #0
	str r2, [sp, #0x18]
	movs r4, #0
	str r4, [sp, #0x1c]
	ldr r1, _080343EC @ =0x020395F8
	adds r1, #0x7b
	movs r0, #4
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _080343DA
	ldr r0, _080343F0 @ =gActiveUnit
	ldr r0, [r0]
	bl sub_8030CBC
	bl MapMovementMarkFloodEdges
	ldr r0, _080343F4 @ =gMapSize
	movs r1, #2
	ldrsh r0, [r0, r1]
	subs r7, r0, #1
	cmp r7, #0
	blt _080343BA
_0803430A:
	ldr r0, _080343F4 @ =gMapSize
	movs r2, #0
	ldrsh r0, [r0, r2]
	subs r4, r0, #1
	subs r0, r7, #1
	str r0, [sp, #0x20]
	cmp r4, #0
	blt _080343B4
	lsls r1, r7, #2
	mov r8, r1
_0803431E:
	ldr r0, _080343F8 @ =gMapMovement
	ldr r0, [r0]
	add r0, r8
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _080343AE
	ldr r0, _080343FC @ =gMapUnit
	ldr r0, [r0]
	add r0, r8
	ldr r0, [r0]
	adds r1, r0, r4
	ldrb r0, [r1]
	cmp r0, #0
	beq _080343AE
	bl GetUnit
	adds r5, r0, #0
	ldr r1, _080343EC @ =0x020395F8
	adds r1, #0x7b
	movs r0, #4
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _08034366
	mov r2, sb
	cmp r2, #0
	beq _08034366
	adds r0, r5, #0
	bl _call_via_r9
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _080343AE
_08034366:
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #0xf
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _080343AE
	movs r0, #8
	ldrsb r0, [r5, r0]
	cmp r0, sl
	blt _080343AE
	add r6, sp, #0xc
	adds r0, r4, #0
	adds r1, r7, #0
	adds r2, r6, #0
	bl sub_8033C8C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080343AE
	ldrb r5, [r5, #8]
	mov sl, r5
	add r0, sp, #0xc
	movs r2, #0
	ldrsh r1, [r0, r2]
	str r1, [sp, #0x14]
	movs r1, #2
	ldrsh r0, [r6, r1]
	str r0, [sp, #0x18]
	ldr r0, _080343FC @ =gMapUnit
	ldr r0, [r0]
	add r0, r8
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	str r0, [sp, #0x1c]
_080343AE:
	subs r4, #1
	cmp r4, #0
	bge _0803431E
_080343B4:
	ldr r7, [sp, #0x20]
	cmp r7, #0
	bge _0803430A
_080343BA:
	mov r2, sl
	cmp r2, #0
	beq _080343DA
	ldr r0, [sp, #0x14]
	ldr r1, [sp, #0x18]
	ldr r3, [sp, #0x1c]
	ldr r4, [sp, #0x10]
	lsls r2, r4, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp]
	movs r2, #0
	str r2, [sp, #4]
	str r2, [sp, #8]
	movs r2, #5
	bl AiSetDecision
_080343DA:
	add sp, #0x24
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080343EC: .4byte 0x020395F8
_080343F0: .4byte gActiveUnit
_080343F4: .4byte gMapSize
_080343F8: .4byte gMapMovement
_080343FC: .4byte gMapUnit

	thumb_func_start sub_8034400
sub_8034400: @ 0x08034400
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r6, #0
_08034406:
	lsls r0, r6, #1
	adds r1, r5, #0
	adds r1, #0x1c
	adds r1, r1, r0
	ldrh r0, [r1]
	adds r4, r0, #0
	cmp r4, #0
	beq _0803444E
	adds r0, r4, #0
	bl GetItemAttributes
	ldr r1, _08034444 @ =0x00000405
	ands r1, r0
	cmp r1, #0
	beq _08034448
	adds r0, r5, #0
	adds r1, r4, #0
	bl CanUnitUseWeapon
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08034440
	adds r0, r5, #0
	adds r1, r4, #0
	bl CanUnitUseStaff
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08034448
_08034440:
	movs r0, #1
	b _08034450
	.align 2, 0
_08034444: .4byte 0x00000405
_08034448:
	adds r6, #1
	cmp r6, #4
	ble _08034406
_0803444E:
	movs r0, #0
_08034450:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8034458
sub_8034458: @ 0x08034458
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _08034474 @ =gActiveUnit
	ldr r0, [r0]
	adds r1, r5, #0
	bl GetOffensiveStaffAccuracy
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #4
	bhi _08034478
	movs r0, #0
	b _080344A4
	.align 2, 0
_08034474: .4byte gActiveUnit
_08034478:
	adds r0, r5, #0
	bl GetUnitPower
	adds r0, r4, r0
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r0, r5, #0
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0
	beq _080344A2
	bl GetItemAttributes
	movs r1, #2
	ands r1, r0
	cmp r1, #0
	beq _080344A2
	lsls r0, r4, #0x19
	lsrs r4, r0, #0x18
_080344A2:
	adds r0, r4, #0
_080344A4:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80344AC
sub_80344AC: @ 0x080344AC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x24
	str r0, [sp, #0x10]
	mov sl, r1
	movs r0, #0
	str r0, [sp, #0x14]
	movs r1, #0
	str r1, [sp, #0x18]
	movs r2, #0
	str r2, [sp, #0x1c]
	movs r3, #0
	str r3, [sp, #0x20]
	ldr r1, _08034620 @ =0x020395F8
	adds r1, #0x7b
	movs r0, #4
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _080344DC
	b _08034610
_080344DC:
	ldr r0, _08034624 @ =gActiveUnit
	ldr r0, [r0]
	bl sub_8030CBC
	movs r4, #1
	mov sb, r4
_080344E8:
	mov r0, sb
	bl GetUnit
	adds r6, r0, #0
	cmp r6, #0
	beq _080345E0
	ldr r0, [r6]
	cmp r0, #0
	beq _080345E0
	movs r0, #5
	ldrh r1, [r6, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _080345E0
	ldr r1, _08034620 @ =0x020395F8
	adds r1, #0x7b
	movs r0, #4
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _08034524
	mov r2, sl
	cmp r2, #0
	beq _08034524
	adds r0, r6, #0
	bl _call_via_sl
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080345E0
_08034524:
	adds r1, r6, #0
	adds r1, #0x2e
	movs r0, #0xf
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #3
	beq _080345E0
	adds r0, r6, #0
	bl sub_8030C78
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080345E0
	ldr r3, _08034624 @ =gActiveUnit
	mov r8, r3
	ldr r0, [r3]
	bl GetUnitMagRange
	mov r4, r8
	ldr r2, [r4]
	ldr r1, [r2, #4]
	ldrb r3, [r2, #0x1a]
	ldrb r1, [r1, #0x12]
	adds r1, r3, r1
	adds r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r4, #0xe
	ldrsb r4, [r2, r4]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldrb r2, [r6, #0xe]
	ldrb r3, [r6, #0xf]
	str r0, [sp]
	adds r0, r4, #0
	bl sub_803081C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080345E0
	adds r0, r6, #0
	bl sub_8034400
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080345E0
	adds r0, r6, #0
	bl sub_8034458
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #0
	beq _080345E0
	ldr r4, [sp, #0x14]
	cmp r7, r4
	blo _080345E0
	ldr r0, _08034628 @ =gMapRange
	ldr r0, [r0]
	movs r1, #0
	bl MapFill
	movs r4, #0xe
	ldrsb r4, [r6, r4]
	movs r5, #0xf
	ldrsb r5, [r6, r5]
	mov r1, r8
	ldr r0, [r1]
	bl GetUnitMagRange
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #1
	bl MapAddInRange
	add r4, sp, #0xc
	adds r0, r4, #0
	bl sub_8030AB4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080345E0
	str r7, [sp, #0x14]
	add r0, sp, #0xc
	movs r3, #0
	ldrsh r2, [r0, r3]
	str r2, [sp, #0x18]
	movs r1, #2
	ldrsh r0, [r4, r1]
	str r0, [sp, #0x1c]
	ldrb r6, [r6, #0xb]
	lsls r6, r6, #0x18
	asrs r6, r6, #0x18
	str r6, [sp, #0x20]
_080345E0:
	movs r2, #1
	add sb, r2
	mov r3, sb
	cmp r3, #0xbf
	bgt _080345EC
	b _080344E8
_080345EC:
	ldr r4, [sp, #0x14]
	cmp r4, #0
	beq _08034610
	ldr r0, [sp, #0x18]
	ldr r1, [sp, #0x1c]
	ldr r2, [sp, #0x20]
	lsls r3, r2, #0x18
	lsrs r3, r3, #0x18
	ldr r4, [sp, #0x10]
	lsls r2, r4, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp]
	movs r2, #0
	str r2, [sp, #4]
	str r2, [sp, #8]
	movs r2, #5
	bl AiSetDecision
_08034610:
	add sp, #0x24
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08034620: .4byte 0x020395F8
_08034624: .4byte gActiveUnit
_08034628: .4byte gMapRange

	thumb_func_start sub_803462C
sub_803462C: @ 0x0803462C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x20
	str r0, [sp, #0x10]
	mov sb, r1
	movs r0, #0
	mov sl, r0
	movs r1, #0
	str r1, [sp, #0x14]
	movs r2, #0
	str r2, [sp, #0x18]
	movs r3, #0
	str r3, [sp, #0x1c]
	ldr r1, _08034798 @ =0x020395F8
	adds r1, #0x7b
	movs r0, #4
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0803465C
	b _08034786
_0803465C:
	ldr r0, _0803479C @ =gActiveUnit
	ldr r0, [r0]
	bl sub_8030CBC
	movs r4, #1
	mov r8, r4
_08034668:
	mov r0, r8
	bl GetUnit
	adds r6, r0, #0
	cmp r6, #0
	beq _08034756
	ldr r0, [r6]
	cmp r0, #0
	beq _08034756
	movs r0, #5
	ldrh r1, [r6, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _08034756
	ldr r1, _08034798 @ =0x020395F8
	adds r1, #0x7b
	movs r0, #4
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _080346A4
	mov r2, sb
	cmp r2, #0
	beq _080346A4
	adds r0, r6, #0
	bl _call_via_r9
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08034756
_080346A4:
	adds r1, r6, #0
	adds r1, #0x2e
	movs r0, #0xf
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _08034756
	ldr r7, _0803479C @ =gActiveUnit
	ldr r0, [r7]
	bl GetUnitMagRange
	ldr r2, [r7]
	ldr r1, [r2, #4]
	ldrb r3, [r2, #0x1a]
	ldrb r1, [r1, #0x12]
	adds r1, r3, r1
	adds r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r4, #0xe
	ldrsb r4, [r2, r4]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldrb r2, [r6, #0xe]
	ldrb r3, [r6, #0xf]
	str r0, [sp]
	adds r0, r4, #0
	bl sub_803081C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08034756
	adds r0, r6, #0
	bl sub_8034400
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08034756
	ldr r0, [r7]
	adds r1, r6, #0
	bl GetOffensiveStaffAccuracy
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #4
	bls _08034756
	movs r0, #8
	ldrsb r0, [r6, r0]
	adds r0, r1, r0
	cmp r0, sl
	blt _08034756
	ldr r0, _080347A0 @ =gMapRange
	ldr r0, [r0]
	movs r1, #0
	bl MapFill
	movs r4, #0xe
	ldrsb r4, [r6, r4]
	movs r5, #0xf
	ldrsb r5, [r6, r5]
	ldr r0, [r7]
	bl GetUnitMagRange
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #1
	bl MapAddInRange
	add r4, sp, #0xc
	adds r0, r4, #0
	bl sub_8030AB4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08034756
	ldrb r0, [r6, #8]
	mov sl, r0
	add r0, sp, #0xc
	movs r2, #0
	ldrsh r1, [r0, r2]
	str r1, [sp, #0x14]
	movs r0, #2
	ldrsh r3, [r4, r0]
	str r3, [sp, #0x18]
	ldrb r6, [r6, #0xb]
	lsls r6, r6, #0x18
	asrs r6, r6, #0x18
	str r6, [sp, #0x1c]
_08034756:
	movs r1, #1
	add r8, r1
	mov r2, r8
	cmp r2, #0xbf
	bgt _08034762
	b _08034668
_08034762:
	mov r3, sl
	cmp r3, #0
	beq _08034786
	ldr r0, [sp, #0x14]
	ldr r1, [sp, #0x18]
	ldr r4, [sp, #0x1c]
	lsls r3, r4, #0x18
	lsrs r3, r3, #0x18
	ldr r4, [sp, #0x10]
	lsls r2, r4, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp]
	movs r2, #0
	str r2, [sp, #4]
	str r2, [sp, #8]
	movs r2, #5
	bl AiSetDecision
_08034786:
	add sp, #0x20
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08034798: .4byte 0x020395F8
_0803479C: .4byte gActiveUnit
_080347A0: .4byte gMapRange

	thumb_func_start sub_80347A4
sub_80347A4: @ 0x080347A4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x24
	str r0, [sp, #0x10]
	mov sb, r1
	movs r0, #0xff
	mov sl, r0
	movs r1, #0
	str r1, [sp, #0x14]
	movs r2, #0
	str r2, [sp, #0x18]
	movs r4, #0
	str r4, [sp, #0x1c]
	ldr r1, _080348C8 @ =0x020395F8
	adds r1, #0x7b
	movs r0, #4
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _080348B6
	ldr r0, _080348CC @ =gActiveUnit
	ldr r0, [r0]
	bl sub_8030CBC
	bl MapMovementMarkFloodEdges
	ldr r0, _080348D0 @ =gMapSize
	movs r1, #2
	ldrsh r0, [r0, r1]
	subs r7, r0, #1
	cmp r7, #0
	blt _08034896
_080347EA:
	ldr r0, _080348D0 @ =gMapSize
	movs r2, #0
	ldrsh r0, [r0, r2]
	subs r4, r0, #1
	subs r0, r7, #1
	str r0, [sp, #0x20]
	cmp r4, #0
	blt _08034890
	lsls r1, r7, #2
	mov r8, r1
_080347FE:
	ldr r0, _080348D4 @ =gMapMovement
	ldr r0, [r0]
	add r0, r8
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x78
	bhi _0803488A
	ldr r0, _080348D8 @ =gMapUnit
	ldr r0, [r0]
	add r0, r8
	ldr r0, [r0]
	adds r1, r0, r4
	ldrb r0, [r1]
	cmp r0, #0
	beq _0803488A
	bl GetUnit
	adds r5, r0, #0
	ldr r1, _080348C8 @ =0x020395F8
	adds r1, #0x7b
	movs r0, #4
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _08034846
	mov r2, sb
	cmp r2, #0
	beq _08034846
	adds r0, r5, #0
	bl _call_via_r9
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _0803488A
_08034846:
	adds r0, r5, #0
	bl GetUnitResistance
	cmp r0, sl
	bgt _0803488A
	add r6, sp, #0xc
	adds r0, r4, #0
	adds r1, r7, #0
	adds r2, r6, #0
	bl sub_8033C8C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803488A
	adds r0, r5, #0
	bl GetUnitResistance
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sl, r0
	add r0, sp, #0xc
	movs r2, #0
	ldrsh r1, [r0, r2]
	str r1, [sp, #0x14]
	movs r1, #2
	ldrsh r0, [r6, r1]
	str r0, [sp, #0x18]
	ldr r0, _080348D8 @ =gMapUnit
	ldr r0, [r0]
	add r0, r8
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	str r0, [sp, #0x1c]
_0803488A:
	subs r4, #1
	cmp r4, #0
	bge _080347FE
_08034890:
	ldr r7, [sp, #0x20]
	cmp r7, #0
	bge _080347EA
_08034896:
	mov r2, sl
	cmp r2, #0xff
	beq _080348B6
	ldr r0, [sp, #0x14]
	ldr r1, [sp, #0x18]
	ldr r3, [sp, #0x1c]
	ldr r4, [sp, #0x10]
	lsls r2, r4, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp]
	movs r2, #0
	str r2, [sp, #4]
	str r2, [sp, #8]
	movs r2, #5
	bl AiSetDecision
_080348B6:
	add sp, #0x24
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080348C8: .4byte 0x020395F8
_080348CC: .4byte gActiveUnit
_080348D0: .4byte gMapSize
_080348D4: .4byte gMapMovement
_080348D8: .4byte gMapUnit

	thumb_func_start sub_80348DC
sub_80348DC: @ 0x080348DC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x24
	str r0, [sp]
	movs r0, #0xff
	str r0, [sp, #4]
	mov r8, r0
	mov sl, r0
	movs r1, #0
	str r1, [sp, #8]
	movs r0, #0
	str r0, [sp, #0xc]
	ldr r0, _080349B0 @ =gActiveUnit
	ldr r0, [r0]
	ldr r0, [r0, #4]
	ldr r0, [r0, #0x34]
	str r0, [sp, #0x10]
	bl GetActiveFactionAlliance
	str r0, [sp, #0x14]
	adds r4, r0, #0
	adds r4, #1
	adds r0, #0x80
	cmp r4, r0
	blt _08034916
	b _08034A3A
_08034916:
	adds r0, r4, #0
	bl GetUnit
	adds r7, r0, #0
	ldr r1, [sp, #0x14]
	adds r1, #0x80
	str r1, [sp, #0x1c]
	adds r4, #1
	str r4, [sp, #0x18]
	cmp r7, #0
	bne _0803492E
	b _08034A30
_0803492E:
	ldr r0, [r7]
	cmp r0, #0
	bne _08034936
	b _08034A30
_08034936:
	movs r0, #0x25
	ldrh r1, [r7, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _08034A30
	adds r0, r7, #0
	bl sub_8035028
	ldr r0, _080349B4 @ =gMapSize
	movs r1, #2
	ldrsh r0, [r0, r1]
	subs r6, r0, #1
	cmp r6, #0
	blt _08034A0A
_08034952:
	ldr r0, _080349B4 @ =gMapSize
	movs r1, #0
	ldrsh r0, [r0, r1]
	subs r4, r0, #1
	subs r0, r6, #1
	mov sb, r0
	cmp r4, #0
	blt _08034A04
	ldr r3, _080349B8 @ =gMapRange
	lsls r5, r6, #2
_08034966:
	ldr r0, [r3]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r2, r0, r4
	ldrb r1, [r2]
	cmp r1, #0x78
	bhi _080349FE
	ldr r0, _080349BC @ =gMapUnit
	ldr r0, [r0]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r1, r0, r4
	ldrb r0, [r1]
	cmp r0, #0
	beq _080349C0
	movs r0, #0xb
	ldrsb r0, [r7, r0]
	ldrb r1, [r1]
	str r3, [sp, #0x20]
	bl AreUnitIdsAllied
	lsls r0, r0, #0x18
	ldr r3, [sp, #0x20]
	cmp r0, #0
	bne _080349FE
	ldr r0, [r3]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r1, r0, r4
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r8, r0
	ble _080349FE
	ldrb r1, [r1]
	mov r8, r1
	b _080349FE
	.align 2, 0
_080349B0: .4byte gActiveUnit
_080349B4: .4byte gMapSize
_080349B8: .4byte gMapRange
_080349BC: .4byte gMapUnit
_080349C0:
	ldr r0, _08034A44 @ =gMapTerrain
	ldr r0, [r0]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	ldr r1, [sp, #0x10]
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble _080349FE
	ldr r0, _08034A48 @ =gMapMovement
	ldr r0, [r0]
	adds r0, r5, r0
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x78
	ble _080349FE
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp sl, r0
	ble _080349FE
	str r4, [sp, #8]
	str r6, [sp, #0xc]
	ldrb r2, [r2]
	mov sl, r2
_080349FE:
	subs r4, #1
	cmp r4, #0
	bge _08034966
_08034A04:
	mov r6, sb
	cmp r6, #0
	bge _08034952
_08034A0A:
	mov r0, r8
	cmp r0, #0xff
	beq _08034A30
	ldr r1, [sp, #4]
	cmp r1, r8
	blo _08034A30
	mov r0, sl
	cmp r0, #0xff
	beq _08034A30
	mov r1, sp
	ldrh r0, [r1, #8]
	ldr r1, [sp]
	strh r0, [r1]
	mov r1, sp
	ldrh r0, [r1, #0xc]
	ldr r1, [sp]
	strh r0, [r1, #2]
	mov r1, r8
	str r1, [sp, #4]
_08034A30:
	ldr r4, [sp, #0x18]
	ldr r0, [sp, #0x1c]
	cmp r4, r0
	bge _08034A3A
	b _08034916
_08034A3A:
	ldr r1, [sp, #4]
	cmp r1, #0xff
	bne _08034A4C
	movs r0, #0
	b _08034A4E
	.align 2, 0
_08034A44: .4byte gMapTerrain
_08034A48: .4byte gMapMovement
_08034A4C:
	movs r0, #1
_08034A4E:
	add sp, #0x24
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8034A60
sub_8034A60: @ 0x08034A60
	push {r4, r5, r6, lr}
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	movs r5, #0
	bl GetItemIid
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	ldr r6, _08034AA8 @ =0x0810DB9C
	ldrh r0, [r6]
	cmp r0, #0
	beq _08034ABE
	movs r4, #0
	adds r2, r6, #0
_08034A7C:
	ldrh r0, [r2]
	cmp r3, r0
	bne _08034AB0
	cmp r3, #0x67
	bne _08034A9C
	ldr r0, _08034AAC @ =gActiveUnit
	ldr r0, [r0]
	ldr r1, [r0]
	ldr r0, [r0, #4]
	ldr r1, [r1, #0x28]
	ldr r0, [r0, #0x24]
	orrs r1, r0
	movs r0, #4
	ands r1, r0
	cmp r1, #0
	beq _08034AB6
_08034A9C:
	ldr r0, [r2, #4]
	cmp r0, #0
	beq _08034AB0
	adds r0, r5, #0
	b _08034AC2
	.align 2, 0
_08034AA8: .4byte 0x0810DB9C
_08034AAC: .4byte gActiveUnit
_08034AB0:
	adds r4, #8
	adds r2, #8
	adds r5, #1
_08034AB6:
	adds r0, r4, r6
	ldrh r0, [r0]
	cmp r0, #0
	bne _08034A7C
_08034ABE:
	movs r0, #1
	rsbs r0, r0, #0
_08034AC2:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_8034AC8
sub_8034AC8: @ 0x08034AC8
	push {r4, r5, r6, lr}
	ldr r1, _08034ADC @ =0x020395F8
	adds r1, #0x7b
	movs r0, #2
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _08034AE0
	movs r0, #0
	b _08034B52
	.align 2, 0
_08034ADC: .4byte 0x020395F8
_08034AE0:
	movs r5, #0
	ldr r0, _08034B40 @ =gActiveUnit
	ldr r0, [r0]
	ldrh r4, [r0, #0x1c]
	cmp r4, #0
	beq _08034B2A
	ldr r6, _08034B44 @ =0x0810DBA0
_08034AEE:
	adds r0, r4, #0
	bl GetItemKind
	cmp r0, #0
	beq _08034B14
	adds r0, r4, #0
	bl sub_8034A60
	adds r1, r0, #0
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _08034B14
	lsls r0, r1, #3
	adds r0, r0, r6
	ldr r1, [r0]
	adds r0, r5, #0
	bl _call_via_r1
_08034B14:
	adds r5, #1
	cmp r5, #4
	bgt _08034B2A
	ldr r0, _08034B40 @ =gActiveUnit
	ldr r0, [r0]
	lsls r1, r5, #1
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r4, [r0]
	cmp r4, #0
	bne _08034AEE
_08034B2A:
	ldr r0, _08034B48 @ =0x020395F8
	adds r0, #0x79
	ldrb r0, [r0]
	cmp r0, #0
	beq _08034B50
	ldr r0, _08034B4C @ =gAiDecision
	ldrb r0, [r0, #0xa]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _08034B52
	.align 2, 0
_08034B40: .4byte gActiveUnit
_08034B44: .4byte 0x0810DBA0
_08034B48: .4byte 0x020395F8
_08034B4C: .4byte gAiDecision
_08034B50:
	movs r0, #1
_08034B52:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_8034B58
sub_8034B58: @ 0x08034B58
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	adds r7, r0, #0
	ldr r4, _08034BE0 @ =0x020395F8
	adds r0, r4, #0
	adds r0, #0x80
	ldr r0, [r0]
	ldr r1, _08034BE4 @ =0x80000001
	ands r0, r1
	cmp r0, #0
	beq _08034BD8
	ldr r0, _08034BE8 @ =gActiveUnit
	ldr r0, [r0]
	add r6, sp, #0xc
	adds r1, r6, #0
	bl sub_8034D80
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08034BD8
	add r0, sp, #0xc
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #2
	ldrsh r1, [r6, r2]
	adds r2, r4, #0
	adds r2, #0x7e
	ldrb r3, [r2]
	movs r2, #1
	str r2, [sp]
	movs r2, #0
	bl sub_803046C
	ldr r5, _08034BEC @ =gAiDecision
	movs r4, #0xa
	ldrsb r4, [r5, r4]
	cmp r4, #1
	bne _08034BD8
	add r0, sp, #0xc
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #2
	ldrsh r1, [r6, r2]
	ldrb r2, [r5, #2]
	ldrb r3, [r5, #3]
	str r4, [sp]
	bl sub_803081C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08034BD8
	ldrb r0, [r5, #2]
	ldrb r1, [r5, #3]
	lsls r2, r7, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp]
	movs r2, #0
	str r2, [sp, #4]
	str r2, [sp, #8]
	movs r2, #6
	movs r3, #0
	bl AiSetDecision
_08034BD8:
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08034BE0: .4byte 0x020395F8
_08034BE4: .4byte 0x80000001
_08034BE8: .4byte gActiveUnit
_08034BEC: .4byte gAiDecision

	thumb_func_start sub_8034BF0
sub_8034BF0: @ 0x08034BF0
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	adds r7, r0, #0
	movs r5, #0
	ldr r6, _08034C30 @ =0x020395F8
	adds r0, r6, #0
	adds r0, #0x80
	ldr r0, [r0]
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	beq _08034CAC
	ldr r4, _08034C34 @ =gActiveUnit
	ldr r0, [r4]
	bl GetUnitItemCount
	cmp r0, #4
	ble _08034C38
	ldr r2, [r4]
	ldrb r1, [r2, #0xa]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	bne _08034C38
	movs r0, #8
	orrs r0, r1
	strb r0, [r2, #0xa]
	adds r0, r6, #0
	adds r0, #0x79
	strb r5, [r0]
	b _08034CAC
	.align 2, 0
_08034C30: .4byte 0x020395F8
_08034C34: .4byte gActiveUnit
_08034C38:
	ldr r4, _08034CB4 @ =gActiveUnit
	ldr r0, [r4]
	bl GetUnitItemCount
	cmp r0, #4
	ble _08034C48
	movs r0, #4
	orrs r5, r0
_08034C48:
	ldr r0, [r4]
	add r6, sp, #0xc
	adds r1, r5, #0
	adds r2, r6, #0
	bl sub_8034DFC
	cmp r0, #1
	bne _08034CAC
	add r0, sp, #0xc
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #2
	ldrsh r1, [r6, r2]
	ldr r2, _08034CB8 @ =0x020395F8
	adds r2, #0x7e
	ldrb r3, [r2]
	movs r5, #0
	str r5, [sp]
	movs r2, #0
	bl sub_803046C
	ldr r4, _08034CBC @ =gAiDecision
	ldrb r0, [r4, #0xa]
	cmp r0, #1
	bne _08034CAC
	add r0, sp, #0xc
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #2
	ldrsh r1, [r6, r2]
	ldrb r2, [r4, #2]
	ldrb r3, [r4, #3]
	str r5, [sp]
	bl sub_803081C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08034CAC
	ldrb r0, [r4, #2]
	ldrb r1, [r4, #3]
	lsls r2, r7, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp]
	str r5, [sp, #4]
	str r5, [sp, #8]
	movs r2, #6
	movs r3, #0
	bl AiSetDecision
_08034CAC:
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08034CB4: .4byte gActiveUnit
_08034CB8: .4byte 0x020395F8
_08034CBC: .4byte gAiDecision

	thumb_func_start sub_8034CC0
sub_8034CC0: @ 0x08034CC0
	push {r4, r5, lr}
	sub sp, #0x10
	adds r5, r0, #0
	ldr r0, _08034D20 @ =0x020395F8
	adds r0, #0x80
	ldr r0, [r0]
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	beq _08034D16
	ldr r0, _08034D24 @ =gActiveUnit
	ldr r2, [r0]
	adds r1, r2, #0
	adds r1, #0x2e
	movs r0, #0xf
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #1
	bne _08034D16
	add r4, sp, #0xc
	adds r0, r2, #0
	adds r1, r4, #0
	bl sub_8030270
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08034D16
	add r0, sp, #0xc
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #2
	ldrsh r1, [r4, r2]
	lsls r2, r5, #0x18
	lsrs r2, r2, #0x18
	str r2, [sp]
	movs r2, #0
	str r2, [sp, #4]
	str r2, [sp, #8]
	movs r2, #6
	movs r3, #0
	bl AiSetDecision
_08034D16:
	add sp, #0x10
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08034D20: .4byte 0x020395F8
_08034D24: .4byte gActiveUnit

	thumb_func_start sub_8034D28
sub_8034D28: @ 0x08034D28
	push {r4, lr}
	adds r3, r0, #0
	adds r4, r1, #0
	ldr r1, _08034D60 @ =gMapRange
	ldr r0, [r1]
	lsls r2, r4, #2
	adds r0, r2, r0
	ldr r0, [r0]
	adds r0, r0, r3
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x77
	bgt _08034D5C
	ldr r0, _08034D64 @ =gMapUnit
	ldr r0, [r0]
	adds r0, r2, r0
	ldr r0, [r0]
	adds r0, r0, r3
	ldrb r2, [r0]
	cmp r2, #0
	beq _08034D6C
	ldr r0, _08034D68 @ =gActiveUnitId
	ldrb r0, [r0]
	cmp r2, r0
	beq _08034D6C
_08034D5C:
	movs r0, #0xff
	b _08034D78
	.align 2, 0
_08034D60: .4byte gMapRange
_08034D64: .4byte gMapUnit
_08034D68: .4byte gActiveUnitId
_08034D6C:
	ldr r1, [r1]
	lsls r0, r4, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r3
	ldrb r0, [r0]
_08034D78:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8034D80
sub_8034D80: @ 0x08034D80
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	bl sub_8034FF8
	ldr r0, _08034DC4 @ =0x085C98F0
	movs r1, #0
	adds r2, r4, #0
	bl sub_802F910
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08034DCC
	adds r0, r5, #0
	bl sub_8034F34
	movs r1, #2
	ldrsh r0, [r4, r1]
	ldr r1, _08034DC8 @ =gMapRange
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r2, #0
	ldrsh r1, [r4, r2]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x77
	bgt _08034DCC
	movs r0, #1
	b _08034DCE
	.align 2, 0
_08034DC4: .4byte 0x085C98F0
_08034DC8: .4byte gMapRange
_08034DCC:
	movs r0, #0
_08034DCE:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_8034DD4
sub_8034DD4: @ 0x08034DD4
	push {r4, lr}
	adds r4, r1, #0
	bl sub_8034F34
	ldr r0, _08034DF0 @ =0x085C98F2
	movs r1, #0
	adds r2, r4, #0
	bl sub_802F7B4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08034DF4
	movs r0, #1
	b _08034DF6
	.align 2, 0
_08034DF0: .4byte 0x085C98F2
_08034DF4:
	movs r0, #0
_08034DF6:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_8034DFC
sub_8034DFC: @ 0x08034DFC
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r4, r2, #0
	bl sub_8034F04
	adds r0, r5, #0
	bl sub_8034FC4
	movs r0, #1
	orrs r0, r6
	adds r1, r4, #0
	bl sub_802FA58
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08034E48
	movs r1, #2
	ldrsh r0, [r4, r1]
	ldr r1, _08034E44 @ =gMapMovement
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r2, #0
	ldrsh r1, [r4, r2]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x77
	bgt _08034E48
_08034E3E:
	movs r0, #1
	b _08034E8E
	.align 2, 0
_08034E44: .4byte gMapMovement
_08034E48:
	adds r0, r5, #0
	bl sub_8034FF8
	adds r0, r6, #0
	adds r1, r4, #0
	bl sub_802FA58
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08034E8C
	movs r3, #2
	ldrsh r1, [r4, r3]
	ldr r0, _08034E94 @ =gMapMovement
	ldr r0, [r0]
	lsls r1, r1, #2
	adds r0, r1, r0
	movs r3, #0
	ldrsh r2, [r4, r3]
	ldr r0, [r0]
	adds r0, r0, r2
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x77
	bgt _08034E3E
	ldr r0, _08034E98 @ =gMapUnit
	ldr r0, [r0]
	adds r0, r1, r0
	ldr r0, [r0]
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r0, #0
	bne _08034E3E
_08034E8C:
	movs r0, #0
_08034E8E:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_08034E94: .4byte gMapMovement
_08034E98: .4byte gMapUnit

	thumb_func_start sub_8034E9C
sub_8034E9C: @ 0x08034E9C
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r2, #1
	ldr r3, _08034EBC @ =gWorkingMovTable
	movs r5, #1
_08034EA6:
	adds r0, r4, r2
	ldrb r1, [r0]
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble _08034EC0
	adds r0, r2, r3
	strb r1, [r0]
	b _08034EC4
	.align 2, 0
_08034EBC: .4byte gWorkingMovTable
_08034EC0:
	adds r0, r2, r3
	strb r5, [r0]
_08034EC4:
	adds r0, r2, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0x32
	bls _08034EA6
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8034ED4
sub_8034ED4: @ 0x08034ED4
	push {r4, r5, r6, lr}
	adds r3, r0, #0
	adds r5, r1, #0
	movs r2, #1
	ldr r6, _08034F00 @ =gWorkingMovTable
	adds r4, r6, #0
_08034EE0:
	adds r1, r2, r4
	adds r0, r3, r2
	ldrb r0, [r0]
	strb r0, [r1]
	adds r0, r2, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0x32
	bls _08034EE0
	adds r1, r5, r6
	movs r0, #1
	strb r0, [r1]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08034F00: .4byte gWorkingMovTable

	thumb_func_start sub_8034F04
sub_8034F04: @ 0x08034F04
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #4]
	ldr r0, [r0, #0x34]
	bl SetWorkingMovTable
	ldr r0, _08034F30 @ =gMapMovement
	ldr r0, [r0]
	bl SetWorkingMap
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	movs r1, #0xf
	ldrsb r1, [r4, r1]
	movs r3, #0xb
	ldrsb r3, [r4, r3]
	movs r2, #0x7c
	bl BeginMapFlood
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08034F30: .4byte gMapMovement

	thumb_func_start sub_8034F34
sub_8034F34: @ 0x08034F34
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #4]
	ldr r0, [r0, #0x34]
	bl SetWorkingMovTable
	ldr r0, _08034F60 @ =gMapRange
	ldr r0, [r0]
	bl SetWorkingMap
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	movs r1, #0xf
	ldrsb r1, [r4, r1]
	movs r3, #0xb
	ldrsb r3, [r4, r3]
	movs r2, #0x7c
	bl BeginMapFlood
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08034F60: .4byte gMapRange

	thumb_func_start sub_8034F64
sub_8034F64: @ 0x08034F64
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #4]
	ldr r0, [r0, #0x34]
	bl sub_8034E9C
	ldr r0, _08034F90 @ =gMapMovement
	ldr r0, [r0]
	bl SetWorkingMap
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	movs r1, #0xf
	ldrsb r1, [r4, r1]
	movs r3, #0xb
	ldrsb r3, [r4, r3]
	movs r2, #0x7c
	bl BeginMapFlood
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08034F90: .4byte gMapMovement

	thumb_func_start sub_8034F94
sub_8034F94: @ 0x08034F94
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #4]
	ldr r0, [r0, #0x34]
	bl sub_8034E9C
	ldr r0, _08034FC0 @ =gMapMovement
	ldr r0, [r0]
	bl SetWorkingMap
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	movs r1, #0xf
	ldrsb r1, [r4, r1]
	movs r2, #0x7c
	movs r3, #0
	bl BeginMapFlood
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08034FC0: .4byte gMapMovement

	thumb_func_start sub_8034FC4
sub_8034FC4: @ 0x08034FC4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #4]
	ldr r0, [r0, #0x34]
	movs r1, #0x1e
	bl sub_8034ED4
	ldr r0, _08034FF4 @ =gMapRange
	ldr r0, [r0]
	bl SetWorkingMap
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	movs r1, #0xf
	ldrsb r1, [r4, r1]
	movs r3, #0xb
	ldrsb r3, [r4, r3]
	movs r2, #0x7c
	bl BeginMapFlood
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08034FF4: .4byte gMapRange

	thumb_func_start sub_8034FF8
sub_8034FF8: @ 0x08034FF8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #4]
	ldr r0, [r0, #0x34]
	movs r1, #0x1e
	bl sub_8034ED4
	ldr r0, _08035024 @ =gMapRange
	ldr r0, [r0]
	bl SetWorkingMap
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	movs r1, #0xf
	ldrsb r1, [r4, r1]
	movs r2, #0x7c
	movs r3, #0
	bl BeginMapFlood
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08035024: .4byte gMapRange

	thumb_func_start sub_8035028
sub_8035028: @ 0x08035028
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #4]
	ldr r0, [r0, #0x34]
	bl SetWorkingMovTable
	ldr r0, _08035060 @ =gMapRange
	ldr r0, [r0]
	bl SetWorkingMap
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	movs r1, #0xf
	ldrsb r1, [r4, r1]
	movs r2, #0x1a
	ldrsb r2, [r4, r2]
	ldr r3, [r4, #4]
	ldrb r3, [r3, #0x12]
	lsls r3, r3, #0x18
	asrs r3, r3, #0x18
	adds r2, r2, r3
	movs r3, #0xb
	ldrsb r3, [r4, r3]
	bl BeginMapFlood
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08035060: .4byte gMapRange

	thumb_func_start sub_8035064
sub_8035064: @ 0x08035064
	adds r0, #0x40
	movs r1, #0x80
	lsls r1, r1, #6
	ldrh r0, [r0]
	ands r1, r0
	cmp r1, #0
	beq _08035084
	ldr r0, _08035080 @ =0x020395F8
	adds r0, #0x7b
	movs r1, #2
	ldrb r2, [r0]
	orrs r1, r2
	strb r1, [r0]
	b _08035090
	.align 2, 0
_08035080: .4byte 0x020395F8
_08035084:
	ldr r1, _08035094 @ =0x020395F8
	adds r1, #0x7b
	movs r0, #0xfd
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
_08035090:
	bx lr
	.align 2, 0
_08035094: .4byte 0x020395F8

	thumb_func_start sub_8035098
sub_8035098: @ 0x08035098
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r4, r2, #0
	ldr r0, [r4, #4]
	ldr r0, [r0, #0x34]
	bl SetWorkingMovTable
	ldr r0, _080350C4 @ =gMapRange
	ldr r0, [r0]
	bl SetWorkingMap
	movs r3, #0xb
	ldrsb r3, [r4, r3]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #0x7c
	bl BeginMapFlood
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080350C4: .4byte gMapRange

	thumb_func_start sub_80350C8
sub_80350C8: @ 0x080350C8
	push {r4, r5, lr}
	ldr r4, _080350DC @ =0x03004568
	ldr r3, [r4]
	cmp r3, #0
	beq _080350E4
	cmp r3, #1
	beq _08035150
	ldr r0, _080350E0 @ =0x030013BC
	ldr r0, [r0]
	b _080351DA
	.align 2, 0
_080350DC: .4byte 0x03004568
_080350E0: .4byte 0x030013BC
_080350E4:
	ldr r0, _08035134 @ =0x04000134
	strh r3, [r0]
	ldr r2, _08035138 @ =0x04000128
	ldr r0, _0803513C @ =0x085C98F4
	ldr r0, [r0]
	ldr r1, _08035140 @ =0x00001B78
	adds r0, r0, r1
	ldrh r0, [r0]
	mvns r0, r0
	strh r0, [r2, #2]
	ldr r1, _08035144 @ =0x030013B8
	movs r5, #0xc0
	lsls r5, r5, #7
	adds r0, r5, #0
	ldrb r1, [r1]
	orrs r0, r1
	strh r0, [r2]
	ldrh r0, [r2]
	adds r2, r0, #0
	movs r0, #8
	ands r0, r2
	cmp r0, #0
	beq _080351D6
	ldr r1, _08035148 @ =0x030013BC
	movs r0, #4
	ands r2, r0
	lsls r0, r2, #0x10
	lsrs r0, r0, #0x10
	str r0, [r1]
	cmp r0, #0
	beq _08035128
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r1]
_08035128:
	ldr r0, _0803514C @ =0x030044D4
	str r3, [r0]
	movs r0, #1
	str r0, [r4]
	b _080351D6
	.align 2, 0
_08035134: .4byte 0x04000134
_08035138: .4byte 0x04000128
_0803513C: .4byte 0x085C98F4
_08035140: .4byte 0x00001B78
_08035144: .4byte 0x030013B8
_08035148: .4byte 0x030013BC
_0803514C: .4byte 0x030044D4
_08035150:
	ldr r0, _08035184 @ =0x04000128
	ldrh r0, [r0]
	adds r2, r0, #0
	ldr r0, _08035188 @ =0x030044D4
	ldr r0, [r0]
	ldr r3, _0803518C @ =0x085C98F4
	cmp r0, #0
	beq _08035198
	movs r0, #0x40
	ands r0, r2
	cmp r0, #0
	bne _08035198
	ldr r1, [r3]
	ldr r0, _08035190 @ =0x0000FFFF
	ldrh r1, [r1, #0x14]
	cmp r1, r0
	beq _08035198
	ldr r1, _08035194 @ =0x030013BC
	movs r0, #0x30
	ands r2, r0
	lsrs r0, r2, #4
	str r0, [r1]
	movs r1, #2
	str r1, [r4]
	b _080351DA
	.align 2, 0
_08035184: .4byte 0x04000128
_08035188: .4byte 0x030044D4
_0803518C: .4byte 0x085C98F4
_08035190: .4byte 0x0000FFFF
_08035194: .4byte 0x030013BC
_08035198:
	ldr r2, _080351B8 @ =0x04000128
	ldr r0, [r3]
	ldr r1, _080351BC @ =0x00001B78
	adds r0, r0, r1
	ldrh r0, [r0]
	mvns r0, r0
	strh r0, [r2, #2]
	ldr r0, _080351C0 @ =0x030013BC
	ldr r0, [r0]
	cmp r0, #0
	beq _080351C8
	ldr r1, _080351C4 @ =0x030013B8
	movs r3, #0xc0
	lsls r3, r3, #7
	adds r0, r3, #0
	b _080351D0
	.align 2, 0
_080351B8: .4byte 0x04000128
_080351BC: .4byte 0x00001B78
_080351C0: .4byte 0x030013BC
_080351C4: .4byte 0x030013B8
_080351C8:
	ldr r1, _080351E0 @ =0x030013B8
	movs r5, #0xc1
	lsls r5, r5, #7
	adds r0, r5, #0
_080351D0:
	ldrb r1, [r1]
	orrs r0, r1
	strh r0, [r2]
_080351D6:
	movs r0, #1
	rsbs r0, r0, #0
_080351DA:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080351E0: .4byte 0x030013B8

	thumb_func_start sub_80351E4
sub_80351E4: @ 0x080351E4
	ldr r0, _080351F0 @ =0x04000128
	ldrh r1, [r0]
	movs r0, #0x30
	ands r0, r1
	lsrs r0, r0, #4
	bx lr
	.align 2, 0
_080351F0: .4byte 0x04000128

	thumb_func_start sub_80351F4
sub_80351F4: @ 0x080351F4
	push {r4, r5, lr}
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldr r3, _0803521C @ =0x085C98F4
	ldr r3, [r3]
	ldr r5, _08035220 @ =0x00001B78
	adds r4, r3, r5
	strh r0, [r4]
	ldr r4, _08035224 @ =0x00001B7A
	adds r0, r3, r4
	strh r1, [r0]
	adds r5, #4
	adds r3, r3, r5
	strh r2, [r3]
	ldr r0, _08035228 @ =0x030013B8
	strb r1, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803521C: .4byte 0x085C98F4
_08035220: .4byte 0x00001B78
_08035224: .4byte 0x00001B7A
_08035228: .4byte 0x030013B8

	thumb_func_start sub_803522C
sub_803522C: @ 0x0803522C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	ldr r0, _0803537C @ =0x030044D0
	movs r3, #0
	str r3, [r0]
	ldr r2, _08035380 @ =0x085C98F4
	ldr r0, [r2]
	movs r1, #0
	strh r3, [r0, #0x22]
	strh r3, [r0, #0x24]
	ldr r4, _08035384 @ =0x00001B74
	adds r0, r0, r4
	strb r1, [r0]
	ldr r0, [r2]
	adds r4, #1
	adds r0, r0, r4
	strb r1, [r0]
	ldr r0, [r2]
	adds r4, #1
	adds r0, r0, r4
	strb r1, [r0]
	ldr r0, [r2]
	adds r4, #1
	adds r0, r0, r4
	strb r1, [r0]
	ldr r0, [r2]
	strb r1, [r0, #0x1e]
	ldr r0, [r2]
	strb r1, [r0, #0x1f]
	ldr r0, [r2]
	adds r0, #0x20
	strb r1, [r0]
	ldr r0, [r2]
	strh r3, [r0, #0x30]
	ldr r0, _08035388 @ =0x030013C8
	mov sb, r0
	ldr r1, _0803538C @ =0x030013CA
	mov r8, r1
	adds r5, r2, #0
	movs r4, #0
_08035280:
	ldr r0, [r5]
	adds r0, #0xb
	adds r0, r0, r3
	strb r4, [r0]
	ldr r1, [r5]
	lsls r2, r3, #1
	adds r0, r1, #0
	adds r0, #0x12
	adds r0, r0, r2
	strh r4, [r0]
	adds r1, #0x1a
	adds r1, r1, r3
	strb r4, [r1]
	ldr r0, [r5]
	adds r0, #0x26
	adds r0, r0, r2
	strh r4, [r0]
	adds r3, #1
	cmp r3, #3
	ble _08035280
	movs r3, #0
	ldr r5, _08035390 @ =0x03004580
	movs r2, #0
	ldr r4, _08035380 @ =0x085C98F4
_080352B0:
	adds r0, r3, r5
	strb r2, [r0]
	ldr r0, [r4]
	lsls r1, r3, #1
	adds r0, #0x32
	adds r0, r0, r1
	strh r2, [r0]
	adds r3, #1
	cmp r3, #0x7f
	ble _080352B0
	movs r4, #0
	ldr r5, _08035380 @ =0x085C98F4
	movs r1, #0
	movs r2, #0x9a
	lsls r2, r2, #1
_080352CE:
	ldr r0, [r5]
	adds r0, r0, r2
	strb r1, [r0]
	strb r1, [r0, #4]
	movs r3, #0x7f
	adds r0, #0x89
_080352DA:
	strb r1, [r0]
	subs r0, #1
	subs r3, #1
	cmp r3, #0
	bge _080352DA
	adds r2, #0x8c
	adds r4, #1
	cmp r4, #0x1f
	ble _080352CE
	movs r4, #0
	ldr r2, _08035380 @ =0x085C98F4
	mov ip, r2
	movs r5, #0
	movs r7, #0x8c
	ldr r6, _08035394 @ =0x000012B4
_080352F8:
	adds r0, r4, #0
	muls r0, r7, r0
	adds r0, r0, r6
	mov r2, ip
	ldr r1, [r2]
	adds r1, r1, r0
	strb r5, [r1]
	strb r5, [r1, #4]
	adds r2, r4, #1
	movs r3, #0x7f
	adds r1, #0x89
_0803530E:
	strb r5, [r1]
	subs r1, #1
	subs r3, #1
	cmp r3, #0
	bge _0803530E
	adds r4, r2, #0
	cmp r4, #0xf
	ble _080352F8
	movs r0, #0
	mov r4, r8
	strh r0, [r4]
	mov r1, sb
	strh r0, [r1]
	movs r1, #0
	ldr r0, _08035398 @ =0x0203B218
	movs r3, #0x80
	lsls r3, r3, #2
_08035330:
	strh r1, [r0]
	adds r0, #2
	subs r3, #1
	cmp r3, #0
	bne _08035330
	movs r4, #0
	ldr r2, _0803539C @ =0x030013D0
	mov r8, r2
	movs r5, #0
	ldr r0, _080353A0 @ =0x000001FF
	mov ip, r0
	ldr r7, _080353A4 @ =0x0203B618
	ldr r6, _080353A8 @ =0x030013D8
_0803534A:
	lsls r0, r4, #1
	mov r1, r8
	adds r2, r0, r1
	adds r1, r0, r6
	strh r5, [r1]
	strh r5, [r2]
	adds r2, r4, #1
	adds r0, r0, r7
	mov r3, ip
	adds r3, #1
_0803535E:
	strh r5, [r0]
	adds r0, #8
	subs r3, #1
	cmp r3, #0
	bne _0803535E
	adds r4, r2, #0
	cmp r4, #3
	ble _0803534A
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803537C: .4byte 0x030044D0
_08035380: .4byte 0x085C98F4
_08035384: .4byte 0x00001B74
_08035388: .4byte 0x030013C8
_0803538C: .4byte 0x030013CA
_08035390: .4byte 0x03004580
_08035394: .4byte 0x000012B4
_08035398: .4byte 0x0203B218
_0803539C: .4byte 0x030013D0
_080353A0: .4byte 0x000001FF
_080353A4: .4byte 0x0203B618
_080353A8: .4byte 0x030013D8

	thumb_func_start sub_80353AC
sub_80353AC: @ 0x080353AC
	push {r4, lr}
	ldr r2, _08035408 @ =0x085C98F4
	ldr r0, [r2]
	movs r4, #0
	strb r4, [r0]
	ldr r0, [r2]
	strb r4, [r0, #1]
	ldr r1, [r2]
	movs r3, #0
	strh r4, [r1, #2]
	strh r4, [r1, #4]
	movs r0, #0xff
	strb r0, [r1, #6]
	ldr r0, [r2]
	strb r3, [r0, #7]
	ldr r0, [r2]
	strb r3, [r0, #8]
	ldr r0, [r2]
	strb r3, [r0, #9]
	ldr r0, [r2]
	strb r3, [r0, #0xf]
	ldr r0, [r2]
	strb r3, [r0, #0x10]
	ldr r0, [r2]
	strb r3, [r0, #0x11]
	ldr r0, [r2]
	adds r0, #0x2e
	strb r3, [r0]
	ldr r0, [r2]
	strb r3, [r0, #0xa]
	ldr r0, _0803540C @ =0x00004321
	movs r1, #3
	movs r2, #0x88
	bl sub_80351F4
	movs r0, #0
	bl sub_8036494
	bl sub_803522C
	ldr r0, _08035410 @ =0x030013C4
	str r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08035408: .4byte 0x085C98F4
_0803540C: .4byte 0x00004321
_08035410: .4byte 0x030013C4

	thumb_func_start sub_8035414
sub_8035414: @ 0x08035414
	push {r4, lr}
	ldr r0, _08035464 @ =0x04000134
	movs r3, #0
	strh r3, [r0]
	ldr r2, _08035468 @ =0x04000128
	ldr r1, _0803546C @ =0x030013B8
	movs r4, #0x80
	lsls r4, r4, #6
	adds r0, r4, #0
	ldrb r1, [r1]
	orrs r0, r1
	strh r0, [r2]
	ldr r0, _08035470 @ =0x0400010E
	strh r3, [r0]
	ldr r2, _08035474 @ =0x030044D4
	ldr r1, _08035478 @ =0x030044D0
	movs r0, #0
	str r0, [r1]
	str r0, [r2]
	ldr r1, _0803547C @ =0x03004568
	str r0, [r1]
	ldr r1, _08035480 @ =0x030013BC
	subs r0, #1
	str r0, [r1]
	ldr r1, _08035484 @ =sub_80354F0
	movs r0, #7
	bl SetIrqFunc
	ldr r1, _08035488 @ =sub_8035880
	movs r0, #6
	bl SetIrqFunc
	ldr r2, _0803548C @ =0x04000200
	ldrh r0, [r2]
	movs r1, #0xc0
	orrs r0, r1
	strh r0, [r2]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08035464: .4byte 0x04000134
_08035468: .4byte 0x04000128
_0803546C: .4byte 0x030013B8
_08035470: .4byte 0x0400010E
_08035474: .4byte 0x030044D4
_08035478: .4byte 0x030044D0
_0803547C: .4byte 0x03004568
_08035480: .4byte 0x030013BC
_08035484: .4byte sub_80354F0
_08035488: .4byte sub_8035880
_0803548C: .4byte 0x04000200

	thumb_func_start sub_8035490
sub_8035490: @ 0x08035490
	push {lr}
	ldr r1, _080354D4 @ =0x04000134
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r2, #0
	strh r0, [r1]
	subs r1, #0xc
	movs r0, #0
	strh r0, [r1]
	ldr r2, _080354D8 @ =0x030044D4
	ldr r1, _080354DC @ =0x030044D0
	movs r0, #0
	str r0, [r1]
	str r0, [r2]
	ldr r1, _080354E0 @ =0x03004568
	str r0, [r1]
	ldr r1, _080354E4 @ =0x030013BC
	subs r0, #1
	str r0, [r1]
	movs r0, #7
	movs r1, #0
	bl SetIrqFunc
	movs r0, #6
	movs r1, #0
	bl SetIrqFunc
	ldr r2, _080354E8 @ =0x04000200
	ldrh r1, [r2]
	ldr r0, _080354EC @ =0x0000FF3F
	ands r0, r1
	strh r0, [r2]
	pop {r0}
	bx r0
	.align 2, 0
_080354D4: .4byte 0x04000134
_080354D8: .4byte 0x030044D4
_080354DC: .4byte 0x030044D0
_080354E0: .4byte 0x03004568
_080354E4: .4byte 0x030013BC
_080354E8: .4byte 0x04000200
_080354EC: .4byte 0x0000FF3F

	thumb_func_start sub_80354F0
sub_80354F0: @ 0x080354F0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	movs r0, #0
	mov sb, r0
	ldr r0, _08035584 @ =0x030044D4
	movs r2, #1
	str r2, [r0]
	ldr r1, _08035588 @ =0x085C98F4
	ldr r0, [r1]
	mov r3, sb
	strb r3, [r0, #0x1e]
	ldr r0, _0803558C @ =0x030044D0
	str r2, [r0]
	ldr r0, [r1]
	strb r3, [r0, #8]
	ldr r0, _08035590 @ =0x0400010E
	mov r5, sb
	strh r5, [r0]
	ldr r2, [r1]
	ldr r3, _08035594 @ =0x04000128
	ldrh r0, [r3]
	lsls r1, r0, #0x10
	strh r0, [r2, #2]
	ldrh r0, [r2, #4]
	cmp r0, #6
	beq _08035534
	lsrs r0, r1, #0x14
	movs r1, #3
	ands r0, r1
	strb r0, [r2, #6]
_08035534:
	ldr r0, _08035598 @ =0x04000120
	ldr r1, [r0, #4]
	ldr r0, [r0]
	str r0, [sp]
	str r1, [sp, #4]
	ldr r1, _0803559C @ =0x030013B8
	movs r2, #0xc0
	lsls r2, r2, #7
	adds r0, r2, #0
	ldrb r1, [r1]
	orrs r0, r1
	strh r0, [r3]
	ldr r0, _080355A0 @ =0x00007FFF
	strh r0, [r3, #2]
	movs r5, #0
	ldr r3, _080355A4 @ =0x0000FFFF
	mov sl, r3
	mov r4, sp
	movs r7, #0
_0803555A:
	ldrh r0, [r4]
	cmp r0, #0
	beq _080355A8
	cmp r0, sl
	beq _080355A8
	ldr r1, _08035588 @ =0x085C98F4
	ldr r0, [r1]
	adds r0, #0xb
	adds r2, r0, r5
	ldrb r0, [r2]
	cmp r0, #0
	bne _08035576
	movs r0, #1
	strb r0, [r2]
_08035576:
	ldr r1, [r1]
	movs r0, #1
	lsls r0, r5
	ldrb r2, [r1, #8]
	orrs r0, r2
	strb r0, [r1, #8]
	b _080355E2
	.align 2, 0
_08035584: .4byte 0x030044D4
_08035588: .4byte 0x085C98F4
_0803558C: .4byte 0x030044D0
_08035590: .4byte 0x0400010E
_08035594: .4byte 0x04000128
_08035598: .4byte 0x04000120
_0803559C: .4byte 0x030013B8
_080355A0: .4byte 0x00007FFF
_080355A4: .4byte 0x0000FFFF
_080355A8:
	lsls r0, r5, #0x18
	lsrs r0, r0, #0x18
	bl sub_8035CB0
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _080355E2
	ldr r0, _080355D4 @ =0x085C98F4
	ldr r1, [r0]
	adds r0, r1, #0
	adds r0, #0x12
	adds r0, r0, r7
	ldrh r0, [r0]
	cmp r0, sl
	bne _080355D8
	adds r0, r1, #0
	adds r0, #0x1a
	adds r0, r0, r5
	ldrb r1, [r0]
	adds r1, #1
	b _080355E0
	.align 2, 0
_080355D4: .4byte 0x085C98F4
_080355D8:
	adds r0, r1, #0
	adds r0, #0x1a
	adds r0, r0, r5
	movs r1, #0
_080355E0:
	strb r1, [r0]
_080355E2:
	ldr r3, _0803563C @ =0x085C98F4
	mov r8, r3
	ldr r6, [r3]
	adds r3, r6, #0
	adds r3, #0x12
	adds r3, r3, r7
	mov ip, r3
	ldr r1, _08035640 @ =0x0203B618
	ldr r2, _08035644 @ =0x030013D8
	adds r2, r7, r2
	ldrh r3, [r2]
	lsls r0, r3, #3
	adds r0, r7, r0
	adds r0, r0, r1
	ldrh r1, [r4]
	strh r1, [r0]
	ldr r0, _08035648 @ =0x0000FFFF
	ldrh r1, [r4]
	ands r0, r1
	mov r3, ip
	strh r0, [r3]
	ldrh r0, [r2]
	adds r0, #1
	ldr r1, _0803564C @ =0x000001FF
	mov ip, r1
	mov r3, ip
	ands r0, r3
	strh r0, [r2]
	adds r4, #2
	adds r7, #2
	adds r5, #1
	cmp r5, #3
	ble _0803555A
	mov r4, r8
	adds r0, r6, #0
	ldrh r5, [r0, #4]
	cmp r5, #4
	bls _08035708
	ldrb r0, [r0, #1]
	cmp r0, #1
	beq _08035650
	cmp r0, #3
	beq _080356B0
	b _08035708
	.align 2, 0
_0803563C: .4byte 0x085C98F4
_08035640: .4byte 0x0203B618
_08035644: .4byte 0x030013D8
_08035648: .4byte 0x0000FFFF
_0803564C: .4byte 0x000001FF
_08035650:
	ldr r0, _0803569C @ =0x030013CA
	ldr r2, _080356A0 @ =0x030013C8
	ldrh r3, [r2]
	ldrh r0, [r0]
	cmp r0, r3
	beq _08035676
	ldr r1, _080356A4 @ =0x0203B218
	lsls r0, r3, #1
	adds r0, r0, r1
	ldrh r1, [r0]
	add r0, sp, #8
	strh r1, [r0]
	adds r1, r3, #1
	mov r3, ip
	ands r1, r3
	strh r1, [r2]
	movs r1, #1
	bl sub_8036078
_08035676:
	ldr r1, [r4]
	movs r0, #6
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bne _08035708
	ldr r5, _080356A8 @ =0x00001B7C
	adds r2, r1, r5
	ldrh r0, [r2]
	cmp r0, #0
	beq _08035708
	ldr r1, _080356AC @ =0x0400010C
	ldrh r2, [r2]
	rsbs r0, r2, #0
	str r0, [r1]
	adds r1, #2
	movs r0, #0xc3
	strh r0, [r1]
	b _08035708
	.align 2, 0
_0803569C: .4byte 0x030013CA
_080356A0: .4byte 0x030013C8
_080356A4: .4byte 0x0203B218
_080356A8: .4byte 0x00001B7C
_080356AC: .4byte 0x0400010C
_080356B0:
	movs r0, #6
	ldrsb r0, [r6, r0]
	cmp r0, #0
	beq _080356CA
	adds r0, r6, #0
	adds r0, #0x30
	movs r1, #1
	bl sub_8036078
	mov r0, r8
	ldr r1, [r0]
	ldr r0, _08035720 @ =0x00005FFF
	strh r0, [r1, #0x30]
_080356CA:
	movs r5, #0
	ldr r6, _08035724 @ =0x00009ABC
	mov r4, sp
_080356D0:
	lsls r0, r5, #0x18
	lsrs r0, r0, #0x18
	bl sub_8035CB0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080356EE
	ldrh r1, [r4]
	cmp r1, r6
	beq _080356EE
	mov r0, sb
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov sb, r0
_080356EE:
	adds r4, #2
	adds r5, #1
	cmp r5, #3
	ble _080356D0
	mov r2, sb
	cmp r2, #0
	bne _08035708
	ldr r0, _08035728 @ =0x085C98F4
	ldr r0, [r0]
	ldr r3, _0803572C @ =0x00001B7E
	adds r0, r0, r3
	movs r1, #1
	strh r1, [r0]
_08035708:
	ldr r1, _08035730 @ =0x030044D0
	movs r0, #0
	str r0, [r1]
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08035720: .4byte 0x00005FFF
_08035724: .4byte 0x00009ABC
_08035728: .4byte 0x085C98F4
_0803572C: .4byte 0x00001B7E
_08035730: .4byte 0x030044D0

	thumb_func_start sub_8035734
sub_8035734: @ 0x08035734
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r0, _08035770 @ =0x085C98F4
	ldr r2, [r0]
	adds r5, r0, #0
	ldrh r0, [r2, #4]
	cmp r0, #4
	bhi _08035746
	b _08035874
_08035746:
	ldrb r0, [r2, #1]
	cmp r0, #0
	bne _0803574E
	b _08035874
_0803574E:
	ldrb r0, [r2, #0x1e]
	adds r0, #1
	strb r0, [r2, #0x1e]
	ldr r1, [r5]
	ldrh r0, [r1, #4]
	cmp r0, #6
	bne _080357DC
	adds r0, r1, #0
	adds r0, #0x21
	ldrb r0, [r0]
	cmp r0, #2
	beq _0803578E
	cmp r0, #2
	bgt _08035774
	cmp r0, #1
	beq _080357B4
	b _080357DC
	.align 2, 0
_08035770: .4byte 0x085C98F4
_08035774:
	cmp r0, #3
	bne _080357DC
	ldrb r0, [r1, #0x1e]
	cmp r0, #0x3c
	bls _0803578E
	movs r0, #6
	ldrsb r0, [r1, r0]
	adds r1, #0xb
	adds r1, r1, r0
	movs r0, #0
	strb r0, [r1]
	bl sub_8073510
_0803578E:
	ldr r4, _08035800 @ =0x085C98F4
	ldr r0, [r4]
	ldrb r0, [r0, #1]
	cmp r0, #0
	beq _080357B4
	bl sub_8035CF8
	lsls r0, r0, #0x18
	asrs r2, r0, #0x18
	cmp r2, #0
	bne _080357B4
	ldr r0, [r4]
	movs r1, #6
	ldrsb r1, [r0, r1]
	adds r0, #0xb
	adds r0, r0, r1
	strb r2, [r0]
	bl sub_8073510
_080357B4:
	movs r4, #0
	ldr r5, _08035800 @ =0x085C98F4
_080357B8:
	ldr r0, _08035800 @ =0x085C98F4
	ldr r1, [r0]
	adds r0, r1, #0
	adds r0, #0x1a
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x3c
	bls _080357D6
	adds r0, r1, #0
	adds r0, #0xb
	adds r0, r0, r4
	movs r1, #0
	strb r1, [r0]
	bl sub_8073510
_080357D6:
	adds r4, #1
	cmp r4, #3
	ble _080357B8
_080357DC:
	adds r4, r5, #0
	ldr r1, [r4]
	ldrb r0, [r1, #1]
	adds r6, r0, #0
	cmp r6, #1
	bne _08035850
	ldrb r5, [r1, #0x10]
	cmp r5, #0
	bne _08035832
	ldrb r1, [r1, #0x11]
	cmp r1, #0x3c
	bls _08035804
	bl sub_8073510
	ldr r1, [r4]
	movs r0, #2
	strh r0, [r1, #4]
	b _08035874
	.align 2, 0
_08035800: .4byte 0x085C98F4
_08035804:
	mov r0, sp
	bl sub_80361A4
	cmp r0, #0
	beq _08035832
	ldr r1, [sp]
	adds r1, #6
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	bl sub_8035DC8
	lsls r0, r0, #0x10
	cmp r0, #0
	ble _08035832
	ldr r0, [r4]
	strb r5, [r0, #0x10]
	ldr r1, [r4]
	ldrb r0, [r1, #0x11]
	adds r0, #1
	strb r0, [r1, #0x11]
	ldr r0, [r4]
	adds r0, #0x2e
	strb r6, [r0]
_08035832:
	ldr r2, _0803584C @ =0x085C98F4
	ldr r1, [r2]
	ldrb r0, [r1, #0x10]
	adds r0, #1
	strb r0, [r1, #0x10]
	ldr r4, [r2]
	ldrb r0, [r4, #0x10]
	movs r1, #0x26
	bl __umodsi3
	strb r0, [r4, #0x10]
	b _08035874
	.align 2, 0
_0803584C: .4byte 0x085C98F4
_08035850:
	subs r0, #2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _08035874
	movs r0, #6
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bne _08035874
	adds r0, r1, #0
	adds r0, #0x30
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8036078
	ldr r1, [r5]
	ldr r0, _0803587C @ =0x00005FFF
	strh r0, [r1, #0x30]
_08035874:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803587C: .4byte 0x00005FFF

	thumb_func_start sub_8035880
sub_8035880: @ 0x08035880
	ldr r1, _08035898 @ =0x0400010E
	movs r0, #0
	strh r0, [r1]
	ldr r2, _0803589C @ =0x04000128
	ldr r1, _080358A0 @ =0x030013B8
	movs r3, #0xc1
	lsls r3, r3, #7
	adds r0, r3, #0
	ldrb r1, [r1]
	orrs r0, r1
	strh r0, [r2]
	bx lr
	.align 2, 0
_08035898: .4byte 0x0400010E
_0803589C: .4byte 0x04000128
_080358A0: .4byte 0x030013B8

	thumb_func_start sub_80358A4
sub_80358A4: @ 0x080358A4
	push {r4, r5, lr}
	sub sp, #0x10
	adds r2, r0, #0
	mov r1, sp
	ldr r0, _080358D4 @ =0x0810DBBC
	ldm r0!, {r3, r4, r5}
	stm r1!, {r3, r4, r5}
	ldr r0, [r0]
	str r0, [r1]
	ldr r0, _080358D8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080358CA
	lsls r0, r2, #2
	add r0, sp
	ldrh r0, [r0]
	bl m4aSongNumStart
_080358CA:
	add sp, #0x10
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080358D4: .4byte 0x0810DBBC
_080358D8: .4byte gPlaySt

	thumb_func_start sub_80358DC
sub_80358DC: @ 0x080358DC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _08035930 @ =0x085C98F4
	ldr r2, [r0]
	ldrb r1, [r2, #1]
	cmp r1, #1
	beq _080358EE
	b _08035C4A
_080358EE:
	movs r0, #6
	ldrsb r0, [r2, r0]
	lsls r1, r0
	ldrb r0, [r2, #0xf]
	orrs r1, r0
	strb r1, [r2, #0xf]
	movs r7, #0
_080358FC:
	lsls r4, r7, #0x18
	asrs r0, r4, #0x18
	ldr r5, _08035930 @ =0x085C98F4
	ldr r1, [r5]
	adds r1, #0x32
	bl sub_8035EC0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r1, r0, #0
	adds r2, r7, #1
	mov r8, r2
	cmp r0, #0
	bne _0803591A
	b _08035C42
_0803591A:
	cmp r0, #0x16
	beq _08035948
	cmp r0, #0x16
	bgt _08035934
	cmp r0, #4
	bne _08035928
	b _08035A78
_08035928:
	cmp r0, #0xa
	beq _08035948
	b _08035C42
	.align 2, 0
_08035930: .4byte 0x085C98F4
_08035934:
	cmp r0, #0x2e
	beq _08035948
	cmp r0, #0x2e
	bgt _08035942
	cmp r0, #0x2a
	beq _08035948
	b _08035C42
_08035942:
	cmp r1, #0x80
	beq _08035948
	b _08035C42
_08035948:
	ldr r6, _080359A0 @ =0x085C98F4
	ldr r3, [r6]
	adds r5, r3, #0
	adds r5, #0x32
	ldrb r0, [r5]
	cmp r0, #0x1c
	beq _080359D4
	adds r4, r7, #1
	mov r8, r4
	cmp r0, #0x1f
	beq _08035960
	b _08035C42
_08035960:
	ldrb r0, [r5, #1]
	ldrb r1, [r5, #1]
	ldrb r2, [r3, #6]
	cmp r1, r2
	bne _0803596C
	b _08035C42
_0803596C:
	lsls r0, r0, #1
	adds r2, r3, #0
	adds r2, #0x26
	adds r0, r2, r0
	ldrh r4, [r5, #2]
	ldrh r0, [r0]
	cmp r4, r0
	beq _080359A8
	ldr r0, _080359A4 @ =0x0300456C
	movs r1, #0x1e
	strb r1, [r0]
	ldrb r3, [r3, #6]
	lsls r1, r3, #4
	ldrb r3, [r5, #1]
	orrs r1, r3
	strb r1, [r0, #1]
	ldrb r5, [r5, #1]
	lsls r1, r5, #1
	adds r1, r2, r1
	ldrh r1, [r1]
	strh r1, [r0, #2]
	movs r1, #4
	bl sub_8035DC8
	b _080358FC
	.align 2, 0
_080359A0: .4byte 0x085C98F4
_080359A4: .4byte 0x0300456C
_080359A8:
	adds r0, r5, #0
	bl sub_8036130
	ldr r0, _080359D0 @ =0x0300456C
	movs r1, #0x1e
	strb r1, [r0]
	ldr r2, [r6]
	ldrb r4, [r2, #6]
	lsls r1, r4, #4
	ldrb r3, [r5, #1]
	orrs r1, r3
	strb r1, [r0, #1]
	ldrb r5, [r5, #1]
	lsls r1, r5, #1
	adds r2, #0x26
	adds r2, r2, r1
	ldrh r1, [r2]
	adds r1, #1
	strh r1, [r0, #2]
	b _08035A68
	.align 2, 0
_080359D0: .4byte 0x0300456C
_080359D4:
	movs r2, #0
	lsls r1, r7, #4
	adds r0, r7, #1
	mov r8, r0
	ldr r0, _08035A38 @ =0x0203C618
	subs r1, r1, r7
	adds r3, #0x38
	adds r0, #0xa1
	adds r1, r1, r0
_080359E6:
	adds r0, r3, r2
	ldrb r0, [r0]
	strb r0, [r1]
	adds r1, #1
	adds r2, #1
	cmp r2, #0xe
	ble _080359E6
	lsrs r0, r4, #0x18
	bl sub_8035CB0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08035A12
	ldr r0, _08035A3C @ =0x085C98F4
	ldr r0, [r0]
	ldrb r1, [r0]
	ldrb r2, [r5, #2]
	cmp r1, r2
	bne _08035A12
	ldrh r0, [r0, #4]
	cmp r0, #5
	bls _08035A20
_08035A12:
	lsrs r0, r4, #0x18
	bl sub_8035CB0
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08035A44
_08035A20:
	ldr r0, _08035A3C @ =0x085C98F4
	ldr r2, [r0]
	movs r0, #6
	ldrsb r0, [r2, r0]
	cmp r0, #0
	beq _08035A2E
	b _08035C42
_08035A2E:
	ldr r0, _08035A40 @ =0x0300456C
	movs r1, #0x16
	strb r1, [r0]
	ldrb r1, [r2, #6]
	b _08035A64
	.align 2, 0
_08035A38: .4byte 0x0203C618
_08035A3C: .4byte 0x085C98F4
_08035A40: .4byte 0x0300456C
_08035A44:
	ldr r0, _08035A70 @ =0x085C98F4
	ldr r1, [r0]
	movs r0, #6
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq _08035A52
	b _08035C42
_08035A52:
	movs r2, #0x15
	ldrb r3, [r1]
	ldrb r5, [r5, #2]
	cmp r3, r5
	beq _08035A5E
	movs r2, #0x17
_08035A5E:
	ldr r0, _08035A74 @ =0x0300456C
	strb r2, [r0]
	ldrb r1, [r1, #6]
_08035A64:
	strb r1, [r0, #1]
	strh r7, [r0, #2]
_08035A68:
	movs r1, #4
	bl sub_8035DC8
	b _08035C42
	.align 2, 0
_08035A70: .4byte 0x085C98F4
_08035A74: .4byte 0x0300456C
_08035A78:
	ldr r0, [r5]
	adds r5, r0, #0
	adds r5, #0x32
	ldrb r0, [r5]
	subs r0, #0x14
	cmp r0, #0xa
	bls _08035A88
	b _08035C42
_08035A88:
	lsls r0, r0, #2
	ldr r1, _08035A94 @ =_08035A98
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08035A94: .4byte _08035A98
_08035A98: @ jump table
	.4byte _08035C38 @ case 0
	.4byte _08035BD0 @ case 1
	.4byte _08035BFC @ case 2
	.4byte _08035B8C @ case 3
	.4byte _08035C42 @ case 4
	.4byte _08035AC4 @ case 5
	.4byte _08035C42 @ case 6
	.4byte _08035C42 @ case 7
	.4byte _08035C42 @ case 8
	.4byte _08035C42 @ case 9
	.4byte _08035ADC @ case 10
_08035AC4:
	ldr r0, _08035AD8 @ =0x085C98F4
	ldr r1, [r0]
	movs r0, #1
	ldrb r5, [r5, #1]
	lsls r0, r5
	ldrb r4, [r1, #0xa]
	orrs r0, r4
	strb r0, [r1, #0xa]
	b _08035C3E
	.align 2, 0
_08035AD8: .4byte 0x085C98F4
_08035ADC:
	ldr r6, _08035B80 @ =0x085C98F4
	ldr r3, [r6]
	adds r0, r3, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	adds r7, #1
	mov r8, r7
	cmp r0, #0
	bne _08035AF0
	b _08035C42
_08035AF0:
	ldrb r2, [r5, #1]
	lsrs r4, r2, #4
	movs r1, #6
	ldrsb r1, [r3, r1]
	cmp r4, r1
	bne _08035AFE
	b _08035C42
_08035AFE:
	movs r0, #0xf
	ands r0, r2
	cmp r0, r1
	beq _08035B08
	b _08035C42
_08035B08:
	ldrh r0, [r3, #0x24]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r5, [r5, #2]
	cmp r5, r0
	beq _08035B18
	b _08035C42
_08035B18:
	movs r0, #1
	lsls r0, r4
	ldrb r1, [r3, #0xf]
	orrs r0, r1
	strb r0, [r3, #0xf]
	ldr r0, _08035B84 @ =0x030013C0
	ldr r1, [r0]
	ldr r0, [r6]
	ldrb r0, [r0, #0xf]
	strb r0, [r1]
	ldr r4, [r6]
	ldrb r0, [r4, #9]
	ldrb r2, [r4, #0xf]
	ands r0, r2
	ldrb r3, [r4, #9]
	cmp r0, r3
	beq _08035B3C
	b _08035C42
_08035B3C:
	ldrh r0, [r4, #0x24]
	adds r0, #1
	movs r3, #0
	strh r0, [r4, #0x24]
	ldr r2, _08035B88 @ =0x00001B74
	adds r1, r4, r2
	movs r0, #0x8c
	ldrb r1, [r1]
	muls r0, r1, r0
	adds r0, r4, r0
	movs r4, #0x9c
	lsls r4, r4, #1
	adds r0, r0, r4
	strb r3, [r0]
	ldr r0, [r6]
	adds r0, r0, r2
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	ldr r1, [r6]
	adds r1, r1, r2
	movs r0, #0x1f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	ldr r0, [r6]
	adds r0, #0x2e
	strb r3, [r0]
	ldr r0, [r6]
	strb r3, [r0, #0xf]
	strb r3, [r0, #0x11]
	strb r3, [r0, #0x10]
	b _08035C42
	.align 2, 0
_08035B80: .4byte 0x085C98F4
_08035B84: .4byte 0x030013C0
_08035B88: .4byte 0x00001B74
_08035B8C:
	ldrb r0, [r5, #2]
	bl sub_8035CB0
	lsls r0, r0, #0x18
	adds r7, #1
	mov r8, r7
	cmp r0, #0
	bne _08035C42
	ldr r3, _08035BCC @ =0x085C98F4
	ldr r0, [r3]
	movs r1, #6
	ldrsb r1, [r0, r1]
	adds r0, #0xb
	adds r0, r0, r1
	movs r2, #2
	strb r2, [r0]
	ldr r1, [r3]
	movs r0, #0x30
	ldrh r4, [r1, #2]
	ands r0, r4
	lsrs r0, r0, #4
	adds r1, #0xb
	adds r1, r1, r0
	strb r2, [r1]
	ldr r0, [r3]
	adds r0, #0xb
	ldrh r5, [r5, #2]
	adds r0, r5, r0
	strb r2, [r0]
	ldr r1, [r3]
	b _08035BF0
	.align 2, 0
_08035BCC: .4byte 0x085C98F4
_08035BD0:
	ldrb r0, [r5, #2]
	bl sub_8035CB0
	lsls r0, r0, #0x18
	adds r7, #1
	mov r8, r7
	cmp r0, #0
	bne _08035C42
	ldr r2, _08035BF8 @ =0x085C98F4
	ldr r0, [r2]
	adds r0, #0xb
	ldrh r5, [r5, #2]
	adds r0, r5, r0
	movs r1, #2
	strb r1, [r0]
	ldr r1, [r2]
_08035BF0:
	movs r0, #6
	strh r0, [r1, #4]
	b _08035C42
	.align 2, 0
_08035BF8: .4byte 0x085C98F4
_08035BFC:
	ldr r0, _08035C30 @ =0x0203C618
	adds r0, #0x9c
	ldrh r1, [r5, #2]
	adds r0, r1, r0
	movs r4, #0
	movs r2, #1
	strb r2, [r0]
	ldr r3, _08035C34 @ =0x085C98F4
	ldr r0, [r3]
	adds r0, #0xb
	ldrh r1, [r5, #2]
	adds r0, r1, r0
	movs r1, #5
	strb r1, [r0]
	ldr r0, [r3]
	ldrh r1, [r5, #2]
	lsls r2, r1
	ldrb r1, [r0, #9]
	orrs r2, r1
	strb r2, [r0, #9]
	ldr r0, [r3]
	adds r0, #0x1a
	ldrh r5, [r5, #2]
	adds r0, r5, r0
	strb r4, [r0]
	b _08035C3E
	.align 2, 0
_08035C30: .4byte 0x0203C618
_08035C34: .4byte 0x085C98F4
_08035C38:
	ldrb r0, [r5, #1]
	bl sub_80358A4
_08035C3E:
	adds r7, #1
	mov r8, r7
_08035C42:
	mov r7, r8
	cmp r7, #3
	bgt _08035C4A
	b _080358FC
_08035C4A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start nullsub_16
nullsub_16: @ 0x08035C54
	bx lr
	.align 2, 0

	thumb_func_start sub_8035C58
sub_8035C58: @ 0x08035C58
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #0
_08035C5E:
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	bl sub_8035CB0
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08035C74
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08035C74:
	adds r4, #1
	cmp r4, #3
	ble _08035C5E
	adds r0, r5, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8035C84
sub_8035C84: @ 0x08035C84
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #0
_08035C8A:
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	bl sub_8035CD4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08035CA0
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08035CA0:
	adds r4, #1
	cmp r4, #3
	ble _08035C8A
	adds r0, r5, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8035CB0
sub_8035CB0: @ 0x08035CB0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, _08035CCC @ =0x085C98F4
	ldr r1, [r1]
	ldrb r1, [r1, #9]
	asrs r1, r0
	adds r0, r1, #0
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	bne _08035CD0
	movs r0, #0
	b _08035CD2
	.align 2, 0
_08035CCC: .4byte 0x085C98F4
_08035CD0:
	movs r0, #1
_08035CD2:
	bx lr

	thumb_func_start sub_8035CD4
sub_8035CD4: @ 0x08035CD4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r1, _08035CF0 @ =0x085C98F4
	ldr r1, [r1]
	ldrb r1, [r1, #8]
	asrs r1, r0
	adds r0, r1, #0
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	bne _08035CF4
	movs r0, #0
	b _08035CF6
	.align 2, 0
_08035CF0: .4byte 0x085C98F4
_08035CF4:
	movs r0, #1
_08035CF6:
	bx lr

	thumb_func_start sub_8035CF8
sub_8035CF8: @ 0x08035CF8
	push {r4, lr}
	ldr r2, _08035D24 @ =0x085C98F4
	ldr r3, [r2]
	ldrh r1, [r3, #2]
	movs r0, #0
	strh r0, [r3, #2]
	movs r4, #8
	ands r1, r4
	cmp r1, #0
	bne _08035D2C
	ldr r0, _08035D28 @ =0x04000128
	ldrh r1, [r0]
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	bne _08035D2C
	adds r1, r3, #0
	adds r1, #0x20
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	b _08035D34
	.align 2, 0
_08035D24: .4byte 0x085C98F4
_08035D28: .4byte 0x04000128
_08035D2C:
	ldr r0, [r2]
	adds r0, #0x20
	movs r1, #0
	strb r1, [r0]
_08035D34:
	ldr r0, [r2]
	adds r0, #0x20
	ldrb r0, [r0]
	cmp r0, #0xa
	bhi _08035D42
	movs r0, #1
	b _08035D44
_08035D42:
	movs r0, #0
_08035D44:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8035D4C
sub_8035D4C: @ 0x08035D4C
	ldr r0, _08035D68 @ =0x085C98F4
	ldr r0, [r0]
	ldr r2, _08035D6C @ =0x00001B75
	adds r1, r0, r2
	ldr r3, _08035D70 @ =0x00001B74
	adds r0, r0, r3
	ldrb r2, [r1]
	ldrb r3, [r0]
	cmp r2, r3
	bhs _08035D74
	adds r0, r3, #0
	subs r0, #0x20
	subs r0, r2, r0
	b _08035D7A
	.align 2, 0
_08035D68: .4byte 0x085C98F4
_08035D6C: .4byte 0x00001B75
_08035D70: .4byte 0x00001B74
_08035D74:
	ldrb r1, [r1]
	ldrb r0, [r0]
	subs r0, r1, r0
_08035D7A:
	bx lr

	thumb_func_start sub_8035D7C
sub_8035D7C: @ 0x08035D7C
	push {r4, lr}
	movs r2, #0
	movs r1, #0
	ldr r4, _08035DBC @ =0x085C98F4
	ldr r0, [r4]
	adds r3, r0, #0
	adds r3, #0xb
_08035D8A:
	adds r0, r3, r1
	ldrb r0, [r0]
	cmp r0, #5
	bne _08035D94
	adds r2, #1
_08035D94:
	adds r1, #1
	cmp r1, #3
	ble _08035D8A
	ldr r0, [r4]
	ldrb r0, [r0, #9]
	cmp r0, #3
	bne _08035DA6
	cmp r2, #2
	beq _08035DB6
_08035DA6:
	cmp r0, #7
	bne _08035DAE
	cmp r2, #3
	beq _08035DB6
_08035DAE:
	cmp r0, #0xf
	bne _08035DC0
	cmp r2, #4
	bne _08035DC0
_08035DB6:
	movs r0, #1
	b _08035DC2
	.align 2, 0
_08035DBC: .4byte 0x085C98F4
_08035DC0:
	movs r0, #0
_08035DC2:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_8035DC8
sub_8035DC8: @ 0x08035DC8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sb, r0
	lsls r1, r1, #0x10
	lsrs r5, r1, #0x10
	movs r0, #0
	mov r8, r0
	ldr r0, _08035E68 @ =0x030013CA
	ldrh r3, [r0]
	cmp r5, #0x80
	bhi _08035E60
	lsrs r5, r1, #0x11
	ldr r1, _08035E6C @ =0x00004FFF
	adds r4, r5, r1
	ldr r2, _08035E70 @ =0x0203B218
	lsls r0, r3, #1
	adds r0, r0, r2
	strh r1, [r0]
	adds r3, #1
	ldr r6, _08035E74 @ =0x000001FF
	ands r3, r6
	ldr r0, _08035E78 @ =0x030013C8
	ldrh r1, [r0]
	mov ip, r2
	mov sl, r0
	cmp r3, r1
	beq _08035E60
	lsls r0, r3, #1
	add r0, ip
	strh r5, [r0]
	adds r3, #1
	ands r3, r6
	lsls r6, r3, #1
	adds r7, r3, #1
	cmp r3, r1
	beq _08035E60
	movs r2, #0
	cmp r2, r5
	bge _08035E3C
	mov r3, sb
_08035E1E:
	adds r2, #1
	ldrh r0, [r3]
	adds r1, r0, #0
	muls r1, r2, r1
	adds r0, r4, r1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	mvns r1, r1
	add r1, r8
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov r8, r1
	adds r3, #2
	cmp r2, r5
	blt _08035E1E
_08035E3C:
	mov r1, ip
	adds r0, r6, r1
	strh r4, [r0]
	ldr r4, _08035E74 @ =0x000001FF
	adds r3, r4, #0
	ands r3, r7
	mov r2, sl
	ldrh r1, [r2]
	cmp r3, r1
	beq _08035E60
	lsls r0, r3, #1
	add r0, ip
	mov r2, r8
	strh r2, [r0]
	adds r3, #1
	ands r3, r4
	cmp r3, r1
	bne _08035E7C
_08035E60:
	movs r0, #1
	rsbs r0, r0, #0
	b _08035EAC
	.align 2, 0
_08035E68: .4byte 0x030013CA
_08035E6C: .4byte 0x00004FFF
_08035E70: .4byte 0x0203B218
_08035E74: .4byte 0x000001FF
_08035E78: .4byte 0x030013C8
_08035E7C:
	movs r2, #0
	cmp r2, r5
	bge _08035EA4
	mov r8, ip
	adds r7, r4, #0
	mov r4, sb
	mov r6, sl
_08035E8A:
	lsls r0, r3, #1
	add r0, r8
	ldrh r1, [r4]
	strh r1, [r0]
	adds r3, #1
	ands r3, r7
	ldrh r0, [r6]
	cmp r3, r0
	beq _08035E60
	adds r4, #2
	adds r2, #1
	cmp r2, r5
	blt _08035E8A
_08035EA4:
	ldr r1, _08035EBC @ =0x030013CA
	strh r3, [r1]
	lsls r0, r5, #0x10
	asrs r0, r0, #0x10
_08035EAC:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08035EBC: .4byte 0x030013CA

	thumb_func_start sub_8035EC0
sub_8035EC0: @ 0x08035EC0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	str r1, [sp, #4]
	lsls r0, r0, #0x18
	movs r1, #0
	mov r8, r1
	movs r2, #0
	str r2, [sp, #0xc]
	ldr r1, _08035F38 @ =0x030013D0
	lsrs r3, r0, #0x18
	str r3, [sp]
	asrs r2, r0, #0x17
	adds r3, r2, r1
	ldr r0, _08035F3C @ =0x030013D8
	adds r7, r2, r0
	ldrh r5, [r7]
	mov sl, r1
	ldrh r0, [r3]
	cmp r0, r5
	beq _08035FC2
	ldr r1, _08035F40 @ =0x0203B618
	ldrh r4, [r3]
	lsls r0, r4, #3
	adds r0, r2, r0
	adds r0, r0, r1
	ldr r6, _08035F44 @ =0x00004FFF
	mov sb, r1
	ldrh r0, [r0]
	cmp r0, r6
	beq _08035F4C
	cmp r4, r5
	beq _08035F7A
	adds r4, r2, #0
	adds r2, r3, #0
	mov ip, r6
	adds r3, r7, #0
	ldr r6, _08035F48 @ =0x000001FF
	mov r5, sb
_08035F14:
	ldrh r0, [r2]
	adds r0, #1
	ands r0, r6
	strh r0, [r2]
	ldrh r1, [r2]
	lsls r0, r1, #3
	adds r0, r4, r0
	adds r0, r0, r5
	ldrh r0, [r0]
	cmp r0, ip
	bne _08035F30
	ldrh r7, [r3]
	cmp r1, r7
	bne _08035F4C
_08035F30:
	ldrh r0, [r3]
	cmp r1, r0
	bne _08035F14
	b _08035F7A
	.align 2, 0
_08035F38: .4byte 0x030013D0
_08035F3C: .4byte 0x030013D8
_08035F40: .4byte 0x0203B618
_08035F44: .4byte 0x00004FFF
_08035F48: .4byte 0x000001FF
_08035F4C:
	ldr r1, [sp]
	lsls r0, r1, #0x18
	asrs r1, r0, #0x17
	ldr r3, _08035F6C @ =0x030013D8
	adds r2, r1, r3
	add r1, sl
	ldrh r2, [r2]
	ldrh r1, [r1]
	adds r4, r0, #0
	cmp r2, r1
	bhs _08035F70
	movs r7, #0x80
	lsls r7, r7, #2
	adds r0, r2, r7
	subs r0, r0, r1
	b _08035F72
	.align 2, 0
_08035F6C: .4byte 0x030013D8
_08035F70:
	subs r0, r2, r1
_08035F72:
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	cmp r1, #4
	bhi _08035F80
_08035F7A:
	movs r0, #4
	rsbs r0, r0, #0
	b _08036068
_08035F80:
	asrs r0, r4, #0x17
	add r0, sl
	ldrh r3, [r0]
	adds r3, #1
	ldr r0, _08035F94 @ =0x000001FF
	cmp r3, r0
	bgt _08035F98
	lsls r0, r3, #0x10
	lsrs r0, r0, #0x10
	b _08035F9A
	.align 2, 0
_08035F94: .4byte 0x000001FF
_08035F98:
	movs r0, #0
_08035F9A:
	asrs r4, r4, #0x17
	lsls r0, r0, #3
	adds r0, r4, r0
	add r0, sb
	ldrh r6, [r0]
	cmp r6, #0x80
	bls _08035FBC
	mov r1, sl
	adds r0, r4, r1
	ldrh r1, [r0]
	adds r1, #1
	ldr r2, _08035FB8 @ =0x000001FF
	ands r1, r2
	strh r1, [r0]
	b _08035F7A
	.align 2, 0
_08035FB8: .4byte 0x000001FF
_08035FBC:
	adds r0, r6, #6
	cmp r0, r1
	ble _08035FC8
_08035FC2:
	movs r0, #2
	rsbs r0, r0, #0
	b _08036068
_08035FC8:
	mov r3, sl
	adds r2, r4, r3
	ldrh r0, [r2]
	adds r0, #2
	ldr r7, _0803605C @ =0x000001FF
	ands r0, r7
	strh r0, [r2]
	ldrh r1, [r2]
	lsls r0, r1, #3
	adds r0, r4, r0
	add r0, sb
	ldrh r0, [r0]
	str r0, [sp, #8]
	adds r1, #1
	ands r1, r7
	strh r1, [r2]
	ldrh r1, [r2]
	lsls r0, r1, #3
	adds r0, r4, r0
	add r0, sb
	ldrh r0, [r0]
	mov sl, r0
	adds r1, #1
	ands r1, r7
	strh r1, [r2]
	ldr r0, _08036060 @ =0x00004FFF
	add r0, r8
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	movs r3, #0
	cmp r3, r6
	bge _0803604A
	mov ip, r4
	adds r4, r2, #0
	ldr r5, [sp, #4]
_08036012:
	ldrh r7, [r4]
	lsls r0, r7, #3
	add r0, ip
	add r0, sb
	ldrh r2, [r0]
	adds r3, #1
	adds r1, r2, #0
	muls r1, r3, r1
	mov r7, r8
	adds r0, r7, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	mvns r1, r1
	ldr r0, [sp, #0xc]
	adds r1, r0, r1
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	str r1, [sp, #0xc]
	strh r2, [r5]
	ldrh r0, [r4]
	adds r0, #1
	ldr r1, _0803605C @ =0x000001FF
	ands r0, r1
	strh r0, [r4]
	adds r5, #2
	cmp r3, r6
	blt _08036012
_0803604A:
	ldr r2, [sp, #8]
	cmp r8, r2
	bne _08036056
	ldr r3, [sp, #0xc]
	cmp r3, sl
	beq _08036064
_08036056:
	movs r0, #3
	rsbs r0, r0, #0
	b _08036068
	.align 2, 0
_0803605C: .4byte 0x000001FF
_08036060: .4byte 0x00004FFF
_08036064:
	lsls r0, r6, #0x11
	asrs r0, r0, #0x10
_08036068:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8036078
sub_8036078: @ 0x08036078
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08036090 @ =0x085C98F4
	ldr r3, [r0]
	movs r2, #6
	ldrsb r2, [r3, r2]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _08036094
	adds r0, r2, #0
	b _080360B6
	.align 2, 0
_08036090: .4byte 0x085C98F4
_08036094:
	ldr r2, _080360BC @ =0x04000128
	ldrh r0, [r4]
	strh r0, [r2, #2]
	movs r0, #6
	ldrsb r0, [r3, r0]
	cmp r0, #0
	bne _080360B4
	cmp r1, #0
	bge _080360B4
	ldr r1, _080360C0 @ =0x030013B8
	movs r3, #0xc1
	lsls r3, r3, #7
	adds r0, r3, #0
	ldrb r1, [r1]
	orrs r0, r1
	strh r0, [r2]
_080360B4:
	movs r0, #0
_080360B6:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080360BC: .4byte 0x04000128
_080360C0: .4byte 0x030013B8

	thumb_func_start sub_80360C4
sub_80360C4: @ 0x080360C4
	push {r4, r5, r6, r7, lr}
	adds r2, r1, #0
	ldr r1, _080360EC @ =0x030013D0
	ldr r0, _080360F0 @ =0x030013D8
	ldrh r3, [r1]
	ldrh r0, [r0]
	cmp r3, r0
	bne _080360F8
	ldr r7, _080360F4 @ =0x00007FFF
	adds r0, r7, #0
	strh r0, [r2]
	adds r2, #2
	strh r0, [r2]
	adds r2, #2
	strh r0, [r2]
	strh r0, [r2, #2]
	movs r0, #2
	rsbs r0, r0, #0
	b _08036122
	.align 2, 0
_080360EC: .4byte 0x030013D0
_080360F0: .4byte 0x030013D8
_080360F4: .4byte 0x00007FFF
_080360F8:
	movs r4, #0
	ldr r6, _08036128 @ =0x0203B618
	ldr r5, _0803612C @ =0x000001FF
	adds r3, r1, #0
_08036100:
	lsls r0, r4, #1
	ldrh r7, [r3]
	lsls r1, r7, #3
	adds r0, r0, r1
	adds r0, r0, r6
	ldrh r0, [r0]
	strh r0, [r2]
	adds r2, #2
	ldrh r0, [r3]
	adds r0, #1
	ands r0, r5
	strh r0, [r3]
	adds r3, #2
	adds r4, #1
	cmp r4, #3
	ble _08036100
	movs r0, #0
_08036122:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08036128: .4byte 0x0203B618
_0803612C: .4byte 0x000001FF

	thumb_func_start sub_8036130
sub_8036130: @ 0x08036130
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r3, _08036198 @ =0x085C98F4
	ldr r2, [r3]
	ldr r0, _0803619C @ =0x00001B77
	adds r1, r2, r0
	movs r0, #0x8c
	ldrb r1, [r1]
	muls r0, r1, r0
	ldr r1, _080361A0 @ =0x000012B4
	adds r0, r0, r1
	adds r1, r2, r0
	ldrb r0, [r4]
	strb r0, [r1, #4]
	ldrb r0, [r4, #1]
	strb r0, [r1, #5]
	ldrh r0, [r4, #2]
	strh r0, [r1, #6]
	ldrh r0, [r4, #4]
	strh r0, [r1, #8]
	movs r2, #0
	adds r6, r3, #0
	ldrh r0, [r4, #4]
	cmp r2, r0
	bge _08036178
	adds r5, r1, #0
	adds r5, #0xa
	adds r3, r4, #6
_08036168:
	adds r0, r5, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	ldrh r1, [r4, #4]
	cmp r2, r1
	blt _08036168
_08036178:
	ldr r0, [r6]
	ldr r2, _0803619C @ =0x00001B77
	adds r0, r0, r2
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	ldr r1, [r6]
	adds r1, r1, r2
	movs r0, #0xf
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08036198: .4byte 0x085C98F4
_0803619C: .4byte 0x00001B77
_080361A0: .4byte 0x000012B4

	thumb_func_start sub_80361A4
sub_80361A4: @ 0x080361A4
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldr r0, _080361F4 @ =0x085C98F4
	ldr r3, [r0]
	ldr r0, _080361F8 @ =0x00001B74
	adds r4, r3, r0
	movs r6, #0x8c
	ldrb r1, [r4]
	adds r5, r1, #0
	muls r5, r6, r5
	adds r0, r3, r5
	movs r1, #0x9c
	lsls r1, r1, #1
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #0x1f
	bne _08036200
	ldr r1, _080361FC @ =0x030013C0
	movs r2, #0x9a
	lsls r2, r2, #1
	adds r0, r5, r2
	adds r0, r3, r0
	str r0, [r1]
	ldrb r1, [r4]
	adds r0, r1, #0
	muls r0, r6, r0
	adds r0, r3, r0
	movs r1, #0x9e
	lsls r1, r1, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	str r0, [r7]
	ldrb r4, [r4]
	adds r0, r4, #0
	muls r0, r6, r0
	adds r0, r0, r2
	adds r0, r3, r0
	adds r0, #4
	b _08036202
	.align 2, 0
_080361F4: .4byte 0x085C98F4
_080361F8: .4byte 0x00001B74
_080361FC: .4byte 0x030013C0
_08036200:
	movs r0, #0
_08036202:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8036208
sub_8036208: @ 0x08036208
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov ip, r0
	lsls r1, r1, #0x10
	lsrs r7, r1, #0x10
	ldr r6, _080362A4 @ =0x030013C4
	movs r0, #1
	str r0, [r6]
	ldr r4, _080362A8 @ =0x085C98F4
	ldr r1, [r4]
	ldr r2, _080362AC @ =0x00001B75
	adds r0, r1, r2
	movs r5, #0x8c
	ldrb r0, [r0]
	muls r0, r5, r0
	adds r1, r1, r0
	movs r3, #0x9a
	lsls r3, r3, #1
	adds r1, r1, r3
	movs r0, #0
	strb r0, [r1]
	ldr r1, [r4]
	adds r2, r1, r2
	ldrb r2, [r2]
	adds r0, r2, #0
	muls r0, r5, r0
	adds r0, r0, r3
	adds r5, r1, r0
	adds r2, r5, #4
	movs r0, #0x1f
	strb r0, [r5, #4]
	ldr r0, [r4]
	ldrb r0, [r0, #6]
	strb r0, [r2, #1]
	ldr r1, [r4]
	ldrh r0, [r1, #0x22]
	strh r0, [r2, #2]
	strh r7, [r2, #4]
	ldrh r0, [r1, #0x22]
	adds r0, #1
	strh r0, [r1, #0x22]
	movs r3, #0
	mov r8, r6
	adds r6, r4, #0
	cmp r3, r7
	bhs _0803627C
	adds r2, #6
_08036268:
	adds r1, r2, r3
	mov r4, ip
	adds r0, r4, r3
	ldrb r0, [r0]
	strb r0, [r1]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, r7
	blo _08036268
_0803627C:
	ldr r1, [r6]
	ldr r3, _080362AC @ =0x00001B75
	adds r1, r1, r3
	ldrb r0, [r1]
	adds r2, r0, #1
	movs r4, #0
	strb r2, [r1]
	ldr r2, [r6]
	adds r2, r2, r3
	movs r1, #0x1f
	ldrb r3, [r2]
	ands r1, r3
	strb r1, [r2]
	mov r1, r8
	str r4, [r1]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080362A4: .4byte 0x030013C4
_080362A8: .4byte 0x085C98F4
_080362AC: .4byte 0x00001B75

	thumb_func_start sub_80362B0
sub_80362B0: @ 0x080362B0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov sb, r0
	str r1, [sp]
	mov sl, r2
_080362C2:
	ldr r0, _080362F0 @ =0x085C98F4
	mov r8, r0
	ldr r2, [r0]
	ldr r7, _080362F4 @ =0x00001B76
	adds r1, r2, r7
	movs r0, #0x8c
	ldrb r1, [r1]
	muls r0, r1, r0
	ldr r1, _080362F8 @ =0x000012B4
	adds r0, r0, r1
	adds r5, r2, r0
	adds r6, r5, #4
	ldrb r3, [r5, #4]
	cmp r3, #0x1f
	bne _080362EA
	ldrb r0, [r6, #1]
	ldrb r1, [r6, #1]
	ldrb r3, [r2, #6]
	cmp r1, r3
	bne _080362FC
_080362EA:
	movs r0, #0
	b _08036424
	.align 2, 0
_080362F0: .4byte 0x085C98F4
_080362F4: .4byte 0x00001B76
_080362F8: .4byte 0x000012B4
_080362FC:
	lsls r0, r0, #1
	adds r3, r2, #0
	adds r3, #0x26
	adds r0, r3, r0
	ldrh r1, [r6, #2]
	ldrh r0, [r0]
	cmp r1, r0
	beq _08036348
	ldr r0, _08036344 @ =0x0300456C
	movs r1, #0x1e
	strb r1, [r0]
	ldrb r2, [r2, #6]
	lsls r1, r2, #4
	ldrb r2, [r6, #1]
	orrs r1, r2
	strb r1, [r0, #1]
	ldrb r6, [r6, #1]
	lsls r1, r6, #1
	adds r1, r3, r1
	ldrh r1, [r1]
	movs r4, #0
	strh r1, [r0, #2]
	movs r1, #4
	bl sub_8035DC8
	strb r4, [r5, #4]
	mov r3, r8
	ldr r0, [r3]
	adds r0, r0, r7
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	ldr r1, [r3]
	adds r1, r1, r7
	b _080363B6
	.align 2, 0
_08036344: .4byte 0x0300456C
_08036348:
	movs r2, #0
	ldrh r3, [r6, #4]
	cmp r2, r3
	bhs _0803636A
	adds r3, r5, #0
	adds r3, #0xa
_08036354:
	mov r0, sb
	adds r1, r0, r2
	adds r0, r3, r2
	ldrb r0, [r0]
	strb r0, [r1]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	ldrh r1, [r6, #4]
	cmp r2, r1
	blo _08036354
_0803636A:
	mov r2, sl
	cmp r2, #0
	beq _080363CC
	mov r0, sb
	bl _call_via_sl
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080363CC
	ldr r0, _080363C0 @ =0x0300456C
	movs r1, #0x1e
	strb r1, [r0]
	ldr r4, _080363C4 @ =0x085C98F4
	ldr r2, [r4]
	ldrb r3, [r2, #6]
	lsls r1, r3, #4
	ldrb r3, [r6, #1]
	orrs r1, r3
	strb r1, [r0, #1]
	ldrb r3, [r6, #1]
	lsls r1, r3, #1
	adds r2, #0x26
	adds r2, r2, r1
	ldrh r1, [r2]
	movs r5, #0
	strh r1, [r0, #2]
	movs r1, #4
	bl sub_8035DC8
	strb r5, [r6]
	ldr r0, [r4]
	ldr r2, _080363C8 @ =0x00001B76
	adds r0, r0, r2
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	ldr r1, [r4]
	adds r1, r1, r2
_080363B6:
	movs r0, #0xf
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	b _080362C2
	.align 2, 0
_080363C0: .4byte 0x0300456C
_080363C4: .4byte 0x085C98F4
_080363C8: .4byte 0x00001B76
_080363CC:
	movs r0, #0
	strb r0, [r6]
	ldrb r5, [r6, #1]
	ldr r4, _08036434 @ =0x085C98F4
	ldr r2, [r4]
	lsls r1, r5, #1
	adds r0, r2, #0
	adds r0, #0x26
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r1, #1
	strh r1, [r0]
	ldr r3, _08036438 @ =0x00001B76
	adds r2, r2, r3
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	ldr r1, [r4]
	adds r1, r1, r3
	movs r0, #0xf
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	ldr r0, [sp]
	strb r5, [r0]
	ldr r0, _0803643C @ =0x0300456C
	movs r1, #0x1e
	strb r1, [r0]
	ldr r2, [r4]
	ldrb r3, [r2, #6]
	lsls r1, r3, #4
	ldrb r3, [r6, #1]
	orrs r1, r3
	strb r1, [r0, #1]
	ldrb r3, [r6, #1]
	lsls r1, r3, #1
	adds r2, #0x26
	adds r2, r2, r1
	ldrh r1, [r2]
	strh r1, [r0, #2]
	movs r1, #4
	bl sub_8035DC8
	ldrh r0, [r6, #4]
_08036424:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08036434: .4byte 0x085C98F4
_08036438: .4byte 0x00001B76
_0803643C: .4byte 0x0300456C

	thumb_func_start sub_8036440
sub_8036440: @ 0x08036440
	push {lr}
	sub sp, #4
	ldr r1, _0803647C @ =0x00007FFF
	mov r0, sp
	strh r1, [r0]
	ldr r0, _08036480 @ =0x085C98F4
	ldr r1, [r0]
	movs r0, #0
	strb r0, [r1, #1]
	mov r0, sp
	movs r1, #1
	bl sub_8036078
	ldr r1, _08036484 @ =0x030013CA
	ldr r0, _08036488 @ =0x030013C8
	ldrh r0, [r0]
	strh r0, [r1]
	ldr r3, _0803648C @ =0x030013D0
	ldr r2, _08036490 @ =0x030013D8
	movs r1, #3
_08036468:
	ldrh r0, [r3]
	strh r0, [r2]
	adds r3, #2
	adds r2, #2
	subs r1, #1
	cmp r1, #0
	bge _08036468
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_0803647C: .4byte 0x00007FFF
_08036480: .4byte 0x085C98F4
_08036484: .4byte 0x030013CA
_08036488: .4byte 0x030013C8
_0803648C: .4byte 0x030013D0
_08036490: .4byte 0x030013D8

	thumb_func_start sub_8036494
sub_8036494: @ 0x08036494
	ldr r1, _080364A0 @ =0x085C98F4
	ldr r1, [r1]
	adds r1, #0x21
	strb r0, [r1]
	bx lr
	.align 2, 0
_080364A0: .4byte 0x085C98F4

	thumb_func_start sub_80364A4
sub_80364A4: @ 0x080364A4
	push {lr}
	sub sp, #4
	ldr r1, _080364F8 @ =0x00007FFF
	mov r0, sp
	strh r1, [r0]
	ldr r1, _080364FC @ =0x085C98F4
	ldr r0, [r1]
	movs r2, #0
	strb r2, [r0, #1]
	ldr r0, [r1]
	ldr r1, _08036500 @ =0x00001B7C
	adds r0, r0, r1
	strh r2, [r0]
	mov r0, sp
	movs r1, #1
	bl sub_8036078
	ldr r1, _08036504 @ =0x030013CA
	ldr r0, _08036508 @ =0x030013C8
	ldrh r0, [r0]
	strh r0, [r1]
	ldr r3, _0803650C @ =0x030013D0
	ldr r2, _08036510 @ =0x030013D8
	movs r1, #3
_080364D4:
	ldrh r0, [r3]
	strh r0, [r2]
	adds r3, #2
	adds r2, #2
	subs r1, #1
	cmp r1, #0
	bge _080364D4
	ldr r0, _080364FC @ =0x085C98F4
	ldr r2, [r0]
	ldr r0, _08036514 @ =0x00001B7E
	adds r1, r2, r0
	movs r0, #0
	strh r0, [r1]
	movs r0, #3
	strb r0, [r2, #1]
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_080364F8: .4byte 0x00007FFF
_080364FC: .4byte 0x085C98F4
_08036500: .4byte 0x00001B7C
_08036504: .4byte 0x030013CA
_08036508: .4byte 0x030013C8
_0803650C: .4byte 0x030013D0
_08036510: .4byte 0x030013D8
_08036514: .4byte 0x00001B7E

	thumb_func_start sub_8036518
sub_8036518: @ 0x08036518
	push {r4, lr}
	sub sp, #4
	ldr r1, _08036574 @ =0x00002586
	mov r0, sp
	strh r1, [r0]
	ldr r3, _08036578 @ =0x085C98F4
	ldr r1, [r3]
	movs r2, #0
	movs r0, #0
	strh r0, [r1, #4]
	strb r2, [r1, #1]
	ldr r0, [r3]
	ldr r1, _0803657C @ =0x00001B7C
	adds r0, r0, r1
	movs r1, #0x88
	strh r1, [r0]
	ldr r1, _08036580 @ =0x030013CA
	ldr r0, _08036584 @ =0x030013C8
	ldrh r0, [r0]
	strh r0, [r1]
	adds r4, r3, #0
	ldr r3, _08036588 @ =0x030013D0
	ldr r2, _0803658C @ =0x030013D8
	movs r1, #3
_08036548:
	ldrh r0, [r3]
	strh r0, [r2]
	adds r3, #2
	adds r2, #2
	subs r1, #1
	cmp r1, #0
	bge _08036548
	ldr r1, [r4]
	movs r0, #1
	strb r0, [r1, #1]
	ldr r1, [r4]
	movs r0, #6
	strh r0, [r1, #4]
	movs r1, #1
	rsbs r1, r1, #0
	mov r0, sp
	bl sub_8036078
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08036574: .4byte 0x00002586
_08036578: .4byte 0x085C98F4
_0803657C: .4byte 0x00001B7C
_08036580: .4byte 0x030013CA
_08036584: .4byte 0x030013C8
_08036588: .4byte 0x030013D0
_0803658C: .4byte 0x030013D8

	thumb_func_start sub_8036590
sub_8036590: @ 0x08036590
	push {r4, lr}
	sub sp, #4
	ldr r1, _080365EC @ =0x00002586
	mov r0, sp
	strh r1, [r0]
	ldr r3, _080365F0 @ =0x085C98F4
	ldr r1, [r3]
	movs r2, #0
	movs r0, #0
	strh r0, [r1, #4]
	strb r2, [r1, #1]
	ldr r0, [r3]
	ldr r1, _080365F4 @ =0x00001B7C
	adds r0, r0, r1
	movs r1, #0x18
	strh r1, [r0]
	ldr r1, _080365F8 @ =0x030013CA
	ldr r0, _080365FC @ =0x030013C8
	ldrh r0, [r0]
	strh r0, [r1]
	adds r4, r3, #0
	ldr r3, _08036600 @ =0x030013D0
	ldr r2, _08036604 @ =0x030013D8
	movs r1, #3
_080365C0:
	ldrh r0, [r3]
	strh r0, [r2]
	adds r3, #2
	adds r2, #2
	subs r1, #1
	cmp r1, #0
	bge _080365C0
	ldr r1, [r4]
	movs r0, #1
	strb r0, [r1, #1]
	ldr r1, [r4]
	movs r0, #6
	strh r0, [r1, #4]
	movs r1, #1
	rsbs r1, r1, #0
	mov r0, sp
	bl sub_8036078
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080365EC: .4byte 0x00002586
_080365F0: .4byte 0x085C98F4
_080365F4: .4byte 0x00001B7C
_080365F8: .4byte 0x030013CA
_080365FC: .4byte 0x030013C8
_08036600: .4byte 0x030013D0
_08036604: .4byte 0x030013D8

	thumb_func_start sub_8036608
sub_8036608: @ 0x08036608
	ldr r0, _08036614 @ =0x030013CA
	ldr r1, _08036618 @ =0x030013C8
	ldrh r1, [r1]
	strh r1, [r0]
	bx lr
	.align 2, 0
_08036614: .4byte 0x030013CA
_08036618: .4byte 0x030013C8

	thumb_func_start sub_803661C
sub_803661C: @ 0x0803661C
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r5, _08036678 @ =0x085C98F4
	ldr r1, [r5]
	adds r2, r1, #0
	adds r2, #0x2e
	movs r0, #0
	strb r0, [r2]
	strh r0, [r1, #0x22]
	strh r0, [r1, #0x24]
	ldr r1, [r5]
	strh r0, [r1, #0x2c]
	strh r0, [r1, #0x2a]
	strh r0, [r1, #0x28]
	strh r0, [r1, #0x26]
	bl sub_803522C
	mov r1, sp
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r0, [r0]
	strb r0, [r1]
	mov r2, sp
	ldrh r1, [r4, #0x36]
	lsrs r0, r1, #8
	strb r0, [r2, #1]
	mov r0, sp
	strb r1, [r0, #2]
	mov r1, sp
	adds r4, #0x3a
	ldrb r0, [r4]
	strb r0, [r1, #3]
	mov r0, sp
	movs r1, #4
	bl sub_8036208
	ldr r0, [r5]
	adds r0, #0x2e
	movs r1, #1
	strb r1, [r0]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08036678: .4byte 0x085C98F4

	thumb_func_start sub_803667C
sub_803667C: @ 0x0803667C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x2c]
	cmp r1, #0
	beq _0803668A
	bl _call_via_r1
_0803668A:
	ldr r5, _080366E8 @ =0x085C98F4
	ldr r1, [r5]
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r6, [r0]
	cmp r6, #0
	bne _080366E0
	ldrh r2, [r4, #0x38]
	ldrh r0, [r1, #0x24]
	subs r0, #1
	cmp r2, r0
	beq _080366BE
	ldr r0, [r4, #0x30]
	adds r0, #0x7a
	str r0, [r4, #0x30]
	movs r0, #0x64
	muls r0, r2, r0
	ldrh r1, [r4, #0x36]
	bl __divsi3
	adds r1, r4, #0
	adds r1, #0x3b
	strb r0, [r1]
	ldrh r0, [r4, #0x38]
	adds r0, #1
	strh r0, [r4, #0x38]
_080366BE:
	ldr r0, [r4, #0x30]
	movs r1, #0x7a
	bl sub_8036208
	ldr r0, [r5]
	adds r0, #0x2e
	movs r1, #1
	strb r1, [r0]
	ldr r0, [r5]
	strb r6, [r0, #0x10]
	ldrh r0, [r4, #0x38]
	ldrh r1, [r4, #0x36]
	cmp r0, r1
	blo _080366E0
	adds r0, r4, #0
	bl Proc_Break
_080366E0:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080366E8: .4byte 0x085C98F4

	thumb_func_start sub_80366EC
sub_80366EC: @ 0x080366EC
	push {lr}
	ldr r2, _08036710 @ =0x085C98F4
	ldr r1, [r2]
	adds r3, r1, #0
	adds r3, #0x2e
	movs r0, #0
	strb r0, [r3]
	strh r0, [r1, #0x22]
	strh r0, [r1, #0x24]
	ldr r1, [r2]
	strh r0, [r1, #0x2c]
	strh r0, [r1, #0x2a]
	strh r0, [r1, #0x28]
	strh r0, [r1, #0x26]
	bl sub_803522C
	pop {r0}
	bx r0
	.align 2, 0
_08036710: .4byte 0x085C98F4

	thumb_func_start sub_8036714
sub_8036714: @ 0x08036714
	push {r4, lr}
	sub sp, #8
	adds r4, r0, #0
	add r1, sp, #4
	mov r0, sp
	movs r2, #0
	bl sub_80362B0
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _08036750
	mov r0, sp
	ldrb r1, [r0]
	adds r0, r4, #0
	adds r0, #0x34
	strb r1, [r0]
	mov r0, sp
	ldrb r1, [r0, #1]
	lsls r1, r1, #8
	ldrb r0, [r0, #2]
	adds r0, r0, r1
	strh r0, [r4, #0x36]
	mov r0, sp
	ldrb r0, [r0, #3]
	adds r1, r4, #0
	adds r1, #0x3a
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08036750:
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8036758
sub_8036758: @ 0x08036758
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r5, _08036794 @ =gBuf
	ldrh r0, [r4, #0x36]
	subs r0, #1
	ldrh r1, [r4, #0x38]
	cmp r1, r0
	bge _08036798
	ldr r0, [r4, #0x30]
	mov r1, sp
	movs r2, #0
	bl sub_80362B0
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _080367E2
	ldr r0, [r4, #0x30]
	adds r0, #0x7a
	str r0, [r4, #0x30]
	movs r0, #0x64
	ldrh r1, [r4, #0x38]
	muls r0, r1, r0
	ldrh r1, [r4, #0x36]
	bl __divsi3
	adds r1, r4, #0
	adds r1, #0x3b
	strb r0, [r1]
	b _080367DC
	.align 2, 0
_08036794: .4byte gBuf
_08036798:
	adds r0, r5, #0
	mov r1, sp
	movs r2, #0
	bl sub_80362B0
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _080367E2
	movs r2, #0
	adds r3, r4, #0
	adds r3, #0x3a
	adds r6, r4, #0
	adds r6, #0x3b
	ldrb r0, [r3]
	cmp r2, r0
	bge _080367CE
_080367B8:
	ldr r1, [r4, #0x30]
	adds r0, r5, r2
	ldrb r0, [r0]
	strb r0, [r1]
	ldr r0, [r4, #0x30]
	adds r0, #1
	str r0, [r4, #0x30]
	adds r2, #1
	ldrb r1, [r3]
	cmp r2, r1
	blt _080367B8
_080367CE:
	movs r0, #0x64
	ldrh r1, [r4, #0x38]
	muls r0, r1, r0
	ldrh r1, [r4, #0x36]
	bl __divsi3
	strb r0, [r6]
_080367DC:
	ldrh r0, [r4, #0x38]
	adds r0, #1
	strh r0, [r4, #0x38]
_080367E2:
	ldr r1, [r4, #0x2c]
	cmp r1, #0
	beq _080367EE
	adds r0, r4, #0
	bl _call_via_r1
_080367EE:
	ldrh r0, [r4, #0x38]
	ldrh r1, [r4, #0x36]
	cmp r0, r1
	blo _080367FC
	adds r0, r4, #0
	bl Proc_Break
_080367FC:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_8036804
sub_8036804: @ 0x08036804
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	adds r4, r1, #0
	mov r8, r2
	lsls r3, r3, #0x18
	lsrs r6, r3, #0x18
	ldr r0, _08036820 @ =0x0079FF86
	cmp r4, r0
	bls _08036824
	movs r0, #1
	rsbs r0, r0, #0
	b _08036876
	.align 2, 0
_08036820: .4byte 0x0079FF86
_08036824:
	adds r0, r4, #0
	movs r1, #0x7a
	bl __udivsi3
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	adds r0, r4, #0
	movs r1, #0x7a
	bl __umodsi3
	adds r4, r0, #0
	cmp r4, #0
	beq _08036846
	adds r0, r5, #1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
_08036846:
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _08036880 @ =0x085C98F8
	ldr r1, [sp, #0x18]
	bl SpawnProcLocking
	adds r3, r0, #0
	str r7, [r3, #0x30]
	adds r0, #0x34
	movs r2, #0
	strb r6, [r0]
	mov r0, r8
	str r0, [r3, #0x2c]
	movs r1, #0
	strh r5, [r3, #0x36]
	adds r0, r3, #0
	adds r0, #0x3a
	strb r4, [r0]
	adds r0, #1
	strb r1, [r0]
	strh r2, [r3, #0x38]
	adds r0, #1
	strb r1, [r0]
	movs r0, #0
_08036876:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08036880: .4byte 0x085C98F8

	thumb_func_start sub_8036884
sub_8036884: @ 0x08036884
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r1, r2, #0
	ldr r0, _080368AC @ =0x085C9918
	bl SpawnProcLocking
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	adds r2, r0, #0
	adds r2, #0x3b
	movs r1, #0
	strb r1, [r2]
	movs r2, #0
	strh r1, [r0, #0x38]
	adds r0, #0x3c
	strb r2, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080368AC: .4byte 0x085C9918

	thumb_func_start sub_80368B0
sub_80368B0: @ 0x080368B0
	push {lr}
	ldr r0, _080368CC @ =0x085C98F8
	bl Proc_Find
	cmp r0, #0
	bne _080368D4
	ldr r0, _080368D0 @ =0x085C9918
	bl Proc_Find
	cmp r0, #0
	bne _080368D4
	movs r0, #0
	b _080368D6
	.align 2, 0
_080368CC: .4byte 0x085C98F8
_080368D0: .4byte 0x085C9918
_080368D4:
	movs r0, #1
_080368D6:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80368DC
sub_80368DC: @ 0x080368DC
	movs r3, #0
	b _080368E8
_080368E0:
	strb r2, [r1]
	adds r0, #1
	adds r1, #1
	adds r3, #1
_080368E8:
	ldrb r2, [r0]
	cmp r2, #0
	bne _080368E0
	ldrb r0, [r0]
	strb r0, [r1]
	adds r0, r3, #0
	bx lr
	.align 2, 0

	thumb_func_start sub_80368F8
sub_80368F8: @ 0x080368F8
	push {lr}
	bl sub_8035414
	bl sub_80353AC
	ldr r2, _08036914 @ =0x085C98F4
	ldr r1, [r2]
	movs r3, #0
	movs r0, #1
	strb r0, [r1, #1]
	ldr r0, [r2]
	strh r3, [r0, #4]
	pop {r0}
	bx r0
	.align 2, 0
_08036914: .4byte 0x085C98F4

	thumb_func_start sub_8036918
sub_8036918: @ 0x08036918
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r0, _0803695C @ =0x00002586
	mov r1, sp
	strh r0, [r1]
	bl sub_80350C8
	movs r5, #1
	rsbs r5, r5, #0
	cmp r0, r5
	beq _08036954
	ldr r4, _08036960 @ =0x085C98F4
	ldr r1, [r4]
	movs r0, #0
	strb r0, [r1, #0x11]
	ldr r1, [r4]
	movs r0, #5
	strh r0, [r1, #4]
	bl sub_80351E4
	ldr r1, [r4]
	strb r0, [r1, #6]
	mov r0, sp
	adds r1, r5, #0
	bl sub_8036078
	adds r0, r6, #0
	bl Proc_Break
_08036954:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803695C: .4byte 0x00002586
_08036960: .4byte 0x085C98F4

	thumb_func_start sub_8036964
sub_8036964: @ 0x08036964
	ldr r0, _08036970 @ =gBmSt
	movs r1, #0x40
	ldrb r2, [r0, #4]
	orrs r1, r2
	strb r1, [r0, #4]
	bx lr
	.align 2, 0
_08036970: .4byte gBmSt

	thumb_func_start sub_8036974
sub_8036974: @ 0x08036974
	ldr r1, _08036980 @ =gBmSt
	movs r0, #0xbf
	ldrb r2, [r1, #4]
	ands r0, r2
	strb r0, [r1, #4]
	bx lr
	.align 2, 0
_08036980: .4byte gBmSt

	thumb_func_start sub_8036984
sub_8036984: @ 0x08036984
	ldr r0, _08036990 @ =gBmSt
	ldrb r0, [r0, #4]
	lsrs r0, r0, #6
	movs r1, #1
	ands r0, r1
	bx lr
	.align 2, 0
_08036990: .4byte gBmSt

	thumb_func_start sub_8036994
sub_8036994: @ 0x08036994
	ldr r1, _0803699C @ =0x0203C618
	movs r0, #0xff
	strb r0, [r1, #4]
	bx lr
	.align 2, 0
_0803699C: .4byte 0x0203C618

	thumb_func_start sub_80369A0
sub_80369A0: @ 0x080369A0
	push {r4, lr}
	ldr r3, _080369D4 @ =gDispIo+0x3C
	ldr r1, _080369D8 @ =0x0000FFE0
	ldrh r2, [r3]
	ands r1, r2
	movs r2, #4
	orrs r1, r2
	ldr r2, _080369DC @ =0x0000E0FF
	ands r1, r2
	movs r4, #0xd8
	lsls r4, r4, #5
	adds r2, r4, #0
	orrs r1, r2
	strh r1, [r3]
	movs r1, #0x3f
	ldrb r2, [r3]
	ands r1, r2
	strb r1, [r3]
	movs r1, #0
	strb r1, [r3, #8]
	strb r1, [r3, #9]
	strb r1, [r3, #0xa]
	str r1, [r0, #0x58]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080369D4: .4byte gDispIo+0x3C
_080369D8: .4byte 0x0000FFE0
_080369DC: .4byte 0x0000E0FF

	thumb_func_start sub_80369E0
sub_80369E0: @ 0x080369E0
	push {r4, r5, lr}
	ldr r1, [r0, #0x58]
	adds r1, #1
	str r1, [r0, #0x58]
	movs r4, #0x3f
	adds r3, r4, #0
	ands r3, r1
	cmp r3, #0x1f
	ble _080369F6
	movs r0, #0x40
	subs r3, r0, r3
_080369F6:
	cmp r3, #0x10
	ble _080369FC
	movs r3, #0x10
_080369FC:
	ldr r2, _08036A34 @ =gDispIo+0x3C
	ldr r0, _08036A38 @ =0x0000FFE0
	ldrh r1, [r2]
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	ldr r1, _08036A3C @ =0x0000E0FF
	ands r0, r1
	movs r5, #0xd8
	lsls r5, r5, #5
	adds r1, r5, #0
	orrs r0, r1
	strh r0, [r2]
	adds r0, r4, #0
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	movs r1, #0
	strb r3, [r2, #8]
	movs r0, #0x10
	subs r0, r0, r3
	strb r0, [r2, #9]
	strb r1, [r2, #0xa]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08036A34: .4byte gDispIo+0x3C
_08036A38: .4byte 0x0000FFE0
_08036A3C: .4byte 0x0000E0FF

	thumb_func_start sub_8036A40
sub_8036A40: @ 0x08036A40
	ldr r0, _08036A50 @ =gDispIo
	ldrh r1, [r0, #0x20]
	adds r1, #1
	strh r1, [r0, #0x20]
	ldrh r1, [r0, #0x24]
	subs r1, #1
	strh r1, [r0, #0x24]
	bx lr
	.align 2, 0
_08036A50: .4byte gDispIo

	thumb_func_start sub_8036A54
sub_8036A54: @ 0x08036A54
	push {lr}
	adds r2, r0, #0
	ldr r0, _08036A74 @ =0x085C98F4
	ldr r0, [r0]
	ldr r1, _08036A78 @ =0x00009ABC
	strh r1, [r0, #0x30]
	ldr r1, _08036A7C @ =0x00001B7E
	adds r0, r0, r1
	ldrh r0, [r0]
	cmp r0, #0
	beq _08036A70
	adds r0, r2, #0
	bl Proc_Break
_08036A70:
	pop {r0}
	bx r0
	.align 2, 0
_08036A74: .4byte 0x085C98F4
_08036A78: .4byte 0x00009ABC
_08036A7C: .4byte 0x00001B7E

	thumb_func_start sub_8036A80
sub_8036A80: @ 0x08036A80
	ldr r0, _08036A90 @ =0x085C98F4
	ldr r2, [r0]
	movs r1, #6
	ldrsb r1, [r2, r1]
	movs r0, #1
	lsls r0, r1
	strb r0, [r2, #0xa]
	bx lr
	.align 2, 0
_08036A90: .4byte 0x085C98F4

	thumb_func_start sub_8036A94
sub_8036A94: @ 0x08036A94
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _08036AD4 @ =0x0300456C
	movs r2, #0
	movs r1, #0x19
	strb r1, [r0]
	ldr r4, _08036AD8 @ =0x085C98F4
	ldr r1, [r4]
	ldrb r1, [r1, #6]
	strb r1, [r0, #1]
	strh r2, [r0, #2]
	movs r1, #4
	bl sub_8035DC8
	ldr r4, [r4]
	ldrb r0, [r4, #9]
	ldrb r1, [r4, #0xa]
	ands r0, r1
	ldrb r1, [r4, #9]
	cmp r0, r1
	bne _08036ACE
	movs r1, #6
	ldrsb r1, [r4, r1]
	movs r0, #1
	lsls r0, r1
	strb r0, [r4, #0xa]
	adds r0, r5, #0
	bl Proc_Break
_08036ACE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08036AD4: .4byte 0x0300456C
_08036AD8: .4byte 0x085C98F4

	thumb_func_start sub_8036ADC
sub_8036ADC: @ 0x08036ADC
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2, #0x30]
	ldr r0, [r2, #0x38]
	cmp r1, r0
	bge _08036AF4
	ldr r0, [r2, #0x34]
	cmp r1, r0
	ble _08036AF4
	ldr r0, [r2, #0x2c]
	bl sub_804163C
_08036AF4:
	pop {r0}
	bx r0

	thumb_func_start sub_8036AF8
sub_8036AF8: @ 0x08036AF8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r7, [sp, #0x18]
	ldr r0, _08036B24 @ =0x085C99E0
	adds r1, r4, #0
	bl SpawnProc
	str r5, [r0, #0x2c]
	str r6, [r0, #0x30]
	mov r1, r8
	str r1, [r0, #0x38]
	str r7, [r0, #0x34]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08036B24: .4byte 0x085C99E0

	thumb_func_start sub_8036B28
sub_8036B28: @ 0x08036B28
	push {lr}
	ldr r0, _08036B34 @ =0x085C99E0
	bl Proc_EndEach
	pop {r0}
	bx r0
	.align 2, 0
_08036B34: .4byte 0x085C99E0

	thumb_func_start sub_8036B38
sub_8036B38: @ 0x08036B38
	ldr r2, [r0, #0x30]
	adds r2, r2, r1
	str r2, [r0, #0x30]
	bx lr

	thumb_func_start sub_8036B40
sub_8036B40: @ 0x08036B40
	push {lr}
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _08036B8C @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _08036B90 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _08036B94 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #7
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
_08036B8C: .4byte gBg0Tm
_08036B90: .4byte gBg1Tm
_08036B94: .4byte gBg2Tm

	thumb_func_start sub_8036B98
sub_8036B98: @ 0x08036B98
	push {lr}
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _08036BEC @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _08036BF0 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _08036BF4 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r0, _08036BF8 @ =gBg3Tm
	movs r1, #0
	bl TmFill
	movs r0, #0xf
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
_08036BEC: .4byte gBg0Tm
_08036BF0: .4byte gBg1Tm
_08036BF4: .4byte gBg2Tm
_08036BF8: .4byte gBg3Tm

	thumb_func_start sub_8036BFC
sub_8036BFC: @ 0x08036BFC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	lsls r1, r4, #3
	ldr r0, _08036C28 @ =0x0203C900
	adds r5, r1, r0
	adds r0, r5, #0
	bl ClearText
	cmp r6, #0
	bge _08036C30
	lsls r1, r4, #7
	movs r0, #0x80
	lsls r0, r0, #3
	adds r1, r1, r0
	ldr r0, _08036C2C @ =0x02022B0A
	adds r1, r1, r0
	adds r0, r5, #0
	bl PutText
	b _08036C56
	.align 2, 0
_08036C28: .4byte 0x0203C900
_08036C2C: .4byte 0x02022B0A
_08036C30:
	adds r0, r6, #0
	bl DecodeMsg
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_DrawString
	lsls r1, r4, #7
	movs r0, #0x80
	lsls r0, r0, #3
	adds r1, r1, r0
	ldr r0, _08036C5C @ =0x02022B0A
	adds r1, r1, r0
	adds r0, r5, #0
	bl PutText
	movs r0, #4
	bl EnableBgSync
_08036C56:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08036C5C: .4byte 0x02022B0A

	thumb_func_start sub_8036C60
sub_8036C60: @ 0x08036C60
	push {r4, r5, lr}
	ldr r5, _08036CA4 @ =0x0203C67C
	movs r4, #5
_08036C66:
	adds r0, r5, #0
	movs r1, #0xc
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _08036C66
	ldr r5, _08036CA8 @ =0x0203C624
	movs r4, #0xa
_08036C7A:
	adds r0, r5, #0
	movs r1, #0xc
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _08036C7A
	ldr r5, _08036CAC @ =0x0203C900
	movs r4, #1
_08036C8E:
	adds r0, r5, #0
	movs r1, #0x18
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _08036C8E
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08036CA4: .4byte 0x0203C67C
_08036CA8: .4byte 0x0203C624
_08036CAC: .4byte 0x0203C900

	thumb_func_start sub_8036CB0
sub_8036CB0: @ 0x08036CB0
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	ldr r1, _08036D04 @ =0x0810F151
	mov r0, sp
	movs r2, #8
	bl memcpy
	movs r1, #0
	movs r4, #4
	adds r0, r5, #0
	adds r0, #0x24
_08036CC8:
	strh r1, [r0]
	subs r0, #2
	subs r4, #1
	cmp r4, #0
	bge _08036CC8
	movs r4, #0
_08036CD4:
	cmp r4, #4
	beq _08036CF6
	adds r0, r5, #0
	adds r0, #0x26
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0
	beq _08036CF6
	mov r1, sp
	adds r0, r1, r4
	movs r1, #0xff
	lsls r1, r1, #8
	ldrb r0, [r0]
	orrs r1, r0
	adds r0, r5, #0
	bl UnitAddItem
_08036CF6:
	adds r4, #1
	cmp r4, #7
	ble _08036CD4
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08036D04: .4byte 0x0810F151

	thumb_func_start sub_8036D08
sub_8036D08: @ 0x08036D08
	push {r4, lr}
	sub sp, #8
	adds r4, r0, #0
	ldr r1, _08036D34 @ =0x0810F15A
	mov r0, sp
	movs r2, #8
	bl memcpy
	ldr r0, _08036D38 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08036D2C
	lsls r0, r4, #1
	add r0, sp
	ldrh r0, [r0]
	bl m4aSongNumStart
_08036D2C:
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08036D34: .4byte 0x0810F15A
_08036D38: .4byte gPlaySt

	thumb_func_start sub_8036D3C
sub_8036D3C: @ 0x08036D3C
	push {r4, lr}
	ldr r4, _08036D5C @ =0x0203C704
	adds r0, r4, #0
	bl sub_8086530
	movs r0, #8
	ldrb r1, [r4]
	orrs r0, r1
	strb r0, [r4]
	adds r0, r4, #0
	bl sub_80864F4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08036D5C: .4byte 0x0203C704

	thumb_func_start sub_8036D60
sub_8036D60: @ 0x08036D60
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, _08036D84 @ =gKeySt
	ldr r0, [r0]
	ldrh r4, [r0, #8]
	adds r3, r4, #0
	cmp r3, #0
	bne _08036D90
	ldr r1, _08036D88 @ =0x0203C940
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	cmp r0, #0x13
	ble _08036DE4
	ldr r0, _08036D8C @ =0x030013E4
	str r3, [r1]
	str r3, [r0]
	b _08036DE4
	.align 2, 0
_08036D84: .4byte gKeySt
_08036D88: .4byte 0x0203C940
_08036D8C: .4byte 0x030013E4
_08036D90:
	ldr r0, _08036DC4 @ =0x0203C940
	movs r6, #0
	str r6, [r0]
	ldr r1, _08036DC8 @ =0x0203C920
	ldr r2, _08036DCC @ =0x030013E0
	ldr r0, [r2]
	lsls r0, r0, #1
	adds r0, r0, r1
	strh r4, [r0]
	ldr r1, _08036DD0 @ =0x030013E4
	ldr r4, [r1]
	lsls r0, r4, #1
	adds r0, r0, r5
	ldrh r0, [r0]
	cmp r3, r0
	bne _08036DD8
	adds r0, r4, #1
	str r0, [r1]
	lsls r0, r0, #1
	adds r0, r0, r5
	ldr r1, _08036DD4 @ =0x0000FFFF
	ldrh r0, [r0]
	cmp r0, r1
	bne _08036DDA
	movs r0, #1
	b _08036DE6
	.align 2, 0
_08036DC4: .4byte 0x0203C940
_08036DC8: .4byte 0x0203C920
_08036DCC: .4byte 0x030013E0
_08036DD0: .4byte 0x030013E4
_08036DD4: .4byte 0x0000FFFF
_08036DD8:
	str r6, [r1]
_08036DDA:
	ldr r0, [r2]
	adds r0, #1
	movs r1, #0xf
	ands r0, r1
	str r0, [r2]
_08036DE4:
	movs r0, #0
_08036DE6:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_8036DEC
sub_8036DEC: @ 0x08036DEC
	push {lr}
	ldr r0, _08036DFC @ =0x085C9A18
	bl sub_8036D60
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0
_08036DFC: .4byte 0x085C9A18

	thumb_func_start sub_8036E00
sub_8036E00: @ 0x08036E00
	push {lr}
	adds r1, r0, #0
	ldr r0, _08036E10 @ =0x085C9AE0
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
_08036E10: .4byte 0x085C9AE0

	thumb_func_start sub_8036E14
sub_8036E14: @ 0x08036E14
	mov ip, r0
	mov r2, ip
	adds r2, #0x4a
	movs r3, #0
	movs r1, #0
	movs r0, #0xd8
	strh r0, [r2]
	mov r0, ip
	adds r0, #0x48
	strb r3, [r0]
	mov r0, ip
	str r1, [r0, #0x40]
	str r1, [r0, #0x3c]
	adds r0, #0x52
	strb r3, [r0]
	adds r2, #0xa
	movs r0, #0xff
	ldrb r1, [r2]
	orrs r1, r0
	strb r1, [r2]
	mov r1, ip
	adds r1, #0x53
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x4c
	strb r3, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_8036E50
sub_8036E50: @ 0x08036E50
	push {r4, lr}
	ldr r0, _08036E5C @ =0x0203C618
	ldrb r0, [r0, #0xa]
	cmp r0, #0
	bne _08036E64
	b _08036E7C
	.align 2, 0
_08036E5C: .4byte 0x0203C618
_08036E60:
	movs r0, #1
	b _08036E7E
_08036E64:
	movs r2, #0
	movs r3, #0x80
	ldr r1, _08036E84 @ =0x0203C770
_08036E6A:
	adds r0, r3, #0
	ldrb r4, [r1, #0xf]
	ands r0, r4
	cmp r0, #0
	bne _08036E60
	adds r1, #0x14
	adds r2, #1
	cmp r2, #9
	ble _08036E6A
_08036E7C:
	movs r0, #0
_08036E7E:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08036E84: .4byte 0x0203C770

	thumb_func_start sub_8036E88
sub_8036E88: @ 0x08036E88
	push {r4, lr}
	movs r2, #0
	movs r3, #0x80
	ldr r1, _08036EA0 @ =0x0203C770
_08036E90:
	adds r0, r3, #0
	ldrb r4, [r1, #0xf]
	ands r0, r4
	cmp r0, #0
	bne _08036EA4
	movs r0, #1
	b _08036EAE
	.align 2, 0
_08036EA0: .4byte 0x0203C770
_08036EA4:
	adds r1, #0x14
	adds r2, #1
	cmp r2, #9
	ble _08036E90
	movs r0, #0
_08036EAE:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_8036EB4
sub_8036EB4: @ 0x08036EB4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0x10
	mov sb, r0
	lsls r1, r1, #0x18
	lsrs r4, r1, #0x18
	movs r7, #0
	ldr r1, _08036EE4 @ =0x085C9AC8
	lsls r0, r4, #2
	adds r0, r0, r1
	ldr r0, [r0]
	mov r8, r0
	bl InitUnits
	cmp r4, #0
	beq _08036EE8
	cmp r4, #0
	blt _08036F92
	cmp r4, #2
	bgt _08036F92
	movs r6, #0
	b _08036F54
	.align 2, 0
_08036EE4: .4byte 0x085C9AC8
_08036EE8:
	movs r6, #0
	mov r1, sb
	lsls r0, r1, #4
	mov r1, r8
	adds r5, r0, r1
	movs r0, #1
	mov r8, r0
	movs r7, #0
_08036EF8:
	ldr r0, _08036F14 @ =0x0203C770
	adds r4, r7, r0
	adds r0, r6, #0
	adds r1, r4, #0
	bl sub_8086220
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08036F18
	ldrb r0, [r5, #4]
	strb r0, [r4, #0x10]
	strb r6, [r4, #0xf]
	b _08036F30
	.align 2, 0
_08036F14: .4byte 0x0203C770
_08036F18:
	ldr r0, _08036F50 @ =0x0810F164
	adds r1, r4, #0
	bl sub_80368DC
	ldrb r0, [r5, #5]
	strb r0, [r4, #0x10]
	movs r0, #0x80
	rsbs r0, r0, #0
	adds r1, r0, #0
	adds r0, r6, #0
	orrs r0, r1
	strb r0, [r4, #0xf]
_08036F30:
	mov r0, r8
	bl GetUnit
	adds r1, r0, #0
	adds r0, r6, #0
	mov r2, sp
	bl sub_808642C
	movs r1, #5
	add r8, r1
	adds r7, #0x14
	adds r6, #1
	cmp r6, #9
	ble _08036EF8
	adds r7, r6, #0
	b _08036F92
	.align 2, 0
_08036F50: .4byte 0x0810F164
_08036F54:
	lsls r0, r7, #2
	adds r5, r0, r7
	lsls r1, r5, #2
	ldr r0, _08036FA4 @ =0x0203C770
	adds r4, r1, r0
	adds r0, r6, #0
	adds r1, r4, #0
	bl sub_8086220
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08036F8C
	mov r1, sb
	lsls r0, r1, #4
	add r0, r8
	ldrb r0, [r0, #4]
	strb r0, [r4, #0x10]
	strb r6, [r4, #0xf]
	adds r0, r5, #1
	bl GetUnit
	adds r1, r0, #0
	adds r0, r6, #0
	mov r2, sp
	bl sub_808642C
	adds r7, #1
_08036F8C:
	adds r6, #1
	cmp r6, #9
	ble _08036F54
_08036F92:
	adds r0, r7, #0
	add sp, #0x10
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08036FA4: .4byte 0x0203C770

	thumb_func_start sub_8036FA8
sub_8036FA8: @ 0x08036FA8
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	adds r5, r0, #0
	lsls r0, r5, #3
	mov r8, r0
	ldr r6, _08037010 @ =0x0203C624
	adds r0, r0, r6
	mov sb, r0
	bl ClearText
	mov r0, sb
	movs r1, #0
	bl Text_SetColor
	lsls r4, r5, #2
	adds r4, r4, r5
	lsls r4, r4, #2
	ldr r0, _08037014 @ =0x0203C770
	adds r4, r4, r0
	mov r0, sb
	adds r1, r4, #0
	bl Text_DrawString
	subs r6, #0xc
	add r8, r6
	ldr r1, _08037018 @ =0x00000FFF
	mov r2, r8
	ldrh r2, [r2, #0xc]
	ands r1, r2
	movs r0, #0xf
	ldrb r4, [r4, #0x10]
	ands r0, r4
	lsls r0, r0, #0xc
	orrs r1, r0
	mov r0, r8
	strh r1, [r0, #0xc]
	lsls r5, r5, #7
	ldr r0, _0803701C @ =0x0202231E
	adds r5, r5, r0
	mov r0, sb
	adds r1, r5, #0
	bl PutText
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08037010: .4byte 0x0203C624
_08037014: .4byte 0x0203C770
_08037018: .4byte 0x00000FFF
_0803701C: .4byte 0x0202231E

	thumb_func_start sub_8037020
sub_8037020: @ 0x08037020
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
	b _08037030
_08037028:
	adds r0, r4, #0
	bl sub_8036FA8
	adds r4, #1
_08037030:
	ldr r0, [r5, #0x38]
	cmp r4, r0
	blt _08037028
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_803703C
sub_803703C: @ 0x0803703C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r4, r0, #0
	lsls r1, r1, #0x18
	ldr r0, _0803707C @ =0x085C9AC8
	lsrs r1, r1, #0x16
	adds r1, r1, r0
	ldr r1, [r1]
	mov r8, r1
	movs r6, #0
	ldr r0, [r4, #0x38]
	cmp r6, r0
	bge _080370C8
	ldr r0, _08037080 @ =0x0203C618
	adds r5, r0, #0
	adds r5, #0xc
	ldr r3, _08037084 @ =0x0203C770
	movs r2, #0
_08037064:
	ldr r0, _08037084 @ =0x0203C770
	adds r1, r2, r0
	movs r0, #0x80
	ldrb r7, [r1, #0xf]
	ands r0, r7
	cmp r0, #0
	bne _08037088
	ldr r0, [r4, #0x3c]
	lsls r0, r0, #4
	add r0, r8
	ldrb r0, [r0, #4]
	b _08037090
	.align 2, 0
_0803707C: .4byte 0x085C9AC8
_08037080: .4byte 0x0203C618
_08037084: .4byte 0x0203C770
_08037088:
	ldr r0, [r4, #0x3c]
	lsls r0, r0, #4
	add r0, r8
	ldrb r0, [r0, #5]
_08037090:
	strb r0, [r1, #0x10]
	ldr r0, _080370DC @ =0x00000FFF
	adds r1, r0, #0
	ldrh r7, [r5]
	ands r1, r7
	movs r0, #0xf
	ldrb r7, [r3, #0x10]
	ands r0, r7
	lsls r0, r0, #0xc
	orrs r1, r0
	strh r1, [r5]
	lsls r1, r6, #7
	ldr r0, _080370E0 @ =0x0202231E
	adds r1, r1, r0
	adds r0, r5, #0
	str r2, [sp]
	str r3, [sp, #4]
	bl PutText
	adds r5, #8
	ldr r3, [sp, #4]
	adds r3, #0x14
	ldr r2, [sp]
	adds r2, #0x14
	adds r6, #1
	ldr r0, [r4, #0x38]
	cmp r6, r0
	blt _08037064
_080370C8:
	movs r0, #2
	bl EnableBgSync
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080370DC: .4byte 0x00000FFF
_080370E0: .4byte 0x0202231E

	thumb_func_start sub_80370E4
sub_80370E4: @ 0x080370E4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	ldr r5, [r7, #0x40]
	ldr r1, _08037168 @ =0x085C9AC8
	ldr r0, _0803716C @ =0x0203C618
	mov sb, r0
	ldrb r2, [r0]
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r0, [r0]
	mov r8, r0
	lsls r4, r5, #2
	adds r4, r4, r5
	adds r0, r4, #1
	bl GetUnit
	adds r6, r0, #0
	ldr r0, _08037170 @ =0x0203C770
	lsls r4, r4, #2
	adds r4, r4, r0
	movs r0, #0x7f
	ldrb r3, [r4, #0xf]
	ands r0, r3
	bl sub_8086264
	adds r0, r5, #0
	adds r1, r6, #0
	adds r2, r4, #0
	bl sub_808642C
	ldr r0, _08037174 @ =0x0810F164
	adds r1, r4, #0
	bl sub_80368DC
	ldr r0, [r7, #0x3c]
	lsls r0, r0, #4
	add r0, r8
	ldrb r0, [r0, #5]
	strb r0, [r4, #0x10]
	movs r0, #0x80
	rsbs r0, r0, #0
	adds r1, r0, #0
	adds r0, r5, #0
	orrs r0, r1
	strb r0, [r4, #0xf]
	adds r0, r5, #0
	bl sub_8036FA8
	bl sub_8036E88
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08037178
	mov r1, sb
	ldrb r0, [r1]
	adds r1, r7, #0
	bl sub_80372B0
	adds r0, r7, #0
	movs r1, #2
	bl Proc_Goto
	b _0803718C
	.align 2, 0
_08037168: .4byte 0x085C9AC8
_0803716C: .4byte 0x0203C618
_08037170: .4byte 0x0203C770
_08037174: .4byte 0x0810F164
_08037178:
	adds r0, r7, #0
	adds r0, #0x4d
	ldrb r0, [r0]
	cmp r0, #0
	bne _0803718C
	mov r2, sb
	ldrb r0, [r2]
	adds r1, r7, #0
	bl sub_80372B0
_0803718C:
	ldr r0, [r7, #0x38]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r7, #0
	adds r1, #0x4a
	ldrh r1, [r1]
	adds r1, #0x28
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_8040AEC
	movs r0, #2
	bl EnableBgSync
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80371B4
sub_80371B4: @ 0x080371B4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov sb, r0
	ldr r7, [r0, #0x40]
	adds r0, #0x53
	ldrb r0, [r0]
	mov r8, r0
	ldr r2, _0803721C @ =0x0203C770
	lsls r5, r0, #2
	add r5, r8
	lsls r0, r5, #2
	adds r6, r0, r2
	movs r1, #0x7f
	adds r0, r1, #0
	ldrb r3, [r6, #0xf]
	ands r0, r3
	lsls r4, r7, #2
	adds r4, r4, r7
	lsls r4, r4, #2
	adds r4, r4, r2
	ldrb r2, [r4, #0xf]
	ands r1, r2
	bl sub_8086330
	ldrb r1, [r6, #0x10]
	ldrb r0, [r4, #0x10]
	strb r0, [r6, #0x10]
	strb r1, [r4, #0x10]
	adds r5, #1
	adds r0, r5, #0
	bl GetUnit
	adds r1, r0, #0
	mov r0, r8
	adds r2, r6, #0
	bl sub_808642C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08037224
	ldr r0, _08037220 @ =0x0810F164
	adds r1, r6, #0
	bl sub_80368DC
	movs r3, #0x80
	rsbs r3, r3, #0
	adds r1, r3, #0
	mov r0, r8
	orrs r0, r1
	b _08037226
	.align 2, 0
_0803721C: .4byte 0x0203C770
_08037220: .4byte 0x0810F164
_08037224:
	mov r0, r8
_08037226:
	strb r0, [r6, #0xf]
	lsls r4, r7, #2
	adds r4, r4, r7
	adds r0, r4, #1
	bl GetUnit
	adds r1, r0, #0
	lsls r4, r4, #2
	ldr r0, _08037260 @ =0x0203C770
	adds r4, r4, r0
	adds r0, r7, #0
	adds r2, r4, #0
	bl sub_808642C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08037268
	ldr r0, _08037264 @ =0x0810F164
	adds r1, r4, #0
	bl sub_80368DC
	movs r2, #0x80
	rsbs r2, r2, #0
	adds r1, r2, #0
	adds r0, r7, #0
	orrs r0, r1
	strb r0, [r4, #0xf]
	b _0803726A
	.align 2, 0
_08037260: .4byte 0x0203C770
_08037264: .4byte 0x0810F164
_08037268:
	strb r7, [r4, #0xf]
_0803726A:
	adds r0, r7, #0
	bl sub_8036FA8
	mov r0, r8
	bl sub_8036FA8
	mov r3, sb
	ldr r0, [r3, #0x38]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r1, sb
	adds r1, #0x4a
	ldrh r1, [r1]
	adds r1, #0x28
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_8040AEC
	mov r1, sb
	ldr r0, [r1, #0x30]
	bl Proc_End
	mov r1, sb
	adds r1, #0x52
	movs r0, #4
	strb r0, [r1]
	movs r0, #2
	bl EnableBgSync
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80372B0
sub_80372B0: @ 0x080372B0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov r8, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r6, #0
	ldr r2, _08037324 @ =0x085C9AC8
	lsls r1, r0, #2
	adds r1, r1, r2
	ldr r7, [r1]
	cmp r0, #1
	bne _08037334
	ldr r1, _08037328 @ =0x0203C618
	ldrb r0, [r1, #5]
	adds r0, #2
	cmp r6, r0
	bge _0803731A
	mov sb, r1
	movs r0, #5
	mov r8, r0
	mov r5, sb
	adds r5, #0x64
	movs r7, #0
_080372E4:
	ldr r4, _0803732C @ =0x0203C944
	adds r4, r7, r4
	ldr r0, _08037330 @ =0x0810F170
	adds r1, r4, #0
	bl sub_80368DC
	adds r0, r5, #0
	bl ClearText
	movs r0, #0xa
	str r0, [sp]
	adds r0, r5, #0
	movs r1, #1
	mov r2, r8
	adds r3, r4, #0
	bl PutDrawTextCentered
	movs r1, #3
	add r8, r1
	adds r5, #8
	adds r7, #0xf
	adds r6, #1
	mov r1, sb
	ldrb r0, [r1, #5]
	adds r0, #2
	cmp r6, r0
	blt _080372E4
_0803731A:
	ldr r0, _08037328 @ =0x0203C618
	ldrb r0, [r0, #5]
	adds r0, #2
	b _08037394
	.align 2, 0
_08037324: .4byte 0x085C9AC8
_08037328: .4byte 0x0203C618
_0803732C: .4byte 0x0203C944
_08037330: .4byte 0x0810F170
_08037334:
	lsls r0, r6, #4
	adds r1, r0, r7
	ldr r0, [r1, #8]
	cmp r0, #0
	bne _08037342
	adds r0, r6, #0
	b _08037394
_08037342:
	mov r0, r8
	adds r0, #0x4d
	adds r4, r0, r6
	movs r0, #1
	strb r0, [r4]
	movs r5, #0
	ldr r0, [r1, #0xc]
	cmp r0, #0
	beq _08037362
	bl _call_via_r0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08037362
	strb r5, [r4]
	movs r5, #1
_08037362:
	lsls r4, r6, #3
	ldr r0, _08037390 @ =0x0203C67C
	adds r4, r4, r0
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_SetColor
	lsls r2, r6, #1
	adds r2, #5
	lsls r0, r6, #4
	adds r0, r0, r7
	ldr r3, [r0, #8]
	movs r0, #7
	str r0, [sp]
	adds r0, r4, #0
	movs r1, #1
	bl PutDrawTextCentered
	adds r6, #1
	b _08037334
	.align 2, 0
_08037390: .4byte 0x0203C67C
_08037394:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80373A4
sub_80373A4: @ 0x080373A4
	adds r3, r0, #0
	ldr r2, _080373C0 @ =0x085C9AC8
	ldr r0, _080373C4 @ =0x0203C618
	ldrb r1, [r0]
	lsls r0, r1, #2
	adds r0, r0, r2
	ldr r2, [r0]
	cmp r1, #1
	beq _080373C8
	ldr r0, [r3, #0x3c]
	lsls r0, r0, #4
	adds r0, r0, r2
	ldrh r0, [r0, #2]
	b _080373DA
	.align 2, 0
_080373C0: .4byte 0x085C9AC8
_080373C4: .4byte 0x0203C618
_080373C8:
	ldr r0, [r3, #0x3c]
	cmp r0, #0
	beq _080373D8
	ldr r0, _080373D4 @ =0x000006D2
	b _080373DA
	.align 2, 0
_080373D4: .4byte 0x000006D2
_080373D8:
	ldr r0, _080373DC @ =0x000006D1
_080373DA:
	bx lr
	.align 2, 0
_080373DC: .4byte 0x000006D1

	thumb_func_start sub_80373E0
sub_80373E0: @ 0x080373E0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	adds r7, r0, #0
	ldr r4, _080375C0 @ =Pal_SystemText
	bl sub_8036B40
	bl sub_803FA14
	ldr r0, _080375C4 @ =0x08107820
	ldr r1, _080375C8 @ =0x06014800
	bl Decompress
	movs r0, #0
	movs r1, #2
	bl sub_803FAA4
	ldr r0, _080375CC @ =0x02022C1A
	ldr r1, _080375D0 @ =0x08109DF4
	movs r2, #0x80
	lsls r2, r2, #5
	bl TmApplyTsa_t
	ldr r0, _080375D4 @ =0x08109A00
	movs r1, #0x98
	lsls r1, r1, #2
	movs r2, #0x80
	bl ApplyPaletteExt
	ldr r0, _080375D8 @ =0x081080D4
	ldr r1, _080375DC @ =0x06016000
	bl Decompress
	ldr r0, _080375E0 @ =0x0831AABC
	movs r1, #0x88
	lsls r1, r1, #2
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r2, _080375E4 @ =gPal
	adds r1, r2, #0
	adds r1, #0x40
	movs r0, #0
	strh r0, [r1]
	adds r2, #0x42
	movs r3, #2
_0803743E:
	ldrh r0, [r4, #8]
	strh r0, [r2]
	adds r4, #2
	adds r2, #2
	subs r3, #1
	cmp r3, #0
	bge _0803743E
	bl EnablePalSync
	ldr r0, _080375E8 @ =0x0203C758
	bl SetTextFont
	bl InitSystemTextFont
	bl ResetTextFont
	bl sub_8036C60
	bl ApplyUnitSpritePalettes
	bl ResetUnitSprites
	bl ForceSyncUnitSpriteSheet
	ldr r0, [r7, #0x3c]
	ldr r1, _080375EC @ =0x0203C618
	ldrb r1, [r1]
	bl sub_8036EB4
	str r0, [r7, #0x38]
	adds r6, r7, #0
	adds r6, #0x5c
	adds r5, r7, #0
	adds r5, #0x4a
	movs r1, #0
	add r0, sp, #0xc
_08037486:
	strb r1, [r0]
	subs r0, #1
	add r2, sp, #8
	cmp r0, r2
	bge _08037486
	ldr r0, [r7, #0x3c]
	mov r1, sp
	adds r1, r1, r0
	adds r1, #8
	movs r0, #1
	strb r0, [r1]
	ldr r4, _080375EC @ =0x0203C618
	ldrb r0, [r4]
	adds r1, r7, #0
	bl sub_80372B0
	str r0, [r7, #0x34]
	adds r0, r7, #0
	bl sub_8037020
	ldr r1, [r7, #0x34]
	adds r0, r7, #0
	add r2, sp, #8
	bl sub_80403C0
	str r0, [r7, #0x2c]
	movs r3, #0
	adds r4, #6
	movs r2, #0xff
_080374C0:
	adds r1, r3, r4
	ldrb r0, [r1]
	orrs r0, r2
	strb r0, [r1]
	adds r3, #1
	cmp r3, #3
	ble _080374C0
	movs r4, #0
	strb r4, [r6]
	ldrh r2, [r5]
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	ldr r0, _080375F0 @ =gDispIo
	mov ip, r0
	movs r0, #0x20
	mov r1, ip
	ldrb r1, [r1, #1]
	orrs r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r2, ip
	strb r0, [r2, #1]
	mov r0, ip
	adds r0, #0x2d
	strb r4, [r0]
	mov r1, ip
	adds r1, #0x31
	movs r0, #0x28
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2c
	movs r2, #0xf0
	strb r2, [r0]
	adds r0, #4
	movs r1, #0x88
	strb r1, [r0]
	subs r0, #1
	strb r4, [r0]
	adds r0, #4
	strb r1, [r0]
	subs r0, #5
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x32
	movs r0, #0xa0
	strb r0, [r1]
	mov r5, ip
	adds r5, #0x34
	movs r2, #1
	ldrb r0, [r5]
	orrs r0, r2
	movs r1, #2
	orrs r0, r1
	movs r4, #4
	orrs r0, r4
	movs r3, #8
	orrs r0, r3
	movs r6, #0x10
	orrs r0, r6
	strb r0, [r5]
	movs r0, #0x35
	add r0, ip
	mov r8, r0
	ldrb r0, [r0]
	orrs r0, r2
	movs r5, #3
	rsbs r5, r5, #0
	ands r0, r5
	orrs r0, r4
	orrs r0, r3
	movs r1, #0x11
	rsbs r1, r1, #0
	ands r0, r1
	mov r1, r8
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x36
	ldrb r1, [r0]
	orrs r2, r1
	ands r2, r5
	orrs r2, r4
	orrs r2, r3
	orrs r2, r6
	strb r2, [r0]
	ldr r0, [r7, #0x2c]
	ldr r1, _080375F4 @ =0x0810F19C
	ldr r4, _080375EC @ =0x0203C618
	ldrb r2, [r4]
	adds r1, r2, r1
	ldrb r1, [r1]
	bl sub_803FC3C
	ldr r0, _080375F8 @ =0x085C9AD4
	ldrb r3, [r4]
	lsls r1, r3, #2
	adds r0, r1, r0
	ldr r0, [r0]
	ldr r2, _080375FC @ =0x0810F190
	adds r1, r1, r2
	ldr r1, [r1]
	str r3, [sp]
	ldr r2, [r7, #0x2c]
	str r2, [sp, #4]
	movs r2, #0
	movs r3, #8
	bl sub_803FD40
	adds r0, r7, #0
	bl sub_80373A4
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	movs r1, #1
	bl sub_8036BFC
	movs r0, #0xf
	bl EnableBgSync
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080375C0: .4byte Pal_SystemText
_080375C4: .4byte 0x08107820
_080375C8: .4byte 0x06014800
_080375CC: .4byte 0x02022C1A
_080375D0: .4byte 0x08109DF4
_080375D4: .4byte 0x08109A00
_080375D8: .4byte 0x081080D4
_080375DC: .4byte 0x06016000
_080375E0: .4byte 0x0831AABC
_080375E4: .4byte gPal
_080375E8: .4byte 0x0203C758
_080375EC: .4byte 0x0203C618
_080375F0: .4byte gDispIo
_080375F4: .4byte 0x0810F19C
_080375F8: .4byte 0x085C9AD4
_080375FC: .4byte 0x0810F190

	thumb_func_start sub_8037600
sub_8037600: @ 0x08037600
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	lsls r1, r1, #0x18
	lsrs r7, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r5, r2, #0x18
	lsls r3, r3, #0x18
	lsrs r6, r3, #0x18
	ldr r1, _08037660 @ =gKeySt
	ldr r2, [r1]
	ldrh r3, [r2, #6]
	movs r0, #0x40
	ands r0, r3
	cmp r0, #0
	beq _08037636
	ldr r0, [r4]
	cmp r0, r5
	bgt _0803762A
	ldrh r2, [r2, #8]
	cmp r3, r2
	bne _08037636
_0803762A:
	subs r0, #1
	str r0, [r4]
	cmp r0, #0
	bge _08037636
	subs r0, r6, #1
	str r0, [r4]
_08037636:
	ldr r1, [r1]
	ldrh r2, [r1, #6]
	movs r0, #0x80
	ands r0, r2
	cmp r0, #0
	beq _0803765A
	ldr r0, [r4]
	cmp r0, r7
	blt _0803764E
	ldrh r1, [r1, #8]
	cmp r2, r1
	bne _0803765A
_0803764E:
	adds r0, #1
	str r0, [r4]
	adds r1, r6, #0
	bl __modsi3
	str r0, [r4]
_0803765A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08037660: .4byte gKeySt

	thumb_func_start sub_8037664
sub_8037664: @ 0x08037664
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r4, r0, #0
	ldr r6, [r4, #0x3c]
	ldr r1, _08037730 @ =0x085C9AC8
	ldr r0, _08037734 @ =0x0203C618
	mov r8, r0
	ldrb r2, [r0]
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r0, [r0]
	mov sb, r0
	ldr r5, [r4, #0x2c]
	adds r0, r5, #0
	adds r0, #0x44
	movs r3, #0
	mov sl, r3
	movs r7, #1
	strb r7, [r0]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r5, #0x48]
	adds r0, r4, #0
	adds r0, #0x3c
	ldr r3, [r4, #0x34]
	subs r1, r3, #1
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	movs r2, #0
	bl sub_8037600
	ldr r0, [r4, #0x3c]
	cmp r6, r0
	beq _080376E2
	movs r0, #3
	bl sub_8036D08
	adds r0, r5, #0
	adds r0, #0x3a
	adds r1, r0, r6
	mov r2, sl
	strb r2, [r1]
	ldr r1, [r4, #0x3c]
	adds r0, r0, r1
	strb r7, [r0]
	mov r3, r8
	ldrb r1, [r3]
	adds r0, r4, #0
	bl sub_803703C
	adds r0, r4, #0
	bl sub_80373A4
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	movs r1, #1
	bl sub_8036BFC
_080376E2:
	ldr r0, _08037738 @ =gKeySt
	ldr r1, [r0]
	adds r0, r7, #0
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08037774
	mov r0, r8
	ldrb r0, [r0]
	cmp r0, #1
	beq _08037752
	adds r0, r4, #0
	adds r0, #0x4d
	ldr r1, [r4, #0x3c]
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803774A
	lsls r0, r1, #4
	add r0, sb
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x52
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #7
	bne _0803773C
	movs r0, #1
	bl sub_8036D08
	adds r0, r4, #0
	movs r1, #9
	bl Proc_Goto
	movs r0, #0xff
	mov r1, r8
	strb r0, [r1, #3]
	b _080377CE
	.align 2, 0
_08037730: .4byte 0x085C9AC8
_08037734: .4byte 0x0203C618
_08037738: .4byte gKeySt
_0803773C:
	movs r0, #2
	bl sub_8036D08
	adds r0, r4, #0
	bl Proc_Break
	b _08037774
_0803774A:
	movs r0, #0
	bl sub_8036D08
	b _08037774
_08037752:
	movs r0, #2
	bl sub_8036D08
	adds r1, r4, #0
	adds r1, #0x52
	movs r0, #8
	strb r0, [r1]
	ldr r0, [r4, #0x3c]
	adds r1, #1
	strb r0, [r1]
	mov r2, sl
	str r2, [r4, #0x44]
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
	b _080377CE
_08037774:
	ldr r5, _080377DC @ =gKeySt
	ldr r1, [r5]
	movs r0, #2
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08037796
	movs r0, #1
	bl sub_8036D08
	adds r0, r4, #0
	movs r1, #9
	bl Proc_Goto
	ldr r1, _080377E0 @ =0x0203C618
	movs r0, #0xff
	strb r0, [r1, #3]
_08037796:
	ldr r1, [r5]
	movs r0, #8
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080377CE
	adds r0, r4, #0
	adds r0, #0x5c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _080377CE
	ldr r0, _080377E4 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080377C0
	movs r0, #0x6a
	bl m4aSongNumStart
_080377C0:
	ldr r1, _080377E0 @ =0x0203C618
	movs r0, #0
	strb r0, [r1, #3]
	adds r0, r4, #0
	movs r1, #9
	bl Proc_Goto
_080377CE:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080377DC: .4byte gKeySt
_080377E0: .4byte 0x0203C618
_080377E4: .4byte gPlaySt

	thumb_func_start sub_80377E8
sub_80377E8: @ 0x080377E8
	push {r4, lr}
	sub sp, #0x10
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	bl Proc_End
	bl sub_803FB74
	bl InitUnits
	movs r0, #1
	bl GetUnit
	adds r1, r0, #0
	ldr r3, _08037828 @ =0x0203C770
	ldr r2, [r4, #0x40]
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #2
	adds r0, r0, r3
	ldrb r0, [r0, #0xf]
	mov r2, sp
	bl sub_808642C
	adds r0, r4, #0
	bl sub_80762E4
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08037828: .4byte 0x0203C770

	thumb_func_start sub_803782C
sub_803782C: @ 0x0803782C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08037848 @ =0x08678594
	bl Proc_Find
	cmp r0, #0
	bne _08037840
	adds r0, r4, #0
	bl Proc_Break
_08037840:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08037848: .4byte 0x08678594

	thumb_func_start sub_803784C
sub_803784C: @ 0x0803784C
	movs r1, #0
	ldr r2, _08037868 @ =0x0203C618
	ldrb r0, [r2, #5]
	adds r0, #2
	cmp r1, r0
	bge _08037872
	adds r3, r2, #6
	adds r2, r0, #0
_0803785C:
	adds r0, r1, r3
	ldrb r0, [r0]
	cmp r0, #0xff
	bne _0803786C
	movs r0, #0
	b _08037874
	.align 2, 0
_08037868: .4byte 0x0203C618
_0803786C:
	adds r1, #1
	cmp r1, r2
	blt _0803785C
_08037872:
	movs r0, #1
_08037874:
	bx lr
	.align 2, 0

	thumb_func_start sub_8037878
sub_8037878: @ 0x08037878
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r7, r0, #0
	ldr r0, [r7, #0x40]
	mov sb, r0
	ldr r1, [r7, #0x2c]
	str r1, [sp, #4]
	ldr r0, _080378BC @ =0x085C9A08
	bl sub_8036D60
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080378C4
	ldr r0, _080378C0 @ =0x0203C770
	mov r2, sb
	lsls r1, r2, #2
	add r1, sb
	lsls r1, r1, #2
	adds r1, r1, r0
	movs r0, #0x80
	ldrb r1, [r1, #0xf]
	ands r0, r1
	cmp r0, #0
	bne _080378C4
	adds r0, r7, #0
	movs r1, #8
	bl Proc_Goto
	b _08037D64
	.align 2, 0
_080378BC: .4byte 0x085C9A08
_080378C0: .4byte 0x0203C770
_080378C4:
	ldr r1, [sp, #4]
	adds r1, #0x44
	movs r0, #0
	strb r0, [r1]
	adds r1, r7, #0
	adds r1, #0x48
	ldr r0, [r7, #0x40]
	ldrb r3, [r1]
	subs r0, r0, r3
	lsls r0, r0, #4
	adds r0, #0x28
	ldr r2, [sp, #4]
	str r0, [r2, #0x48]
	adds r0, r7, #0
	adds r0, #0x4c
	movs r2, #0
	ldrsb r2, [r0, r2]
	mov sl, r1
	str r0, [sp, #8]
	cmp r2, #0
	ble _08037926
	adds r4, r7, #0
	adds r4, #0x4a
	ldrh r0, [r4]
	subs r0, #4
	strh r0, [r4]
	ldr r3, [sp, #8]
	ldrb r0, [r3]
	subs r0, #1
	strb r0, [r3]
	ldrh r2, [r4]
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	ldr r0, [r7, #0x30]
	cmp r0, #0
	beq _08037916
	movs r1, #4
	bl sub_8036B38
_08037916:
	movs r0, #4
	bl sub_8040530
	ldr r1, [r7, #0x40]
	mov r0, sl
	ldrb r0, [r0]
	subs r1, r1, r0
	b _08037964
_08037926:
	cmp r2, #0
	bge _08037982
	adds r4, r7, #0
	adds r4, #0x4a
	ldrh r0, [r4]
	adds r0, #4
	strh r0, [r4]
	ldr r1, [sp, #8]
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrh r2, [r4]
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	ldr r0, [r7, #0x30]
	cmp r0, #0
	beq _08037954
	movs r1, #4
	rsbs r1, r1, #0
	bl sub_8036B38
_08037954:
	movs r0, #4
	rsbs r0, r0, #0
	bl sub_8040530
	ldr r1, [r7, #0x40]
	mov r2, sl
	ldrb r2, [r2]
	subs r1, r1, r2
_08037964:
	lsls r1, r1, #4
	adds r1, #0x28
	movs r0, #0x50
	bl sub_80415CC
	ldr r0, [r7, #0x38]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldrh r1, [r4]
	adds r1, #0x28
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_8040AEC
	b _08037D64
_08037982:
	ldr r1, [r7, #0x40]
	mov r3, sl
	ldrb r3, [r3]
	subs r1, r1, r3
	lsls r1, r1, #4
	adds r1, #0x28
	movs r0, #0x50
	bl sub_80415CC
	ldr r0, _080379C0 @ =gKeySt
	ldr r1, [r0]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	bne _080379A4
	b _08037BBA
_080379A4:
	adds r0, r7, #0
	adds r0, #0x52
	ldrb r1, [r0]
	subs r1, #1
	adds r4, r0, #0
	cmp r1, #7
	bls _080379B4
	b _08037BBA
_080379B4:
	lsls r0, r1, #2
	ldr r1, _080379C4 @ =_080379C8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080379C0: .4byte gKeySt
_080379C4: .4byte _080379C8
_080379C8: @ jump table
	.4byte _080379E8 @ case 0
	.4byte _08037A18 @ case 1
	.4byte _08037A40 @ case 2
	.4byte _08037A6C @ case 3
	.4byte _08037AD0 @ case 4
	.4byte _08037ADE @ case 5
	.4byte _08037BBA @ case 6
	.4byte _08037B2C @ case 7
_080379E8:
	ldr r0, _08037A10 @ =0x0203C770
	mov r2, sb
	lsls r1, r2, #2
	add r1, sb
	lsls r1, r1, #2
	adds r1, r1, r0
	movs r0, #0x80
	ldrb r1, [r1, #0xf]
	ands r0, r1
	cmp r0, #0
	bne _08037A00
	b _08037B24
_08037A00:
	movs r0, #2
	bl sub_8036D08
	ldr r1, _08037A14 @ =0x0203C618
	ldr r0, [r7, #0x40]
	strb r0, [r1, #3]
	b _08037A30
	.align 2, 0
_08037A10: .4byte 0x0203C770
_08037A14: .4byte 0x0203C618
_08037A18:
	movs r0, #2
	bl sub_8036D08
	ldr r2, _08037A38 @ =0x0203C618
	ldr r1, _08037A3C @ =0x0203C770
	mov r3, sb
	lsls r0, r3, #2
	add r0, sb
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrb r0, [r0, #0xf]
	strb r0, [r2, #3]
_08037A30:
	adds r0, r7, #0
	bl Proc_Break
	b _08037D64
	.align 2, 0
_08037A38: .4byte 0x0203C618
_08037A3C: .4byte 0x0203C770
_08037A40:
	ldr r0, _08037A68 @ =0x0203C770
	mov r2, sb
	lsls r1, r2, #2
	add r1, sb
	lsls r1, r1, #2
	adds r1, r1, r0
	movs r0, #0x80
	ldrb r1, [r1, #0xf]
	ands r0, r1
	cmp r0, #0
	bne _08037B24
	movs r0, #2
	bl sub_8036D08
	adds r0, r7, #0
	movs r1, #4
	bl Proc_Goto
	b _08037D64
	.align 2, 0
_08037A68: .4byte 0x0203C770
_08037A6C:
	ldr r0, [r7, #0x38]
	cmp r0, #1
	bgt _08037A74
	b _08037BBA
_08037A74:
	movs r0, #2
	bl sub_8036D08
	adds r0, r7, #0
	adds r0, #0x53
	mov r3, sb
	strb r3, [r0]
	mov r1, sl
	ldrb r1, [r1]
	subs r2, r3, r1
	lsls r2, r2, #4
	adds r2, #0x28
	movs r0, #0x27
	str r0, [sp]
	adds r0, r7, #0
	movs r1, #0x50
	movs r3, #0x88
	bl sub_8036AF8
	str r0, [r7, #0x30]
	mov r1, sb
	adds r1, #1
	ldr r0, [r7, #0x38]
	cmp r1, r0
	bge _08037AB8
	ldr r0, _08037AB4 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x80
	ldrh r2, [r1, #6]
	orrs r0, r2
	b _08037AC2
	.align 2, 0
_08037AB4: .4byte gKeySt
_08037AB8:
	ldr r0, _08037ACC @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x40
	ldrh r3, [r1, #6]
	orrs r0, r3
_08037AC2:
	strh r0, [r1, #6]
	movs r0, #5
	strb r0, [r4]
	b _08037BBA
	.align 2, 0
_08037ACC: .4byte gKeySt
_08037AD0:
	movs r0, #2
	bl sub_8036D08
	adds r0, r7, #0
	bl sub_80371B4
	b _08037BBA
_08037ADE:
	ldr r0, _08037B20 @ =0x0203C770
	mov r2, sb
	lsls r1, r2, #2
	add r1, sb
	lsls r1, r1, #2
	adds r1, r1, r0
	movs r0, #0x80
	ldrb r1, [r1, #0xf]
	ands r0, r1
	cmp r0, #0
	bne _08037B24
	movs r0, #2
	bl sub_8036D08
	mov r0, sb
	mov r3, sl
	ldrb r3, [r3]
	subs r2, r0, r3
	lsls r2, r2, #4
	adds r2, #0x28
	movs r0, #0x27
	str r0, [sp]
	adds r0, r7, #0
	movs r1, #0x50
	movs r3, #0x88
	bl sub_8036AF8
	str r0, [r7, #0x30]
	adds r0, r7, #0
	movs r1, #7
	bl Proc_Goto
	b _08037BBA
	.align 2, 0
_08037B20: .4byte 0x0203C770
_08037B24:
	movs r0, #0
	bl sub_8036D08
	b _08037BBA
_08037B2C:
	movs r0, #2
	bl sub_8036D08
	mov r0, sb
	lsls r4, r0, #2
	add r4, sb
	lsls r4, r4, #2
	ldr r0, _08037BE4 @ =0x0203C770
	adds r4, r4, r0
	movs r1, #0x53
	adds r1, r1, r7
	mov r8, r1
	ldrb r2, [r1]
	lsls r1, r2, #4
	mov r3, r8
	ldrb r3, [r3]
	subs r1, r1, r3
	ldr r6, _08037BE8 @ =0x0203C944
	adds r1, r1, r6
	adds r0, r4, #0
	bl sub_80368DC
	ldr r5, _08037BEC @ =0x0203C618
	adds r0, r5, #6
	mov r1, r8
	ldrb r1, [r1]
	adds r0, r1, r0
	ldrb r1, [r4, #0xf]
	strb r1, [r0]
	mov r2, r8
	ldrb r2, [r2]
	lsls r0, r2, #3
	adds r5, #0x64
	adds r0, r0, r5
	bl ClearText
	mov r3, r8
	ldrb r1, [r3]
	lsls r0, r1, #3
	adds r0, r0, r5
	lsls r2, r1, #1
	adds r2, r2, r1
	adds r2, #5
	lsls r3, r1, #4
	subs r3, r3, r1
	adds r3, r3, r6
	movs r1, #0xa
	str r1, [sp]
	movs r1, #1
	bl PutDrawTextCentered
	bl sub_803784C
	adds r1, r7, #0
	adds r1, #0x5c
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08037BAE
	ldr r1, [sp, #4]
	ldr r0, [r1, #0x40]
	cmp r0, #0
	bne _08037BAE
	movs r0, #8
	str r0, [r1, #0x40]
_08037BAE:
	movs r0, #0
	str r0, [r7, #0x44]
	adds r0, r7, #0
	movs r1, #6
	bl Proc_Goto
_08037BBA:
	ldr r0, _08037BF0 @ =gKeySt
	ldr r1, [r0]
	movs r0, #2
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08037C0E
	movs r0, #1
	bl sub_8036D08
	adds r1, r7, #0
	adds r1, #0x52
	ldrb r0, [r1]
	cmp r0, #5
	bne _08037BF4
	movs r0, #4
	strb r0, [r1]
	ldr r0, [r7, #0x30]
	bl Proc_End
	b _08037D64
	.align 2, 0
_08037BE4: .4byte 0x0203C770
_08037BE8: .4byte 0x0203C944
_08037BEC: .4byte 0x0203C618
_08037BF0: .4byte gKeySt
_08037BF4:
	cmp r0, #8
	beq _08037C02
	adds r0, r7, #0
	movs r1, #2
	bl Proc_Goto
	b _08037C0E
_08037C02:
	movs r0, #0
	str r0, [r7, #0x44]
	adds r0, r7, #0
	movs r1, #6
	bl Proc_Goto
_08037C0E:
	ldr r0, _08037CB8 @ =gKeySt
	ldr r1, [r0]
	movs r0, #8
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08037C48
	adds r0, r7, #0
	adds r0, #0x5c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08037C48
	ldr r0, _08037CBC @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08037C3A
	movs r0, #0x6a
	bl m4aSongNumStart
_08037C3A:
	ldr r1, _08037CC0 @ =0x0203C618
	movs r0, #0
	strb r0, [r1, #3]
	adds r0, r7, #0
	movs r1, #9
	bl Proc_Goto
_08037C48:
	ldr r0, _08037CB8 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x40
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _08037CCE
	mov r2, sl
	ldrb r0, [r2]
	cmp r0, #0
	beq _08037CC4
	ldr r0, [r7, #0x40]
	ldrb r3, [r2]
	subs r0, r0, r3
	cmp r0, #1
	bgt _08037CC4
	adds r4, r7, #0
	adds r4, #0x4a
	ldrh r0, [r4]
	subs r0, #4
	strh r0, [r4]
	ldr r0, [r7, #0x30]
	cmp r0, #0
	beq _08037C7E
	movs r1, #4
	bl sub_8036B38
_08037C7E:
	movs r0, #4
	bl sub_8040530
	mov r1, sl
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	movs r0, #3
	ldr r2, [sp, #8]
	strb r0, [r2]
	ldr r0, [r7, #0x40]
	subs r0, #1
	str r0, [r7, #0x40]
	ldrh r2, [r4]
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	ldr r0, [r7, #0x38]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldrh r1, [r4]
	adds r1, #0x28
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_8040AEC
	b _08037CCE
	.align 2, 0
_08037CB8: .4byte gKeySt
_08037CBC: .4byte gPlaySt
_08037CC0: .4byte 0x0203C618
_08037CC4:
	ldr r0, [r7, #0x40]
	cmp r0, #0
	ble _08037CCE
	subs r0, #1
	str r0, [r7, #0x40]
_08037CCE:
	ldr r0, _08037D48 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x80
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _08037D58
	ldr r1, [r7, #0x38]
	cmp r1, #6
	ble _08037D4C
	mov r3, sl
	ldrb r2, [r3]
	adds r0, r2, #6
	cmp r0, r1
	bge _08037D4C
	ldr r0, [r7, #0x40]
	subs r0, r0, r2
	cmp r0, #3
	ble _08037D4C
	adds r4, r7, #0
	adds r4, #0x4a
	ldrh r0, [r4]
	adds r0, #4
	strh r0, [r4]
	ldr r0, [r7, #0x30]
	cmp r0, #0
	beq _08037D0C
	movs r1, #4
	rsbs r1, r1, #0
	bl sub_8036B38
_08037D0C:
	movs r0, #4
	rsbs r0, r0, #0
	bl sub_8040530
	mov r1, sl
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	movs r0, #0xfd
	ldr r2, [sp, #8]
	strb r0, [r2]
	ldr r0, [r7, #0x40]
	adds r0, #1
	str r0, [r7, #0x40]
	ldrh r2, [r4]
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	ldr r0, [r7, #0x38]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldrh r1, [r4]
	adds r1, #0x28
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_8040AEC
	b _08037D58
	.align 2, 0
_08037D48: .4byte gKeySt
_08037D4C:
	subs r0, r1, #1
	ldr r1, [r7, #0x40]
	cmp r1, r0
	bge _08037D58
	adds r0, r1, #1
	str r0, [r7, #0x40]
_08037D58:
	ldr r0, [r7, #0x40]
	cmp sb, r0
	beq _08037D64
	movs r0, #3
	bl sub_8036D08
_08037D64:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8037D74
sub_8037D74: @ 0x08037D74
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	rsbs r1, r1, #0
	subs r1, #8
	movs r2, #4
	adds r0, #0x38
_08037D80:
	strh r1, [r0]
	subs r0, #2
	subs r2, #1
	cmp r2, #0
	bge _08037D80
	bx lr

	thumb_func_start sub_8037D8C
sub_8037D8C: @ 0x08037D8C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r6, [r4, #0x2c]
	ldr r0, _08037DF0 @ =0x0810F19F
	ldr r1, [r4, #0x44]
	adds r1, r1, r0
	movs r5, #0
	ldrsb r5, [r1, r5]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r5, r0
	bne _08037DAC
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
_08037DAC:
	ldr r0, [r4, #0x44]
	adds r0, #1
	str r0, [r4, #0x44]
	movs r0, #2
	rsbs r0, r0, #0
	cmp r5, r0
	bne _08037DF8
	ldr r3, _08037DF4 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	strb r0, [r3, #0x10]
	adds r0, r1, #0
	ldrb r2, [r3, #0x14]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x14]
	ldrb r0, [r3, #0xc]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0xc]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	adds r1, r6, #0
	adds r1, #0x44
	movs r0, #0
	strb r0, [r1]
	b _08037E0C
	.align 2, 0
_08037DF0: .4byte 0x0810F19F
_08037DF4: .4byte gDispIo
_08037DF8:
	lsls r1, r5, #0x10
	lsrs r1, r1, #0x10
	movs r0, #0
	movs r2, #0
	bl SetBgOffset
	adds r0, r6, #0
	adds r1, r5, #0
	bl sub_8037D74
_08037E0C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8037E14
sub_8037E14: @ 0x08037E14
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r6, [r4, #0x2c]
	ldr r1, _08037E7C @ =0x0810F19F
	ldr r0, [r4, #0x44]
	adds r0, r0, r1
	movs r5, #0
	ldrsb r5, [r0, r5]
	movs r7, #1
	rsbs r7, r7, #0
	cmp r5, r7
	bne _08037E34
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
_08037E34:
	ldr r0, [r4, #0x44]
	adds r0, #1
	str r0, [r4, #0x44]
	movs r0, #2
	rsbs r0, r0, #0
	cmp r5, r0
	bne _08037E84
	ldr r3, _08037E80 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	adds r1, r6, #0
	adds r1, #0x44
	movs r0, #1
	strb r0, [r1]
	str r7, [r6, #0x48]
	b _08037E98
	.align 2, 0
_08037E7C: .4byte 0x0810F19F
_08037E80: .4byte gDispIo
_08037E84:
	lsls r1, r5, #0x10
	lsrs r1, r1, #0x10
	movs r0, #0
	movs r2, #0
	bl SetBgOffset
	adds r0, r6, #0
	adds r1, r5, #0
	bl sub_8037D74
_08037E98:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8037EA0
sub_8037EA0: @ 0x08037EA0
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x55
	movs r0, #1
	strb r0, [r1]
	bl sub_80410BC
	adds r1, r5, #0
	adds r1, #0x48
	ldr r0, [r5, #0x40]
	ldrb r1, [r1]
	subs r0, r0, r1
	cmp r0, #2
	ble _08037EC4
	lsls r0, r0, #1
	subs r0, #2
	b _08037EC8
_08037EC4:
	lsls r0, r0, #1
	adds r0, #5
_08037EC8:
	str r0, [r5, #0x58]
	ldr r4, _08037EF8 @ =0x0203C6A4
	adds r0, r4, #0
	bl ClearText
	ldr r1, _08037EFC @ =0x0810F1AC
	adds r0, r4, #0
	bl Text_DrawString
	ldr r1, [r5, #0x58]
	adds r1, #4
	lsls r1, r1, #6
	ldr r0, _08037F00 @ =0x02021B26
	adds r1, r1, r0
	adds r0, r4, #0
	bl PutText
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08037EF8: .4byte 0x0203C6A4
_08037EFC: .4byte 0x0810F1AC
_08037F00: .4byte 0x02021B26

	thumb_func_start sub_8037F04
sub_8037F04: @ 0x08037F04
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x58]
	lsls r1, r1, #3
	adds r1, #0x18
	movs r0, #0x60
	bl sub_80410F8
	ldr r0, _08037FA8 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x20
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08037F36
	adds r1, r4, #0
	adds r1, #0x55
	ldrb r0, [r1]
	cmp r0, #1
	bne _08037F36
	movs r0, #0
	strb r0, [r1]
	movs r0, #3
	bl sub_8036D08
_08037F36:
	ldr r0, _08037FA8 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x10
	ldrh r1, [r1, #8]
	ands r0, r1
	adds r5, r4, #0
	adds r5, #0x55
	cmp r0, #0
	beq _08037F58
	ldrb r0, [r5]
	cmp r0, #0
	bne _08037F58
	movs r0, #1
	strb r0, [r5]
	movs r0, #3
	bl sub_8036D08
_08037F58:
	ldrb r1, [r5]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #0x70
	ldr r1, [r4, #0x58]
	lsls r1, r1, #3
	adds r1, #0x20
	bl sub_80415CC
	ldr r0, _08037FA8 @ =gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08037FB0
	movs r0, #1
	bl sub_8036D08
	ldr r0, [r4, #0x30]
	bl Proc_End
	ldr r0, [r4, #0x58]
	adds r0, #4
	lsls r0, r0, #6
	ldr r1, _08037FAC @ =0x02021B26
	adds r0, r0, r1
	movs r1, #0xc
	movs r2, #2
	movs r3, #0
	bl TmFillRect_t
	movs r0, #1
	bl EnableBgSync
	adds r0, r4, #0
	bl Proc_Break
	b _08037FF8
	.align 2, 0
_08037FA8: .4byte gKeySt
_08037FAC: .4byte 0x02021B26
_08037FB0:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08037FF8
	ldr r0, [r4, #0x30]
	bl Proc_End
	ldrb r0, [r5]
	cmp r0, #0
	bne _08037FD2
	adds r0, r4, #0
	bl sub_80370E4
	movs r0, #2
	bl sub_8036D08
	b _08037FD8
_08037FD2:
	movs r0, #1
	bl sub_8036D08
_08037FD8:
	ldr r0, [r4, #0x58]
	adds r0, #4
	lsls r0, r0, #6
	ldr r1, _08038000 @ =0x02021B26
	adds r0, r0, r1
	movs r1, #0xc
	movs r2, #2
	movs r3, #0
	bl TmFillRect_t
	movs r0, #1
	bl EnableBgSync
	adds r0, r4, #0
	bl Proc_Break
_08037FF8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08038000: .4byte 0x02021B26

	thumb_func_start sub_8038004
sub_8038004: @ 0x08038004
	push {r4, r5, lr}
	sub sp, #0x10
	adds r5, r0, #0
	ldr r4, [r5, #0x40]
	movs r0, #1
	bl GetUnit
	adds r1, r0, #0
	adds r0, r4, #0
	mov r2, sp
	bl sub_808642C
	adds r0, r5, #0
	bl sub_8084168
	add sp, #0x10
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_803802C
sub_803802C: @ 0x0803802C
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r1, #0x34
	muls r0, r1, r0
	ldr r1, _0803803C @ =0x0810DBCC
	adds r0, r0, r1
	bx lr
	.align 2, 0
_0803803C: .4byte 0x0810DBCC

	thumb_func_start sub_8038040
sub_8038040: @ 0x08038040
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	movs r6, #0
	adds r5, r0, #0
	adds r5, #0x31
	ldr r1, _0803811C @ =0x0203C708
	mov r8, r1
	adds r7, r0, #0
	adds r7, #0x30
_0803805A:
	ldrb r3, [r5]
	lsls r0, r3, #2
	adds r0, r0, r3
	adds r0, r6, r0
	lsls r0, r0, #3
	add r0, r8
	bl ClearText
	ldrb r1, [r5]
	lsls r0, r1, #2
	adds r0, r0, r1
	adds r0, r6, r0
	lsls r0, r0, #3
	add r0, r8
	movs r1, #0
	bl Text_SetColor
	movs r2, #0
	lsls r3, r6, #4
	mov sb, r3
	lsls r0, r6, #1
	mov sl, r0
	adds r1, r6, #1
	str r1, [sp]
_0803808A:
	mov r3, sb
	subs r0, r3, r6
	adds r0, r0, r2
	lsls r0, r0, #1
	ldr r1, _08038120 @ =0x0810EFD2
	adds r0, r0, r1
	movs r3, #0
	ldrsh r1, [r0, r3]
	movs r0, #0x34
	muls r1, r0, r1
	ldr r0, _08038124 @ =0x0810DBCC
	adds r4, r1, r0
	ldrb r1, [r7]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r4, r0
	ldr r0, [r0]
	ldrb r0, [r0]
	cmp r0, #0
	beq _080380E6
	ldrb r3, [r5]
	lsls r0, r3, #2
	adds r0, r0, r3
	adds r0, r6, r0
	lsls r0, r0, #3
	add r0, r8
	ldrh r1, [r4, #0x24]
	str r2, [sp, #4]
	bl Text_SetCursor
	ldrb r1, [r5]
	lsls r0, r1, #2
	adds r0, r0, r1
	adds r0, r6, r0
	lsls r0, r0, #3
	add r0, r8
	ldrb r3, [r7]
	lsls r1, r3, #1
	adds r1, r1, r3
	lsls r1, r1, #2
	adds r1, r4, r1
	ldr r1, [r1]
	bl Text_DrawString
	ldr r2, [sp, #4]
_080380E6:
	adds r2, #1
	cmp r2, #0xe
	ble _0803808A
	ldrb r1, [r5]
	lsls r0, r1, #2
	adds r0, r0, r1
	adds r0, r6, r0
	lsls r0, r0, #3
	add r0, r8
	mov r1, sl
	adds r1, #9
	lsls r1, r1, #6
	ldr r2, _08038128 @ =gBg1Tm
	adds r1, r1, r2
	bl PutText
	ldr r6, [sp]
	cmp r6, #4
	ble _0803805A
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803811C: .4byte 0x0203C708
_08038120: .4byte 0x0810EFD2
_08038124: .4byte 0x0810DBCC
_08038128: .4byte gBg1Tm

	thumb_func_start sub_803812C
sub_803812C: @ 0x0803812C
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, _08038158 @ =0x0203C910
	adds r0, r5, #0
	bl ClearText
	adds r4, #0x3a
	adds r0, r5, #0
	adds r1, r4, #0
	bl Text_DrawString
	ldr r1, _0803815C @ =0x02021C60
	adds r0, r5, #0
	bl PutText
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08038158: .4byte 0x0203C910
_0803815C: .4byte 0x02021C60

	thumb_func_start sub_8038160
sub_8038160: @ 0x08038160
	push {r4, r5, r6, lr}
	sub sp, #0x18
	adds r6, r0, #0
	ldr r1, _0803826C @ =0x0810F1BD
	add r0, sp, #8
	movs r2, #0xa
	bl memcpy
	bl sub_8036B40
	bl sub_803FA14
	ldr r0, _08038270 @ =0x08107820
	ldr r1, _08038274 @ =0x06014800
	bl Decompress
	ldr r0, _08038278 @ =0x08109A00
	movs r1, #0x98
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0803827C @ =0x08109C40
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #0
	movs r1, #0
	bl sub_803FAA4
	ldr r0, _08038280 @ =0x02022D08
	ldr r1, _08038284 @ =0x0810A044
	movs r2, #0x80
	lsls r2, r2, #5
	bl TmApplyTsa_t
	ldr r0, _08038288 @ =0x0203C758
	bl SetTextFont
	bl InitSystemTextFont
	bl ResetTextFont
	add r0, sp, #0x14
	movs r4, #0
	strh r4, [r0]
	adds r1, r6, #0
	adds r1, #0x3a
	ldr r5, _0803828C @ =0x01000007
	adds r2, r5, #0
	bl CpuSet
	mov r0, sp
	adds r0, #0x16
	strh r4, [r0]
	adds r1, r6, #0
	adds r1, #0x4a
	adds r2, r5, #0
	bl CpuSet
	adds r0, r6, #0
	adds r0, #0x36
	strb r4, [r0]
	ldr r0, _08038290 @ =0x0203C910
	movs r1, #8
	bl InitText
	adds r0, r6, #0
	adds r0, #0x30
	strb r4, [r0]
	movs r0, #6
	strh r0, [r6, #0x32]
	bl sub_803802C
	ldrh r1, [r0, #0x24]
	subs r1, #4
	ldrh r2, [r0, #0x26]
	adds r2, #1
	adds r0, r6, #0
	bl sub_804067C
	str r0, [r6, #0x2c]
	adds r0, r6, #0
	adds r0, #0x37
	strb r4, [r0]
	ldr r5, _08038294 @ =0x0203C708
	movs r4, #9
_08038212:
	adds r0, r5, #0
	movs r1, #0x1a
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _08038212
	ldr r4, _08038298 @ =0x0203C6A4
	adds r0, r4, #0
	movs r1, #0xc
	bl InitText
	ldr r0, [r6, #0x2c]
	movs r1, #3
	bl sub_803FC3C
	subs r4, #0x8c
	ldrb r0, [r4]
	str r0, [sp]
	ldr r0, [r6, #0x2c]
	str r0, [sp, #4]
	add r0, sp, #8
	movs r1, #0xa
	movs r2, #0
	movs r3, #8
	bl sub_803FD40
	ldr r1, _0803829C @ =0x0203C918
	movs r0, #0
	strb r0, [r1]
	adds r1, r6, #0
	adds r1, #0x31
	movs r0, #0
	strb r0, [r1]
	adds r0, r6, #0
	bl sub_8038040
	movs r0, #0xf
	bl EnableBgSync
	add sp, #0x18
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803826C: .4byte 0x0810F1BD
_08038270: .4byte 0x08107820
_08038274: .4byte 0x06014800
_08038278: .4byte 0x08109A00
_0803827C: .4byte 0x08109C40
_08038280: .4byte 0x02022D08
_08038284: .4byte 0x0810A044
_08038288: .4byte 0x0203C758
_0803828C: .4byte 0x01000007
_08038290: .4byte 0x0203C910
_08038294: .4byte 0x0203C708
_08038298: .4byte 0x0203C6A4
_0803829C: .4byte 0x0203C918

	thumb_func_start sub_80382A0
sub_80382A0: @ 0x080382A0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sl, r0
	mov sb, r1
	movs r0, #0x81
	bl GetUnit
	mov r8, r0
	mov r4, r8
	movs r6, #4
_080382BA:
	adds r0, r4, #0
	bl ClearUnit
	adds r4, #0x48
	subs r6, #1
	cmp r6, #0
	bge _080382BA
	movs r6, #0
	mov r7, r8
_080382CC:
	ldr r0, _08038320 @ =0x0203D494
	adds r0, r6, r0
	ldrb r0, [r0]
	cmp r0, #0
	beq _080382FE
	bl GetUnitByPid
	adds r4, r0, #0
	movs r0, #8
	ldrh r1, [r4, #0xc]
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	bne _080382FE
	adds r0, r4, #0
	movs r1, #0
	bl SetUnitStatus
	strh r5, [r4, #0xc]
	adds r0, r4, #0
	adds r1, r7, #0
	movs r2, #0x48
	bl sub_8015504
_080382FE:
	adds r7, #0x48
	adds r6, #1
	cmp r6, #4
	ble _080382CC
	mov r0, sb
	mov r1, r8
	mov r2, sl
	bl sub_80863CC
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08038320: .4byte 0x0203D494

	thumb_func_start sub_8038324
sub_8038324: @ 0x08038324
	push {r4, r5, r6, r7, lr}
	mov ip, r0
	lsls r5, r1, #1
	adds r2, #0x2a
	adds r2, r2, r5
	ldrh r4, [r2]
	movs r0, #0
	ldrsh r1, [r2, r0]
	movs r0, #0x34
	muls r0, r1, r0
	ldr r7, _0803837C @ =0x0810DBCC
	adds r2, r0, r7
	mov r1, ip
	adds r1, #0x30
	ldrb r3, [r1]
	lsls r0, r3, #1
	adds r0, r0, r3
	lsls r3, r0, #2
	adds r0, r2, r3
	ldr r0, [r0]
	ldrb r0, [r0]
	cmp r0, #0
	bne _08038372
	adds r1, r5, #0
	movs r6, #0x34
	adds r5, r7, #0
_08038358:
	adds r0, r2, #0
	adds r0, #0x2a
	adds r0, r0, r1
	ldrh r4, [r0]
	movs r2, #0
	ldrsh r0, [r0, r2]
	muls r0, r6, r0
	adds r2, r0, r5
	adds r0, r2, r3
	ldr r0, [r0]
	ldrb r0, [r0]
	cmp r0, #0
	beq _08038358
_08038372:
	mov r3, ip
	strh r4, [r3, #0x32]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803837C: .4byte 0x0810DBCC

	thumb_func_start sub_8038380
sub_8038380: @ 0x08038380
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r7, r1, #0
	adds r6, r5, #0
	adds r6, #0x36
	ldrb r0, [r6]
	cmp r0, #0xd
	bhi _080383EC
	movs r0, #2
	bl sub_8036D08
	adds r4, r5, #0
	adds r4, #0x30
	ldrb r1, [r4]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r7, r0
	ldr r0, [r0]
	ldrb r1, [r6]
	adds r1, #0x3a
	adds r1, r5, r1
	bl sub_80368DC
	ldrb r1, [r6]
	lsrs r0, r1, #1
	lsls r0, r0, #1
	adds r2, r5, #0
	adds r2, #0x4a
	adds r2, r2, r0
	ldr r1, _080383E8 @ =0x00003FFF
	ldrh r0, [r5, #0x32]
	ands r1, r0
	movs r0, #3
	ldrb r4, [r4]
	ands r0, r4
	lsls r0, r0, #0xe
	orrs r1, r0
	strh r1, [r2]
	ldrb r0, [r6]
	adds r0, #2
	cmp r0, #0xd
	bgt _080383D8
	strb r0, [r6]
_080383D8:
	adds r0, r5, #0
	bl sub_803812C
	adds r1, r5, #0
	adds r1, #0x37
	movs r0, #0
	strb r0, [r1]
	b _080383F2
	.align 2, 0
_080383E8: .4byte 0x00003FFF
_080383EC:
	movs r0, #0
	bl sub_8036D08
_080383F2:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80383F8
sub_80383F8: @ 0x080383F8
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x36
	ldrb r0, [r4]
	cmp r0, #0
	beq _08038448
	movs r0, #2
	bl sub_8036D08
	ldrb r1, [r4]
	lsrs r0, r1, #1
	lsls r0, r0, #1
	adds r2, r5, #0
	adds r2, #0x4a
	adds r0, r2, r0
	ldrh r0, [r0]
	cmp r0, #0
	bne _08038422
	subs r0, r1, #2
	strb r0, [r4]
_08038422:
	ldrb r1, [r4]
	adds r0, r1, r5
	adds r0, #0x3a
	movs r1, #0
	strb r1, [r0]
	ldrb r4, [r4]
	lsrs r0, r4, #1
	lsls r0, r0, #1
	adds r0, r2, r0
	movs r2, #0
	movs r1, #0
	strh r1, [r0]
	adds r0, r5, #0
	adds r0, #0x37
	strb r2, [r0]
	adds r0, r5, #0
	bl sub_803812C
	b _0803844E
_08038448:
	movs r0, #0
	bl sub_8036D08
_0803844E:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8038454
sub_8038454: @ 0x08038454
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x3a
	ldrb r0, [r4]
	cmp r0, #0
	beq _08038480
	movs r0, #2
	bl sub_8036D08
	ldr r0, _0803847C @ =0x0203C618
	ldrb r1, [r0, #3]
	adds r0, r4, #0
	bl sub_80382A0
	adds r0, r5, #0
	bl Proc_Break
	b _08038486
	.align 2, 0
_0803847C: .4byte 0x0203C618
_08038480:
	movs r0, #0
	bl sub_8036D08
_08038486:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_803848C
sub_803848C: @ 0x0803848C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	str r2, [sp]
	mov r8, r3
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #2
	bne _080384BC
	cmp r3, #0
	bne _080384BC
	movs r0, #2
	bl sub_8036D08
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_8038380
	b _0803857A
_080384BC:
	adds r7, r4, #0
	adds r7, #0x36
	ldrb r0, [r7]
	cmp r0, #0
	beq _0803856E
	ldrb r0, [r7]
	lsrs r2, r0, #1
	lsls r1, r2, #1
	adds r5, r4, #0
	adds r5, #0x4a
	adds r1, r5, r1
	ldr r3, _0803855C @ =0x00003FFF
	adds r0, r3, #0
	ldrh r1, [r1]
	ands r0, r1
	movs r1, #1
	mov sb, r1
	cmp r0, #0
	beq _080384E6
	movs r0, #0
	mov sb, r0
_080384E6:
	mov r0, sb
	subs r1, r2, r0
	lsls r1, r1, #1
	adds r1, r5, r1
	adds r0, r3, #0
	ldrh r1, [r1]
	ands r0, r1
	bl sub_803802C
	mov sl, r0
	ldrb r1, [r7]
	lsrs r0, r1, #1
	mov r2, sb
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, r5, r0
	ldrh r0, [r0]
	lsrs r5, r0, #0xe
	ldr r3, [sp]
	lsls r6, r3, #2
	adds r1, r4, #0
	adds r1, #0x30
	ldrb r2, [r1]
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #2
	adds r0, r6, r0
	add r0, sl
	ldr r0, [r0]
	ldrb r0, [r0]
	cmp r0, #0
	beq _08038560
	movs r0, #2
	bl sub_8036D08
	lsls r0, r5, #1
	adds r0, r0, r5
	lsls r0, r0, #2
	adds r0, r6, r0
	add r0, sl
	ldr r0, [r0]
	ldrb r1, [r7]
	adds r1, #0x3a
	adds r1, r4, r1
	mov r3, sb
	lsls r2, r3, #1
	subs r1, r1, r2
	bl sub_80368DC
	adds r0, r4, #0
	bl sub_803812C
	adds r0, r4, #0
	adds r0, #0x37
	mov r1, sp
	ldrb r1, [r1]
	strb r1, [r0]
	movs r0, #1
	b _0803857C
	.align 2, 0
_0803855C: .4byte 0x00003FFF
_08038560:
	mov r2, r8
	cmp r2, #0
	bne _0803857A
	movs r0, #0
	bl sub_8036D08
	b _0803857A
_0803856E:
	mov r3, r8
	cmp r3, #0
	bne _0803857A
	movs r0, #0
	bl sub_8036D08
_0803857A:
	movs r0, #0
_0803857C:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_803858C
sub_803858C: @ 0x0803858C
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r4, _0803860C @ =gKeySt
	ldr r1, [r4]
	movs r0, #0x40
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _080385AA
	adds r0, r5, #0
	movs r1, #0
	adds r2, r6, #0
	bl sub_8038324
_080385AA:
	ldr r1, [r4]
	movs r0, #0x80
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _080385C0
	adds r0, r5, #0
	movs r1, #1
	adds r2, r6, #0
	bl sub_8038324
_080385C0:
	ldr r1, [r4]
	movs r0, #0x20
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _080385D6
	adds r0, r5, #0
	movs r1, #2
	adds r2, r6, #0
	bl sub_8038324
_080385D6:
	ldr r1, [r4]
	movs r0, #0x10
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _080385EC
	adds r0, r5, #0
	movs r1, #3
	adds r2, r6, #0
	bl sub_8038324
_080385EC:
	ldr r1, [r4]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080386C6
	adds r0, r6, #0
	adds r0, #0x32
	ldrb r0, [r0]
	cmp r0, #7
	bhi _080386C6
	lsls r0, r0, #2
	ldr r1, _08038610 @ =_08038614
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0803860C: .4byte gKeySt
_08038610: .4byte _08038614
_08038614: @ jump table
	.4byte _08038634 @ case 0
	.4byte _08038668 @ case 1
	.4byte _08038684 @ case 2
	.4byte _080386AA @ case 3
	.4byte _0803863E @ case 4
	.4byte _08038648 @ case 5
	.4byte _08038652 @ case 6
	.4byte _0803865A @ case 7
_08038634:
	adds r0, r5, #0
	adds r1, r6, #0
	bl sub_8038380
	b _080386C6
_0803863E:
	adds r0, r5, #0
	adds r1, r6, #0
	bl sub_80383F8
	b _080386C6
_08038648:
	adds r0, r5, #0
	adds r1, r6, #0
	bl sub_8038454
	b _080386C6
_08038652:
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #1
	b _08038660
_0803865A:
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #2
_08038660:
	movs r3, #0
	bl sub_803848C
	b _080386C6
_08038668:
	adds r4, r5, #0
	adds r4, #0x30
	ldrb r0, [r4]
	cmp r0, #0
	beq _080386A2
	movs r0, #2
	bl sub_8036D08
	movs r0, #0
	strb r0, [r4]
	adds r1, r5, #0
	adds r1, #0x37
	strb r0, [r1]
	b _0803877E
_08038684:
	adds r4, r5, #0
	adds r4, #0x30
	ldrb r0, [r4]
	cmp r0, #1
	beq _080386A2
	movs r0, #2
	bl sub_8036D08
	movs r1, #0
	movs r0, #1
_08038698:
	strb r0, [r4]
	adds r0, r5, #0
	adds r0, #0x37
	strb r1, [r0]
	b _0803877E
_080386A2:
	movs r0, #0
	bl sub_8036D08
	b _080386C6
_080386AA:
	adds r4, r5, #0
	adds r4, #0x30
	ldrb r1, [r4]
	cmp r1, #2
	beq _080386C0
	movs r0, #2
	bl sub_8036D08
	movs r1, #0
	movs r0, #2
	b _08038698
_080386C0:
	movs r0, #0
	bl sub_8036D08
_080386C6:
	ldr r0, _080386E0 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0803870E
	adds r0, r5, #0
	adds r0, #0x37
	ldrb r7, [r0]
	adds r4, r0, #0
	b _080386F6
	.align 2, 0
_080386E0: .4byte gKeySt
_080386E4:
	ldrb r2, [r4]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r3, #1
	bl sub_803848C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0803870E
_080386F6:
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	ldrb r0, [r4]
	movs r1, #3
	bl __umodsi3
	strb r0, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r7, r0
	bne _080386E4
_0803870E:
	ldr r4, _08038788 @ =gKeySt
	ldr r1, [r4]
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08038726
	adds r0, r5, #0
	adds r1, r6, #0
	bl sub_80383F8
_08038726:
	ldr r1, [r4]
	movs r0, #8
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0803873C
	movs r0, #3
	bl sub_8036D08
	movs r0, #5
	strh r0, [r5, #0x32]
_0803873C:
	ldr r0, [r4]
	ldrh r1, [r0, #8]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _0803878C
	movs r0, #2
	bl sub_8036D08
	adds r4, r5, #0
	adds r4, #0x30
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	ldrb r0, [r4]
	movs r1, #3
	bl __umodsi3
	strb r0, [r4]
	lsls r0, r0, #1
	ldrb r4, [r4]
	adds r0, r0, r4
	lsls r0, r0, #2
	adds r0, r6, r0
	ldr r0, [r0]
	ldrb r0, [r0]
	cmp r0, #0
	bne _0803877E
	adds r0, r5, #0
	movs r1, #0
	adds r2, r6, #0
	bl sub_8038324
_0803877E:
	adds r0, r5, #0
	movs r1, #1
	bl Proc_Goto
	b _080387B6
	.align 2, 0
_08038788: .4byte gKeySt
_0803878C:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080387B6
	adds r0, r5, #0
	adds r0, #0x36
	ldrb r0, [r0]
	cmp r0, #0
	beq _080387A8
	adds r0, r5, #0
	adds r1, r6, #0
	bl sub_80383F8
	b _080387B6
_080387A8:
	movs r0, #1
	bl sub_8036D08
	adds r0, r5, #0
	movs r1, #3
	bl Proc_Goto
_080387B6:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80387BC
sub_80387BC: @ 0x080387BC
	push {r4, r5, lr}
	sub sp, #0x18
	adds r5, r0, #0
	movs r1, #0x32
	ldrsh r0, [r5, r1]
	bl sub_803802C
	adds r4, r0, #0
	ldrh r0, [r5, #0x32]
	strh r0, [r5, #0x34]
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_803858C
	ldrh r0, [r5, #0x34]
	ldrh r1, [r5, #0x32]
	cmp r0, r1
	beq _080387E6
	movs r0, #3
	bl sub_8036D08
_080387E6:
	movs r1, #0x32
	ldrsh r0, [r5, r1]
	bl sub_803802C
	adds r4, r0, #0
	adds r0, r5, #0
	adds r0, #0x3a
	add r1, sp, #8
	bl sub_80368DC
	add r1, sp, #8
	movs r0, #0
	strb r0, [r1, #0xc]
	adds r0, r1, #0
	bl GetStringTextLen
	adds r3, r0, #0
	ldr r0, [r5, #0x2c]
	ldrh r1, [r4, #0x24]
	subs r1, #4
	ldrh r2, [r4, #0x26]
	adds r2, #1
	adds r4, #0x28
	ldrb r4, [r4]
	str r4, [sp]
	adds r4, r5, #0
	adds r4, #0x30
	ldrb r4, [r4]
	str r4, [sp, #4]
	bl sub_80406B8
	add sp, #0x18
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_803882C
sub_803882C: @ 0x0803882C
	ldr r0, _08038854 @ =0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0xa0
	bhi _08038878
	cmp r0, #0x27
	bhi _08038860
	ldr r1, _08038858 @ =0x04000050
	movs r2, #0x84
	lsls r2, r2, #4
	adds r0, r2, #0
	strh r0, [r1]
	adds r1, #2
	ldr r2, _0803885C @ =0x00000F08
	adds r0, r2, #0
	strh r0, [r1]
	b _08038878
	.align 2, 0
_08038854: .4byte 0x04000006
_08038858: .4byte 0x04000050
_0803885C: .4byte 0x00000F08
_08038860:
	ldr r1, _0803887C @ =0x04000050
	ldr r2, _08038880 @ =0x00000442
	adds r0, r2, #0
	strh r0, [r1]
	ldr r2, _08038884 @ =0x04000052
	ldr r0, _08038888 @ =0x030013E8
	ldrb r1, [r0]
	movs r0, #0xf
	subs r0, r0, r1
	lsls r0, r0, #8
	adds r1, r1, r0
	strh r1, [r2]
_08038878:
	bx lr
	.align 2, 0
_0803887C: .4byte 0x04000050
_08038880: .4byte 0x00000442
_08038884: .4byte 0x04000052
_08038888: .4byte 0x030013E8

	thumb_func_start sub_803888C
sub_803888C: @ 0x0803888C
	push {lr}
	adds r0, #0x38
	movs r1, #0
	strb r1, [r0]
	ldr r0, _080388A0 @ =sub_803882C
	bl SetOnHBlankA
	pop {r0}
	bx r0
	.align 2, 0
_080388A0: .4byte sub_803882C

	thumb_func_start sub_80388A4
sub_80388A4: @ 0x080388A4
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r5, _080388E0 @ =0x030013E8
	adds r4, r6, #0
	adds r4, #0x38
	ldrb r3, [r4]
	movs r0, #8
	str r0, [sp]
	movs r0, #0
	movs r1, #0xf
	movs r2, #0
	bl Interpolate
	strb r0, [r5]
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #8
	bls _080388D6
	adds r0, r6, #0
	bl Proc_Break
_080388D6:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080388E0: .4byte 0x030013E8

	thumb_func_start sub_80388E4
sub_80388E4: @ 0x080388E4
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r2, r4, #0
	adds r2, #0x31
	ldrb r0, [r2]
	adds r0, #1
	movs r5, #0
	movs r1, #1
	ands r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	bl sub_8038040
	movs r0, #2
	bl EnableBgSync
	adds r4, #0x38
	strb r5, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8038910
sub_8038910: @ 0x08038910
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r5, _08038950 @ =0x030013E8
	adds r4, r6, #0
	adds r4, #0x38
	ldrb r3, [r4]
	movs r0, #8
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0xf
	bl Interpolate
	strb r0, [r5]
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #8
	bls _08038948
	movs r0, #0
	bl SetOnHBlankA
	adds r0, r6, #0
	bl Proc_Break
_08038948:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08038950: .4byte 0x030013E8

	thumb_func_start sub_8038954
sub_8038954: @ 0x08038954
	push {r4, lr}
	adds r0, #0x39
	movs r1, #1
	strb r1, [r0]
	bl sub_80410BC
	ldr r4, _08038984 @ =0x0203C6A4
	adds r0, r4, #0
	bl ClearText
	ldr r1, _08038988 @ =0x0810F1C8
	adds r0, r4, #0
	bl Text_DrawString
	ldr r1, _0803898C @ =0x02021E1E
	adds r0, r4, #0
	bl PutText
	movs r0, #1
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08038984: .4byte 0x0203C6A4
_08038988: .4byte 0x0810F1C8
_0803898C: .4byte 0x02021E1E

	thumb_func_start sub_8038990
sub_8038990: @ 0x08038990
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #0x40
	movs r1, #0x58
	bl sub_80410F8
	ldr r0, _08038A20 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x20
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080389BE
	adds r1, r5, #0
	adds r1, #0x39
	ldrb r0, [r1]
	cmp r0, #1
	bne _080389BE
	movs r0, #0
	strb r0, [r1]
	movs r0, #3
	bl sub_8036D08
_080389BE:
	ldr r0, _08038A20 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x10
	ldrh r1, [r1, #8]
	ands r0, r1
	adds r4, r5, #0
	adds r4, #0x39
	cmp r0, #0
	beq _080389E0
	ldrb r0, [r4]
	cmp r0, #0
	bne _080389E0
	movs r0, #1
	strb r0, [r4]
	movs r0, #3
	bl sub_8036D08
_080389E0:
	ldrb r1, [r4]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #0x50
	movs r1, #0x60
	bl sub_80415CC
	ldr r0, _08038A20 @ =gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08038A28
	movs r0, #1
	bl sub_8036D08
	ldr r0, _08038A24 @ =0x02021E1E
	movs r1, #0xc
	movs r2, #2
	movs r3, #0
	bl TmFillRect_t
	movs r0, #1
	bl EnableBgSync
	adds r0, r5, #0
	bl Proc_Break
	b _08038A6E
	.align 2, 0
_08038A20: .4byte gKeySt
_08038A24: .4byte 0x02021E1E
_08038A28:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08038A6E
	ldrb r0, [r4]
	cmp r0, #0
	bne _08038A50
	movs r0, #2
	bl sub_8036D08
	ldr r1, _08038A4C @ =0x0203C918
	movs r0, #1
	strb r0, [r1]
	adds r0, r5, #0
	movs r1, #2
	bl Proc_Goto
	b _08038A56
	.align 2, 0
_08038A4C: .4byte 0x0203C918
_08038A50:
	movs r0, #1
	bl sub_8036D08
_08038A56:
	ldr r0, _08038A74 @ =0x02021E1E
	movs r1, #0xc
	movs r2, #2
	movs r3, #0
	bl TmFillRect_t
	movs r0, #1
	bl EnableBgSync
	adds r0, r5, #0
	bl Proc_Break
_08038A6E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08038A74: .4byte 0x02021E1E

	thumb_func_start sub_8038A78
sub_8038A78: @ 0x08038A78
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x40
	ldrh r0, [r0]
	adds r1, r4, #0
	adds r1, #0x42
	ldrb r2, [r1]
	lsls r1, r2, #3
	movs r3, #0xc0
	lsls r3, r3, #1
	adds r1, r1, r3
	adds r2, #0xa
	bl UnpackFaceChibiSprGraphics
	movs r0, #0
	str r0, [r4, #0x3c]
	subs r0, #0x26
	str r0, [r4, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8038AA4
sub_8038AA4: @ 0x08038AA4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r6, r0, #0
	ldr r4, [r6, #0x2c]
	ldr r0, [r4, #0x64]
	cmp r0, #0
	bne _08038AC8
	ldr r0, [r6, #0x3c]
	cmp r0, #0x20
	ble _08038AC2
	adds r0, r6, #0
	bl Proc_Break
_08038AC2:
	ldr r0, [r4, #0x64]
	cmp r0, #0
	beq _08038ACE
_08038AC8:
	ldr r0, [r6, #0x34]
	adds r0, #1
	str r0, [r6, #0x34]
_08038ACE:
	ldr r0, [r6, #0x38]
	subs r0, #1
	str r0, [r6, #0x38]
	cmp r0, #0
	bge _08038ADC
	movs r0, #0
	str r0, [r6, #0x38]
_08038ADC:
	ldr r4, [r6, #0x38]
	cmp r4, #0
	beq _08038AE4
	b _08038BF4
_08038AE4:
	ldr r3, [r6, #0x3c]
	cmp r3, #0x20
	bgt _08038AFC
	movs r1, #0x50
	rsbs r1, r1, #0
	movs r0, #0x20
	str r0, [sp]
	movs r0, #4
	movs r2, #0
	bl Interpolate
	str r0, [r6, #0x30]
_08038AFC:
	ldr r0, [r6, #0x3c]
	adds r0, #1
	str r0, [r6, #0x3c]
	ldr r1, [r6, #0x30]
	ldr r2, [r6, #0x34]
	subs r2, #0x10
	ldr r3, _08038BA8 @ =0x085C9D08
	movs r0, #0x43
	adds r0, r0, r6
	mov r8, r0
	ldrb r5, [r0]
	lsls r0, r5, #2
	adds r0, r0, r3
	ldr r3, [r0]
	str r4, [sp]
	movs r0, #4
	bl PutSprite
	ldr r1, [r6, #0x30]
	adds r1, #0x48
	ldr r2, [r6, #0x34]
	subs r2, #6
	ldr r3, _08038BAC @ =0x085C9CF8
	adds r5, r6, #0
	adds r5, #0x42
	ldrb r7, [r5]
	lsls r0, r7, #2
	adds r0, r0, r3
	ldr r3, [r0]
	str r4, [sp]
	movs r0, #4
	bl PutSprite
	ldr r1, [r6, #0x30]
	adds r1, #0x60
	ldr r2, [r6, #0x34]
	adds r2, #8
	ldr r3, _08038BB0 @ =0x0810F220
	str r4, [sp]
	movs r0, #4
	bl PutSprite
	ldr r1, [r6, #0x30]
	adds r1, #0x40
	ldr r2, [r6, #0x34]
	adds r2, #8
	ldr r3, _08038BB4 @ =0x0810F256
	mov r4, r8
	ldrb r4, [r4]
	lsls r0, r4, #2
	adds r0, #0x50
	str r0, [sp]
	movs r0, #4
	bl PutSprite
	ldr r1, [r6, #0x30]
	rsbs r1, r1, #0
	adds r1, #0x70
	ldr r2, [r6, #0x34]
	subs r2, #8
	ldr r3, _08038BB8 @ =0x0810F228
	movs r0, #0xf
	ldrb r7, [r5]
	ands r0, r7
	lsls r0, r0, #0xc
	movs r4, #0x80
	lsls r4, r4, #3
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #4
	bl PutSprite
	ldr r0, [r6, #0x30]
	rsbs r0, r0, #0
	adds r1, r0, #0
	adds r1, #0x7c
	ldr r2, [r6, #0x34]
	ldr r3, _08038BBC @ =0x0810F242
	ldrb r0, [r5]
	cmp r0, #3
	beq _08038BC0
	lsls r0, r0, #3
	ldrb r4, [r5]
	adds r0, r0, r4
	b _08038BC2
	.align 2, 0
_08038BA8: .4byte 0x085C9D08
_08038BAC: .4byte 0x085C9CF8
_08038BB0: .4byte 0x0810F220
_08038BB4: .4byte 0x0810F256
_08038BB8: .4byte 0x0810F228
_08038BBC: .4byte 0x0810F242
_08038BC0:
	movs r0, #0x40
_08038BC2:
	str r0, [sp]
	movs r0, #4
	bl PutSprite
	ldr r1, [r6, #0x30]
	rsbs r1, r1, #0
	adds r1, #0xd0
	ldr r2, [r6, #0x34]
	subs r2, #8
	ldr r3, _08038C00 @ =0x0810F25E
	ldrb r4, [r5]
	adds r0, r4, #0
	adds r0, #0xa
	movs r5, #0xf
	ands r0, r5
	lsls r0, r0, #0xc
	lsls r4, r4, #3
	movs r5, #0xc0
	lsls r5, r5, #1
	adds r4, r4, r5
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #5
	bl PutSprite
_08038BF4:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08038C00: .4byte 0x0810F25E

	thumb_func_start sub_8038C04
sub_8038C04: @ 0x08038C04
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, [r5, #0x30]
	ldr r2, [r5, #0x34]
	subs r2, #0x10
	ldr r3, _08038CB4 @ =0x085C9D08
	movs r0, #0x43
	adds r0, r0, r5
	mov r8, r0
	ldrb r4, [r0]
	lsls r0, r4, #2
	adds r0, r0, r3
	ldr r3, [r0]
	movs r4, #0
	str r4, [sp]
	movs r0, #4
	bl PutSprite
	ldr r1, [r5, #0x30]
	adds r1, #0x48
	ldr r2, [r5, #0x34]
	subs r2, #6
	ldr r3, _08038CB8 @ =0x085C9CF8
	adds r6, r5, #0
	adds r6, #0x42
	ldrb r7, [r6]
	lsls r0, r7, #2
	adds r0, r0, r3
	ldr r3, [r0]
	str r4, [sp]
	movs r0, #4
	bl PutSprite
	ldr r1, [r5, #0x30]
	adds r1, #0x60
	ldr r2, [r5, #0x34]
	adds r2, #8
	ldr r3, _08038CBC @ =0x0810F220
	str r4, [sp]
	movs r0, #4
	bl PutSprite
	ldr r1, [r5, #0x30]
	adds r1, #0x40
	ldr r2, [r5, #0x34]
	adds r2, #8
	ldr r3, _08038CC0 @ =0x0810F256
	mov r4, r8
	ldrb r4, [r4]
	lsls r0, r4, #2
	adds r0, #0x50
	str r0, [sp]
	movs r0, #4
	bl PutSprite
	ldr r1, [r5, #0x30]
	rsbs r1, r1, #0
	adds r1, #0x70
	ldr r2, [r5, #0x34]
	subs r2, #8
	ldr r3, _08038CC4 @ =0x0810F228
	movs r0, #0xf
	ldrb r7, [r6]
	ands r0, r7
	lsls r0, r0, #0xc
	movs r4, #0x80
	lsls r4, r4, #3
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #4
	bl PutSprite
	ldr r0, [r5, #0x30]
	rsbs r0, r0, #0
	adds r1, r0, #0
	adds r1, #0x7c
	ldr r2, [r5, #0x34]
	ldr r3, _08038CC8 @ =0x0810F242
	ldrb r0, [r6]
	cmp r0, #3
	beq _08038CCC
	lsls r0, r0, #3
	ldrb r6, [r6]
	adds r0, r0, r6
	b _08038CCE
	.align 2, 0
_08038CB4: .4byte 0x085C9D08
_08038CB8: .4byte 0x085C9CF8
_08038CBC: .4byte 0x0810F220
_08038CC0: .4byte 0x0810F256
_08038CC4: .4byte 0x0810F228
_08038CC8: .4byte 0x0810F242
_08038CCC:
	movs r0, #0x40
_08038CCE:
	str r0, [sp]
	movs r0, #4
	bl PutSprite
	ldr r1, [r5, #0x30]
	rsbs r1, r1, #0
	adds r1, #0xd0
	ldr r2, [r5, #0x34]
	subs r2, #8
	ldr r3, _08038D10 @ =0x0810F25E
	adds r0, r5, #0
	adds r0, #0x42
	ldrb r4, [r0]
	adds r0, r4, #0
	adds r0, #0xa
	movs r5, #0xf
	ands r0, r5
	lsls r0, r0, #0xc
	lsls r4, r4, #3
	movs r5, #0xc0
	lsls r5, r5, #1
	adds r4, r4, r5
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #5
	bl PutSprite
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08038D10: .4byte 0x0810F25E

	thumb_func_start sub_8038D14
sub_8038D14: @ 0x08038D14
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	mov r8, r0
	mov sb, r1
	adds r4, r2, #0
	adds r6, r3, #0
	ldr r5, [sp, #0x18]
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	lsls r6, r6, #0x18
	lsrs r6, r6, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r0, _08038D60 @ =0x085C9D18
	mov r1, r8
	bl SpawnProc
	adds r1, r0, #0
	mov r0, r8
	str r0, [r1, #0x2c]
	mov r0, sb
	str r0, [r1, #0x38]
	adds r0, r1, #0
	adds r0, #0x40
	strh r4, [r0]
	adds r0, #3
	strb r5, [r0]
	subs r0, #1
	strb r6, [r0]
	adds r0, r1, #0
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_08038D60: .4byte 0x085C9D18

	thumb_func_start sub_8038D64
sub_8038D64: @ 0x08038D64
	push {r4, r5, r6, r7, lr}
	adds r2, r0, #0
	adds r0, #0x40
	ldrb r5, [r0]
	ldr r6, _08038DA4 @ =gBg2Tm
	adds r3, r2, #0
	adds r3, #0x42
	adds r4, r2, #0
	adds r4, #0x41
	ldrb r1, [r4]
	subs r1, #1
	lsls r0, r1, #3
	adds r0, r2, r0
	adds r0, #0x44
	ldrb r3, [r3]
	ldrb r0, [r0]
	cmp r3, r0
	bne _08038DB4
	ldr r2, _08038DA8 @ =0x0810F26C
	lsls r0, r1, #1
	lsls r1, r5, #3
	adds r0, r0, r1
	adds r0, r0, r2
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #6
	adds r0, r0, r6
	ldr r1, _08038DAC @ =0x08109CC0
	ldr r2, _08038DB0 @ =0x00002060
	bl TmApplyTsa_t
	b _08038DDE
	.align 2, 0
_08038DA4: .4byte gBg2Tm
_08038DA8: .4byte 0x0810F26C
_08038DAC: .4byte 0x08109CC0
_08038DB0: .4byte 0x00002060
_08038DB4:
	movs r2, #0
	ldr r7, _08038DE4 @ =0x0810F26C
	adds r3, r4, #0
	lsls r1, r5, #3
	ldr r5, _08038DE8 @ =0x00001034
	adds r4, r5, #0
_08038DC0:
	ldrb r0, [r3]
	subs r0, #1
	lsls r0, r0, #1
	adds r0, r0, r1
	adds r0, r0, r7
	movs r5, #0
	ldrsh r0, [r0, r5]
	lsls r0, r0, #5
	adds r0, r0, r2
	lsls r0, r0, #1
	adds r0, r0, r6
	strh r4, [r0]
	adds r2, #1
	cmp r2, #0x5f
	ble _08038DC0
_08038DDE:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08038DE4: .4byte 0x0810F26C
_08038DE8: .4byte 0x00001034

	thumb_func_start sub_8038DEC
sub_8038DEC: @ 0x08038DEC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	str r0, [sp]
	adds r0, #0x40
	ldrb r0, [r0]
	mov sb, r0
	ldr r0, _08038E40 @ =0x02001000
	bl SetTextFont
	movs r5, #0
	cmp r5, sb
	bge _08038E7A
	mov sl, r5
	movs r0, #0x98
	mov r8, r0
	movs r7, #0
	movs r6, #0
_08038E16:
	ldr r0, _08038E44 @ =0x0203C6B9
	adds r4, r6, r0
	adds r0, r4, #0
	bl GetStringTextLen
	adds r1, r0, #0
	movs r0, #0x48
	subs r0, r0, r1
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r1, r0, #1
	cmp r5, #2
	bgt _08038E4C
	adds r1, r7, r1
	ldr r0, _08038E48 @ =0x0203C708
	movs r2, #0
	adds r3, r4, #0
	bl Text_InsertDrawString
	b _08038E56
	.align 2, 0
_08038E40: .4byte 0x02001000
_08038E44: .4byte 0x0203C6B9
_08038E48: .4byte 0x0203C708
_08038E4C:
	ldr r0, _08038E8C @ =0x0203C710
	movs r2, #0
	adds r3, r4, #0
	bl Text_InsertDrawString
_08038E56:
	ldr r0, [sp]
	adds r0, #0x48
	add r0, sl
	ldr r3, [r0]
	ldr r0, _08038E8C @ =0x0203C710
	mov r1, r8
	movs r2, #2
	bl Text_InsertDrawNumberOrBlank
	movs r0, #8
	add sl, r0
	movs r0, #0x20
	add r8, r0
	adds r7, #0x48
	adds r6, #0xf
	adds r5, #1
	cmp r5, sb
	blt _08038E16
_08038E7A:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08038E8C: .4byte 0x0203C710

	thumb_func_start sub_8038E90
sub_8038E90: @ 0x08038E90
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08038EB0 @ =0x085C9D98
	adds r1, r4, #0
	bl SpawnProc
	adds r1, r0, #0
	adds r0, r4, #0
	adds r0, #0x42
	adds r4, #0x44
	ldrb r0, [r0]
	ldrb r4, [r4]
	cmp r0, r4
	bne _08038EB4
	movs r0, #1
	b _08038EB6
	.align 2, 0
_08038EB0: .4byte 0x085C9D98
_08038EB4:
	movs r0, #0
_08038EB6:
	str r0, [r1, #0x58]
	adds r0, r1, #0
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_8038EC0
sub_8038EC0: @ 0x08038EC0
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	bl sub_8036B40
	bl sub_803FA14
	ldr r0, _08039024 @ =0x08107820
	ldr r1, _08039028 @ =0x06014800
	bl Decompress
	ldr r0, _0803902C @ =0x081088E8
	ldr r1, _08039030 @ =0x06016000
	bl Decompress
	ldr r0, _08039034 @ =0x08108B14
	ldr r1, _08039038 @ =0x06016800
	bl Decompress
	ldr r0, _0803903C @ =0x08109A00
	movs r1, #0x98
	lsls r1, r1, #2
	movs r2, #0x80
	bl ApplyPaletteExt
	ldr r0, _08039040 @ =0x08109BA0
	movs r1, #0xb8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08039044 @ =0x08109290
	ldr r1, _08039048 @ =0x06000C00
	bl Decompress
	ldr r0, _0803904C @ =0x08109BE0
	movs r1, #0x40
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r4, _08039050 @ =0x0810BAE0
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, _08039054 @ =0x0810D134
	movs r1, #0xa0
	lsls r1, r1, #1
	movs r2, #0x80
	bl ApplyPaletteExt
	ldr r0, _08039058 @ =gBg3Tm
	ldr r1, _0803905C @ =0x0810D1B4
	movs r2, #0
	bl TmApplyTsa_t
	ldr r0, _08039060 @ =0x02001000
	ldr r1, _08039064 @ =0x06012000
	movs r2, #0xe
	bl InitSpriteTextFont
	ldr r0, _08039068 @ =Pal_SystemText
	movs r1, #0xf0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #0
	bl SetTextFontGlyphs
	bl ResetTextFont
	ldr r4, _0803906C @ =0x0203C708
	movs r5, #1
_08038F60:
	adds r0, r4, #0
	bl InitSpriteText
	adds r0, r4, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge _08038F60
	ldr r0, _08039070 @ =0x085C98F4
	ldr r0, [r0]
	ldrb r2, [r0, #7]
	adds r1, r6, #0
	adds r1, #0x40
	movs r3, #0
	strb r2, [r1]
	ldrb r1, [r0, #7]
	adds r2, r6, #0
	adds r2, #0x41
	strb r1, [r2]
	ldrb r0, [r0, #6]
	adds r1, r6, #0
	adds r1, #0x42
	strb r0, [r1]
	mov r0, sp
	movs r5, #0
	strh r3, [r0]
	adds r4, r6, #0
	adds r4, #0x44
	ldr r2, _08039074 @ =0x01000010
	adds r1, r4, #0
	bl CpuSet
	adds r0, r4, #0
	bl sub_803C094
	adds r0, r6, #0
	bl sub_8038DEC
	movs r0, #0xb0
	str r0, [r6, #0x64]
	movs r0, #2
	movs r1, #0
	movs r2, #0xb0
	bl SetBgOffset
	ldr r3, _08039078 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r3, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #8
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r5, [r0]
	ldr r0, _0803907C @ =0x0000FFE0
	ldrh r2, [r3, #0x3c]
	ands r0, r2
	movs r1, #4
	orrs r0, r1
	ldr r1, _08039080 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	adds r0, r6, #0
	bl sub_8038E90
	movs r0, #8
	bl EnableBgSync
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08039024: .4byte 0x08107820
_08039028: .4byte 0x06014800
_0803902C: .4byte 0x081088E8
_08039030: .4byte 0x06016000
_08039034: .4byte 0x08108B14
_08039038: .4byte 0x06016800
_0803903C: .4byte 0x08109A00
_08039040: .4byte 0x08109BA0
_08039044: .4byte 0x08109290
_08039048: .4byte 0x06000C00
_0803904C: .4byte 0x08109BE0
_08039050: .4byte 0x0810BAE0
_08039054: .4byte 0x0810D134
_08039058: .4byte gBg3Tm
_0803905C: .4byte 0x0810D1B4
_08039060: .4byte 0x02001000
_08039064: .4byte 0x06012000
_08039068: .4byte Pal_SystemText
_0803906C: .4byte 0x0203C708
_08039070: .4byte 0x085C98F4
_08039074: .4byte 0x01000010
_08039078: .4byte gDispIo
_0803907C: .4byte 0x0000FFE0
_08039080: .4byte 0x0000E0FF

	thumb_func_start sub_8039084
sub_8039084: @ 0x08039084
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r0, #0x40
	ldrb r6, [r0]
	ldr r2, [r4, #0x64]
	subs r2, #1
	str r2, [r4, #0x64]
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	bl sub_8040F70
	adds r5, r4, #0
	adds r5, #0x41
	ldrb r0, [r5]
	cmp r0, #0
	beq _0803910E
	ldr r2, [r4, #0x64]
	asrs r2, r2, #3
	ldr r3, _08039124 @ =0x0810F26C
	ldrb r0, [r5]
	subs r0, #1
	lsls r0, r0, #1
	lsls r1, r6, #3
	adds r0, r0, r1
	adds r0, r0, r3
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r0, #4
	cmp r2, r0
	bne _0803910E
	adds r0, r4, #0
	bl sub_8038D64
	movs r0, #4
	bl EnableBgSync
	ldr r2, _08039128 @ =0x0203C984
	ldrb r1, [r5]
	subs r1, #1
	lsls r0, r1, #3
	adds r0, r4, r0
	adds r0, #0x44
	ldrb r3, [r0]
	lsls r0, r3, #1
	adds r2, #0x24
	adds r0, r0, r2
	ldrh r2, [r0]
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	str r1, [sp]
	adds r0, r4, #0
	movs r1, #0x28
	bl sub_8038D14
	ldrb r2, [r5]
	subs r2, #1
	lsls r2, r2, #2
	adds r1, r4, #0
	adds r1, #0x2c
	adds r1, r1, r2
	str r0, [r1]
	ldrb r0, [r5]
	subs r0, #1
	strb r0, [r5]
_0803910E:
	ldr r0, [r4, #0x64]
	cmp r0, #0
	bne _0803911A
	adds r0, r4, #0
	bl Proc_Break
_0803911A:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08039124: .4byte 0x0810F26C
_08039128: .4byte 0x0203C984

	thumb_func_start sub_803912C
sub_803912C: @ 0x0803912C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_8040F70
	ldr r0, _08039168 @ =gKeySt
	ldr r1, [r0]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08039162
	ldr r2, _0803916C @ =gMPlayTable
	ldr r1, _08039170 @ =gSongTable
	ldr r0, _08039174 @ =0x0000040C
	adds r1, r1, r0
	ldrh r3, [r1]
	lsls r0, r3, #1
	adds r0, r0, r3
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r0, [r0]
	movs r1, #1
	bl m4aMPlayFadeOut
	adds r0, r4, #0
	bl Proc_Break
_08039162:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08039168: .4byte gKeySt
_0803916C: .4byte gMPlayTable
_08039170: .4byte gSongTable
_08039174: .4byte 0x0000040C

	thumb_func_start sub_8039178
sub_8039178: @ 0x08039178
	push {lr}
	ldr r0, [r0, #0x58]
	cmp r0, #0
	beq _0803918C
	movs r0, #0x46
	movs r1, #0
	movs r2, #0
	bl StartBgmExt
	b _08039196
_0803918C:
	movs r0, #0x4a
	movs r1, #0
	movs r2, #0
	bl StartBgmExt
_08039196:
	ldr r0, _080391AC @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080391A6
	movs r0, #0x81
	bl m4aSongNumStart
_080391A6:
	pop {r0}
	bx r0
	.align 2, 0
_080391AC: .4byte gPlaySt

	thumb_func_start sub_80391B0
sub_80391B0: @ 0x080391B0
	push {lr}
	movs r0, #0x4a
	movs r1, #0
	movs r2, #0
	bl StartBgmExt
	pop {r0}
	bx r0

	thumb_func_start sub_80391C0
sub_80391C0: @ 0x080391C0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov sb, r1
	mov sl, r2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp]
	adds r4, r3, #0
	movs r2, #0
	ldr r1, _080391F4 @ =0x0203C838
_080391DC:
	ldr r0, [r1]
	lsrs r0, r0, #5
	cmp r0, r4
	bhs _080391F8
	adds r7, r2, #0
	movs r2, #9
	lsls r3, r3, #5
	str r3, [sp, #4]
	cmp r2, r7
	ble _08039274
	b _08039206
	.align 2, 0
_080391F4: .4byte 0x0203C838
_080391F8:
	adds r1, #0x14
	adds r2, #1
	cmp r2, #9
	ble _080391DC
	movs r0, #1
	rsbs r0, r0, #0
	b _080392D8
_08039206:
	ldr r6, _080392E8 @ =0x0203C838
	lsls r1, r2, #2
	adds r1, r1, r2
	lsls r1, r1, #2
	adds r5, r1, r6
	subs r2, #1
	mov r8, r2
	lsls r4, r2, #2
	add r4, r8
	lsls r4, r4, #2
	adds r4, r4, r6
	ldrb r0, [r4]
	lsls r2, r0, #0x1e
	lsrs r2, r2, #0x1e
	movs r0, #4
	rsbs r0, r0, #0
	ldrb r3, [r5]
	ands r0, r3
	orrs r0, r2
	strb r0, [r5]
	ldr r3, [r4]
	lsrs r3, r3, #5
	lsls r3, r3, #5
	ldr r0, [r5]
	movs r2, #0x1f
	ands r0, r2
	orrs r0, r3
	str r0, [r5]
	movs r2, #0xc
	ldrb r0, [r4]
	ands r2, r0
	movs r0, #0xd
	rsbs r0, r0, #0
	ldrb r3, [r5]
	ands r0, r3
	orrs r0, r2
	strb r0, [r5]
	movs r3, #0x10
	ldrb r4, [r4]
	ands r3, r4
	movs r2, #0x11
	rsbs r2, r2, #0
	ands r0, r2
	orrs r0, r3
	strb r0, [r5]
	adds r0, r6, #0
	subs r0, #0x10
	adds r0, r1, r0
	adds r6, #4
	adds r1, r1, r6
	bl sub_80368DC
	mov r2, r8
	cmp r2, r7
	bgt _08039206
_08039274:
	ldr r5, _080392E8 @ =0x0203C838
	lsls r1, r7, #2
	adds r1, r1, r7
	lsls r1, r1, #2
	adds r4, r1, r5
	movs r3, #3
	ldr r2, [sp]
	ands r2, r3
	movs r0, #4
	rsbs r0, r0, #0
	ldrb r6, [r4]
	ands r0, r6
	orrs r0, r2
	strb r0, [r4]
	ldr r0, [r4]
	movs r2, #0x1f
	ands r0, r2
	ldr r2, [sp, #4]
	orrs r0, r2
	str r0, [r4]
	mov r6, sb
	ands r6, r3
	lsls r2, r6, #2
	movs r0, #0xd
	rsbs r0, r0, #0
	ldrb r3, [r4]
	ands r0, r3
	orrs r0, r2
	movs r2, #1
	mov r6, sl
	ands r6, r2
	lsls r3, r6, #4
	movs r2, #0x11
	rsbs r2, r2, #0
	ands r0, r2
	orrs r0, r3
	strb r0, [r4]
	ldr r0, _080392EC @ =0x085C98F4
	ldr r0, [r0]
	movs r2, #6
	ldrsb r2, [r0, r2]
	lsls r0, r2, #4
	subs r0, r0, r2
	ldr r2, _080392F0 @ =0x0203C6B9
	adds r0, r0, r2
	adds r5, #4
	adds r1, r1, r5
	bl sub_80368DC
	adds r0, r7, #0
_080392D8:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080392E8: .4byte 0x0203C838
_080392EC: .4byte 0x085C98F4
_080392F0: .4byte 0x0203C6B9

	thumb_func_start sub_80392F4
sub_80392F4: @ 0x080392F4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	ldr r0, _08039364 @ =0x0203C618
	adds r1, r0, #0
	adds r1, #0xec
	ldrb r1, [r1]
	lsls r5, r1, #0x1e
	lsrs r5, r5, #0x1f
	adds r0, #0xa0
	ldrb r0, [r0]
	subs r0, #1
	mov sb, r0
	bl sub_803D208
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r1, _08039368 @ =0x0203C984
	ldr r0, _0803936C @ =0x085C98F4
	ldr r0, [r0]
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #2
	adds r1, #0x14
	adds r0, r0, r1
	ldr r0, [r0]
	mov r8, r0
	ldr r6, _08039370 @ =0x0203C838
	adds r0, r6, #0
	bl sub_80864CC
	adds r0, r4, #0
	mov r1, sb
	adds r2, r5, #0
	mov r3, r8
	bl sub_80391C0
	str r0, [r7, #0x58]
	adds r0, r6, #0
	bl sub_8086490
	ldr r1, [r7, #0x58]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _08039374
	adds r0, r1, #0
	adds r1, r7, #0
	bl sub_803AE58
	b _0803937A
	.align 2, 0
_08039364: .4byte 0x0203C618
_08039368: .4byte 0x0203C984
_0803936C: .4byte 0x085C98F4
_08039370: .4byte 0x0203C838
_08039374:
	movs r0, #1
	bl FadeBgmOut
_0803937A:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8039388
sub_8039388: @ 0x08039388
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	ldr r1, _0803940C @ =0x0810F294
	mov r0, sp
	movs r2, #3
	bl memcpy
	bl InitUnits
	movs r6, #0
	ldr r1, _08039410 @ =0x0203C618
	ldrb r0, [r1, #5]
	adds r0, #2
	cmp r6, r0
	bge _08039460
	mov sb, r1
_080393B0:
	lsls r4, r6, #6
	adds r4, #1
	adds r0, r4, #0
	bl GetUnit
	adds r5, r0, #0
	mov r0, sb
	adds r0, #6
	adds r0, r6, r0
	ldrb r0, [r0]
	lsls r2, r6, #4
	subs r2, r2, r6
	ldr r1, _08039414 @ =0x0203C6B9
	adds r2, r2, r1
	adds r1, r5, #0
	bl sub_808642C
	movs r7, #0
	adds r2, r6, #1
	mov sl, r2
	lsls r0, r6, #1
	ldr r1, _08039418 @ =0x0203C9A8
	adds r0, r0, r1
	mov r8, r0
_080393E0:
	adds r0, r4, #0
	bl GetUnit
	adds r5, r0, #0
	movs r2, #0
	strb r2, [r5, #9]
	movs r1, #0
	bl SetUnitStatus
	movs r0, #0
	strb r0, [r5, #0x19]
	movs r0, #4
	ldr r1, _0803941C @ =0x0203C704
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _08039420
	adds r0, r5, #0
	bl sub_8036CB0
	b _08039426
	.align 2, 0
_0803940C: .4byte 0x0810F294
_08039410: .4byte 0x0203C618
_08039414: .4byte 0x0203C6B9
_08039418: .4byte 0x0203C9A8
_0803941C: .4byte 0x0203C704
_08039420:
	adds r0, r5, #0
	bl sub_8040CA8
_08039426:
	cmp r7, #0
	bne _08039434
	adds r0, r5, #0
	bl GetUnitChibiId
	mov r2, r8
	strh r0, [r2]
_08039434:
	strb r4, [r5, #0xb]
	cmp r6, #0
	beq _0803944C
	movs r0, #1
	ldr r1, _08039498 @ =0x0203C704
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _0803944C
	movs r0, #0x80
	lsls r0, r0, #2
	strh r0, [r5, #0xc]
_0803944C:
	adds r4, #1
	adds r7, #1
	cmp r7, #4
	ble _080393E0
	mov r6, sl
	mov r2, sb
	ldrb r0, [r2, #5]
	adds r0, #2
	cmp r6, r0
	blt _080393B0
_08039460:
	ldr r0, _0803949C @ =0x0203C984
	movs r1, #0
	strb r1, [r0]
	ldr r2, _080394A0 @ =0x085C98F4
	ldr r0, [r2]
	strb r1, [r0, #6]
	ldr r3, [r2]
	ldr r1, _080394A4 @ =0x0203C618
	ldrb r0, [r1, #5]
	add r0, sp
	ldrb r0, [r0]
	strb r0, [r3, #9]
	ldr r2, [r2]
	ldrb r0, [r1, #5]
	adds r0, #2
	strb r0, [r2, #7]
	ldrb r0, [r1, #5]
	adds r0, #2
	adds r1, #0xa0
	strb r0, [r1]
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08039498: .4byte 0x0203C704
_0803949C: .4byte 0x0203C984
_080394A0: .4byte 0x085C98F4
_080394A4: .4byte 0x0203C618

	thumb_func_start sub_80394A8
sub_80394A8: @ 0x080394A8
	push {lr}
	ldr r0, _080394B8 @ =0x085CAD04
	movs r1, #2
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_080394B8: .4byte 0x085CAD04

	thumb_func_start sub_80394BC
sub_80394BC: @ 0x080394BC
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _080394F4 @ =0x085CAD04
	bl Proc_Find
	cmp r0, #0
	bne _080394EE
	ldr r5, _080394F8 @ =0x0203C618
	ldrb r0, [r5, #0xb]
	cmp r0, #1
	bne _080394DA
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
_080394DA:
	ldrb r5, [r5, #0xb]
	cmp r5, #2
	bne _080394E8
	adds r0, r4, #0
	movs r1, #4
	bl Proc_Goto
_080394E8:
	adds r0, r4, #0
	bl Proc_Break
_080394EE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080394F4: .4byte 0x085CAD04
_080394F8: .4byte 0x0203C618

	thumb_func_start sub_80394FC
sub_80394FC: @ 0x080394FC
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	mov r8, r0
	adds r4, r1, #0
	adds r5, r2, #0
	adds r6, r3, #0
	bl SetInitTalkTextFont
	bl ClearTalkText
	bl ResetTextFont
	adds r0, r4, #0
	adds r1, r5, #0
	mov r2, r8
	adds r3, r6, #0
	bl StartTalkExt
	movs r0, #1
	bl SetTalkPrintColor
	movs r0, #1
	bl SetTalkFlag
	movs r0, #2
	bl SetTalkFlag
	movs r0, #4
	bl SetTalkFlag
	movs r0, #2
	bl SetTalkPrintDelay
	movs r0, #1
	bl SetActiveTalkFace
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_8039550
sub_8039550: @ 0x08039550
	push {lr}
	ldr r0, _08039568 @ =0x085C9968
	bl Proc_EndEach
	ldr r0, _0803956C @ =0x085C9990
	bl Proc_EndEach
	ldr r0, _08039570 @ =0x085C9940
	bl Proc_EndEach
	pop {r0}
	bx r0
	.align 2, 0
_08039568: .4byte 0x085C9968
_0803956C: .4byte 0x085C9990
_08039570: .4byte 0x085C9940

	thumb_func_start sub_8039574
sub_8039574: @ 0x08039574
	push {lr}
	bl sub_8035490
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8039580
sub_8039580: @ 0x08039580
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	movs r6, #0
	ldr r0, _080395F8 @ =0x0203C618
	mov sb, r0
	movs r1, #0x98
	lsls r1, r1, #2
	mov r8, r1
	movs r0, #0xa1
	add r0, sb
	mov sl, r0
	movs r7, #5
_080395A0:
	mov r0, sb
	adds r0, #0x9c
	adds r5, r6, r0
	ldr r0, _080395FC @ =0x085C98F4
	ldr r0, [r0]
	adds r0, #0xb
	adds r0, r0, r6
	ldrb r0, [r0]
	ldrb r1, [r5]
	cmp r1, r0
	beq _0803962C
	strb r0, [r5]
	lsls r1, r6, #3
	mov r0, sb
	adds r0, #0xc
	adds r4, r1, r0
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	ldrb r0, [r5]
	cmp r0, #4
	bhi _08039608
	ldr r1, _08039600 @ =0x085C99B0
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r3, [r0]
	movs r0, #0xa
	str r0, [sp]
	adds r0, r4, #0
	movs r1, #0xa
	adds r2, r7, #0
	bl PutDrawTextCentered
	ldr r0, _08039604 @ =0x08109C60
	mov r1, r8
	movs r2, #0x20
	bl ApplyPaletteExt
	b _08039626
	.align 2, 0
_080395F8: .4byte 0x0203C618
_080395FC: .4byte 0x085C98F4
_08039600: .4byte 0x085C99B0
_08039604: .4byte 0x08109C60
_08039608:
	movs r0, #0xa
	str r0, [sp]
	adds r0, r4, #0
	movs r1, #0xa
	adds r2, r7, #0
	mov r3, sl
	bl PutDrawTextCentered
	lsls r0, r6, #5
	ldr r1, _0803964C @ =0x08109A00
	adds r0, r0, r1
	mov r1, r8
	movs r2, #0x20
	bl ApplyPaletteExt
_08039626:
	movs r0, #1
	bl EnableBgSync
_0803962C:
	movs r1, #0x20
	add r8, r1
	movs r0, #0xf
	add sl, r0
	adds r7, #3
	adds r6, #1
	cmp r6, #3
	ble _080395A0
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803964C: .4byte 0x08109A00

	thumb_func_start sub_8039650
sub_8039650: @ 0x08039650
	push {r4, r5, r6, lr}
	sub sp, #0x18
	adds r6, r0, #0
	bl sub_8036B40
	bl sub_803FA14
	ldr r0, _0803976C @ =0x08107820
	ldr r1, _08039770 @ =0x06014800
	bl Decompress
	ldr r0, _08039774 @ =0x081088E8
	ldr r1, _08039778 @ =0x06016000
	bl Decompress
	ldr r0, _0803977C @ =0x081080D4
	ldr r1, _08039780 @ =0x06016800
	bl Decompress
	movs r4, #0x98
	lsls r4, r4, #2
	movs r5, #3
_0803967C:
	ldr r0, _08039784 @ =0x08109C60
	adds r1, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	adds r4, #0x20
	subs r5, #1
	cmp r5, #0
	bge _0803967C
	movs r0, #0
	movs r1, #2
	bl sub_803FAA4
	ldr r4, _08039788 @ =0x0203C618
	ldrb r0, [r4, #3]
	add r1, sp, #8
	bl sub_8086220
	ldr r0, _0803978C @ =0x0203C758
	bl SetTextFont
	bl InitSystemTextFont
	bl ResetTextFont
	bl sub_8036C60
	movs r5, #0
	adds r4, #0x9c
	movs r2, #0xff
_080396B8:
	adds r1, r5, r4
	ldrb r0, [r1]
	orrs r0, r2
	strb r0, [r1]
	adds r5, #1
	cmp r5, #3
	ble _080396B8
	bl sub_8039580
	movs r5, #0
	ldr r2, _08039790 @ =0x030044E6
_080396CE:
	adds r0, r5, r2
	mov r1, sp
	adds r1, r1, r5
	adds r1, #8
	ldrb r1, [r1]
	strb r1, [r0]
	adds r5, #1
	cmp r5, #0xe
	ble _080396CE
	movs r0, #0
	str r0, [r6, #0x34]
	str r0, [r6, #0x30]
	movs r0, #0xc0
	movs r1, #0x10
	adds r2, r6, #0
	bl sub_803F9C4
	movs r0, #0x48
	movs r1, #0x20
	adds r2, r6, #0
	bl sub_8040F00
	str r0, [r6, #0x2c]
	ldr r0, _08039794 @ =0x085C9E88
	bl SetFaceConfig
	movs r0, #2
	str r0, [sp]
	movs r0, #3
	movs r1, #0xc0
	movs r2, #0xd0
	movs r3, #0x50
	bl StartFace
	ldr r0, [r6, #0x2c]
	ldr r1, _08039798 @ =0x0810F19C
	ldr r4, _08039788 @ =0x0203C618
	ldrb r2, [r4]
	adds r1, r2, r1
	ldrb r1, [r1]
	bl sub_803FC3C
	ldr r0, _0803979C @ =0x085C9AD4
	ldrb r3, [r4]
	lsls r1, r3, #2
	adds r0, r1, r0
	ldr r0, [r0]
	ldr r2, _080397A0 @ =0x0810F190
	adds r1, r1, r2
	ldr r1, [r1]
	str r3, [sp]
	ldr r2, [r6, #0x2c]
	str r2, [sp, #4]
	movs r2, #0
	movs r3, #8
	bl sub_803FD40
	ldr r0, [r6, #0x30]
	ldr r1, _080397A4 @ =0x000006D7
	adds r0, r0, r1
	movs r1, #1
	bl sub_8036BFC
	ldr r2, _080397A8 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	add sp, #0x18
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803976C: .4byte 0x08107820
_08039770: .4byte 0x06014800
_08039774: .4byte 0x081088E8
_08039778: .4byte 0x06016000
_0803977C: .4byte 0x081080D4
_08039780: .4byte 0x06016800
_08039784: .4byte 0x08109C60
_08039788: .4byte 0x0203C618
_0803978C: .4byte 0x0203C758
_08039790: .4byte 0x030044E6
_08039794: .4byte 0x085C9E88
_08039798: .4byte 0x0810F19C
_0803979C: .4byte 0x085C9AD4
_080397A0: .4byte 0x0810F190
_080397A4: .4byte 0x000006D7
_080397A8: .4byte gDispIo

	thumb_func_start sub_80397AC
sub_80397AC: @ 0x080397AC
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r1, _080397E4 @ =0x00002586
	mov r0, sp
	strh r1, [r0]
	ldr r0, _080397E8 @ =0x085C9968
	movs r1, #0
	bl SpawnProc
	ldr r0, _080397EC @ =0x085C9990
	adds r1, r4, #0
	bl SpawnProc
	ldr r0, _080397F0 @ =0x085C9940
	adds r1, r4, #0
	bl SpawnProc
	movs r1, #1
	rsbs r1, r1, #0
	mov r0, sp
	bl sub_8036078
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080397E4: .4byte 0x00002586
_080397E8: .4byte 0x085C9968
_080397EC: .4byte 0x085C9990
_080397F0: .4byte 0x085C9940

	thumb_func_start sub_80397F4
sub_80397F4: @ 0x080397F4
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r4, r0, #0
	movs r6, #0
	movs r1, #0
	ldr r5, [r4, #0x2c]
	ldr r0, _08039834 @ =0x0203C91C
	str r1, [r0]
	mov r0, sp
	strb r1, [r0]
	bl sub_8039580
	ldr r0, _08039838 @ =0x085C9940
	bl Proc_Find
	cmp r0, #0
	beq _08039840
	ldr r0, _0803983C @ =gKeySt
	ldr r1, [r0]
	movs r0, #2
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	bne _08039826
	b _08039A0A
_08039826:
	movs r0, #1
	bl sub_8036D08
	bl sub_803F9F4
	b _08039874
	.align 2, 0
_08039834: .4byte 0x0203C91C
_08039838: .4byte 0x085C9940
_0803983C: .4byte gKeySt
_08039840:
	bl sub_803F9F4
	ldr r2, _08039888 @ =0x085C98F4
	ldr r1, [r2]
	movs r0, #6
	ldrsb r0, [r1, r0]
	str r0, [r5, #0x34]
	movs r3, #0
	adds r1, #0x1a
	adds r5, r2, #0
_08039854:
	adds r0, r1, r3
	ldrb r0, [r0]
	cmp r0, #0x3c
	bls _0803985E
	adds r6, #1
_0803985E:
	adds r3, #1
	cmp r3, #3
	ble _08039854
	ldr r0, [r5]
	movs r1, #6
	ldrsb r1, [r0, r1]
	adds r0, #0xb
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #2
	bne _0803988C
_08039874:
	bl sub_8039550
	bl sub_8039574
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
	b _08039A0A
	.align 2, 0
_08039888: .4byte 0x085C98F4
_0803988C:
	bl sub_8035CF8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080398A2
	ldr r0, [r5]
	ldrb r1, [r0, #0x1e]
	cmp r1, #0x3c
	bhi _080398A2
	cmp r6, #0
	beq _080398CC
_080398A2:
	bl sub_8039550
	bl sub_8039574
	adds r0, r4, #0
	bl sub_80397AC
	movs r0, #0
	str r0, [r4, #0x30]
	ldr r0, _080398C8 @ =0x000006D7
	movs r1, #1
	bl sub_8036BFC
	movs r0, #0xc0
	movs r1, #0x10
	adds r2, r4, #0
	bl sub_803F9C4
	b _08039A0A
	.align 2, 0
_080398C8: .4byte 0x000006D7
_080398CC:
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _08039960
	bl sub_8035D7C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08039960
	ldr r0, [r4, #0x30]
	cmp r0, #2
	beq _080398F4
	movs r0, #2
	str r0, [r4, #0x30]
	ldr r0, _08039950 @ =0x000006D9
	movs r1, #1
	bl sub_8036BFC
_080398F4:
	ldr r0, _08039954 @ =gKeySt
	ldr r1, [r0]
	movs r0, #8
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08039974
	ldr r0, [r5]
	movs r2, #0
	movs r1, #6
	strh r1, [r0, #4]
	strb r2, [r0, #0x1e]
	movs r3, #0
	adds r2, r5, #0
	movs r1, #0
_08039912:
	ldr r0, [r2]
	adds r0, #0x1a
	adds r0, r0, r3
	strb r1, [r0]
	adds r3, #1
	cmp r3, #3
	ble _08039912
	movs r0, #2
	bl sub_8036D08
	bl sub_8035C58
	ldr r2, _08039958 @ =0x085C98F4
	ldr r1, [r2]
	strb r0, [r1, #7]
	ldr r0, _0803995C @ =0x0203C618
	ldr r1, [r2]
	ldrb r1, [r1, #7]
	adds r0, #0xa0
	strb r1, [r0]
	bl sub_8036608
	mov r1, sp
	movs r0, #0x18
	strb r0, [r1]
	mov r0, sp
	movs r1, #4
	bl sub_8036208
	str r0, [r4, #0x34]
	b _080399D2
	.align 2, 0
_08039950: .4byte 0x000006D9
_08039954: .4byte gKeySt
_08039958: .4byte 0x085C98F4
_0803995C: .4byte 0x0203C618
_08039960:
	ldr r0, [r4, #0x30]
	cmp r0, #1
	beq _08039974
	movs r0, #1
	str r0, [r4, #0x30]
	movs r0, #0xdb
	lsls r0, r0, #3
	movs r1, #1
	bl sub_8036BFC
_08039974:
	ldr r5, _080399DC @ =0x085C98F4
	ldr r1, [r5]
	movs r0, #6
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq _080399E4
	ldrb r0, [r1, #6]
	bl sub_8035CB0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080399E4
	add r1, sp, #4
	mov r0, sp
	movs r2, #0
	bl sub_80362B0
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _080399E4
	ldr r0, [r5]
	movs r2, #0
	movs r1, #6
	strh r1, [r0, #4]
	strb r2, [r0, #0x1e]
	movs r3, #0
	adds r2, r5, #0
	movs r1, #0
_080399AC:
	ldr r0, [r2]
	adds r0, #0x1a
	adds r0, r0, r3
	strb r1, [r0]
	adds r3, #1
	cmp r3, #3
	ble _080399AC
	bl sub_8035C58
	ldr r2, _080399DC @ =0x085C98F4
	ldr r1, [r2]
	strb r0, [r1, #7]
	ldr r0, _080399E0 @ =0x0203C618
	ldr r1, [r2]
	ldrb r1, [r1, #7]
	adds r0, #0xa0
	strb r1, [r0]
	bl sub_8036608
_080399D2:
	adds r0, r4, #0
	bl Proc_Break
	b _08039A0A
	.align 2, 0
_080399DC: .4byte 0x085C98F4
_080399E0: .4byte 0x0203C618
_080399E4:
	bl GetGameTime
	movs r1, #0x26
	bl __umodsi3
	cmp r0, #0
	bne _08039A0A
	ldr r0, _08039A14 @ =0x030044E0
	movs r1, #0x1c
	strb r1, [r0]
	ldr r1, _08039A18 @ =0x085C98F4
	ldr r2, [r1]
	ldrb r1, [r2, #6]
	strb r1, [r0, #1]
	ldrb r1, [r2]
	strh r1, [r0, #2]
	movs r1, #0x16
	bl sub_8035DC8
_08039A0A:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08039A14: .4byte 0x030044E0
_08039A18: .4byte 0x085C98F4

	thumb_func_start sub_8039A1C
sub_8039A1C: @ 0x08039A1C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_8039580
	ldr r1, _08039A74 @ =0x0203C91C
	ldr r0, [r1]
	adds r3, r0, #1
	str r3, [r1]
	ldr r0, _08039A78 @ =0x0203C618
	adds r0, #0xa0
	ldr r1, _08039A7C @ =0x085C98F4
	ldr r2, [r1]
	ldrb r0, [r0]
	ldrb r1, [r2, #7]
	cmp r0, r1
	bne _08039A44
	movs r0, #0x96
	lsls r0, r0, #2
	cmp r3, r0
	ble _08039A84
_08039A44:
	bl sub_8039550
	bl sub_8039574
	adds r0, r4, #0
	bl sub_80397AC
	movs r0, #0
	str r0, [r4, #0x30]
	ldr r0, _08039A80 @ =0x000006D7
	movs r1, #1
	bl sub_8036BFC
	movs r0, #0xc0
	movs r1, #0x10
	adds r2, r4, #0
	bl sub_803F9C4
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
	b _08039AA8
	.align 2, 0
_08039A74: .4byte 0x0203C91C
_08039A78: .4byte 0x0203C618
_08039A7C: .4byte 0x085C98F4
_08039A80: .4byte 0x000006D7
_08039A84:
	movs r0, #6
	ldrsb r0, [r2, r0]
	cmp r0, #0
	bne _08039AB0
	ldr r1, [r4, #0x34]
	movs r0, #0x8c
	muls r0, r1, r0
	adds r0, r2, r0
	movs r1, #0x9a
	lsls r1, r1, #1
	adds r0, r0, r1
	ldrb r1, [r2, #9]
	ldrb r0, [r0]
	ands r1, r0
	adds r0, r1, #0
	ldrb r2, [r2, #9]
	cmp r0, r2
	bne _08039AB6
_08039AA8:
	adds r0, r4, #0
	bl Proc_Break
	b _08039AB6
_08039AB0:
	adds r0, r4, #0
	bl Proc_Break
_08039AB6:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8039ABC
sub_8039ABC: @ 0x08039ABC
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	adds r7, r0, #0
	movs r0, #0xdb
	lsls r0, r0, #3
	movs r1, #1
	bl sub_8036BFC
	ldr r0, _08039B54 @ =0x085C98F4
	ldr r0, [r0]
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _08039B3E
	bl GetGameTime
	ldr r4, _08039B58 @ =0x0203C618
	adds r5, r4, #0
	adds r5, #0xa0
	ldrb r1, [r5]
	bl __umodsi3
	adds r6, r7, #0
	adds r6, #0x3b
	strb r0, [r6]
	bl RandNextB
	movs r1, #3
	ands r1, r0
	adds r1, #4
	ldrb r5, [r5]
	adds r3, r5, #0
	muls r3, r1, r3
	ldrb r0, [r6]
	adds r3, r0, r3
	adds r0, r7, #0
	adds r0, #0x39
	strb r3, [r0]
	mov r2, sp
	adds r4, #0xec
	ldrb r1, [r4]
	lsls r0, r1, #0x1f
	lsrs r0, r0, #0x1f
	strb r0, [r2]
	lsls r0, r1, #0x1d
	lsrs r0, r0, #0x1f
	strb r0, [r2, #1]
	mov r0, sp
	lsls r1, r1, #0x1e
	lsrs r1, r1, #0x1f
	strb r1, [r0, #2]
	mov r1, sp
	ldrb r0, [r6]
	strb r0, [r1, #3]
	mov r0, sp
	strb r3, [r0, #4]
	adds r0, #6
	bl RandGetSt
	mov r0, sp
	movs r1, #0x10
	bl sub_8036208
	str r0, [r7, #0x34]
_08039B3E:
	adds r0, r7, #0
	adds r0, #0x3a
	movs r1, #0
	strb r1, [r0]
	subs r0, #2
	strb r1, [r0]
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08039B54: .4byte 0x085C98F4
_08039B58: .4byte 0x0203C618

	thumb_func_start sub_8039B5C
sub_8039B5C: @ 0x08039B5C
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	adds r5, r0, #0
	ldr r7, [r5, #0x2c]
	ldr r0, _08039B98 @ =0x085C98F4
	ldr r2, [r0]
	movs r4, #6
	ldrsb r4, [r2, r4]
	cmp r4, #0
	bne _08039BA0
	ldr r1, [r5, #0x34]
	movs r0, #0x8c
	muls r0, r1, r0
	adds r0, r2, r0
	movs r1, #0x9a
	lsls r1, r1, #1
	adds r0, r0, r1
	ldrb r0, [r0]
	ldrb r2, [r2, #9]
	cmp r0, r2
	bne _08039C20
	ldr r0, _08039B9C @ =0x000006DD
	movs r1, #1
	bl sub_8036BFC
	str r4, [r7, #0x38]
	adds r0, r5, #0
	bl Proc_Break
	b _08039C20
	.align 2, 0
_08039B98: .4byte 0x085C98F4
_08039B9C: .4byte 0x000006DD
_08039BA0:
	bl GetGameTime
	movs r1, #0x26
	bl __umodsi3
	adds r6, r0, #0
	cmp r6, #0
	bne _08039C20
	add r1, sp, #0x10
	mov r0, sp
	movs r2, #0
	bl sub_80362B0
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _08039C20
	ldr r4, _08039C28 @ =0x0203C618
	mov r0, sp
	adds r4, #0xec
	movs r3, #1
	ldrb r1, [r0]
	ands r1, r3
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r2, [r4]
	ands r0, r2
	orrs r0, r1
	mov r1, sp
	ldrb r1, [r1, #1]
	ands r1, r3
	lsls r1, r1, #2
	movs r2, #5
	rsbs r2, r2, #0
	ands r0, r2
	orrs r0, r1
	mov r1, sp
	ldrb r1, [r1, #2]
	ands r1, r3
	lsls r1, r1, #1
	adds r2, #2
	ands r0, r2
	orrs r0, r1
	strb r0, [r4]
	mov r0, sp
	ldrb r0, [r0, #3]
	adds r1, r5, #0
	adds r1, #0x3b
	strb r0, [r1]
	mov r0, sp
	ldrb r0, [r0, #4]
	subs r1, #2
	strb r0, [r1]
	mov r0, sp
	adds r0, #6
	bl RandSetSt
	ldr r0, _08039C2C @ =0x000006DD
	movs r1, #1
	bl sub_8036BFC
	str r6, [r7, #0x38]
	adds r0, r5, #0
	bl Proc_Break
_08039C20:
	add sp, #0x14
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08039C28: .4byte 0x0203C618
_08039C2C: .4byte 0x000006DD

	thumb_func_start sub_8039C30
sub_8039C30: @ 0x08039C30
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	ldr r7, [r6, #0x2c]
	adds r1, r6, #0
	adds r1, #0x38
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x10
	bls _08039CD0
	movs r0, #0
	strb r0, [r1]
	adds r4, r6, #0
	adds r4, #0x3a
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	ldr r1, _08039CA8 @ =0x0203C618
	adds r1, #0xa0
	ldrb r0, [r4]
	ldrb r1, [r1]
	bl __umodsi3
	strb r0, [r4]
	adds r5, r6, #0
	adds r5, #0x39
	ldrb r0, [r5]
	subs r0, #1
	strb r0, [r5]
	ldrb r0, [r4]
	str r0, [r7, #0x38]
	ldr r0, _08039CAC @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08039C82
	movs r0, #0x7d
	bl m4aSongNumStart
_08039C82:
	ldrb r0, [r5]
	cmp r0, #0
	bne _08039CD0
	adds r0, r6, #0
	adds r0, #0x3b
	ldr r1, _08039CB0 @ =0x085C98F4
	ldr r1, [r1]
	ldrb r2, [r0]
	adds r4, r0, #0
	ldrb r0, [r4]
	ldrb r1, [r1, #6]
	cmp r0, r1
	beq _08039CB8
	ldr r1, _08039CB4 @ =0x000006DF
	adds r0, r2, r1
	movs r1, #1
	bl sub_8036BFC
	b _08039CC0
	.align 2, 0
_08039CA8: .4byte 0x0203C618
_08039CAC: .4byte gPlaySt
_08039CB0: .4byte 0x085C98F4
_08039CB4: .4byte 0x000006DF
_08039CB8:
	ldr r0, _08039CD8 @ =0x000006DE
	movs r1, #1
	bl sub_8036BFC
_08039CC0:
	ldrb r0, [r4]
	str r0, [r7, #0x38]
	ldr r1, _08039CDC @ =0x0203C984
	ldrb r0, [r4]
	strb r0, [r1]
	adds r0, r6, #0
	bl Proc_Break
_08039CD0:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08039CD8: .4byte 0x000006DE
_08039CDC: .4byte 0x0203C984

	thumb_func_start sub_8039CE0
sub_8039CE0: @ 0x08039CE0
	push {lr}
	ldr r0, _08039CF8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08039CF2
	movs r0, #0x7e
	bl m4aSongNumStart
_08039CF2:
	pop {r0}
	bx r0
	.align 2, 0
_08039CF8: .4byte gPlaySt

	thumb_func_start sub_8039CFC
sub_8039CFC: @ 0x08039CFC
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
	strb r4, [r5, #9]
	movs r1, #0
	bl SetUnitStatus
	strb r4, [r5, #0x19]
	ldr r1, _08039D24 @ =0x0203C618
	adds r1, #0xec
	movs r0, #4
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _08039D28
	adds r0, r5, #0
	bl sub_8036CB0
	b _08039D2E
	.align 2, 0
_08039D24: .4byte 0x0203C618
_08039D28:
	adds r0, r5, #0
	bl sub_8040CA8
_08039D2E:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8039D34
sub_8039D34: @ 0x08039D34
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sb, r0
	ldr r0, _08039DF0 @ =0x085C98F4
	ldr r0, [r0]
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #6
	adds r0, #1
	mov r8, r0
	ldr r1, _08039DF4 @ =0x0203C91C
	movs r0, #0
	str r0, [r1]
	bl InitUnits
	ldr r0, _08039DF8 @ =0x0203C618
	ldrb r0, [r0, #3]
	ldr r4, _08039DFC @ =0x085C9EA8
	ldr r1, [r4]
	bl sub_80861EC
	movs r6, #0
	ldr r0, _08039E00 @ =0x0203C9A8
	mov sl, r0
	movs r7, #0x10
_08039D6E:
	mov r1, r8
	adds r4, r1, r6
	adds r0, r4, #0
	bl GetUnit
	adds r5, r0, #0
	bl ClearUnit
	ldr r1, _08039DFC @ =0x085C9EA8
	ldr r0, [r1]
	adds r0, r0, r7
	adds r1, r5, #0
	bl sub_80855C4
	adds r0, r5, #0
	bl sub_8039CFC
	strb r4, [r5, #0xb]
	cmp r6, #0
	bne _08039DAC
	adds r0, r5, #0
	bl GetUnitChibiId
	ldr r1, _08039DF0 @ =0x085C98F4
	ldr r1, [r1]
	ldrb r1, [r1, #6]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #1
	add r1, sl
	strh r0, [r1]
_08039DAC:
	adds r7, #0x28
	adds r6, #1
	cmp r6, #4
	ble _08039D6E
	ldr r2, _08039DF0 @ =0x085C98F4
	mov r3, sb
	adds r3, #0x64
	mov r4, sb
	adds r4, #0x4c
	ldr r0, _08039DF8 @ =0x0203C618
	movs r1, #0
	movs r6, #3
	adds r0, #0x9f
_08039DC6:
	strb r1, [r0]
	subs r0, #1
	subs r6, #1
	cmp r6, #0
	bge _08039DC6
	ldr r2, [r2]
	movs r1, #6
	ldrsb r1, [r2, r1]
	movs r0, #1
	lsls r0, r1
	movs r1, #0
	strb r0, [r2, #0xa]
	strh r1, [r3]
	strh r1, [r4]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08039DF0: .4byte 0x085C98F4
_08039DF4: .4byte 0x0203C91C
_08039DF8: .4byte 0x0203C618
_08039DFC: .4byte 0x085C9EA8
_08039E00: .4byte 0x0203C9A8

	thumb_func_start sub_8039E04
sub_8039E04: @ 0x08039E04
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x2c
	mov r8, r0
	movs r0, #0
	mov sl, r0
	mov r0, r8
	adds r0, #0x4c
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _08039E32
	ldr r0, _08039F6C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08039E32
	movs r0, #0x7c
	bl m4aSongNumStart
_08039E32:
	mov r1, r8
	adds r1, #0x4c
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x17
	ble _08039E48
	movs r0, #0
	strh r0, [r1]
_08039E48:
	mov r4, r8
	adds r4, #0x64
	movs r3, #0
	ldrsh r0, [r4, r3]
	cmp r0, #4
	bgt _08039E88
	ldr r2, _08039F70 @ =0x085C9EA8
	lsls r1, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #3
	adds r1, #0x10
	ldr r0, [r2]
	adds r0, r0, r1
	movs r1, #0x28
	bl sub_8036208
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r3, r8
	str r0, [r3, #0x58]
	ldrh r2, [r4]
	adds r2, #1
	strh r2, [r4]
	ldr r1, _08039F74 @ =0x0203C618
	ldr r0, _08039F78 @ =0x085C98F4
	ldr r0, [r0]
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, #0x9c
	adds r0, r0, r1
	strb r2, [r0]
_08039E88:
	bl GetGameTime
	movs r1, #0x26
	bl __umodsi3
	cmp r0, #0
	bne _08039F5C
	add r6, sp, #0x28
	mov r0, sp
	adds r1, r6, #0
	movs r2, #0
	bl sub_80362B0
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _08039F18
	ldrb r0, [r6]
	lsls r4, r0, #6
	adds r4, #1
	ldr r1, _08039F74 @ =0x0203C618
	mov sb, r1
	mov r7, sb
	adds r7, #0x9c
	adds r0, r0, r7
	ldrb r0, [r0]
	adds r0, r0, r4
	bl GetUnit
	adds r5, r0, #0
	bl ClearUnit
	mov r0, sp
	adds r1, r5, #0
	bl sub_80855C4
	adds r0, r5, #0
	bl sub_8039CFC
	ldrb r3, [r6]
	adds r0, r3, r7
	ldrb r0, [r0]
	adds r4, r0, r4
	strb r4, [r5, #0xb]
	ldrb r1, [r6]
	adds r0, r1, r7
	ldrb r0, [r0]
	cmp r0, #0
	bne _08039EFA
	adds r0, r5, #0
	bl GetUnitChibiId
	ldr r1, _08039F7C @ =0x0203C984
	ldrb r3, [r6]
	lsls r2, r3, #1
	adds r1, #0x24
	adds r2, r2, r1
	strh r0, [r2]
_08039EFA:
	mov r1, sb
	adds r1, #0xec
	movs r0, #1
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _08039F0E
	movs r0, #0x80
	lsls r0, r0, #2
	strh r0, [r5, #0xc]
_08039F0E:
	ldrb r6, [r6]
	adds r1, r6, r7
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_08039F18:
	movs r4, #0
	ldr r5, _08039F80 @ =0x0203C6B4
_08039F1C:
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	bl sub_8035CB0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08039F3C
	adds r0, r4, r5
	ldrb r0, [r0]
	cmp r0, #4
	bhi _08039F3C
	mov r0, sl
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sl, r0
_08039F3C:
	adds r4, #1
	cmp r4, #3
	ble _08039F1C
	mov r0, sl
	cmp r0, #0
	bne _08039F5C
	ldr r0, _08039F78 @ =0x085C98F4
	ldr r2, [r0]
	movs r1, #6
	ldrsb r1, [r2, r1]
	movs r0, #1
	lsls r0, r1
	strb r0, [r2, #0xa]
	mov r0, r8
	bl Proc_Break
_08039F5C:
	add sp, #0x2c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08039F6C: .4byte gPlaySt
_08039F70: .4byte 0x085C9EA8
_08039F74: .4byte 0x0203C618
_08039F78: .4byte 0x085C98F4
_08039F7C: .4byte 0x0203C984
_08039F80: .4byte 0x0203C6B4

	thumb_func_start sub_8039F84
sub_8039F84: @ 0x08039F84
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r0, #0x4c
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _08039FA2
	ldr r0, _0803A014 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08039FA2
	movs r0, #0x7c
	bl m4aSongNumStart
_08039FA2:
	adds r1, r5, #0
	adds r1, #0x4c
	ldrh r0, [r1]
	adds r0, #1
	movs r6, #0
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x17
	ble _08039FB8
	strh r6, [r1]
_08039FB8:
	ldr r0, _0803A018 @ =0x0203C91C
	ldr r1, [r0]
	adds r1, #1
	str r1, [r0]
	movs r0, #0x96
	lsls r0, r0, #2
	cmp r1, r0
	ble _08039FCC
	bl sub_8073510
_08039FCC:
	ldr r0, _0803A01C @ =0x0300456C
	movs r1, #0x19
	strb r1, [r0]
	ldr r4, _0803A020 @ =0x085C98F4
	ldr r1, [r4]
	ldrb r1, [r1, #6]
	strb r1, [r0, #1]
	strh r6, [r0, #2]
	movs r1, #4
	bl sub_8035DC8
	ldr r4, [r4]
	ldr r1, [r5, #0x58]
	movs r0, #0x8c
	muls r0, r1, r0
	adds r0, r4, r0
	movs r1, #0x9a
	lsls r1, r1, #1
	adds r0, r0, r1
	ldrb r1, [r4, #9]
	ldrb r2, [r0]
	cmp r2, r1
	bne _0803A00E
	ldrb r0, [r4, #0xa]
	ands r0, r1
	cmp r0, r2
	bne _0803A00E
	ldr r0, _0803A024 @ =0x085C99C8
	bl Proc_EndEach
	adds r0, r5, #0
	bl Proc_Break
_0803A00E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803A014: .4byte gPlaySt
_0803A018: .4byte 0x0203C91C
_0803A01C: .4byte 0x0300456C
_0803A020: .4byte 0x085C98F4
_0803A024: .4byte 0x085C99C8

	thumb_func_start sub_803A028
sub_803A028: @ 0x0803A028
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_8036B40
	bl sub_803FA14
	bl sub_8040F50
	movs r0, #3
	bl EndFaceById
	ldr r4, _0803A07C @ =0x0203C66C
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	ldr r1, _0803A080 @ =0x0810F0C0
	adds r0, r4, #0
	bl Text_DrawString
	ldr r1, _0803A084 @ =0x02022E1A
	adds r0, r4, #0
	bl PutText
	ldr r0, _0803A088 @ =0x085C99C8
	adds r1, r5, #0
	bl SpawnProc
	movs r0, #0
	movs r1, #0
	bl sub_803FAA4
	movs r0, #0xf
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803A07C: .4byte 0x0203C66C
_0803A080: .4byte 0x0810F0C0
_0803A084: .4byte 0x02022E1A
_0803A088: .4byte 0x085C99C8

	thumb_func_start sub_803A08C
sub_803A08C: @ 0x0803A08C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	mov sb, r0
	bl sub_8036B40
	bl sub_803FA14
	ldr r4, _0803A1A8 @ =0x08108514
	movs r0, #1
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r0, _0803A1AC @ =0x06000C00
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, _0803A1B0 @ =0x08109A80
	movs r1, #0xc0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0803A1B4 @ =0x08107820
	ldr r1, _0803A1B8 @ =0x06014800
	bl Decompress
	ldr r0, _0803A1BC @ =0x08109A00
	movs r1, #0x98
	lsls r1, r1, #2
	movs r2, #0x80
	bl ApplyPaletteExt
	movs r0, #0
	bl sub_803FB08
	ldr r0, _0803A1C0 @ =0x0203C758
	bl SetTextFont
	bl ResetTextFont
	bl sub_8036C60
	add r0, sp, #8
	bl sub_803AE70
	movs r0, #1
	movs r1, #0xfe
	movs r2, #0
	bl SetBgOffset
	movs r5, #0
	movs r7, #0xc0
	lsls r7, r7, #1
	ldr r6, _0803A1C4 @ =0x0810F298
_0803A0FE:
	lsls r4, r5, #3
	ldr r1, _0803A1C8 @ =0x0203C624
	mov r8, r1
	add r4, r8
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	ldr r1, [r6]
	adds r0, r4, #0
	bl Text_DrawString
	ldr r1, _0803A1CC @ =0x02021B14
	adds r1, r7, r1
	adds r0, r4, #0
	bl PutText
	mov r0, sp
	adds r0, r0, r5
	adds r0, #8
	ldrb r1, [r0]
	adds r0, r5, #0
	bl sub_803AED0
	adds r7, #0xc0
	adds r6, #0x14
	adds r5, #1
	cmp r5, #2
	ble _0803A0FE
	ldr r5, _0803A1C4 @ =0x0810F298
	ldr r0, [r5, #0x18]
	lsls r0, r0, #1
	ldr r4, _0803A1D0 @ =0x02022544
	adds r0, r0, r4
	movs r1, #0
	bl sub_803A680
	ldr r0, [r5, #0x1c]
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #1
	bl sub_803A680
	ldr r0, _0803A1D4 @ =0x0810F19C
	mov r4, r8
	subs r4, #0xc
	ldrb r2, [r4]
	adds r0, r2, r0
	ldrb r1, [r0]
	mov r0, sb
	bl sub_803FC3C
	ldr r0, _0803A1D8 @ =0x085C9AD4
	ldrb r3, [r4]
	lsls r1, r3, #2
	adds r0, r1, r0
	ldr r0, [r0]
	ldr r2, _0803A1DC @ =0x0810F190
	adds r1, r1, r2
	ldr r1, [r1]
	str r3, [sp]
	mov r2, sb
	str r2, [sp, #4]
	movs r2, #0
	movs r3, #8
	bl sub_803FD40
	ldr r0, _0803A1E0 @ =0x000006DA
	movs r1, #1
	bl sub_8036BFC
	movs r0, #0xf
	bl EnableBgSync
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803A1A8: .4byte 0x08108514
_0803A1AC: .4byte 0x06000C00
_0803A1B0: .4byte 0x08109A80
_0803A1B4: .4byte 0x08107820
_0803A1B8: .4byte 0x06014800
_0803A1BC: .4byte 0x08109A00
_0803A1C0: .4byte 0x0203C758
_0803A1C4: .4byte 0x0810F298
_0803A1C8: .4byte 0x0203C624
_0803A1CC: .4byte 0x02021B14
_0803A1D0: .4byte 0x02022544
_0803A1D4: .4byte 0x0810F19C
_0803A1D8: .4byte 0x085C9AD4
_0803A1DC: .4byte 0x0810F190
_0803A1E0: .4byte 0x000006DA

	thumb_func_start sub_803A1E4
sub_803A1E4: @ 0x0803A1E4
	push {lr}
	movs r0, #3
	bl sub_8036494
	pop {r0}
	bx r0

	thumb_func_start sub_803A1F0
sub_803A1F0: @ 0x0803A1F0
	push {lr}
	movs r0, #0
	bl sub_8036494
	pop {r0}
	bx r0

	thumb_func_start sub_803A1FC
sub_803A1FC: @ 0x0803A1FC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x4c
	adds r7, r0, #0
	movs r0, #0
	str r0, [sp, #0x3c]
	add r5, sp, #0x28
	ldr r1, _0803A2D8 @ =0x0810F2D4
	adds r0, r5, #0
	movs r2, #6
	bl memcpy
	bl sub_8036B40
	bl sub_803FA14
	ldr r0, _0803A2DC @ =0x08107820
	ldr r1, _0803A2E0 @ =0x06014800
	bl Decompress
	movs r0, #0
	movs r1, #4
	bl sub_803FAA4
	ldr r0, _0803A2E4 @ =0x0203C758
	bl SetTextFont
	bl InitSystemTextFont
	bl ResetTextFont
	movs r0, #0xc0
	movs r1, #0x10
	adds r2, r7, #0
	bl sub_803F9C4
	ldr r4, _0803A2E8 @ =0x0203C900
	adds r0, r4, #0
	movs r1, #0x18
	bl InitText
	adds r4, #8
	adds r0, r4, #0
	movs r1, #0x18
	bl InitText
	ldr r0, _0803A2EC @ =0x000006DB
	movs r1, #0
	bl sub_8036BFC
	ldr r0, _0803A2F0 @ =0x000006DC
	movs r1, #1
	bl sub_8036BFC
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r7, #0x4c]
	movs r1, #2
	mov r8, r1
	mov r2, sp
	adds r2, #0x30
	str r2, [sp, #0x40]
	adds r5, r7, #0
	adds r5, #0x40
	movs r0, #8
	mov sl, r0
	add r1, sp, #0x38
	mov sb, r1
_0803A28A:
	movs r0, #0
	mov r2, sb
	str r0, [r2]
	mov r0, r8
	bl sub_808525C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803A322
	mov r0, r8
	add r1, sp, #8
	bl sub_8085270
	add r0, sp, #8
	bl sub_8070E0C
	adds r2, r7, #0
	adds r2, #0x2c
	mov r1, sl
	adds r4, r2, r1
	str r0, [r4]
	add r1, sp, #8
	movs r0, #0x40
	ldrb r1, [r1, #0x14]
	ands r0, r1
	str r2, [sp, #0x44]
	cmp r0, #0
	beq _0803A2C8
	movs r0, #2
	mov r2, sb
	str r0, [r2]
_0803A2C8:
	mov r0, r8
	bl sub_8085290
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803A2F4
	ldr r0, [r4]
	b _0803A2F8
	.align 2, 0
_0803A2D8: .4byte 0x0810F2D4
_0803A2DC: .4byte 0x08107820
_0803A2E0: .4byte 0x06014800
_0803A2E4: .4byte 0x0203C758
_0803A2E8: .4byte 0x0203C900
_0803A2EC: .4byte 0x000006DB
_0803A2F0: .4byte 0x000006DC
_0803A2F4:
	movs r0, #1
	rsbs r0, r0, #0
_0803A2F8:
	str r0, [r5]
	adds r6, r7, #0
	adds r6, #0x38
	mov r1, sl
	adds r0, r6, r1
	ldr r0, [r0]
	movs r2, #1
	rsbs r2, r2, #0
	cmp r0, r2
	beq _0803A338
	ldr r0, [sp, #0x3c]
	cmp r0, #0
	bne _0803A31C
	mov r1, r8
	str r1, [r7, #0x50]
	movs r2, #1
	str r2, [sp, #0x3c]
	b _0803A338
_0803A31C:
	mov r0, r8
	str r0, [r7, #0x4c]
	b _0803A338
_0803A322:
	adds r1, r7, #0
	adds r1, #0x2c
	mov r2, sl
	adds r0, r1, r2
	movs r2, #1
	rsbs r2, r2, #0
	str r2, [r5]
	str r2, [r0]
	str r1, [sp, #0x44]
	adds r6, r7, #0
	adds r6, #0x38
_0803A338:
	subs r5, #4
	movs r0, #4
	rsbs r0, r0, #0
	add sl, r0
	add sb, r0
	movs r1, #1
	rsbs r1, r1, #0
	add r8, r1
	mov r2, r8
	cmp r2, #0
	bge _0803A28A
	ldr r1, [r7, #0x4c]
	adds r0, #3
	cmp r1, r0
	bne _0803A35E
	ldr r0, [r7, #0x50]
	str r0, [r7, #0x4c]
	str r0, [r7, #0x48]
	b _0803A360
_0803A35E:
	str r1, [r7, #0x48]
_0803A360:
	movs r0, #1
	movs r1, #4
	bl sub_8070CB4
	movs r0, #3
	movs r1, #5
	bl sub_8070CB4
	movs r0, #5
	movs r1, #6
	bl sub_8070CB4
	movs r0, #0
	movs r1, #7
	bl sub_8070CB4
	movs r0, #2
	movs r1, #8
	bl sub_8070CB4
	movs r0, #4
	movs r1, #9
	bl sub_8070CB4
	movs r0, #0xd0
	lsls r0, r0, #1
	bl sub_8070D48
	movs r0, #0xa0
	lsls r0, r0, #1
	mov sl, r0
	ldr r1, [sp, #0x44]
	str r1, [sp, #0x48]
	movs r2, #0x88
	lsls r2, r2, #7
	mov sb, r2
	movs r5, #0x80
	lsls r5, r5, #1
	ldr r4, [sp, #0x40]
	movs r0, #2
	mov r8, r0
_0803A3B2:
	ldr r1, [r6]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0803A3C0
	movs r0, #1
	b _0803A3C8
_0803A3C0:
	ldr r0, [r4]
	cmp r0, #2
	beq _0803A3CA
	movs r0, #0
_0803A3C8:
	str r0, [r4]
_0803A3CA:
	ldr r0, _0803A458 @ =0x0202230E
	adds r0, r5, r0
	ldr r1, [r4]
	adds r1, #4
	bl sub_8070DC8
	mov r1, sb
	lsls r0, r1, #0xf
	lsrs r0, r0, #0x14
	ldr r2, [sp, #0x48]
	ldm r2!, {r1}
	str r2, [sp, #0x48]
	bl sub_8070D08
	ldr r0, _0803A45C @ =0x02021B0E
	add r0, sl
	ldm r4!, {r1}
	adds r1, #7
	bl sub_8070DA8
	movs r0, #0x80
	lsls r0, r0, #1
	add sl, r0
	movs r1, #0x80
	lsls r1, r1, #4
	add sb, r1
	adds r5, r5, r0
	adds r6, #4
	movs r2, #1
	rsbs r2, r2, #0
	add r8, r2
	mov r0, r8
	cmp r0, #0
	bge _0803A3B2
	ldr r2, _0803A460 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r0, r7, #0
	movs r1, #1
	bl sub_803FC3C
	ldr r0, _0803A464 @ =0x0203C618
	ldrb r0, [r0]
	str r0, [sp]
	str r7, [sp, #4]
	add r0, sp, #0x28
	movs r1, #6
	movs r2, #0
	movs r3, #8
	bl sub_803FD40
	movs r0, #0xf
	bl EnableBgSync
	add sp, #0x4c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803A458: .4byte 0x0202230E
_0803A45C: .4byte 0x02021B0E
_0803A460: .4byte gDispIo
_0803A464: .4byte 0x0203C618

	thumb_func_start sub_803A468
sub_803A468: @ 0x0803A468
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r5, r3, #0
	ldr r0, [sp, #0x14]
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov ip, r1
	lsls r2, r2, #0x18
	lsrs r6, r2, #0x18
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldr r1, _0803A4F0 @ =gKeySt
	ldr r3, [r1]
	ldrh r2, [r3, #6]
	movs r0, #0x40
	ands r0, r2
	cmp r0, #0
	beq _0803A4B6
	ldr r0, [r4]
	cmp r0, r6
	bgt _0803A498
	ldrh r3, [r3, #8]
	cmp r2, r3
	bne _0803A4B6
_0803A498:
	subs r2, r7, #1
	movs r3, #1
	rsbs r3, r3, #0
_0803A49E:
	ldr r0, [r4]
	subs r0, #1
	str r0, [r4]
	cmp r0, #0
	bge _0803A4AA
	str r2, [r4]
_0803A4AA:
	ldr r0, [r4]
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r0, [r0]
	cmp r0, r3
	beq _0803A49E
_0803A4B6:
	ldr r1, [r1]
	ldrh r2, [r1, #6]
	movs r0, #0x80
	ands r0, r2
	cmp r0, #0
	beq _0803A4EA
	ldr r0, [r4]
	cmp r0, ip
	blt _0803A4CE
	ldrh r1, [r1, #8]
	cmp r2, r1
	bne _0803A4EA
_0803A4CE:
	ldr r0, [r4]
	adds r0, #1
	str r0, [r4]
	adds r1, r7, #0
	bl __modsi3
	str r0, [r4]
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r1, [r0]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _0803A4CE
_0803A4EA:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803A4F0: .4byte gKeySt

	thumb_func_start sub_803A4F4
sub_803A4F4: @ 0x0803A4F4
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r5, [r6, #0x48]
	adds r0, #0x48
	ldr r1, [r6, #0x50]
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	ldr r2, [r6, #0x4c]
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	adds r3, r6, #0
	adds r3, #0x38
	movs r4, #3
	str r4, [sp]
	bl sub_803A468
	ldr r1, [r6, #0x48]
	lsls r1, r1, #5
	adds r1, #0x28
	movs r0, #0x18
	bl sub_80415CC
	ldr r0, [r6, #0x48]
	cmp r5, r0
	beq _0803A52E
	movs r0, #3
	bl sub_8036D08
_0803A52E:
	ldr r4, _0803A56C @ =gKeySt
	ldr r1, [r4]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0803A548
	movs r0, #2
	bl sub_8036D08
	adds r0, r6, #0
	bl Proc_Break
_0803A548:
	ldr r1, [r4]
	movs r0, #2
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0803A562
	movs r0, #1
	bl sub_8036D08
	adds r0, r6, #0
	movs r1, #4
	bl Proc_Goto
_0803A562:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803A56C: .4byte gKeySt

	thumb_func_start sub_803A570
sub_803A570: @ 0x0803A570
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x48]
	bl sub_80851B4
	ldr r1, _0803A5A4 @ =gPlaySt
	movs r0, #0xdf
	ldrb r2, [r1, #0x14]
	ands r0, r2
	strb r0, [r1, #0x14]
	movs r0, #0xd
	rsbs r0, r0, #0
	ldrb r2, [r1, #0x1d]
	ands r0, r2
	strb r0, [r1, #0x1d]
	ldr r1, _0803A5A8 @ =0x0203C618
	ldr r0, [r4, #0x48]
	strb r0, [r1, #4]
	bl ApplyUnitSpritePalettes
	bl sub_803CE7C
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803A5A4: .4byte gPlaySt
_0803A5A8: .4byte 0x0203C618

	thumb_func_start sub_803A5AC
sub_803A5AC: @ 0x0803A5AC
	push {lr}
	adds r1, r0, #0
	ldr r0, _0803A5C4 @ =0x0203C618
	ldrb r0, [r0, #3]
	cmp r0, #0xff
	bne _0803A5C0
	adds r0, r1, #0
	movs r1, #1
	bl Proc_Goto
_0803A5C0:
	pop {r0}
	bx r0
	.align 2, 0
_0803A5C4: .4byte 0x0203C618

	thumb_func_start sub_803A5C8
sub_803A5C8: @ 0x0803A5C8
	push {lr}
	adds r1, r0, #0
	ldr r0, _0803A5E0 @ =0x0203C618
	ldrb r0, [r0, #4]
	cmp r0, #0xff
	bne _0803A5DC
	adds r0, r1, #0
	movs r1, #2
	bl Proc_Goto
_0803A5DC:
	pop {r0}
	bx r0
	.align 2, 0
_0803A5E0: .4byte 0x0203C618

	thumb_func_start sub_803A5E4
sub_803A5E4: @ 0x0803A5E4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0803A600 @ =0x08678E38
	bl Proc_Find
	cmp r0, #0
	bne _0803A5F8
	adds r0, r4, #0
	bl Proc_Break
_0803A5F8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803A600: .4byte 0x08678E38

	thumb_func_start sub_803A604
sub_803A604: @ 0x0803A604
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0803A63C @ =0x0203C918
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0803A634
	bl sub_8036B98
	bl sub_803FB74
	bl sub_803FC60
	bl sub_803FDD8
	bl sub_803F9F4
	bl sub_807B6BC
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
_0803A634:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803A63C: .4byte 0x0203C918

	thumb_func_start sub_803A640
sub_803A640: @ 0x0803A640
	adds r3, r0, #0
	lsls r0, r1, #1
	adds r0, r0, r1
	ldr r2, _0803A67C @ =0x00004060
	adds r0, r0, r2
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r1, #2
	ble _0803A65C
	movs r1, #0x80
	lsls r1, r1, #5
	adds r0, r2, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
_0803A65C:
	strh r2, [r3]
	adds r0, r2, #1
	strh r0, [r3, #2]
	adds r0, r2, #2
	strh r0, [r3, #4]
	adds r1, r3, #0
	adds r1, #0x40
	adds r0, #0x1e
	strh r0, [r1]
	adds r1, #2
	adds r0, #1
	strh r0, [r1]
	adds r1, #2
	adds r0, #1
	strh r0, [r1]
	bx lr
	.align 2, 0
_0803A67C: .4byte 0x00004060

	thumb_func_start sub_803A680
sub_803A680: @ 0x0803A680
	push {r4, lr}
	lsls r1, r1, #0x12
	movs r2, #0xa0
	lsls r2, r2, #0x10
	adds r1, r1, r2
	lsrs r1, r1, #0x10
	movs r3, #0xc0
	lsls r3, r3, #7
	adds r2, r1, r3
	strh r2, [r0]
	ldr r4, _0803A6B4 @ =0x00006001
	adds r2, r1, r4
	strh r2, [r0, #2]
	adds r3, r0, #0
	adds r3, #0x40
	adds r4, #1
	adds r2, r1, r4
	strh r2, [r3]
	adds r0, #0x42
	ldr r2, _0803A6B8 @ =0x00006003
	adds r1, r1, r2
	strh r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803A6B4: .4byte 0x00006001
_0803A6B8: .4byte 0x00006003

	thumb_func_start sub_803A6BC
sub_803A6BC: @ 0x0803A6BC
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	adds r5, r0, #0
	mov sb, r1
	adds r6, r2, #0
	adds r4, r3, #0
	ldr r0, [sp, #0x18]
	lsls r6, r6, #0x18
	lsrs r6, r6, #0x18
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	adds r0, r5, #0
	movs r1, #8
	movs r2, #0
	mov r3, sb
	bl Text_InsertDrawString
	adds r0, r5, #0
	movs r1, #0x60
	movs r2, #2
	adds r3, r4, #0
	bl Text_InsertDrawNumberOrBlank
	ldr r3, _0803A73C @ =0x0810EDA4
	adds r0, r5, #0
	movs r1, #0x68
	movs r2, #0
	bl Text_InsertDrawString
	adds r0, r5, #0
	movs r1, #0x86
	movs r2, #2
	adds r3, r6, #0
	bl Text_InsertDrawNumberOrBlank
	ldr r3, _0803A740 @ =0x0810F2DC
	adds r0, r5, #0
	movs r1, #0x8e
	movs r2, #0
	bl Text_InsertDrawString
	adds r0, r5, #0
	movs r1, #0x9c
	movs r2, #2
	mov r3, r8
	bl Text_InsertDrawNumberOrBlank
	ldr r3, _0803A744 @ =0x0810F2E0
	adds r0, r5, #0
	movs r1, #0xa4
	movs r2, #0
	bl Text_InsertDrawString
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803A73C: .4byte 0x0810EDA4
_0803A740: .4byte 0x0810F2DC
_0803A744: .4byte 0x0810F2E0

	thumb_func_start sub_803A748
sub_803A748: @ 0x0803A748
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	movs r6, #0
	ldr r0, _0803A7DC @ =0x0203C83C
	ldr r1, _0803A7E0 @ =0x0202230C
	mov sl, r1
	subs r7, r0, #4
	movs r1, #0x24
	add r1, sl
	mov sb, r1
	mov r8, r0
_0803A766:
	lsls r5, r6, #3
	ldr r0, _0803A7E4 @ =0x0203C708
	adds r5, r5, r0
	adds r0, r5, #0
	bl ClearText
	ldrb r0, [r7]
	lsls r2, r0, #0x1e
	lsrs r2, r2, #6
	movs r1, #0x80
	lsls r1, r1, #0x11
	adds r2, r2, r1
	lsrs r2, r2, #0x18
	ldr r3, [r7]
	lsls r3, r3, #0xb
	lsrs r3, r3, #0x10
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1e
	adds r0, #1
	str r0, [sp]
	adds r0, r5, #0
	mov r1, r8
	bl sub_803A6BC
	lsls r4, r6, #7
	mov r1, sl
	adds r0, r4, r1
	adds r1, r6, #0
	bl sub_803A640
	mov r0, sl
	adds r0, #6
	adds r4, r4, r0
	adds r0, r5, #0
	adds r1, r4, #0
	bl PutText
	ldrb r0, [r7]
	lsls r1, r0, #0x1b
	lsrs r1, r1, #0x1f
	mov r0, sb
	bl sub_803A680
	adds r7, #0x14
	movs r1, #0x80
	add sb, r1
	movs r0, #0x14
	add r8, r0
	adds r6, #1
	cmp r6, #9
	ble _0803A766
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803A7DC: .4byte 0x0203C83C
_0803A7E0: .4byte 0x0202230C
_0803A7E4: .4byte 0x0203C708

	thumb_func_start sub_803A7E8
sub_803A7E8: @ 0x0803A7E8
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	adds r7, r0, #0
	ldr r1, _0803A9A4 @ =0x0810F2E3
	add r0, sp, #8
	movs r2, #8
	bl memcpy
	bl sub_8036B40
	bl sub_803FA14
	ldr r4, _0803A9A8 @ =0x08108514
	movs r0, #1
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r0, _0803A9AC @ =0x06000C00
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, _0803A9B0 @ =0x08109AC0
	movs r1, #0x80
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, _0803A9B4 @ =0x08109A80
	movs r1, #0xc0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0803A9B8 @ =0x08107820
	ldr r1, _0803A9BC @ =0x06014800
	bl Decompress
	ldr r0, _0803A9C0 @ =0x08109A00
	movs r1, #0x98
	lsls r1, r1, #2
	movs r2, #0x80
	bl ApplyPaletteExt
	movs r0, #0
	movs r1, #2
	bl sub_803FAA4
	ldr r0, _0803A9C4 @ =0x02022C0A
	ldr r1, _0803A9C8 @ =0x0810A318
	movs r2, #0x80
	lsls r2, r2, #5
	bl TmApplyTsa_t
	ldr r0, _0803A9CC @ =0x0203C758
	bl SetTextFont
	bl InitSystemTextFont
	bl ResetTextFont
	movs r1, #0
	movs r0, #0xc8
	strh r0, [r7, #0x36]
	adds r0, r7, #0
	adds r0, #0x39
	strb r1, [r0]
	subs r0, #1
	strb r1, [r0]
	subs r0, #4
	strb r1, [r0]
	ldrh r2, [r7, #0x36]
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	ldr r5, _0803A9D0 @ =0x0203C708
	movs r4, #9
_0803A880:
	adds r0, r5, #0
	movs r1, #0x18
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _0803A880
	ldr r4, _0803A9D4 @ =0x0203C900
	adds r0, r4, #0
	movs r1, #0x18
	bl InitText
	adds r0, r4, #0
	adds r0, #8
	movs r1, #0x18
	bl InitText
	adds r0, r4, #0
	bl ClearText
	ldr r3, _0803A9D8 @ =0x0810F2EC
	adds r0, r4, #0
	movs r1, #0x10
	movs r2, #0
	bl Text_InsertDrawString
	ldr r3, _0803A9DC @ =0x0810F2F8
	adds r0, r4, #0
	movs r1, #0x5e
	movs r2, #0
	bl Text_InsertDrawString
	ldr r3, _0803A9E0 @ =0x0810F300
	adds r0, r4, #0
	movs r1, #0x84
	movs r2, #0
	bl Text_InsertDrawString
	ldr r3, _0803A9E4 @ =0x0810F308
	adds r0, r4, #0
	movs r1, #0x9c
	movs r2, #0
	bl Text_InsertDrawString
	ldr r1, _0803A9E8 @ =0x02021C52
	adds r0, r4, #0
	bl PutText
	ldr r0, _0803A9EC @ =0x000006D3
	movs r1, #1
	bl sub_8036BFC
	ldr r0, _0803A9F0 @ =0x0203C838
	bl sub_80864CC
	bl sub_803A748
	ldr r1, _0803A9F4 @ =gDispIo
	mov ip, r1
	movs r0, #0x20
	ldrb r2, [r1, #1]
	orrs r0, r2
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x38
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x88
	strb r0, [r1]
	mov r5, ip
	adds r5, #0x34
	movs r1, #1
	ldrb r0, [r5]
	orrs r0, r1
	movs r2, #2
	orrs r0, r2
	movs r6, #4
	orrs r0, r6
	movs r4, #8
	orrs r0, r4
	movs r3, #0x10
	orrs r0, r3
	strb r0, [r5]
	mov r2, ip
	adds r2, #0x36
	ldrb r0, [r2]
	orrs r1, r0
	movs r0, #3
	rsbs r0, r0, #0
	ands r1, r0
	orrs r1, r6
	orrs r1, r4
	orrs r1, r3
	strb r1, [r2]
	ldrh r0, [r7, #0x36]
	adds r0, #0x38
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp]
	str r7, [sp, #4]
	movs r0, #0xd8
	movs r1, #0x38
	movs r2, #0xa
	movs r3, #5
	bl sub_8040A80
	adds r0, r7, #0
	movs r1, #5
	bl sub_803FC3C
	ldr r0, _0803A9F8 @ =0x0203C618
	ldrb r0, [r0]
	str r0, [sp]
	str r7, [sp, #4]
	add r0, sp, #8
	movs r1, #8
	movs r2, #0
	movs r3, #8
	bl sub_803FD40
	movs r0, #0xc0
	movs r1, #0x10
	adds r2, r7, #0
	bl sub_803F9C4
	movs r0, #0xf
	bl EnableBgSync
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803A9A4: .4byte 0x0810F2E3
_0803A9A8: .4byte 0x08108514
_0803A9AC: .4byte 0x06000C00
_0803A9B0: .4byte 0x08109AC0
_0803A9B4: .4byte 0x08109A80
_0803A9B8: .4byte 0x08107820
_0803A9BC: .4byte 0x06014800
_0803A9C0: .4byte 0x08109A00
_0803A9C4: .4byte 0x02022C0A
_0803A9C8: .4byte 0x0810A318
_0803A9CC: .4byte 0x0203C758
_0803A9D0: .4byte 0x0203C708
_0803A9D4: .4byte 0x0203C900
_0803A9D8: .4byte 0x0810F2EC
_0803A9DC: .4byte 0x0810F2F8
_0803A9E0: .4byte 0x0810F300
_0803A9E4: .4byte 0x0810F308
_0803A9E8: .4byte 0x02021C52
_0803A9EC: .4byte 0x000006D3
_0803A9F0: .4byte 0x0203C838
_0803A9F4: .4byte gDispIo
_0803A9F8: .4byte 0x0203C618

	thumb_func_start sub_803A9FC
sub_803A9FC: @ 0x0803A9FC
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x38
	movs r0, #0
	ldrsb r0, [r6, r0]
	cmp r0, #0
	ble _0803AA18
	ldrh r0, [r4, #0x36]
	subs r0, #4
	strh r0, [r4, #0x36]
	ldrb r0, [r6]
	subs r0, #1
	b _0803AA26
_0803AA18:
	cmp r0, #0
	bge _0803AA42
	ldrh r0, [r4, #0x36]
	adds r0, #4
	strh r0, [r4, #0x36]
	ldrb r0, [r6]
	adds r0, #1
_0803AA26:
	strb r0, [r6]
	ldrh r2, [r4, #0x36]
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	ldrh r1, [r4, #0x36]
	adds r1, #0x38
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r0, #0xa
	bl sub_8040AEC
	b _0803AAEE
_0803AA42:
	ldr r0, _0803AAF4 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x40
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _0803AA88
	adds r5, r4, #0
	adds r5, #0x34
	ldrb r0, [r5]
	cmp r0, #0
	beq _0803AA88
	movs r0, #3
	bl sub_8036D08
	ldrh r0, [r4, #0x36]
	subs r0, #4
	strh r0, [r4, #0x36]
	ldrb r0, [r5]
	subs r0, #1
	strb r0, [r5]
	movs r0, #3
	strb r0, [r6]
	ldrh r2, [r4, #0x36]
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	ldrh r1, [r4, #0x36]
	adds r1, #0x38
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r0, #0xa
	bl sub_8040AEC
_0803AA88:
	ldr r0, _0803AAF4 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x80
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _0803AAD4
	adds r5, r4, #0
	adds r5, #0x34
	ldrb r0, [r5]
	adds r0, #5
	cmp r0, #9
	bgt _0803AAD4
	movs r0, #3
	bl sub_8036D08
	ldrh r0, [r4, #0x36]
	adds r0, #4
	strh r0, [r4, #0x36]
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	adds r1, r4, #0
	adds r1, #0x38
	movs r0, #0xfd
	strb r0, [r1]
	ldrh r2, [r4, #0x36]
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	ldrh r1, [r4, #0x36]
	adds r1, #0x38
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r0, #0xa
	bl sub_8040AEC
_0803AAD4:
	ldr r0, _0803AAF4 @ =gKeySt
	ldr r1, [r0]
	movs r0, #2
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0803AAEE
	movs r0, #1
	bl sub_8036D08
	adds r0, r4, #0
	bl Proc_Break
_0803AAEE:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803AAF4: .4byte gKeySt

	thumb_func_start sub_803AAF8
sub_803AAF8: @ 0x0803AAF8
	cmp r0, #6
	ble _0803AB00
	movs r0, #5
	b _0803AB0C
_0803AB00:
	subs r0, #2
	cmp r0, #0
	bge _0803AB08
	movs r0, #0
_0803AB08:
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
_0803AB0C:
	bx lr
	.align 2, 0

	thumb_func_start sub_803AB10
sub_803AB10: @ 0x0803AB10
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r7, r0, #0
	ldr r1, _0803AD18 @ =0x0810F30D
	add r0, sp, #8
	movs r2, #7
	bl memcpy
	bl sub_8036B40
	bl sub_803FA14
	ldr r4, _0803AD1C @ =0x08108514
	movs r0, #1
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r0, _0803AD20 @ =0x06000C00
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, _0803AD24 @ =0x08109AC0
	movs r1, #0x80
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, _0803AD28 @ =0x08109A80
	movs r1, #0xc0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0803AD2C @ =0x08107820
	ldr r1, _0803AD30 @ =0x06014800
	bl Decompress
	ldr r0, _0803AD34 @ =0x08109648
	ldr r1, _0803AD38 @ =0x06016000
	bl Decompress
	ldr r0, _0803AD3C @ =0x08109BE0
	movs r1, #0x98
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #0
	movs r1, #0
	bl sub_803FAA4
	ldr r0, _0803AD40 @ =0x02022C0A
	ldr r1, _0803AD44 @ =0x0810A318
	movs r2, #0x80
	lsls r2, r2, #5
	bl TmApplyTsa_t
	ldr r0, _0803AD48 @ =0x0203C758
	bl SetTextFont
	bl InitSystemTextFont
	bl ResetTextFont
	adds r1, r7, #0
	adds r1, #0x34
	movs r4, #0
	movs r0, #5
	strb r0, [r1]
	movs r1, #0
	movs r0, #0x8c
	lsls r0, r0, #1
	strh r0, [r7, #0x36]
	adds r0, r7, #0
	adds r0, #0x39
	strb r1, [r0]
	subs r0, #1
	strb r1, [r0]
	ldr r0, [r7, #0x3c]
	bl sub_803AAF8
	adds r1, r7, #0
	adds r1, #0x35
	strb r0, [r1]
	str r4, [r7, #0x40]
	ldrh r2, [r7, #0x36]
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	ldr r5, _0803AD4C @ =0x0203C708
	movs r4, #9
_0803ABCE:
	adds r0, r5, #0
	movs r1, #0x18
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _0803ABCE
	ldr r4, _0803AD50 @ =0x0203C900
	adds r0, r4, #0
	movs r1, #0x18
	bl InitText
	adds r0, r4, #0
	adds r0, #8
	movs r1, #0x18
	bl InitText
	adds r0, r4, #0
	bl ClearText
	ldr r3, _0803AD54 @ =0x0810F2EC
	adds r0, r4, #0
	movs r1, #0x10
	movs r2, #0
	bl Text_InsertDrawString
	ldr r3, _0803AD58 @ =0x0810F2F8
	adds r0, r4, #0
	movs r1, #0x5e
	movs r2, #0
	bl Text_InsertDrawString
	ldr r3, _0803AD5C @ =0x0810F300
	adds r0, r4, #0
	movs r1, #0x84
	movs r2, #0
	bl Text_InsertDrawString
	ldr r3, _0803AD60 @ =0x0810F308
	adds r0, r4, #0
	movs r1, #0x9c
	movs r2, #0
	bl Text_InsertDrawString
	ldr r1, _0803AD64 @ =0x02021C52
	adds r0, r4, #0
	bl PutText
	ldr r0, _0803AD68 @ =0x0203C838
	bl sub_80864CC
	bl sub_803A748
	ldr r1, _0803AD6C @ =gDispIo
	mov ip, r1
	movs r0, #0x20
	ldrb r2, [r1, #1]
	orrs r0, r2
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	mov r0, ip
	adds r0, #0x2d
	movs r2, #0
	mov r8, r2
	mov r1, r8
	strb r1, [r0]
	adds r0, #4
	movs r2, #0x38
	mov sl, r2
	mov r1, sl
	strb r1, [r0]
	subs r0, #5
	movs r6, #0xf0
	strb r6, [r0]
	mov r1, ip
	adds r1, #0x30
	movs r0, #0x88
	strb r0, [r1]
	mov r3, ip
	adds r3, #0x34
	movs r2, #1
	ldrb r0, [r3]
	orrs r0, r2
	movs r1, #2
	orrs r0, r1
	movs r5, #4
	orrs r0, r5
	movs r4, #8
	orrs r0, r4
	movs r1, #0x10
	mov sb, r1
	mov r1, sb
	orrs r0, r1
	strb r0, [r3]
	mov r0, ip
	adds r0, #0x2f
	mov r1, r8
	strb r1, [r0]
	mov r1, ip
	adds r1, #0x33
	movs r0, #0x18
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2e
	strb r6, [r0]
	adds r0, #4
	mov r1, sl
	strb r1, [r0]
	mov r6, ip
	adds r6, #0x35
	ldrb r0, [r6]
	orrs r0, r2
	movs r3, #3
	rsbs r3, r3, #0
	ands r0, r3
	orrs r0, r5
	orrs r0, r4
	movs r1, #0x11
	rsbs r1, r1, #0
	ands r0, r1
	strb r0, [r6]
	mov r0, ip
	adds r0, #0x36
	ldrb r1, [r0]
	orrs r2, r1
	ands r2, r3
	orrs r2, r5
	orrs r2, r4
	mov r1, sb
	orrs r2, r1
	strb r2, [r0]
	ldr r0, _0803AD70 @ =0x0203C618
	ldrb r0, [r0]
	str r0, [sp]
	str r7, [sp, #4]
	add r0, sp, #8
	movs r1, #7
	movs r2, #0
	movs r3, #8
	bl sub_803FD40
	ldr r1, [r7, #0x3c]
	lsls r1, r1, #4
	subs r1, #0x18
	movs r0, #0xe
	adds r2, r7, #0
	bl sub_804108C
	str r0, [r7, #0x2c]
	movs r0, #0xf
	bl EnableBgSync
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803AD18: .4byte 0x0810F30D
_0803AD1C: .4byte 0x08108514
_0803AD20: .4byte 0x06000C00
_0803AD24: .4byte 0x08109AC0
_0803AD28: .4byte 0x08109A80
_0803AD2C: .4byte 0x08107820
_0803AD30: .4byte 0x06014800
_0803AD34: .4byte 0x08109648
_0803AD38: .4byte 0x06016000
_0803AD3C: .4byte 0x08109BE0
_0803AD40: .4byte 0x02022C0A
_0803AD44: .4byte 0x0810A318
_0803AD48: .4byte 0x0203C758
_0803AD4C: .4byte 0x0203C708
_0803AD50: .4byte 0x0203C900
_0803AD54: .4byte 0x0810F2EC
_0803AD58: .4byte 0x0810F2F8
_0803AD5C: .4byte 0x0810F300
_0803AD60: .4byte 0x0810F308
_0803AD64: .4byte 0x02021C52
_0803AD68: .4byte 0x0203C838
_0803AD6C: .4byte gDispIo
_0803AD70: .4byte 0x0203C618

	thumb_func_start sub_803AD74
sub_803AD74: @ 0x0803AD74
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	mov r8, r0
	ldr r0, [r4, #0x40]
	adds r0, #1
	str r0, [r4, #0x40]
	cmp r0, #0x3b
	ble _0803AE26
	adds r7, r4, #0
	adds r7, #0x35
	ldrb r1, [r7]
	cmp r1, #5
	bne _0803AD9A
	adds r0, r4, #0
	bl Proc_Break
_0803AD9A:
	adds r5, r4, #0
	adds r5, #0x38
	movs r0, #0
	ldrsb r0, [r5, r0]
	cmp r0, #0
	ble _0803ADD4
	ldrh r0, [r4, #0x36]
	subs r0, #2
	strh r0, [r4, #0x36]
	ldrb r0, [r5]
	subs r0, #1
	strb r0, [r5]
	ldrh r2, [r4, #0x36]
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	ldrh r1, [r4, #0x36]
	adds r1, #0x38
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r0, #0xa
	bl sub_8040AEC
	mov r1, r8
	ldr r0, [r1, #0x30]
	adds r0, #2
	str r0, [r1, #0x30]
	b _0803AE26
_0803ADD4:
	adds r6, r4, #0
	adds r6, #0x34
	ldrb r0, [r7]
	ldrb r1, [r6]
	cmp r0, r1
	beq _0803AE10
	ldrh r0, [r4, #0x36]
	subs r0, #2
	strh r0, [r4, #0x36]
	ldrb r0, [r6]
	subs r0, #1
	strb r0, [r6]
	movs r0, #7
	strb r0, [r5]
	ldrh r2, [r4, #0x36]
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	ldrh r1, [r4, #0x36]
	adds r1, #0x38
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r0, #0xa
	bl sub_8040AEC
	mov r1, r8
	ldr r0, [r1, #0x30]
	adds r0, #2
	str r0, [r1, #0x30]
_0803AE10:
	movs r0, #0
	ldrsb r0, [r5, r0]
	cmp r0, #0
	bne _0803AE26
	ldrb r6, [r6]
	ldrb r7, [r7]
	cmp r6, r7
	bne _0803AE26
	adds r0, r4, #0
	bl Proc_Break
_0803AE26:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_803AE30
sub_803AE30: @ 0x0803AE30
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0803AE54 @ =gKeySt
	ldr r1, [r0]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0803AE4E
	movs r0, #0
	bl FadeBgmOut
	adds r0, r4, #0
	bl Proc_Break
_0803AE4E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803AE54: .4byte gKeySt

	thumb_func_start sub_803AE58
sub_803AE58: @ 0x0803AE58
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0803AE6C @ =0x085CA364
	bl SpawnProcLocking
	str r4, [r0, #0x3c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803AE6C: .4byte 0x085CA364

	thumb_func_start sub_803AE70
sub_803AE70: @ 0x0803AE70
	ldr r1, _0803AE8C @ =0x0203C618
	adds r1, #0xec
	ldrb r2, [r1]
	lsls r1, r2, #0x1f
	lsrs r1, r1, #0x1f
	strb r1, [r0]
	lsls r1, r2, #0x1e
	lsrs r1, r1, #0x1f
	strb r1, [r0, #1]
	lsls r2, r2, #0x1d
	lsrs r2, r2, #0x1f
	strb r2, [r0, #2]
	bx lr
	.align 2, 0
_0803AE8C: .4byte 0x0203C618

	thumb_func_start sub_803AE90
sub_803AE90: @ 0x0803AE90
	push {r4, r5, lr}
	ldr r5, _0803AECC @ =0x0203C618
	adds r5, #0xec
	movs r4, #1
	ldrb r2, [r0]
	ands r2, r4
	movs r1, #2
	rsbs r1, r1, #0
	ldrb r3, [r5]
	ands r1, r3
	orrs r1, r2
	ldrb r2, [r0, #1]
	ands r2, r4
	lsls r2, r2, #1
	movs r3, #3
	rsbs r3, r3, #0
	ands r1, r3
	orrs r1, r2
	ldrb r0, [r0, #2]
	ands r4, r0
	lsls r4, r4, #2
	movs r0, #5
	rsbs r0, r0, #0
	ands r1, r0
	orrs r1, r4
	strb r1, [r5]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803AECC: .4byte 0x0203C618

	thumb_func_start sub_803AED0
sub_803AED0: @ 0x0803AED0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	str r1, [sp, #8]
	ldr r1, _0803AF6C @ =0x0810F314
	ldr r2, [r1, #4]
	ldr r1, [r1]
	str r1, [sp]
	str r2, [sp, #4]
	movs r7, #0
	lsls r1, r0, #1
	ldr r2, _0803AF70 @ =0x0810F298
	mov r8, r2
	adds r1, r1, r0
	adds r1, #6
	lsls r1, r1, #5
	mov sl, r1
	adds r2, #4
	lsls r6, r0, #4
	lsls r1, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #2
	adds r2, r2, r1
	mov sb, r2
	adds r5, r1, #0
_0803AF08:
	ldr r4, _0803AF74 @ =0x0203C67C
	adds r4, r6, r4
	adds r0, r4, #0
	bl ClearText
	ldr r1, [sp, #8]
	adds r0, r1, r7
	movs r1, #1
	ands r0, r1
	lsls r0, r0, #2
	add r0, sp
	ldr r1, [r0]
	adds r0, r4, #0
	bl Text_SetColor
	mov r0, r8
	adds r0, #0xc
	adds r0, r5, r0
	ldr r1, [r0]
	adds r0, r4, #0
	bl Text_DrawString
	mov r2, sb
	adds r2, #4
	mov sb, r2
	subs r2, #4
	ldm r2!, {r1}
	add r1, sl
	lsls r1, r1, #1
	ldr r0, _0803AF78 @ =gBg0Tm
	adds r1, r1, r0
	adds r0, r4, #0
	bl PutText
	adds r6, #8
	adds r5, #4
	adds r7, #1
	cmp r7, #1
	ble _0803AF08
	movs r0, #1
	bl EnableBgSync
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803AF6C: .4byte 0x0810F314
_0803AF70: .4byte 0x0810F298
_0803AF74: .4byte 0x0203C67C
_0803AF78: .4byte gBg0Tm

	thumb_func_start sub_803AF7C
sub_803AF7C: @ 0x0803AF7C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	mov r8, r0
	add r6, sp, #0xc
	ldr r1, _0803B0E8 @ =0x0810F31C
	adds r0, r6, #0
	movs r2, #9
	bl memcpy
	bl sub_8036B40
	bl sub_803FA14
	ldr r4, _0803B0EC @ =0x08108514
	movs r0, #1
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r0, _0803B0F0 @ =0x06000C00
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, _0803B0F4 @ =0x08109A80
	movs r1, #0xc0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0803B0F8 @ =0x08107820
	ldr r1, _0803B0FC @ =0x06014800
	bl Decompress
	ldr r0, _0803B100 @ =0x08109A00
	movs r1, #0x98
	lsls r1, r1, #2
	movs r2, #0x80
	bl ApplyPaletteExt
	movs r0, #0
	bl sub_803FB08
	ldr r0, _0803B104 @ =0x0203C758
	bl SetTextFont
	bl ResetTextFont
	bl sub_8036C60
	movs r0, #0
	mov r1, r8
	str r0, [r1, #0x30]
	mov r0, r8
	bl sub_8040744
	mov r2, r8
	str r0, [r2, #0x2c]
	movs r0, #1
	movs r1, #0xfe
	movs r2, #0
	bl SetBgOffset
	add r0, sp, #8
	bl sub_803AE70
	mov r3, r8
	ldr r0, [r3, #0x2c]
	ldr r4, [r3, #0x30]
	movs r2, #0x30
	ldrsh r1, [r3, r2]
	ldr r5, _0803B108 @ =0x0810F298
	mov r3, sp
	adds r3, r3, r4
	adds r3, #8
	lsls r2, r4, #2
	adds r2, r2, r4
	ldrb r3, [r3]
	adds r2, r3, r2
	lsls r2, r2, #2
	adds r3, r5, #4
	adds r2, r2, r3
	ldr r2, [r2]
	lsls r2, r2, #0x13
	asrs r2, r2, #0x10
	lsls r3, r4, #1
	adds r3, r3, r4
	lsls r3, r3, #0x13
	movs r4, #0xc0
	lsls r4, r4, #0xe
	adds r3, r3, r4
	asrs r3, r3, #0x10
	bl sub_8040768
	movs r7, #0
	mov sl, r6
	movs r6, #0xc0
	lsls r6, r6, #1
_0803B044:
	lsls r4, r7, #3
	ldr r0, _0803B10C @ =0x0203C624
	mov sb, r0
	add r4, sb
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	ldr r1, [r5]
	adds r0, r4, #0
	bl Text_DrawString
	ldr r1, _0803B110 @ =0x02021B14
	adds r1, r6, r1
	adds r0, r4, #0
	bl PutText
	mov r0, sp
	adds r0, r0, r7
	adds r0, #8
	ldrb r1, [r0]
	adds r0, r7, #0
	bl sub_803AED0
	adds r6, #0xc0
	adds r5, #0x14
	adds r7, #1
	cmp r7, #2
	ble _0803B044
	ldr r5, _0803B108 @ =0x0810F298
	ldr r0, [r5, #0x18]
	lsls r0, r0, #1
	ldr r4, _0803B114 @ =0x02022544
	adds r0, r0, r4
	movs r1, #0
	bl sub_803A680
	ldr r0, [r5, #0x1c]
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #1
	bl sub_803A680
	mov r1, r8
	ldr r0, [r1, #0x2c]
	movs r1, #6
	bl sub_803FC3C
	mov r0, sb
	subs r0, #0xc
	ldrb r0, [r0]
	str r0, [sp]
	mov r2, r8
	ldr r0, [r2, #0x2c]
	str r0, [sp, #4]
	mov r0, sl
	movs r1, #9
	movs r2, #0
	movs r3, #8
	bl sub_803FD40
	mov r3, r8
	ldr r0, [r3, #0x30]
	ldr r4, _0803B118 @ =0x000006D4
	adds r0, r0, r4
	movs r1, #1
	bl sub_8036BFC
	movs r0, #0xf
	bl EnableBgSync
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803B0E8: .4byte 0x0810F31C
_0803B0EC: .4byte 0x08108514
_0803B0F0: .4byte 0x06000C00
_0803B0F4: .4byte 0x08109A80
_0803B0F8: .4byte 0x08107820
_0803B0FC: .4byte 0x06014800
_0803B100: .4byte 0x08109A00
_0803B104: .4byte 0x0203C758
_0803B108: .4byte 0x0810F298
_0803B10C: .4byte 0x0203C624
_0803B110: .4byte 0x02021B14
_0803B114: .4byte 0x02022544
_0803B118: .4byte 0x000006D4

	thumb_func_start sub_803B11C
sub_803B11C: @ 0x0803B11C
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r4, #0
	movs r7, #0
	ldr r5, _0803B238 @ =gKeySt
	ldr r1, [r5]
	movs r0, #2
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0803B146
	movs r0, #1
	bl sub_8036D08
	ldr r0, _0803B23C @ =0x0203C704
	bl sub_80864F4
	adds r0, r6, #0
	bl Proc_Break
_0803B146:
	mov r0, sp
	bl sub_803AE70
	ldr r1, [r5]
	movs r0, #0x40
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _0803B164
	ldr r0, [r6, #0x30]
	cmp r0, #0
	beq _0803B164
	subs r0, #1
	str r0, [r6, #0x30]
	movs r4, #1
_0803B164:
	ldr r2, _0803B238 @ =gKeySt
	ldr r1, [r2]
	movs r0, #0x80
	ldrh r1, [r1, #6]
	ands r0, r1
	adds r5, r2, #0
	cmp r0, #0
	beq _0803B184
	ldr r0, [r6, #0x30]
	cmp r0, #1
	bgt _0803B184
	adds r0, #1
	str r0, [r6, #0x30]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_0803B184:
	ldr r1, [r5]
	movs r0, #0x20
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0803B1AC
	ldr r0, [r6, #0x30]
	mov r1, sp
	adds r3, r1, r0
	ldrb r1, [r3]
	subs r1, #1
	movs r2, #1
	ands r1, r2
	strb r1, [r3]
	ldrb r1, [r3]
	bl sub_803AED0
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_0803B1AC:
	ldr r1, [r5]
	movs r0, #0x10
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0803B1D4
	ldr r0, [r6, #0x30]
	mov r2, sp
	adds r3, r2, r0
	ldrb r1, [r3]
	adds r1, #1
	movs r2, #1
	ands r1, r2
	strb r1, [r3]
	ldrb r1, [r3]
	bl sub_803AED0
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_0803B1D4:
	mov r0, sp
	bl sub_803AE90
	cmp r4, #0
	beq _0803B22E
	movs r0, #3
	bl sub_8036D08
	ldr r5, [r6, #0x30]
	cmp r5, #1
	bne _0803B1EE
	movs r7, #2
	rsbs r7, r7, #0
_0803B1EE:
	ldr r0, [r6, #0x2c]
	lsls r1, r5, #0x10
	asrs r1, r1, #0x10
	ldr r3, _0803B240 @ =0x0810F298
	mov r2, sp
	adds r4, r2, r5
	lsls r2, r5, #2
	adds r2, r2, r5
	ldrb r4, [r4]
	adds r2, r4, r2
	lsls r2, r2, #2
	adds r3, #4
	adds r2, r2, r3
	ldr r2, [r2]
	adds r2, r2, r7
	lsls r2, r2, #0x13
	asrs r2, r2, #0x10
	lsls r3, r5, #1
	adds r3, r3, r5
	lsls r3, r3, #0x13
	movs r4, #0xc0
	lsls r4, r4, #0xe
	adds r3, r3, r4
	asrs r3, r3, #0x10
	bl sub_8040768
	ldr r0, [r6, #0x30]
	ldr r1, _0803B244 @ =0x000006D4
	adds r0, r0, r1
	movs r1, #1
	bl sub_8036BFC
_0803B22E:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803B238: .4byte gKeySt
_0803B23C: .4byte 0x0203C704
_0803B240: .4byte 0x0810F298
_0803B244: .4byte 0x000006D4

	thumb_func_start sub_803B248
sub_803B248: @ 0x0803B248
	push {r4, r5, r6, lr}
	sub sp, #0x28
	adds r2, r0, #0
	adds r3, r1, #0
	mov r0, sp
	ldr r1, _0803B27C @ =0x0810F328
	ldm r1!, {r4, r5, r6}
	stm r0!, {r4, r5, r6}
	ldm r1!, {r4, r5, r6}
	stm r0!, {r4, r5, r6}
	ldm r1!, {r4, r5, r6}
	stm r0!, {r4, r5, r6}
	ldr r1, [r1]
	str r1, [r0]
	cmp r3, #0
	bne _0803B284
	adds r0, r2, #0
	adds r0, #0x58
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0803B298
	ldr r0, _0803B280 @ =0x000006C4
	b _0803B2A4
	.align 2, 0
_0803B27C: .4byte 0x0810F328
_0803B280: .4byte 0x000006C4
_0803B284:
	adds r0, r2, #0
	adds r0, #0x58
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0803B298
	movs r0, #1
	rsbs r0, r0, #0
	b _0803B2A4
_0803B298:
	ldr r0, [r2, #0x48]
	lsls r0, r0, #1
	adds r0, r0, r3
	lsls r0, r0, #2
	add r0, sp
	ldr r0, [r0]
_0803B2A4:
	add sp, #0x28
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_803B2AC
sub_803B2AC: @ 0x0803B2AC
	push {r4, lr}
	movs r4, #0
_0803B2B0:
	adds r0, r4, #0
	bl sub_808525C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803B2CC
	adds r0, r4, #0
	bl sub_8085290
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803B2CC
	movs r0, #1
	b _0803B2D4
_0803B2CC:
	adds r4, #1
	cmp r4, #2
	ble _0803B2B0
	movs r0, #0
_0803B2D4:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_803B2DC
sub_803B2DC: @ 0x0803B2DC
	push {lr}
	bl sub_803B2AC
	ldr r1, _0803B308 @ =0x0203C618
	strb r0, [r1, #0xa]
	ldr r1, _0803B30C @ =0x0203C920
	movs r2, #0
	adds r0, r1, #0
	adds r0, #0x1e
_0803B2EE:
	strh r2, [r0]
	subs r0, #2
	cmp r0, r1
	bge _0803B2EE
	movs r1, #0
	ldr r3, _0803B310 @ =0x030013E0
	ldr r2, _0803B314 @ =0x030013E4
	ldr r0, _0803B318 @ =0x0203C940
	str r1, [r0]
	str r1, [r2]
	str r1, [r3]
	pop {r0}
	bx r0
	.align 2, 0
_0803B308: .4byte 0x0203C618
_0803B30C: .4byte 0x0203C920
_0803B310: .4byte 0x030013E0
_0803B314: .4byte 0x030013E4
_0803B318: .4byte 0x0203C940

	thumb_func_start sub_803B31C
sub_803B31C: @ 0x0803B31C
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	adds r6, r0, #0
	ldr r1, _0803B3B0 @ =0x0810F35A
	add r0, sp, #8
	movs r2, #5
	bl memcpy
	ldr r4, _0803B3B4 @ =0x0203C704
	adds r0, r4, #0
	bl sub_8086530
	ldrb r4, [r4]
	lsls r0, r4, #0x1c
	lsrs r0, r0, #0x1f
	adds r5, r6, #0
	adds r5, #0x59
	movs r4, #0
	strb r0, [r5]
	bl sub_803FA14
	ldr r0, _0803B3B8 @ =0x08106CC8
	ldr r1, _0803B3BC @ =0x06014800
	bl Decompress
	ldr r0, _0803B3C0 @ =0x081099A0
	movs r1, #0x98
	lsls r1, r1, #2
	movs r2, #0x60
	bl ApplyPaletteExt
	movs r0, #0
	movs r1, #4
	bl sub_803FAA4
	ldr r0, _0803B3C4 @ =0x0203C758
	bl SetTextFont
	bl InitSystemTextFont
	bl ResetTextFont
	bl sub_8036C60
	str r4, [r6, #0x4c]
	bl sub_8086558
	adds r2, r6, #0
	adds r2, #0x58
	strb r0, [r2]
	adds r1, r6, #0
	adds r1, #0x40
	movs r0, #1
	strb r0, [r1]
	movs r1, #0
	ldrsb r1, [r2, r1]
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r1, r0, #0x1f
	adds r0, r6, #0
	adds r0, #0x41
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	movs r0, #0
	ldrsb r0, [r5, r0]
	cmp r0, #0
	bne _0803B3C8
	movs r1, #0
	movs r0, #3
	b _0803B3CC
	.align 2, 0
_0803B3B0: .4byte 0x0810F35A
_0803B3B4: .4byte 0x0203C704
_0803B3B8: .4byte 0x08106CC8
_0803B3BC: .4byte 0x06014800
_0803B3C0: .4byte 0x081099A0
_0803B3C4: .4byte 0x0203C758
_0803B3C8:
	movs r1, #1
	movs r0, #4
_0803B3CC:
	str r0, [r6, #0x50]
	adds r0, r6, #0
	adds r0, #0x44
	strb r1, [r0]
	ldr r0, _0803B454 @ =0x0203C618
	ldrb r0, [r0, #1]
	str r0, [r6, #0x48]
	adds r2, r6, #0
	adds r2, #0x40
	adds r0, r2, r0
	movs r1, #2
	strb r1, [r0]
	movs r4, #4
	adds r7, r2, #0
	adds r5, r6, #0
	adds r5, #0x3c
_0803B3EC:
	lsls r3, r4, #0x18
	lsrs r3, r3, #0x18
	adds r0, r7, r4
	ldrb r0, [r0]
	str r0, [sp]
	adds r0, r6, #0
	movs r1, #0xb0
	movs r2, #0xa0
	bl sub_8040014
	str r0, [r5]
	subs r5, #4
	subs r4, #1
	cmp r4, #0
	bge _0803B3EC
	ldr r0, [r6, #0x2c]
	movs r1, #0
	bl sub_803FC3C
	movs r4, #0
	str r4, [sp]
	ldr r0, [r6, #0x2c]
	str r0, [sp, #4]
	add r0, sp, #8
	movs r1, #5
	movs r2, #0
	movs r3, #0xa8
	bl sub_803FD40
	ldr r0, _0803B458 @ =0x085CA404
	bl SetFaceConfig
	movs r0, #2
	str r0, [sp]
	movs r0, #3
	movs r1, #0xc0
	movs r2, #0xd0
	movs r3, #0x50
	bl StartFace
	str r4, [r6, #0x54]
	movs r0, #0x39
	movs r1, #0
	bl StartBgm
	bl sub_803CF9C
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803B454: .4byte 0x0203C618
_0803B458: .4byte 0x085CA404

	thumb_func_start sub_803B45C
sub_803B45C: @ 0x0803B45C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r7, r0, #0
	movs r1, #0x50
	rsbs r1, r1, #0
	ldr r5, _0803B504 @ =0x0810F350
	ldrb r2, [r5]
	ldr r3, [r7, #0x54]
	movs r4, #0x20
	str r4, [sp]
	movs r0, #4
	bl Interpolate
	adds r6, r0, #0
	ldrb r2, [r5, #1]
	ldr r3, [r7, #0x54]
	str r4, [sp]
	movs r0, #5
	movs r1, #0xa0
	bl Interpolate
	mov sb, r0
	movs r5, #4
	lsls r6, r6, #0x10
	mov r8, r6
	lsls r6, r0, #0x10
	adds r4, r7, #0
	adds r4, #0x3c
_0803B49A:
	ldr r0, [r4]
	mov r2, r8
	asrs r1, r2, #0x10
	asrs r2, r6, #0x10
	bl sub_8040098
	subs r4, #4
	subs r5, #1
	cmp r5, #0
	bge _0803B49A
	mov r1, sb
	adds r1, #8
	movs r0, #0
	bl sub_803FE28
	ldr r0, [r7, #0x54]
	cmp r0, #0x1f
	ble _0803B4F0
	movs r0, #0
	str r0, [r7, #0x54]
	adds r0, r7, #0
	movs r1, #0
	bl sub_803B248
	movs r1, #0
	bl sub_8036BFC
	adds r0, r7, #0
	movs r1, #1
	bl sub_803B248
	movs r1, #1
	bl sub_8036BFC
	ldr r0, _0803B504 @ =0x0810F350
	ldrb r1, [r0, #1]
	adds r1, #8
	movs r0, #0
	bl sub_803FE28
	adds r0, r7, #0
	bl Proc_Break
_0803B4F0:
	ldr r0, [r7, #0x54]
	adds r0, #1
	str r0, [r7, #0x54]
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803B504: .4byte 0x0810F350

	thumb_func_start sub_803B508
sub_803B508: @ 0x0803B508
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, [r5, #0x48]
	lsls r0, r0, #1
	movs r7, #4
	ldr r1, _0803B59C @ =0x0810F350
	movs r2, #0x10
	mov r8, r2
	adds r6, r1, #0
	adds r6, #8
	adds r4, r0, r1
	mov sl, r4
	adds r0, #1
	adds r0, r0, r1
	mov sb, r0
_0803B530:
	ldrb r2, [r6]
	ldr r3, [r5, #0x54]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	mov r4, sl
	ldrb r1, [r4]
	bl Interpolate
	adds r4, r0, #0
	mov r0, sb
	ldrb r1, [r0]
	ldrb r2, [r6, #1]
	ldr r3, [r5, #0x54]
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	bl Interpolate
	adds r2, r0, #0
	lsls r1, r7, #2
	adds r0, r5, #0
	adds r0, #0x2c
	adds r0, r0, r1
	ldr r0, [r0]
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	adds r1, r4, #0
	bl sub_8040098
	subs r6, #2
	subs r7, #1
	cmp r7, #0
	bge _0803B530
	ldr r0, [r5, #0x54]
	cmp r0, #0xf
	ble _0803B584
	adds r0, r5, #0
	bl Proc_Break
_0803B584:
	ldr r0, [r5, #0x54]
	adds r0, #1
	str r0, [r5, #0x54]
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803B59C: .4byte 0x0810F350

	thumb_func_start sub_803B5A0
sub_803B5A0: @ 0x0803B5A0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r6, r0, #0
	ldr r1, _0803B63C @ =0x0810F35A
	add r0, sp, #8
	movs r2, #5
	bl memcpy
	ldr r4, _0803B640 @ =0x0203C704
	adds r0, r4, #0
	bl sub_8086530
	ldrb r4, [r4]
	lsls r0, r4, #0x1c
	lsrs r0, r0, #0x1f
	adds r5, r6, #0
	adds r5, #0x59
	movs r4, #0
	strb r0, [r5]
	bl sub_803FA14
	ldr r0, _0803B644 @ =0x08106CC8
	ldr r1, _0803B648 @ =0x06014800
	bl Decompress
	ldr r0, _0803B64C @ =0x081099A0
	movs r1, #0x98
	lsls r1, r1, #2
	movs r2, #0x60
	bl ApplyPaletteExt
	movs r0, #0
	movs r1, #4
	bl sub_803FAA4
	ldr r0, _0803B650 @ =0x0203C758
	bl SetTextFont
	bl InitSystemTextFont
	bl ResetTextFont
	bl sub_8036C60
	str r4, [r6, #0x4c]
	bl sub_8086558
	adds r2, r6, #0
	adds r2, #0x58
	strb r0, [r2]
	adds r1, r6, #0
	adds r1, #0x40
	movs r0, #1
	strb r0, [r1]
	movs r1, #0
	ldrsb r1, [r2, r1]
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r1, r0, #0x1f
	adds r0, r6, #0
	adds r0, #0x41
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	movs r0, #0
	ldrsb r0, [r5, r0]
	cmp r0, #0
	bne _0803B654
	movs r1, #0
	movs r0, #3
	b _0803B658
	.align 2, 0
_0803B63C: .4byte 0x0810F35A
_0803B640: .4byte 0x0203C704
_0803B644: .4byte 0x08106CC8
_0803B648: .4byte 0x06014800
_0803B64C: .4byte 0x081099A0
_0803B650: .4byte 0x0203C758
_0803B654:
	movs r1, #1
	movs r0, #4
_0803B658:
	str r0, [r6, #0x50]
	adds r0, r6, #0
	adds r0, #0x44
	strb r1, [r0]
	ldr r0, _0803B724 @ =0x0203C618
	ldrb r0, [r0, #1]
	str r0, [r6, #0x48]
	adds r2, r6, #0
	adds r2, #0x40
	adds r0, r2, r0
	movs r1, #2
	strb r1, [r0]
	ldr r1, [r6, #0x48]
	lsls r1, r1, #1
	movs r5, #4
	mov sb, r2
	ldr r2, _0803B728 @ =0x0810F350
	adds r0, r1, #1
	adds r0, r0, r2
	mov r8, r0
	adds r4, r6, #0
	adds r4, #0x3c
	adds r1, r1, r2
	mov sl, r1
_0803B688:
	lsls r3, r5, #0x18
	lsrs r3, r3, #0x18
	mov r1, sb
	adds r0, r1, r5
	ldrb r0, [r0]
	str r0, [sp]
	adds r0, r6, #0
	mov r2, sl
	ldrb r1, [r2]
	mov r7, r8
	ldrb r2, [r7]
	bl sub_8040014
	str r0, [r4]
	subs r4, #4
	subs r5, #1
	cmp r5, #0
	bge _0803B688
	ldr r0, [r6, #0x2c]
	movs r1, #0
	bl sub_803FC3C
	ldr r1, _0803B728 @ =0x0810F350
	ldr r0, [r6, #0x48]
	lsls r0, r0, #1
	adds r0, #1
	adds r0, r0, r1
	ldrb r3, [r0]
	adds r3, #8
	movs r4, #0
	str r4, [sp]
	ldr r0, [r6, #0x2c]
	str r0, [sp, #4]
	add r0, sp, #8
	movs r1, #5
	movs r2, #0
	bl sub_803FD40
	ldr r0, _0803B72C @ =0x085CA424
	bl SetFaceConfig
	movs r0, #2
	str r0, [sp]
	movs r0, #3
	movs r1, #0xc0
	movs r2, #0xd0
	movs r3, #0x50
	bl StartFace
	adds r0, r6, #0
	movs r1, #0
	bl sub_803B248
	movs r1, #0
	bl sub_8036BFC
	adds r0, r6, #0
	movs r1, #1
	bl sub_803B248
	movs r1, #1
	bl sub_8036BFC
	bl sub_803CF9C
	movs r0, #0x39
	movs r1, #0
	bl StartBgm
	str r4, [r6, #0x54]
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803B724: .4byte 0x0203C618
_0803B728: .4byte 0x0810F350
_0803B72C: .4byte 0x085CA424

	thumb_func_start sub_803B730
sub_803B730: @ 0x0803B730
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	lsls r1, r1, #0x18
	lsrs r6, r1, #0x18
	ldr r0, [r5, #0x48]
	cmp r0, #1
	bne _0803B7B0
	ldr r0, _0803B828 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x20
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0803B77A
	ldr r1, _0803B82C @ =0x0203C618
	ldrb r0, [r1, #5]
	subs r0, #1
	strb r0, [r1, #5]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #2
	bls _0803B762
	movs r0, #2
	strb r0, [r1, #5]
_0803B762:
	ldr r0, [r5, #0x30]
	movs r1, #6
	rsbs r1, r1, #0
	movs r2, #4
	str r2, [sp]
	movs r2, #0x34
	movs r3, #0x1f
	bl sub_8040084
	movs r0, #3
	bl sub_8036D08
_0803B77A:
	ldr r0, _0803B828 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x10
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0803B7B0
	ldr r4, _0803B82C @ =0x0203C618
	ldrb r0, [r4, #5]
	adds r0, #1
	strb r0, [r4, #5]
	ldrb r0, [r4, #5]
	movs r1, #3
	bl __umodsi3
	strb r0, [r4, #5]
	ldr r0, [r5, #0x30]
	movs r1, #0x1f
	str r1, [sp]
	movs r1, #0
	movs r2, #0x3a
	movs r3, #4
	bl sub_8040084
	movs r0, #3
	bl sub_8036D08
_0803B7B0:
	ldr r1, _0803B828 @ =gKeySt
	ldr r2, [r1]
	ldrh r3, [r2, #6]
	movs r0, #0x40
	ands r0, r3
	adds r4, r1, #0
	cmp r0, #0
	beq _0803B7EA
	ldr r1, [r5, #0x48]
	ldr r0, [r5, #0x4c]
	cmp r1, r0
	bgt _0803B7CE
	ldrh r2, [r2, #8]
	cmp r3, r2
	bne _0803B7EA
_0803B7CE:
	subs r2, r6, #1
	adds r1, r5, #0
	adds r1, #0x40
_0803B7D4:
	ldr r0, [r5, #0x48]
	subs r0, #1
	str r0, [r5, #0x48]
	cmp r0, #0
	bge _0803B7E0
	str r2, [r5, #0x48]
_0803B7E0:
	ldr r0, [r5, #0x48]
	adds r0, r1, r0
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803B7D4
_0803B7EA:
	ldr r2, [r4]
	ldrh r3, [r2, #6]
	movs r0, #0x80
	ands r0, r3
	cmp r0, #0
	beq _0803B81E
	ldr r1, [r5, #0x48]
	ldr r0, [r5, #0x50]
	cmp r1, r0
	blt _0803B804
	ldrh r2, [r2, #8]
	cmp r3, r2
	bne _0803B81E
_0803B804:
	adds r4, r5, #0
	adds r4, #0x40
_0803B808:
	ldr r0, [r5, #0x48]
	adds r0, #1
	str r0, [r5, #0x48]
	adds r1, r6, #0
	bl __modsi3
	str r0, [r5, #0x48]
	adds r0, r4, r0
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803B808
_0803B81E:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803B828: .4byte gKeySt
_0803B82C: .4byte 0x0203C618

	thumb_func_start sub_803B830
sub_803B830: @ 0x0803B830
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, [r4, #0x48]
	ldr r0, _0803B928 @ =0x085C99F8
	bl sub_8036D60
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803B860
	ldr r1, _0803B92C @ =0x0203C618
	ldr r0, [r4, #0x48]
	strb r0, [r1]
	strb r0, [r1, #1]
	movs r0, #3
	bl EndFaceById
	ldr r0, _0803B930 @ =0x085CA638
	adds r1, r4, #0
	bl SpawnProcLocking
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
_0803B860:
	adds r0, r4, #0
	movs r1, #5
	bl sub_803B730
	ldr r0, [r4, #0x48]
	cmp r5, r0
	beq _0803B8DA
	movs r0, #3
	bl sub_8036D08
	lsls r0, r5, #2
	adds r1, r4, #0
	adds r1, #0x2c
	adds r0, r1, r0
	ldr r3, [r0]
	adds r2, r3, #0
	adds r2, #0x2e
	movs r0, #1
	strb r0, [r2]
	ldr r0, [r4, #0x48]
	lsls r0, r0, #2
	adds r1, r1, r0
	ldr r3, [r1]
	adds r1, r3, #0
	adds r1, #0x2e
	movs r0, #2
	strb r0, [r1]
	movs r0, #0x2a
	ldrsh r1, [r3, r0]
	movs r0, #0x2c
	ldrsh r2, [r3, r0]
	adds r0, r3, #0
	bl sub_804085C
	adds r0, r4, #0
	movs r1, #0
	bl sub_803B248
	movs r1, #0
	bl sub_8036BFC
	adds r0, r4, #0
	movs r1, #1
	bl sub_803B248
	movs r1, #1
	bl sub_8036BFC
	ldr r1, _0803B934 @ =0x0810F350
	ldr r0, [r4, #0x48]
	lsls r0, r0, #1
	adds r0, #1
	adds r0, r0, r1
	ldrb r1, [r0]
	adds r1, #8
	movs r0, #0
	bl sub_803FE0C
	ldr r0, [r4, #0x48]
	bl sub_803FE48
_0803B8DA:
	ldr r5, _0803B938 @ =gKeySt
	ldr r1, [r5]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0803B8FE
	movs r0, #0
	str r0, [r4, #0x54]
	movs r0, #2
	bl sub_8036D08
	ldr r1, _0803B92C @ =0x0203C618
	ldr r0, [r4, #0x48]
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0803B8FE:
	ldr r1, [r5]
	movs r0, #2
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0803B922
	movs r0, #1
	bl sub_8036D08
	movs r0, #2
	bl FadeBgmOut
	ldr r1, _0803B92C @ =0x0203C618
	movs r0, #0xff
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0803B922:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803B928: .4byte 0x085C99F8
_0803B92C: .4byte 0x0203C618
_0803B930: .4byte 0x085CA638
_0803B934: .4byte 0x0810F350
_0803B938: .4byte gKeySt

	thumb_func_start sub_803B93C
sub_803B93C: @ 0x0803B93C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r5, r0, #0
	ldr r4, _0803B9E8 @ =0x0203C618
	ldrb r0, [r4]
	cmp r0, #0xff
	bne _0803B958
	adds r0, r5, #0
	bl Proc_Break
_0803B958:
	ldrb r2, [r4]
	ldr r0, [r5, #0x54]
	cmp r0, #0x10
	bgt _0803B9C6
	movs r0, #4
	mov r8, r0
	lsls r2, r2, #1
	ldr r1, _0803B9EC @ =0x0810F350
	movs r4, #0x10
	mov sb, r4
	adds r0, r2, #1
	adds r0, r0, r1
	str r0, [sp, #4]
	adds r6, r5, #0
	adds r6, #0x3c
	adds r7, r1, #0
	adds r7, #8
	adds r2, r2, r1
	mov sl, r2
_0803B97E:
	ldrb r1, [r7]
	ldr r3, [r5, #0x54]
	mov r0, sb
	str r0, [sp]
	movs r0, #4
	mov r4, sl
	ldrb r2, [r4]
	bl Interpolate
	adds r4, r0, #0
	ldrb r1, [r7, #1]
	ldr r0, [sp, #4]
	ldrb r2, [r0]
	ldr r3, [r5, #0x54]
	mov r0, sb
	str r0, [sp]
	movs r0, #4
	bl Interpolate
	adds r2, r0, #0
	ldr r0, [r6]
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	adds r1, r4, #0
	bl sub_8040098
	subs r6, #4
	subs r7, #2
	movs r4, #1
	rsbs r4, r4, #0
	add r8, r4
	mov r0, r8
	cmp r0, #0
	bge _0803B97E
_0803B9C6:
	ldr r0, [r5, #0x54]
	cmp r0, #0x20
	ble _0803B9D2
	adds r0, r5, #0
	bl Proc_Break
_0803B9D2:
	ldr r0, [r5, #0x54]
	adds r0, #1
	str r0, [r5, #0x54]
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803B9E8: .4byte 0x0203C618
_0803B9EC: .4byte 0x0810F350

	thumb_func_start sub_803B9F0
sub_803B9F0: @ 0x0803B9F0
	push {r4, r5, r6, lr}
	sub sp, #0x14
	adds r6, r0, #0
	mov r1, sp
	ldr r0, _0803BA40 @ =0x0810F360
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3}
	stm r1!, {r2, r3}
	movs r0, #3
	bl EndFaceById
	adds r5, r6, #0
	adds r5, #0x2c
	movs r4, #4
_0803BA0E:
	ldm r5!, {r0}
	bl Proc_End
	subs r4, #1
	cmp r4, #0
	bge _0803BA0E
	ldr r1, _0803BA44 @ =0x0203C618
	ldrb r2, [r1]
	adds r0, r2, #0
	cmp r0, #0xff
	bne _0803BA4C
	bl EndBmVSync
	bl sub_803FB74
	bl sub_8036974
	ldr r0, _0803BA48 @ =ProcScr_DebugMonitor
	bl Proc_EndEach
	adds r0, r6, #0
	bl Proc_End
	b _0803BA5C
	.align 2, 0
_0803BA40: .4byte 0x0810F360
_0803BA44: .4byte 0x0203C618
_0803BA48: .4byte ProcScr_DebugMonitor
_0803BA4C:
	strb r2, [r1, #1]
	ldrb r1, [r1]
	lsls r0, r1, #2
	add r0, sp
	ldr r0, [r0]
	adds r1, r6, #0
	bl SpawnProcLocking
_0803BA5C:
	add sp, #0x14
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_803BA64
sub_803BA64: @ 0x0803BA64
	push {r4, lr}
	adds r4, r0, #0
	bl LoadUiFrameGraphics
	ldr r0, _0803BAC8 @ =0x0203C758
	ldr r1, _0803BACC @ =0x06001800
	movs r2, #0xc0
	movs r3, #0
	bl InitTextFont
	movs r0, #5
	bl sub_808525C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0803BA88
	bl sub_80860A4
_0803BA88:
	ldr r1, _0803BAD0 @ =0x0203C618
	movs r0, #0
	strb r0, [r1, #5]
	strb r0, [r1, #3]
	strb r0, [r1, #1]
	bl sub_8036964
	bl sub_803CE7C
	bl StartBmVSync
	ldr r1, _0803BAD4 @ =gPlaySt
	movs r0, #0xdf
	ldrb r2, [r1, #0x14]
	ands r0, r2
	strb r0, [r1, #0x14]
	movs r0, #0xd
	rsbs r0, r0, #0
	ldrb r2, [r1, #0x1d]
	ands r0, r2
	strb r0, [r1, #0x1d]
	ldr r0, _0803BAD8 @ =0x085CA444
	adds r1, r4, #0
	bl SpawnProcLocking
	ldr r0, _0803BADC @ =ProcScr_DebugMonitor
	movs r1, #3
	bl SpawnProc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803BAC8: .4byte 0x0203C758
_0803BACC: .4byte 0x06001800
_0803BAD0: .4byte 0x0203C618
_0803BAD4: .4byte gPlaySt
_0803BAD8: .4byte 0x085CA444
_0803BADC: .4byte ProcScr_DebugMonitor

	thumb_func_start sub_803BAE0
sub_803BAE0: @ 0x0803BAE0
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r4, #0
	ldr r0, _0803BB08 @ =0x085C9940
	bl Proc_Find
	cmp r0, #0
	beq _0803BB10
	ldr r0, _0803BB0C @ =gKeySt
	ldr r1, [r0]
	movs r0, #2
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0803BBEC
	adds r0, r5, #0
	movs r1, #4
	b _0803BBA8
	.align 2, 0
_0803BB08: .4byte 0x085C9940
_0803BB0C: .4byte gKeySt
_0803BB10:
	ldr r0, _0803BB30 @ =0x085C98F4
	ldr r2, [r0]
	movs r0, #6
	ldrsb r0, [r2, r0]
	cmp r0, #1
	bgt _0803BB2A
	adds r1, r0, #0
	adds r0, r2, #0
	adds r0, #0xb
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #2
	bne _0803BB34
_0803BB2A:
	adds r0, r5, #0
	movs r1, #0
	b _0803BBA8
	.align 2, 0
_0803BB30: .4byte 0x085C98F4
_0803BB34:
	movs r1, #0
	adds r2, #0x1a
_0803BB38:
	adds r0, r2, r1
	ldrb r0, [r0]
	cmp r0, #0x3c
	bls _0803BB42
	adds r4, #1
_0803BB42:
	adds r1, #1
	cmp r1, #3
	ble _0803BB38
	bl sub_8035CF8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803BB60
	ldr r6, _0803BB68 @ =0x085C98F4
	ldr r2, [r6]
	ldrb r0, [r2, #0x1e]
	cmp r0, #0x3c
	bhi _0803BB60
	cmp r4, #0
	beq _0803BB6C
_0803BB60:
	adds r0, r5, #0
	movs r1, #0
	b _0803BBA8
	.align 2, 0
_0803BB68: .4byte 0x085C98F4
_0803BB6C:
	ldr r0, _0803BBB0 @ =0x030044E0
	movs r1, #0x1c
	strb r1, [r0]
	ldrb r1, [r2, #6]
	strb r1, [r0, #1]
	ldrb r1, [r2]
	strh r1, [r0, #2]
	movs r1, #0xa
	bl sub_8035DC8
	ldr r0, [r6]
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0803BBB4
	bl sub_808667C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0803BBB4
	mov r1, sp
	movs r0, #1
	strb r0, [r1]
	mov r0, sp
	movs r1, #4
	bl sub_8036208
	adds r0, r5, #0
	movs r1, #3
_0803BBA8:
	bl EventGotoLabel
_0803BBAC:
	movs r0, #0
	b _0803BBEE
	.align 2, 0
_0803BBB0: .4byte 0x030044E0
_0803BBB4:
	ldr r4, _0803BBE8 @ =0x085C98F4
	ldr r1, [r4]
	movs r0, #3
	ldrb r2, [r1, #9]
	ands r0, r2
	cmp r0, #3
	bne _0803BBEC
	strb r0, [r1, #9]
	bl sub_8036608
	ldr r1, [r4]
	movs r2, #0
	movs r0, #6
	strh r0, [r1, #4]
	strb r2, [r1, #0x1e]
	ldr r0, [r4]
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0803BBAC
	adds r0, r5, #0
	movs r1, #1
	bl EventGotoLabel
	b _0803BBAC
	.align 2, 0
_0803BBE8: .4byte 0x085C98F4
_0803BBEC:
	movs r0, #1
_0803BBEE:
	add sp, #4
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_803BBF8
sub_803BBF8: @ 0x0803BBF8
	push {lr}
	adds r1, r0, #0
	ldr r0, _0803BC14 @ =0x085C98F4
	ldr r0, [r0]
	ldrb r0, [r0, #9]
	cmp r0, #3
	bls _0803BC0E
	adds r0, r1, #0
	movs r1, #0
	bl EventGotoLabel
_0803BC0E:
	pop {r0}
	bx r0
	.align 2, 0
_0803BC14: .4byte 0x085C98F4

	thumb_func_start sub_803BC18
sub_803BC18: @ 0x0803BC18
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	bl GetTalkChoiceResult
	cmp r0, #1
	bne _0803BC30
	ldr r1, _0803BC2C @ =0x0203C980
	movs r0, #0
	b _0803BC34
	.align 2, 0
_0803BC2C: .4byte 0x0203C980
_0803BC30:
	ldr r1, _0803BC5C @ =0x0203C980
	movs r0, #1
_0803BC34:
	str r0, [r1]
	adds r4, r1, #0
	mov r0, sp
	ldr r1, [r4]
	strb r1, [r0]
	movs r1, #4
	bl sub_8036208
	ldr r0, [r4]
	cmp r0, #0
	beq _0803BC52
	adds r0, r5, #0
	movs r1, #5
	bl EventGotoLabel
_0803BC52:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803BC5C: .4byte 0x0203C980

	thumb_func_start sub_803BC60
sub_803BC60: @ 0x0803BC60
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	movs r4, #0
	movs r1, #0
	ldr r0, _0803BCA8 @ =0x085C98F4
	ldr r0, [r0]
	adds r2, r0, #0
	adds r2, #0x1a
_0803BC72:
	adds r0, r2, r1
	ldrb r0, [r0]
	cmp r0, #0x3c
	bls _0803BC7C
	adds r4, #1
_0803BC7C:
	adds r1, #1
	cmp r1, #3
	ble _0803BC72
	bl sub_8035CF8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803BC9A
	ldr r0, _0803BCA8 @ =0x085C98F4
	ldr r0, [r0]
	ldrb r0, [r0, #0x1e]
	cmp r0, #0x3c
	bhi _0803BC9A
	cmp r4, #0
	beq _0803BCAC
_0803BC9A:
	adds r0, r5, #0
	movs r1, #0
	bl EventGotoLabel
_0803BCA2:
	movs r0, #0
	b _0803BCD0
	.align 2, 0
_0803BCA8: .4byte 0x085C98F4
_0803BCAC:
	add r1, sp, #4
	mov r0, sp
	movs r2, #0
	bl sub_80362B0
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0803BCCE
	mov r0, sp
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803BCA2
	adds r0, r5, #0
	movs r1, #5
	bl EventGotoLabel
	b _0803BCA2
_0803BCCE:
	movs r0, #1
_0803BCD0:
	add sp, #8
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_803BCD8
sub_803BCD8: @ 0x0803BCD8
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	bl ClearText
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0
	adds r3, r5, #0
	bl Text_InsertDrawString
	adds r0, r4, #0
	movs r1, #0x36
	movs r2, #2
	adds r3, r6, #0
	bl Text_InsertDrawNumberOrBlank
	ldr r3, _0803BD18 @ =0x0810F374
	adds r0, r4, #0
	movs r1, #0x3e
	movs r2, #0
	bl Text_InsertDrawString
	ldr r1, _0803BD1C @ =0x02021E26
	adds r0, r4, #0
	bl PutText
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803BD18: .4byte 0x0810F374
_0803BD1C: .4byte 0x02021E26

	thumb_func_start sub_803BD20
sub_803BD20: @ 0x0803BD20
	push {r4, r5, lr}
	sub sp, #0xc
	adds r5, r0, #0
	adds r5, #0x3c
	adds r0, #0x3b
	ldrb r1, [r5]
	ldrb r0, [r0]
	cmp r1, r0
	bhs _0803BD76
	ldr r0, _0803BD80 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0803BD42
	movs r0, #0x7d
	bl m4aSongNumStart
_0803BD42:
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	ldr r0, _0803BD84 @ =0x0203C67C
	ldr r1, _0803BD88 @ =0x0810F378
	ldrb r2, [r5]
	bl sub_803BCD8
	movs r0, #0x80
	lsls r0, r0, #1
	ldr r2, _0803BD8C @ =0x02021EE4
	movs r3, #0xc0
	lsls r3, r3, #7
	movs r1, #0x64
	str r1, [sp]
	ldrb r4, [r5]
	str r4, [sp, #4]
	ldrb r5, [r5]
	subs r1, r1, r5
	str r1, [sp, #8]
	movs r1, #0xe
	bl sub_806E998
	movs r0, #1
	bl EnableBgSync
_0803BD76:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803BD80: .4byte gPlaySt
_0803BD84: .4byte 0x0203C67C
_0803BD88: .4byte 0x0810F378
_0803BD8C: .4byte 0x02021EE4

	thumb_func_start sub_803BD90
sub_803BD90: @ 0x0803BD90
	push {r4, r5, lr}
	sub sp, #0xc
	adds r5, r0, #0
	adds r5, #0x3c
	adds r0, #0x3b
	ldrb r1, [r5]
	ldrb r0, [r0]
	cmp r1, r0
	bhs _0803BDE6
	ldr r0, _0803BDF0 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0803BDB2
	movs r0, #0x7d
	bl m4aSongNumStart
_0803BDB2:
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	ldr r0, _0803BDF4 @ =0x0203C67C
	ldr r1, _0803BDF8 @ =0x0810F380
	ldrb r2, [r5]
	bl sub_803BCD8
	movs r0, #0x80
	lsls r0, r0, #1
	ldr r2, _0803BDFC @ =0x02021EE4
	movs r3, #0xc0
	lsls r3, r3, #7
	movs r1, #0x64
	str r1, [sp]
	ldrb r4, [r5]
	str r4, [sp, #4]
	ldrb r5, [r5]
	subs r1, r1, r5
	str r1, [sp, #8]
	movs r1, #0xe
	bl sub_806E998
	movs r0, #1
	bl EnableBgSync
_0803BDE6:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803BDF0: .4byte gPlaySt
_0803BDF4: .4byte 0x0203C67C
_0803BDF8: .4byte 0x0810F380
_0803BDFC: .4byte 0x02021EE4

	thumb_func_start sub_803BE00
sub_803BE00: @ 0x0803BE00
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r0, _0803BE44 @ =0x0203C758
	bl SetTextFont
	bl InitSystemTextFont
	ldr r0, _0803BE48 @ =0x085C98F4
	ldr r0, [r0]
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0803BE5C
	ldr r1, _0803BE4C @ =ReadSramFast
	ldr r0, _0803BE50 @ =0x0E007000
	ldr r4, _0803BE54 @ =0x02000000
	movs r5, #0x80
	lsls r5, r5, #5
	ldr r3, [r1]
	adds r1, r4, #0
	adds r2, r5, #0
	bl _call_via_r3
	ldr r2, _0803BE58 @ =sub_803BD20
	str r6, [sp]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #0
	bl sub_8036804
	b _0803BE66
	.align 2, 0
_0803BE44: .4byte 0x0203C758
_0803BE48: .4byte 0x085C98F4
_0803BE4C: .4byte ReadSramFast
_0803BE50: .4byte 0x0E007000
_0803BE54: .4byte 0x02000000
_0803BE58: .4byte sub_803BD20
_0803BE5C:
	ldr r0, _0803BE70 @ =0x02000000
	ldr r1, _0803BE74 @ =sub_803BD90
	adds r2, r6, #0
	bl sub_8036884
_0803BE66:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803BE70: .4byte 0x02000000
_0803BE74: .4byte sub_803BD90

	thumb_func_start sub_803BE78
sub_803BE78: @ 0x0803BE78
	push {lr}
	bl sub_80368B0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803BE88
	movs r0, #1
	b _0803BEB8
_0803BE88:
	ldr r0, _0803BEBC @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0803BE98
	movs r0, #0x7e
	bl m4aSongNumStart
_0803BE98:
	bl InitTalkTextFont
	ldr r0, _0803BEC0 @ =0x085C98F4
	ldr r0, [r0]
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0803BEB6
	ldr r0, _0803BEC4 @ =0x02000000
	ldr r1, _0803BEC8 @ =0x0E007000
	movs r2, #0x80
	lsls r2, r2, #5
	bl WriteAndVerifySramFast
_0803BEB6:
	movs r0, #0
_0803BEB8:
	pop {r1}
	bx r1
	.align 2, 0
_0803BEBC: .4byte gPlaySt
_0803BEC0: .4byte 0x085C98F4
_0803BEC4: .4byte 0x02000000
_0803BEC8: .4byte 0x0E007000

	thumb_func_start sub_803BECC
sub_803BECC: @ 0x0803BECC
	ldr r0, _0803BEDC @ =0x085C98F4
	ldr r2, [r0]
	movs r1, #6
	ldrsb r1, [r2, r1]
	movs r0, #1
	lsls r0, r1
	strb r0, [r2, #0xa]
	bx lr
	.align 2, 0
_0803BEDC: .4byte 0x085C98F4

	thumb_func_start sub_803BEE0
sub_803BEE0: @ 0x0803BEE0
	push {r4, lr}
	ldr r0, _0803BF0C @ =0x0300456C
	movs r2, #0
	movs r1, #0x19
	strb r1, [r0]
	ldr r4, _0803BF10 @ =0x085C98F4
	ldr r1, [r4]
	ldrb r1, [r1, #6]
	strb r1, [r0, #1]
	strh r2, [r0, #2]
	movs r1, #4
	bl sub_8035DC8
	ldr r4, [r4]
	ldrb r0, [r4, #9]
	ldrb r1, [r4, #0xa]
	ands r0, r1
	ldrb r1, [r4, #9]
	cmp r0, r1
	beq _0803BF14
	movs r0, #1
	b _0803BF20
	.align 2, 0
_0803BF0C: .4byte 0x0300456C
_0803BF10: .4byte 0x085C98F4
_0803BF14:
	movs r1, #6
	ldrsb r1, [r4, r1]
	movs r0, #1
	lsls r0, r1
	strb r0, [r4, #0xa]
	movs r0, #0
_0803BF20:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_803BF28
sub_803BF28: @ 0x0803BF28
	push {r4, lr}
	sub sp, #0xc
	movs r0, #6
	bl sub_80412DC
	movs r4, #0
	str r4, [sp]
	movs r0, #0xd
	movs r1, #0xb
	movs r2, #0x10
	movs r3, #6
	bl sub_8041358
	ldr r0, _0803BF7C @ =0x0203C758
	bl SetTextFont
	bl InitSystemTextFont
	ldr r0, _0803BF80 @ =0x0203C67C
	ldr r1, _0803BF84 @ =0x0810F388
	movs r2, #0
	bl sub_803BCD8
	movs r0, #0x80
	lsls r0, r0, #1
	ldr r2, _0803BF88 @ =0x02021EE4
	movs r3, #0xc0
	lsls r3, r3, #7
	movs r1, #0x64
	str r1, [sp]
	str r4, [sp, #4]
	str r1, [sp, #8]
	movs r1, #0xd
	bl sub_806E998
	movs r0, #1
	bl EnableBgSync
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803BF7C: .4byte 0x0203C758
_0803BF80: .4byte 0x0203C67C
_0803BF84: .4byte 0x0810F388
_0803BF88: .4byte 0x02021EE4

	thumb_func_start sub_803BF8C
sub_803BF8C: @ 0x0803BF8C
	ldr r2, _0803BFAC @ =gDispIo
	adds r2, #0x36
	movs r0, #1
	ldrb r1, [r2]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2]
	bx lr
	.align 2, 0
_0803BFAC: .4byte gDispIo

	thumb_func_start sub_803BFB0
sub_803BFB0: @ 0x0803BFB0
	push {r4, r5, lr}
	ldr r4, [r0, #0x14]
	movs r0, #3
	bl EndFaceById
	adds r5, r4, #0
	adds r5, #0x2c
	movs r4, #4
_0803BFC0:
	ldm r5!, {r0}
	bl Proc_End
	subs r4, #1
	cmp r4, #0
	bge _0803BFC0
	bl sub_803FA14
	movs r0, #0
	movs r1, #0
	bl sub_803FAA4
	ldr r0, _0803C000 @ =0x085C98F4
	ldr r1, [r0]
	movs r0, #3
	strb r0, [r1]
	ldr r0, _0803C004 @ =0x0203C758
	bl SetTextFont
	bl InitSystemTextFont
	ldr r0, _0803C008 @ =0x0203C67C
	movs r1, #0xa
	bl InitTextDb
	movs r0, #1
	bl FadeBgmOut
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803C000: .4byte 0x085C98F4
_0803C004: .4byte 0x0203C758
_0803C008: .4byte 0x0203C67C

	thumb_func_start sub_803C00C
sub_803C00C: @ 0x0803C00C
	push {lr}
	adds r1, r0, #0
	ldr r0, _0803C024 @ =0x085C98F4
	ldr r2, [r0]
	movs r0, #3
	strb r0, [r2]
	ldr r0, _0803C028 @ =0x085CA504
	bl StartEventLocking
	pop {r0}
	bx r0
	.align 2, 0
_0803C024: .4byte 0x085C98F4
_0803C028: .4byte 0x085CA504

	thumb_func_start sub_803C02C
sub_803C02C: @ 0x0803C02C
	push {lr}
	bl sub_8036B40
	bl sub_8039550
	bl sub_8039574
	bl sub_80353AC
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_803C044
sub_803C044: @ 0x0803C044
	push {r4, lr}
	adds r4, r0, #0
	bl GetTalkChoiceResult
	cmp r0, #1
	beq _0803C058
	adds r0, r4, #0
	movs r1, #1
	bl EventGotoLabel
_0803C058:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_803C060
sub_803C060: @ 0x0803C060
	push {r4, lr}
	adds r4, r0, #0
	bl GetTalkChoiceResult
	cmp r0, #1
	bne _0803C072
	bl sub_808439C
	b _0803C07A
_0803C072:
	adds r0, r4, #0
	movs r1, #1
	bl EventGotoLabel
_0803C07A:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_803C080
sub_803C080: @ 0x0803C080
	push {lr}
	adds r1, r0, #0
	ldr r0, _0803C090 @ =0x085CA6B8
	bl StartEventLocking
	pop {r0}
	bx r0
	.align 2, 0
_0803C090: .4byte 0x085CA6B8

	thumb_func_start sub_803C094
sub_803C094: @ 0x0803C094
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	ldr r0, _0803C0D8 @ =0x0203C618
	adds r1, r0, #0
	adds r1, #0xa0
	ldrb r3, [r1]
	adds r0, #0xec
	movs r1, #2
	ldrb r0, [r0]
	ands r1, r0
	cmp r1, #0
	beq _0803C0E0
	movs r6, #0
	cmp r6, r3
	bge _0803C13A
	ldr r4, _0803C0DC @ =0x0203C993
	adds r5, r4, #5
	mov r2, r8
_0803C0BC:
	adds r1, r6, r4
	ldrb r0, [r1]
	strb r0, [r2]
	ldrb r1, [r1]
	lsls r0, r1, #2
	adds r0, r0, r5
	ldr r0, [r0]
	str r0, [r2, #4]
	adds r2, #8
	adds r6, #1
	cmp r6, r3
	blt _0803C0BC
	b _0803C13A
	.align 2, 0
_0803C0D8: .4byte 0x0203C618
_0803C0DC: .4byte 0x0203C993
_0803C0E0:
	movs r6, #0
	subs r0, r3, #2
	mov ip, r0
	cmp r6, r3
	bge _0803C100
	ldr r0, _0803C104 @ =0x0203C984
	adds r2, r0, #0
	adds r2, #0x14
	mov r1, r8
_0803C0F2:
	strb r6, [r1]
	ldm r2!, {r0}
	str r0, [r1, #4]
	adds r1, #8
	adds r6, #1
	cmp r6, r3
	blt _0803C0F2
_0803C100:
	movs r6, #0
	b _0803C134
	.align 2, 0
_0803C104: .4byte 0x0203C984
_0803C108:
	adds r5, r0, #0
	adds r7, r6, #1
	cmp r0, r6
	blt _0803C132
	lsls r0, r0, #3
	mov r1, r8
	adds r2, r0, r1
_0803C116:
	ldr r4, [r2, #4]
	ldr r3, [r2, #0xc]
	cmp r4, r3
	bhs _0803C12A
	ldrb r1, [r2]
	ldrb r0, [r2, #8]
	strb r0, [r2]
	strb r1, [r2, #8]
	str r3, [r2, #4]
	str r4, [r2, #0xc]
_0803C12A:
	subs r2, #8
	subs r5, #1
	cmp r5, r6
	bge _0803C116
_0803C132:
	adds r6, r7, #0
_0803C134:
	mov r0, ip
	cmp r6, r0
	ble _0803C108
_0803C13A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_803C144
sub_803C144: @ 0x0803C144
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	lsls r0, r2, #5
	adds r0, r0, r6
	lsls r0, r0, #1
	ldr r1, _0803C19C @ =gBg1Tm
	adds r0, r0, r1
	movs r1, #0
	adds r5, r2, #1
_0803C158:
	adds r2, r1, #1
	movs r1, #5
_0803C15C:
	strh r3, [r0]
	adds r0, #2
	adds r3, #1
	subs r1, #1
	cmp r1, #0
	bge _0803C15C
	adds r0, #0x34
	adds r1, r2, #0
	cmp r1, #3
	ble _0803C158
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	movs r1, #0x18
	movs r2, #2
	ldr r3, [sp, #0x10]
	bl Text_InsertDrawNumberOrBlank
	lsls r1, r5, #5
	adds r1, #1
	adds r1, r1, r6
	lsls r1, r1, #1
	ldr r0, _0803C1A0 @ =gBg0Tm
	adds r1, r1, r0
	adds r0, r4, #0
	bl PutText
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803C19C: .4byte gBg1Tm
_0803C1A0: .4byte gBg0Tm

	thumb_func_start sub_803C1A4
sub_803C1A4: @ 0x0803C1A4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _0803C264 @ =0x081094B0
	ldr r1, _0803C268 @ =0x06002000
	bl Decompress
	ldr r0, _0803C26C @ =0x08109A00
	movs r1, #0x40
	movs r2, #0x80
	bl ApplyPaletteExt
	movs r0, #0
	bl SetTextFont
	bl ResetTextFont
	movs r0, #0
	mov sb, r0
	ldr r0, _0803C270 @ =0x0810F390
	mov sl, r0
	adds r6, r4, #0
	adds r6, #0x2c
	ldr r7, _0803C274 @ =0x0810F400
_0803C1DC:
	ldr r0, _0803C278 @ =0x085C98F4
	ldr r0, [r0]
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #2
	add r0, sb
	add r0, sl
	ldrb r5, [r0]
	adds r0, r5, #0
	bl sub_8035CB0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803C23E
	ldr r0, _0803C27C @ =0x0203C984
	mov r8, r0
	adds r0, #0xa
	adds r0, r5, r0
	ldrb r0, [r0]
	adds r4, r5, #2
	cmp r0, #0
	bne _0803C214
	lsls r1, r4, #5
	ldr r0, _0803C280 @ =0x08109C60
	movs r2, #0x20
	bl ApplyPaletteExt
_0803C214:
	movs r0, #0xf
	ands r4, r0
	lsls r4, r4, #0xc
	adds r0, #0xf1
	adds r4, r4, r0
	adds r0, r6, #0
	movs r1, #4
	bl InitTextDb
	ldrb r1, [r7]
	ldrb r2, [r7, #1]
	lsls r0, r5, #2
	mov r3, r8
	adds r3, #0x14
	adds r0, r0, r3
	ldr r0, [r0]
	str r0, [sp]
	adds r0, r6, #0
	adds r3, r4, #0
	bl sub_803C144
_0803C23E:
	adds r6, #8
	adds r7, #2
	movs r0, #1
	add sb, r0
	mov r0, sb
	cmp r0, #3
	ble _0803C1DC
	movs r0, #3
	bl EnableBgSync
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803C264: .4byte 0x081094B0
_0803C268: .4byte 0x06002000
_0803C26C: .4byte 0x08109A00
_0803C270: .4byte 0x0810F390
_0803C274: .4byte 0x0810F400
_0803C278: .4byte 0x085C98F4
_0803C27C: .4byte 0x0203C984
_0803C280: .4byte 0x08109C60

	thumb_func_start nullsub_17
nullsub_17: @ 0x0803C284
	bx lr
	.align 2, 0

	thumb_func_start sub_803C288
sub_803C288: @ 0x0803C288
	push {lr}
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _0803C2AC @ =0x085CA6F4
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_0803C2AC: .4byte 0x085CA6F4

	thumb_func_start sub_803C2B0
sub_803C2B0: @ 0x0803C2B0
	push {lr}
	ldr r0, _0803C2C0 @ =0x085CA6F4
	bl Proc_EndEach
	bl ClearBg0Bg1
	pop {r0}
	bx r0
	.align 2, 0
_0803C2C0: .4byte 0x085CA6F4

	thumb_func_start sub_803C2C4
sub_803C2C4: @ 0x0803C2C4
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0x33
	ldrb r0, [r0]
	bl GetUnit
	adds r4, r0, #0
	ldr r1, _0803C314 @ =0x0810F3A0
	adds r2, r5, #0
	adds r2, #0x32
	ldr r0, _0803C318 @ =0x085C98F4
	ldr r0, [r0]
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #2
	ldrb r2, [r2]
	adds r0, r2, r0
	adds r0, r0, r1
	ldrb r2, [r0]
	adds r0, r5, #0
	adds r0, #0x40
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0803C31C
	ldrb r0, [r4, #0xe]
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	lsls r0, r0, #4
	subs r0, #0x10
	strh r0, [r5, #0x2a]
	movs r0, #0xf
	ldrsb r0, [r4, r0]
	lsls r0, r0, #4
	strh r0, [r5, #0x2c]
	lsls r2, r2, #1
	b _0803C344
	.align 2, 0
_0803C314: .4byte 0x0810F3A0
_0803C318: .4byte 0x085C98F4
_0803C31C:
	movs r1, #0xe
	ldrsb r1, [r4, r1]
	lsls r1, r1, #4
	ldr r3, _0803C380 @ =0x085CA70C
	lsls r0, r2, #3
	adds r0, r0, r3
	ldr r0, [r0]
	adds r0, r0, r1
	subs r0, #0xc
	strh r0, [r5, #0x2a]
	movs r1, #0xf
	ldrsb r1, [r4, r1]
	lsls r1, r1, #4
	lsls r2, r2, #1
	adds r0, r2, #1
	lsls r0, r0, #2
	adds r0, r0, r3
	ldrh r0, [r0]
	adds r1, r0, r1
	strh r1, [r5, #0x2c]
_0803C344:
	ldr r1, _0803C384 @ =0x0810F400
	adds r0, r2, r1
	ldrb r0, [r0]
	lsls r0, r0, #3
	adds r0, #8
	movs r4, #0
	strh r0, [r5, #0x2e]
	adds r0, r2, #1
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #3
	adds r0, #8
	strh r0, [r5, #0x30]
	ldr r0, _0803C388 @ =0x02001000
	bl SetTextFont
	ldr r0, _0803C38C @ =0x02001018
	adds r1, r5, #0
	adds r1, #0x32
	ldrb r1, [r1]
	lsls r1, r1, #5
	adds r1, #0x18
	ldr r3, [r5, #0x34]
	movs r2, #2
	bl Text_InsertDrawNumberOrBlank
	str r4, [r5, #0x3c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803C380: .4byte 0x085CA70C
_0803C384: .4byte 0x0810F400
_0803C388: .4byte 0x02001000
_0803C38C: .4byte 0x02001018

	thumb_func_start sub_803C390
sub_803C390: @ 0x0803C390
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r7, r0, #0
	adds r0, #0x33
	ldrb r0, [r0]
	bl GetUnit
	str r0, [sp, #4]
	ldr r3, [r7, #0x3c]
	cmp r3, #0x10
	bhi _0803C424
	movs r0, #0x80
	lsls r0, r0, #1
	mov r8, r0
	movs r0, #0x10
	str r0, [sp]
	movs r0, #1
	movs r1, #0x10
	mov r2, r8
	bl Interpolate
	mov sl, r0
	ldr r4, _0803C454 @ =gSinLut
	movs r1, #0x80
	adds r1, r1, r4
	mov sb, r1
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r1, sl
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, sb
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, sl
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
_0803C424:
	adds r0, r7, #0
	adds r0, #0x40
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0803C476
	ldr r1, [r7, #0x3c]
	cmp r1, #3
	bls _0803C476
	cmp r1, #0x16
	bhi _0803C476
	subs r1, #4
	ldr r4, [sp, #4]
	ldrb r4, [r4, #0xe]
	cmp r4, #8
	bne _0803C45C
	ldr r0, _0803C458 @ =0x085CA72C
	lsls r1, r1, #1
	adds r0, r1, r0
	ldrh r2, [r7, #0x2a]
	ldrh r0, [r0]
	adds r0, r2, r0
	b _0803C468
	.align 2, 0
_0803C454: .4byte gSinLut
_0803C458: .4byte 0x085CA72C
_0803C45C:
	ldr r0, _0803C4BC @ =0x085CA72C
	lsls r1, r1, #1
	adds r0, r1, r0
	ldrh r4, [r7, #0x2a]
	ldrh r0, [r0]
	subs r0, r4, r0
_0803C468:
	strh r0, [r7, #0x2a]
	ldr r0, _0803C4C0 @ =0x085CA752
	adds r0, r1, r0
	ldrh r1, [r7, #0x2c]
	ldrh r0, [r0]
	subs r0, r1, r0
	strh r0, [r7, #0x2c]
_0803C476:
	movs r2, #0x2a
	ldrsh r0, [r7, r2]
	movs r4, #0x2c
	ldrsh r1, [r7, r4]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r1, r2
	ldr r2, _0803C4C4 @ =Sprite_32x16
	adds r3, r7, #0
	adds r3, #0x32
	ldrb r3, [r3]
	lsls r3, r3, #2
	ldr r4, _0803C4C8 @ =0x00009340
	adds r3, r3, r4
	bl PutOamHiRam
	ldr r0, [r7, #0x3c]
	adds r0, #1
	str r0, [r7, #0x3c]
	cmp r0, #0x40
	bls _0803C4AA
	movs r0, #0
	str r0, [r7, #0x3c]
	adds r0, r7, #0
	bl Proc_Break
_0803C4AA:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803C4BC: .4byte 0x085CA72C
_0803C4C0: .4byte 0x085CA752
_0803C4C4: .4byte Sprite_32x16
_0803C4C8: .4byte 0x00009340

	thumb_func_start sub_803C4CC
sub_803C4CC: @ 0x0803C4CC
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0x2a
	ldrsh r1, [r6, r0]
	movs r0, #0x2e
	ldrsh r2, [r6, r0]
	ldr r3, [r6, #0x3c]
	movs r4, #0x30
	str r4, [sp]
	movs r0, #5
	bl Interpolate
	adds r5, r0, #0
	movs r0, #0x2c
	ldrsh r1, [r6, r0]
	movs r0, #0x30
	ldrsh r2, [r6, r0]
	ldr r3, [r6, #0x3c]
	str r4, [sp]
	movs r0, #5
	bl Interpolate
	adds r1, r0, #0
	ldr r2, _0803C528 @ =Sprite_32x16
	adds r0, r6, #0
	adds r0, #0x32
	ldrb r0, [r0]
	lsls r3, r0, #2
	ldr r0, _0803C52C @ =0x00009340
	adds r3, r3, r0
	adds r0, r5, #0
	bl PutOamHiRam
	ldr r0, [r6, #0x3c]
	adds r0, #1
	str r0, [r6, #0x3c]
	cmp r0, #0x20
	bls _0803C520
	adds r0, r6, #0
	bl Proc_Break
_0803C520:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803C528: .4byte Sprite_32x16
_0803C52C: .4byte 0x00009340

	thumb_func_start sub_803C530
sub_803C530: @ 0x0803C530
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r5, r0, #0
	mov r8, r1
	adds r4, r2, #0
	adds r6, r3, #0
	bl ClearText
	adds r0, r5, #0
	movs r1, #0x18
	movs r2, #2
	adds r3, r6, #0
	bl Text_InsertDrawNumberOrBlank
	adds r4, #1
	lsls r4, r4, #5
	adds r4, #1
	add r4, r8
	lsls r4, r4, #1
	ldr r0, _0803C574 @ =gBg0Tm
	adds r4, r4, r0
	adds r0, r5, #0
	adds r1, r4, #0
	bl PutText
	movs r0, #1
	bl EnableBgSync
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803C574: .4byte gBg0Tm

	thumb_func_start sub_803C578
sub_803C578: @ 0x0803C578
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r1, _0803C5D8 @ =0x0810F3A0
	adds r2, r6, #0
	adds r2, #0x32
	ldr r0, _0803C5DC @ =0x085C98F4
	ldr r0, [r0]
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #2
	ldrb r2, [r2]
	adds r0, r2, r0
	adds r0, r0, r1
	ldr r2, _0803C5E0 @ =0x0810F400
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r1, r0, r2
	ldrb r1, [r1]
	movs r5, #0
	strh r1, [r6, #0x2a]
	adds r0, #1
	adds r0, r0, r2
	ldrb r0, [r0]
	strh r0, [r6, #0x2c]
	movs r0, #0
	bl SetTextFont
	adds r0, r6, #0
	adds r0, #0x48
	movs r2, #0x2a
	ldrsh r1, [r6, r2]
	movs r3, #0x2c
	ldrsh r2, [r6, r3]
	ldr r3, [r6, #0x38]
	ldr r4, [r6, #0x34]
	subs r3, r3, r4
	bl sub_803C530
	str r5, [r6, #0x3c]
	ldr r0, [r6, #0x38]
	ldr r1, [r6, #0x34]
	subs r0, r0, r1
	str r0, [r6, #0x44]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803C5D8: .4byte 0x0810F3A0
_0803C5DC: .4byte 0x085C98F4
_0803C5E0: .4byte 0x0810F400

	thumb_func_start sub_803C5E4
sub_803C5E4: @ 0x0803C5E4
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r2, [r4, #0x38]
	ldr r1, [r4, #0x34]
	subs r1, r2, r1
	ldr r3, [r4, #0x3c]
	movs r0, #0xa
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	adds r5, r0, #0
	movs r0, #0
	bl SetTextFont
	adds r0, r4, #0
	adds r0, #0x48
	movs r2, #0x2a
	ldrsh r1, [r4, r2]
	movs r3, #0x2c
	ldrsh r2, [r4, r3]
	adds r3, r5, #0
	bl sub_803C530
	ldr r0, [r4, #0x44]
	cmp r0, r5
	beq _0803C63C
	adds r1, r4, #0
	adds r1, #0x32
	ldr r0, _0803C66C @ =0x085C98F4
	ldr r0, [r0]
	ldrb r1, [r1]
	ldrb r0, [r0, #6]
	cmp r1, r0
	bne _0803C63C
	ldr r0, _0803C670 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0803C63C
	movs r0, #0x80
	bl m4aSongNumStart
_0803C63C:
	str r5, [r4, #0x44]
	ldr r0, [r4, #0x3c]
	adds r0, #1
	str r0, [r4, #0x3c]
	cmp r0, #0xa
	bls _0803C664
	movs r0, #0
	str r0, [r4, #0x3c]
	ldr r0, _0803C674 @ =0x0203C984
	adds r1, r4, #0
	adds r1, #0x32
	ldrb r1, [r1]
	lsls r1, r1, #2
	adds r0, #0x14
	adds r1, r1, r0
	ldr r0, [r4, #0x38]
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0803C664:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803C66C: .4byte 0x085C98F4
_0803C670: .4byte gPlaySt
_0803C674: .4byte 0x0203C984

	thumb_func_start sub_803C678
sub_803C678: @ 0x0803C678
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x3c]
	adds r0, #1
	str r0, [r1, #0x3c]
	cmp r0, #0x14
	bls _0803C68C
	adds r0, r1, #0
	bl Proc_Break
_0803C68C:
	pop {r0}
	bx r0

	thumb_func_start sub_803C690
sub_803C690: @ 0x0803C690
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0803C6B4 @ =0x02001000
	bl SetTextFont
	ldr r0, _0803C6B8 @ =0x02001018
	ldr r3, [r4, #0x54]
	movs r1, #0x80
	movs r2, #0
	bl Text_InsertDrawString
	adds r4, #0x4c
	movs r0, #0
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803C6B4: .4byte 0x02001000
_0803C6B8: .4byte 0x02001018

	thumb_func_start sub_803C6BC
sub_803C6BC: @ 0x0803C6BC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	movs r0, #0x4c
	adds r0, r0, r7
	mov sb, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0x10
	bgt _0803C74E
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r0, sb
	movs r1, #0
	ldrsh r3, [r0, r1]
	movs r0, #0x10
	str r0, [sp]
	movs r0, #1
	movs r1, #0x10
	bl Interpolate
	mov sl, r0
	ldr r4, _0803C7BC @ =gSinLut
	ldr r2, _0803C7C0 @ =gSinLut+0x80
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r1, sl
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	ldr r2, _0803C7C0 @ =gSinLut+0x80
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	mov r1, sl
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #1
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
_0803C74E:
	ldr r0, [r7, #0x2c]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r0, r2
	ldr r1, [r7, #0x30]
	movs r4, #0x80
	lsls r4, r4, #1
	adds r1, r1, r4
	ldr r5, _0803C7C4 @ =Sprite_32x16
	ldr r3, _0803C7C8 @ =0x00009350
	adds r2, r5, #0
	bl PutOamHiRam
	ldr r0, [r7, #0x2c]
	movs r1, #0x88
	lsls r1, r1, #2
	adds r0, r0, r1
	ldr r1, [r7, #0x30]
	adds r1, r1, r4
	ldr r3, _0803C7CC @ =0x00009354
	adds r2, r5, #0
	bl PutOamHiRam
	ldr r0, [r7, #0x2c]
	movs r2, #0x90
	lsls r2, r2, #2
	adds r0, r0, r2
	ldr r1, [r7, #0x30]
	adds r1, r1, r4
	ldr r2, _0803C7D0 @ =Sprite_16x16
	ldr r3, _0803C7D4 @ =0x00009358
	bl PutOamHiRam
	mov r1, sb
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x40
	ble _0803C7AA
	movs r0, #0
	strh r0, [r1]
	adds r0, r7, #0
	bl Proc_Break
_0803C7AA:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803C7BC: .4byte gSinLut
_0803C7C0: .4byte gSinLut+0x80
_0803C7C4: .4byte Sprite_32x16
_0803C7C8: .4byte 0x00009350
_0803C7CC: .4byte 0x00009354
_0803C7D0: .4byte Sprite_16x16
_0803C7D4: .4byte 0x00009358

	thumb_func_start sub_803C7D8
sub_803C7D8: @ 0x0803C7D8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r7, r0, #0
	adds r0, #0x4c
	str r0, [sp, #4]
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0x10
	bgt _0803C86E
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	ldr r0, [sp, #4]
	movs r1, #0
	ldrsh r3, [r0, r1]
	movs r0, #0x10
	str r0, [sp]
	movs r0, #4
	mov r1, r8
	movs r2, #0x10
	bl Interpolate
	mov sl, r0
	ldr r4, _0803C8D8 @ =gSinLut
	movs r2, #0x80
	adds r2, r2, r4
	mov sb, r2
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r1, sl
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r2, sb
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	mov r1, sl
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #1
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
_0803C86E:
	ldr r0, [r7, #0x2c]
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r0, r2
	ldr r1, [r7, #0x30]
	movs r4, #0x80
	lsls r4, r4, #1
	adds r1, r1, r4
	ldr r5, _0803C8DC @ =Sprite_32x16
	ldr r3, _0803C8E0 @ =0x00009350
	adds r2, r5, #0
	bl PutOamHiRam
	ldr r0, [r7, #0x2c]
	movs r1, #0x88
	lsls r1, r1, #2
	adds r0, r0, r1
	ldr r1, [r7, #0x30]
	adds r1, r1, r4
	ldr r3, _0803C8E4 @ =0x00009354
	adds r2, r5, #0
	bl PutOamHiRam
	ldr r0, [r7, #0x2c]
	movs r2, #0x90
	lsls r2, r2, #2
	adds r0, r0, r2
	ldr r1, [r7, #0x30]
	adds r1, r1, r4
	ldr r2, _0803C8E8 @ =Sprite_16x16
	ldr r3, _0803C8EC @ =0x00009358
	bl PutOamHiRam
	ldr r1, [sp, #4]
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x10
	ble _0803C8C6
	adds r0, r7, #0
	bl Proc_Break
_0803C8C6:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803C8D8: .4byte gSinLut
_0803C8DC: .4byte Sprite_32x16
_0803C8E0: .4byte 0x00009350
_0803C8E4: .4byte 0x00009354
_0803C8E8: .4byte Sprite_16x16
_0803C8EC: .4byte 0x00009358

	thumb_func_start sub_803C8F0
sub_803C8F0: @ 0x0803C8F0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	str r2, [sp, #0x10]
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	mov sb, r3
	movs r0, #0
	mov sl, r0
	ldr r0, _0803C9C8 @ =Pal_SystemText
	movs r1, #0xc8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0803C9CC @ =0x02001000
	ldr r1, _0803C9D0 @ =0x06016800
	movs r2, #3
	bl InitSpriteTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	bl ResetTextFont
	ldr r4, _0803C9D4 @ =0x02001018
	adds r0, r4, #0
	bl InitSpriteText
	adds r0, r4, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	movs r0, #0
	bl SetTextFont
	movs r1, #0
	mov r8, r1
_0803C946:
	ldr r0, _0803C9D8 @ =0x085C98F4
	ldr r0, [r0]
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #2
	add r0, r8
	ldr r1, _0803C9DC @ =0x0810F3A0
	adds r0, r0, r1
	ldrb r4, [r0]
	adds r0, r4, #0
	bl sub_8035CB0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803C9F4
	ldr r6, _0803C9E0 @ =0x0203C984
	lsls r5, r4, #3
	adds r0, r6, #0
	adds r0, #0x30
	adds r7, r5, r0
	ldr r0, [r7]
	cmp r0, #0
	beq _0803C9EC
	ldr r0, _0803C9E4 @ =0x085CA778
	ldr r1, [sp, #0x34]
	bl SpawnProcLocking
	adds r2, r0, #0
	adds r0, #0x32
	strb r4, [r0]
	adds r0, r5, r6
	adds r0, #0x2c
	ldrb r0, [r0]
	adds r1, r2, #0
	adds r1, #0x33
	strb r0, [r1]
	lsls r1, r4, #2
	adds r0, r6, #0
	adds r0, #0x14
	adds r3, r1, r0
	ldr r1, [r3]
	ldr r0, [r7]
	adds r1, r1, r0
	str r1, [r2, #0x38]
	ldr r0, _0803C9E8 @ =0x0000270F
	cmp r1, r0
	bls _0803C9A8
	str r0, [r2, #0x38]
_0803C9A8:
	ldr r0, [r2, #0x38]
	ldr r1, [r3]
	subs r0, r0, r1
	str r0, [r2, #0x34]
	adds r0, r2, #0
	adds r0, #0x40
	mov r1, sb
	strb r1, [r0]
	adds r0, #8
	movs r1, #4
	bl InitTextDb
	movs r0, #1
	add sl, r0
	b _0803C9F4
	.align 2, 0
_0803C9C8: .4byte Pal_SystemText
_0803C9CC: .4byte 0x02001000
_0803C9D0: .4byte 0x06016800
_0803C9D4: .4byte 0x02001018
_0803C9D8: .4byte 0x085C98F4
_0803C9DC: .4byte 0x0810F3A0
_0803C9E0: .4byte 0x0203C984
_0803C9E4: .4byte 0x085CA778
_0803C9E8: .4byte 0x0000270F
_0803C9EC:
	mov r0, sp
	movs r1, #4
	bl InitTextDb
_0803C9F4:
	movs r1, #1
	add r8, r1
	mov r0, r8
	cmp r0, #3
	ble _0803C946
	mov r1, sl
	cmp r1, #0
	beq _0803CA28
	mov r0, sb
	cmp r0, #0
	beq _0803CA1E
	ldr r0, _0803CA24 @ =0x085CA7B8
	ldr r1, [sp, #0x34]
	bl SpawnProcLocking
	ldr r1, [sp, #8]
	str r1, [r0, #0x2c]
	ldr r1, [sp, #0xc]
	str r1, [r0, #0x30]
	ldr r1, [sp, #0x10]
	str r1, [r0, #0x54]
_0803CA1E:
	movs r0, #1
	b _0803CA2A
	.align 2, 0
_0803CA24: .4byte 0x085CA7B8
_0803CA28:
	movs r0, #0
_0803CA2A:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_803CA3C
sub_803CA3C: @ 0x0803CA3C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	bl sub_803C288
	ldr r2, _0803CA68 @ =0x0810F408
	str r4, [sp]
	movs r0, #0x58
	movs r1, #0x3c
	movs r3, #1
	bl sub_803C8F0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0803CA5E
	bl sub_803C2B0
_0803CA5E:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803CA68: .4byte 0x0810F408

	thumb_func_start sub_803CA6C
sub_803CA6C: @ 0x0803CA6C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	bl sub_803C288
	ldr r2, _0803CA8C @ =0x0810F408
	str r4, [sp]
	movs r0, #0x58
	movs r1, #0x3c
	movs r3, #0
	bl sub_803C8F0
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803CA8C: .4byte 0x0810F408

	thumb_func_start sub_803CA90
sub_803CA90: @ 0x0803CA90
	adds r1, r0, #0
	adds r1, #0x1c
	ldr r3, _0803CAA8 @ =0x03001418
	movs r2, #4
_0803CA98:
	ldrh r0, [r1]
	strh r0, [r3]
	adds r1, #2
	adds r3, #2
	subs r2, #1
	cmp r2, #0
	bge _0803CA98
	bx lr
	.align 2, 0
_0803CAA8: .4byte 0x03001418

	thumb_func_start sub_803CAAC
sub_803CAAC: @ 0x0803CAAC
	ldr r3, _0803CAC4 @ =0x03001418
	adds r1, r0, #0
	adds r1, #0x1c
	movs r2, #4
_0803CAB4:
	ldrh r0, [r3]
	strh r0, [r1]
	adds r3, #2
	adds r1, #2
	subs r2, #1
	cmp r2, #0
	bge _0803CAB4
	bx lr
	.align 2, 0
_0803CAC4: .4byte 0x03001418

	thumb_func_start sub_803CAC8
sub_803CAC8: @ 0x0803CAC8
	push {lr}
	bl sub_803CD74
	bl RefreshUnitSprites
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_803CAD8
sub_803CAD8: @ 0x0803CAD8
	movs r1, #0
	ldr r3, _0803CAF4 @ =0x0203C984
	adds r2, r3, #0
	adds r2, #0xa
_0803CAE0:
	cmp r0, #2
	beq _0803CB0A
	cmp r0, #2
	bgt _0803CAF8
	cmp r0, #0
	beq _0803CB02
	cmp r0, #1
	beq _0803CB06
	b _0803CB14
	.align 2, 0
_0803CAF4: .4byte 0x0203C984
_0803CAF8:
	cmp r0, #3
	beq _0803CB0E
	cmp r0, #0xff
	beq _0803CB12
	b _0803CB14
_0803CB02:
	movs r1, #2
	b _0803CB14
_0803CB06:
	movs r1, #3
	b _0803CB14
_0803CB0A:
	movs r1, #1
	b _0803CB14
_0803CB0E:
	movs r1, #0
	b _0803CB14
_0803CB12:
	movs r1, #0xff
_0803CB14:
	adds r0, r1, r2
	ldrb r0, [r0]
	cmp r0, #0
	bne _0803CB24
	cmp r1, #0xff
	beq _0803CB24
	adds r0, r1, #0
	b _0803CAE0
_0803CB24:
	strb r1, [r3, #1]
	bx lr

	thumb_func_start sub_803CB28
sub_803CB28: @ 0x0803CB28
	ldr r1, _0803CB38 @ =0x0300140C
	movs r0, #0
	strb r0, [r1]
	strb r0, [r1, #1]
	strb r0, [r1, #3]
	strb r0, [r1, #2]
	bx lr
	.align 2, 0
_0803CB38: .4byte 0x0300140C

	thumb_func_start sub_803CB3C
sub_803CB3C: @ 0x0803CB3C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r0, r3, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	lsls r6, r6, #0x18
	lsrs r6, r6, #0x18
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp]
	bl sub_803CB28
	ldr r1, _0803CB78 @ =0x0300140C
	strb r4, [r1]
	strb r5, [r1, #1]
	strb r6, [r1, #2]
	ldr r0, [sp]
	strb r0, [r1, #3]
	ldr r0, _0803CB7C @ =0x0203C618
	ldrb r0, [r0]
	cmp r0, #2
	beq _0803CB80
	movs r0, #0
	b _0803CB8C
	.align 2, 0
_0803CB78: .4byte 0x0300140C
_0803CB7C: .4byte 0x0203C618
_0803CB80:
	adds r0, r1, #0
	movs r1, #4
	bl sub_8036208
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
_0803CB8C:
	add sp, #4
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_803CB94
sub_803CB94: @ 0x0803CB94
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	movs r1, #0
	ldr r3, _0803CBA8 @ =0x030013F0
_0803CB9C:
	adds r0, r1, r3
	ldrb r0, [r0]
	cmp r0, r2
	bne _0803CBAC
	adds r0, r1, #0
	b _0803CBB2
	.align 2, 0
_0803CBA8: .4byte 0x030013F0
_0803CBAC:
	adds r1, #1
	cmp r1, #0x13
	ble _0803CB9C
_0803CBB2:
	bx lr

	thumb_func_start sub_803CBB4
sub_803CBB4: @ 0x0803CBB4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	adds r4, r0, #0
	str r1, [sp, #0x10]
	adds r5, r2, #0
	mov r8, r3
	ldr r0, [sp, #0x34]
	mov sb, r0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r1, _0803CCAC @ =0x0810F41B
	mov r0, sp
	movs r2, #8
	bl memcpy
	add r7, sp, #8
	ldr r1, _0803CCB0 @ =0x0810F423
	adds r0, r7, #0
	movs r2, #8
	bl memcpy
	adds r0, r4, #0
	bl sub_803CB94
	adds r4, r0, #0
	movs r1, #5
	bl Div
	lsls r6, r0, #1
	strb r4, [r5]
	ldr r0, _0803CCB4 @ =0x030013F0
	adds r4, r4, r0
	ldrb r0, [r4]
	bl GetUnit
	adds r5, r0, #0
	movs r1, #0x80
	lsls r1, r1, #2
	mov sl, r1
	mov r0, sl
	ldrh r2, [r5, #0xc]
	ands r0, r2
	cmp r0, #0
	bne _0803CC32
	adds r0, r5, #0
	bl MU_Start
	ldr r1, _0803CCB8 @ =0x03001410
	ldr r3, [sp, #0x10]
	lsls r4, r3, #2
	adds r4, r4, r1
	str r0, [r4]
	bl sub_805F91C
	ldr r0, [r4]
	mov r2, sp
	adds r1, r2, r6
	bl sub_805FD78
_0803CC32:
	movs r0, #1
	ldrh r3, [r5, #0xc]
	orrs r0, r3
	strh r0, [r5, #0xc]
	bl RefreshUnitSprites
	movs r0, #0xe
	ldrsb r0, [r5, r0]
	adds r3, r7, r6
	movs r1, #0
	ldrsb r1, [r3, r1]
	adds r0, r0, r1
	mov r1, r8
	str r0, [r1]
	movs r1, #0xf
	ldrsb r1, [r5, r1]
	adds r0, r6, #1
	adds r2, r7, r0
	movs r0, #0
	ldrsb r0, [r2, r0]
	adds r1, r1, r0
	mov r0, sb
	str r1, [r0]
	mov r0, sl
	ldrh r1, [r5, #0xc]
	ands r0, r1
	cmp r0, #0
	beq _0803CC9A
	mov r1, r8
	ldr r0, [r1]
	strb r0, [r5, #0xe]
	mov r1, sb
	ldr r0, [r1]
	strb r0, [r5, #0xf]
	movs r1, #0
	ldrsb r1, [r3, r1]
	mov r3, r8
	ldr r0, [r3]
	subs r0, r0, r1
	str r0, [r3]
	movs r1, #0
	ldrsb r1, [r2, r1]
	mov r2, sb
	ldr r0, [r2]
	subs r0, r0, r1
	str r0, [r2]
	ldr r1, _0803CCB8 @ =0x03001410
	ldr r3, [sp, #0x10]
	lsls r0, r3, #2
	adds r0, r0, r1
	movs r1, #0
	str r1, [r0]
_0803CC9A:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803CCAC: .4byte 0x0810F41B
_0803CCB0: .4byte 0x0810F423
_0803CCB4: .4byte 0x030013F0
_0803CCB8: .4byte 0x03001410

	thumb_func_start sub_803CCBC
sub_803CCBC: @ 0x0803CCBC
	ldr r1, _0803CCD0 @ =0x030013F0
	movs r2, #0
	adds r0, r1, #0
	adds r0, #0x13
_0803CCC4:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge _0803CCC4
	bx lr
	.align 2, 0
_0803CCD0: .4byte 0x030013F0

	thumb_func_start sub_803CCD4
sub_803CCD4: @ 0x0803CCD4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	movs r7, #0
_0803CCE2:
	ldr r0, _0803CD60 @ =0x085C98F4
	ldr r0, [r0]
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #2
	adds r0, r7, r0
	ldr r1, _0803CD64 @ =0x0810F390
	adds r0, r0, r1
	ldrb r4, [r0]
	adds r0, r4, #0
	bl sub_8035CB0
	lsls r0, r0, #0x18
	adds r1, r7, #1
	mov sb, r1
	cmp r0, #0
	beq _0803CD4A
	lsls r0, r4, #6
	adds r0, #1
	mov r8, r0
	movs r6, #0
	lsls r3, r7, #2
	ldr r0, _0803CD68 @ =0x0810F3B0
	mov sl, r0
_0803CD14:
	adds r0, r3, r7
	adds r5, r0, r6
	ldr r0, _0803CD6C @ =0x0810F42B
	adds r0, r6, r0
	ldrb r4, [r0]
	add r4, r8
	adds r0, r4, #0
	str r3, [sp]
	bl GetUnit
	adds r2, r0, #0
	ldr r0, [r2]
	ldr r3, [sp]
	cmp r0, #0
	beq _0803CD44
	ldr r0, _0803CD70 @ =0x030013F0
	adds r0, r5, r0
	strb r4, [r0]
	lsls r1, r5, #2
	add r1, sl
	ldrh r0, [r1]
	strb r0, [r2, #0xe]
	ldrh r0, [r1, #2]
	strb r0, [r2, #0xf]
_0803CD44:
	adds r6, #1
	cmp r6, #4
	ble _0803CD14
_0803CD4A:
	mov r7, sb
	cmp r7, #3
	ble _0803CCE2
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803CD60: .4byte 0x085C98F4
_0803CD64: .4byte 0x0810F390
_0803CD68: .4byte 0x0810F3B0
_0803CD6C: .4byte 0x0810F42B
_0803CD70: .4byte 0x030013F0

	thumb_func_start sub_803CD74
sub_803CD74: @ 0x0803CD74
	push {r4, lr}
	ldr r0, _0803CDCC @ =gMapUnit
	ldr r0, [r0]
	movs r1, #0
	bl MapFill
	ldr r0, _0803CDD0 @ =gMapFog
	ldr r0, [r0]
	movs r1, #1
	bl MapFill
	movs r4, #1
_0803CD8C:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _0803CDC0
	ldr r0, [r2]
	cmp r0, #0
	beq _0803CDC0
	movs r0, #1
	ldrh r1, [r2, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _0803CDC0
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r0, _0803CDCC @ =gMapUnit
	ldr r0, [r0]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldrb r2, [r2, #0xe]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	ldr r0, [r1]
	adds r0, r0, r2
	strb r4, [r0]
_0803CDC0:
	adds r4, #1
	cmp r4, #0xc5
	ble _0803CD8C
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803CDCC: .4byte gMapUnit
_0803CDD0: .4byte gMapFog

	thumb_func_start sub_803CDD4
sub_803CDD4: @ 0x0803CDD4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	movs r2, #0
	ldr r0, _0803CE4C @ =0x0810F390
	mov sl, r0
_0803CDE6:
	ldr r0, _0803CE50 @ =0x085C98F4
	ldr r0, [r0]
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #2
	adds r0, r2, r0
	add r0, sl
	ldrb r4, [r0]
	adds r0, r4, #0
	str r2, [sp]
	bl sub_8035CB0
	lsls r0, r0, #0x18
	ldr r2, [sp]
	adds r1, r2, #1
	mov sb, r1
	cmp r0, #0
	beq _0803CE66
	lsls r0, r4, #6
	adds r0, #1
	mov r8, r0
	movs r6, #0
	lsls r3, r2, #2
	ldr r7, _0803CE54 @ =0x030013F0
_0803CE18:
	adds r0, r3, r2
	adds r5, r0, r6
	ldr r0, _0803CE58 @ =0x0810F42B
	adds r0, r6, r0
	ldrb r4, [r0]
	add r4, r8
	adds r0, r4, #0
	str r2, [sp]
	str r3, [sp, #4]
	bl GetUnit
	adds r1, r0, #0
	ldr r0, [r1]
	ldr r2, [sp]
	ldr r3, [sp, #4]
	cmp r0, #0
	beq _0803CE44
	movs r0, #5
	ldrh r1, [r1, #0xc]
	ands r0, r1
	cmp r0, #0
	beq _0803CE5C
_0803CE44:
	adds r1, r5, r7
	movs r0, #0
	strb r0, [r1]
	b _0803CE60
	.align 2, 0
_0803CE4C: .4byte 0x0810F390
_0803CE50: .4byte 0x085C98F4
_0803CE54: .4byte 0x030013F0
_0803CE58: .4byte 0x0810F42B
_0803CE5C:
	adds r0, r5, r7
	strb r4, [r0]
_0803CE60:
	adds r6, #1
	cmp r6, #4
	ble _0803CE18
_0803CE66:
	mov r2, sb
	cmp r2, #3
	ble _0803CDE6
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_803CE7C
sub_803CE7C: @ 0x0803CE7C
	push {r4, r5, lr}
	sub sp, #4
	mov r1, sp
	movs r0, #0
	strh r0, [r1]
	ldr r4, _0803CED0 @ =gBmSt
	ldr r2, _0803CED4 @ =0x01000020
	mov r0, sp
	adds r1, r4, #0
	bl CpuSet
	movs r0, #0x40
	movs r5, #0
	ldrb r1, [r4, #4]
	orrs r0, r1
	strb r0, [r4, #4]
	bl InitTraps
	ldr r4, _0803CED8 @ =gPlaySt
	movs r0, #0x27
	strb r0, [r4, #0xe]
	strh r5, [r4, #0x10]
	bl GetChapterInfo
	ldrb r0, [r0, #0xc]
	strb r0, [r4, #0xd]
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetChapterInfo
	ldrb r0, [r0, #0x11]
	strb r0, [r4, #0x15]
	movs r0, #0x27
	bl InitMapForChapter
	bl GetGameTime
	str r0, [r4, #4]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803CED0: .4byte gBmSt
_0803CED4: .4byte 0x01000020
_0803CED8: .4byte gPlaySt

	thumb_func_start sub_803CEDC
sub_803CEDC: @ 0x0803CEDC
	push {lr}
	bl sub_803CE7C
	bl sub_803CCBC
	bl sub_803CCD4
	ldr r0, _0803CF0C @ =gMapFog
	ldr r2, [r0]
	movs r1, #0
	ldr r0, _0803CF10 @ =gPlaySt
	ldrb r0, [r0, #0xd]
	cmp r0, #0
	bne _0803CEFA
	movs r1, #1
_0803CEFA:
	adds r0, r2, #0
	bl MapFill
	bl sub_803CD74
	bl RenderMap
	pop {r0}
	bx r0
	.align 2, 0
_0803CF0C: .4byte gMapFog
_0803CF10: .4byte gPlaySt

	thumb_func_start sub_803CF14
sub_803CF14: @ 0x0803CF14
	push {r4, lr}
	ldr r0, _0803CF4C @ =0x0203C984
	movs r1, #0
	movs r2, #3
	adds r0, #0xd
_0803CF1E:
	strb r1, [r0]
	subs r0, #1
	subs r2, #1
	cmp r2, #0
	bge _0803CF1E
	movs r2, #0
	ldr r4, _0803CF50 @ =0x030013F0
	ldr r3, _0803CF54 @ =0x0203C98E
_0803CF2E:
	adds r0, r2, r4
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803CF40
	lsrs r0, r0, #6
	adds r0, r0, r3
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
_0803CF40:
	adds r2, #1
	cmp r2, #0x13
	ble _0803CF2E
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803CF4C: .4byte 0x0203C984
_0803CF50: .4byte 0x030013F0
_0803CF54: .4byte 0x0203C98E

	thumb_func_start sub_803CF58
sub_803CF58: @ 0x0803CF58
	push {lr}
	ldr r0, _0803CF68 @ =0x08109854
	ldr r1, _0803CF6C @ =0x06014800
	bl Decompress
	pop {r0}
	bx r0
	.align 2, 0
_0803CF68: .4byte 0x08109854
_0803CF6C: .4byte 0x06014800

	thumb_func_start sub_803CF70
sub_803CF70: @ 0x0803CF70
	push {lr}
	movs r0, #0
	bl InitBgs
	bl ApplySystemGraphics
	bl ApplyUnitSpritePalettes
	bl ForceSyncUnitSpriteSheet
	bl sub_803CF58
	bl InitSystemTextFont
	ldr r1, _0803CF98 @ =0x0203C984
	movs r0, #0xff
	strb r0, [r1, #3]
	pop {r0}
	bx r0
	.align 2, 0
_0803CF98: .4byte 0x0203C984

	thumb_func_start sub_803CF9C
sub_803CF9C: @ 0x0803CF9C
	push {r4, lr}
	ldr r4, _0803CFE0 @ =gPlaySt
	movs r3, #4
	rsbs r3, r3, #0
	ldrb r0, [r4, #0x1e]
	ands r3, r0
	movs r2, #0x10
	ldrb r1, [r4, #0x1c]
	orrs r2, r1
	movs r0, #0x61
	rsbs r0, r0, #0
	ands r2, r0
	movs r0, #0x40
	orrs r2, r0
	movs r0, #0x7f
	ands r2, r0
	subs r0, #0x81
	ldrb r1, [r4, #0x1d]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #0xa
	ands r0, r1
	strb r0, [r4, #0x1d]
	ands r3, r1
	strb r3, [r4, #0x1e]
	movs r0, #1
	orrs r2, r0
	strb r2, [r4, #0x1c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803CFE0: .4byte gPlaySt

	thumb_func_start sub_803CFE4
sub_803CFE4: @ 0x0803CFE4
	push {r4, r5, lr}
	movs r0, #0
	bl InitBgs
	bl sub_8036B40
	bl sub_803CEDC
	bl sub_803CF14
	ldr r4, _0803D084 @ =0x0203C984
	movs r5, #0
	strb r5, [r4, #9]
	ldr r0, _0803D088 @ =0x0203C618
	strb r5, [r0, #0xb]
	ldr r0, _0803D08C @ =0x085CA7E0
	ldrb r1, [r4]
	adds r0, r1, r0
	ldrb r0, [r0]
	bl sub_803CAD8
	movs r0, #1
	strb r0, [r4, #0xe]
	strb r5, [r4, #2]
	strb r0, [r4, #3]
	movs r1, #0
	movs r0, #3
	adds r4, #0x20
_0803D01C:
	str r1, [r4]
	subs r4, #4
	subs r0, #1
	cmp r0, #0
	bge _0803D01C
	movs r4, #0
	ldr r0, _0803D090 @ =0x030013F0
	ldrb r0, [r0, #3]
	bl GetUnit
	ldr r2, _0803D094 @ =0x03001404
	movs r1, #0xe
	ldrsb r1, [r0, r1]
	lsls r1, r1, #4
	strh r1, [r2]
	movs r1, #0xf
	ldrsb r1, [r0, r1]
	lsls r1, r1, #4
	strh r1, [r2, #2]
	movs r2, #0xe
	ldrsb r2, [r0, r2]
	movs r1, #0xf
	ldrsb r1, [r0, r1]
	adds r0, r2, #0
	bl SetMapCursorPosition
	ldr r0, _0803D098 @ =gBmSt
	strh r4, [r0, #0xc]
	strh r4, [r0, #0xe]
	bl ApplySystemGraphics
	bl ApplyUnitSpritePalettes
	bl ResetUnitSprites
	bl RefreshUnitSprites
	bl sub_803CF58
	bl sub_803EA30
	ldr r0, _0803D09C @ =0x085C7BE4
	movs r1, #4
	bl SpawnProc
	bl StartBmVSync
	bl sub_803CF9C
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803D084: .4byte 0x0203C984
_0803D088: .4byte 0x0203C618
_0803D08C: .4byte 0x085CA7E0
_0803D090: .4byte 0x030013F0
_0803D094: .4byte 0x03001404
_0803D098: .4byte gBmSt
_0803D09C: .4byte 0x085C7BE4

	thumb_func_start sub_803D0A0
sub_803D0A0: @ 0x0803D0A0
	push {r4, r5, lr}
	ldr r0, _0803D0E0 @ =0x030013F0
	ldr r1, _0803D0E4 @ =0x0203C984
	ldrb r1, [r1, #4]
	adds r0, r1, r0
	ldrb r0, [r0]
	bl GetUnit
	adds r4, r0, #0
	bl MU_Start
	ldr r5, _0803D0E8 @ =0x03001410
	str r0, [r5]
	movs r1, #0xe
	ldrsb r1, [r4, r1]
	lsls r1, r1, #4
	movs r2, #0xf
	ldrsb r2, [r4, r2]
	subs r2, #1
	lsls r2, r2, #4
	bl sub_80610F0
	ldr r0, [r5]
	bl sub_805F91C
	ldr r0, [r5]
	movs r1, #3
	bl sub_805FBDC
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803D0E0: .4byte 0x030013F0
_0803D0E4: .4byte 0x0203C984
_0803D0E8: .4byte 0x03001410

	thumb_func_start sub_803D0EC
sub_803D0EC: @ 0x0803D0EC
	push {lr}
	adds r2, r0, #0
	ldr r0, _0803D10C @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0803D106
	adds r0, r2, #0
	bl Proc_Break
_0803D106:
	pop {r0}
	bx r0
	.align 2, 0
_0803D10C: .4byte gKeySt

	thumb_func_start sub_803D110
sub_803D110: @ 0x0803D110
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0803D124 @ =0x0203C618
	ldrb r0, [r0]
	cmp r0, #1
	beq _0803D128
	cmp r0, #2
	beq _0803D13C
	b _0803D168
	.align 2, 0
_0803D124: .4byte 0x0203C618
_0803D128:
	ldr r0, _0803D134 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0
	beq _0803D14A
	ldr r0, _0803D138 @ =0x085CAC14
	b _0803D14C
	.align 2, 0
_0803D134: .4byte gPlaySt
_0803D138: .4byte 0x085CAC14
_0803D13C:
	ldr r0, _0803D154 @ =gPlaySt
	ldr r1, _0803D158 @ =0x085C98F4
	ldr r1, [r1]
	ldrb r0, [r0, #0xf]
	ldrb r1, [r1, #6]
	cmp r0, r1
	bne _0803D160
_0803D14A:
	ldr r0, _0803D15C @ =0x085CA974
_0803D14C:
	adds r1, r4, #0
	bl SpawnProcLocking
	b _0803D168
	.align 2, 0
_0803D154: .4byte gPlaySt
_0803D158: .4byte 0x085C98F4
_0803D15C: .4byte 0x085CA974
_0803D160:
	ldr r0, _0803D174 @ =0x085CAB24
	adds r1, r4, #0
	bl SpawnProcLocking
_0803D168:
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803D174: .4byte 0x085CAB24

	thumb_func_start sub_803D178
sub_803D178: @ 0x0803D178
	push {r4, lr}
	adds r3, r0, #0
	movs r1, #0
	ldr r0, _0803D190 @ =0x0203C618
	ldrb r2, [r0]
	cmp r2, #1
	bne _0803D194
	ldrb r0, [r0, #0xb]
	cmp r0, #1
	bne _0803D1A4
	b _0803D19A
	.align 2, 0
_0803D190: .4byte 0x0203C618
_0803D194:
	ldrb r0, [r0, #0xb]
	cmp r0, #2
	bne _0803D1A4
_0803D19A:
	adds r0, r3, #0
	movs r1, #3
	bl Proc_Goto
	b _0803D1FE
_0803D1A4:
	ldr r0, _0803D1B8 @ =0x0203C984
	ldrb r2, [r0, #1]
	adds r0, r2, #0
	cmp r0, #0xff
	bne _0803D1BC
	adds r0, r3, #0
	movs r1, #2
	bl Proc_Goto
	b _0803D1FE
	.align 2, 0
_0803D1B8: .4byte 0x0203C984
_0803D1BC:
	ldr r0, _0803D1C4 @ =gPlaySt
	strb r2, [r0, #0xf]
	ldr r2, _0803D1C8 @ =0x030013F0
	b _0803D1CE
	.align 2, 0
_0803D1C4: .4byte gPlaySt
_0803D1C8: .4byte 0x030013F0
_0803D1CC:
	adds r1, #1
_0803D1CE:
	adds r0, r1, r2
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803D1CC
	ldr r4, _0803D204 @ =0x0203C984
	strb r1, [r4, #2]
	adds r0, r1, #1
	strb r0, [r4, #3]
	bl ApplySystemObjectsGraphics
	movs r0, #0
	adds r4, #0x2c
	movs r1, #3
_0803D1E8:
	str r0, [r4, #4]
	strb r0, [r4]
	adds r4, #8
	subs r1, #1
	cmp r1, #0
	bge _0803D1E8
	movs r0, #1
	rsbs r0, r0, #0
	movs r1, #9
	bl DebugInitObj
_0803D1FE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803D204: .4byte 0x0203C984

	thumb_func_start sub_803D208
sub_803D208: @ 0x0803D208
	push {r4, r5, r6, r7, lr}
	movs r5, #4
	ldr r3, _0803D260 @ =0x0203C984
	ldr r0, _0803D264 @ =0x085C98F4
	ldr r0, [r0]
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #2
	adds r2, r3, #0
	adds r2, #0x14
	adds r0, r0, r2
	ldr r7, [r0]
	ldr r1, _0803D268 @ =0x0203C618
	adds r1, #0xec
	movs r0, #2
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0803D270
	movs r4, #0
	adds r5, r3, #0
	adds r5, #0xf
_0803D236:
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	bl sub_8035CB0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803D254
	ldr r0, _0803D264 @ =0x085C98F4
	ldr r0, [r0]
	movs r1, #6
	ldrsb r1, [r0, r1]
	adds r0, r4, r5
	ldrb r0, [r0]
	cmp r1, r0
	beq _0803D26C
_0803D254:
	adds r4, #1
	cmp r4, #3
	ble _0803D236
	movs r5, #3
	b _0803D2A0
	.align 2, 0
_0803D260: .4byte 0x0203C984
_0803D264: .4byte 0x085C98F4
_0803D268: .4byte 0x0203C618
_0803D26C:
	adds r0, r4, #0
	b _0803D2A2
_0803D270:
	movs r4, #0
	adds r6, r2, #0
_0803D274:
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	bl sub_8035CB0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803D296
	ldr r0, _0803D2A8 @ =0x085C98F4
	ldr r0, [r0]
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, r4
	beq _0803D296
	ldr r0, [r6]
	cmp r7, r0
	bls _0803D298
_0803D296:
	subs r5, #1
_0803D298:
	adds r6, #4
	adds r4, #1
	cmp r4, #3
	ble _0803D274
_0803D2A0:
	adds r0, r5, #0
_0803D2A2:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0803D2A8: .4byte 0x085C98F4

	thumb_func_start sub_803D2AC
sub_803D2AC: @ 0x0803D2AC
	push {lr}
	ldr r0, _0803D2C8 @ =0x085C7BE4
	bl Proc_EndEach
	bl sub_803EA44
	bl EndBmVSync
	movs r0, #1
	bl FadeBgmOut
	pop {r0}
	bx r0
	.align 2, 0
_0803D2C8: .4byte 0x085C7BE4

	thumb_func_start sub_803D2CC
sub_803D2CC: @ 0x0803D2CC
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov ip, r1
	ldr r1, _0803D2FC @ =0x0203C984
	ldrb r2, [r1, #2]
	adds r5, r2, #0
	strb r2, [r1, #3]
	movs r0, #0xf0
	ands r0, r3
	adds r7, r1, #0
	cmp r0, #0
	beq _0803D3BA
	lsls r4, r2, #2
	movs r0, #0x40
	ands r0, r3
	cmp r0, #0
	beq _0803D304
	ldr r0, _0803D300 @ =0x085CA7E4
	adds r0, r4, r0
	b _0803D33A
	.align 2, 0
_0803D2FC: .4byte 0x0203C984
_0803D300: .4byte 0x085CA7E4
_0803D304:
	movs r0, #0x80
	ands r0, r3
	cmp r0, #0
	beq _0803D318
	ldr r1, _0803D314 @ =0x085CA7E4
	adds r0, r4, #1
	b _0803D338
	.align 2, 0
_0803D314: .4byte 0x085CA7E4
_0803D318:
	movs r0, #0x20
	ands r0, r3
	cmp r0, #0
	beq _0803D32C
	ldr r1, _0803D328 @ =0x085CA7E4
	adds r0, r4, #2
	b _0803D338
	.align 2, 0
_0803D328: .4byte 0x085CA7E4
_0803D32C:
	movs r0, #0x10
	ands r0, r3
	cmp r0, #0
	beq _0803D33C
	ldr r1, _0803D398 @ =0x085CA7E4
	adds r0, r4, #3
_0803D338:
	adds r0, r0, r1
_0803D33A:
	ldrb r2, [r0]
_0803D33C:
	subs r5, r2, r5
	ldrb r0, [r7, #3]
	cmp r0, #0
	bne _0803D350
	movs r0, #0x20
	ands r0, r3
	cmp r0, #0
	beq _0803D350
	movs r5, #1
	rsbs r5, r5, #0
_0803D350:
	ldrb r0, [r7, #3]
	cmp r0, #0x13
	bne _0803D360
	movs r0, #0x80
	ands r0, r3
	cmp r0, #0
	beq _0803D360
	movs r5, #1
_0803D360:
	ldr r6, _0803D39C @ =0x030013F0
	mov r0, ip
	lsls r4, r0, #0x18
_0803D366:
	adds r0, r2, r6
	ldrb r0, [r0]
	lsls r1, r0, #0x18
	cmp r1, #0
	beq _0803D384
	cmp r4, #0
	beq _0803D3B8
	lsrs r1, r1, #0x1e
	ldr r0, _0803D3A0 @ =0x085C98F4
	ldr r0, [r0]
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r1, r0
	bne _0803D3B8
_0803D384:
	cmp r5, #0
	bge _0803D3A4
	subs r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0xff
	bne _0803D366
	movs r2, #0x13
	b _0803D366
	.align 2, 0
_0803D398: .4byte 0x085CA7E4
_0803D39C: .4byte 0x030013F0
_0803D3A0: .4byte 0x085C98F4
_0803D3A4:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	adds r0, r2, #0
	movs r1, #0x14
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	b _0803D366
_0803D3B8:
	strb r2, [r7, #2]
_0803D3BA:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_803D3C0
sub_803D3C0: @ 0x0803D3C0
	push {r4, r5, r6, r7, lr}
	ldr r6, _0803D42C @ =0x0203C984
	ldrb r0, [r6, #2]
	ldrb r1, [r6, #3]
	cmp r0, r1
	beq _0803D426
	ldr r7, _0803D430 @ =0x030013F0
	adds r0, r1, r7
	ldrb r0, [r0]
	bl GetUnit
	adds r5, r0, #0
	ldrb r1, [r6, #2]
	adds r0, r1, r7
	ldrb r0, [r0]
	bl GetUnit
	adds r4, r0, #0
	cmp r5, #0
	beq _0803D3F2
	bl MU_EndAll
	adds r0, r5, #0
	bl ShowUnitSprite
_0803D3F2:
	cmp r4, #0
	beq _0803D426
	movs r0, #2
	ldrh r1, [r4, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _0803D426
	ldrb r6, [r6, #2]
	adds r0, r6, r7
	ldrb r0, [r0]
	lsrs r1, r0, #6
	ldr r0, _0803D434 @ =0x085C98F4
	ldr r0, [r0]
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r1, r0
	bne _0803D426
	adds r0, r4, #0
	bl MU_Start
	bl sub_805F91C
	adds r0, r4, #0
	bl HideUnitSprite
_0803D426:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803D42C: .4byte 0x0203C984
_0803D430: .4byte 0x030013F0
_0803D434: .4byte 0x085C98F4

	thumb_func_start sub_803D438
sub_803D438: @ 0x0803D438
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r5, #0
_0803D43E:
	lsls r1, r5, #1
	adds r0, r6, #0
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r4, [r0]
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0803D46A
	adds r0, r6, #0
	adds r1, r4, #0
	bl CanUnitUseWeapon
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0803D46A
	movs r0, #1
	b _0803D472
_0803D46A:
	adds r5, #1
	cmp r5, #4
	ble _0803D43E
	movs r0, #0
_0803D472:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_803D478
sub_803D478: @ 0x0803D478
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, _0803D4AC @ =0x0203C984
	ldr r1, _0803D4B0 @ =0x0203C618
	adds r1, #0xa0
	ldrb r3, [r1]
	lsls r0, r3, #1
	adds r0, r0, r3
	ldrb r2, [r2, #9]
	cmp r2, r0
	blt _0803D4A0
	bl sub_803C2B0
	ldr r0, _0803D4B4 @ =0x085CA958
	bl StartEvent
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
_0803D4A0:
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803D4AC: .4byte 0x0203C984
_0803D4B0: .4byte 0x0203C618
_0803D4B4: .4byte 0x085CA958

	thumb_func_start sub_803D4B8
sub_803D4B8: @ 0x0803D4B8
	push {r4, lr}
	adds r4, r0, #0
	bl sub_8035D4C
	cmp r0, #7
	bgt _0803D4CA
	adds r0, r4, #0
	bl Proc_Break
_0803D4CA:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_803D4D0
sub_803D4D0: @ 0x0803D4D0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0803D5B0 @ =0x0810F430
	mov r0, sp
	movs r2, #2
	bl memcpy
	ldr r0, _0803D5B4 @ =0x0203C984
	mov r8, r0
	ldrb r1, [r0, #2]
	mov sb, r1
	bl sub_803D3C0
	ldr r4, _0803D5B8 @ =gKeySt
	ldr r0, [r4]
	ldrh r0, [r0, #6]
	movs r1, #0
	bl sub_803D2CC
	ldr r7, _0803D5BC @ =gActiveUnitId
	ldr r0, _0803D5C0 @ =0x030013F0
	mov r2, r8
	ldrb r2, [r2, #2]
	adds r0, r2, r0
	ldrb r0, [r0]
	strb r0, [r7]
	ldrb r0, [r7]
	bl GetUnit
	adds r2, r0, #0
	ldr r6, _0803D5C4 @ =gActiveUnit
	str r2, [r6]
	ldr r1, [r4]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0803D5E4
	ldrb r0, [r7]
	lsrs r1, r0, #6
	ldr r0, _0803D5C8 @ =0x085C98F4
	ldr r0, [r0]
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r1, r0
	bne _0803D5D4
	adds r0, r2, #0
	bl sub_803D438
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0803D5D4
	ldr r0, _0803D5CC @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0803D554
	movs r0, #0x69
	bl m4aSongNumStart
_0803D554:
	bl MU_EndAll
	ldr r0, [r6]
	bl MU_Start
	ldr r4, _0803D5D0 @ =0x03001410
	str r0, [r4]
	bl sub_805F91C
	ldr r0, [r4]
	mov r1, sp
	bl sub_805FD78
	ldr r1, [r6]
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	str r0, [r5, #0x2c]
	movs r0, #0xf
	ldrsb r0, [r1, r0]
	subs r0, #1
	str r0, [r5, #0x30]
	movs r0, #1
	ldrh r2, [r1, #0xc]
	orrs r0, r2
	strh r0, [r1, #0xc]
	bl sub_803CAC8
	mov r1, r8
	ldrb r0, [r1, #2]
	strb r0, [r1, #4]
	movs r0, #0x40
	movs r1, #1
	bl sub_803D2CC
	ldrb r1, [r7]
	movs r0, #1
	movs r2, #0
	movs r3, #0
	bl sub_803CB3C
	adds r0, r5, #0
	movs r1, #5
	bl Proc_Goto
	b _0803D6BC
	.align 2, 0
_0803D5B0: .4byte 0x0810F430
_0803D5B4: .4byte 0x0203C984
_0803D5B8: .4byte gKeySt
_0803D5BC: .4byte gActiveUnitId
_0803D5C0: .4byte 0x030013F0
_0803D5C4: .4byte gActiveUnit
_0803D5C8: .4byte 0x085C98F4
_0803D5CC: .4byte gPlaySt
_0803D5D0: .4byte 0x03001410
_0803D5D4:
	ldr r0, _0803D614 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0803D5E4
	movs r0, #0x6c
	bl m4aSongNumStart
_0803D5E4:
	ldr r2, _0803D618 @ =gKeySt
	ldr r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0803D620
	ldr r0, _0803D61C @ =gActiveUnit
	ldr r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r1, [r1, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _0803D620
	bl MU_EndAll
	adds r0, r5, #0
	movs r1, #4
	bl Proc_Goto
	b _0803D6BC
	.align 2, 0
_0803D614: .4byte gPlaySt
_0803D618: .4byte gKeySt
_0803D61C: .4byte gActiveUnit
_0803D620:
	ldr r1, [r2]
	movs r0, #8
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0803D658
	bl sub_803C2B0
	ldr r0, _0803D650 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0803D646
	movs r0, #0x68
	bl m4aSongNumStart
	ldr r0, _0803D654 @ =0x085CA93C
	bl StartEvent
_0803D646:
	adds r0, r5, #0
	movs r1, #2
	bl Proc_Goto
	b _0803D6BC
	.align 2, 0
_0803D650: .4byte gPlaySt
_0803D654: .4byte 0x085CA93C
_0803D658:
	ldr r0, _0803D6CC @ =gActiveUnit
	ldr r1, [r0]
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	lsls r5, r0, #4
	ldrb r1, [r1, #0xf]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r4, r1, #4
	bl SetMapCursorPosition
	bl GetGameTime
	subs r0, #1
	ldr r6, _0803D6D0 @ =0x03001408
	ldr r1, [r6]
	cmp r0, r1
	bne _0803D68E
	ldr r0, _0803D6D4 @ =0x03001404
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r1, r5, r1
	asrs r5, r1, #1
	movs r1, #2
	ldrsh r0, [r0, r1]
	adds r0, r4, r0
	asrs r4, r0, #1
_0803D68E:
	ldr r0, _0803D6D4 @ =0x03001404
	strh r5, [r0]
	strh r4, [r0, #2]
	bl GetGameTime
	str r0, [r6]
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #0
	bl PutMapCursor
	ldr r0, _0803D6D8 @ =0x0203C984
	ldrb r0, [r0, #2]
	cmp sb, r0
	beq _0803D6BC
	ldr r0, _0803D6DC @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0803D6BC
	movs r0, #0x65
	bl m4aSongNumStart
_0803D6BC:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803D6CC: .4byte gActiveUnit
_0803D6D0: .4byte 0x03001408
_0803D6D4: .4byte 0x03001404
_0803D6D8: .4byte 0x0203C984
_0803D6DC: .4byte gPlaySt

	thumb_func_start sub_803D6E0
sub_803D6E0: @ 0x0803D6E0
	push {lr}
	bl sub_803C288
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_803D6EC
sub_803D6EC: @ 0x0803D6EC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov r8, r0
	ldr r6, _0803D7C4 @ =0x0203C984
	ldrb r0, [r6, #2]
	str r0, [sp, #4]
	ldr r1, _0803D7C8 @ =gKeySt
	ldr r0, [r1]
	ldrh r0, [r0, #6]
	movs r1, #1
	bl sub_803D2CC
	ldr r2, _0803D7CC @ =gActiveUnitId
	mov sl, r2
	ldr r0, _0803D7D0 @ =0x030013F0
	mov sb, r0
	ldrb r0, [r6, #2]
	add r0, sb
	ldrb r0, [r0]
	strb r0, [r2]
	ldrb r0, [r2]
	bl GetUnit
	ldr r1, _0803D7D4 @ =gActiveUnit
	str r0, [r1]
	movs r2, #0xe
	ldrsb r2, [r0, r2]
	lsls r5, r2, #4
	movs r1, #0xf
	ldrsb r1, [r0, r1]
	lsls r4, r1, #4
	adds r0, r2, #0
	bl SetMapCursorPosition
	bl GetGameTime
	subs r0, #1
	ldr r7, _0803D7D8 @ =0x03001408
	ldr r1, [r7]
	cmp r0, r1
	bne _0803D758
	ldr r0, _0803D7DC @ =0x03001404
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r1, r5, r1
	asrs r5, r1, #1
	movs r1, #2
	ldrsh r0, [r0, r1]
	adds r0, r4, r0
	asrs r4, r0, #1
_0803D758:
	ldr r0, _0803D7DC @ =0x03001404
	strh r5, [r0]
	strh r4, [r0, #2]
	bl GetGameTime
	str r0, [r7]
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #0
	bl PutMapCursor
	ldr r2, _0803D7C8 @ =gKeySt
	ldr r0, [r2]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0803D7E4
	ldr r0, _0803D7E0 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0803D78C
	movs r0, #0x69
	bl m4aSongNumStart
_0803D78C:
	ldrb r0, [r6, #2]
	add r0, sb
	ldrb r0, [r0]
	adds r2, r6, #5
	mov r3, r8
	adds r3, #0x34
	mov r1, r8
	adds r1, #0x38
	str r1, [sp]
	movs r1, #1
	bl sub_803CBB4
	ldrb r0, [r6, #5]
	add r0, sb
	ldrb r1, [r0]
	mov r0, sl
	ldrb r2, [r0]
	movs r0, #3
	movs r3, #0
	bl sub_803CB3C
	bl sub_803C2B0
	mov r0, r8
	movs r1, #7
	bl Proc_Goto
	b _0803D892
	.align 2, 0
_0803D7C4: .4byte 0x0203C984
_0803D7C8: .4byte gKeySt
_0803D7CC: .4byte gActiveUnitId
_0803D7D0: .4byte 0x030013F0
_0803D7D4: .4byte gActiveUnit
_0803D7D8: .4byte 0x03001408
_0803D7DC: .4byte 0x03001404
_0803D7E0: .4byte gPlaySt
_0803D7E4:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803D84C
	ldr r0, _0803D840 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0803D7FC
	movs r0, #0x6b
	bl m4aSongNumStart
_0803D7FC:
	ldr r0, _0803D844 @ =0x03001410
	ldr r0, [r0]
	bl sub_80608EC
	ldrb r0, [r6, #4]
	add r0, sb
	ldrb r0, [r0]
	bl GetUnit
	ldr r1, _0803D848 @ =0x0000FFFE
	ldrh r2, [r0, #0xc]
	ands r1, r2
	strh r1, [r0, #0xc]
	bl sub_803CAC8
	ldrb r0, [r6, #4]
	strb r0, [r6, #2]
	adds r0, #1
	strb r0, [r6, #3]
	mov r0, sl
	ldrb r1, [r0]
	ldrb r0, [r6, #4]
	add r0, sb
	ldrb r2, [r0]
	movs r0, #2
	movs r3, #0
	bl sub_803CB3C
	mov r0, r8
	movs r1, #1
	bl Proc_Goto
	b _0803D892
	.align 2, 0
_0803D840: .4byte gPlaySt
_0803D844: .4byte 0x03001410
_0803D848: .4byte 0x0000FFFE
_0803D84C:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0803D878
	ldr r2, _0803D874 @ =gActiveUnit
	ldr r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r1, [r1, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _0803D878
	bl MU_EndAll
	mov r0, r8
	movs r1, #6
	bl Proc_Goto
	b _0803D892
	.align 2, 0
_0803D874: .4byte gActiveUnit
_0803D878:
	ldr r0, _0803D8A4 @ =0x0203C984
	ldr r1, [sp, #4]
	ldrb r0, [r0, #2]
	cmp r1, r0
	beq _0803D892
	ldr r0, _0803D8A8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0803D892
	movs r0, #0x65
	bl m4aSongNumStart
_0803D892:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803D8A4: .4byte 0x0203C984
_0803D8A8: .4byte gPlaySt

	thumb_func_start sub_803D8AC
sub_803D8AC: @ 0x0803D8AC
	push {r4, lr}
	adds r4, r0, #0
	bl ResetTextFont
	ldr r1, _0803D8EC @ =0x0203C984
	movs r0, #0xff
	strb r0, [r1, #6]
	ldr r0, _0803D8F0 @ =0x030013F0
	ldrb r1, [r1, #4]
	adds r0, r1, r0
	ldrb r0, [r0]
	bl GetUnit
	ldr r1, _0803D8F4 @ =gActiveUnit
	str r0, [r1]
	bl sub_803CA90
	bl GetGameLock
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, #0x64
	strh r0, [r4]
	movs r0, #4
	bl ApplyIconPalettes
	ldr r0, _0803D8F8 @ =0x085CB384
	bl sub_8041834
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803D8EC: .4byte 0x0203C984
_0803D8F0: .4byte 0x030013F0
_0803D8F4: .4byte gActiveUnit
_0803D8F8: .4byte 0x085CB384

	thumb_func_start sub_803D8FC
sub_803D8FC: @ 0x0803D8FC
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0x64
	movs r1, #0
	ldrsh r4, [r0, r1]
	bl GetGameLock
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r4, r0
	bne _0803D92E
	ldr r0, _0803D934 @ =0x0203C984
	ldrb r0, [r0, #6]
	cmp r0, #0
	bne _0803D928
	ldr r0, _0803D938 @ =gActiveUnit
	ldr r0, [r0]
	bl sub_803CAAC
	adds r0, r5, #0
	bl Proc_End
_0803D928:
	adds r0, r5, #0
	bl Proc_Break
_0803D92E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803D934: .4byte 0x0203C984
_0803D938: .4byte gActiveUnit

	thumb_func_start sub_803D93C
sub_803D93C: @ 0x0803D93C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, _0803D974 @ =gActiveUnit
	ldr r0, [r0]
	ldr r6, _0803D978 @ =0x0203C984
	ldrb r2, [r6, #7]
	lsls r1, r2, #1
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r5, [r0]
	bl GetGameLock
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, #0x64
	strh r0, [r4]
	adds r0, r5, #0
	bl GetItemMinRange
	cmp r0, #1
	bne _0803D97C
	adds r0, r5, #0
	bl GetItemMaxRange
	cmp r0, #1
	bne _0803D97C
	strb r0, [r6, #6]
	b _0803D9FE
	.align 2, 0
_0803D974: .4byte gActiveUnit
_0803D978: .4byte 0x0203C984
_0803D97C:
	adds r0, r5, #0
	bl GetItemMinRange
	cmp r0, #2
	bne _0803D99C
	adds r0, r5, #0
	bl GetItemMaxRange
	adds r1, r0, #0
	cmp r1, #2
	bne _0803D99C
	ldr r0, _0803D998 @ =0x0203C984
	strb r1, [r0, #6]
	b _0803D9FE
	.align 2, 0
_0803D998: .4byte 0x0203C984
_0803D99C:
	adds r0, r5, #0
	bl GetItemMinRange
	adds r4, r0, #0
	cmp r4, #2
	bne _0803D9BC
	adds r0, r5, #0
	bl GetItemMaxRange
	cmp r0, #3
	bne _0803D9BC
	ldr r0, _0803D9B8 @ =0x0203C984
	strb r4, [r0, #6]
	b _0803D9FE
	.align 2, 0
_0803D9B8: .4byte 0x0203C984
_0803D9BC:
	ldr r0, _0803D9DC @ =0x030013F0
	ldr r4, _0803D9E0 @ =0x0203C984
	ldrb r1, [r4, #5]
	adds r0, r1, r0
	ldrb r0, [r0]
	bl GetUnit
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	bne _0803D9E4
	movs r0, #1
	strb r0, [r4, #6]
	b _0803D9FE
	.align 2, 0
_0803D9DC: .4byte 0x030013F0
_0803D9E0: .4byte 0x0203C984
_0803D9E4:
	adds r0, r5, #0
	bl GetItemMinRange
	cmp r0, #1
	ble _0803D9F4
	movs r0, #2
	strb r0, [r4, #6]
	b _0803D9FE
_0803D9F4:
	movs r0, #1
	strb r0, [r4, #6]
	movs r0, #4
	bl ApplyIconPalettes
_0803D9FE:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_803DA04
sub_803DA04: @ 0x0803DA04
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0
	mov sl, r0
	ldr r4, _0803DA60 @ =0x030013F0
	ldr r7, _0803DA64 @ =0x0203C984
	ldrb r1, [r7, #4]
	adds r0, r1, r4
	ldrb r0, [r0]
	bl GetUnit
	mov sb, r0
	ldrb r0, [r7, #5]
	adds r4, r0, r4
	ldrb r0, [r4]
	bl GetUnit
	adds r5, r0, #0
	adds r0, r6, #0
	adds r0, #0x64
	movs r1, #0
	ldrsh r4, [r0, r1]
	bl GetGameLock
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r4, r0
	bne _0803DAD8
	ldrb r0, [r7, #6]
	cmp r0, #0
	bne _0803DA6C
	ldr r0, _0803DA68 @ =gActiveUnit
	ldr r0, [r0]
	bl sub_803CAAC
	adds r0, r6, #0
	movs r1, #0
	bl Proc_Goto
	b _0803DAD8
	.align 2, 0
_0803DA60: .4byte 0x030013F0
_0803DA64: .4byte 0x0203C984
_0803DA68: .4byte gActiveUnit
_0803DA6C:
	ldr r0, _0803DAC4 @ =gActiveUnit
	mov r8, r0
	ldr r0, [r0]
	ldrb r1, [r7, #7]
	bl UnitEquipItemSlot
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r1, [r5, #0xc]
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	bne _0803DAC8
	adds r0, r6, #0
	bl sub_802E308
	ldrb r7, [r7, #6]
	cmp r7, #2
	bne _0803DA98
	movs r0, #1
	mov sl, r0
_0803DA98:
	movs r2, #0xe
	ldrsb r2, [r5, r2]
	add r2, sl
	movs r3, #0xf
	ldrsb r3, [r5, r3]
	adds r3, #1
	str r4, [sp]
	mov r0, sb
	adds r1, r5, #0
	bl BattleGenerateSimulation
	bl sub_802E36C
	mov r1, r8
	ldr r0, [r1]
	bl sub_803CAAC
	adds r0, r6, #0
	bl Proc_Break
	b _0803DAD8
	.align 2, 0
_0803DAC4: .4byte gActiveUnit
_0803DAC8:
	mov r1, r8
	ldr r0, [r1]
	bl sub_803CAAC
	adds r0, r6, #0
	movs r1, #1
	bl Proc_Goto
_0803DAD8:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_803DAE8
sub_803DAE8: @ 0x0803DAE8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0803DB18 @ =gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0803DB20
	ldr r0, _0803DB1C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0803DB0A
	movs r0, #0x6a
	bl m4aSongNumStart
_0803DB0A:
	bl sub_802E394
	adds r0, r4, #0
	bl Proc_Break
	b _0803DB44
	.align 2, 0
_0803DB18: .4byte gKeySt
_0803DB1C: .4byte gPlaySt
_0803DB20:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0803DB44
	ldr r0, _0803DB4C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0803DB38
	movs r0, #0x6b
	bl m4aSongNumStart
_0803DB38:
	bl sub_802E394
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
_0803DB44:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803DB4C: .4byte gPlaySt

	thumb_func_start sub_803DB50
sub_803DB50: @ 0x0803DB50
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0803DB68 @ =0x085CA834
	adds r1, r4, #0
	bl SpawnProcLocking
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803DB68: .4byte 0x085CA834

	thumb_func_start sub_803DB6C
sub_803DB6C: @ 0x0803DB6C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, _0803DBA0 @ =0x030013F0
	ldr r6, _0803DBA4 @ =0x0203C984
	ldrb r1, [r6, #5]
	adds r0, r1, r0
	ldrb r0, [r0]
	bl GetUnit
	adds r4, r0, #0
	bl ClearBg0Bg1
	ldrb r0, [r6, #6]
	cmp r0, #0
	bne _0803DBF8
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r1, [r4, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _0803DBAC
	ldr r0, _0803DBA8 @ =0x03001410
	ldr r0, [r0, #4]
	bl sub_80608EC
	b _0803DBB4
	.align 2, 0
_0803DBA0: .4byte 0x030013F0
_0803DBA4: .4byte 0x0203C984
_0803DBA8: .4byte 0x03001410
_0803DBAC:
	ldr r0, [r5, #0x34]
	strb r0, [r4, #0xe]
	ldr r0, [r5, #0x38]
	strb r0, [r4, #0xf]
_0803DBB4:
	ldr r0, _0803DBEC @ =0x0000FFFE
	ldrh r1, [r4, #0xc]
	ands r0, r1
	strh r0, [r4, #0xc]
	bl RefreshUnitSprites
	ldr r1, _0803DBF0 @ =0x0203C984
	ldrb r0, [r1, #5]
	strb r0, [r1, #2]
	adds r0, #1
	strb r0, [r1, #3]
	ldr r0, _0803DBF4 @ =0x030013F0
	ldrb r1, [r1, #5]
	adds r0, r1, r0
	ldrb r2, [r0]
	movs r0, #4
	movs r1, #0
	movs r3, #0
	bl sub_803CB3C
	adds r0, r5, #0
	bl sub_803D6E0
	adds r0, r5, #0
	movs r1, #5
	bl Proc_Goto
	b _0803DC2E
	.align 2, 0
_0803DBEC: .4byte 0x0000FFFE
_0803DBF0: .4byte 0x0203C984
_0803DBF4: .4byte 0x030013F0
_0803DBF8:
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r1, [r4, #0xc]
	ands r0, r1
	cmp r0, #0
	beq _0803DC22
	adds r0, r4, #0
	bl MU_Start
	ldr r1, _0803DC34 @ =0x03001410
	str r0, [r1, #4]
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	str r0, [r5, #0x34]
	movs r0, #0xf
	ldrsb r0, [r4, r0]
	str r0, [r5, #0x38]
	ldr r0, _0803DC38 @ =0x0000FDFF
	ldrh r1, [r4, #0xc]
	ands r0, r1
	strh r0, [r4, #0xc]
_0803DC22:
	ldrb r2, [r6, #6]
	ldrb r3, [r6, #7]
	movs r0, #5
	movs r1, #0
	bl sub_803CB3C
_0803DC2E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803DC34: .4byte 0x03001410
_0803DC38: .4byte 0x0000FDFF

	thumb_func_start sub_803DC3C
sub_803DC3C: @ 0x0803DC3C
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	sub sp, #0xc
	adds r6, r0, #0
	ldr r4, _0803DCB4 @ =0x030013F0
	ldr r5, _0803DCB8 @ =0x0203C984
	ldrb r1, [r5, #4]
	adds r0, r1, r4
	ldrb r0, [r0]
	bl GetUnit
	mov r8, r0
	ldrb r5, [r5, #5]
	adds r4, r5, r4
	ldrb r0, [r4]
	bl GetUnit
	adds r4, r0, #0
	ldr r0, [r6, #0x2c]
	movs r1, #0
	mov sb, r1
	mov r1, r8
	strb r0, [r1, #0xe]
	ldr r0, [r6, #0x30]
	strb r0, [r1, #0xf]
	ldr r0, [r6, #0x34]
	strb r0, [r4, #0xe]
	ldr r0, [r6, #0x38]
	strb r0, [r4, #0xf]
	ldr r5, _0803DCBC @ =0x03001410
	ldr r1, [r5]
	movs r0, #1
	str r0, [sp]
	str r0, [sp, #4]
	str r6, [sp, #8]
	mov r0, r8
	movs r2, #6
	movs r3, #5
	bl sub_803F8E0
	ldr r1, [r5, #4]
	mov r0, sb
	str r0, [sp]
	str r0, [sp, #4]
	str r6, [sp, #8]
	adds r0, r4, #0
	movs r2, #8
	movs r3, #5
	bl sub_803F8E0
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803DCB4: .4byte 0x030013F0
_0803DCB8: .4byte 0x0203C984
_0803DCBC: .4byte 0x03001410

	thumb_func_start sub_803DCC0
sub_803DCC0: @ 0x0803DCC0
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	ldr r4, _0803DD18 @ =0x030013F0
	ldr r5, _0803DD1C @ =0x0203C984
	ldrb r1, [r5, #4]
	adds r0, r1, r4
	ldrb r0, [r0]
	bl GetUnit
	adds r7, r0, #0
	ldr r1, _0803DD20 @ =0x0810F432
	mov r0, sp
	movs r2, #2
	bl memcpy
	ldr r6, _0803DD24 @ =0x03001410
	ldr r0, [r6, #4]
	bl sub_80608EC
	ldrb r5, [r5, #5]
	adds r4, r5, r4
	ldrb r0, [r4]
	bl GetUnit
	ldr r1, _0803DD28 @ =0x0000FFFE
	ldrh r2, [r0, #0xc]
	ands r1, r2
	strh r1, [r0, #0xc]
	ldr r0, _0803DD2C @ =0x0300140C
	ldrb r0, [r0, #2]
	cmp r0, #1
	bne _0803DD0C
	ldr r0, [r6]
	mov r1, sp
	bl sub_805FD78
	movs r0, #7
	strb r0, [r7, #0xe]
_0803DD0C:
	bl sub_803CAC8
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803DD18: .4byte 0x030013F0
_0803DD1C: .4byte 0x0203C984
_0803DD20: .4byte 0x0810F432
_0803DD24: .4byte 0x03001410
_0803DD28: .4byte 0x0000FFFE
_0803DD2C: .4byte 0x0300140C

	thumb_func_start sub_803DD30
sub_803DD30: @ 0x0803DD30
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	bl MU_IsAnyActive
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _0803DD9E
	ldr r4, _0803DDA8 @ =0x030013F0
	ldr r5, _0803DDAC @ =0x0203C984
	ldrb r1, [r5, #4]
	adds r0, r1, r4
	ldrb r0, [r0]
	bl GetUnit
	adds r6, r0, #0
	ldrb r2, [r5, #5]
	adds r0, r2, r4
	ldrb r0, [r0]
	bl GetUnit
	mov r8, r0
	adds r0, r6, #0
	bl HideUnitSprite
	ldr r1, _0803DDB0 @ =gAction
	movs r0, #2
	strb r0, [r1, #0x11]
	ldrb r5, [r5, #5]
	adds r4, r5, r4
	ldrb r0, [r4]
	strb r0, [r1, #0xd]
	ldr r0, _0803DDB4 @ =0x0300140C
	ldrb r1, [r0, #3]
	adds r0, r6, #0
	bl UnitEquipItemSlot
	adds r0, r6, #0
	mov r1, r8
	bl BattleGenerateReal
	ldr r1, _0803DDB8 @ =gBmSt
	movs r0, #0x40
	ldrb r2, [r1, #4]
	orrs r0, r2
	strb r0, [r1, #4]
	ldr r0, _0803DDBC @ =0x085CADA4
	adds r1, r7, #0
	bl SpawnProcLocking
	adds r0, r7, #0
	bl Proc_Break
_0803DD9E:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803DDA8: .4byte 0x030013F0
_0803DDAC: .4byte 0x0203C984
_0803DDB0: .4byte gAction
_0803DDB4: .4byte 0x0300140C
_0803DDB8: .4byte gBmSt
_0803DDBC: .4byte 0x085CADA4

	thumb_func_start sub_803DDC0
sub_803DDC0: @ 0x0803DDC0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sl, r0
	ldr r0, _0803DEAC @ =0x030013F0
	ldr r1, _0803DEB0 @ =0x0203C984
	mov r8, r1
	ldrb r2, [r1, #4]
	adds r1, r2, r0
	ldrb r4, [r1]
	mov r3, r8
	ldrb r3, [r3, #5]
	adds r0, r3, r0
	ldrb r5, [r0]
	adds r0, r4, #0
	bl GetUnit
	adds r6, r0, #0
	adds r0, r5, #0
	bl GetUnit
	adds r7, r0, #0
	bl sub_803CF58
	lsrs r0, r4, #6
	lsls r0, r0, #3
	mov r2, r8
	adds r2, #0x30
	adds r3, r0, r2
	ldr r1, _0803DEB4 @ =gBattleUnitA
	mov sb, r1
	adds r1, #0x6a
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	str r1, [r3]
	add r0, r8
	adds r0, #0x2c
	movs r3, #0
	strb r4, [r0]
	strb r3, [r6, #9]
	lsrs r0, r5, #6
	lsls r0, r0, #3
	adds r2, r0, r2
	ldr r4, _0803DEB8 @ =gBattleUnitB
	adds r1, r4, #0
	adds r1, #0x6a
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	str r1, [r2]
	add r0, r8
	adds r0, #0x2c
	strb r5, [r0]
	strb r3, [r7, #9]
	adds r0, r6, #0
	bl sub_8040CA8
	adds r0, r7, #0
	bl sub_8040CA8
	adds r0, r6, #0
	movs r1, #0
	bl SetUnitStatus
	adds r0, r7, #0
	movs r1, #0
	bl SetUnitStatus
	bl MU_EndAll
	adds r0, r6, #0
	bl GetUnitCurrentHp
	cmp r0, #0
	beq _0803DE6A
	adds r0, r6, #0
	bl ShowUnitSprite
	ldr r0, _0803DEBC @ =0x0000FFFE
	ldrh r2, [r6, #0xc]
	ands r0, r2
	strh r0, [r6, #0xc]
_0803DE6A:
	bl sub_803CAC8
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	adds r0, r6, #0
	bl GetUnitCurrentHp
	mov r1, sb
	adds r1, #0x6e
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	cmp r0, r1
	bne _0803DEC0
	adds r0, r7, #0
	bl GetUnitCurrentHp
	adds r1, r4, #0
	adds r1, #0x6e
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	cmp r0, r1
	bne _0803DEC0
	mov r3, r8
	ldrb r0, [r3, #9]
	adds r0, #1
	strb r0, [r3, #9]
	b _0803DEC6
	.align 2, 0
_0803DEAC: .4byte 0x030013F0
_0803DEB0: .4byte 0x0203C984
_0803DEB4: .4byte gBattleUnitA
_0803DEB8: .4byte gBattleUnitB
_0803DEBC: .4byte 0x0000FFFE
_0803DEC0:
	ldr r1, _0803DEDC @ =0x0203C984
	movs r0, #0
	strb r0, [r1, #9]
_0803DEC6:
	mov r0, sl
	bl Proc_Break
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803DEDC: .4byte 0x0203C984

	thumb_func_start sub_803DEE0
sub_803DEE0: @ 0x0803DEE0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	str r0, [sp, #0xc]
	ldr r1, _0803DF4C @ =0x030013F0
	ldr r0, _0803DF50 @ =0x0203C984
	mov sb, r0
	ldrb r2, [r0, #4]
	adds r0, r2, r1
	ldrb r0, [r0]
	adds r5, r0, #0
	mov r3, sb
	ldrb r3, [r3, #5]
	adds r1, r3, r1
	ldrb r1, [r1]
	mov sl, r1
	bl GetUnit
	adds r4, r0, #0
	mov r0, sl
	bl GetUnit
	mov r8, r0
	movs r7, #0
	adds r0, r5, #0
	bl sub_803CB94
	str r0, [sp, #0x10]
	mov r0, sl
	bl sub_803CB94
	str r0, [sp, #0x14]
	ldr r6, _0803DF54 @ =0x03001410
	str r7, [r6, #4]
	str r7, [r6]
	movs r0, #4
	ldrh r1, [r4, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _0803DF3C
	ldr r0, [r4]
	cmp r0, #0
	bne _0803DF58
_0803DF3C:
	lsrs r0, r5, #6
	mov r1, sb
	adds r1, #0xa
	adds r0, r0, r1
	ldrb r1, [r0]
	subs r1, #1
	strb r1, [r0]
	b _0803DF90
	.align 2, 0
_0803DF4C: .4byte 0x030013F0
_0803DF50: .4byte 0x0203C984
_0803DF54: .4byte 0x03001410
_0803DF58:
	adds r0, r4, #0
	bl MU_Start
	str r0, [r6]
	bl sub_805F91C
	movs r0, #1
	ldrh r2, [r4, #0xc]
	orrs r0, r2
	strh r0, [r4, #0xc]
	movs r7, #1
	ldr r1, [r6]
	ldr r2, _0803DFB8 @ =0x0810F3B0
	ldr r3, [sp, #0x10]
	lsls r0, r3, #2
	adds r0, r0, r2
	movs r5, #0
	ldrsh r2, [r0, r5]
	movs r5, #2
	ldrsh r3, [r0, r5]
	movs r0, #2
	str r0, [sp]
	str r7, [sp, #4]
	ldr r0, [sp, #0xc]
	str r0, [sp, #8]
	adds r0, r4, #0
	bl sub_803F8E0
_0803DF90:
	movs r0, #4
	mov r1, r8
	ldrh r1, [r1, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _0803DFA4
	mov r2, r8
	ldr r0, [r2]
	cmp r0, #0
	bne _0803DFC0
_0803DFA4:
	ldr r0, _0803DFBC @ =0x0203C984
	mov r3, sl
	lsrs r1, r3, #6
	adds r0, #0xa
	adds r1, r1, r0
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	b _0803E006
	.align 2, 0
_0803DFB8: .4byte 0x0810F3B0
_0803DFBC: .4byte 0x0203C984
_0803DFC0:
	mov r0, r8
	bl MU_Start
	ldr r4, _0803E020 @ =0x03001410
	str r0, [r4, #4]
	bl sub_805F91C
	movs r0, #1
	mov r5, r8
	ldrh r5, [r5, #0xc]
	orrs r0, r5
	mov r1, r8
	strh r0, [r1, #0xc]
	adds r0, r7, #0
	movs r7, #0
	cmp r0, #0
	bne _0803DFE4
	movs r7, #1
_0803DFE4:
	ldr r1, [r4, #4]
	ldr r2, _0803E024 @ =0x0810F3B0
	ldr r3, [sp, #0x14]
	lsls r0, r3, #2
	adds r0, r0, r2
	movs r4, #0
	ldrsh r2, [r0, r4]
	movs r5, #2
	ldrsh r3, [r0, r5]
	movs r0, #2
	str r0, [sp]
	str r7, [sp, #4]
	ldr r0, [sp, #0xc]
	str r0, [sp, #8]
	mov r0, r8
	bl sub_803F8E0
_0803E006:
	bl sub_803CAC8
	ldr r0, [sp, #0xc]
	bl Proc_Break
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803E020: .4byte 0x03001410
_0803E024: .4byte 0x0810F3B0

	thumb_func_start sub_803E028
sub_803E028: @ 0x0803E028
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	movs r2, #0
_0803E032:
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
	str r2, [sp]
	bl sub_8035CB0
	lsls r0, r0, #0x18
	ldr r2, [sp]
	adds r1, r2, #1
	mov r8, r1
	cmp r0, #0
	beq _0803E098
	movs r6, #0
	movs r7, #0
	ldr r0, _0803E0AC @ =0x030013F0
	adds r4, r2, r0
	movs r5, #4
_0803E052:
	ldrb r0, [r4]
	cmp r0, #0
	beq _0803E080
	adds r7, #1
	str r2, [sp]
	bl GetUnit
	adds r1, r0, #0
	movs r0, #4
	ldrh r3, [r1, #0xc]
	ands r0, r3
	ldr r2, [sp]
	cmp r0, #0
	bne _0803E080
	adds r0, r1, #0
	bl sub_803D438
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r2, [sp]
	cmp r0, #1
	bne _0803E080
	adds r6, #1
_0803E080:
	adds r4, #5
	subs r5, #1
	cmp r5, #0
	bge _0803E052
	cmp r6, #0
	bne _0803E098
	cmp r7, #0
	beq _0803E098
	ldr r0, _0803E0B0 @ =0x0203C984
	adds r0, #0xa
	adds r0, r2, r0
	strb r6, [r0]
_0803E098:
	mov r2, r8
	cmp r2, #3
	ble _0803E032
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803E0AC: .4byte 0x030013F0
_0803E0B0: .4byte 0x0203C984

	thumb_func_start sub_803E0B4
sub_803E0B4: @ 0x0803E0B4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	ldr r0, _0803E154 @ =0x030013F0
	ldr r5, _0803E158 @ =0x0203C984
	ldrb r2, [r5, #4]
	adds r1, r2, r0
	ldrb r7, [r1]
	ldrb r1, [r5, #5]
	adds r0, r1, r0
	ldrb r6, [r0]
	adds r0, r7, #0
	bl GetUnit
	adds r4, r0, #0
	adds r0, r6, #0
	bl GetUnit
	adds r2, r0, #0
	ldrh r1, [r4, #0xc]
	movs r3, #4
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	bne _0803E0EE
	ldr r0, _0803E15C @ =0x0000FFFE
	ands r0, r1
	strh r0, [r4, #0xc]
_0803E0EE:
	ldrh r1, [r2, #0xc]
	adds r0, r3, #0
	ands r0, r1
	cmp r0, #0
	bne _0803E0FE
	ldr r0, _0803E15C @ =0x0000FFFE
	ands r0, r1
	strh r0, [r2, #0xc]
_0803E0FE:
	lsrs r0, r7, #6
	adds r1, r0, #0
	adds r2, r5, #0
	adds r2, #0xa
	adds r0, r1, r2
	ldrb r0, [r0]
	adds r5, r1, #0
	cmp r0, #0
	beq _0803E11A
	lsrs r1, r6, #6
	adds r0, r1, r2
	ldrb r0, [r0]
	cmp r0, #0
	bne _0803E176
_0803E11A:
	adds r4, r1, #0
	ldr r2, _0803E158 @ =0x0203C984
	ldr r3, _0803E160 @ =0x0203C618
	adds r3, #0xa0
	ldrb r7, [r3]
	ldrb r1, [r2, #0xe]
	subs r0, r7, r1
	adds r1, r2, #0
	adds r1, #0xf
	adds r0, r0, r1
	strb r4, [r0]
	ldrb r0, [r2, #0xe]
	adds r0, #1
	strb r0, [r2, #0xe]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldrb r3, [r3]
	cmp r0, r3
	bne _0803E176
	adds r1, r5, #0
	adds r0, r2, #0
	adds r0, #0xa
	adds r0, r1, r0
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803E164
	adds r4, r1, #0
	b _0803E166
	.align 2, 0
_0803E154: .4byte 0x030013F0
_0803E158: .4byte 0x0203C984
_0803E15C: .4byte 0x0000FFFE
_0803E160: .4byte 0x0203C618
_0803E164:
	lsrs r4, r6, #6
_0803E166:
	strb r4, [r2, #0xf]
	movs r0, #0xff
	bl sub_803CAD8
	mov r0, r8
	bl Proc_Break
	b _0803E184
_0803E176:
	ldr r0, _0803E190 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	bl sub_803CAD8
	mov r0, r8
	bl Proc_Break
_0803E184:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803E190: .4byte gPlaySt

	thumb_func_start sub_803E194
sub_803E194: @ 0x0803E194
	push {lr}
	bl MU_EndAll
	bl MU_EndAll
	bl sub_803CD74
	bl sub_803CDD4
	bl RefreshUnitSprites
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_803E1B0
sub_803E1B0: @ 0x0803E1B0
	push {lr}
	ldr r0, _0803E1DC @ =gKeySt
	ldr r1, [r0]
	movs r0, #2
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0803E1D8
	ldr r0, _0803E1E0 @ =0x0300456C
	movs r2, #0
	movs r1, #0x14
	strb r1, [r0]
	ldr r1, _0803E1E4 @ =0x085C98F4
	ldr r1, [r1]
	ldrb r1, [r1, #6]
	strb r1, [r0, #1]
	strh r2, [r0, #2]
	movs r1, #4
	bl sub_8035DC8
_0803E1D8:
	pop {r0}
	bx r0
	.align 2, 0
_0803E1DC: .4byte gKeySt
_0803E1E0: .4byte 0x0300456C
_0803E1E4: .4byte 0x085C98F4

	thumb_func_start sub_803E1E8
sub_803E1E8: @ 0x0803E1E8
	ldrb r0, [r0]
	cmp r0, #1
	beq _0803E1FA
	cmp r0, #1
	blt _0803E1FE
	cmp r0, #7
	bgt _0803E1FE
	cmp r0, #6
	blt _0803E1FE
_0803E1FA:
	movs r0, #1
	b _0803E200
_0803E1FE:
	movs r0, #0
_0803E200:
	bx lr
	.align 2, 0

	thumb_func_start sub_803E204
sub_803E204: @ 0x0803E204
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	ldr r4, _0803E22C @ =0x0300140C
	ldr r2, _0803E230 @ =sub_803E1E8
	adds r0, r4, #0
	add r1, sp, #4
	bl sub_80362B0
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0803E2AC
	ldrb r0, [r4]
	cmp r0, #6
	beq _0803E25C
	cmp r0, #6
	bgt _0803E234
	cmp r0, #1
	beq _0803E23A
	b _0803E2AC
	.align 2, 0
_0803E22C: .4byte 0x0300140C
_0803E230: .4byte sub_803E1E8
_0803E234:
	cmp r0, #7
	beq _0803E294
	b _0803E2AC
_0803E23A:
	ldrb r0, [r4, #1]
	ldr r2, _0803E258 @ =0x0203C988
	adds r3, r5, #0
	adds r3, #0x2c
	adds r1, r5, #0
	adds r1, #0x30
	str r1, [sp]
	movs r1, #0
	bl sub_803CBB4
	adds r0, r5, #0
	movs r1, #1
	bl Proc_Goto
	b _0803E2AC
	.align 2, 0
_0803E258: .4byte 0x0203C988
_0803E25C:
	bl sub_803C2B0
	add r1, sp, #4
	ldrb r2, [r1]
	lsls r0, r2, #4
	subs r0, r0, r2
	ldr r1, _0803E288 @ =0x0203C6B9
	adds r0, r0, r1
	ldr r1, _0803E28C @ =0x03001428
	bl sub_80368DC
	ldr r0, _0803E290 @ =0x085CA884
	movs r1, #0x60
	movs r2, #0
	movs r3, #0
	bl StartPopup
	adds r0, r5, #0
	movs r1, #3
	bl Proc_Goto
	b _0803E2AC
	.align 2, 0
_0803E288: .4byte 0x0203C6B9
_0803E28C: .4byte 0x03001428
_0803E290: .4byte 0x085CA884
_0803E294:
	bl sub_803C2B0
	ldr r0, _0803E2B8 @ =0x085CA8A4
	movs r1, #0x60
	movs r2, #0
	movs r3, #0
	bl StartPopup
	adds r0, r5, #0
	movs r1, #4
	bl Proc_Goto
_0803E2AC:
	bl sub_803E1B0
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803E2B8: .4byte 0x085CA8A4

	thumb_func_start sub_803E2BC
sub_803E2BC: @ 0x0803E2BC
	ldrb r0, [r0]
	cmp r0, #3
	bgt _0803E2CA
	cmp r0, #2
	blt _0803E2CA
	movs r0, #1
	b _0803E2CC
_0803E2CA:
	movs r0, #0
_0803E2CC:
	bx lr
	.align 2, 0

	thumb_func_start sub_803E2D0
sub_803E2D0: @ 0x0803E2D0
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	ldr r4, _0803E2F4 @ =0x0300140C
	ldr r2, _0803E2F8 @ =sub_803E2BC
	adds r0, r4, #0
	add r1, sp, #4
	bl sub_80362B0
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0803E360
	ldrb r0, [r4]
	cmp r0, #2
	beq _0803E2FC
	cmp r0, #3
	beq _0803E344
	b _0803E360
	.align 2, 0
_0803E2F4: .4byte 0x0300140C
_0803E2F8: .4byte sub_803E2BC
_0803E2FC:
	ldrb r0, [r4, #2]
	bl GetUnit
	adds r4, r0, #0
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r1, [r4, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _0803E320
	ldr r0, _0803E31C @ =0x03001410
	ldr r0, [r0]
	bl sub_80608EC
	b _0803E328
	.align 2, 0
_0803E31C: .4byte 0x03001410
_0803E320:
	ldr r0, [r5, #0x2c]
	strb r0, [r4, #0xe]
	ldr r0, [r5, #0x30]
	strb r0, [r4, #0xf]
_0803E328:
	ldr r0, _0803E340 @ =0x0000FFFE
	ldrh r1, [r4, #0xc]
	ands r0, r1
	strh r0, [r4, #0xc]
	bl RefreshUnitSprites
	adds r0, r5, #0
	movs r1, #0
	bl Proc_Goto
	b _0803E360
	.align 2, 0
_0803E340: .4byte 0x0000FFFE
_0803E344:
	ldrb r0, [r4, #1]
	ldr r2, _0803E36C @ =0x0203C989
	adds r3, r5, #0
	adds r3, #0x34
	adds r1, r5, #0
	adds r1, #0x38
	str r1, [sp]
	movs r1, #1
	bl sub_803CBB4
	adds r0, r5, #0
	movs r1, #2
	bl Proc_Goto
_0803E360:
	bl sub_803E1B0
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803E36C: .4byte 0x0203C989

	thumb_func_start sub_803E370
sub_803E370: @ 0x0803E370
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r6, r2, #0
	mov r8, r3
	bl MU_Start
	ldr r1, _0803E3AC @ =0x03001410
	lsls r4, r4, #2
	adds r4, r4, r1
	str r0, [r4]
	movs r0, #0xe
	ldrsb r0, [r5, r0]
	str r0, [r6]
	movs r0, #0xf
	ldrsb r0, [r5, r0]
	mov r1, r8
	str r0, [r1]
	ldr r0, _0803E3B0 @ =0x0000FDFF
	ldrh r1, [r5, #0xc]
	ands r0, r1
	strh r0, [r5, #0xc]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803E3AC: .4byte 0x03001410
_0803E3B0: .4byte 0x0000FDFF

	thumb_func_start sub_803E3B4
sub_803E3B4: @ 0x0803E3B4
	ldrb r0, [r0]
	cmp r0, #5
	bgt _0803E3C2
	cmp r0, #4
	blt _0803E3C2
	movs r0, #1
	b _0803E3C4
_0803E3C2:
	movs r0, #0
_0803E3C4:
	bx lr
	.align 2, 0

	thumb_func_start sub_803E3C8
sub_803E3C8: @ 0x0803E3C8
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldr r4, _0803E3EC @ =0x0300140C
	ldr r2, _0803E3F0 @ =sub_803E3B4
	adds r0, r4, #0
	mov r1, sp
	bl sub_80362B0
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0803E496
	ldrb r0, [r4]
	cmp r0, #4
	beq _0803E3F4
	cmp r0, #5
	beq _0803E43C
	b _0803E496
	.align 2, 0
_0803E3EC: .4byte 0x0300140C
_0803E3F0: .4byte sub_803E3B4
_0803E3F4:
	ldrb r0, [r4, #2]
	bl GetUnit
	adds r6, r0, #0
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r1, [r6, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _0803E418
	ldr r0, _0803E414 @ =0x03001410
	ldr r0, [r0, #4]
	bl sub_80608EC
	b _0803E420
	.align 2, 0
_0803E414: .4byte 0x03001410
_0803E418:
	ldr r0, [r7, #0x34]
	strb r0, [r6, #0xe]
	ldr r0, [r7, #0x38]
	strb r0, [r6, #0xf]
_0803E420:
	ldr r0, _0803E438 @ =0x0000FFFE
	ldrh r1, [r6, #0xc]
	ands r0, r1
	strh r0, [r6, #0xc]
	bl RefreshUnitSprites
	adds r0, r7, #0
	movs r1, #1
	bl Proc_Goto
	b _0803E496
	.align 2, 0
_0803E438: .4byte 0x0000FFFE
_0803E43C:
	ldr r4, _0803E4A4 @ =0x030013F0
	ldr r5, _0803E4A8 @ =0x0203C984
	ldrb r1, [r5, #4]
	adds r0, r1, r4
	ldrb r0, [r0]
	bl GetUnit
	adds r6, r0, #0
	ldrb r5, [r5, #5]
	adds r4, r5, r4
	ldrb r0, [r4]
	bl GetUnit
	adds r4, r0, #0
	movs r5, #0x80
	lsls r5, r5, #2
	adds r0, r5, #0
	ldrh r1, [r6, #0xc]
	ands r0, r1
	cmp r0, #0
	beq _0803E476
	adds r2, r7, #0
	adds r2, #0x2c
	adds r3, r7, #0
	adds r3, #0x30
	adds r0, r6, #0
	movs r1, #0
	bl sub_803E370
_0803E476:
	adds r0, r5, #0
	ldrh r1, [r4, #0xc]
	ands r0, r1
	cmp r0, #0
	beq _0803E490
	adds r2, r7, #0
	adds r2, #0x34
	adds r3, r7, #0
	adds r3, #0x38
	adds r0, r4, #0
	movs r1, #1
	bl sub_803E370
_0803E490:
	adds r0, r7, #0
	bl Proc_Break
_0803E496:
	bl sub_803E1B0
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803E4A4: .4byte 0x030013F0
_0803E4A8: .4byte 0x0203C984

	thumb_func_start sub_803E4AC
sub_803E4AC: @ 0x0803E4AC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	movs r7, #0
	movs r0, #0
	mov r8, r0
	movs r5, #0
	ldrh r4, [r6, #0x1c]
	cmp r4, #0
	beq _0803E4F8
_0803E4C2:
	adds r0, r6, #0
	adds r1, r4, #0
	bl CanUnitUseWeapon
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803E4E4
	adds r0, r4, #0
	bl GetItemMight
	cmp r0, r8
	bls _0803E4E4
	adds r7, r4, #0
	adds r0, r7, #0
	bl GetItemMight
	mov r8, r0
_0803E4E4:
	adds r5, #1
	cmp r5, #4
	bgt _0803E4F8
	lsls r1, r5, #1
	adds r0, r6, #0
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r4, [r0]
	cmp r4, #0
	bne _0803E4C2
_0803E4F8:
	cmp r7, #0
	beq _0803E506
	adds r0, r6, #0
	bl GetUnitPower
	add r0, r8
	b _0803E508
_0803E506:
	movs r0, #0
_0803E508:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_803E514
sub_803E514: @ 0x0803E514
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	movs r0, #0
	mov r8, r0
	movs r6, #0
	adds r5, r7, #0
	adds r0, r7, #5
	cmp r7, r0
	bge _0803E55E
_0803E52A:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	movs r0, #4
	ldrh r1, [r4, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _0803E556
	ldr r0, [r4]
	cmp r0, #0
	beq _0803E556
	movs r0, #1
	add r8, r0
	adds r0, r4, #0
	bl sub_803E4AC
	adds r6, r6, r0
	adds r0, r4, #0
	bl GetUnitCurrentHp
	adds r6, r6, r0
_0803E556:
	adds r5, #1
	adds r0, r7, #5
	cmp r5, r0
	blt _0803E52A
_0803E55E:
	ldr r0, _0803E580 @ =0x0203C984
	asrs r1, r7, #6
	lsls r1, r1, #2
	adds r0, #0x14
	adds r1, r1, r0
	ldr r0, [r1]
	adds r6, r6, r0
	adds r0, r6, #0
	mov r1, r8
	bl Div
	adds r6, r0, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0803E580: .4byte 0x0203C984

	thumb_func_start sub_803E584
sub_803E584: @ 0x0803E584
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, _0803E5C4 @ =gKeySt
	ldr r1, [r0]
	movs r0, #8
	ldrh r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _0803E5BC
	bl sub_803C2B0
	str r4, [r5, #0x58]
	ldr r0, _0803E5C8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0803E5B4
	movs r0, #0x68
	bl m4aSongNumStart
	ldr r0, _0803E5CC @ =0x085CA93C
	bl StartEvent
_0803E5B4:
	adds r0, r5, #0
	movs r1, #3
	bl Proc_Goto
_0803E5BC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803E5C4: .4byte gKeySt
_0803E5C8: .4byte gPlaySt
_0803E5CC: .4byte 0x085CA93C

	thumb_func_start sub_803E5D0
sub_803E5D0: @ 0x0803E5D0
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	movs r6, #1
	rsbs r6, r6, #0
	movs r1, #0
	bl sub_803E584
	movs r4, #0
_0803E5E0:
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	bl sub_8035CB0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803E614
	ldr r5, _0803E628 @ =0x0203C984
	adds r0, r5, #0
	adds r0, #0xa
	adds r0, r4, r0
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803E614
	ldr r0, _0803E62C @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, r4
	beq _0803E614
	lsls r0, r4, #6
	adds r0, #1
	bl sub_803E514
	cmp r6, r0
	bls _0803E614
	adds r6, r0, #0
	strb r4, [r5, #2]
_0803E614:
	adds r4, #1
	cmp r4, #3
	ble _0803E5E0
	adds r0, r7, #0
	bl Proc_Break
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803E628: .4byte 0x0203C984
_0803E62C: .4byte gPlaySt

	thumb_func_start sub_803E630
sub_803E630: @ 0x0803E630
	push {r4, lr}
	adds r0, r1, #0
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r4, r0, #0
	cmp r0, #0
	beq _0803E654
	bl GetItemMaxRange
	cmp r0, #1
	beq _0803E654
	adds r0, r4, #0
	bl GetItemMinRange
	cmp r0, #1
	bgt _0803E658
_0803E654:
	movs r0, #1
	b _0803E65A
_0803E658:
	movs r0, #2
_0803E65A:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_803E660
sub_803E660: @ 0x0803E660
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x34
	str r0, [sp, #0x10]
	movs r0, #0
	str r0, [sp, #0x18]
	movs r1, #0
	str r1, [sp, #0x1c]
	movs r2, #0
	str r2, [sp, #0x20]
	ldr r0, [sp, #0x10]
	movs r1, #1
	bl sub_803E584
	ldr r0, _0803E7B8 @ =0x020395F8
	adds r0, #0x7d
	movs r1, #0xe
	strb r1, [r0]
	ldr r0, _0803E7BC @ =gPlaySt
	ldrb r0, [r0, #0xf]
	lsls r0, r0, #6
	str r0, [sp, #0x14]
	adds r4, r0, #0
	adds r4, #1
	adds r0, #6
	cmp r4, r0
	blt _0803E69E
	b _0803E844
_0803E69E:
	ldr r0, _0803E7C0 @ =gActiveUnitId
	strb r4, [r0]
	ldrb r0, [r0]
	bl GetUnit
	adds r1, r0, #0
	ldr r0, _0803E7C4 @ =gActiveUnit
	str r1, [r0]
	movs r0, #4
	ldrh r2, [r1, #0xc]
	ands r0, r2
	ldr r2, [sp, #0x14]
	adds r2, #6
	str r2, [sp, #0x28]
	adds r4, #1
	str r4, [sp, #0x2c]
	cmp r0, #0
	beq _0803E6C4
	b _0803E83A
_0803E6C4:
	ldr r0, [r1]
	cmp r0, #0
	bne _0803E6CC
	b _0803E83A
_0803E6CC:
	movs r5, #0
_0803E6CE:
	ldr r0, _0803E7C4 @ =gActiveUnit
	ldr r2, [r0]
	lsls r1, r5, #1
	adds r0, r2, #0
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r4, [r0]
	adds r6, r4, #0
	adds r0, r5, #1
	str r0, [sp, #0x30]
	cmp r4, #0
	bne _0803E6E8
	b _0803E832
_0803E6E8:
	adds r0, r2, #0
	adds r1, r4, #0
	bl CanUnitUseWeapon
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0803E6F8
	b _0803E832
_0803E6F8:
	mov sl, r5
	movs r1, #0
	mov r8, r1
	adds r0, r4, #0
	bl GetItemMinRange
	cmp r0, #2
	ble _0803E70A
	b _0803E832
_0803E70A:
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #0x80
	ands r1, r0
	cmp r1, #0
	beq _0803E71A
	b _0803E832
_0803E71A:
	adds r0, r4, #0
	bl GetItemMinRange
	cmp r0, #1
	bne _0803E728
	movs r2, #2
	mov r8, r2
_0803E728:
	adds r0, r6, #0
	bl GetItemMaxRange
	cmp r0, #1
	ble _0803E73A
	movs r0, #1
	mov r1, r8
	orrs r1, r0
	mov r8, r1
_0803E73A:
	add r0, sp, #4
	strh r5, [r0, #4]
	ldr r0, _0803E7C8 @ =0x0203C984
	ldrb r0, [r0, #2]
	lsls r0, r0, #6
	mov sb, r0
	mov r5, sb
	adds r5, #1
	adds r0, #6
	cmp r5, r0
	bge _0803E832
	add r6, sp, #4
	ldr r7, _0803E7CC @ =0x0300140C
	mov r0, r8
	movs r2, #2
	ands r0, r2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x24]
_0803E760:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	movs r0, #4
	ldrh r1, [r4, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _0803E828
	ldr r0, [r4]
	cmp r0, #0
	beq _0803E828
	strb r5, [r6, #2]
	ldr r2, [sp, #0x24]
	cmp r2, #0
	beq _0803E7D8
	ldrb r0, [r4, #0xe]
	adds r0, #1
	strb r0, [r6]
	ldrb r0, [r4, #0xf]
	strb r0, [r6, #1]
	add r0, sp, #4
	bl AiSimulateBattle
	ldr r0, [sp, #0xc]
	ldr r1, [sp, #0x18]
	cmp r1, r0
	bhi _0803E7D8
	str r0, [sp, #0x18]
	ldr r0, _0803E7C0 @ =gActiveUnitId
	ldrb r0, [r0]
	str r0, [sp, #0x1c]
	lsls r0, r5, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x20]
	mov r2, r8
	cmp r2, #3
	bne _0803E7D0
	movs r0, #3
	adds r1, r4, #0
	bl sub_803E630
	b _0803E7D2
	.align 2, 0
_0803E7B8: .4byte 0x020395F8
_0803E7BC: .4byte gPlaySt
_0803E7C0: .4byte gActiveUnitId
_0803E7C4: .4byte gActiveUnit
_0803E7C8: .4byte 0x0203C984
_0803E7CC: .4byte 0x0300140C
_0803E7D0:
	movs r0, #1
_0803E7D2:
	strb r0, [r7, #2]
	mov r0, sl
	strb r0, [r7, #3]
_0803E7D8:
	movs r0, #1
	mov r1, r8
	ands r0, r1
	cmp r0, #0
	beq _0803E828
	ldrb r0, [r4, #0xe]
	adds r0, #1
	strb r0, [r6]
	ldrb r0, [r4, #0xf]
	subs r0, #1
	strb r0, [r6, #1]
	add r0, sp, #4
	bl AiSimulateBattle
	ldr r0, [sp, #0xc]
	ldr r2, [sp, #0x18]
	cmp r2, r0
	bhi _0803E828
	str r0, [sp, #0x18]
	ldr r0, _0803E81C @ =gActiveUnitId
	ldrb r0, [r0]
	str r0, [sp, #0x1c]
	lsls r0, r5, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x20]
	mov r0, r8
	cmp r0, #3
	bne _0803E820
	movs r0, #3
	adds r1, r4, #0
	bl sub_803E630
	strb r0, [r7, #2]
	b _0803E824
	.align 2, 0
_0803E81C: .4byte gActiveUnitId
_0803E820:
	movs r1, #2
	strb r1, [r7, #2]
_0803E824:
	mov r2, sl
	strb r2, [r7, #3]
_0803E828:
	adds r5, #1
	mov r0, sb
	adds r0, #6
	cmp r5, r0
	blt _0803E760
_0803E832:
	ldr r5, [sp, #0x30]
	cmp r5, #4
	bgt _0803E83A
	b _0803E6CE
_0803E83A:
	ldr r4, [sp, #0x2c]
	ldr r0, [sp, #0x28]
	cmp r4, r0
	bge _0803E844
	b _0803E69E
_0803E844:
	ldr r2, _0803E878 @ =0x0203C988
	ldr r3, [sp, #0x10]
	adds r3, #0x2c
	ldr r0, [sp, #0x10]
	adds r0, #0x30
	str r0, [sp]
	ldr r0, [sp, #0x1c]
	movs r1, #0
	bl sub_803CBB4
	ldr r0, _0803E87C @ =0x0300140C
	add r1, sp, #0x20
	ldrb r1, [r1]
	strb r1, [r0, #1]
	ldr r0, [sp, #0x10]
	bl Proc_Break
	add sp, #0x34
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803E878: .4byte 0x0203C988
_0803E87C: .4byte 0x0300140C

	thumb_func_start sub_803E880
sub_803E880: @ 0x0803E880
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0803E8AC @ =0x0300140C
	ldrb r0, [r0, #1]
	bl GetUnit
	adds r1, r0, #0
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	lsls r0, r0, #4
	ldrb r1, [r1, #0xf]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #4
	movs r2, #2
	adds r3, r4, #0
	bl sub_802ECA0
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803E8AC: .4byte 0x0300140C

	thumb_func_start sub_803E8B0
sub_803E8B0: @ 0x0803E8B0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r6, r0, #0
	ldr r0, _0803E938 @ =0x0300140C
	ldrb r0, [r0, #1]
	ldr r5, _0803E93C @ =0x0203C989
	movs r1, #0x34
	adds r1, r1, r6
	mov r8, r1
	movs r1, #0x38
	adds r1, r1, r6
	mov sb, r1
	str r1, [sp]
	movs r1, #1
	adds r2, r5, #0
	mov r3, r8
	bl sub_803CBB4
	ldr r4, _0803E940 @ =0x030013F0
	subs r5, #5
	ldrb r1, [r5, #4]
	adds r0, r1, r4
	ldrb r0, [r0]
	bl GetUnit
	adds r7, r0, #0
	ldrb r5, [r5, #5]
	adds r4, r5, r4
	ldrb r0, [r4]
	bl GetUnit
	adds r4, r0, #0
	movs r5, #0x80
	lsls r5, r5, #2
	adds r0, r5, #0
	ldrh r1, [r7, #0xc]
	ands r0, r1
	cmp r0, #0
	beq _0803E914
	adds r2, r6, #0
	adds r2, #0x2c
	adds r3, r6, #0
	adds r3, #0x30
	adds r0, r7, #0
	movs r1, #0
	bl sub_803E370
_0803E914:
	adds r0, r5, #0
	ldrh r1, [r4, #0xc]
	ands r0, r1
	cmp r0, #0
	beq _0803E92A
	adds r0, r4, #0
	movs r1, #1
	mov r2, r8
	mov r3, sb
	bl sub_803E370
_0803E92A:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803E938: .4byte 0x0300140C
_0803E93C: .4byte 0x0203C989
_0803E940: .4byte 0x030013F0

	thumb_func_start sub_803E944
sub_803E944: @ 0x0803E944
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #2
	bl sub_803E584
	bl MU_IsAnyActive
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0803E95E
	adds r0, r4, #0
	bl Proc_Break
_0803E95E:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_803E964
sub_803E964: @ 0x0803E964
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	bl GetGameTime
	ldr r2, _0803EA1C @ =0x085CA8B4
	movs r1, #0x1f
	ands r1, r0
	adds r1, r1, r2
	ldrb r0, [r1]
	adds r0, #4
	asrs r0, r0, #1
	mov sl, r0
	movs r7, #0
_0803E984:
	ldr r0, _0803EA20 @ =0x085C98F4
	ldr r0, [r0]
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #2
	adds r0, r7, r0
	ldr r1, _0803EA24 @ =0x0810F390
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_8035CB0
	lsls r0, r0, #0x18
	adds r2, r7, #1
	mov sb, r2
	cmp r0, #0
	beq _0803EA08
	movs r6, #0
	lsls r0, r7, #2
	mov r8, r0
_0803E9AC:
	mov r1, r8
	adds r0, r1, r7
	adds r0, r0, r6
	ldr r2, _0803EA28 @ =0x030013F0
	adds r0, r0, r2
	ldrb r0, [r0]
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0803EA02
	ldr r0, [r1]
	cmp r0, #0
	beq _0803EA02
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r2, #0
	ldrh r2, [r1, #0xc]
	ands r0, r2
	cmp r0, #0
	beq _0803EA02
	movs r5, #0xe
	ldrsb r5, [r1, r5]
	lsls r5, r5, #4
	movs r4, #0xf
	ldrsb r4, [r1, r4]
	lsls r4, r4, #4
	mov r0, sl
	subs r4, r4, r0
	adds r0, r1, #0
	bl GetUnitDisplayedSpritePalette
	movs r3, #0xf
	ands r3, r0
	lsls r3, r3, #0xc
	movs r1, #0xa4
	lsls r1, r1, #4
	adds r3, r3, r1
	adds r0, r5, #0
	adds r1, r4, #0
	ldr r2, _0803EA2C @ =Sprite_16x16
	bl PutOamHiRam
_0803EA02:
	adds r6, #1
	cmp r6, #4
	ble _0803E9AC
_0803EA08:
	mov r7, sb
	cmp r7, #3
	ble _0803E984
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803EA1C: .4byte 0x085CA8B4
_0803EA20: .4byte 0x085C98F4
_0803EA24: .4byte 0x0810F390
_0803EA28: .4byte 0x030013F0
_0803EA2C: .4byte Sprite_16x16

	thumb_func_start sub_803EA30
sub_803EA30: @ 0x0803EA30
	push {lr}
	ldr r0, _0803EA40 @ =0x085CA8D4
	movs r1, #4
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_0803EA40: .4byte 0x085CA8D4

	thumb_func_start sub_803EA44
sub_803EA44: @ 0x0803EA44
	push {lr}
	ldr r0, _0803EA50 @ =0x085CA8D4
	bl Proc_EndEach
	pop {r0}
	bx r0
	.align 2, 0
_0803EA50: .4byte 0x085CA8D4

	thumb_func_start sub_803EA54
sub_803EA54: @ 0x0803EA54
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0xa3
	lsls r0, r0, #2
	bl sub_806EAE4
	ldr r0, _0803EA70 @ =gActiveUnit
	ldr r0, [r0]
	adds r1, r4, #0
	bl sub_80702BC
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803EA70: .4byte gActiveUnit

	thumb_func_start sub_803EA74
sub_803EA74: @ 0x0803EA74
	push {lr}
	adds r1, r0, #0
	ldr r0, _0803EA8C @ =0x0203C984
	ldrb r0, [r0, #8]
	cmp r0, #0
	bne _0803EA90
	adds r0, r1, #0
	movs r1, #0
	bl Proc_Goto
	b _0803EAA2
	.align 2, 0
_0803EA8C: .4byte 0x0203C984
_0803EA90:
	bl MU_EndAll
	ldr r0, _0803EAA8 @ =gPlaySt
	ldrb r1, [r0, #0xf]
	movs r0, #6
	movs r2, #0
	movs r3, #0
	bl sub_803CB3C
_0803EAA2:
	pop {r0}
	bx r0
	.align 2, 0
_0803EAA8: .4byte gPlaySt

	thumb_func_start sub_803EAAC
sub_803EAAC: @ 0x0803EAAC
	push {lr}
	ldr r2, _0803EAC0 @ =0x0203C984
	ldrb r1, [r2, #8]
	cmp r1, #0
	bne _0803EAC4
	strb r1, [r2, #9]
	movs r1, #0
	bl Proc_Goto
	b _0803EAD6
	.align 2, 0
_0803EAC0: .4byte 0x0203C984
_0803EAC4:
	bl MU_EndAll
	ldr r0, _0803EADC @ =gPlaySt
	ldrb r1, [r0, #0xf]
	movs r0, #7
	movs r2, #0
	movs r3, #0
	bl sub_803CB3C
_0803EAD6:
	pop {r0}
	bx r0
	.align 2, 0
_0803EADC: .4byte gPlaySt

	thumb_func_start sub_803EAE0
sub_803EAE0: @ 0x0803EAE0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0803EAF8 @ =0x0203C984
	ldrb r0, [r0, #8]
	cmp r0, #0
	bne _0803EAFC
	ldr r1, [r4, #0x58]
	adds r0, r4, #0
	bl Proc_Goto
	b _0803EB18
	.align 2, 0
_0803EAF8: .4byte 0x0203C984
_0803EAFC:
	bl MU_EndAll
	bl MU_EndAll
	ldr r1, _0803EB20 @ =0x0203C618
	movs r0, #1
	strb r0, [r1, #0xb]
	movs r0, #0xff
	bl sub_803CAD8
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
_0803EB18:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803EB20: .4byte 0x0203C618

	thumb_func_start sub_803EB24
sub_803EB24: @ 0x0803EB24
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r6, #0
	ldr r1, _0803EB38 @ =0x0203C618
	ldrb r0, [r1]
	cmp r0, #1
	bne _0803EB3C
	strb r0, [r1, #0xb]
	b _0803EB8E
	.align 2, 0
_0803EB38: .4byte 0x0203C618
_0803EB3C:
	ldr r2, _0803EBA0 @ =0x0203C984
	adds r4, r1, #0
	adds r4, #0xa0
	ldrb r0, [r4]
	ldrb r3, [r2, #0xe]
	subs r1, r0, r3
	adds r0, r2, #0
	adds r0, #0xf
	adds r1, r1, r0
	ldr r3, _0803EBA4 @ =gPlaySt
	ldrb r0, [r3, #0xf]
	strb r0, [r1]
	ldrb r0, [r2, #0xe]
	adds r0, #1
	strb r0, [r2, #0xe]
	ldrb r1, [r3, #0xf]
	lsls r0, r1, #2
	adds r1, r2, #0
	adds r1, #0x14
	adds r0, r0, r1
	str r6, [r0]
	ldrb r0, [r2, #0xe]
	ldrb r1, [r4]
	cmp r0, r1
	bne _0803EBA8
	movs r1, #0
	ldrb r0, [r4]
	cmp r6, r0
	bge _0803EB8C
	adds r4, r2, #0
	adds r4, #0xa
	adds r3, r0, #0
_0803EB7C:
	adds r0, r1, r4
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803EB86
	adds r6, r1, #0
_0803EB86:
	adds r1, #1
	cmp r1, r3
	blt _0803EB7C
_0803EB8C:
	strb r6, [r2, #0xf]
_0803EB8E:
	movs r0, #0xff
	bl sub_803CAD8
	adds r0, r5, #0
	movs r1, #8
	bl Proc_Goto
	b _0803EBB6
	.align 2, 0
_0803EBA0: .4byte 0x0203C984
_0803EBA4: .4byte gPlaySt
_0803EBA8:
	ldrb r0, [r3, #0xf]
	bl sub_803CAD8
	adds r0, r5, #0
	movs r1, #8
	bl Proc_Goto
_0803EBB6:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_803EBBC
sub_803EBBC: @ 0x0803EBBC
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0803EBDC @ =0x0203C618
	ldrb r0, [r1]
	cmp r0, #1
	bne _0803EBE0
	strb r0, [r1, #0xb]
	movs r0, #0xff
	bl sub_803CAD8
	adds r0, r4, #0
	movs r1, #8
	bl Proc_Goto
	b _0803EBF2
	.align 2, 0
_0803EBDC: .4byte 0x0203C618
_0803EBE0:
	movs r0, #2
	strb r0, [r1, #0xb]
	movs r0, #0xff
	bl sub_803CAD8
	adds r0, r4, #0
	movs r1, #8
	bl Proc_Goto
_0803EBF2:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_803EBF8
sub_803EBF8: @ 0x0803EBF8
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r5, #0
	ldr r2, _0803EC64 @ =0x0203C984
	ldr r0, _0803EC68 @ =0x0203C618
	adds r4, r0, #0
	adds r4, #0xa0
	ldrb r0, [r4]
	ldrb r3, [r2, #0xe]
	subs r1, r0, r3
	adds r0, r2, #0
	adds r0, #0xf
	adds r1, r1, r0
	ldr r3, _0803EC6C @ =gPlaySt
	ldrb r0, [r3, #0xf]
	strb r0, [r1]
	ldrb r0, [r2, #0xe]
	adds r0, #1
	strb r0, [r2, #0xe]
	ldrb r1, [r3, #0xf]
	lsls r0, r1, #2
	adds r1, r2, #0
	adds r1, #0x14
	adds r0, r0, r1
	str r5, [r0]
	ldrb r0, [r2, #0xe]
	ldrb r1, [r4]
	cmp r0, r1
	bne _0803EC70
	movs r1, #0
	ldrb r0, [r4]
	cmp r5, r0
	bge _0803EC50
	adds r4, r2, #0
	adds r4, #0xa
	adds r3, r0, #0
_0803EC40:
	adds r0, r1, r4
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803EC4A
	adds r5, r1, #0
_0803EC4A:
	adds r1, #1
	cmp r1, r3
	blt _0803EC40
_0803EC50:
	strb r5, [r2, #0xf]
	movs r0, #0xff
	bl sub_803CAD8
	adds r0, r6, #0
	movs r1, #5
	bl Proc_Goto
	b _0803EC7E
	.align 2, 0
_0803EC64: .4byte 0x0203C984
_0803EC68: .4byte 0x0203C618
_0803EC6C: .4byte gPlaySt
_0803EC70:
	ldrb r0, [r3, #0xf]
	bl sub_803CAD8
	adds r0, r6, #0
	movs r1, #5
	bl Proc_Goto
_0803EC7E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_803EC84
sub_803EC84: @ 0x0803EC84
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0803ECA4 @ =0x0203C618
	movs r0, #2
	strb r0, [r1, #0xb]
	movs r0, #0xff
	bl sub_803CAD8
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803ECA4: .4byte 0x0203C618

	thumb_func_start sub_803ECA8
sub_803ECA8: @ 0x0803ECA8
	push {r4, lr}
	movs r3, #0
	str r3, [r0, #0x58]
	ldr r2, _0803ECC8 @ =gPlaySt
	ldrb r4, [r2, #0xf]
	lsls r1, r4, #6
	str r1, [r0, #0x5c]
	ldr r0, _0803ECCC @ =0x0203C984
	adds r0, #0xa
	ldrb r2, [r2, #0xf]
	adds r0, r2, r0
	strb r3, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803ECC8: .4byte gPlaySt
_0803ECCC: .4byte 0x0203C984

	thumb_func_start sub_803ECD0
sub_803ECD0: @ 0x0803ECD0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
_0803ECD4:
	ldr r1, [r5, #0x58]
	cmp r1, #5
	bne _0803ECE4
	adds r0, r5, #0
	movs r1, #1
	bl Proc_Goto
	b _0803ED44
_0803ECE4:
	ldr r0, [r5, #0x5c]
	adds r0, r0, r1
	adds r0, #1
	bl GetUnit
	adds r6, r0, #0
	movs r0, #4
	ldrh r1, [r6, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _0803ED00
	ldr r0, [r6]
	cmp r0, #0
	bne _0803ED08
_0803ED00:
	ldr r0, [r5, #0x58]
	adds r0, #1
	str r0, [r5, #0x58]
	b _0803ECD4
_0803ED08:
	bl RefreshUnitSprites
	adds r0, r6, #0
	bl HideUnitSprite
	adds r0, r6, #0
	bl MU_Start
	adds r4, r0, #0
	ldr r1, _0803ED4C @ =gWorkingMoveScr
	movs r0, #2
	strb r0, [r1]
	movs r0, #4
	strb r0, [r1, #1]
	adds r0, r4, #0
	bl sub_805FD78
	adds r0, r4, #0
	bl sub_803F5C8
	str r4, [r5, #0x54]
	ldr r0, [r5, #0x58]
	adds r0, #1
	str r0, [r5, #0x58]
	ldr r0, _0803ED50 @ =0x0000FDFF
	ldrh r1, [r6, #0xc]
	ands r0, r1
	movs r1, #5
	orrs r0, r1
	strh r0, [r6, #0xc]
_0803ED44:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803ED4C: .4byte gWorkingMoveScr
_0803ED50: .4byte 0x0000FDFF

	thumb_func_start sub_803ED54
sub_803ED54: @ 0x0803ED54
	push {lr}
	ldr r0, [r0, #0x54]
	bl sub_80608EC
	pop {r0}
	bx r0

	thumb_func_start sub_803ED60
sub_803ED60: @ 0x0803ED60
	push {lr}
	bl sub_803CD74
	bl sub_803CDD4
	bl RefreshUnitSprites
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_803ED74
sub_803ED74: @ 0x0803ED74
	push {lr}
	bl GetTalkChoiceResult
	adds r1, r0, #0
	cmp r1, #1
	bne _0803ED8C
	ldr r0, _0803ED88 @ =0x0203C984
	strb r1, [r0, #8]
	b _0803ED92
	.align 2, 0
_0803ED88: .4byte 0x0203C984
_0803ED8C:
	ldr r1, _0803ED98 @ =0x0203C984
	movs r0, #0
	strb r0, [r1, #8]
_0803ED92:
	pop {r0}
	bx r0
	.align 2, 0
_0803ED98: .4byte 0x0203C984

	thumb_func_start sub_803ED9C
sub_803ED9C: @ 0x0803ED9C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, _0803EDE0 @ =0x06015000
	movs r1, #6
	bl sub_8070E70
	ldr r2, _0803EDE4 @ =0x000006E5
	movs r0, #0x40
	movs r1, #0x38
	bl sub_8070804
	movs r4, #0
	ldr r6, _0803EDE8 @ =0x0203C98E
_0803EDB6:
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	bl sub_8035CB0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803EDCE
	adds r0, r4, r6
	ldrb r0, [r0]
	cmp r0, #0
	beq _0803EDCE
	str r4, [r5, #0x58]
_0803EDCE:
	adds r4, #1
	cmp r4, #3
	ble _0803EDB6
	movs r0, #0
	str r0, [r5, #0x5c]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803EDE0: .4byte 0x06015000
_0803EDE4: .4byte 0x000006E5
_0803EDE8: .4byte 0x0203C98E

	thumb_func_start sub_803EDEC
sub_803EDEC: @ 0x0803EDEC
	push {r4, lr}
	adds r4, r0, #0
_0803EDF0:
	ldr r1, [r4, #0x5c]
	cmp r1, #4
	ble _0803EE02
	bl sub_807089C
	adds r0, r4, #0
	bl Proc_Break
	b _0803EE56
_0803EE02:
	ldr r0, [r4, #0x58]
	lsls r0, r0, #6
	adds r0, r0, r1
	adds r0, #1
	bl GetUnit
	adds r1, r0, #0
	movs r0, #4
	ldrh r2, [r1, #0xc]
	ands r0, r2
	cmp r0, #0
	bne _0803EE20
	ldr r0, [r1]
	cmp r0, #0
	bne _0803EE28
_0803EE20:
	ldr r0, [r4, #0x5c]
	adds r0, #1
	str r0, [r4, #0x5c]
	b _0803EDF0
_0803EE28:
	ldr r3, _0803EE5C @ =0x0203C984
	ldr r0, [r4, #0x58]
	lsls r0, r0, #3
	adds r1, r3, #0
	adds r1, #0x30
	adds r0, r0, r1
	movs r1, #0x1e
	str r1, [r0]
	ldr r1, [r4, #0x58]
	lsls r2, r1, #3
	adds r2, r2, r3
	lsls r1, r1, #6
	ldr r0, [r4, #0x5c]
	adds r0, r0, r1
	adds r0, #1
	adds r2, #0x2c
	strb r0, [r2]
	adds r0, r4, #0
	bl sub_803CA6C
	ldr r0, [r4, #0x5c]
	adds r0, #1
	str r0, [r4, #0x5c]
_0803EE56:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803EE5C: .4byte 0x0203C984

	thumb_func_start sub_803EE60
sub_803EE60: @ 0x0803EE60
	push {lr}
	adds r1, r0, #0
	ldr r0, _0803EE78 @ =0x0203C618
	ldrb r0, [r0]
	cmp r0, #1
	bne _0803EE74
	adds r0, r1, #0
	movs r1, #1
	bl Proc_Goto
_0803EE74:
	pop {r0}
	bx r0
	.align 2, 0
_0803EE78: .4byte 0x0203C618

	thumb_func_start sub_803EE7C
sub_803EE7C: @ 0x0803EE7C
	push {lr}
	ldr r0, _0803EEA8 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	bl RenderMap
	bl sub_8047CB8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0803EEAC
	movs r0, #1
	bl sub_804256C
	bl sub_8047CC8
	b _0803EEC2
	.align 2, 0
_0803EEA8: .4byte gBg2Tm
_0803EEAC:
	bl MU_EndAll
	bl RenderMap
	bl sub_80627D0
	ldr r0, _0803EEC8 @ =gBattleSt
	movs r1, #0x80
	ldrb r2, [r0, #1]
	orrs r1, r2
	strb r1, [r0, #1]
_0803EEC2:
	pop {r0}
	bx r0
	.align 2, 0
_0803EEC8: .4byte gBattleSt

	thumb_func_start sub_803EECC
sub_803EECC: @ 0x0803EECC
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldr r6, _0803EF3C @ =gBattleUnitA
	movs r0, #0x11
	ldrsb r0, [r6, r0]
	cmp r0, #0
	bne _0803EEE8
	ldr r0, _0803EF40 @ =ProcScr_Mu
	bl Proc_Find
	adds r4, r0, #0
	bl sub_803F5C8
	str r4, [r7, #0x54]
_0803EEE8:
	ldr r5, _0803EF44 @ =gBattleUnitB
	movs r0, #0x11
	ldrsb r0, [r5, r0]
	cmp r0, #0
	bne _0803EF34
	bl RefreshUnitSprites
	movs r0, #0xb
	ldrsb r0, [r5, r0]
	bl GetUnit
	bl HideUnitSprite
	adds r0, r5, #0
	bl MU_Start
	adds r4, r0, #0
	movs r0, #0xe
	ldrsb r0, [r6, r0]
	movs r1, #0xf
	ldrsb r1, [r6, r1]
	movs r2, #0xe
	ldrsb r2, [r5, r2]
	movs r3, #0xf
	ldrsb r3, [r5, r3]
	bl sub_80629FC
	ldr r1, _0803EF48 @ =gWorkingMoveScr
	strb r0, [r1]
	movs r0, #4
	strb r0, [r1, #1]
	adds r0, r4, #0
	bl sub_805FD78
	adds r0, r4, #0
	bl sub_803F5C8
	str r4, [r7, #0x54]
_0803EF34:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803EF3C: .4byte gBattleUnitA
_0803EF40: .4byte ProcScr_Mu
_0803EF44: .4byte gBattleUnitB
_0803EF48: .4byte gWorkingMoveScr

	thumb_func_start sub_803EF4C
sub_803EF4C: @ 0x0803EF4C
	push {r4, r5, lr}
	ldr r0, _0803EF94 @ =gBattleUnitA
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetUnit
	adds r4, r0, #0
	ldr r0, _0803EF98 @ =gBattleUnitB
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetUnit
	adds r5, r0, #0
	adds r0, r4, #0
	bl GetUnitCurrentHp
	cmp r0, #0
	bne _0803EF7C
	movs r0, #5
	ldrh r1, [r4, #0xc]
	orrs r0, r1
	strh r0, [r4, #0xc]
_0803EF7C:
	adds r0, r5, #0
	bl GetUnitCurrentHp
	cmp r0, #0
	bne _0803EF8E
	movs r0, #5
	ldrh r1, [r5, #0xc]
	orrs r0, r1
	strh r0, [r5, #0xc]
_0803EF8E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803EF94: .4byte gBattleUnitA
_0803EF98: .4byte gBattleUnitB

	thumb_func_start sub_803EF9C
sub_803EF9C: @ 0x0803EF9C
	ldr r1, _0803EFA4 @ =0x0203C9D0
	movs r0, #1
	strb r0, [r1]
	bx lr
	.align 2, 0
_0803EFA4: .4byte 0x0203C9D0

	thumb_func_start sub_803EFA8
sub_803EFA8: @ 0x0803EFA8
	ldr r1, _0803EFB0 @ =0x0203C9D0
	movs r0, #0
	strb r0, [r1]
	bx lr
	.align 2, 0
_0803EFB0: .4byte 0x0203C9D0

	thumb_func_start sub_803EFB4
sub_803EFB4: @ 0x0803EFB4
	ldr r2, _0803EFE8 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	bx lr
	.align 2, 0
_0803EFE8: .4byte gDispIo

	thumb_func_start sub_803EFEC
sub_803EFEC: @ 0x0803EFEC
	ldr r0, _0803F018 @ =0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	ldr r3, _0803F01C @ =0x02001528
	cmp r1, #0xa0
	bls _0803F004
	ldr r0, _0803F020 @ =0x02001520
	ldr r0, [r0]
	str r0, [r3]
	movs r1, #0
_0803F004:
	ldr r2, _0803F024 @ =0x04000042
	ldr r0, [r3]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldrh r3, [r1]
	lsls r0, r3, #8
	ldrh r1, [r1, #2]
	adds r0, r1, r0
	strh r0, [r2]
	bx lr
	.align 2, 0
_0803F018: .4byte 0x04000006
_0803F01C: .4byte 0x02001528
_0803F020: .4byte 0x02001520
_0803F024: .4byte 0x04000042

	thumb_func_start sub_803F028
sub_803F028: @ 0x0803F028
	ldr r2, _0803F038 @ =0x02001520
	ldr r3, [r2]
	ldr r1, _0803F03C @ =0x02001524
	ldr r0, [r1]
	str r0, [r2]
	str r3, [r1]
	bx lr
	.align 2, 0
_0803F038: .4byte 0x02001520
_0803F03C: .4byte 0x02001524

	thumb_func_start sub_803F040
sub_803F040: @ 0x0803F040
	push {lr}
	ldr r2, _0803F064 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0
	.align 2, 0
_0803F064: .4byte gDispIo

	thumb_func_start sub_803F068
sub_803F068: @ 0x0803F068
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	str r0, [sp, #4]
	ldr r7, [sp, #0x34]
	ldr r0, [sp, #0x48]
	ldr r6, [sp, #0x4c]
	lsls r6, r6, #0x10
	lsrs r6, r6, #0x10
	subs r1, #0x78
	subs r2, #0x50
	subs r3, #0x78
	subs r7, #0x50
	ldr r4, [sp, #0x38]
	subs r4, #0x78
	str r4, [sp, #0x38]
	ldr r4, [sp, #0x3c]
	subs r4, #0x50
	str r4, [sp, #0x3c]
	ldr r4, [sp, #0x40]
	subs r4, #0x78
	str r4, [sp, #0x40]
	ldr r4, [sp, #0x44]
	subs r4, #0x50
	str r4, [sp, #0x44]
	ldr r4, _0803F1D4 @ =gSinLut
	mov sb, r4
	lsls r0, r0, #0x10
	movs r4, #0xff
	lsls r4, r4, #0x10
	ands r4, r0
	asrs r4, r4, #0x10
	mov ip, r4
	lsls r0, r4, #1
	add r0, sb
	movs r4, #0
	ldrsh r5, [r0, r4]
	adds r0, r1, #0
	muls r0, r5, r0
	mov r8, r0
	mov r4, ip
	adds r4, #0x40
	lsls r4, r4, #1
	add r4, sb
	movs r0, #0
	ldrsh r4, [r4, r0]
	adds r0, r2, #0
	muls r0, r4, r0
	add r0, r8
	str r0, [sp, #8]
	muls r1, r4, r1
	adds r0, r2, #0
	muls r0, r5, r0
	subs r1, r1, r0
	str r1, [sp, #0xc]
	adds r1, r3, #0
	muls r1, r5, r1
	adds r0, r7, #0
	muls r0, r4, r0
	adds r1, r1, r0
	mov sb, r1
	adds r1, r3, #0
	muls r1, r4, r1
	adds r0, r7, #0
	muls r0, r5, r0
	subs r7, r1, r0
	ldr r2, [sp, #0x38]
	adds r1, r2, #0
	muls r1, r5, r1
	ldr r2, [sp, #0x3c]
	adds r0, r2, #0
	muls r0, r4, r0
	adds r1, r1, r0
	mov sl, r1
	ldr r0, [sp, #0x38]
	adds r1, r0, #0
	muls r1, r4, r1
	adds r0, r2, #0
	muls r0, r5, r0
	subs r1, r1, r0
	mov r8, r1
	ldr r2, [sp, #0x40]
	adds r1, r2, #0
	muls r1, r5, r1
	ldr r2, [sp, #0x44]
	adds r0, r2, #0
	muls r0, r4, r0
	adds r1, r1, r0
	str r1, [sp, #0x10]
	ldr r0, [sp, #0x40]
	adds r1, r0, #0
	muls r1, r4, r1
	adds r0, r2, #0
	muls r0, r5, r0
	subs r4, r1, r0
	ldr r1, [sp, #8]
	asrs r0, r1, #0xc
	muls r0, r6, r0
	asrs r0, r0, #8
	adds r0, #0x78
	str r0, [sp, #8]
	ldr r2, [sp, #0xc]
	asrs r0, r2, #0xc
	muls r0, r6, r0
	asrs r0, r0, #8
	adds r0, #0x50
	str r0, [sp, #0xc]
	mov r1, sb
	asrs r0, r1, #0xc
	muls r0, r6, r0
	asrs r0, r0, #8
	adds r0, #0x78
	mov sb, r0
	asrs r0, r7, #0xc
	muls r0, r6, r0
	asrs r0, r0, #8
	adds r7, r0, #0
	adds r7, #0x50
	mov r2, sl
	asrs r0, r2, #0xc
	muls r0, r6, r0
	asrs r0, r0, #8
	adds r0, #0x78
	mov sl, r0
	mov r1, r8
	asrs r0, r1, #0xc
	muls r0, r6, r0
	asrs r0, r0, #8
	adds r0, #0x50
	mov r8, r0
	ldr r2, [sp, #0x10]
	asrs r0, r2, #0xc
	muls r0, r6, r0
	asrs r0, r0, #8
	adds r0, #0x78
	str r0, [sp, #0x10]
	asrs r0, r4, #0xc
	muls r0, r6, r0
	asrs r0, r0, #8
	adds r4, r0, #0
	adds r4, #0x50
	str r7, [sp]
	ldr r0, [sp, #4]
	ldr r1, [sp, #8]
	ldr r2, [sp, #0xc]
	mov r3, sb
	bl sub_8013F04
	mov r0, r8
	str r0, [sp]
	ldr r0, [sp, #4]
	mov r1, sb
	adds r2, r7, #0
	mov r3, sl
	bl sub_8013F04
	str r4, [sp]
	ldr r0, [sp, #4]
	mov r1, sl
	mov r2, r8
	ldr r3, [sp, #0x10]
	bl sub_8013F04
	ldr r1, [sp, #0xc]
	str r1, [sp]
	ldr r0, [sp, #4]
	ldr r1, [sp, #0x10]
	adds r2, r4, #0
	ldr r3, [sp, #8]
	bl sub_8013F04
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803F1D4: .4byte gSinLut

	thumb_func_start sub_803F1D8
sub_803F1D8: @ 0x0803F1D8
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _0803F20C @ =0x02001520
	ldr r0, _0803F210 @ =0x020012A0
	str r0, [r1]
	ldr r5, _0803F214 @ =0x02001524
	ldr r2, _0803F218 @ =0xFFFFFD80
	adds r1, r0, r2
	str r1, [r5]
	ldr r1, _0803F21C @ =0x02001528
	str r0, [r1]
	bl sub_8013EE4
	ldr r0, [r5]
	bl sub_8013EE4
	adds r4, #0x4c
	movs r0, #0
	strh r0, [r4]
	ldr r0, _0803F220 @ =sub_803EFEC
	bl SetOnHBlankA
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803F20C: .4byte 0x02001520
_0803F210: .4byte 0x020012A0
_0803F214: .4byte 0x02001524
_0803F218: .4byte 0xFFFFFD80
_0803F21C: .4byte 0x02001528
_0803F220: .4byte sub_803EFEC

	thumb_func_start sub_803F224
sub_803F224: @ 0x0803F224
	push {r4, r5, r6, r7, lr}
	sub sp, #0x1c
	adds r4, r0, #0
	adds r7, r4, #0
	adds r7, #0x4c
	adds r5, r4, #0
	adds r5, #0x64
	ldrh r0, [r7]
	ldrh r1, [r5]
	cmp r0, r1
	bne _0803F248
	movs r0, #0
	bl SetOnHBlankA
	adds r0, r4, #0
	bl Proc_Break
	b _0803F2AE
_0803F248:
	movs r0, #0
	ldrsh r3, [r7, r0]
	movs r1, #0
	ldrsh r0, [r5, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0xa0
	movs r2, #0xc0
	bl Interpolate
	adds r6, r0, #0
	movs r2, #0x88
	lsls r2, r2, #1
	movs r0, #0
	ldrsh r3, [r7, r0]
	movs r1, #0
	ldrsh r0, [r5, r1]
	str r0, [sp]
	movs r0, #1
	movs r1, #0x10
	bl Interpolate
	adds r5, r0, #0
	ldr r4, _0803F2B8 @ =0x02001524
	ldr r0, [r4]
	bl sub_8013EE4
	ldr r0, [r4]
	movs r2, #0
	str r2, [sp]
	movs r1, #0xf0
	str r1, [sp, #4]
	movs r1, #0xa0
	str r1, [sp, #8]
	str r2, [sp, #0xc]
	str r1, [sp, #0x10]
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	str r6, [sp, #0x14]
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	str r5, [sp, #0x18]
	movs r1, #0
	movs r3, #0xf0
	bl sub_803F068
	bl sub_803F028
	ldrh r0, [r7]
	adds r0, #1
	strh r0, [r7]
_0803F2AE:
	add sp, #0x1c
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803F2B8: .4byte 0x02001524

	thumb_func_start sub_803F2BC
sub_803F2BC: @ 0x0803F2BC
	ldr r2, _0803F300 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	movs r1, #0x21
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #0x20
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r1, r2, #0
	adds r1, #0x2f
	movs r0, #0
	strb r0, [r1]
	adds r1, #4
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	bx lr
	.align 2, 0
_0803F300: .4byte gDispIo

	thumb_func_start sub_803F304
sub_803F304: @ 0x0803F304
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldr r0, _0803F3A4 @ =0x085CADFC
	bl SpawnProcLocking
	adds r0, #0x64
	movs r3, #0
	strh r4, [r0]
	ldr r0, _0803F3A8 @ =gDispIo
	mov ip, r0
	movs r2, #1
	ldrb r0, [r0, #1]
	orrs r0, r2
	movs r1, #2
	mov r8, r1
	mov r1, r8
	orrs r0, r1
	movs r6, #4
	orrs r0, r6
	movs r5, #8
	orrs r0, r5
	movs r4, #0x10
	orrs r0, r4
	movs r1, #0x21
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	mov r0, ip
	adds r0, #0x2f
	strb r3, [r0]
	adds r0, #4
	strb r3, [r0]
	adds r1, #0x2e
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	mov r7, ip
	adds r7, #0x35
	ldrb r0, [r7]
	orrs r2, r0
	mov r1, r8
	orrs r2, r1
	orrs r2, r6
	orrs r2, r5
	orrs r2, r4
	mov r3, ip
	adds r3, #0x36
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r3]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r3]
	movs r0, #0x20
	orrs r2, r0
	strb r2, [r7]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803F3A4: .4byte 0x085CADFC
_0803F3A8: .4byte gDispIo

	thumb_func_start sub_803F3AC
sub_803F3AC: @ 0x0803F3AC
	push {lr}
	adds r1, r0, #0
	movs r0, #0x40
	bl sub_803F304
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_803F3BC
sub_803F3BC: @ 0x0803F3BC
	push {r4, r5, r6, r7, lr}
	sub sp, #0x1c
	adds r4, r0, #0
	adds r7, r4, #0
	adds r7, #0x4c
	adds r5, r4, #0
	adds r5, #0x64
	ldrh r0, [r7]
	ldrh r1, [r5]
	cmp r0, r1
	bne _0803F3E0
	movs r0, #0
	bl SetOnHBlankA
	adds r0, r4, #0
	bl Proc_Break
	b _0803F446
_0803F3E0:
	movs r2, #0
	ldrsh r3, [r7, r2]
	movs r1, #0
	ldrsh r0, [r5, r1]
	str r0, [sp]
	movs r0, #4
	movs r1, #0xc0
	movs r2, #0xa0
	bl Interpolate
	adds r6, r0, #0
	movs r1, #0x88
	lsls r1, r1, #1
	movs r2, #0
	ldrsh r3, [r7, r2]
	movs r2, #0
	ldrsh r0, [r5, r2]
	str r0, [sp]
	movs r0, #5
	movs r2, #0x10
	bl Interpolate
	adds r5, r0, #0
	ldr r4, _0803F450 @ =0x02001524
	ldr r0, [r4]
	bl sub_8013EE4
	ldr r0, [r4]
	movs r2, #0
	str r2, [sp]
	movs r1, #0xf0
	str r1, [sp, #4]
	movs r1, #0xa0
	str r1, [sp, #8]
	str r2, [sp, #0xc]
	str r1, [sp, #0x10]
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	str r6, [sp, #0x14]
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	str r5, [sp, #0x18]
	movs r1, #0
	movs r3, #0xf0
	bl sub_803F068
	bl sub_803F028
	ldrh r0, [r7]
	adds r0, #1
	strh r0, [r7]
_0803F446:
	add sp, #0x1c
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803F450: .4byte 0x02001524

	thumb_func_start sub_803F454
sub_803F454: @ 0x0803F454
	ldr r2, _0803F474 @ =gDispIo
	movs r0, #0
	strb r0, [r2, #1]
	adds r1, r2, #0
	adds r1, #0x2f
	strb r0, [r1]
	adds r1, #4
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	bx lr
	.align 2, 0
_0803F474: .4byte gDispIo

	thumb_func_start sub_803F478
sub_803F478: @ 0x0803F478
	push {r4, lr}
	adds r4, r0, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldr r0, _0803F4FC @ =0x085CAE34
	bl SpawnProcLocking
	adds r0, #0x64
	movs r2, #0
	strh r4, [r0]
	ldr r3, _0803F500 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r3, #1]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	adds r0, r3, #0
	adds r0, #0x2f
	strb r2, [r0]
	adds r0, #4
	strb r2, [r0]
	adds r1, r3, #0
	adds r1, #0x2e
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	adds r4, r3, #0
	adds r4, #0x35
	movs r2, #1
	ldrb r0, [r4]
	orrs r2, r0
	movs r0, #2
	orrs r2, r0
	movs r0, #4
	orrs r2, r0
	movs r0, #8
	orrs r2, r0
	movs r0, #0x10
	orrs r2, r0
	adds r3, #0x36
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r3]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r3]
	movs r0, #0x20
	orrs r2, r0
	strb r2, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803F4FC: .4byte 0x085CAE34
_0803F500: .4byte gDispIo

	thumb_func_start sub_803F504
sub_803F504: @ 0x0803F504
	push {lr}
	adds r1, r0, #0
	movs r0, #0x40
	bl sub_803F478
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_803F514
sub_803F514: @ 0x0803F514
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0803F530 @ =0x085CADFC
	bl Proc_Find
	cmp r0, #0
	bne _0803F528
	adds r0, r4, #0
	bl Proc_Break
_0803F528:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803F530: .4byte 0x085CADFC

	thumb_func_start sub_803F534
sub_803F534: @ 0x0803F534
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0803F550 @ =0x085CAE34
	bl Proc_Find
	cmp r0, #0
	bne _0803F548
	adds r0, r4, #0
	bl Proc_Break
_0803F548:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803F550: .4byte 0x085CAE34

	thumb_func_start sub_803F554
sub_803F554: @ 0x0803F554
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0803F5A0 @ =0x085CAE6C
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	movs r1, #0xb0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r1, [r4, #0x30]
	ldr r0, [r4, #0x34]
	ldrh r0, [r0, #2]
	movs r2, #0xd0
	lsls r2, r2, #7
	adds r0, r0, r2
	strh r0, [r1, #0x22]
	ldr r0, [r4, #0x34]
	ldrb r0, [r0, #1]
	adds r0, #0x10
	lsls r0, r0, #5
	ldr r1, _0803F5A4 @ =gPal
	adds r0, r0, r1
	movs r1, #0x16
	movs r2, #0x14
	adds r3, r4, #0
	bl StartPalFade
	ldr r0, _0803F5A8 @ =0x085CAE84
	adds r1, r4, #0
	bl SpawnProc
	str r4, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803F5A0: .4byte 0x085CAE6C
_0803F5A4: .4byte gPal
_0803F5A8: .4byte 0x085CAE84

	thumb_func_start sub_803F5AC
sub_803F5AC: @ 0x0803F5AC
	ldr r0, [r0, #0x2c]
	ldr r2, [r0, #0x30]
	ldr r1, [r0, #0x34]
	movs r0, #0xf
	ldrb r3, [r1, #1]
	ands r0, r3
	lsls r0, r0, #0xc
	ldrh r1, [r1, #2]
	adds r0, r1, r0
	movs r1, #0x80
	lsls r1, r1, #4
	adds r0, r0, r1
	strh r0, [r2, #0x22]
	bx lr

	thumb_func_start sub_803F5C8
sub_803F5C8: @ 0x0803F5C8
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x39
	movs r5, #0
	movs r0, #7
	strb r0, [r1]
	ldr r0, _0803F63C @ =0x086648E4
	adds r1, r4, #0
	bl SpawnProc
	str r4, [r0, #0x54]
	adds r0, #0x64
	movs r3, #0
	movs r1, #0x20
	strh r1, [r0]
	ldr r1, _0803F640 @ =gDispIo
	mov ip, r1
	mov r2, ip
	adds r2, #0x3c
	movs r1, #0x3f
	ldrb r6, [r2]
	ands r1, r6
	strb r1, [r2]
	ldrh r0, [r0]
	lsrs r1, r0, #1
	mov r0, ip
	adds r0, #0x44
	strb r1, [r0]
	mov r1, ip
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r3, [r0]
	ldr r0, [r4, #0x30]
	strh r5, [r0, #0x18]
	ldr r0, [r4, #0x30]
	strh r5, [r0, #0x1a]
	adds r0, r4, #0
	movs r1, #0
	bl sub_803F554
	ldr r1, [r4, #0x30]
	movs r0, #0xd
	strh r0, [r1, #0x1e]
	ldr r0, _0803F644 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0803F636
	movs r0, #0xd6
	bl m4aSongNumStart
_0803F636:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803F63C: .4byte 0x086648E4
_0803F640: .4byte gDispIo
_0803F644: .4byte gPlaySt

	thumb_func_start sub_803F648
sub_803F648: @ 0x0803F648
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r1, [r5, #0x30]
	ldr r0, [r5, #0x34]
	ldrh r0, [r0, #2]
	movs r2, #0xd0
	lsls r2, r2, #7
	adds r0, r0, r2
	strh r0, [r1, #0x22]
	ldr r0, [r5, #0x34]
	ldrb r0, [r0, #1]
	adds r0, #0x10
	lsls r0, r0, #5
	ldr r1, _0803F68C @ =gPal
	adds r0, r0, r1
	movs r1, #0xb0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0803F690 @ =0x085CAE6C
	lsls r4, r4, #2
	adds r4, r4, r0
	ldr r0, [r4]
	movs r1, #0x16
	movs r2, #8
	adds r3, r5, #0
	bl StartPalFade
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803F68C: .4byte gPal
_0803F690: .4byte 0x085CAE6C

	thumb_func_start sub_803F694
sub_803F694: @ 0x0803F694
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x34]
	ldrb r0, [r0, #1]
	adds r0, #0x10
	lsls r0, r0, #5
	ldr r1, _0803F6C0 @ =gPal
	adds r0, r0, r1
	movs r1, #0x16
	movs r2, #8
	adds r3, r4, #0
	bl StartPalFade
	ldr r0, _0803F6C4 @ =0x086648FC
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x54]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803F6C0: .4byte gPal
_0803F6C4: .4byte 0x086648FC

	thumb_func_start sub_803F6C8
sub_803F6C8: @ 0x0803F6C8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0803F708 @ =0x082DD268
	ldr r1, _0803F70C @ =0x06004400
	bl Decompress
	ldr r0, _0803F710 @ =0x082DD4C8
	movs r1, #0x60
	movs r2, #0x20
	bl ApplyPaletteExt
	adds r1, r4, #0
	adds r1, #0x40
	movs r0, #0
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0803F700
	ldr r2, [r4, #0x34]
	lsls r2, r2, #3
	movs r0, #0x7f
	movs r1, #2
	bl sub_805FEC8
_0803F700:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803F708: .4byte 0x082DD268
_0803F70C: .4byte 0x06004400
_0803F710: .4byte 0x082DD4C8

	thumb_func_start sub_803F714
sub_803F714: @ 0x0803F714
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	adds r7, r0, #0
	ldr r0, _0803F7C8 @ =gBg2Tm
	ldr r1, [r7, #0x34]
	subs r1, #1
	ldr r2, [r7, #0x38]
	subs r2, #3
	ldr r3, _0803F7CC @ =0x00003220
	movs r4, #4
	str r4, [sp]
	movs r4, #6
	str r4, [sp, #4]
	ldr r4, _0803F7D0 @ =0x082DD4E8
	str r4, [sp, #8]
	ldr r6, _0803F7D4 @ =0x085CAE9C
	adds r5, r7, #0
	adds r5, #0x40
	ldrb r4, [r5]
	adds r4, r4, r6
	ldrb r4, [r4]
	str r4, [sp, #0xc]
	bl sub_8014F70
	movs r0, #4
	bl EnableBgSync
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	adds r6, r0, r6
	ldrb r0, [r6]
	cmp r0, #0xff
	bne _0803F75E
	adds r0, r7, #0
	bl Proc_Break
_0803F75E:
	ldr r3, _0803F7D8 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r4, [r3, #0x10]
	ands r0, r4
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	adds r2, r3, #0
	adds r2, #0x3c
	ldr r0, _0803F7DC @ =0x0000FFE0
	ldrh r4, [r3, #0x3c]
	ands r0, r4
	movs r1, #4
	orrs r0, r1
	ldr r1, _0803F7E0 @ =0x0000E0FF
	ands r0, r1
	movs r4, #0xd8
	lsls r4, r4, #5
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0xc
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #0
	strb r0, [r1]
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803F7C8: .4byte gBg2Tm
_0803F7CC: .4byte 0x00003220
_0803F7D0: .4byte 0x082DD4E8
_0803F7D4: .4byte 0x085CAE9C
_0803F7D8: .4byte gDispIo
_0803F7DC: .4byte 0x0000FFE0
_0803F7E0: .4byte 0x0000E0FF

	thumb_func_start sub_803F7E4
sub_803F7E4: @ 0x0803F7E4
	push {lr}
	ldr r0, _0803F818 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	ldr r3, _0803F81C @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r2, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_0803F818: .4byte gBg2Tm
_0803F81C: .4byte gDispIo

	thumb_func_start sub_803F820
sub_803F820: @ 0x0803F820
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0803F84C @ =0x085CAEB4
	movs r1, #2
	bl SpawnProc
	ldr r2, [r4, #0x2c]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	lsls r1, r1, #1
	str r1, [r0, #0x34]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	lsls r1, r1, #1
	str r1, [r0, #0x38]
	adds r4, #0x41
	ldrb r1, [r4]
	adds r0, #0x41
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803F84C: .4byte 0x085CAEB4

	thumb_func_start sub_803F850
sub_803F850: @ 0x0803F850
	push {lr}
	ldr r0, [r0, #0x30]
	movs r1, #0
	bl sub_803F648
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_803F860
sub_803F860: @ 0x0803F860
	push {lr}
	ldr r0, [r0, #0x30]
	bl MU_Hide
	pop {r0}
	bx r0

	thumb_func_start sub_803F86C
sub_803F86C: @ 0x0803F86C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x30]
	ldr r1, [r4, #0x34]
	lsls r1, r1, #4
	ldr r2, [r4, #0x38]
	lsls r2, r2, #4
	bl sub_80610F0
	ldr r1, [r4, #0x2c]
	ldr r0, [r4, #0x34]
	strb r0, [r1, #0xe]
	ldr r1, [r4, #0x2c]
	ldr r0, [r4, #0x38]
	strb r0, [r1, #0xf]
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_803F890
sub_803F890: @ 0x0803F890
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x3c]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _0803F8A4
	ldr r0, [r4, #0x30]
	bl sub_805FBDC
_0803F8A4:
	ldr r0, [r4, #0x30]
	bl sub_80610D0
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_803F8B0
sub_803F8B0: @ 0x0803F8B0
	push {lr}
	ldr r0, [r0, #0x30]
	bl sub_803F694
	pop {r0}
	bx r0

	thumb_func_start sub_803F8BC
sub_803F8BC: @ 0x0803F8BC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0803F8DC @ =0x085CAEB4
	bl Proc_Find
	rsbs r1, r0, #0
	orrs r1, r0
	cmp r1, #0
	blt _0803F8D4
	adds r0, r4, #0
	bl Proc_Break
_0803F8D4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803F8DC: .4byte 0x085CAEB4

	thumb_func_start sub_803F8E0
sub_803F8E0: @ 0x0803F8E0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r7, r2, #0
	mov r8, r3
	ldr r0, [sp, #0x1c]
	ldr r1, [sp, #0x20]
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r1, #0
	beq _0803F908
	ldr r0, _0803F904 @ =0x085CAEE4
	bl SpawnProcLocking
	b _0803F910
	.align 2, 0
_0803F904: .4byte 0x085CAEE4
_0803F908:
	ldr r0, _0803F934 @ =0x085CAEE4
	movs r1, #2
	bl SpawnProc
_0803F910:
	adds r1, r0, #0
	str r5, [r1, #0x2c]
	str r6, [r1, #0x30]
	str r7, [r1, #0x34]
	mov r0, r8
	str r0, [r1, #0x38]
	ldr r0, [sp, #0x18]
	str r0, [r1, #0x3c]
	adds r0, r1, #0
	adds r0, #0x41
	strb r4, [r0]
	adds r0, r1, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0803F934: .4byte 0x085CAEE4

	thumb_func_start sub_803F938
sub_803F938: @ 0x0803F938
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r7, r2, #0
	mov r8, r3
	ldr r0, [sp, #0x1c]
	ldr r1, [sp, #0x20]
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r1, #0
	beq _0803F960
	ldr r0, _0803F95C @ =0x085CAF5C
	bl SpawnProcLocking
	b _0803F968
	.align 2, 0
_0803F95C: .4byte 0x085CAF5C
_0803F960:
	ldr r0, _0803F98C @ =0x085CAF5C
	movs r1, #2
	bl SpawnProc
_0803F968:
	adds r1, r0, #0
	str r5, [r1, #0x2c]
	str r6, [r1, #0x30]
	str r7, [r1, #0x34]
	mov r0, r8
	str r0, [r1, #0x38]
	ldr r0, [sp, #0x18]
	str r0, [r1, #0x3c]
	adds r0, r1, #0
	adds r0, #0x41
	strb r4, [r0]
	adds r0, r1, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0803F98C: .4byte 0x085CAF5C

	thumb_func_start sub_803F990
sub_803F990: @ 0x0803F990
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r2, r1, #0
	ldr r3, _0803F9B0 @ =0x0810F434
	movs r0, #0
	str r0, [sp]
	movs r0, #4
	adds r1, r4, #0
	bl PutSprite
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803F9B0: .4byte 0x0810F434

	thumb_func_start sub_803F9B4
sub_803F9B4: @ 0x0803F9B4
	push {lr}
	ldr r2, [r0, #0x2c]
	ldr r1, [r0, #0x30]
	adds r0, r2, #0
	bl sub_803F990
	pop {r0}
	bx r0

	thumb_func_start sub_803F9C4
sub_803F9C4: @ 0x0803F9C4
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r6, r0, #0
	mov r8, r1
	adds r5, r2, #0
	ldr r4, _0803F9F0 @ =0x085CAF9C
	adds r0, r4, #0
	bl Proc_EndEach
	adds r0, r4, #0
	adds r1, r5, #0
	bl SpawnProc
	str r6, [r0, #0x2c]
	mov r1, r8
	str r1, [r0, #0x30]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803F9F0: .4byte 0x085CAF9C

	thumb_func_start sub_803F9F4
sub_803F9F4: @ 0x0803F9F4
	push {r4, lr}
	ldr r4, _0803FA10 @ =0x085CAF9C
	adds r0, r4, #0
	bl Proc_Find
	cmp r0, #0
	beq _0803FA08
	adds r0, r4, #0
	bl Proc_EndEach
_0803FA08:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803FA10: .4byte 0x085CAF9C

	thumb_func_start sub_803FA14
sub_803FA14: @ 0x0803FA14
	push {r4, lr}
	sub sp, #0x18
	ldr r1, _0803FA90 @ =0x0810F442
	mov r0, sp
	movs r2, #0x18
	bl memcpy
	mov r0, sp
	bl InitBgs
	ldr r3, _0803FA94 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	bl ApplySystemGraphics
	ldr r0, _0803FA98 @ =0x08109A80
	movs r1, #0xc0
	lsls r1, r1, #2
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r4, _0803FA9C @ =0x08336D5C
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r1, r2
	adds r0, r4, #0
	bl Decompress
	ldr r0, _0803FAA0 @ =0x08109C80
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x40
	bl ApplyPaletteExt
	add sp, #0x18
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803FA90: .4byte 0x0810F442
_0803FA94: .4byte gDispIo
_0803FA98: .4byte 0x08109A80
_0803FA9C: .4byte 0x08336D5C
_0803FAA0: .4byte 0x08109C80

	thumb_func_start sub_803FAA4
sub_803FAA4: @ 0x0803FAA4
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	ldr r4, _0803FAF8 @ =gBg3Tm
	ldr r0, _0803FAFC @ =0x086773D8
	bl Proc_EndEach
	movs r2, #0
	movs r0, #0x14
	subs r0, r0, r5
	lsls r0, r0, #5
	cmp r2, r0
	bge _0803FAD0
	ldr r1, _0803FB00 @ =0xFFFFE000
	adds r3, r1, #0
	adds r1, r0, #0
_0803FAC4:
	adds r0, r2, r3
	strh r0, [r4]
	adds r4, #2
	adds r2, #1
	cmp r2, r1
	blt _0803FAC4
_0803FAD0:
	movs r2, #0
	lsls r1, r5, #5
	ldr r5, _0803FAFC @ =0x086773D8
	cmp r2, r1
	bge _0803FAEA
	ldr r0, _0803FB04 @ =0xFFFFF000
	adds r3, r0, #0
_0803FADE:
	adds r0, r2, r3
	strh r0, [r4]
	adds r4, #2
	adds r2, #1
	cmp r2, r1
	blt _0803FADE
_0803FAEA:
	adds r0, r5, #0
	adds r1, r6, #0
	bl SpawnProc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803FAF8: .4byte gBg3Tm
_0803FAFC: .4byte 0x086773D8
_0803FB00: .4byte 0xFFFFE000
_0803FB04: .4byte 0xFFFFF000

	thumb_func_start sub_803FB08
sub_803FB08: @ 0x0803FB08
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x28
	mov r8, r0
	ldr r1, _0803FB64 @ =0x0810F45A
	mov r0, sp
	movs r2, #0x28
	bl memcpy
	ldr r4, _0803FB68 @ =gBg3Tm
	ldr r0, _0803FB6C @ =0x086773D8
	bl Proc_EndEach
	movs r2, #0
	movs r6, #0xf
	ldr r5, _0803FB70 @ =0x0000027F
_0803FB2A:
	adds r0, r2, #0
	adds r3, r4, #0
	adds r4, r3, #2
	cmp r2, #0
	bge _0803FB36
	adds r0, #0x1f
_0803FB36:
	asrs r0, r0, #5
	lsls r0, r0, #1
	mov r7, sp
	adds r1, r7, r0
	adds r0, r6, #0
	ldrh r1, [r1]
	ands r0, r1
	lsls r0, r0, #0xc
	adds r0, r2, r0
	strh r0, [r3]
	adds r2, #1
	cmp r2, r5
	ble _0803FB2A
	ldr r0, _0803FB6C @ =0x086773D8
	mov r1, r8
	bl SpawnProc
	add sp, #0x28
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803FB64: .4byte 0x0810F45A
_0803FB68: .4byte gBg3Tm
_0803FB6C: .4byte 0x086773D8
_0803FB70: .4byte 0x0000027F

	thumb_func_start sub_803FB74
sub_803FB74: @ 0x0803FB74
	push {lr}
	ldr r0, _0803FB80 @ =0x086773D8
	bl Proc_EndEach
	pop {r0}
	bx r0
	.align 2, 0
_0803FB80: .4byte 0x086773D8

	thumb_func_start sub_803FB84
sub_803FB84: @ 0x0803FB84
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	adds r5, r1, #0
	lsls r2, r2, #5
	mov r8, r2
	cmp r3, #0
	ble _0803FBBA
	movs r7, #0x80
	lsls r7, r7, #3
	adds r4, r3, #0
_0803FB9C:
	mov r2, r8
	cmp r2, #0
	bge _0803FBA4
	adds r2, #3
_0803FBA4:
	lsls r2, r2, #9
	lsrs r2, r2, #0xb
	adds r0, r6, #0
	adds r1, r5, #0
	bl CpuFastSet
	adds r6, r6, r7
	adds r5, r5, r7
	subs r4, #1
	cmp r4, #0
	bne _0803FB9C
_0803FBBA:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_803FBC4
sub_803FBC4: @ 0x0803FBC4
	push {r4, r5, r6, lr}
	ldr r0, [r0, #0x58]
	movs r6, #3
	ands r6, r0
	cmp r0, #0
	bge _0803FBD2
	adds r0, #3
_0803FBD2:
	asrs r4, r0, #2
	ldr r0, _0803FC08 @ =0x08106784
	ldr r5, _0803FC0C @ =gBuf
	adds r1, r5, #0
	bl Decompress
	lsls r0, r6, #8
	lsls r4, r4, #0xb
	adds r0, r0, r4
	adds r0, r0, r5
	ldr r1, _0803FC10 @ =0x06014000
	movs r2, #8
	movs r3, #2
	bl sub_803FB84
	ldr r0, _0803FC14 @ =gBg2Tm
	ldr r1, _0803FC18 @ =0x08109D78
	movs r2, #0x80
	lsls r2, r2, #5
	bl TmApplyTsa_t
	movs r0, #4
	bl EnableBgSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803FC08: .4byte 0x08106784
_0803FC0C: .4byte gBuf
_0803FC10: .4byte 0x06014000
_0803FC14: .4byte gBg2Tm
_0803FC18: .4byte 0x08109D78

	thumb_func_start sub_803FC1C
sub_803FC1C: @ 0x0803FC1C
	push {lr}
	sub sp, #4
	ldr r3, _0803FC38 @ =0x085CAFB4
	movs r0, #0
	str r0, [sp]
	movs r0, #4
	movs r1, #0x28
	movs r2, #8
	bl PutSpriteExt
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_0803FC38: .4byte 0x085CAFB4

	thumb_func_start sub_803FC3C
sub_803FC3C: @ 0x0803FC3C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r4, _0803FC5C @ =0x085CAFC4
	adds r0, r4, #0
	bl Proc_EndEach
	adds r0, r4, #0
	adds r1, r5, #0
	bl SpawnProc
	str r6, [r0, #0x58]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0803FC5C: .4byte 0x085CAFC4

	thumb_func_start sub_803FC60
sub_803FC60: @ 0x0803FC60
	push {lr}
	ldr r0, _0803FC6C @ =0x085CAFC4
	bl Proc_EndEach
	pop {r0}
	bx r0
	.align 2, 0
_0803FC6C: .4byte 0x085CAFC4

	thumb_func_start sub_803FC70
sub_803FC70: @ 0x0803FC70
	ldr r3, _0803FCB0 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r2, #0
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xf
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r2, [r0]
	ldr r0, _0803FCB4 @ =0x0000FFE0
	ldrh r2, [r3, #0x3c]
	ands r0, r2
	ldr r1, _0803FCB8 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	bx lr
	.align 2, 0
_0803FCB0: .4byte gDispIo
_0803FCB4: .4byte 0x0000FFE0
_0803FCB8: .4byte 0x0000E0FF

	thumb_func_start sub_803FCBC
sub_803FCBC: @ 0x0803FCBC
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, _0803FD38 @ =0x00007E08
	mov sb, r0
	ldr r2, [r5, #0x2c]
	ldr r0, [r5, #0x34]
	adds r2, r2, r0
	asrs r2, r2, #1
	ldr r0, [r5, #0x30]
	ldr r1, [r5, #0x38]
	adds r0, r0, r1
	asrs r0, r0, #1
	mov r8, r0
	str r2, [r5, #0x34]
	str r0, [r5, #0x38]
	movs r7, #0
	adds r6, r2, #0
_0803FCE6:
	ldr r4, [r5, #0x40]
	adds r0, r4, #0
	cmp r4, #0
	bge _0803FCF0
	adds r0, r4, #7
_0803FCF0:
	asrs r0, r0, #3
	adds r0, r0, r7
	ldr r1, [r5, #0x3c]
	bl __modsi3
	movs r1, #7
	ands r4, r1
	subs r1, r6, r4
	add r0, sb
	str r0, [sp]
	movs r0, #0xc
	mov r2, r8
	ldr r3, _0803FD3C @ =0x085CAFE4
	bl PutSprite
	adds r6, #8
	adds r7, #1
	cmp r7, #0x1f
	ble _0803FCE6
	ldr r1, [r5, #0x40]
	adds r1, #1
	str r1, [r5, #0x40]
	ldr r0, [r5, #0x3c]
	lsls r0, r0, #3
	cmp r1, r0
	bne _0803FD28
	movs r0, #0
	str r0, [r5, #0x40]
_0803FD28:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803FD38: .4byte 0x00007E08
_0803FD3C: .4byte 0x085CAFE4

	thumb_func_start sub_803FD40
sub_803FD40: @ 0x0803FD40
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	adds r6, r1, #0
	mov r8, r2
	mov sb, r3
	ldr r0, _0803FDC4 @ =0x081065C8
	ldr r1, _0803FDC8 @ =gBuf
	bl Decompress
	movs r4, #0
	cmp r4, r6
	bge _0803FD84
	ldr r5, _0803FDCC @ =0x06014100
_0803FD60:
	adds r0, r4, #0
	adds r1, r6, #0
	bl __modsi3
	adds r0, r7, r0
	ldrb r0, [r0]
	lsls r0, r0, #5
	ldr r1, _0803FDC8 @ =gBuf
	adds r0, r0, r1
	adds r1, r5, #0
	movs r2, #1
	movs r3, #2
	bl sub_803FB84
	adds r5, #0x20
	adds r4, #1
	cmp r4, r6
	blt _0803FD60
_0803FD84:
	ldr r0, [sp, #0x1c]
	lsls r0, r0, #5
	ldr r1, _0803FDD0 @ =0x08109B00
	adds r0, r0, r1
	movs r1, #0xb8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r4, _0803FDD4 @ =0x085CAFEC
	adds r0, r4, #0
	bl Proc_EndEach
	adds r0, r4, #0
	ldr r1, [sp, #0x20]
	bl SpawnProc
	mov r1, r8
	str r1, [r0, #0x2c]
	str r1, [r0, #0x34]
	mov r1, sb
	str r1, [r0, #0x30]
	str r1, [r0, #0x38]
	str r6, [r0, #0x3c]
	movs r1, #0
	str r1, [r0, #0x40]
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803FDC4: .4byte 0x081065C8
_0803FDC8: .4byte gBuf
_0803FDCC: .4byte 0x06014100
_0803FDD0: .4byte 0x08109B00
_0803FDD4: .4byte 0x085CAFEC

	thumb_func_start sub_803FDD8
sub_803FDD8: @ 0x0803FDD8
	push {lr}
	ldr r2, _0803FE04 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, _0803FE08 @ =0x085CAFEC
	bl Proc_EndEach
	pop {r0}
	bx r0
	.align 2, 0
_0803FE04: .4byte gDispIo
_0803FE08: .4byte 0x085CAFEC

	thumb_func_start sub_803FE0C
sub_803FE0C: @ 0x0803FE0C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _0803FE24 @ =0x085CAFEC
	bl Proc_Find
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803FE24: .4byte 0x085CAFEC

	thumb_func_start sub_803FE28
sub_803FE28: @ 0x0803FE28
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _0803FE44 @ =0x085CAFEC
	bl Proc_Find
	str r4, [r0, #0x34]
	str r4, [r0, #0x2c]
	str r5, [r0, #0x38]
	str r5, [r0, #0x30]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0803FE44: .4byte 0x085CAFEC

	thumb_func_start sub_803FE48
sub_803FE48: @ 0x0803FE48
	push {lr}
	lsls r0, r0, #5
	ldr r1, _0803FE60 @ =0x08109B00
	adds r0, r0, r1
	movs r1, #0xb8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r0}
	bx r0
	.align 2, 0
_0803FE60: .4byte 0x08109B00

	thumb_func_start sub_803FE64
sub_803FE64: @ 0x0803FE64
	push {r4, lr}
	sub sp, #0x20
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r1, _0803FEA8 @ =0x0810F50A
	mov r0, sp
	movs r2, #0x20
	bl memcpy
	ldr r0, _0803FEAC @ =0x0203C9D0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0803FEA0
	mov r1, sp
	adds r0, r1, r4
	ldrb r2, [r0]
	adds r2, #0x10
	ldr r3, _0803FEB0 @ =gPal
	lsls r0, r2, #0xa
	lsls r1, r2, #5
	adds r0, r0, r1
	adds r0, r0, r2
	movs r1, #0x9f
	lsls r1, r1, #2
	adds r3, r3, r1
	strh r0, [r3]
	bl EnablePalSync
_0803FEA0:
	add sp, #0x20
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0803FEA8: .4byte 0x0810F50A
_0803FEAC: .4byte 0x0203C9D0
_0803FEB0: .4byte gPal

	thumb_func_start sub_803FEB4
sub_803FEB4: @ 0x0803FEB4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r0, _0803FFF8 @ =0x000082DA
	mov r8, r0
	movs r2, #0x2a
	ldrsh r1, [r7, r2]
	movs r3, #0x2c
	ldrsh r2, [r7, r3]
	ldr r3, _0803FFFC @ =0x085CB00C
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	ldr r4, _08040000 @ =0x0810F4C8
	adds r5, r7, #0
	adds r5, #0x2e
	ldrb r6, [r5]
	lsls r0, r6, #1
	adds r0, r0, r4
	ldrh r0, [r0]
	str r0, [sp]
	movs r0, #4
	bl PutSprite
	ldrb r5, [r5]
	cmp r5, #2
	bne _0803FEFE
	adds r0, r7, #0
	adds r0, #0x30
	ldrb r0, [r0]
	bl sub_803FE64
_0803FEFE:
	adds r2, r7, #0
	adds r2, #0x30
	ldrb r0, [r2]
	adds r0, #1
	movs r1, #0x1f
	ands r0, r1
	strb r0, [r2]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r7, #0x2e]
	cmp r1, r0
	bne _0803FFEC
	ldrh r1, [r7, #0x3a]
	ldrh r2, [r7, #0x36]
	adds r0, r1, r2
	strh r0, [r7, #0x36]
	ldrh r2, [r7, #0x3c]
	ldrh r3, [r7, #0x38]
	adds r0, r2, r3
	strh r0, [r7, #0x38]
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	cmp r0, #4
	ble _0803FF32
	subs r0, r1, #1
	strh r0, [r7, #0x3a]
_0803FF32:
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	cmp r0, #4
	ble _0803FF3E
	subs r0, r2, #1
	strh r0, [r7, #0x3c]
_0803FF3E:
	bl GetGameTime
	movs r1, #3
	ands r1, r0
	cmp r1, #0
	bne _0803FF66
	ldrh r1, [r7, #0x32]
	movs r6, #0x32
	ldrsh r0, [r7, r6]
	cmp r0, #0
	bge _0803FF58
	adds r0, r1, #1
	strh r0, [r7, #0x32]
_0803FF58:
	ldrh r1, [r7, #0x34]
	movs r2, #0x34
	ldrsh r0, [r7, r2]
	cmp r0, #0x34
	ble _0803FF66
	subs r0, r1, #1
	strh r0, [r7, #0x34]
_0803FF66:
	movs r3, #0x2a
	ldrsh r5, [r7, r3]
	movs r6, #0x32
	ldrsh r0, [r7, r6]
	adds r0, #0x3b
	adds r5, r5, r0
	movs r0, #0x2c
	ldrsh r4, [r7, r0]
	adds r4, #8
	ldr r6, _08040004 @ =0x085C39C0
	ldrh r1, [r7, #0x36]
	lsrs r0, r1, #5
	movs r1, #6
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	add r0, r8
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	adds r2, r4, #0
	adds r3, r6, #0
	bl PutSprite
	movs r2, #0x2a
	ldrsh r5, [r7, r2]
	movs r3, #0x34
	ldrsh r0, [r7, r3]
	adds r0, #0x3b
	adds r5, r5, r0
	movs r6, #0x2c
	ldrsh r4, [r7, r6]
	adds r4, #8
	ldr r6, _08040008 @ =0x085C3A08
	ldrh r1, [r7, #0x38]
	lsrs r0, r1, #5
	movs r1, #6
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	add r0, r8
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	adds r2, r4, #0
	adds r3, r6, #0
	bl PutSprite
	movs r2, #0x2a
	ldrsh r1, [r7, r2]
	adds r1, #0x40
	movs r3, #0x2c
	ldrsh r2, [r7, r3]
	adds r2, #8
	ldr r3, _0804000C @ =0x085CB020
	ldr r0, _08040010 @ =0x0203C618
	ldrb r0, [r0, #5]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	movs r0, #0
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
_0803FFEC:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0803FFF8: .4byte 0x000082DA
_0803FFFC: .4byte 0x085CB00C
_08040000: .4byte 0x0810F4C8
_08040004: .4byte 0x085C39C0
_08040008: .4byte 0x085C3A08
_0804000C: .4byte 0x085CB020
_08040010: .4byte 0x0203C618

	thumb_func_start sub_8040014
sub_8040014: @ 0x08040014
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	mov r8, r0
	adds r4, r1, #0
	adds r5, r2, #0
	adds r2, r3, #0
	ldr r6, [sp, #0x18]
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	lsls r6, r6, #0x18
	lsrs r6, r6, #0x18
	ldr r0, _08040080 @ =0x085CB02C
	mov r1, r8
	str r2, [sp]
	bl SpawnProc
	mov r8, r0
	movs r3, #0
	movs r1, #0
	strh r4, [r0, #0x2a]
	strh r5, [r0, #0x2c]
	adds r0, #0x2e
	strb r6, [r0]
	adds r0, #1
	ldr r2, [sp]
	strb r2, [r0]
	mov r0, r8
	strh r1, [r0, #0x32]
	movs r0, #0x34
	mov r2, r8
	strh r0, [r2, #0x34]
	strh r1, [r2, #0x38]
	strh r1, [r2, #0x36]
	movs r0, #4
	strh r0, [r2, #0x3c]
	strh r0, [r2, #0x3a]
	mov r0, r8
	adds r0, #0x3e
	strb r3, [r0]
	subs r0, #0xe
	strb r3, [r0]
	mov r0, r8
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_08040080: .4byte 0x085CB02C

	thumb_func_start sub_8040084
sub_8040084: @ 0x08040084
	push {r4, lr}
	ldr r4, [sp, #8]
	strh r1, [r0, #0x32]
	strh r2, [r0, #0x34]
	strh r3, [r0, #0x3a]
	strh r4, [r0, #0x3c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8040098
sub_8040098: @ 0x08040098
	strh r1, [r0, #0x2a]
	strh r2, [r0, #0x2c]
	bx lr
	.align 2, 0

	thumb_func_start sub_80400A0
sub_80400A0: @ 0x080400A0
	push {r4, lr}
	sub sp, #0x20
	ldr r4, _080400E8 @ =0x08109BC0
	ldr r1, _080400EC @ =0x0810F50A
	mov r0, sp
	movs r2, #0x20
	bl memcpy
	ldr r0, _080400F0 @ =0x0203C9D0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _080400DE
	bl GetGameTime
	movs r1, #0x3f
	ands r1, r0
	asrs r1, r1, #1
	mov r2, sp
	adds r0, r2, r1
	ldr r1, _080400F4 @ =gPal
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r0, r0, r4
	ldrh r0, [r0]
	ldr r2, _080400F8 @ =0x0000033E
	adds r1, r1, r2
	strh r0, [r1]
	bl EnablePalSync
_080400DE:
	add sp, #0x20
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080400E8: .4byte 0x08109BC0
_080400EC: .4byte 0x0810F50A
_080400F0: .4byte 0x0203C9D0
_080400F4: .4byte gPal
_080400F8: .4byte 0x0000033E

	thumb_func_start sub_80400FC
sub_80400FC: @ 0x080400FC
	push {r4, lr}
	sub sp, #0x20
	ldr r4, _08040144 @ =0x08109C20
	ldr r1, _08040148 @ =0x0810F50A
	mov r0, sp
	movs r2, #0x20
	bl memcpy
	ldr r0, _0804014C @ =0x0203C9D0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0804013C
	bl GetGameTime
	movs r1, #0x3f
	ands r1, r0
	asrs r1, r1, #1
	mov r2, sp
	adds r0, r2, r1
	ldr r1, _08040150 @ =gPal
	ldrb r0, [r0]
	lsls r0, r0, #1
	adds r0, r0, r4
	ldrh r0, [r0]
	movs r2, #0x9f
	lsls r2, r2, #2
	adds r1, r1, r2
	strh r0, [r1]
	bl EnablePalSync
_0804013C:
	add sp, #0x20
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08040144: .4byte 0x08109C20
_08040148: .4byte 0x0810F50A
_0804014C: .4byte 0x0203C9D0
_08040150: .4byte gPal

	thumb_func_start sub_8040154
sub_8040154: @ 0x08040154
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r7, r0, #0
	ldr r0, _08040194 @ =0x0203C618
	ldrb r0, [r0]
	cmp r0, #1
	beq _0804016C
	b _080402DC
_0804016C:
	adds r0, r7, #0
	adds r0, #0x44
	movs r1, #0
	ldrsb r1, [r0, r1]
	movs r2, #0xc0
	lsls r2, r2, #4
	mov r8, r2
	str r0, [sp, #4]
	cmp r1, #0
	beq _08040186
	movs r0, #0x80
	lsls r0, r0, #3
	mov r8, r0
_08040186:
	ldr r3, _08040198 @ =0x085CB044
	cmp r1, #0
	beq _0804019C
	movs r0, #0x80
	lsls r0, r0, #4
	b _080401A0
	.align 2, 0
_08040194: .4byte 0x0203C618
_08040198: .4byte 0x085CB044
_0804019C:
	movs r0, #0x80
	lsls r0, r0, #3
_080401A0:
	str r0, [sp]
	movs r0, #0xb
	movs r1, #0x50
	movs r2, #0x20
	bl PutSprite
	movs r6, #0
	ldr r0, [r7, #0x2c]
	cmp r6, r0
	bge _08040202
	movs r5, #0x20
_080401B6:
	lsls r1, r6, #1
	adds r0, r7, #0
	adds r0, #0x30
	adds r4, r0, r1
	movs r2, #0
	ldrsh r1, [r4, r2]
	adds r1, #8
	movs r0, #0xf
	ands r0, r6
	lsls r0, r0, #0xc
	add r0, r8
	str r0, [sp]
	movs r0, #4
	adds r2, r5, #0
	ldr r3, _080402BC @ =0x0810F52A
	bl PutSprite
	adds r0, r7, #0
	adds r0, #0x3a
	adds r0, r0, r6
	ldrb r0, [r0]
	cmp r0, #0
	beq _080401F8
	movs r0, #0
	ldrsh r1, [r4, r0]
	adds r1, #8
	mov r2, r8
	str r2, [sp]
	movs r0, #4
	adds r2, r5, #0
	ldr r3, _080402C0 @ =0x0810F544
	bl PutSprite
_080401F8:
	adds r5, #0x18
	adds r6, #1
	ldr r0, [r7, #0x2c]
	cmp r6, r0
	blt _080401B6
_08040202:
	ldr r0, [r7, #0x40]
	cmp r0, #0
	beq _080402B4
	ldr r0, _080402C4 @ =0x0203C9D0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _08040232
	bl GetGameTime
	ldr r2, _080402C8 @ =gPal
	movs r1, #0x3f
	ands r1, r0
	lsrs r1, r1, #2
	lsls r1, r1, #1
	ldr r0, _080402CC @ =0x0831AAFC
	adds r1, r1, r0
	ldrh r0, [r1]
	ldr r1, _080402D0 @ =0x0000031A
	adds r2, r2, r1
	strh r0, [r2]
	bl EnablePalSync
_08040232:
	ldr r0, [r7, #0x40]
	cmp r0, #0xff
	bgt _0804023C
	adds r0, #0x10
	str r0, [r7, #0x40]
_0804023C:
	ldr r4, _080402D4 @ =gSinLut
	movs r2, #0x80
	adds r2, r2, r4
	mov sb, r2
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	ldr r1, [r7, #0x40]
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, sb
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	ldr r1, [r7, #0x40]
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	ldr r3, _080402D8 @ =0x0810F55E
	movs r0, #0x80
	lsls r0, r0, #8
	str r0, [sp]
	movs r0, #4
	movs r1, #0x78
	movs r2, #0
	bl PutSprite
_080402B4:
	bl sub_80400FC
	b _0804036A
	.align 2, 0
_080402BC: .4byte 0x0810F52A
_080402C0: .4byte 0x0810F544
_080402C4: .4byte 0x0203C9D0
_080402C8: .4byte gPal
_080402CC: .4byte 0x0831AAFC
_080402D0: .4byte 0x0000031A
_080402D4: .4byte gSinLut
_080402D8: .4byte 0x0810F55E
_080402DC:
	ldr r3, _08040344 @ =0x085CB044
	movs r0, #0
	str r0, [sp]
	movs r0, #0xb
	movs r1, #0x50
	movs r2, #0x20
	bl PutSprite
	movs r6, #0
	ldr r0, [r7, #0x2c]
	adds r1, r7, #0
	adds r1, #0x44
	str r1, [sp, #4]
	cmp r6, r0
	bge _08040366
	ldr r2, _08040348 @ =0x085CB0B4
	mov sl, r2
	movs r0, #8
	rsbs r0, r0, #0
	mov sb, r0
	movs r1, #0x28
	mov r8, r1
_08040308:
	lsls r1, r6, #1
	adds r0, r7, #0
	adds r0, #0x30
	adds r5, r0, r1
	movs r2, #0
	ldrsh r1, [r5, r2]
	adds r4, r7, #0
	adds r4, #0x3a
	adds r4, r4, r6
	ldrb r2, [r4]
	lsls r0, r2, #2
	add r0, sl
	ldr r3, [r0]
	movs r0, #0
	str r0, [sp]
	movs r0, #2
	mov r2, r8
	bl PutSprite
	ldrb r0, [r4]
	cmp r0, #0
	beq _0804034C
	ldrh r1, [r5]
	movs r2, #0
	ldrsh r0, [r5, r2]
	cmp r0, #0
	bge _0804035A
	adds r0, r1, #1
	b _08040358
	.align 2, 0
_08040344: .4byte 0x085CB044
_08040348: .4byte 0x085CB0B4
_0804034C:
	ldrh r1, [r5]
	movs r2, #0
	ldrsh r0, [r5, r2]
	cmp r0, sb
	ble _0804035A
	subs r0, r1, #1
_08040358:
	strh r0, [r5]
_0804035A:
	movs r0, #0x10
	add r8, r0
	adds r6, #1
	ldr r0, [r7, #0x2c]
	cmp r6, r0
	blt _08040308
_08040366:
	bl sub_80400A0
_0804036A:
	ldr r0, _080403B8 @ =0x0203C618
	movs r1, #0x80
	lsls r1, r1, #4
	mov r8, r1
	ldrb r0, [r0]
	cmp r0, #1
	bne _0804037E
	movs r2, #0x80
	lsls r2, r2, #3
	mov r8, r2
_0804037E:
	ldr r1, [sp, #4]
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq _08040390
	movs r0, #0xc0
	movs r1, #0x10
	bl sub_803F990
_08040390:
	ldr r0, [r7, #0x48]
	cmp r0, #0
	blt _080403A8
	adds r2, r0, #0
	adds r2, #8
	ldr r3, _080403BC @ =0x085CB07A
	mov r0, r8
	str r0, [sp]
	movs r0, #4
	movs r1, #0x50
	bl PutSprite
_080403A8:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080403B8: .4byte 0x0203C618
_080403BC: .4byte 0x085CB07A

	thumb_func_start sub_80403C0
sub_80403C0: @ 0x080403C0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	adds r5, r1, #0
	mov r8, r2
	ldr r4, _08040460 @ =0x085CB0BC
	adds r0, r4, #0
	bl Proc_EndEach
	adds r0, r4, #0
	adds r1, r6, #0
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x44
	movs r2, #0
	movs r0, #1
	strb r0, [r1]
	str r2, [r4, #0x40]
	subs r0, #2
	str r0, [r4, #0x48]
	movs r3, #0
	adds r5, r4, #0
	adds r5, #0x3a
	ldr r0, _08040464 @ =0x0000FFF8
	mov ip, r0
	adds r2, r4, #0
	adds r2, #0x30
_08040400:
	adds r0, r5, r3
	mov r7, r8
	adds r1, r7, r3
	ldrb r1, [r1]
	strb r1, [r0]
	mov r0, ip
	strh r0, [r2]
	adds r2, #2
	adds r3, #1
	cmp r3, #4
	ble _08040400
	ldr r2, [r6, #0x38]
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	adds r0, r6, #0
	adds r0, #0x4a
	ldrb r0, [r0]
	adds r0, #0x28
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp]
	str r4, [sp, #4]
	movs r0, #0xe0
	movs r1, #0x28
	movs r3, #6
	bl sub_8040A80
	adds r0, r6, #0
	adds r0, #0x48
	ldrb r0, [r0]
	lsls r0, r0, #4
	movs r1, #0x28
	subs r1, r1, r0
	ldr r0, [r6, #0x38]
	str r0, [sp]
	str r4, [sp, #4]
	movs r0, #0x98
	movs r2, #0x88
	movs r3, #0x27
	bl sub_80404E8
	adds r0, r4, #0
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08040460: .4byte 0x085CB0BC
_08040464: .4byte 0x0000FFF8

	thumb_func_start sub_8040468
sub_8040468: @ 0x08040468
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0
	mov r8, r0
	b _080404D0
_0804047C:
	mov r1, r8
	lsls r0, r1, #4
	ldr r1, [r4, #0x30]
	adds r5, r1, r0
	ldr r0, [r4, #0x38]
	movs r1, #1
	add r1, r8
	mov sl, r1
	cmp r5, r0
	bge _080404CE
	ldr r0, [r4, #0x34]
	cmp r5, r0
	ble _080404CE
	movs r6, #0
	mov r0, r8
	lsls r0, r0, #2
	mov sb, r0
	movs r7, #0
_080404A0:
	mov r0, sb
	add r0, r8
	adds r0, r0, r6
	adds r0, #1
	bl GetUnit
	adds r2, r0, #0
	ldr r0, [r2]
	cmp r0, #0
	beq _080404C6
	ldr r1, [r4, #0x2c]
	adds r1, r1, r7
	str r2, [sp]
	movs r0, #4
	adds r2, r5, #0
	movs r3, #0x80
	lsls r3, r3, #3
	bl PutUnitSpriteExt
_080404C6:
	adds r7, #0xe
	adds r6, #1
	cmp r6, #4
	ble _080404A0
_080404CE:
	mov r8, sl
_080404D0:
	ldr r0, [r4, #0x3c]
	cmp r8, r0
	blt _0804047C
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80404E8
sub_80404E8: @ 0x080404E8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sb, r0
	mov sl, r1
	adds r7, r2, #0
	mov r8, r3
	ldr r6, [sp, #0x20]
	ldr r5, [sp, #0x24]
	ldr r4, _0804052C @ =0x085CB0D4
	adds r0, r4, #0
	bl Proc_EndEach
	adds r0, r4, #0
	adds r1, r5, #0
	bl SpawnProc
	str r6, [r0, #0x3c]
	mov r1, sb
	str r1, [r0, #0x2c]
	mov r1, sl
	str r1, [r0, #0x30]
	mov r1, r8
	str r1, [r0, #0x34]
	str r7, [r0, #0x38]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804052C: .4byte 0x085CB0D4

	thumb_func_start sub_8040530
sub_8040530: @ 0x08040530
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08040548 @ =0x085CB0D4
	bl Proc_Find
	ldr r1, [r0, #0x30]
	adds r1, r1, r4
	str r1, [r0, #0x30]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08040548: .4byte 0x085CB0D4

	thumb_func_start sub_804054C
sub_804054C: @ 0x0804054C
	push {r4, r5, r6, lr}
	ldr r5, _08040590 @ =0x08109C00
	ldr r0, _08040594 @ =0x0203C9D0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0804058A
	bl GetGameTime
	adds r2, r0, #0
	movs r0, #0x1f
	ands r2, r0
	asrs r2, r2, #1
	movs r1, #0
	ldr r0, _08040598 @ =gPal
	movs r4, #0xf
	ldr r6, _0804059C @ =0x00000336
	adds r3, r0, r6
_08040572:
	adds r0, r2, r1
	ands r0, r4
	lsls r0, r0, #1
	adds r0, r0, r5
	ldrh r0, [r0]
	strh r0, [r3]
	adds r3, #2
	adds r1, #1
	cmp r1, #4
	ble _08040572
	bl EnablePalSync
_0804058A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08040590: .4byte 0x08109C00
_08040594: .4byte 0x0203C9D0
_08040598: .4byte gPal
_0804059C: .4byte 0x00000336

	thumb_func_start sub_80405A0
sub_80405A0: @ 0x080405A0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, [r5, #0x14]
	mov r8, r0
	ldr r1, [r5, #0x34]
	ldr r0, [r5, #0x2c]
	adds r1, r1, r0
	asrs r1, r1, #1
	ldr r2, [r5, #0x38]
	ldr r0, [r5, #0x30]
	adds r2, r2, r0
	asrs r2, r2, #1
	str r1, [r5, #0x2c]
	str r2, [r5, #0x30]
	ldr r3, _08040628 @ =0x085CB0EC
	ldr r0, [r5, #0x3c]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	movs r4, #0
	str r4, [sp]
	movs r0, #2
	bl PutSprite
	ldr r1, [r5, #0x40]
	adds r1, #0x60
	ldr r3, _0804062C @ =0x0810F57C
	str r4, [sp]
	movs r0, #2
	movs r2, #0x30
	bl PutSprite
	ldr r3, _08040630 @ =0x085CB044
	str r4, [sp]
	movs r0, #2
	movs r1, #0x60
	movs r2, #0x20
	bl PutSprite
	ldr r3, _08040634 @ =0x0810F52A
	movs r0, #0x80
	lsls r0, r0, #4
	str r0, [sp]
	movs r0, #4
	movs r1, #0x50
	movs r2, #0x20
	bl PutSprite
	ldr r7, _08040638 @ =0x085CB0F4
	movs r6, #0x48
_0804060A:
	ldr r0, [r5, #0x44]
	cmp r0, r4
	beq _08040614
	cmp r4, #2
	ble _0804063C
_08040614:
	ldr r3, [r7]
	movs r0, #0x80
	lsls r0, r0, #8
	str r0, [sp]
	movs r0, #4
	movs r1, #0xc4
	adds r2, r6, #0
	bl PutSprite
	b _0804064E
	.align 2, 0
_08040628: .4byte 0x085CB0EC
_0804062C: .4byte 0x0810F57C
_08040630: .4byte 0x085CB044
_08040634: .4byte 0x0810F52A
_08040638: .4byte 0x085CB0F4
_0804063C:
	ldr r3, [r7]
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #4
	movs r1, #0xc4
	adds r2, r6, #0
	bl PutSprite
_0804064E:
	adds r7, #4
	adds r6, #0x10
	adds r4, #1
	cmp r4, #4
	ble _0804060A
	mov r0, r8
	adds r0, #0x36
	ldrb r0, [r0]
	cmp r0, #0
	bne _0804066A
	movs r0, #0xc0
	movs r1, #0x10
	bl sub_803F990
_0804066A:
	bl sub_804054C
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_804067C
sub_804067C: @ 0x0804067C
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r6, r0, #0
	adds r5, r1, #0
	mov r8, r2
	ldr r4, _080406B4 @ =0x085CB108
	adds r0, r4, #0
	bl Proc_EndEach
	adds r0, r4, #0
	adds r1, r6, #0
	bl SpawnProc
	str r5, [r0, #0x34]
	str r5, [r0, #0x2c]
	mov r1, r8
	str r1, [r0, #0x38]
	str r1, [r0, #0x30]
	movs r1, #0
	str r1, [r0, #0x3c]
	str r1, [r0, #0x40]
	str r1, [r0, #0x44]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080406B4: .4byte 0x085CB108

	thumb_func_start sub_80406B8
sub_80406B8: @ 0x080406B8
	push {r4, r5, lr}
	ldr r4, [sp, #0xc]
	ldr r5, [sp, #0x10]
	str r1, [r0, #0x34]
	str r2, [r0, #0x38]
	str r4, [r0, #0x3c]
	str r3, [r0, #0x40]
	str r5, [r0, #0x44]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80406D0
sub_80406D0: @ 0x080406D0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r5, r0, #0
	movs r0, #0x2c
	ldrsh r1, [r5, r0]
	movs r2, #0x2a
	ldrsh r0, [r5, r2]
	adds r1, r1, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r7, r0, #2
	ldrh r0, [r5, #0x2c]
	strh r0, [r5, #0x2a]
	ldr r0, _08040740 @ =0x085CB120
	mov r8, r0
	movs r6, #0x30
	movs r4, #2
_080406F6:
	mov r1, r8
	adds r1, #4
	mov r8, r1
	subs r1, #4
	ldm r1!, {r3}
	movs r0, #0
	str r0, [sp]
	movs r0, #2
	movs r1, #0x20
	adds r2, r6, #0
	bl PutSprite
	adds r6, #0x18
	subs r4, #1
	cmp r4, #0
	bge _080406F6
	adds r1, r7, #0
	adds r1, #0x30
	movs r0, #0x20
	bl sub_804163C
	movs r2, #0x2e
	ldrsh r0, [r5, r2]
	movs r2, #0x30
	ldrsh r1, [r5, r2]
	bl sub_80415CC
	movs r0, #0xc0
	movs r1, #0x10
	bl sub_803F990
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08040740: .4byte 0x085CB120

	thumb_func_start sub_8040744
sub_8040744: @ 0x08040744
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _08040764 @ =0x085CB12C
	adds r0, r4, #0
	bl Proc_EndEach
	adds r0, r4, #0
	adds r1, r5, #0
	bl SpawnProc
	movs r1, #0
	strh r1, [r0, #0x2a]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08040764: .4byte 0x085CB12C

	thumb_func_start sub_8040768
sub_8040768: @ 0x08040768
	strh r1, [r0, #0x2c]
	strh r2, [r0, #0x2e]
	strh r3, [r0, #0x30]
	bx lr

	thumb_func_start sub_8040770
sub_8040770: @ 0x08040770
	push {lr}
	adds r1, r0, #0
	ldr r2, _0804079C @ =0x08109C00
	ldr r0, _080407A0 @ =0x0203C9D0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _08040796
	ldr r0, _080407A4 @ =gPal
	lsls r1, r1, #1
	adds r1, r1, r2
	ldrh r1, [r1]
	movs r2, #0xb7
	lsls r2, r2, #2
	adds r0, r0, r2
	strh r1, [r0]
	bl EnablePalSync
_08040796:
	pop {r0}
	bx r0
	.align 2, 0
_0804079C: .4byte 0x08109C00
_080407A0: .4byte 0x0203C9D0
_080407A4: .4byte gPal

	thumb_func_start sub_80407A8
sub_80407A8: @ 0x080407A8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r7, r0, #0
	movs r0, #0x4c
	adds r0, r0, r7
	mov r8, r0
	movs r1, #0
	ldrsh r5, [r0, r1]
	lsls r4, r5, #1
	adds r0, r5, #0
	bl sub_8040770
	ldr r0, _08040848 @ =0x0810F5FC
	adds r4, #1
	lsls r4, r4, #1
	adds r4, r4, r0
	movs r1, #0
	ldrsh r6, [r4, r1]
	ldr r1, [r7, #0x2c]
	subs r1, r1, r6
	lsls r5, r5, #2
	adds r5, r5, r0
	movs r0, #0
	ldrsh r5, [r5, r0]
	ldr r2, [r7, #0x30]
	subs r2, r2, r5
	ldr r3, _0804084C @ =0x0810F5C4
	movs r4, #0
	str r4, [sp]
	movs r0, #2
	bl PutSprite
	ldr r1, [r7, #0x2c]
	adds r1, r1, r6
	adds r1, #0x10
	ldr r2, [r7, #0x30]
	subs r2, r2, r5
	ldr r3, _08040850 @ =0x0810F5D2
	str r4, [sp]
	movs r0, #2
	bl PutSprite
	ldr r1, [r7, #0x2c]
	subs r1, r1, r6
	ldr r2, [r7, #0x30]
	adds r2, r2, r5
	ldr r3, _08040854 @ =0x0810F5E0
	str r4, [sp]
	movs r0, #2
	bl PutSprite
	ldr r1, [r7, #0x2c]
	adds r1, r1, r6
	adds r1, #0x10
	ldr r2, [r7, #0x30]
	adds r2, r2, r5
	ldr r3, _08040858 @ =0x0810F5EE
	str r4, [sp]
	movs r0, #2
	bl PutSprite
	mov r1, r8
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xf
	bne _0804083C
	adds r0, r7, #0
	bl Proc_Break
_0804083C:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08040848: .4byte 0x0810F5FC
_0804084C: .4byte 0x0810F5C4
_08040850: .4byte 0x0810F5D2
_08040854: .4byte 0x0810F5E0
_08040858: .4byte 0x0810F5EE

	thumb_func_start sub_804085C
sub_804085C: @ 0x0804085C
	push {r4, r5, lr}
	adds r3, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	ldr r0, _0804087C @ =0x085CB144
	adds r1, r3, #0
	bl SpawnProc
	str r4, [r0, #0x2c]
	str r5, [r0, #0x30]
	adds r0, #0x4c
	movs r1, #0
	strh r1, [r0]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0804087C: .4byte 0x085CB144

	thumb_func_start sub_8040880
sub_8040880: @ 0x08040880
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r0, #0x45
	movs r1, #0
	strb r1, [r0]
	subs r0, #1
	strb r1, [r0]
	subs r0, #7
	ldr r4, [r6, #0x34]
	ldrb r0, [r0]
	muls r0, r4, r0
	lsls r0, r0, #3
	adds r5, r6, #0
	adds r5, #0x3c
	ldrb r1, [r5]
	bl __divsi3
	str r0, [r6, #0x38]
	lsls r4, r4, #0xb
	ldrb r5, [r5]
	lsls r1, r5, #4
	adds r0, r4, #0
	bl __divsi3
	adds r1, r6, #0
	adds r1, #0x42
	strh r0, [r1]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_80408BC
sub_80408BC: @ 0x080408BC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x30
	adds r7, r0, #0
	ldr r0, [r7, #0x2c]
	mov r8, r0
	ldr r1, [r7, #0x30]
	str r1, [sp, #0xc]
	adds r1, #8
	mov sl, r1
	ldr r0, [r7, #0x38]
	asrs r2, r0, #3
	str r2, [sp, #0x10]
	movs r1, #7
	ands r0, r1
	movs r1, #8
	subs r0, r1, r0
	str r0, [sp, #0x14]
	movs r3, #0x3e
	ldrsh r0, [r7, r3]
	adds r1, r7, #0
	adds r1, #0x42
	ldrh r1, [r1]
	muls r0, r1, r0
	asrs r0, r0, #8
	str r0, [sp, #0x18]
	movs r0, #0x3c
	adds r0, r0, r7
	mov ip, r0
	movs r1, #0x3d
	adds r1, r1, r7
	mov sb, r1
	ldrb r2, [r0]
	ldrb r3, [r1]
	cmp r2, r3
	bhi _0804090C
	b _08040A64
_0804090C:
	adds r5, r7, #0
	adds r5, #0x44
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	adds r4, r7, #0
	adds r4, #0x45
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	adds r0, r7, #0
	adds r0, #0x40
	movs r1, #0x3e
	ldrsh r2, [r7, r1]
	movs r3, #0
	ldrsh r1, [r0, r3]
	adds r3, r5, #0
	str r0, [sp, #0x2c]
	cmp r2, r1
	bge _0804093A
	ldrb r0, [r3]
	adds r0, #2
	strb r0, [r3]
_0804093A:
	movs r0, #0x3e
	ldrsh r1, [r7, r0]
	ldr r2, [sp, #0x2c]
	movs r3, #0
	ldrsh r0, [r2, r3]
	cmp r1, r0
	ble _0804094E
	ldrb r0, [r4]
	adds r0, #2
	strb r0, [r4]
_0804094E:
	movs r6, #0
	mov r0, ip
	str r0, [sp, #0x28]
	ldr r1, [sp, #0x18]
	add r1, sl
	str r1, [sp, #0x1c]
	ldr r2, [sp, #0x10]
	lsls r2, r2, #3
	str r2, [sp, #0x24]
	ldr r3, [sp, #0xc]
	str r3, [sp, #0x20]
_08040964:
	ldrb r0, [r5]
	cmp r0, #0x30
	bls _0804096E
	movs r0, #0
	strb r0, [r5]
_0804096E:
	lsls r4, r6, #2
	add r4, sp
	adds r4, #4
	ldrb r1, [r5]
	lsrs r0, r1, #3
	movs r1, #6
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [r4]
	adds r5, #1
	adds r6, #1
	cmp r6, #1
	ble _08040964
	movs r2, #0x3e
	ldrsh r0, [r7, r2]
	cmp r0, #0
	beq _080409A6
	mov r2, sl
	subs r2, #9
	ldr r3, _08040A74 @ =0x085CB164
	ldr r0, [sp, #4]
	str r0, [sp]
	movs r0, #3
	mov r1, r8
	bl PutSprite
_080409A6:
	movs r3, #0x3e
	ldrsh r0, [r7, r3]
	cmp r0, #0
	bge _080409B0
	adds r0, #0xf
_080409B0:
	asrs r0, r0, #4
	mov r1, sb
	ldrb r1, [r1]
	adds r0, r1, r0
	ldr r2, [sp, #0x28]
	ldrb r2, [r2]
	cmp r0, r2
	bge _080409D6
	ldr r2, [r7, #0x34]
	lsls r2, r2, #3
	add r2, sl
	adds r2, #1
	ldr r3, _08040A78 @ =0x085CB15C
	ldr r0, [sp, #8]
	str r0, [sp]
	movs r0, #3
	mov r1, r8
	bl PutSprite
_080409D6:
	movs r6, #0
	ldr r0, [r7, #0x34]
	cmp r6, r0
	bge _080409FA
	mov r4, sl
	movs r5, #1
_080409E2:
	str r5, [sp]
	movs r0, #2
	mov r1, r8
	adds r2, r4, #0
	ldr r3, _08040A7C @ =0x085CB16C
	bl PutSprite
	adds r4, #8
	adds r6, #1
	ldr r0, [r7, #0x34]
	cmp r6, r0
	blt _080409E2
_080409FA:
	ldr r3, [sp, #0x10]
	cmp r3, #0
	ble _08040A1C
	ldr r4, [sp, #0x1c]
	movs r5, #0
	adds r6, r3, #0
_08040A06:
	str r5, [sp]
	movs r0, #2
	mov r1, r8
	adds r2, r4, #0
	ldr r3, _08040A7C @ =0x085CB16C
	bl PutSprite
	adds r4, #8
	subs r6, #1
	cmp r6, #0
	bne _08040A06
_08040A1C:
	ldr r0, [sp, #0x1c]
	ldr r1, [sp, #0x24]
	adds r2, r0, r1
	ldr r3, [sp, #0x14]
	subs r2, r2, r3
	ldr r4, _08040A7C @ =0x085CB16C
	movs r0, #0
	str r0, [sp]
	movs r0, #2
	mov r1, r8
	adds r3, r4, #0
	bl PutSprite
	movs r5, #2
	str r5, [sp]
	movs r0, #2
	mov r1, r8
	ldr r2, [sp, #0x20]
	adds r3, r4, #0
	bl PutSprite
	movs r1, #0x80
	lsls r1, r1, #6
	add r1, r8
	ldr r2, [r7, #0x34]
	lsls r2, r2, #3
	add r2, sl
	subs r2, #7
	str r5, [sp]
	movs r0, #2
	adds r3, r4, #0
	bl PutSprite
	ldrh r0, [r7, #0x3e]
	ldr r1, [sp, #0x2c]
	strh r0, [r1]
_08040A64:
	add sp, #0x30
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08040A74: .4byte 0x085CB164
_08040A78: .4byte 0x085CB15C
_08040A7C: .4byte 0x085CB16C

	thumb_func_start sub_8040A80
sub_8040A80: @ 0x08040A80
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sb, r0
	mov sl, r1
	mov r8, r2
	adds r5, r3, #0
	ldr r6, [sp, #0x20]
	ldr r7, [sp, #0x24]
	mov r0, r8
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	lsls r6, r6, #0x18
	lsrs r6, r6, #0x18
	ldr r4, _08040AE8 @ =0x085CB174
	adds r0, r4, #0
	bl Proc_EndEach
	adds r0, r4, #0
	adds r1, r7, #0
	bl SpawnProc
	adds r1, r0, #0
	mov r2, sb
	str r2, [r1, #0x2c]
	mov r0, sl
	str r0, [r1, #0x30]
	lsls r0, r5, #1
	subs r0, #2
	str r0, [r1, #0x34]
	adds r0, r1, #0
	adds r0, #0x3c
	mov r2, r8
	strb r2, [r0]
	adds r0, #1
	strb r5, [r0]
	strh r6, [r1, #0x3e]
	adds r0, #3
	strh r6, [r0]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08040AE8: .4byte 0x085CB174

	thumb_func_start sub_8040AEC
sub_8040AEC: @ 0x08040AEC
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	lsls r1, r1, #0x10
	lsrs r4, r1, #0x10
	ldr r0, _08040B40 @ =0x085CB174
	bl Proc_Find
	adds r6, r0, #0
	cmp r6, #0
	beq _08040B38
	adds r5, r6, #0
	adds r5, #0x3c
	strb r7, [r5]
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	movs r1, #0xff
	ands r0, r1
	strh r0, [r6, #0x3e]
	adds r0, r6, #0
	adds r0, #0x3d
	ldr r4, [r6, #0x34]
	ldrb r0, [r0]
	muls r0, r4, r0
	lsls r0, r0, #3
	ldrb r1, [r5]
	bl __divsi3
	str r0, [r6, #0x38]
	lsls r4, r4, #0xb
	ldrb r5, [r5]
	lsls r1, r5, #4
	adds r0, r4, #0
	bl __divsi3
	adds r1, r6, #0
	adds r1, #0x42
	strh r0, [r1]
_08040B38:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08040B40: .4byte 0x085CB174

	thumb_func_start sub_8040B44
sub_8040B44: @ 0x08040B44
	push {lr}
	ldr r0, _08040B60 @ =0x0810B900
	ldr r1, _08040B64 @ =0x06002000
	bl Decompress
	ldr r0, _08040B68 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #1
	beq _08040B90
	cmp r0, #1
	bgt _08040B6C
	cmp r0, #0
	beq _08040B76
	b _08040BDA
	.align 2, 0
_08040B60: .4byte 0x0810B900
_08040B64: .4byte 0x06002000
_08040B68: .4byte gPlaySt
_08040B6C:
	cmp r0, #2
	beq _08040BA8
	cmp r0, #3
	beq _08040BC8
	b _08040BDA
_08040B76:
	ldr r0, _08040B84 @ =0x0810A62C
	ldr r1, _08040B88 @ =0x06002800
	bl Decompress
	ldr r0, _08040B8C @ =0x0810BA60
	b _08040BB2
	.align 2, 0
_08040B84: .4byte 0x0810A62C
_08040B88: .4byte 0x06002800
_08040B8C: .4byte 0x0810BA60
_08040B90:
	ldr r0, _08040B9C @ =0x0810AADC
	ldr r1, _08040BA0 @ =0x06002800
	bl Decompress
	ldr r0, _08040BA4 @ =0x0810BAA0
	b _08040BB2
	.align 2, 0
_08040B9C: .4byte 0x0810AADC
_08040BA0: .4byte 0x06002800
_08040BA4: .4byte 0x0810BAA0
_08040BA8:
	ldr r0, _08040BBC @ =0x0810AF9C
	ldr r1, _08040BC0 @ =0x06002800
	bl Decompress
	ldr r0, _08040BC4 @ =0x0810BA80
_08040BB2:
	movs r1, #0xa0
	movs r2, #0x20
	bl ApplyPaletteExt
	b _08040BDA
	.align 2, 0
_08040BBC: .4byte 0x0810AF9C
_08040BC0: .4byte 0x06002800
_08040BC4: .4byte 0x0810BA80
_08040BC8:
	ldr r0, _08040BEC @ =0x0810B44C
	ldr r1, _08040BF0 @ =0x06002800
	bl Decompress
	ldr r0, _08040BF4 @ =0x0810BAC0
	movs r1, #0xa0
	movs r2, #0x20
	bl ApplyPaletteExt
_08040BDA:
	ldr r2, _08040BF8 @ =0x03001438
	ldr r1, _08040BFC @ =gPlaySt
	ldrb r0, [r1, #0xf]
	str r0, [r2]
	movs r0, #0
	strb r0, [r1, #0xf]
	pop {r0}
	bx r0
	.align 2, 0
_08040BEC: .4byte 0x0810B44C
_08040BF0: .4byte 0x06002800
_08040BF4: .4byte 0x0810BAC0
_08040BF8: .4byte 0x03001438
_08040BFC: .4byte gPlaySt

	thumb_func_start sub_8040C00
sub_8040C00: @ 0x08040C00
	push {r4, lr}
	ldr r1, _08040C70 @ =gPlaySt
	ldr r0, _08040C74 @ =0x03001438
	ldr r0, [r0]
	movs r2, #0
	strb r0, [r1, #0xf]
	ldr r3, _08040C78 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r3, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r4, [r1]
	ands r0, r4
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r4, [r3, #0x10]
	ands r0, r4
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08040C70: .4byte gPlaySt
_08040C74: .4byte 0x03001438
_08040C78: .4byte gDispIo

	thumb_func_start sub_8040C7C
sub_8040C7C: @ 0x08040C7C
	push {lr}
	ldr r1, _08040C8C @ =gMpi_MainBgm
	movs r0, #0x22
	bl StartBgm
	pop {r0}
	bx r0
	.align 2, 0
_08040C8C: .4byte gMpi_MainBgm

	thumb_func_start sub_8040C90
sub_8040C90: @ 0x08040C90
	lsls r1, r1, #1
	adds r0, #0x1c
	adds r2, r0, r1
	ldrh r1, [r2]
	cmp r1, #0
	beq _08040CA6
	movs r3, #0xff
	lsls r3, r3, #8
	adds r0, r3, #0
	orrs r1, r0
	strh r1, [r2]
_08040CA6:
	bx lr

	thumb_func_start sub_8040CA8
sub_8040CA8: @ 0x08040CA8
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
_08040CAE:
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_8040C90
	adds r4, #1
	cmp r4, #4
	ble _08040CAE
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8040CC4
sub_8040CC4: @ 0x08040CC4
	push {r4, r5, r6, lr}
	ldr r5, _08040D08 @ =0x08109BE0
	ldr r0, _08040D0C @ =0x0203C9D0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _08040D02
	bl GetGameTime
	adds r2, r0, #0
	movs r0, #0x1f
	ands r2, r0
	asrs r2, r2, #1
	movs r1, #0
	ldr r0, _08040D10 @ =gPal
	movs r4, #0xf
	ldr r6, _08040D14 @ =0x00000322
	adds r3, r0, r6
_08040CEA:
	adds r0, r2, r1
	ands r0, r4
	lsls r0, r0, #1
	adds r0, r0, r5
	ldrh r0, [r0]
	strh r0, [r3]
	adds r3, #2
	adds r1, #1
	cmp r1, #0xe
	ble _08040CEA
	bl EnablePalSync
_08040D02:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08040D08: .4byte 0x08109BE0
_08040D0C: .4byte 0x0203C9D0
_08040D10: .4byte gPal
_08040D14: .4byte 0x00000322

	thumb_func_start sub_8040D18
sub_8040D18: @ 0x08040D18
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r7, r0, #0
	movs r0, #0
	mov sb, r0
	movs r1, #0
	str r1, [sp, #4]
	mov sl, r1
_08040D30:
	ldr r1, [r7, #0x2c]
	ldr r2, [r7, #0x30]
	ldr r3, [sp, #4]
	adds r2, r2, r3
	movs r0, #0xf
	mov r4, sb
	ands r0, r4
	lsls r0, r0, #0xc
	movs r3, #0x80
	lsls r3, r3, #4
	adds r0, r0, r3
	str r0, [sp]
	movs r0, #4
	ldr r3, _08040EE4 @ =0x0810F52A
	bl PutSprite
	ldr r4, _08040EE8 @ =gSinLut+0x80
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	movs r1, #0x80
	lsls r1, r1, #1
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	ldr r2, _08040EEC @ =gSinLut
	movs r3, #0
	ldrsh r0, [r2, r3]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	movs r1, #0x80
	lsls r1, r1, #1
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	ldr r4, _08040EEC @ =gSinLut
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	movs r1, #0x80
	lsls r1, r1, #1
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	ldr r2, _08040EE8 @ =gSinLut+0x80
	movs r3, #0
	ldrsh r0, [r2, r3]
	lsls r0, r0, #4
	movs r1, #0x80
	lsls r1, r1, #1
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	mov r0, sb
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	ldr r1, [r7, #0x38]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _08040E5A
	adds r3, r7, #0
	adds r3, #0x3c
	cmp r1, sb
	beq _08040DE0
	mov r4, sl
	adds r1, r3, r4
	ldrh r0, [r1]
	movs r2, #0x80
	lsls r2, r2, #1
	cmp r0, r2
	bls _08040DDA
	subs r0, #8
	strh r0, [r1]
_08040DDA:
	ldr r0, [r7, #0x38]
	cmp r0, sb
	bne _08040DF2
_08040DE0:
	mov r4, sl
	adds r2, r3, r4
	ldrh r1, [r2]
	ldr r0, _08040EF0 @ =0x0000014F
	cmp r1, r0
	bhi _08040DF2
	adds r0, r1, #0
	adds r0, #8
	strh r0, [r2]
_08040DF2:
	ldr r1, _08040EE8 @ =gSinLut+0x80
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	add r3, sl
	mov r8, r3
	ldrh r1, [r3]
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	ldr r3, _08040EEC @ =gSinLut
	movs r4, #0
	ldrsh r0, [r3, r4]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r2, r8
	ldrh r1, [r2]
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	ldr r3, _08040EEC @ =gSinLut
	movs r4, #0
	ldrsh r0, [r3, r4]
	lsls r0, r0, #4
	mov r2, r8
	ldrh r1, [r2]
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	ldr r3, _08040EE8 @ =gSinLut+0x80
	movs r1, #0
	ldrsh r0, [r3, r1]
	lsls r0, r0, #4
	mov r2, r8
	ldrh r1, [r2]
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	mov r0, sb
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
_08040E5A:
	ldr r1, [r7, #0x2c]
	subs r1, #0x30
	ldr r2, [r7, #0x30]
	ldr r3, [sp, #4]
	adds r2, r2, r3
	ldr r3, _08040EF4 @ =0x085CB1E4
	mov r4, sb
	lsls r0, r4, #2
	adds r0, r0, r3
	ldr r3, [r0]
	movs r4, #0
	str r4, [sp]
	movs r0, #4
	bl PutSprite
	ldr r0, [sp, #4]
	adds r0, #0x18
	str r0, [sp, #4]
	movs r1, #2
	add sl, r1
	movs r2, #1
	add sb, r2
	mov r3, sb
	cmp r3, #3
	bgt _08040E8E
	b _08040D30
_08040E8E:
	ldr r2, [r7, #0x34]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	beq _08040ED2
	ldr r1, [r7, #0x2c]
	subs r1, #0x40
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #3
	ldr r2, [r7, #0x30]
	adds r2, r2, r0
	adds r2, #8
	ldr r3, _08040EF8 @ =0x0810F65C
	str r4, [sp]
	movs r0, #4
	bl PutSprite
	ldr r1, [r7, #0x2c]
	subs r1, #0x40
	ldr r2, [r7, #0x34]
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #3
	ldr r2, [r7, #0x30]
	adds r2, r2, r0
	adds r2, #0x12
	ldr r3, _08040EFC @ =0x0810F664
	str r4, [sp]
	movs r0, #4
	bl PutSprite
	bl sub_8040CC4
_08040ED2:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08040EE4: .4byte 0x0810F52A
_08040EE8: .4byte gSinLut+0x80
_08040EEC: .4byte gSinLut
_08040EF0: .4byte 0x0000014F
_08040EF4: .4byte 0x085CB1E4
_08040EF8: .4byte 0x0810F65C
_08040EFC: .4byte 0x0810F664

	thumb_func_start sub_8040F00
sub_8040F00: @ 0x08040F00
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r6, r0, #0
	mov r8, r1
	adds r5, r2, #0
	ldr r4, _08040F4C @ =0x085CB1F4
	adds r0, r4, #0
	bl Proc_EndEach
	adds r0, r4, #0
	adds r1, r5, #0
	bl SpawnProc
	adds r1, r0, #0
	str r6, [r1, #0x2c]
	mov r0, r8
	str r0, [r1, #0x30]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r1, #0x34]
	str r0, [r1, #0x38]
	movs r3, #0x80
	lsls r3, r3, #1
	movs r2, #3
	adds r0, r1, #0
	adds r0, #0x42
_08040F36:
	strh r3, [r0]
	subs r0, #2
	subs r2, #1
	cmp r2, #0
	bge _08040F36
	adds r0, r1, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_08040F4C: .4byte 0x085CB1F4

	thumb_func_start sub_8040F50
sub_8040F50: @ 0x08040F50
	push {lr}
	ldr r0, _08040F5C @ =0x085CB1F4
	bl Proc_EndEach
	pop {r0}
	bx r0
	.align 2, 0
_08040F5C: .4byte 0x085CB1F4

	thumb_func_start sub_8040F60
sub_8040F60: @ 0x08040F60
	push {lr}
	ldr r0, _08040F6C @ =0x085CB1F4
	bl Proc_Find
	pop {r1}
	bx r1
	.align 2, 0
_08040F6C: .4byte 0x085CB1F4

	thumb_func_start sub_8040F70
sub_8040F70: @ 0x08040F70
	push {r4, r5, lr}
	ldr r5, _08040FB4 @ =0x08109BE0
	ldr r0, _08040FB8 @ =0x0203C9D0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _08040FAE
	bl GetGameTime
	adds r2, r0, #0
	movs r0, #0x1f
	ands r2, r0
	asrs r2, r2, #1
	movs r1, #0
	ldr r0, _08040FBC @ =gPal
	movs r4, #0xf
	adds r3, r0, #0
	adds r3, #0x42
_08040F96:
	adds r0, r2, r1
	ands r0, r4
	lsls r0, r0, #1
	adds r0, r0, r5
	ldrh r0, [r0]
	strh r0, [r3]
	adds r3, #2
	adds r1, #1
	cmp r1, #0xe
	ble _08040F96
	bl EnablePalSync
_08040FAE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08040FB4: .4byte 0x08109BE0
_08040FB8: .4byte 0x0203C9D0
_08040FBC: .4byte gPal

	thumb_func_start sub_8040FC0
sub_8040FC0: @ 0x08040FC0
	push {r4, r5, r6, lr}
	ldr r5, _08041004 @ =0x08109BE0
	ldr r0, _08041008 @ =0x0203C9D0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _08040FFE
	bl GetGameTime
	adds r2, r0, #0
	movs r0, #0x1f
	ands r2, r0
	asrs r2, r2, #1
	movs r1, #0
	ldr r0, _0804100C @ =gPal
	movs r4, #0xf
	ldr r6, _08041010 @ =0x00000262
	adds r3, r0, r6
_08040FE6:
	adds r0, r2, r1
	ands r0, r4
	lsls r0, r0, #1
	adds r0, r0, r5
	ldrh r0, [r0]
	strh r0, [r3]
	adds r3, #2
	adds r1, #1
	cmp r1, #0xe
	ble _08040FE6
	bl EnablePalSync
_08040FFE:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08041004: .4byte 0x08109BE0
_08041008: .4byte 0x0203C9D0
_0804100C: .4byte gPal
_08041010: .4byte 0x00000262

	thumb_func_start sub_8041014
sub_8041014: @ 0x08041014
	ldr r3, _08041054 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r2, #0
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #0xc
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r2, [r0]
	ldr r0, _08041058 @ =0x0000FFE0
	ldrh r2, [r3, #0x3c]
	ands r0, r2
	ldr r1, _0804105C @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xe0
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	bx lr
	.align 2, 0
_08041054: .4byte gDispIo
_08041058: .4byte 0x0000FFE0
_0804105C: .4byte 0x0000E0FF

	thumb_func_start sub_8041060
sub_8041060: @ 0x08041060
	push {lr}
	sub sp, #4
	adds r1, r0, #0
	ldr r2, [r1, #0x30]
	adds r0, r2, #0
	subs r0, #0x1f
	cmp r0, #0x79
	bhi _08041082
	ldr r1, [r1, #0x2c]
	ldr r3, _08041088 @ =0x0810F672
	movs r0, #0
	str r0, [sp]
	movs r0, #4
	bl PutSprite
	bl sub_8040FC0
_08041082:
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_08041088: .4byte 0x0810F672

	thumb_func_start sub_804108C
sub_804108C: @ 0x0804108C
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r6, r0, #0
	mov r8, r1
	adds r5, r2, #0
	ldr r4, _080410B8 @ =0x085CB204
	adds r0, r4, #0
	bl Proc_EndEach
	adds r0, r4, #0
	adds r1, r5, #0
	bl SpawnProc
	str r6, [r0, #0x2c]
	mov r1, r8
	str r1, [r0, #0x30]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080410B8: .4byte 0x085CB204

	thumb_func_start sub_80410BC
sub_80410BC: @ 0x080410BC
	push {r4, lr}
	ldr r0, _080410E8 @ =0x0832A29C
	ldr r4, _080410EC @ =0x0200152C
	adds r1, r4, #0
	bl Decompress
	ldr r1, _080410F0 @ =0x06016800
	adds r0, r4, #0
	movs r2, #6
	movs r3, #4
	bl sub_803FB84
	ldr r0, _080410F4 @ =0x0832BDE8
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080410E8: .4byte 0x0832A29C
_080410EC: .4byte 0x0200152C
_080410F0: .4byte 0x06016800
_080410F4: .4byte 0x0832BDE8

	thumb_func_start sub_80410F8
sub_80410F8: @ 0x080410F8
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r2, r1, #0
	ldr r3, _08041118 @ =0x0810F6A4
	movs r0, #0
	str r0, [sp]
	movs r0, #1
	adds r1, r4, #0
	bl PutSprite
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08041118: .4byte 0x0810F6A4

	thumb_func_start sub_804111C
sub_804111C: @ 0x0804111C
	push {r4, r5, lr}
	ldr r5, _08041148 @ =gActiveUnit
	ldr r0, [r5]
	lsls r1, r1, #1
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r4, [r0]
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0804115E
	adds r0, r4, #0
	bl GetItemMinRange
	cmp r0, #2
	ble _0804114C
	movs r0, #1
	b _08041160
	.align 2, 0
_08041148: .4byte gActiveUnit
_0804114C:
	ldr r0, [r5]
	adds r1, r4, #0
	bl CanUnitUseWeapon
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0804115E
	movs r0, #0
	b _08041160
_0804115E:
	movs r0, #2
_08041160:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8041168
sub_8041168: @ 0x08041168
	adds r0, r1, #0
	adds r0, #0x3d
	ldrb r0, [r0]
	cmp r0, #1
	beq _08041184
	ldr r0, _08041180 @ =0x0203C984
	adds r1, #0x3c
	ldrb r1, [r1]
	strb r1, [r0, #7]
	movs r0, #0x84
	b _08041186
	.align 2, 0
_08041180: .4byte 0x0203C984
_08041184:
	movs r0, #8
_08041186:
	bx lr

	thumb_func_start sub_8041188
sub_8041188: @ 0x08041188
	ldr r2, _08041198 @ =0x0203C984
	adds r1, #0x3c
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r2, #6]
	movs r0, #0x17
	bx lr
	.align 2, 0
_08041198: .4byte 0x0203C984

	thumb_func_start sub_804119C
sub_804119C: @ 0x0804119C
	push {r4, r5, r6, lr}
	adds r4, r1, #0
	ldr r0, _080411F8 @ =gActiveUnit
	ldr r0, [r0]
	adds r1, #0x3c
	movs r2, #0
	ldrsb r2, [r1, r2]
	lsls r2, r2, #1
	adds r1, r0, #0
	adds r1, #0x1c
	adds r1, r1, r2
	ldrh r6, [r1]
	adds r1, r6, #0
	bl CanUnitUseWeapon
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	adds r0, r6, #0
	bl GetItemMinRange
	cmp r0, #2
	ble _080411CA
	movs r5, #0
_080411CA:
	adds r0, r4, #0
	adds r0, #0x34
	lsls r2, r5, #0x18
	asrs r2, r2, #0x18
	movs r1, #0x2c
	ldrsh r3, [r4, r1]
	lsls r3, r3, #5
	movs r5, #0x2a
	ldrsh r1, [r4, r5]
	adds r3, r3, r1
	lsls r3, r3, #1
	ldr r1, _080411FC @ =gBg0Tm
	adds r3, r3, r1
	adds r1, r6, #0
	bl sub_8016694
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080411F8: .4byte gActiveUnit
_080411FC: .4byte gBg0Tm

	thumb_func_start sub_8041200
sub_8041200: @ 0x08041200
	ldr r1, _0804120C @ =0x0203C984
	movs r0, #0
	strb r0, [r1, #6]
	movs r0, #0x1b
	bx lr
	.align 2, 0
_0804120C: .4byte 0x0203C984

	thumb_func_start sub_8041210
sub_8041210: @ 0x08041210
	push {r4, r5, r6, r7, lr}
	adds r2, r0, #0
	ldr r1, _08041278 @ =0x0203C984
	movs r0, #0
	strb r0, [r1, #6]
	adds r7, r2, #0
	adds r7, #0x2d
	movs r0, #0
	ldrsb r0, [r7, r0]
	lsls r0, r0, #5
	adds r5, r2, #0
	adds r5, #0x2c
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r1, _0804127C @ =gBg0Tm
	adds r0, r0, r1
	adds r6, r2, #0
	adds r6, #0x2e
	movs r1, #0
	ldrsb r1, [r6, r1]
	adds r4, r2, #0
	adds r4, #0x2f
	movs r2, #0
	ldrsb r2, [r4, r2]
	movs r3, #0
	bl TmFillRect_t
	movs r0, #0
	ldrsb r0, [r7, r0]
	lsls r0, r0, #5
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r1, _08041280 @ =gBg1Tm
	adds r0, r0, r1
	movs r1, #0
	ldrsb r1, [r6, r1]
	movs r2, #0
	ldrsb r2, [r4, r2]
	movs r3, #0
	bl TmFillRect_t
	movs r0, #3
	bl EnableBgSync
	movs r0, #0xb
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08041278: .4byte 0x0203C984
_0804127C: .4byte gBg0Tm
_08041280: .4byte gBg1Tm

	thumb_func_start sub_8041284
sub_8041284: @ 0x08041284
	push {lr}
	adds r3, r0, #0
	cmp r3, #0
	bge _0804128E
	movs r3, #1
_0804128E:
	ldr r2, _080412A8 @ =0x085CB3B4
	ldr r1, _080412AC @ =gPlaySt
	movs r0, #0xc
	ldrb r1, [r1, #0x1d]
	ands r0, r1
	adds r0, r0, r2
	ldr r0, [r0]
	lsls r1, r3, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r0}
	bx r0
	.align 2, 0
_080412A8: .4byte 0x085CB3B4
_080412AC: .4byte gPlaySt

	thumb_func_start sub_80412B0
sub_80412B0: @ 0x080412B0
	push {lr}
	adds r3, r0, #0
	cmp r3, #0
	bne _080412BC
	movs r3, #0xc0
	lsls r3, r3, #0x13
_080412BC:
	ldr r2, _080412D4 @ =0x085CB3C4
	ldr r1, _080412D8 @ =gPlaySt
	movs r0, #0xc
	ldrb r1, [r1, #0x1d]
	ands r0, r1
	adds r0, r0, r2
	ldr r0, [r0]
	adds r1, r3, #0
	bl Decompress
	pop {r0}
	bx r0
	.align 2, 0
_080412D4: .4byte 0x085CB3C4
_080412D8: .4byte gPlaySt

	thumb_func_start sub_80412DC
sub_80412DC: @ 0x080412DC
	push {lr}
	adds r3, r0, #0
	cmp r3, #0
	bge _080412E6
	movs r3, #6
_080412E6:
	ldr r2, _08041300 @ =0x085CB3D4
	ldr r1, _08041304 @ =gPlaySt
	movs r0, #0xc
	ldrb r1, [r1, #0x1d]
	ands r0, r1
	adds r0, r0, r2
	ldr r0, [r0]
	lsls r1, r3, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r0}
	bx r0
	.align 2, 0
_08041300: .4byte 0x085CB3D4
_08041304: .4byte gPlaySt

	thumb_func_start sub_8041308
sub_8041308: @ 0x08041308
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	cmp r5, #0
	bge _08041318
	ldr r0, _0804134C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1c
	lsrs r5, r0, #0x1e
_08041318:
	ldr r0, _08041350 @ =0x085CB3C4
	lsls r5, r5, #2
	adds r5, r5, r0
	ldr r0, [r5]
	bl GetDataSize
	adds r6, r0, #0
	ldr r4, _08041354 @ =gUnk_020210E8
	subs r4, r4, r6
	ldr r0, [r5]
	adds r1, r4, #0
	bl Decompress
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r0, r4, #0
	adds r2, r6, #0
	bl RegisterDataMove
	movs r0, #1
	rsbs r0, r0, #0
	bl sub_8041284
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804134C: .4byte gPlaySt
_08041350: .4byte 0x085CB3C4
_08041354: .4byte gUnk_020210E8

	thumb_func_start sub_8041358
sub_8041358: @ 0x08041358
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x30
	str r0, [sp]
	mov sb, r1
	ldr r0, [sp, #0x50]
	ldr r1, _080415C0 @ =0x085CB3A8
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r6, [r0]
	ldr r0, [sp]
	adds r2, r0, r2
	subs r2, #1
	str r2, [sp, #4]
	add r3, sb
	subs r3, #1
	str r3, [sp, #8]
	mov r4, sb
	adds r4, #1
	cmp r4, r3
	bge _08041402
	ldr r1, _080415C4 @ =gBg1Tm
	mov sl, r1
_0804138C:
	ldr r7, [sp]
	adds r7, #1
	adds r2, r4, #2
	mov r8, r2
	ldr r0, [sp, #4]
	cmp r7, r0
	bge _080413FA
	ldr r1, _080415C8 @ =gBg0Tm
	mov ip, r1
	movs r5, #0
	mov r3, sl
_080413A2:
	lsls r0, r4, #5
	adds r0, r0, r7
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r2, r0, #1
	mov r1, ip
	adds r1, r2, r1
	strh r5, [r1]
	adds r2, r2, r3
	ldrh r1, [r6, #0xa]
	strh r1, [r2]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r2, r0, #1
	mov r1, ip
	adds r1, r2, r1
	strh r5, [r1]
	adds r2, r2, r3
	ldrh r1, [r6, #0xc]
	strh r1, [r2]
	adds r0, #0x1f
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r2, r0, #1
	mov r1, ip
	adds r1, r2, r1
	strh r5, [r1]
	adds r2, r2, r3
	ldrh r1, [r6, #0x12]
	strh r1, [r2]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xf
	mov r2, ip
	adds r1, r0, r2
	strh r5, [r1]
	adds r0, r0, r3
	ldrh r1, [r6, #0x14]
	strh r1, [r0]
	adds r7, #2
	ldr r0, [sp, #4]
	cmp r7, r0
	blt _080413A2
_080413FA:
	mov r4, r8
	ldr r1, [sp, #8]
	cmp r4, r1
	blt _0804138C
_08041402:
	ldr r7, [sp]
	adds r7, #1
	mov r2, sb
	adds r2, #1
	str r2, [sp, #0xc]
	mov r4, sb
	lsls r4, r4, #5
	str r4, [sp, #0x10]
	ldr r0, [sp, #8]
	lsls r0, r0, #5
	str r0, [sp, #0x14]
	ldr r1, [sp, #4]
	cmp r7, r1
	bge _080414B2
	adds r5, r4, #0
	adds r5, #1
	adds r3, r0, #0
	adds r3, #1
	lsls r2, r7, #1
	ldr r4, [sp, #8]
	lsls r0, r4, #6
	ldr r4, _080415C4 @ =gBg1Tm
	adds r1, r0, r4
	adds r1, r2, r1
	str r1, [sp, #0x1c]
	ldr r1, _080415C8 @ =gBg0Tm
	adds r0, r0, r1
	adds r0, r0, r2
	mov sl, r0
	mov r4, sb
	lsls r0, r4, #6
	ldr r4, _080415C4 @ =gBg1Tm
	adds r1, r0, r4
	adds r1, r1, r2
	mov sb, r1
	ldr r1, _080415C8 @ =gBg0Tm
	adds r0, r0, r1
	adds r0, r0, r2
	mov r8, r0
	lsls r3, r3, #1
	adds r0, r3, r4
	adds r0, r0, r2
	mov ip, r0
	adds r3, r3, r1
	adds r1, r2, r3
	lsls r5, r5, #1
	adds r4, r5, r4
	str r4, [sp, #0x24]
	adds r3, r2, r4
	ldr r0, _080415C8 @ =gBg0Tm
	adds r5, r5, r0
	adds r2, r2, r5
_0804146A:
	movs r0, #0
	mov r4, r8
	strh r0, [r4]
	ldrh r0, [r6, #2]
	mov r4, sb
	strh r0, [r4]
	movs r0, #0
	strh r0, [r2]
	ldrh r0, [r6, #4]
	strh r0, [r3]
	movs r0, #0
	mov r4, sl
	strh r0, [r4]
	ldrh r0, [r6, #0x1a]
	ldr r4, [sp, #0x1c]
	strh r0, [r4]
	movs r0, #0
	strh r0, [r1]
	ldrh r0, [r6, #0x1c]
	mov r4, ip
	strh r0, [r4]
	ldr r0, [sp, #0x1c]
	adds r0, #4
	str r0, [sp, #0x1c]
	movs r4, #4
	add sl, r4
	add sb, r4
	add r8, r4
	add ip, r4
	adds r1, #4
	adds r3, #4
	adds r2, #4
	adds r7, #2
	ldr r0, [sp, #4]
	cmp r7, r0
	blt _0804146A
_080414B2:
	ldr r4, [sp, #0xc]
	ldr r1, [sp, #8]
	cmp r4, r1
	bge _08041548
	movs r2, #0
	mov sl, r2
	ldr r5, _080415C4 @ =gBg1Tm
	lsls r2, r4, #5
	adds r2, #0x20
	ldr r7, [sp, #4]
	adds r7, r2, r7
	str r7, [sp, #0x18]
	ldr r0, [sp]
	adds r2, r2, r0
	lsls r3, r4, #6
	ldr r1, [sp, #4]
	lsls r0, r1, #1
	adds r1, r0, r5
	adds r1, r1, r3
	mov sb, r1
	ldr r7, _080415C8 @ =gBg0Tm
	adds r0, r0, r7
	adds r0, r0, r3
	mov r8, r0
	ldr r1, [sp]
	lsls r0, r1, #1
	adds r1, r0, r5
	adds r1, r1, r3
	mov ip, r1
	adds r0, r0, r7
	adds r3, r3, r0
	lsls r2, r2, #1
	adds r7, r2, r5
	str r7, [sp, #0x2c]
	ldr r0, _080415C8 @ =gBg0Tm
	adds r2, r2, r0
	ldr r1, [sp, #0x18]
	lsls r1, r1, #1
	str r1, [sp, #0x20]
	adds r5, r1, r5
	adds r1, r1, r0
_08041504:
	mov r7, sl
	strh r7, [r3]
	ldrh r0, [r6, #8]
	mov r7, ip
	strh r0, [r7]
	mov r7, sl
	mov r0, r8
	strh r7, [r0]
	ldrh r0, [r6, #0xe]
	mov r7, sb
	strh r0, [r7]
	mov r0, sl
	strh r0, [r2]
	ldrh r0, [r6, #0x10]
	ldr r7, [sp, #0x2c]
	strh r0, [r7]
	mov r0, sl
	strh r0, [r1]
	ldrh r0, [r6, #0x16]
	strh r0, [r5]
	adds r5, #0x80
	adds r1, #0x80
	adds r7, #0x80
	str r7, [sp, #0x2c]
	adds r2, #0x80
	movs r0, #0x80
	add sb, r0
	add r8, r0
	add ip, r0
	adds r3, #0x80
	adds r4, #2
	ldr r7, [sp, #8]
	cmp r4, r7
	blt _08041504
_08041548:
	ldr r0, [sp, #0x10]
	ldr r1, [sp]
	adds r5, r0, r1
	lsls r5, r5, #1
	ldr r2, _080415C8 @ =gBg0Tm
	adds r0, r5, r2
	movs r7, #0
	strh r7, [r0]
	ldr r4, [sp, #0x10]
	ldr r0, [sp, #4]
	adds r3, r4, r0
	lsls r3, r3, #1
	adds r0, r3, r2
	strh r7, [r0]
	ldr r4, [sp, #0x14]
	adds r2, r4, r1
	lsls r2, r2, #1
	ldr r1, _080415C8 @ =gBg0Tm
	adds r0, r2, r1
	strh r7, [r0]
	ldr r0, [sp, #4]
	adds r1, r4, r0
	lsls r1, r1, #1
	ldr r4, _080415C8 @ =gBg0Tm
	adds r0, r1, r4
	strh r7, [r0]
	ldr r7, _080415C4 @ =gBg1Tm
	adds r5, r5, r7
	ldrh r0, [r6]
	strh r0, [r5]
	adds r3, r3, r7
	ldrh r0, [r6, #6]
	strh r0, [r3]
	adds r2, r2, r7
	ldrh r0, [r6, #0x18]
	strh r0, [r2]
	adds r1, r1, r7
	ldrh r0, [r6, #0x1e]
	strh r0, [r1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	bl EnableBgSync
	add sp, #0x30
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080415C0: .4byte 0x085CB3A8
_080415C4: .4byte gBg1Tm
_080415C8: .4byte gBg0Tm

	thumb_func_start sub_80415CC
sub_80415CC: @ 0x080415CC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	bl GetGameTime
	subs r0, #1
	ldr r7, _0804162C @ =0x0203C9D8
	ldr r1, [r7]
	cmp r0, r1
	bne _080415F4
	ldr r0, _08041630 @ =0x0203C9D4
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r1, r5, r1
	asrs r5, r1, #1
	movs r1, #2
	ldrsh r0, [r0, r1]
	adds r0, r6, r0
	asrs r6, r0, #1
_080415F4:
	ldr r0, _08041630 @ =0x0203C9D4
	movs r4, #0
	strh r5, [r0]
	strh r6, [r0, #2]
	bl GetGameTime
	str r0, [r7]
	bl GetGameTime
	adds r3, r5, #0
	subs r3, #0xe
	ldr r2, _08041634 @ =0x085CB3EC
	movs r1, #0x1f
	ands r1, r0
	adds r1, r1, r2
	ldrb r1, [r1]
	adds r5, r1, r3
	ldr r3, _08041638 @ =0x085CB3E4
	str r4, [sp]
	movs r0, #2
	adds r1, r5, #0
	adds r2, r6, #0
	bl PutSprite
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804162C: .4byte 0x0203C9D8
_08041630: .4byte 0x0203C9D4
_08041634: .4byte 0x085CB3EC
_08041638: .4byte 0x085CB3E4

	thumb_func_start sub_804163C
sub_804163C: @ 0x0804163C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r2, r1, #0
	subs r4, #0xc
	ldr r3, _0804165C @ =0x085CB3E4
	movs r0, #0
	str r0, [sp]
	movs r0, #3
	adds r1, r4, #0
	bl PutSprite
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804165C: .4byte 0x085CB3E4

	thumb_func_start sub_8041660
sub_8041660: @ 0x08041660
	ldr r0, _08041668 @ =0x0203C9D4
	movs r1, #0
	ldrsh r0, [r0, r1]
	bx lr
	.align 2, 0
_08041668: .4byte 0x0203C9D4

	thumb_func_start sub_804166C
sub_804166C: @ 0x0804166C
	ldr r0, _08041674 @ =0x0203C9D4
	movs r1, #2
	ldrsh r0, [r0, r1]
	bx lr
	.align 2, 0
_08041674: .4byte 0x0203C9D4

	thumb_func_start ClearBg0Bg1
ClearBg0Bg1: @ 0x08041678
	push {lr}
	ldr r0, _08041694 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _08041698 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	movs r0, #3
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
_08041694: .4byte gBg0Tm
_08041698: .4byte gBg1Tm

	thumb_func_start sub_804169C
sub_804169C: @ 0x0804169C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	adds r5, r1, #0
	mov sb, r2
	adds r0, r4, r2
	subs r6, r0, #1
	adds r5, #1
	ldr r3, _08041708 @ =gBg1Tm
	lsls r7, r5, #5
	adds r0, r7, r4
	lsls r0, r0, #1
	adds r0, r0, r3
	ldr r2, _0804170C @ =0x0810F734
	ldrh r1, [r2]
	strh r1, [r0]
	adds r4, #1
	mov r8, r3
	mov ip, r2
	cmp r4, r6
	bge _080416EC
	ldrh r3, [r2, #8]
	adds r0, r7, #1
	ldrh r7, [r2, #2]
	lsls r2, r4, #1
	lsls r1, r5, #6
	add r1, r8
	adds r1, r2, r1
	lsls r0, r0, #1
	add r0, r8
	adds r0, r2, r0
_080416DE:
	strh r3, [r1]
	strh r7, [r0]
	adds r1, #4
	adds r0, #4
	adds r4, #2
	cmp r4, r6
	blt _080416DE
_080416EC:
	lsls r0, r5, #5
	adds r0, r0, r6
	lsls r0, r0, #1
	mov r2, r8
	adds r1, r0, r2
	movs r0, #1
	mov r2, sb
	ands r0, r2
	cmp r0, #0
	beq _08041710
	mov r0, ip
	ldrh r2, [r0, #4]
	b _08041714
	.align 2, 0
_08041708: .4byte gBg1Tm
_0804170C: .4byte 0x0810F734
_08041710:
	mov r0, ip
	ldrh r2, [r0, #0xa]
_08041714:
	strh r2, [r1]
	movs r0, #2
	bl EnableBgSync
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8041728
sub_8041728: @ 0x08041728
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r3, r0, #0
	adds r4, r1, #0
	mov sb, r2
	adds r0, r3, r2
	subs r5, r0, #1
	adds r4, #1
	ldr r0, _08041788 @ =gBg1Tm
	mov r8, r0
	ldr r1, _0804178C @ =0x0810F734
	mov ip, r1
	cmp r3, r5
	bge _0804176C
	lsls r0, r4, #5
	ldrh r7, [r1, #0xc]
	adds r0, #1
	ldrh r6, [r1, #0xe]
	lsls r2, r3, #1
	lsls r1, r4, #6
	add r1, r8
	adds r1, r2, r1
	lsls r0, r0, #1
	add r0, r8
	adds r2, r2, r0
_0804175E:
	strh r7, [r1]
	strh r6, [r2]
	adds r1, #4
	adds r2, #4
	adds r3, #2
	cmp r3, r5
	blt _0804175E
_0804176C:
	lsls r0, r4, #5
	adds r0, r0, r5
	lsls r0, r0, #1
	mov r2, r8
	adds r1, r0, r2
	movs r0, #1
	mov r2, sb
	ands r0, r2
	cmp r0, #0
	beq _08041790
	mov r2, ip
	ldrh r0, [r2, #0xc]
	b _08041794
	.align 2, 0
_08041788: .4byte gBg1Tm
_0804178C: .4byte 0x0810F734
_08041790:
	mov r2, ip
	ldrh r0, [r2, #0xe]
_08041794:
	strh r0, [r1]
	movs r0, #2
	bl EnableBgSync
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80417A8
sub_80417A8: @ 0x080417A8
	push {r4, r5, lr}
	adds r3, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	ldr r0, _080417CC @ =0x08111970
	adds r1, r3, #0
	bl Decompress
	ldr r0, _080417D0 @ =0x08111BC4
	lsls r4, r4, #5
	lsls r5, r5, #5
	adds r1, r4, #0
	adds r2, r5, #0
	bl ApplyPaletteExt
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080417CC: .4byte 0x08111970
_080417D0: .4byte 0x08111BC4

	thumb_func_start LoadUiFrameGraphics
LoadUiFrameGraphics: @ 0x080417D4
	push {lr}
	movs r0, #0
	bl sub_80412B0
	movs r0, #1
	rsbs r0, r0, #0
	bl sub_8041284
	pop {r0}
	bx r0

	thumb_func_start sub_80417E8
sub_80417E8: @ 0x080417E8
	push {r4, lr}
	adds r4, r0, #0
	adds r0, r2, #0
	ldr r2, [r4]
	cmp r1, #0x77
	bgt _080417F8
	lsls r0, r3, #0x18
	b _080417FA
_080417F8:
	lsls r0, r0, #0x18
_080417FA:
	lsrs r0, r0, #0x18
	ldr r1, _08041814 @ =0xFFFFFF00
	ands r2, r1
	orrs r2, r0
	adds r0, r4, #0
	adds r1, r2, #0
	movs r2, #0
	bl sub_8041844
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08041814: .4byte 0xFFFFFF00

	thumb_func_start sub_8041818
sub_8041818: @ 0x08041818
	push {lr}
	adds r2, r1, #0
	ldr r1, [r0]
	bl sub_8041844
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8041828
sub_8041828: @ 0x08041828
	push {lr}
	movs r2, #0
	bl sub_8041844
	pop {r1}
	bx r1

	thumb_func_start sub_8041834
sub_8041834: @ 0x08041834
	push {lr}
	ldr r1, [r0]
	movs r2, #0
	bl sub_8041844
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8041844
sub_8041844: @ 0x08041844
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	str r0, [sp]
	mov sb, r1
	adds r4, r2, #0
	lsls r0, r1, #0x18
	asrs r0, r0, #0x18
	adds r0, #1
	str r0, [sp, #4]
	lsls r0, r1, #0x10
	asrs r0, r0, #0x18
	adds r0, #1
	mov r8, r0
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _080418A0 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0804188A
	movs r0, #0x68
	bl m4aSongNumStart
_0804188A:
	cmp r4, #0
	beq _080418A8
	ldr r0, _080418A4 @ =0x085CB424
	adds r1, r4, #0
	bl SpawnProcLocking
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x63
	movs r0, #0
	b _080418BC
	.align 2, 0
_080418A0: .4byte gPlaySt
_080418A4: .4byte 0x085CB424
_080418A8:
	bl LockGame
	ldr r0, _080419C0 @ =0x085CB424
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x63
	movs r0, #1
_080418BC:
	strb r0, [r1]
	mov r1, sb
	asrs r0, r1, #0x18
	str r0, [sp, #0x18]
	cmp r0, #0
	bge _080418D4
	adds r1, r4, #0
	adds r1, #0x63
	movs r0, #8
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
_080418D4:
	movs r7, #0
	movs r3, #0
	mov sl, r3
	ldr r0, [sp]
	ldr r1, [r0, #8]
	ldr r0, [r1, #0xc]
	mov r2, sb
	lsls r2, r2, #0x10
	str r2, [sp, #0x14]
	adds r3, r4, #0
	adds r3, #0x60
	str r3, [sp, #8]
	adds r2, r4, #0
	adds r2, #0x61
	str r2, [sp, #0xc]
	adds r3, #2
	str r3, [sp, #0x10]
	cmp r0, #0
	beq _08041976
	movs r6, #0
_080418FC:
	adds r0, r6, r1
	ldr r2, [r0, #0xc]
	adds r1, r7, #0
	bl _call_via_r2
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	beq _08041966
	ldr r0, _080419C4 @ =0x085CB464
	adds r1, r4, #0
	bl SpawnProc
	adds r2, r0, #0
	mov r0, sl
	lsls r1, r0, #2
	adds r0, r4, #0
	adds r0, #0x34
	adds r0, r0, r1
	str r2, [r0]
	movs r1, #1
	add sl, r1
	ldr r3, [sp]
	ldr r0, [r3, #8]
	adds r0, r0, r6
	str r0, [r2, #0x30]
	adds r0, r2, #0
	adds r0, #0x3c
	strb r7, [r0]
	adds r0, #1
	strb r5, [r0]
	mov r0, sp
	ldrh r0, [r0, #4]
	strh r0, [r2, #0x2a]
	mov r1, r8
	strh r1, [r2, #0x2c]
	adds r1, r4, #0
	adds r1, #0x63
	movs r0, #8
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _08041962
	adds r0, r2, #0
	adds r0, #0x34
	mov r2, sb
	lsls r1, r2, #8
	asrs r1, r1, #0x18
	subs r1, #2
	bl InitText
_08041962:
	movs r3, #2
	add r8, r3
_08041966:
	adds r6, #0x24
	adds r7, #1
	ldr r0, [sp]
	ldr r1, [r0, #8]
	adds r0, r6, r1
	ldr r0, [r0, #0xc]
	cmp r0, #0
	bne _080418FC
_08041976:
	ldr r1, [sp]
	str r1, [r4, #0x30]
	mov r2, sb
	str r2, [r4, #0x2c]
	movs r2, #0
	mov r0, sl
	ldr r3, [sp, #8]
	strb r0, [r3]
	ldr r1, [sp, #0xc]
	strb r2, [r1]
	movs r0, #0xff
	ldr r3, [sp, #0x10]
	strb r0, [r3]
	ldr r0, [sp, #0x14]
	asrs r1, r0, #0x18
	ldr r3, [sp, #0x18]
	adds r0, r1, r3
	cmp r0, r8
	bge _080419A8
	subs r0, r1, #1
	mov r1, r8
	subs r0, r1, r0
	adds r1, r4, #0
	adds r1, #0x2f
	strb r0, [r1]
_080419A8:
	ldr r0, _080419C8 @ =gKeySt
	ldr r0, [r0]
	strh r2, [r0, #8]
	adds r0, r4, #0
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_080419C0: .4byte 0x085CB424
_080419C4: .4byte 0x085CB464
_080419C8: .4byte gKeySt

	thumb_func_start sub_80419CC
sub_80419CC: @ 0x080419CC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x61
	ldrb r0, [r0]
	lsls r1, r0, #2
	adds r0, r4, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r1, [r0]
	adds r5, r4, #0
	adds r5, #0x63
	movs r0, #4
	ldrb r2, [r5]
	orrs r0, r2
	strb r0, [r5]
	ldr r0, [r1, #0x30]
	ldr r2, [r0, #0x20]
	cmp r2, #0
	beq _080419F8
	adds r0, r4, #0
	bl _call_via_r2
_080419F8:
	ldr r0, [r4, #0x30]
	ldr r1, [r0, #0x10]
	cmp r1, #0
	beq _08041A06
	adds r0, r4, #0
	bl _call_via_r1
_08041A06:
	movs r0, #1
	ldrb r5, [r5]
	ands r0, r5
	cmp r0, #0
	beq _08041A14
	bl UnlockGame
_08041A14:
	adds r0, r4, #0
	bl Proc_End
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, [r4, #0x14]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8041A38
sub_8041A38: @ 0x08041A38
	push {lr}
	ldr r0, _08041A48 @ =0x085CB424
	ldr r1, _08041A4C @ =sub_80419CC
	bl Proc_ForEach
	pop {r0}
	bx r0
	.align 2, 0
_08041A48: .4byte 0x085CB424
_08041A4C: .4byte sub_80419CC

	thumb_func_start sub_8041A50
sub_8041A50: @ 0x08041A50
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x30]
	ldr r1, [r0, #0xc]
	cmp r1, #0
	beq _08041A62
	adds r0, r4, #0
	bl _call_via_r1
_08041A62:
	adds r0, r4, #0
	adds r0, #0x61
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r1, r4, #0
	adds r1, #0x34
	adds r1, r1, r0
	ldr r1, [r1]
	ldr r0, [r1, #0x30]
	ldr r2, [r0, #0x1c]
	cmp r2, #0
	beq _08041A80
	adds r0, r4, #0
	bl _call_via_r2
_08041A80:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8041A88
sub_8041A88: @ 0x08041A88
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r6, r0, #0
	adds r1, r6, #0
	adds r1, #0x63
	movs r0, #8
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _08041B68
	adds r0, r6, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r6, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r2, r6, #0
	adds r2, #0x2e
	ldrb r2, [r2]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	adds r3, r6, #0
	adds r3, #0x2f
	ldrb r3, [r3]
	lsls r3, r3, #0x18
	asrs r3, r3, #0x18
	ldr r4, [r6, #0x30]
	ldrb r4, [r4, #4]
	str r4, [sp]
	bl sub_8041358
	movs r7, #0
	adds r0, r6, #0
	adds r0, #0x60
	mov r8, r0
	movs r0, #0x61
	adds r0, r0, r6
	mov sb, r0
	mov r1, r8
	ldrb r1, [r1]
	cmp r7, r1
	bge _08041B56
_08041AEA:
	lsls r1, r7, #2
	adds r0, r6, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r4, [r0]
	ldr r1, [r4, #0x30]
	ldr r2, [r1, #0x10]
	cmp r2, #0
	beq _08041B06
	adds r0, r6, #0
	adds r1, r4, #0
	bl _call_via_r2
	b _08041B4C
_08041B06:
	ldrb r0, [r1, #8]
	adds r5, r4, #0
	adds r5, #0x34
	cmp r0, #0
	beq _08041B18
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_SetColor
_08041B18:
	adds r0, r4, #0
	adds r0, #0x3d
	ldrb r0, [r0]
	cmp r0, #1
	bne _08041B2A
	adds r0, r5, #0
	movs r1, #1
	bl Text_SetColor
_08041B2A:
	ldr r0, [r4, #0x30]
	ldr r1, [r0]
	adds r0, r5, #0
	bl Text_DrawString
	movs r2, #0x2c
	ldrsh r1, [r4, r2]
	lsls r1, r1, #5
	movs r2, #0x2a
	ldrsh r0, [r4, r2]
	adds r1, r1, r0
	lsls r1, r1, #1
	ldr r0, _08041B78 @ =gBg0Tm
	adds r1, r1, r0
	adds r0, r5, #0
	bl PutText
_08041B4C:
	adds r7, #1
	mov r0, r8
	ldrb r0, [r0]
	cmp r7, r0
	blt _08041AEA
_08041B56:
	mov r2, sb
	ldrb r1, [r2]
	adds r0, r6, #0
	movs r2, #1
	bl sub_8041B7C
	movs r0, #3
	bl EnableBgSync
_08041B68:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08041B78: .4byte gBg0Tm

	thumb_func_start sub_8041B7C
sub_8041B7C: @ 0x08041B7C
	push {r4, lr}
	mov ip, r0
	lsls r2, r2, #0x18
	lsrs r4, r2, #0x18
	mov r3, ip
	adds r3, #0x63
	movs r0, #0x10
	ldrb r3, [r3]
	ands r0, r3
	cmp r0, #0
	bne _08041BD2
	mov r0, ip
	adds r0, #0x2c
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r3, r0, #1
	lsls r1, r1, #2
	mov r0, ip
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	movs r2, #0x2c
	ldrsh r1, [r0, r2]
	mov r0, ip
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r2, r0, #2
	lsls r0, r4, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08041BCC
	cmp r0, #1
	bne _08041BD2
	adds r0, r3, #0
	bl sub_804169C
	b _08041BD2
_08041BCC:
	adds r0, r3, #0
	bl sub_8041728
_08041BD2:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8041BD8
sub_8041BD8: @ 0x08041BD8
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r5, r0, #0
	adds r0, #0x63
	ldrb r1, [r0]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08041BFE
	add r2, sp, #4
	adds r0, r5, #0
	mov r1, sp
	bl sub_8041E24
	ldr r0, [sp]
	ldr r1, [sp, #4]
	bl sub_804163C
	b _08041CBE
_08041BFE:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _08041C0E
	adds r0, r5, #0
	bl sub_80419CC
	b _08041CBE
_08041C0E:
	adds r0, r5, #0
	bl sub_8041CCC
	adds r0, r5, #0
	bl sub_8041DA8
	adds r4, r0, #0
	movs r0, #2
	ands r0, r4
	cmp r0, #0
	beq _08041C2A
	adds r0, r5, #0
	bl sub_80419CC
_08041C2A:
	movs r0, #4
	ands r0, r4
	cmp r0, #0
	beq _08041C42
	ldr r0, _08041CC8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08041C42
	movs r0, #0x6a
	bl m4aSongNumStart
_08041C42:
	movs r0, #8
	ands r0, r4
	cmp r0, #0
	beq _08041C5A
	ldr r0, _08041CC8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08041C5A
	movs r0, #0x6b
	bl m4aSongNumStart
_08041C5A:
	movs r0, #0x10
	ands r0, r4
	cmp r0, #0
	beq _08041C66
	bl ClearBg0Bg1
_08041C66:
	movs r6, #0x20
	adds r0, r4, #0
	ands r0, r6
	cmp r0, #0
	beq _08041C76
	movs r0, #0
	bl EndFaceById
_08041C76:
	movs r0, #0x80
	ands r0, r4
	cmp r0, #0
	beq _08041C8A
	adds r1, r5, #0
	adds r1, #0x63
	movs r0, #0x80
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
_08041C8A:
	movs r0, #1
	ands r0, r4
	cmp r0, #0
	bne _08041CBE
	adds r1, r5, #0
	adds r1, #0x63
	adds r0, r6, #0
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _08041CBE
	add r4, sp, #4
	adds r0, r5, #0
	mov r1, sp
	adds r2, r4, #0
	bl sub_8041E24
	adds r0, r5, #0
	mov r1, sp
	adds r2, r4, #0
	bl sub_8042070
	ldr r0, [sp]
	ldr r1, [sp, #4]
	bl sub_80415CC
_08041CBE:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08041CC8: .4byte gPlaySt

	thumb_func_start sub_8041CCC
sub_8041CCC: @ 0x08041CCC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r2, r6, #0
	adds r2, #0x61
	ldrb r0, [r2]
	adds r1, r6, #0
	adds r1, #0x62
	strb r0, [r1]
	ldr r1, _08041DA0 @ =gKeySt
	ldr r3, [r1]
	ldrh r4, [r3, #6]
	movs r0, #0x40
	ands r0, r4
	cmp r0, #0
	beq _08041D04
	ldrb r0, [r2]
	cmp r0, #0
	bne _08041CFE
	ldrh r3, [r3, #8]
	cmp r4, r3
	bne _08041D9A
	adds r0, r6, #0
	adds r0, #0x60
	ldrb r0, [r0]
	strb r0, [r2]
_08041CFE:
	ldrb r0, [r2]
	subs r0, #1
	strb r0, [r2]
_08041D04:
	ldr r1, [r1]
	ldrh r3, [r1, #6]
	movs r0, #0x80
	ands r0, r3
	adds r4, r6, #0
	adds r4, #0x61
	cmp r0, #0
	beq _08041D32
	ldrb r2, [r4]
	adds r0, r6, #0
	adds r0, #0x60
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	bne _08041D2C
	ldrh r1, [r1, #8]
	cmp r3, r1
	bne _08041D9A
	movs r0, #0xff
	strb r0, [r4]
_08041D2C:
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
_08041D32:
	adds r0, r6, #0
	adds r0, #0x62
	adds r5, r0, #0
	ldrb r0, [r5]
	ldrb r1, [r4]
	cmp r0, r1
	beq _08041D64
	ldrb r1, [r5]
	adds r0, r6, #0
	movs r2, #0
	bl sub_8041B7C
	ldrb r1, [r4]
	adds r0, r6, #0
	movs r2, #1
	bl sub_8041B7C
	ldr r0, _08041DA4 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08041D64
	movs r0, #0x66
	bl m4aSongNumStart
_08041D64:
	ldrb r0, [r4]
	ldrb r1, [r5]
	cmp r0, r1
	beq _08041D9A
	lsls r0, r1, #2
	adds r5, r6, #0
	adds r5, #0x34
	adds r0, r5, r0
	ldr r1, [r0]
	ldr r0, [r1, #0x30]
	ldr r2, [r0, #0x20]
	cmp r2, #0
	beq _08041D84
	adds r0, r6, #0
	bl _call_via_r2
_08041D84:
	ldrb r4, [r4]
	lsls r0, r4, #2
	adds r0, r5, r0
	ldr r1, [r0]
	ldr r0, [r1, #0x30]
	ldr r2, [r0, #0x1c]
	cmp r2, #0
	beq _08041D9A
	adds r0, r6, #0
	bl _call_via_r2
_08041D9A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08041DA0: .4byte gKeySt
_08041DA4: .4byte gPlaySt

	thumb_func_start sub_8041DA8
sub_8041DA8: @ 0x08041DA8
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	movs r7, #0
	adds r0, #0x61
	ldrb r0, [r0]
	lsls r1, r0, #2
	adds r0, r4, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r5, [r0]
	ldr r6, [r5, #0x30]
	ldr r2, [r6, #0x18]
	cmp r2, #0
	beq _08041DCC
	adds r0, r4, #0
	adds r1, r5, #0
	bl _call_via_r2
_08041DCC:
	ldr r0, _08041DE0 @ =gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08041DE4
	ldr r2, [r6, #0x14]
	b _08041DF0
	.align 2, 0
_08041DE0: .4byte gKeySt
_08041DE4:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08041E02
	ldr r0, [r4, #0x30]
	ldr r2, [r0, #0x18]
_08041DF0:
	cmp r2, #0
	beq _08041E1A
	adds r0, r4, #0
	adds r1, r5, #0
	bl _call_via_r2
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	b _08041E1A
_08041E02:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08041E1A
	ldr r0, [r4, #0x30]
	ldr r1, [r0, #0x1c]
	cmp r1, #0
	beq _08041E1A
	adds r0, r4, #0
	bl _call_via_r1
_08041E1A:
	adds r0, r7, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8041E24
sub_8041E24: @ 0x08041E24
	push {r4, r5, r6, lr}
	adds r3, r0, #0
	adds r4, r1, #0
	movs r0, #0x61
	adds r0, r0, r3
	mov ip, r0
	ldrb r1, [r0]
	lsls r0, r1, #2
	adds r1, r3, #0
	adds r1, #0x34
	adds r0, r1, r0
	ldr r0, [r0]
	movs r5, #0x2a
	ldrsh r0, [r0, r5]
	lsls r0, r0, #3
	str r0, [r4]
	mov r6, ip
	ldrb r6, [r6]
	lsls r0, r6, #2
	adds r1, r1, r0
	ldr r0, [r1]
	movs r1, #0x2c
	ldrsh r0, [r0, r1]
	lsls r0, r0, #3
	str r0, [r2]
	ldr r0, [r3, #0x30]
	ldrb r0, [r0, #4]
	cmp r0, #0
	beq _08041E64
	ldr r0, [r4]
	subs r0, #4
	str r0, [r4]
_08041E64:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8041E6C
sub_8041E6C: @ 0x08041E6C
	movs r0, #0
	bx lr

	thumb_func_start sub_8041E70
sub_8041E70: @ 0x08041E70
	movs r0, #1
	bx lr

	thumb_func_start sub_8041E74
sub_8041E74: @ 0x08041E74
	movs r0, #0x1b
	bx lr

	thumb_func_start sub_8041E78
sub_8041E78: @ 0x08041E78
	push {lr}
	movs r2, #0x2a
	ldrsh r0, [r1, r2]
	lsls r0, r0, #3
	movs r2, #0x2c
	ldrsh r3, [r1, r2]
	lsls r3, r3, #3
	ldr r1, [r1, #0x30]
	ldrh r2, [r1, #6]
	adds r1, r3, #0
	bl sub_80706C8
	pop {r1}
	bx r1

	thumb_func_start sub_8041E94
sub_8041E94: @ 0x08041E94
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #1
	rsbs r1, r1, #0
	movs r0, #0
	bl sub_8070E70
	ldr r2, [r4, #0x30]
	adds r0, r4, #0
	adds r0, #0x61
	ldrb r0, [r0]
	lsls r1, r0, #2
	adds r0, r4, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r2, [r2, #0x20]
	adds r0, r4, #0
	bl _call_via_r2
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8041EC4
sub_8041EC4: @ 0x08041EC4
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	bl sub_8041CCC
	add r4, sp, #4
	adds r0, r5, #0
	mov r1, sp
	adds r2, r4, #0
	bl sub_8041E24
	adds r0, r5, #0
	mov r1, sp
	adds r2, r4, #0
	bl sub_8042070
	ldr r0, [sp]
	ldr r1, [sp, #4]
	bl sub_80415CC
	ldr r0, _08041F0C @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08041F14
	bl sub_807089C
	ldr r1, _08041F10 @ =0x085CB40C
	adds r0, r5, #0
	bl Proc_GotoScript
	b _08041F3A
	.align 2, 0
_08041F0C: .4byte gKeySt
_08041F10: .4byte 0x085CB40C
_08041F14:
	adds r1, r5, #0
	adds r1, #0x61
	adds r0, r5, #0
	adds r0, #0x62
	ldrb r2, [r1]
	ldrb r0, [r0]
	cmp r2, r0
	beq _08041F3A
	ldr r2, [r5, #0x30]
	ldrb r1, [r1]
	lsls r1, r1, #2
	adds r0, r5, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r2, [r2, #0x20]
	adds r0, r5, #0
	bl _call_via_r2
_08041F3A:
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8041F44
sub_8041F44: @ 0x08041F44
	push {lr}
	ldr r1, _08041F50 @ =0x085CB46C
	bl Proc_GotoScript
	pop {r1}
	bx r1
	.align 2, 0
_08041F50: .4byte 0x085CB46C

	thumb_func_start sub_8041F54
sub_8041F54: @ 0x08041F54
	push {r4, r5, lr}
	sub sp, #8
	adds r5, r0, #0
	add r4, sp, #4
	mov r1, sp
	adds r2, r4, #0
	bl sub_8041E24
	adds r0, r5, #0
	mov r1, sp
	adds r2, r4, #0
	bl sub_8042070
	ldr r0, [sp]
	ldr r1, [sp, #4]
	bl sub_804163C
	ldr r0, _08041F9C @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08041F92
	bl sub_807089C
	ldr r1, _08041FA0 @ =0x085CB40C
	adds r0, r5, #0
	bl Proc_GotoScript
_08041F92:
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08041F9C: .4byte gKeySt
_08041FA0: .4byte 0x085CB40C

	thumb_func_start MenuFrozenHelpBox
MenuFrozenHelpBox: @ 0x08041FA4
	push {r4, r5, lr}
	adds r5, r1, #0
	ldr r1, _08041FD4 @ =0x085CB484
	bl Proc_GotoScript
	movs r1, #1
	rsbs r1, r1, #0
	movs r0, #0
	bl sub_8070E70
	bl sub_8041660
	adds r4, r0, #0
	bl sub_804166C
	adds r1, r0, #0
	adds r0, r4, #0
	adds r2, r5, #0
	bl sub_80706C8
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08041FD4: .4byte 0x085CB484

	thumb_func_start sub_8041FD8
sub_8041FD8: @ 0x08041FD8
	push {lr}
	ldr r0, _08041FF4 @ =0x085CB424
	bl Proc_Find
	cmp r0, #0
	beq _08041FEE
	adds r0, #0x63
	movs r1, #0x40
	ldrb r2, [r0]
	orrs r1, r2
	strb r1, [r0]
_08041FEE:
	pop {r0}
	bx r0
	.align 2, 0
_08041FF4: .4byte 0x085CB424

	thumb_func_start sub_8041FF8
sub_8041FF8: @ 0x08041FF8
	push {lr}
	ldr r0, _08042014 @ =0x085CB424
	bl Proc_Find
	cmp r0, #0
	beq _08042010
	adds r1, r0, #0
	adds r1, #0x63
	movs r0, #0xbf
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
_08042010:
	pop {r0}
	bx r0
	.align 2, 0
_08042014: .4byte 0x085CB424

	thumb_func_start sub_8042018
sub_8042018: @ 0x08042018
	push {r4, r5, r6, r7, lr}
	bl sub_80417E8
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x60
	ldrb r0, [r1]
	cmp r0, #6
	bls _08042062
	adds r2, r4, #0
	adds r2, #0x2d
	ldr r5, _0804206C @ =0x085CB494
	ldrb r3, [r1]
	adds r0, r3, r5
	ldrb r7, [r2]
	ldrb r0, [r0]
	subs r0, r7, r0
	strb r0, [r2]
	movs r3, #0
	ldrb r0, [r1]
	cmp r3, r0
	bge _08042062
	adds r6, r5, #0
	adds r2, r1, #0
	adds r5, r4, #0
	adds r5, #0x34
_0804204C:
	ldm r5!, {r0}
	ldrb r7, [r2]
	adds r1, r7, r6
	ldrh r7, [r0, #0x2c]
	ldrb r1, [r1]
	subs r1, r7, r1
	strh r1, [r0, #0x2c]
	adds r3, #1
	ldrb r0, [r2]
	cmp r3, r0
	blt _0804204C
_08042062:
	adds r0, r4, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0804206C: .4byte 0x085CB494

	thumb_func_start sub_8042070
sub_8042070: @ 0x08042070
	push {r4, r5, r6, lr}
	adds r1, r0, #0
	adds r6, r2, #0
	adds r0, #0x60
	ldrb r2, [r0]
	cmp r2, #9
	bls _080420AE
	lsls r0, r2, #4
	subs r0, #0x90
	adds r1, #0x61
	ldrb r1, [r1]
	muls r0, r1, r0
	movs r1, #9
	bl __divsi3
	adds r5, r0, #0
	lsls r4, r5, #0x10
	lsrs r4, r4, #0x10
	movs r0, #0
	movs r1, #0
	adds r2, r4, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	adds r2, r4, #0
	bl SetBgOffset
	ldr r0, [r6]
	subs r0, r0, r5
	str r0, [r6]
_080420AE:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_80420B4
sub_80420B4: @ 0x080420B4
	adds r1, r0, #0
	adds r1, #0x61
	adds r0, #0x62
	ldrb r0, [r0]
	ldrb r1, [r1]
	eors r0, r1
	adds r1, r0, #0
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r0, r0, #0x1f
	bx lr
	.align 2, 0

	thumb_func_start BeginTargetList
BeginTargetList: @ 0x080420CC
	ldr r2, _080420DC @ =0x0203C9DC
	movs r3, #0
	strh r0, [r2]
	strh r1, [r2, #2]
	ldr r0, _080420E0 @ =0x0203CCE0
	str r3, [r0]
	bx lr
	.align 2, 0
_080420DC: .4byte 0x0203C9DC
_080420E0: .4byte 0x0203CCE0

	thumb_func_start EnlistTarget
EnlistTarget: @ 0x080420E4
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	ldr r4, _08042130 @ =0x0203C9E0
	mov r8, r4
	ldr r6, _08042134 @ =0x0203CCE0
	ldr r5, [r6]
	lsls r4, r5, #1
	adds r4, r4, r5
	lsls r4, r4, #2
	add r4, r8
	strb r0, [r4]
	ldr r4, [r6]
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r0, r0, #2
	add r0, r8
	strb r1, [r0, #1]
	ldr r1, [r6]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	add r0, r8
	strb r2, [r0, #2]
	ldr r1, [r6]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	add r0, r8
	strb r3, [r0, #3]
	ldr r0, [r6]
	adds r0, #1
	str r0, [r6]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08042130: .4byte 0x0203C9E0
_08042134: .4byte 0x0203CCE0

	thumb_func_start sub_8042138
sub_8042138: @ 0x08042138
	push {r4, r5, r6, lr}
	movs r2, #0
	ldr r0, _08042178 @ =0x0203CCE0
	ldr r1, [r0]
	adds r6, r0, #0
	ldr r4, _0804217C @ =0x0203C9E0
	cmp r2, r1
	bge _08042162
	adds r5, r6, #0
	adds r3, r4, #0
	adds r3, #0xc
	adds r1, r4, #0
	subs r1, #0xc
_08042152:
	str r1, [r1, #0x14]
	str r3, [r1, #0x10]
	adds r3, #0xc
	adds r1, #0xc
	adds r2, #1
	ldr r0, [r5]
	cmp r2, r0
	blt _08042152
_08042162:
	ldr r1, [r6]
	subs r1, #1
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r4
	str r0, [r4, #8]
	str r4, [r0, #4]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08042178: .4byte 0x0203CCE0
_0804217C: .4byte 0x0203C9E0

	thumb_func_start sub_8042180
sub_8042180: @ 0x08042180
	ldr r3, [r0, #0x30]
	movs r0, #0
	ldrsb r0, [r3, r0]
	lsls r0, r0, #4
	str r0, [r1]
	movs r0, #1
	ldrsb r0, [r3, r0]
	lsls r0, r0, #4
	str r0, [r2]
	bx lr

	thumb_func_start sub_8042194
sub_8042194: @ 0x08042194
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x34
	movs r0, #0x40
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _080421BE
	add r2, sp, #4
	adds r0, r4, #0
	mov r1, sp
	bl sub_8042180
	ldr r0, [sp]
	ldr r1, [sp, #4]
	movs r2, #4
	bl PutMapCursor
	b _08042256
_080421BE:
	adds r0, r4, #0
	bl sub_8042310
	adds r0, r4, #0
	bl sub_8042388
	adds r5, r0, #0
	movs r0, #2
	ands r0, r5
	cmp r0, #0
	beq _080421DA
	adds r0, r4, #0
	bl EndMapSelect
_080421DA:
	movs r0, #4
	ands r0, r5
	cmp r0, #0
	beq _080421F2
	ldr r0, _08042260 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080421F2
	movs r0, #0x6a
	bl m4aSongNumStart
_080421F2:
	movs r0, #8
	ands r0, r5
	cmp r0, #0
	beq _0804220A
	ldr r0, _08042260 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0804220A
	movs r0, #0x6b
	bl m4aSongNumStart
_0804220A:
	movs r0, #0x10
	ands r0, r5
	cmp r0, #0
	beq _08042216
	bl ClearBg0Bg1
_08042216:
	movs r0, #0x20
	ands r0, r5
	cmp r0, #0
	beq _08042224
	movs r0, #0
	bl EndFaceById
_08042224:
	movs r0, #1
	ands r0, r5
	cmp r0, #0
	bne _08042256
	add r2, sp, #4
	adds r0, r4, #0
	mov r1, sp
	bl sub_8042180
	ldr r1, [sp]
	asrs r1, r1, #4
	ldr r2, [sp, #4]
	asrs r2, r2, #4
	adds r0, r4, #0
	bl CameraMoveWatchPosition
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _08042256
	ldr r0, [sp]
	ldr r1, [sp, #4]
	movs r2, #2
	bl PutMapCursor
_08042256:
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08042260: .4byte gPlaySt

	thumb_func_start StartMapSelect
StartMapSelect: @ 0x08042264
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	bl LockGame
	ldr r0, _080422C4 @ =0x085CB4A0
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x34
	movs r6, #0
	movs r0, #1
	strb r0, [r1]
	str r4, [r5, #0x2c]
	bl sub_8042534
	str r0, [r5, #0x30]
	str r6, [r5, #0x38]
	ldr r0, [r5, #0x2c]
	ldr r1, [r0]
	cmp r1, #0
	beq _08042298
	adds r0, r5, #0
	bl _call_via_r1
_08042298:
	ldr r0, [r5, #0x2c]
	ldr r1, [r0, #8]
	cmp r1, #0
	beq _080422A6
	adds r0, r5, #0
	bl _call_via_r1
_080422A6:
	ldr r0, [r5, #0x2c]
	ldr r2, [r0, #0xc]
	cmp r2, #0
	beq _080422B6
	ldr r1, [r5, #0x30]
	adds r0, r5, #0
	bl _call_via_r2
_080422B6:
	ldr r0, _080422C8 @ =gKeySt
	ldr r0, [r0]
	strh r6, [r0, #8]
	adds r0, r5, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080422C4: .4byte 0x085CB4A0
_080422C8: .4byte gKeySt

	thumb_func_start StartMapSelectExt
StartMapSelectExt: @ 0x080422CC
	push {r4, lr}
	adds r4, r1, #0
	bl StartMapSelect
	str r4, [r0, #0x38]
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start EndMapSelect
EndMapSelect: @ 0x080422DC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	ldr r1, [r0, #4]
	cmp r1, #0
	beq _080422EE
	adds r0, r4, #0
	bl _call_via_r1
_080422EE:
	adds r1, r4, #0
	adds r1, #0x34
	movs r0, #1
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _08042300
	bl UnlockGame
_08042300:
	adds r0, r4, #0
	bl Proc_End
	ldr r0, [r4, #0x14]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8042310
sub_8042310: @ 0x08042310
	push {r4, lr}
	adds r4, r0, #0
	ldr r3, [r4, #0x30]
	ldr r2, _08042380 @ =gKeySt
	ldr r1, [r2]
	movs r0, #0x60
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _0804232C
	ldr r0, [r3, #4]
	cmp r0, #0
	beq _0804232C
	str r0, [r4, #0x30]
_0804232C:
	ldr r1, [r2]
	movs r0, #0x90
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _08042342
	ldr r0, [r4, #0x30]
	ldr r0, [r0, #8]
	cmp r0, #0
	beq _08042342
	str r0, [r4, #0x30]
_08042342:
	ldr r0, [r4, #0x30]
	cmp r0, r3
	beq _08042378
	ldr r0, [r4, #0x2c]
	ldr r2, [r0, #0x10]
	cmp r2, #0
	beq _08042358
	adds r0, r4, #0
	adds r1, r3, #0
	bl _call_via_r2
_08042358:
	ldr r0, [r4, #0x2c]
	ldr r2, [r0, #0xc]
	cmp r2, #0
	beq _08042368
	ldr r1, [r4, #0x30]
	adds r0, r4, #0
	bl _call_via_r2
_08042368:
	ldr r0, _08042384 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08042378
	movs r0, #0x67
	bl m4aSongNumStart
_08042378:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08042380: .4byte gKeySt
_08042384: .4byte gPlaySt

	thumb_func_start sub_8042388
sub_8042388: @ 0x08042388
	push {r4, lr}
	adds r2, r0, #0
	movs r4, #0
	ldr r0, _080423A8 @ =gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080423AC
	ldr r3, [r2, #0x38]
	cmp r3, #0
	bne _080423CC
	ldr r0, [r2, #0x2c]
	ldr r3, [r0, #0x14]
	b _080423C8
	.align 2, 0
_080423A8: .4byte gKeySt
_080423AC:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080423BA
	ldr r0, [r2, #0x2c]
	ldr r3, [r0, #0x18]
	b _080423C8
_080423BA:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _080423D8
	ldr r0, [r2, #0x2c]
	ldr r3, [r0, #0x1c]
_080423C8:
	cmp r3, #0
	beq _080423D8
_080423CC:
	ldr r1, [r2, #0x30]
	adds r0, r2, #0
	bl _call_via_r3
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_080423D8:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_80423E0
sub_80423E0: @ 0x080423E0
	push {lr}
	ldr r0, _080423FC @ =0x085CB4A0
	bl Proc_Find
	cmp r0, #0
	beq _080423F6
	adds r0, #0x34
	movs r1, #0x40
	ldrb r2, [r0]
	orrs r1, r2
	strb r1, [r0]
_080423F6:
	pop {r0}
	bx r0
	.align 2, 0
_080423FC: .4byte 0x085CB4A0

	thumb_func_start sub_8042400
sub_8042400: @ 0x08042400
	push {lr}
	ldr r0, _0804241C @ =0x085CB4A0
	bl Proc_Find
	cmp r0, #0
	beq _08042418
	adds r1, r0, #0
	adds r1, #0x34
	movs r0, #0xbf
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
_08042418:
	pop {r0}
	bx r0
	.align 2, 0
_0804241C: .4byte 0x085CB4A0

	thumb_func_start sub_8042420
sub_8042420: @ 0x08042420
	push {r4, r5, r6, r7, lr}
	movs r7, #0
	ldr r5, _08042458 @ =0x0203C9E0
	ldr r0, _0804245C @ =0x0203CCE0
	ldr r0, [r0]
	cmp r7, r0
	bge _08042476
	ldr r1, _08042460 @ =0x0203C9DC
	mov ip, r1
	movs r2, #0
	ldrsh r6, [r1, r2]
	adds r4, r0, #0
_08042438:
	movs r0, #0
	ldrsb r0, [r5, r0]
	subs r2, r6, r0
	cmp r2, #0
	bge _08042444
	subs r2, r0, r6
_08042444:
	mov r0, ip
	movs r1, #2
	ldrsh r3, [r0, r1]
	movs r0, #1
	ldrsb r0, [r5, r0]
	subs r1, r3, r0
	cmp r1, #0
	blt _08042464
	adds r0, r2, r1
	b _08042468
	.align 2, 0
_08042458: .4byte 0x0203C9E0
_0804245C: .4byte 0x0203CCE0
_08042460: .4byte 0x0203C9DC
_08042464:
	subs r0, r0, r3
	adds r0, r2, r0
_08042468:
	cmp r7, r0
	bge _0804246E
	adds r7, r0, #0
_0804246E:
	subs r4, #1
	adds r5, #0xc
	cmp r4, #0
	bne _08042438
_08042476:
	adds r0, r7, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8042480
sub_8042480: @ 0x08042480
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	movs r7, #0
	movs r5, #0
	movs r4, #0
	ldr r0, _08042514 @ =0x0203CCE0
	mov sb, r0
	ldr r1, _08042518 @ =0x0203C9DC
	mov r8, r1
	ldr r3, _0804251C @ =0x085CB4D0
	mov sl, r3
_0804249E:
	mov r6, r8
	movs r0, #0
	ldrsh r2, [r6, r0]
	lsls r1, r4, #2
	add r1, sl
	movs r0, #0
	ldrsb r0, [r1, r0]
	adds r2, r2, r0
	str r2, [sp]
	movs r3, #2
	ldrsh r2, [r6, r3]
	movs r0, #1
	ldrsb r0, [r1, r0]
	adds r2, r2, r0
	movs r1, #0
	ldr r3, _08042520 @ =0x0203C9E0
	mov r6, sb
	ldr r0, [r6]
	adds r4, #1
	cmp r1, r0
	bge _080424F8
	mov ip, sb
_080424CA:
	movs r0, #0
	ldrsb r0, [r3, r0]
	ldr r6, [sp]
	cmp r6, r0
	bne _080424EC
	movs r0, #1
	ldrsb r0, [r3, r0]
	cmp r2, r0
	bne _080424EC
	str r5, [r3, #4]
	cmp r5, #0
	beq _080424E4
	str r3, [r5, #8]
_080424E4:
	cmp r7, #0
	bne _080424EA
	adds r7, r3, #0
_080424EA:
	adds r5, r3, #0
_080424EC:
	adds r1, #1
	adds r3, #0xc
	mov r6, ip
	ldr r0, [r6]
	cmp r1, r0
	blt _080424CA
_080424F8:
	cmp r4, #0xc
	ble _0804249E
	str r5, [r7, #4]
	str r7, [r5, #8]
	adds r0, r7, #0
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08042514: .4byte 0x0203CCE0
_08042518: .4byte 0x0203C9DC
_0804251C: .4byte 0x085CB4D0
_08042520: .4byte 0x0203C9E0

	thumb_func_start sub_8042524
sub_8042524: @ 0x08042524
	push {lr}
	bl sub_8042138
	ldr r0, _08042530 @ =0x0203C9E0
	pop {r1}
	bx r1
	.align 2, 0
_08042530: .4byte 0x0203C9E0

	thumb_func_start sub_8042534
sub_8042534: @ 0x08042534
	push {lr}
	bl sub_8042420
	cmp r0, #2
	bgt _08042544
	bl sub_8042480
	b _08042548
_08042544:
	bl sub_8042524
_08042548:
	pop {r1}
	bx r1

	thumb_func_start CountTargets
CountTargets: @ 0x0804254C
	ldr r0, _08042554 @ =0x0203CCE0
	ldr r0, [r0]
	bx lr
	.align 2, 0
_08042554: .4byte 0x0203CCE0

	thumb_func_start GetTarget
GetTarget: @ 0x08042558
	adds r1, r0, #0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r1, _08042568 @ =0x0203C9E0
	adds r0, r0, r1
	bx lr
	.align 2, 0
_08042568: .4byte 0x0203C9E0

	thumb_func_start sub_804256C
sub_804256C: @ 0x0804256C
	ldr r1, _08042574 @ =0x0203CCE4
	str r0, [r1]
	bx lr
	.align 2, 0
_08042574: .4byte 0x0203CCE4

	thumb_func_start sub_8042578
sub_8042578: @ 0x08042578
	ldr r0, _08042580 @ =0x0203CCE4
	ldr r0, [r0]
	bx lr
	.align 2, 0
_08042580: .4byte 0x0203CCE4

	thumb_func_start sub_8042584
sub_8042584: @ 0x08042584
	push {r4, lr}
	ldr r4, _080425A4 @ =0x0203CCEC
	ldr r0, _080425A8 @ =0x085CB508
	movs r1, #3
	bl SpawnProc
	str r0, [r4]
	ldr r1, _080425AC @ =0x0203CCE8
	movs r0, #1
	str r0, [r1]
	bl LockGame
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080425A4: .4byte 0x0203CCEC
_080425A8: .4byte 0x085CB508
_080425AC: .4byte 0x0203CCE8

	thumb_func_start sub_80425B0
sub_80425B0: @ 0x080425B0
	push {lr}
	ldr r0, _080425C0 @ =0x0203CCEC
	ldr r0, [r0]
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_080425C0: .4byte 0x0203CCEC

	thumb_func_start sub_80425C4
sub_80425C4: @ 0x080425C4
	ldr r0, _080425D0 @ =0x0203CCE8
	ldr r0, [r0]
	cmp r0, #1
	beq _080425D4
	movs r0, #0
	b _080425D6
	.align 2, 0
_080425D0: .4byte 0x0203CCE8
_080425D4:
	movs r0, #1
_080425D6:
	bx lr

	thumb_func_start sub_80425D8
sub_80425D8: @ 0x080425D8
	push {lr}
	ldr r1, _080425E8 @ =0x0203CCE8
	movs r0, #0
	str r0, [r1]
	bl UnlockGame
	pop {r0}
	bx r0
	.align 2, 0
_080425E8: .4byte 0x0203CCE8

	thumb_func_start nullsub_18
nullsub_18: @ 0x080425EC
	bx lr
	.align 2, 0

	thumb_func_start sub_80425F0
sub_80425F0: @ 0x080425F0
	push {r4, lr}
	bl BasInit
	ldr r4, _0804263C @ =0x0200005C
	ldr r0, _08042640 @ =0x085CB528
	movs r1, #3
	bl SpawnProc
	str r0, [r4]
	ldr r0, _08042644 @ =sub_8042660
	bl SetMainFunc
	bl sub_8044900
	bl sub_805884C
	ldr r0, _08042648 @ =0x0201771C
	movs r1, #0
	str r1, [r0]
	ldr r0, _0804264C @ =0x02000010
	str r1, [r0]
	ldr r0, _08042650 @ =0x02000014
	str r1, [r0]
	ldr r0, _08042654 @ =0x02000018
	str r1, [r0]
	ldr r0, _08042658 @ =0x0200001C
	str r1, [r0]
	ldr r0, _0804265C @ =0x0203CCF0
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _08042634
	bl sub_805C520
_08042634:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804263C: .4byte 0x0200005C
_08042640: .4byte 0x085CB528
_08042644: .4byte sub_8042660
_08042648: .4byte 0x0201771C
_0804264C: .4byte 0x02000010
_08042650: .4byte 0x02000014
_08042654: .4byte 0x02000018
_08042658: .4byte 0x0200001C
_0804265C: .4byte 0x0203CCF0

	thumb_func_start sub_8042660
sub_8042660: @ 0x08042660
	push {lr}
	ldr r0, _08042678 @ =gKeySt
	ldr r0, [r0]
	bl RefreshKeySt
	ldr r0, _0804267C @ =0x02000014
	ldr r0, [r0]
	cmp r0, #0
	bne _08042680
	bl sub_8042704
	b _0804268C
	.align 2, 0
_08042678: .4byte gKeySt
_0804267C: .4byte 0x02000014
_08042680:
	ldr r0, _080426A0 @ =0x02000018
	ldr r0, [r0]
	cmp r0, #1
	bne _0804268C
	bl sub_8042704
_0804268C:
	ldr r0, _080426A4 @ =0x0201771C
	ldr r0, [r0]
	cmp r0, #1
	beq _080426A8
	cmp r0, #1
	blo _080426E4
	cmp r0, #2
	beq _080426B8
	b _080426E4
	.align 2, 0
_080426A0: .4byte 0x02000018
_080426A4: .4byte 0x0201771C
_080426A8:
	ldr r0, _080426B4 @ =0x0203CCF0
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _080426E4
	b _080426C2
	.align 2, 0
_080426B4: .4byte 0x0203CCF0
_080426B8:
	ldr r0, _080426D0 @ =0x0203CCF0
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _080426D8
_080426C2:
	ldr r0, _080426D4 @ =0x0200005C
	ldr r0, [r0]
	bl Proc_End
	bl sub_8047D14
	b _080426E4
	.align 2, 0
_080426D0: .4byte 0x0203CCF0
_080426D4: .4byte 0x0200005C
_080426D8:
	ldr r0, _080426F8 @ =0x0200005C
	ldr r0, [r0]
	bl Proc_End
	bl sub_80438B4
_080426E4:
	ldr r1, _080426FC @ =gBmSt
	movs r0, #1
	strb r0, [r1]
	ldr r0, _08042700 @ =0x04000006
	ldrh r0, [r0]
	strh r0, [r1, #6]
	bl VBlankIntrWait
	pop {r0}
	bx r0
	.align 2, 0
_080426F8: .4byte 0x0200005C
_080426FC: .4byte gBmSt
_08042700: .4byte 0x04000006

	thumb_func_start sub_8042704
sub_8042704: @ 0x08042704
	push {r4, lr}
	bl ClearSprites
	bl sub_805BD9C
	bl GetGameLock
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08042720
	ldr r0, _08042770 @ =gProcTreeRootArray
	ldr r0, [r0, #8]
	bl Proc_Run
_08042720:
	ldr r4, _08042770 @ =gProcTreeRootArray
	ldr r0, [r4, #0xc]
	bl Proc_Run
	ldr r0, [r4, #0x14]
	bl Proc_Run
	movs r0, #0
	bl PutSpriteLayerOam
	ldr r0, [r4, #4]
	bl Proc_Run
	bl BasUpdateAll
	bl sub_804A5DC
	ldr r0, [r4, #0x10]
	bl Proc_Run
	ldr r1, _08042774 @ =0x02000018
	movs r0, #0
	str r0, [r1]
	ldr r1, _08042778 @ =0x0201E124
	ldr r0, [r1]
	ldr r1, [r1, #4]
	adds r0, r0, r1
	cmp r0, #2
	beq _08042762
	ldr r1, _0804277C @ =0x02000010
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
_08042762:
	movs r0, #0xd
	bl PutSpriteLayerOam
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08042770: .4byte gProcTreeRootArray
_08042774: .4byte 0x02000018
_08042778: .4byte 0x0201E124
_0804277C: .4byte 0x02000010

	thumb_func_start nullsub_19
nullsub_19: @ 0x08042780
	bx lr
	.align 2, 0

	thumb_func_start sub_8042784
sub_8042784: @ 0x08042784
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _080427A4 @ =0x0201E12C
	movs r0, #0
	str r0, [r1]
	ldr r0, _080427A8 @ =0x0201773C
	ldr r0, [r0]
	cmp r0, #0
	bne _080427B6
	ldr r0, _080427AC @ =0x0203CD14
	ldrh r0, [r0]
	cmp r0, #1
	bne _080427B0
	movs r0, #0x20
	rsbs r0, r0, #0
	b _080427B4
	.align 2, 0
_080427A4: .4byte 0x0201E12C
_080427A8: .4byte 0x0201773C
_080427AC: .4byte 0x0203CD14
_080427B0:
	movs r0, #0xf0
	rsbs r0, r0, #0
_080427B4:
	str r0, [r1]
_080427B6:
	bl sub_804B294
	bl sub_8058F28
	ldr r0, _080427D0 @ =0x0200001C
	movs r1, #1
	str r1, [r0]
	bl sub_804C500
	cmp r0, #1
	bne _080427D4
	movs r0, #0
	b _080427D6
	.align 2, 0
_080427D0: .4byte 0x0200001C
_080427D4:
	movs r0, #0x1e
_080427D6:
	strh r0, [r4, #0x2c]
	ldr r0, _080427EC @ =0x0203CCF4
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _080427F4
	ldr r1, _080427F0 @ =0x0203CD84
	ldrb r0, [r1]
	ldrb r1, [r1, #1]
	b _080427FA
	.align 2, 0
_080427EC: .4byte 0x0203CCF4
_080427F0: .4byte 0x0203CD84
_080427F4:
	ldr r1, _08042814 @ =0x0203CD84
	ldrb r0, [r1, #1]
	ldrb r1, [r1]
_080427FA:
	bl sub_806B6F8
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [r4, #0x54]
	movs r0, #0
	str r0, [r4, #0x58]
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08042814: .4byte 0x0203CD84

	thumb_func_start sub_8042818
sub_8042818: @ 0x08042818
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x1f
	bne _08042860
	bl sub_8042578
	cmp r0, #1
	beq _08042858
	ldr r0, [r4, #0x54]
	cmp r0, #1
	beq _0804283E
	ldr r0, [r4, #0x58]
	cmp r0, #1
	bne _08042858
_0804283E:
	movs r0, #1
	movs r1, #7
	bl sub_8048DA4
	movs r0, #1
	movs r1, #7
	movs r2, #0
	bl sub_8048E88
	ldr r0, _08042854 @ =sub_804286C
	b _0804285A
	.align 2, 0
_08042854: .4byte sub_804286C
_08042858:
	ldr r0, _08042868 @ =sub_8042970
_0804285A:
	str r0, [r4, #0xc]
	movs r0, #0
	strh r0, [r4, #0x2c]
_08042860:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08042868: .4byte sub_8042970

	thumb_func_start sub_804286C
sub_804286C: @ 0x0804286C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	bl sub_8048DF4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _080428F6
	bl sub_8043960
	bl sub_8044264
	movs r0, #0
	str r0, [sp]
	ldr r1, _080428D0 @ =gBg0Tm
	ldr r2, _080428D4 @ =0x01000200
	mov r0, sp
	bl CpuFastSet
	ldr r0, _080428D8 @ =0x02000030
	ldrh r1, [r0]
	ldrh r2, [r0, #2]
	movs r0, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	bl EnableBgSync
	bl sub_80438D8
	ldr r0, [r4, #0x54]
	cmp r0, #1
	bne _080428F2
	ldr r0, _080428DC @ =0x0203CCF4
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _080428E4
	ldr r1, _080428E0 @ =0x0203CD84
	ldrb r0, [r1]
	ldrb r1, [r1, #1]
	bl sub_806B754
	b _080428EE
	.align 2, 0
_080428D0: .4byte gBg0Tm
_080428D4: .4byte 0x01000200
_080428D8: .4byte 0x02000030
_080428DC: .4byte 0x0203CCF4
_080428E0: .4byte 0x0203CD84
_080428E4:
	ldr r1, _08042900 @ =0x0203CD84
	ldrb r0, [r1, #1]
	ldrb r1, [r1]
	bl sub_806B754
_080428EE:
	movs r0, #0
	str r0, [r4, #0x54]
_080428F2:
	ldr r0, _08042904 @ =sub_8042908
	str r0, [r4, #0xc]
_080428F6:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08042900: .4byte 0x0203CD84
_08042904: .4byte sub_8042908

	thumb_func_start sub_8042908
sub_8042908: @ 0x08042908
	push {r4, lr}
	adds r4, r0, #0
	bl IsEventRunning
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08042942
	bl sub_8044608
	movs r0, #1
	bl EnableBgSync
	movs r0, #0
	movs r1, #7
	bl sub_8048DA4
	movs r0, #0
	movs r1, #7
	movs r2, #0
	bl sub_8048E88
	bl sub_8043970
	bl sub_8044274
	bl sub_80438C8
	ldr r0, _08042948 @ =sub_804294C
	str r0, [r4, #0xc]
_08042942:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08042948: .4byte sub_804294C

	thumb_func_start sub_804294C
sub_804294C: @ 0x0804294C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_8048DF4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08042964
	ldr r0, _0804296C @ =sub_8042970
	str r0, [r4, #0xc]
	movs r0, #0
	strh r0, [r4, #0x2c]
_08042964:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804296C: .4byte sub_8042970

	thumb_func_start sub_8042970
sub_8042970: @ 0x08042970
	ldr r1, _08042984 @ =0x0203CCF4
	movs r2, #0
	ldrsh r1, [r1, r2]
	str r1, [r0, #0x44]
	movs r1, #0
	str r1, [r0, #0x48]
	ldr r1, _08042988 @ =sub_804298C
	str r1, [r0, #0xc]
	bx lr
	.align 2, 0
_08042984: .4byte 0x0203CCF4
_08042988: .4byte sub_804298C

	thumb_func_start sub_804298C
sub_804298C: @ 0x0804298C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	bl sub_80588E0
	adds r5, r0, #0
	ldr r0, [r4, #0x48]
	cmp r0, #2
	bne _080429A8
	ldr r0, _080429A4 @ =sub_8042A5C
	str r0, [r4, #0xc]
	b _08042A2C
	.align 2, 0
_080429A4: .4byte sub_8042A5C
_080429A8:
	ldr r0, [r4, #0x44]
	cmp r0, #0
	bne _080429F8
	ldr r0, _080429F0 @ =0x02000000
	ldr r1, [r0]
	str r1, [r4, #0x5c]
	movs r6, #1
	adds r0, r5, #0
	ands r0, r6
	cmp r0, #0
	beq _080429C8
	adds r0, r1, #0
	bl sub_80590B8
	ldr r0, _080429F4 @ =sub_8042A3C
	str r0, [r4, #0xc]
_080429C8:
	movs r0, #4
	ands r0, r5
	cmp r0, #0
	beq _080429DA
	ldr r0, [r4, #0x5c]
	bl sub_80599D0
	ldr r0, _080429F4 @ =sub_8042A3C
	str r0, [r4, #0xc]
_080429DA:
	movs r0, #0x10
	ands r0, r5
	cmp r0, #0
	beq _080429EC
	ldr r0, [r4, #0x5c]
	bl sub_8059D8C
	ldr r0, _080429F4 @ =sub_8042A3C
	str r0, [r4, #0xc]
_080429EC:
	str r6, [r4, #0x44]
	b _08042A26
	.align 2, 0
_080429F0: .4byte 0x02000000
_080429F4: .4byte sub_8042A3C
_080429F8:
	ldr r0, _08042A34 @ =0x02000000
	ldr r1, [r0, #8]
	str r1, [r4, #0x5c]
	movs r0, #2
	ands r0, r5
	cmp r0, #0
	beq _08042A10
	adds r0, r1, #0
	bl sub_80590B8
	ldr r0, _08042A38 @ =sub_8042A3C
	str r0, [r4, #0xc]
_08042A10:
	movs r0, #8
	ands r0, r5
	cmp r0, #0
	beq _08042A22
	ldr r0, [r4, #0x5c]
	bl sub_80599D0
	ldr r0, _08042A38 @ =sub_8042A3C
	str r0, [r4, #0xc]
_08042A22:
	movs r0, #0
	str r0, [r4, #0x44]
_08042A26:
	ldr r0, [r4, #0x48]
	adds r0, #1
	str r0, [r4, #0x48]
_08042A2C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08042A34: .4byte 0x02000000
_08042A38: .4byte sub_8042A3C

	thumb_func_start sub_8042A3C
sub_8042A3C: @ 0x08042A3C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_8058880
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08042A52
	ldr r0, _08042A58 @ =sub_804298C
	str r0, [r4, #0xc]
_08042A52:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08042A58: .4byte sub_804298C

	thumb_func_start sub_8042A5C
sub_8042A5C: @ 0x08042A5C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08042A88 @ =0x0203CCF4
	movs r2, #0
	ldrsh r1, [r0, r2]
	ldr r0, _08042A8C @ =0x0201773C
	ldr r0, [r0]
	cmp r1, r0
	beq _08042A98
	ldr r1, _08042A90 @ =0x02000000
	lsls r0, r0, #3
	adds r0, r0, r1
	ldr r0, [r0]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r0, _08042A94 @ =sub_8042AA8
	b _08042A9A
	.align 2, 0
_08042A88: .4byte 0x0203CCF4
_08042A8C: .4byte 0x0201773C
_08042A90: .4byte 0x02000000
_08042A94: .4byte sub_8042AA8
_08042A98:
	ldr r0, _08042AA4 @ =sub_8042AC4
_08042A9A:
	str r0, [r4, #0xc]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08042AA4: .4byte sub_8042AC4

	thumb_func_start sub_8042AA8
sub_8042AA8: @ 0x08042AA8
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #8
	bne _08042ABC
	ldr r0, _08042AC0 @ =sub_8042AC4
	str r0, [r1, #0xc]
_08042ABC:
	bx lr
	.align 2, 0
_08042AC0: .4byte sub_8042AC4

	thumb_func_start sub_8042AC4
sub_8042AC4: @ 0x08042AC4
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _08042B08 @ =0x02000000
	ldr r0, [r4]
	bl sub_8046DA0
	ldr r0, [r4, #8]
	bl sub_8046DA0
	ldr r1, _08042B0C @ =0x0203CDCC
	movs r2, #0
	ldrsh r0, [r1, r2]
	movs r2, #2
	ldrsh r1, [r1, r2]
	bl sub_80471E4
	ldr r1, _08042B10 @ =gBattleSt
	movs r0, #0x40
	ldrb r1, [r1, #1]
	ands r0, r1
	cmp r0, #0
	beq _08042AF6
	ldr r0, [r4]
	bl sub_8046ED8
_08042AF6:
	ldr r0, [r4]
	bl sub_8046A6C
	ldr r0, _08042B14 @ =sub_8042B18
	str r0, [r5, #0xc]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08042B08: .4byte 0x02000000
_08042B0C: .4byte 0x0203CDCC
_08042B10: .4byte gBattleSt
_08042B14: .4byte sub_8042B18

	thumb_func_start sub_8042B18
sub_8042B18: @ 0x08042B18
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08042B30 @ =0x0203CD88
	ldr r0, [r0]
	cmp r0, #0
	beq _08042B3C
	ldr r0, _08042B34 @ =0x02000000
	ldr r0, [r0, #8]
	bl sub_805E578
	ldr r0, _08042B38 @ =sub_8042B4C
	b _08042B3E
	.align 2, 0
_08042B30: .4byte 0x0203CD88
_08042B34: .4byte 0x02000000
_08042B38: .4byte sub_8042B4C
_08042B3C:
	ldr r0, _08042B48 @ =sub_8042B74
_08042B3E:
	str r0, [r4, #0xc]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08042B48: .4byte sub_8042B74

	thumb_func_start sub_8042B4C
sub_8042B4C: @ 0x08042B4C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_805E560
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08042B68
	bl nullsub_5
	movs r0, #0x1e
	strh r0, [r4, #0x2c]
	ldr r0, _08042B70 @ =sub_8042B74
	str r0, [r4, #0xc]
_08042B68:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08042B70: .4byte sub_8042B74

	thumb_func_start sub_8042B74
sub_8042B74: @ 0x08042B74
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	movs r7, #0
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x1e
	ble _08042BE0
	ldr r6, _08042BE8 @ =0x0203CCF8
	ldrh r0, [r6]
	cmp r0, #1
	bne _08042BB0
	ldr r3, _08042BEC @ =0x02000000
	ldr r4, [r3]
	movs r2, #0x80
	lsls r2, r2, #8
	strh r2, [r4, #0x10]
	movs r0, #0x80
	lsls r0, r0, #7
	adds r1, r0, #0
	ldrh r0, [r4, #0xc]
	orrs r0, r1
	strh r0, [r4, #0xc]
	ldr r4, [r3, #4]
	strh r2, [r4, #0x10]
	ldrh r0, [r4, #0xc]
	orrs r1, r0
	strh r1, [r4, #0xc]
_08042BB0:
	ldrh r6, [r6, #2]
	cmp r6, #1
	bne _08042BD6
	ldr r3, _08042BEC @ =0x02000000
	ldr r4, [r3, #8]
	movs r2, #0x80
	lsls r2, r2, #8
	strh r2, [r4, #0x10]
	movs r0, #0x80
	lsls r0, r0, #7
	adds r1, r0, #0
	ldrh r0, [r4, #0xc]
	orrs r0, r1
	strh r0, [r4, #0xc]
	ldr r4, [r3, #0xc]
	strh r2, [r4, #0x10]
	ldrh r0, [r4, #0xc]
	orrs r1, r0
	strh r1, [r4, #0xc]
_08042BD6:
	ldr r0, _08042BF0 @ =0x0201E124
	str r7, [r0]
	str r7, [r0, #4]
	ldr r0, _08042BF4 @ =sub_8042BF8
	str r0, [r5, #0xc]
_08042BE0:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08042BE8: .4byte 0x0203CCF8
_08042BEC: .4byte 0x02000000
_08042BF0: .4byte 0x0201E124
_08042BF4: .4byte sub_8042BF8

	thumb_func_start sub_8042BF8
sub_8042BF8: @ 0x08042BF8
	ldr r2, _08042C04 @ =0x0200001C
	movs r1, #0
	str r1, [r2]
	ldr r1, _08042C08 @ =sub_8042C0C
	str r1, [r0, #0xc]
	bx lr
	.align 2, 0
_08042C04: .4byte 0x0200001C
_08042C08: .4byte sub_8042C0C

	thumb_func_start sub_8042C0C
sub_8042C0C: @ 0x08042C0C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08042C24 @ =0x0203CD14
	ldrh r0, [r0]
	cmp r0, #4
	bne _08042C30
	ldr r0, _08042C28 @ =0x02000000
	ldr r0, [r0, #8]
	bl sub_805C86C
	ldr r0, _08042C2C @ =sub_8042C48
	b _08042C3A
	.align 2, 0
_08042C24: .4byte 0x0203CD14
_08042C28: .4byte 0x02000000
_08042C2C: .4byte sub_8042C48
_08042C30:
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	ldr r0, _08042C44 @ =sub_8042C74
_08042C3A:
	str r0, [r4, #0xc]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08042C44: .4byte sub_8042C74

	thumb_func_start sub_8042C48
sub_8042C48: @ 0x08042C48
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_805C840
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #1
	bne _08042C64
	bl sub_805C858
	ldr r0, _08042C6C @ =0x0203CDBC
	strh r4, [r0]
	ldr r0, _08042C70 @ =sub_80433B0
	str r0, [r5, #0xc]
_08042C64:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08042C6C: .4byte 0x0203CDBC
_08042C70: .4byte sub_80433B0

	thumb_func_start sub_8042C74
sub_8042C74: @ 0x08042C74
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r4, #0
	ldr r0, _08042CA4 @ =gKeySt
	ldr r1, [r0]
	movs r0, #2
	ldrh r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _08042C90
	adds r1, r6, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
_08042C90:
	ldr r0, _08042CA8 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #3
	beq _08042D4C
	cmp r0, #3
	ble _08042CAC
	cmp r0, #4
	beq _08042D58
	b _08042D5A
	.align 2, 0
_08042CA4: .4byte gKeySt
_08042CA8: .4byte 0x0203CD14
_08042CAC:
	cmp r0, #0
	blt _08042D5A
	ldr r0, _08042CF4 @ =0x0201E124
	ldr r1, [r0]
	ldr r0, [r0, #4]
	adds r1, r1, r0
	cmp r1, #2
	bne _08042D5A
	bl sub_804C500
	cmp r0, #0
	beq _08042D58
	ldr r5, _08042CF8 @ =0x0203CDBC
	ldr r0, _08042CFC @ =0x0203CD7C
	ldr r0, [r0]
	adds r0, #0x6a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	strh r0, [r5]
	ldr r0, _08042D00 @ =0x0203CD80
	ldr r0, [r0]
	adds r0, #0x6a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	strh r0, [r5, #2]
	ldr r1, _08042D04 @ =0x0203CDA0
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0
	bne _08042D08
	movs r0, #1
	bl ArenaSetResult
	b _08042D58
	.align 2, 0
_08042CF4: .4byte 0x0201E124
_08042CF8: .4byte 0x0203CDBC
_08042CFC: .4byte 0x0203CD7C
_08042D00: .4byte 0x0203CD80
_08042D04: .4byte 0x0203CDA0
_08042D08:
	movs r2, #2
	ldrsh r0, [r1, r2]
	cmp r0, #0
	bne _08042D1A
	movs r0, #2
_08042D12:
	bl ArenaSetResult
	strh r4, [r5, #2]
	b _08042D58
_08042D1A:
	adds r0, r6, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	bne _08042D2C
	bl sub_804C56C
	movs r0, #4
	b _08042D12
_08042D2C:
	bl ArenaContinueBattle
	bl sub_8049F1C
	bl BasInit
	bl sub_804B048
	bl sub_804B294
	strh r4, [r6, #0x2c]
	ldr r0, _08042D48 @ =sub_8042B74
	str r0, [r6, #0xc]
	b _08042D5A
	.align 2, 0
_08042D48: .4byte sub_8042B74
_08042D4C:
	ldr r0, _08042D68 @ =0x0201E124
	ldr r1, [r0]
	ldr r0, [r0, #4]
	adds r1, r1, r0
	cmp r1, #1
	bne _08042D5A
_08042D58:
	movs r4, #1
_08042D5A:
	cmp r4, #1
	bne _08042D62
	ldr r0, _08042D6C @ =sub_8042D70
	str r0, [r6, #0xc]
_08042D62:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08042D68: .4byte 0x0201E124
_08042D6C: .4byte sub_8042D70

	thumb_func_start sub_8042D70
sub_8042D70: @ 0x08042D70
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	ldr r1, _08042D80 @ =sub_8042D84
	str r1, [r0, #0xc]
	bx lr
	.align 2, 0
_08042D80: .4byte sub_8042D84

	thumb_func_start sub_8042D84
sub_8042D84: @ 0x08042D84
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, _08042DFC @ =0x02017720
	ldr r0, [r0]
	cmp r0, #0
	bne _08042DF4
	ldr r0, _08042E00 @ =0x02017730
	ldr r4, [r0]
	cmp r4, #0
	bne _08042DF4
	bl sub_8048ED8
	lsls r0, r0, #0x18
	asrs r6, r0, #0x18
	cmp r6, #1
	bne _08042DF4
	strh r4, [r5, #0x2c]
	ldr r0, _08042E04 @ =sub_8042E14
	str r0, [r5, #0xc]
	bl sub_8058998
	cmp r0, #0
	beq _08042DC0
	ldr r0, _08042E08 @ =0x02000000
	ldr r0, [r0]
	bl sub_8058A08
	ldrh r0, [r0]
	cmp r0, #1
	beq _08042DF4
_08042DC0:
	ldr r0, _08042E0C @ =0x0203CDBC
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #1
	cmp r0, #0
	beq _08042DCE
	movs r2, #0
_08042DCE:
	ldr r3, _08042E10 @ =0x0201773C
	ldr r0, [r3]
	adds r1, r5, #0
	adds r1, #0x29
	cmp r2, r0
	beq _08042DDC
	strb r6, [r1]
_08042DDC:
	ldrb r1, [r1]
	cmp r1, #1
	bne _08042DF4
	ldr r1, _08042E08 @ =0x02000000
	ldr r0, [r3]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldr r0, [r0]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
_08042DF4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08042DFC: .4byte 0x02017720
_08042E00: .4byte 0x02017730
_08042E04: .4byte sub_8042E14
_08042E08: .4byte 0x02000000
_08042E0C: .4byte 0x0203CDBC
_08042E10: .4byte 0x0201773C

	thumb_func_start sub_8042E14
sub_8042E14: @ 0x08042E14
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x1d
	ble _08042E4C
	bl sub_8042578
	cmp r0, #1
	beq _08042E48
	ldr r0, _08042E40 @ =0x0203CDBC
	movs r2, #0
	ldrsh r1, [r0, r2]
	movs r2, #2
	ldrsh r0, [r0, r2]
	cmn r1, r0
	beq _08042E48
	ldr r0, _08042E44 @ =sub_8042E58
	b _08042E4A
	.align 2, 0
_08042E40: .4byte 0x0203CDBC
_08042E44: .4byte sub_8042E58
_08042E48:
	ldr r0, _08042E54 @ =sub_804340C
_08042E4A:
	str r0, [r4, #0xc]
_08042E4C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08042E54: .4byte sub_804340C

	thumb_func_start sub_8042E58
sub_8042E58: @ 0x08042E58
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	str r0, [sp, #8]
	ldr r0, _08042F54 @ =0x0201947C
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r0, r1
	mov sl, r0
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r7, _08042F58 @ =gDispIo
	movs r0, #0x20
	ldrb r2, [r7, #1]
	orrs r0, r2
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	adds r1, r7, #0
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x31
	movs r2, #0x94
	strb r2, [r0]
	subs r1, #1
	movs r0, #0xf0
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x30
	strb r2, [r0]
	movs r3, #1
	mov r8, r3
	mov r1, r8
	ldr r6, _08042F5C @ =0x030026E4
	ldrb r6, [r6]
	orrs r1, r6
	movs r0, #2
	mov sb, r0
	mov r2, sb
	orrs r1, r2
	movs r5, #4
	orrs r1, r5
	movs r4, #8
	orrs r1, r4
	movs r3, #0x10
	orrs r1, r3
	movs r6, #0x36
	mov r0, r8
	ldrb r2, [r6, r7]
	orrs r0, r2
	movs r2, #3
	rsbs r2, r2, #0
	ands r0, r2
	orrs r0, r5
	orrs r0, r4
	orrs r0, r3
	subs r2, #0x1e
	ands r1, r2
	ldr r3, _08042F5C @ =0x030026E4
	strb r1, [r3]
	ands r0, r2
	strb r0, [r6, r7]
	ldr r0, _08042F60 @ =0x08113584
	ldr r1, _08042F64 @ =0x06002000
	movs r2, #0xc0
	lsls r2, r2, #2
	bl RegisterDataMove
	ldr r0, _08042F68 @ =0x08113CE4
	ldr r1, _08042F6C @ =0x02022754
	movs r2, #1
	str r2, [sp]
	adds r2, #0xff
	str r2, [sp, #4]
	movs r2, #0x12
	movs r3, #3
	bl sub_805B1AC
	ldr r0, _08042F70 @ =0x08113D50
	ldr r1, _08042F74 @ =0x02021728
	movs r2, #8
	bl CpuFastSet
	movs r0, #2
	bl EnableBgSync
	bl EnablePalSync
	bl sub_805894C
	cmp r0, #0
	bne _08042F78
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r6, [r7, #0x10]
	ands r0, r6
	strb r0, [r7, #0x10]
	adds r0, r1, #0
	ldrb r2, [r7, #0xc]
	ands r0, r2
	mov r3, r8
	orrs r0, r3
	strb r0, [r7, #0xc]
	ldrb r6, [r7, #0x14]
	ands r1, r6
	mov r0, sb
	orrs r1, r0
	strb r1, [r7, #0x14]
	movs r0, #3
	ldrb r1, [r7, #0x18]
	orrs r0, r1
	strb r0, [r7, #0x18]
	b _08042FA2
	.align 2, 0
_08042F54: .4byte 0x0201947C
_08042F58: .4byte gDispIo
_08042F5C: .4byte 0x030026E4
_08042F60: .4byte 0x08113584
_08042F64: .4byte 0x06002000
_08042F68: .4byte 0x08113CE4
_08042F6C: .4byte 0x02022754
_08042F70: .4byte 0x08113D50
_08042F74: .4byte 0x02021728
_08042F78:
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r7, #0x10]
	ands r0, r2
	strb r0, [r7, #0x10]
	adds r0, r1, #0
	ldrb r3, [r7, #0xc]
	ands r0, r3
	mov r6, r8
	orrs r0, r6
	strb r0, [r7, #0xc]
	ldrb r0, [r7, #0x18]
	ands r1, r0
	mov r2, sb
	orrs r1, r2
	strb r1, [r7, #0x18]
	movs r0, #3
	ldrb r3, [r7, #0x14]
	orrs r0, r3
	strb r0, [r7, #0x14]
_08042FA2:
	movs r0, #1
	bl sub_8043908
	ldr r0, _08042FBC @ =0x0203CDBC
	movs r6, #0
	ldrsh r0, [r0, r6]
	cmp r0, #0
	beq _08042FC4
	ldr r0, _08042FC0 @ =0x0203CDB8
	movs r1, #0
	ldrsh r0, [r0, r1]
	b _08042FCA
	.align 2, 0
_08042FBC: .4byte 0x0203CDBC
_08042FC0: .4byte 0x0203CDB8
_08042FC4:
	ldr r0, _08043060 @ =0x0203CDB8
	movs r2, #2
	ldrsh r0, [r0, r2]
_08042FCA:
	movs r1, #0x64
	bl DivRem
	adds r6, r0, #0
	movs r1, #0xa
	bl Div
	adds r5, r0, #0
	lsls r0, r5, #2
	adds r0, r0, r5
	lsls r0, r0, #1
	subs r4, r6, r0
	cmp r5, #0
	bne _08042FE8
	movs r5, #0xa
_08042FE8:
	ldr r0, _08043064 @ =0x0201947C
	adds r1, r6, #0
	bl sub_805B458
	lsls r5, r5, #5
	mov r8, r5
	lsls r4, r4, #5
	mov sb, r4
	mov r5, sl
	ldr r4, _08043064 @ =0x0201947C
	ldr r7, _08043068 @ =0x08113884
	movs r6, #0xc
_08043000:
	ldrh r3, [r4]
	lsls r0, r3, #5
	adds r0, r0, r7
	adds r1, r5, #0
	movs r2, #8
	bl CpuFastSet
	adds r5, #0x20
	adds r4, #2
	subs r6, #1
	cmp r6, #0
	bge _08043000
	ldr r4, _0804306C @ =0x08113B84
	mov r6, r8
	adds r0, r6, r4
	movs r1, #0xd0
	lsls r1, r1, #1
	add r1, sl
	movs r2, #8
	bl CpuFastSet
	add r4, sb
	movs r1, #0xe0
	lsls r1, r1, #1
	add r1, sl
	adds r0, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r1, _08043070 @ =0x060020E0
	movs r2, #0xf0
	lsls r2, r2, #1
	mov r0, sl
	bl RegisterDataMove
	movs r0, #0
	ldr r1, [sp, #8]
	strh r0, [r1, #0x2c]
	ldr r0, _08043074 @ =sub_8043078
	str r0, [r1, #0xc]
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08043060: .4byte 0x0203CDB8
_08043064: .4byte 0x0201947C
_08043068: .4byte 0x08113884
_0804306C: .4byte 0x08113B84
_08043070: .4byte 0x060020E0
_08043074: .4byte sub_8043078

	thumb_func_start sub_8043078
sub_8043078: @ 0x08043078
	adds r2, r0, #0
	ldrh r1, [r2, #0x2c]
	adds r1, #1
	strh r1, [r2, #0x2c]
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xc
	ble _08043098
	movs r0, #0
	strh r0, [r2, #0x2c]
	ldr r0, _08043094 @ =sub_80430C4
	str r0, [r2, #0xc]
	b _080430BE
	.align 2, 0
_08043094: .4byte sub_80430C4
_08043098:
	ldr r3, _080430C0 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x2d
	movs r0, #0
	strb r0, [r2]
	movs r2, #0x6c
	rsbs r2, r2, #0
	adds r0, r2, #0
	subs r0, r0, r1
	adds r2, r3, #0
	adds r2, #0x31
	strb r0, [r2]
	subs r2, #5
	movs r0, #0xf0
	strb r0, [r2]
	subs r1, #0x6c
	adds r0, r3, #0
	adds r0, #0x30
	strb r1, [r0]
_080430BE:
	bx lr
	.align 2, 0
_080430C0: .4byte gDispIo

	thumb_func_start sub_80430C4
sub_80430C4: @ 0x080430C4
	push {r4, lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xa
	ble _0804311C
	ldr r2, _080430E8 @ =0x0203CDBC
	ldrh r3, [r2]
	movs r4, #0
	ldrsh r0, [r2, r4]
	cmp r0, #0
	beq _080430F0
	ldr r0, _080430EC @ =0x0203CDB8
	ldrh r0, [r0]
	b _080430FE
	.align 2, 0
_080430E8: .4byte 0x0203CDBC
_080430EC: .4byte 0x0203CDB8
_080430F0:
	ldrh r3, [r2, #2]
	movs r4, #2
	ldrsh r0, [r2, r4]
	cmp r0, #0
	beq _08043104
	ldr r0, _08043124 @ =0x0203CDB8
	ldrh r0, [r0, #2]
_080430FE:
	strh r0, [r1, #0x2c]
	adds r0, r0, r3
	strh r0, [r1, #0x2e]
_08043104:
	ldr r0, _08043128 @ =sub_804312C
	str r0, [r1, #0xc]
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x74
	bl sub_805BCA8
	movs r0, #0x74
	movs r1, #0x78
	movs r2, #0
	bl sub_805BDC0
_0804311C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08043124: .4byte 0x0203CDB8
_08043128: .4byte sub_804312C

	thumb_func_start sub_804312C
sub_804312C: @ 0x0804312C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r0, _080431F4 @ =0x0201947C
	mov r8, r0
	movs r1, #0x80
	lsls r1, r1, #1
	add r1, r8
	mov sl, r1
	movs r2, #0x2c
	ldrsh r0, [r7, r2]
	movs r1, #0x64
	bl DivRem
	adds r5, r0, #0
	movs r1, #0xa
	bl Div
	adds r4, r0, #0
	lsls r0, r4, #2
	adds r0, r0, r4
	lsls r0, r0, #1
	subs r6, r5, r0
	cmp r4, #0
	bne _08043168
	movs r4, #0xa
_08043168:
	mov r0, r8
	adds r1, r5, #0
	bl sub_805B458
	lsls r4, r4, #5
	mov sb, r4
	lsls r6, r6, #5
	str r6, [sp]
	mov r6, sl
	mov r5, r8
	ldr r0, _080431F8 @ =0x08113884
	mov r8, r0
	movs r4, #0xc
_08043182:
	ldrh r1, [r5]
	lsls r0, r1, #5
	add r0, r8
	adds r1, r6, #0
	movs r2, #8
	bl CpuFastSet
	adds r6, #0x20
	adds r5, #2
	subs r4, #1
	cmp r4, #0
	bge _08043182
	ldr r4, _080431FC @ =0x08113B84
	mov r2, sb
	adds r0, r2, r4
	movs r1, #0xd0
	lsls r1, r1, #1
	add r1, sl
	movs r2, #8
	bl CpuFastSet
	ldr r0, [sp]
	adds r4, r0, r4
	movs r1, #0xe0
	lsls r1, r1, #1
	add r1, sl
	adds r0, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r1, _08043200 @ =0x060020E0
	movs r2, #0xf0
	lsls r2, r2, #1
	mov r0, sl
	bl RegisterDataMove
	ldrh r0, [r7, #0x2c]
	adds r0, #1
	strh r0, [r7, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r7, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _080431E2
	movs r0, #0
	strh r0, [r7, #0x2c]
	ldr r0, _08043204 @ =sub_8043208
	str r0, [r7, #0xc]
_080431E2:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080431F4: .4byte 0x0201947C
_080431F8: .4byte 0x08113884
_080431FC: .4byte 0x08113B84
_08043200: .4byte 0x060020E0
_08043204: .4byte sub_8043208

	thumb_func_start sub_8043208
sub_8043208: @ 0x08043208
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _0804321A
	movs r0, #0x74
	bl sub_805BD54
_0804321A:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x1e
	ble _08043230
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r0, _08043238 @ =sub_804323C
	str r0, [r4, #0xc]
_08043230:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08043238: .4byte sub_804323C

	thumb_func_start sub_804323C
sub_804323C: @ 0x0804323C
	adds r1, r0, #0
	ldrh r2, [r1, #0x2c]
	adds r2, #1
	strh r2, [r1, #0x2c]
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xc
	ble _0804325C
	movs r0, #0
	strh r0, [r1, #0x2c]
	ldr r0, _08043258 @ =sub_8043288
	str r0, [r1, #0xc]
	b _08043282
	.align 2, 0
_08043258: .4byte sub_8043288
_0804325C:
	ldr r3, _08043284 @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	adds r0, r2, #0
	subs r0, #0x78
	adds r1, #4
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	movs r1, #0x60
	rsbs r1, r1, #0
	adds r0, r1, #0
	subs r0, r0, r2
	adds r1, r3, #0
	adds r1, #0x30
	strb r0, [r1]
_08043282:
	bx lr
	.align 2, 0
_08043284: .4byte gDispIo

	thumb_func_start sub_8043288
sub_8043288: @ 0x08043288
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x18
	bne _080432CC
	ldr r2, _080432B0 @ =0x0203CDBC
	movs r1, #0
	ldrsh r0, [r2, r1]
	cmp r0, #0
	beq _080432B8
	ldr r0, _080432B4 @ =0x0203CDB8
	movs r3, #0
	ldrsh r1, [r0, r3]
	movs r3, #0
	ldrsh r0, [r2, r3]
	b _080432C2
	.align 2, 0
_080432B0: .4byte 0x0203CDBC
_080432B4: .4byte 0x0203CDB8
_080432B8:
	ldr r0, _08043314 @ =0x0203CDB8
	movs r3, #2
	ldrsh r1, [r0, r3]
	movs r3, #2
	ldrsh r0, [r2, r3]
_080432C2:
	adds r1, r1, r0
	cmp r1, #0x63
	ble _080432CC
	bl sub_8043590
_080432CC:
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	cmp r0, #0x28
	ble _080433A4
	bl sub_80474D8
	movs r0, #0
	bl sub_8043908
	bl sub_805894C
	cmp r0, #0
	bne _0804331C
	ldr r3, _08043318 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	b _08043348
	.align 2, 0
_08043314: .4byte 0x0203CDB8
_08043318: .4byte gDispIo
_0804331C:
	ldr r3, _08043378 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x18]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x18]
	movs r0, #3
	ldrb r1, [r3, #0x14]
	orrs r0, r1
	strb r0, [r3, #0x14]
_08043348:
	adds r2, r3, #0
	adds r1, r2, #0
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	adds r1, #4
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	ldr r2, _0804337C @ =0x0203CDBC
	movs r3, #0
	ldrsh r0, [r2, r3]
	cmp r0, #0
	beq _08043384
	ldr r0, _08043380 @ =0x0203CDB8
	movs r3, #0
	ldrsh r1, [r0, r3]
	movs r3, #0
	ldrsh r0, [r2, r3]
	b _0804338E
	.align 2, 0
_08043378: .4byte gDispIo
_0804337C: .4byte 0x0203CDBC
_08043380: .4byte 0x0203CDB8
_08043384:
	ldr r0, _08043398 @ =0x0203CDB8
	movs r3, #2
	ldrsh r1, [r0, r3]
	movs r3, #2
	ldrsh r0, [r2, r3]
_0804338E:
	adds r1, r1, r0
	cmp r1, #0x63
	ble _080433A0
	ldr r0, _0804339C @ =sub_80433B0
	b _080433A2
	.align 2, 0
_08043398: .4byte 0x0203CDB8
_0804339C: .4byte sub_80433B0
_080433A0:
	ldr r0, _080433AC @ =sub_804340C
_080433A2:
	str r0, [r4, #0xc]
_080433A4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080433AC: .4byte sub_804340C

	thumb_func_start sub_80433B0
sub_80433B0: @ 0x080433B0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080433C4 @ =0x0203CDBC
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _080433CC
	ldr r0, _080433C8 @ =0x02000000
	ldr r0, [r0]
	b _080433D0
	.align 2, 0
_080433C4: .4byte 0x0203CDBC
_080433C8: .4byte 0x02000000
_080433CC:
	ldr r0, _080433E0 @ =0x02000000
	ldr r0, [r0, #8]
_080433D0:
	bl sub_805D5B0
	ldr r0, _080433E4 @ =sub_80433E8
	str r0, [r4, #0xc]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080433E0: .4byte 0x02000000
_080433E4: .4byte sub_80433E8

	thumb_func_start sub_80433E8
sub_80433E8: @ 0x080433E8
	push {r4, lr}
	adds r4, r0, #0
	bl sub_805D128
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08043400
	bl sub_805D140
	ldr r0, _08043408 @ =sub_804340C
	str r0, [r4, #0xc]
_08043400:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08043408: .4byte sub_804340C

	thumb_func_start sub_804340C
sub_804340C: @ 0x0804340C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_805F498
	ldr r0, _08043420 @ =sub_8043424
	str r0, [r4, #0xc]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08043420: .4byte sub_8043424

	thumb_func_start sub_8043424
sub_8043424: @ 0x08043424
	push {r4, lr}
	adds r4, r0, #0
	bl sub_805F148
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0804343C
	bl sub_805F15C
	ldr r0, _08043444 @ =sub_8043448
	str r0, [r4, #0xc]
_0804343C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08043444: .4byte sub_8043448

	thumb_func_start sub_8043448
sub_8043448: @ 0x08043448
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _08043478 @ =0x02000000
	ldr r0, [r4]
	bl sub_8046E9C
	ldr r0, [r4, #8]
	bl sub_8046E9C
	bl sub_804722C
	bl sub_8046B48
	ldr r0, _0804347C @ =0x0203CCF4
	movs r1, #0
	ldrsh r0, [r0, r1]
	str r0, [r5, #0x44]
	movs r0, #0
	str r0, [r5, #0x48]
	ldr r0, _08043480 @ =sub_8043484
	str r0, [r5, #0xc]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08043478: .4byte 0x02000000
_0804347C: .4byte 0x0203CCF4
_08043480: .4byte sub_8043484

	thumb_func_start sub_8043484
sub_8043484: @ 0x08043484
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	bl sub_80588E0
	adds r5, r0, #0
	ldr r0, [r4, #0x48]
	cmp r0, #2
	bne _080434A0
	ldr r0, _0804349C @ =sub_8043554
	str r0, [r4, #0xc]
	b _08043524
	.align 2, 0
_0804349C: .4byte sub_8043554
_080434A0:
	ldr r0, [r4, #0x44]
	cmp r0, #0
	bne _080434F0
	ldr r0, _080434E8 @ =0x02000000
	ldr r1, [r0]
	str r1, [r4, #0x5c]
	movs r6, #1
	adds r0, r5, #0
	ands r0, r6
	cmp r0, #0
	beq _080434C0
	adds r0, r1, #0
	bl sub_80588A4
	ldr r0, _080434EC @ =sub_8043534
	str r0, [r4, #0xc]
_080434C0:
	movs r0, #4
	ands r0, r5
	cmp r0, #0
	beq _080434D2
	ldr r0, [r4, #0x5c]
	bl sub_80588A4
	ldr r0, _080434EC @ =sub_8043534
	str r0, [r4, #0xc]
_080434D2:
	movs r0, #0x10
	ands r0, r5
	cmp r0, #0
	beq _080434E4
	ldr r0, [r4, #0x5c]
	bl sub_80588A4
	ldr r0, _080434EC @ =sub_8043534
	str r0, [r4, #0xc]
_080434E4:
	str r6, [r4, #0x44]
	b _0804351E
	.align 2, 0
_080434E8: .4byte 0x02000000
_080434EC: .4byte sub_8043534
_080434F0:
	ldr r0, _0804352C @ =0x02000000
	ldr r1, [r0, #8]
	str r1, [r4, #0x5c]
	movs r0, #2
	ands r0, r5
	cmp r0, #0
	beq _08043508
	adds r0, r1, #0
	bl sub_80588A4
	ldr r0, _08043530 @ =sub_8043534
	str r0, [r4, #0xc]
_08043508:
	movs r0, #8
	ands r0, r5
	cmp r0, #0
	beq _0804351A
	ldr r0, [r4, #0x5c]
	bl sub_80588A4
	ldr r0, _08043530 @ =sub_8043534
	str r0, [r4, #0xc]
_0804351A:
	movs r0, #0
	str r0, [r4, #0x44]
_0804351E:
	ldr r0, [r4, #0x48]
	adds r0, #1
	str r0, [r4, #0x48]
_08043524:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804352C: .4byte 0x02000000
_08043530: .4byte sub_8043534

	thumb_func_start sub_8043534
sub_8043534: @ 0x08043534
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_80588BC
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0804354A
	ldr r0, _08043550 @ =sub_8043484
	str r0, [r4, #0xc]
_0804354A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08043550: .4byte sub_8043484

	thumb_func_start sub_8043554
sub_8043554: @ 0x08043554
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08043580 @ =0x0201771C
	movs r0, #1
	str r0, [r1]
	ldr r0, _08043584 @ =0x0203CCF0
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _08043576
	movs r0, #2
	movs r1, #7
	movs r2, #0
	bl sub_8048E88
	bl sub_805C738
_08043576:
	ldr r0, _08043588 @ =nullsub_20
	str r0, [r4, #0xc]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08043580: .4byte 0x0201771C
_08043584: .4byte 0x0203CCF0
_08043588: .4byte nullsub_20

	thumb_func_start nullsub_20
nullsub_20: @ 0x0804358C
	bx lr
	.align 2, 0

	thumb_func_start sub_8043590
sub_8043590: @ 0x08043590
	push {lr}
	ldr r0, _080435A8 @ =0x085CB550
	movs r1, #3
	bl SpawnProc
	movs r1, #0
	strh r1, [r0, #0x2c]
	movs r0, #0x80
	bl SetBgmVolume
	pop {r0}
	bx r0
	.align 2, 0
_080435A8: .4byte 0x085CB550

	thumb_func_start sub_80435AC
sub_80435AC: @ 0x080435AC
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x10
	bne _080435D4
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x5b
	bl sub_805BCA8
	movs r0, #0x5b
	movs r1, #0x78
	movs r2, #0
	bl sub_805BDC0
	b _080435E6
_080435D4:
	cmp r0, #0x74
	bne _080435E6
	movs r0, #0x80
	lsls r0, r0, #1
	bl SetBgmVolume
	adds r0, r4, #0
	bl Proc_Break
_080435E6:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_80435EC
sub_80435EC: @ 0x080435EC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r7, r1, #0
	movs r6, #0
	adds r5, r7, #0
_080435F8:
	movs r0, #0xf
	ldrh r1, [r4]
	cmp r1, #0xff
	beq _08043602
	ldrh r0, [r4]
_08043602:
	lsls r0, r0, #5
	ldr r1, _08043634 @ =0x08113224
	adds r0, r0, r1
	adds r1, r5, #0
	movs r2, #8
	bl CpuFastSet
	adds r4, #2
	adds r5, #0x20
	adds r6, #1
	cmp r6, #0xa
	bls _080435F8
	movs r0, #0
	str r0, [sp]
	movs r0, #0xc0
	lsls r0, r0, #1
	adds r1, r7, r0
	ldr r2, _08043638 @ =0x01000008
	mov r0, sp
	bl CpuFastSet
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08043634: .4byte 0x08113224
_08043638: .4byte 0x01000008

	thumb_func_start sub_804363C
sub_804363C: @ 0x0804363C
	push {r4, r5, r6, lr}
	adds r5, r1, #0
	lsls r0, r0, #0x10
	asrs r6, r0, #0x10
	movs r0, #1
	rsbs r0, r0, #0
	cmp r6, r0
	bne _08043658
	movs r0, #0xb
	strh r0, [r5]
	movs r0, #0xa
	strh r0, [r5, #2]
	strh r0, [r5, #4]
	b _0804369E
_08043658:
	adds r0, r6, #0
	movs r1, #0x64
	bl Div
	strh r0, [r5]
	movs r0, #0x64
	ldrh r1, [r5]
	adds r4, r1, #0
	muls r4, r0, r4
	subs r4, r6, r4
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r0, r4, #0
	movs r1, #0xa
	bl Div
	strh r0, [r5, #2]
	lsls r0, r0, #2
	ldrh r2, [r5, #2]
	adds r0, r0, r2
	lsls r0, r0, #1
	subs r4, r4, r0
	strh r4, [r5, #4]
	adds r1, r2, #0
	ldrh r2, [r5]
	adds r0, r1, r2
	cmp r0, #0
	bne _08043694
	movs r0, #0xb
	strh r0, [r5, #2]
_08043694:
	ldrh r0, [r5]
	cmp r0, #0
	bne _0804369E
	movs r0, #0xb
	strh r0, [r5]
_0804369E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_80436A4
sub_80436A4: @ 0x080436A4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	ldr r4, _08043850 @ =0x02000060
	ldr r0, _08043854 @ =0x085CB568
	movs r1, #1
	bl SpawnProc
	str r0, [r4]
	movs r0, #0
	bl sub_8043908
	bl sub_80438C8
	bl sub_8043970
	bl sub_8043950
	ldr r1, _08043858 @ =0x02000030
	movs r2, #0
	ldrsh r0, [r1, r2]
	movs r2, #2
	ldrsh r1, [r1, r2]
	bl sub_8043918
	ldr r6, _0804385C @ =0x0203CD08
	movs r1, #0
	ldrsh r0, [r6, r1]
	lsls r0, r0, #5
	ldr r4, _08043860 @ =0x08113424
	adds r0, r0, r4
	ldr r5, _08043864 @ =0x02021A68
	adds r1, r5, #0
	movs r2, #0x10
	bl CpuSet
	movs r2, #2
	ldrsh r0, [r6, r2]
	lsls r0, r0, #5
	adds r0, r0, r4
	adds r1, r5, #0
	adds r1, #0x20
	movs r2, #0x10
	bl CpuSet
	ldr r1, _08043868 @ =0x0203CDA8
	ldr r2, _0804386C @ =0x0000FFFF
	adds r0, r2, #0
	ldrh r2, [r1]
	orrs r2, r0
	strh r2, [r1]
	ldrh r2, [r1, #2]
	orrs r0, r2
	strh r0, [r1, #2]
	ldr r0, _08043870 @ =0x08112D54
	ldr r1, _08043874 @ =0x06013800
	bl LZ77UnCompVram
	ldr r0, _08043878 @ =0x08112DF4
	ldr r1, _0804387C @ =0x06013C00
	bl LZ77UnCompVram
	movs r1, #0
	ldrsh r0, [r6, r1]
	lsls r0, r0, #5
	ldr r4, _08043880 @ =0x081131A4
	adds r0, r0, r4
	adds r1, r5, #0
	subs r1, #0xc0
	movs r2, #8
	bl CpuFastSet
	movs r2, #2
	ldrsh r0, [r6, r2]
	lsls r0, r0, #5
	adds r0, r0, r4
	subs r5, #0xa0
	adds r1, r5, #0
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	ldr r6, _08043884 @ =0x0203CDAC
	movs r1, #0
	ldrsh r0, [r6, r1]
	ldr r7, _08043888 @ =0x020176F8
	adds r1, r7, #0
	bl sub_804363C
	ldr r5, _0804388C @ =0x0203CDB0
	movs r2, #0
	ldrsh r0, [r5, r2]
	adds r1, r7, #6
	bl sub_804363C
	ldr r4, _08043890 @ =0x0203CDB4
	movs r1, #0
	ldrsh r0, [r4, r1]
	adds r1, r7, #0
	adds r1, #0xc
	bl sub_804363C
	movs r2, #2
	ldrsh r0, [r6, r2]
	adds r1, r7, #0
	adds r1, #0x12
	bl sub_804363C
	movs r1, #2
	ldrsh r0, [r5, r1]
	adds r1, r7, #0
	adds r1, #0x18
	bl sub_804363C
	movs r2, #2
	ldrsh r0, [r4, r2]
	adds r1, r7, #0
	adds r1, #0x1e
	bl sub_804363C
	movs r0, #0
	str r0, [sp]
	ldr r1, _08043894 @ =0x020169C0
	ldr r2, _08043898 @ =0x01000100
	mov r0, sp
	bl CpuFastSet
	movs r6, #0
	mov sb, r7
_080437AC:
	movs r5, #0
	lsls r3, r6, #1
	adds r0, r6, #1
	mov r8, r0
	lsls r4, r6, #7
_080437B6:
	adds r0, r3, r6
	adds r0, r0, r5
	lsls r0, r0, #1
	add r0, sb
	ldrh r0, [r0]
	lsls r0, r0, #5
	ldr r1, _0804389C @ =0x08113024
	adds r0, r0, r1
	ldr r7, _08043894 @ =0x020169C0
	adds r1, r4, r7
	movs r2, #0x10
	str r3, [sp, #4]
	bl CpuSet
	adds r4, #0x20
	adds r5, #1
	ldr r3, [sp, #4]
	cmp r5, #2
	bls _080437B6
	mov r6, r8
	cmp r6, #5
	bls _080437AC
	ldr r1, _080438A0 @ =0x06013A00
	movs r4, #0xc0
	lsls r4, r4, #1
	adds r0, r7, #0
	adds r2, r4, #0
	bl RegisterDataMove
	adds r0, r7, r4
	ldr r1, _080438A4 @ =0x06013E00
	adds r2, r4, #0
	bl RegisterDataMove
	bl InitIcons
	movs r0, #0
	movs r1, #0x1d
	bl ApplyIconPalette
	movs r0, #0
	movs r1, #0x1e
	bl ApplyIconPalette
	ldr r0, _080438A8 @ =0x0203CD7C
	ldr r0, [r0]
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemIcon
	movs r1, #0xee
	lsls r1, r1, #1
	bl PutIconObjImg
	ldr r0, _080438AC @ =0x0203CD80
	ldr r0, [r0]
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemIcon
	movs r1, #0xef
	lsls r1, r1, #1
	bl PutIconObjImg
	ldr r0, _080438B0 @ =Pal_SystemObjects
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08043850: .4byte 0x02000060
_08043854: .4byte 0x085CB568
_08043858: .4byte 0x02000030
_0804385C: .4byte 0x0203CD08
_08043860: .4byte 0x08113424
_08043864: .4byte 0x02021A68
_08043868: .4byte 0x0203CDA8
_0804386C: .4byte 0x0000FFFF
_08043870: .4byte 0x08112D54
_08043874: .4byte 0x06013800
_08043878: .4byte 0x08112DF4
_0804387C: .4byte 0x06013C00
_08043880: .4byte 0x081131A4
_08043884: .4byte 0x0203CDAC
_08043888: .4byte 0x020176F8
_0804388C: .4byte 0x0203CDB0
_08043890: .4byte 0x0203CDB4
_08043894: .4byte 0x020169C0
_08043898: .4byte 0x01000100
_0804389C: .4byte 0x08113024
_080438A0: .4byte 0x06013A00
_080438A4: .4byte 0x06013E00
_080438A8: .4byte 0x0203CD7C
_080438AC: .4byte 0x0203CD80
_080438B0: .4byte Pal_SystemObjects

	thumb_func_start sub_80438B4
sub_80438B4: @ 0x080438B4
	push {lr}
	ldr r0, _080438C4 @ =0x02000060
	ldr r0, [r0]
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_080438C4: .4byte 0x02000060

	thumb_func_start sub_80438C8
sub_80438C8: @ 0x080438C8
	ldr r0, _080438D4 @ =0x02000060
	ldr r1, [r0]
	movs r0, #0
	str r0, [r1, #0x4c]
	str r0, [r1, #0x50]
	bx lr
	.align 2, 0
_080438D4: .4byte 0x02000060

	thumb_func_start sub_80438D8
sub_80438D8: @ 0x080438D8
	ldr r0, _080438E4 @ =0x02000060
	ldr r1, [r0]
	movs r0, #1
	str r0, [r1, #0x4c]
	str r0, [r1, #0x50]
	bx lr
	.align 2, 0
_080438E4: .4byte 0x02000060

	thumb_func_start sub_80438E8
sub_80438E8: @ 0x080438E8
	ldr r0, _080438F4 @ =0x02000060
	ldr r1, [r0]
	movs r0, #1
	str r0, [r1, #0x4c]
	bx lr
	.align 2, 0
_080438F4: .4byte 0x02000060

	thumb_func_start sub_80438F8
sub_80438F8: @ 0x080438F8
	ldr r0, _08043904 @ =0x02000060
	ldr r1, [r0]
	movs r0, #1
	str r0, [r1, #0x50]
	bx lr
	.align 2, 0
_08043904: .4byte 0x02000060

	thumb_func_start sub_8043908
sub_8043908: @ 0x08043908
	lsls r0, r0, #0x10
	ldr r1, _08043914 @ =0x02000060
	ldr r1, [r1]
	lsrs r0, r0, #6
	str r0, [r1, #0x44]
	bx lr
	.align 2, 0
_08043914: .4byte 0x02000060

	thumb_func_start sub_8043918
sub_8043918: @ 0x08043918
	ldr r2, _08043928 @ =0x02000060
	ldr r2, [r2]
	movs r3, #0
	strh r0, [r2, #0x32]
	strh r1, [r2, #0x3a]
	adds r2, #0x29
	strb r3, [r2]
	bx lr
	.align 2, 0
_08043928: .4byte 0x02000060

	thumb_func_start sub_804392C
sub_804392C: @ 0x0804392C
	ldr r2, _0804393C @ =0x02000060
	ldr r2, [r2]
	strh r0, [r2, #0x32]
	strh r1, [r2, #0x3a]
	adds r2, #0x29
	movs r0, #1
	strb r0, [r2]
	bx lr
	.align 2, 0
_0804393C: .4byte 0x02000060

	thumb_func_start sub_8043940
sub_8043940: @ 0x08043940
	ldr r0, _0804394C @ =0x02000060
	ldr r0, [r0]
	adds r0, #0x29
	movs r1, #1
	strb r1, [r0]
	bx lr
	.align 2, 0
_0804394C: .4byte 0x02000060

	thumb_func_start sub_8043950
sub_8043950: @ 0x08043950
	ldr r0, _0804395C @ =0x02000060
	ldr r0, [r0]
	adds r0, #0x29
	movs r1, #0
	strb r1, [r0]
	bx lr
	.align 2, 0
_0804395C: .4byte 0x02000060

	thumb_func_start sub_8043960
sub_8043960: @ 0x08043960
	ldr r0, _0804396C @ =0x02000060
	ldr r0, [r0]
	adds r0, #0x2a
	movs r1, #1
	strb r1, [r0]
	bx lr
	.align 2, 0
_0804396C: .4byte 0x02000060

	thumb_func_start sub_8043970
sub_8043970: @ 0x08043970
	ldr r0, _0804397C @ =0x02000060
	ldr r0, [r0]
	adds r0, #0x2a
	movs r1, #0
	strb r1, [r0]
	bx lr
	.align 2, 0
_0804397C: .4byte 0x02000060

	thumb_func_start sub_8043980
sub_8043980: @ 0x08043980
	adds r3, r0, #0
	cmp r1, #0
	ble _080439A8
	cmp r2, #1
	beq _08043998
	cmp r2, #1
	bhs _080439A0
	ldr r0, _08043994 @ =0x085CB688
	b _080439C2
	.align 2, 0
_08043994: .4byte 0x085CB688
_08043998:
	ldr r0, _0804399C @ =0x085CB6A0
	b _080439C2
	.align 2, 0
_0804399C: .4byte 0x085CB6A0
_080439A0:
	ldr r0, _080439A4 @ =0x085CB6B8
	b _080439C2
	.align 2, 0
_080439A4: .4byte 0x085CB6B8
_080439A8:
	cmp r2, #1
	beq _080439B8
	cmp r2, #1
	bhs _080439C0
	ldr r0, _080439B4 @ =0x085CB6D0
	b _080439C2
	.align 2, 0
_080439B4: .4byte 0x085CB6D0
_080439B8:
	ldr r0, _080439BC @ =0x085CB6E8
	b _080439C2
	.align 2, 0
_080439BC: .4byte 0x085CB6E8
_080439C0:
	ldr r0, _080439C8 @ =0x085CB700
_080439C2:
	str r0, [r3, #0x3c]
	bx lr
	.align 2, 0
_080439C8: .4byte 0x085CB700

	thumb_func_start sub_80439CC
sub_80439CC: @ 0x080439CC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x118
	mov sl, r0
	movs r0, #0
	str r0, [sp, #0xd8]
	bl GetGameTime
	lsrs r0, r0, #3
	movs r1, #3
	bl DivRem
	str r0, [sp, #0xe8]
	mov r0, sl
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #1
	bne _080439F8
	b _08044152
_080439F8:
	mov r0, sl
	adds r0, #0x29
	ldrb r1, [r0]
	str r0, [sp, #0x104]
	cmp r1, #0
	bne _08043AE6
	mov r1, sl
	ldrh r1, [r1, #0x3a]
	lsls r0, r1, #0x10
	asrs r4, r0, #0x13
	lsls r0, r4, #5
	movs r2, #0xd0
	lsls r2, r2, #1
	adds r7, r0, r2
	cmp r7, #0
	bge _08043A1A
	movs r7, #0
_08043A1A:
	adds r6, r4, #7
	cmp r6, #7
	ble _08043A22
	movs r6, #7
_08043A22:
	movs r0, #7
	subs r0, r0, r6
	lsls r1, r0, #4
	subs r1, r1, r0
	lsls r1, r1, #1
	mov sb, r1
	ldr r0, _08043A44 @ =0x0203CD14
	movs r3, #0
	ldrsh r0, [r0, r3]
	cmp r0, #0
	blt _08043A48
	cmp r0, #2
	bgt _08043A48
	movs r4, #0
	movs r0, #0xf
	str r0, [sp, #0xdc]
	b _08043A4E
	.align 2, 0
_08043A44: .4byte 0x0203CD14
_08043A48:
	movs r1, #8
	str r1, [sp, #0xdc]
	movs r4, #8
_08043A4E:
	ldr r2, _08043B34 @ =0x02021E48
	mov r8, r2
	movs r0, #0x9f
	str r0, [sp]
	mov r0, r8
	movs r1, #0x1e
	movs r2, #8
	movs r3, #0
	bl sub_805B094
	mov r3, sl
	ldr r0, [r3, #0x4c]
	cmp r0, #0
	bne _08043AA0
	ldr r0, _08043B38 @ =0x08112AD0
	add r0, sb
	lsls r5, r7, #1
	lsls r1, r4, #1
	ldr r2, _08043B3C @ =0xFFFFFCC0
	add r2, r8
	adds r1, r1, r2
	adds r5, r5, r1
	lsls r4, r6, #0x10
	lsrs r4, r4, #0x10
	movs r1, #1
	rsbs r1, r1, #0
	str r1, [sp]
	str r1, [sp, #4]
	adds r1, r5, #0
	movs r2, #0xf
	adds r3, r4, #0
	bl sub_805B1AC
	movs r0, #0x80
	str r0, [sp]
	adds r0, r5, #0
	movs r1, #0xf
	adds r2, r4, #0
	movs r3, #2
	bl sub_805B01C
_08043AA0:
	mov r4, sl
	ldr r0, [r4, #0x50]
	cmp r0, #0
	bne _08043AE0
	ldr r0, _08043B40 @ =0x08112BA4
	add r0, sb
	lsls r5, r7, #1
	ldr r2, [sp, #0xdc]
	lsls r1, r2, #1
	ldr r2, _08043B3C @ =0xFFFFFCC0
	add r2, r8
	adds r1, r1, r2
	adds r5, r5, r1
	lsls r4, r6, #0x10
	lsrs r4, r4, #0x10
	movs r1, #1
	rsbs r1, r1, #0
	str r1, [sp]
	str r1, [sp, #4]
	adds r1, r5, #0
	movs r2, #0x10
	adds r3, r4, #0
	bl sub_805B1AC
	movs r0, #0x80
	str r0, [sp]
	adds r0, r5, #0
	movs r1, #0x10
	adds r2, r4, #0
	movs r3, #3
	bl sub_805B01C
_08043AE0:
	movs r0, #1
	bl EnableBgSync
_08043AE6:
	ldr r1, _08043B44 @ =0x0203CDA8
	ldr r0, _08043B48 @ =0x0203CDA0
	ldrh r2, [r0]
	adds r5, r0, #0
	ldrh r3, [r1]
	ldrh r4, [r5]
	cmp r3, r4
	beq _08043AFA
	movs r0, #1
	str r0, [sp, #0xd8]
_08043AFA:
	ldrh r0, [r5, #2]
	ldrh r3, [r1, #2]
	cmp r3, r0
	beq _08043B06
	movs r4, #1
	str r4, [sp, #0xd8]
_08043B06:
	strh r2, [r1]
	strh r0, [r1, #2]
	ldrh r7, [r5]
	ldr r0, _08043B4C @ =0x0203CDA4
	ldrh r6, [r0]
	ldrh r1, [r5, #2]
	mov r8, r1
	ldrh r0, [r0, #2]
	str r0, [sp, #0xd4]
	ldr r0, _08043B50 @ =0x0203CD14
	movs r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #3
	beq _08043B54
	cmp r0, #3
	bgt _08043B74
	cmp r0, #0
	blt _08043B74
	mov r3, sl
	movs r4, #0x32
	ldrsh r3, [r3, r4]
	str r3, [sp, #0xe0]
	b _08043B7E
	.align 2, 0
_08043B34: .4byte 0x02021E48
_08043B38: .4byte 0x08112AD0
_08043B3C: .4byte 0xFFFFFCC0
_08043B40: .4byte 0x08112BA4
_08043B44: .4byte 0x0203CDA8
_08043B48: .4byte 0x0203CDA0
_08043B4C: .4byte 0x0203CDA4
_08043B50: .4byte 0x0203CD14
_08043B54:
	ldr r0, _08043B68 @ =0x0203CCF8
	ldrh r0, [r0]
	cmp r0, #1
	bne _08043B6C
	mov r1, sl
	movs r2, #0x32
	ldrsh r0, [r1, r2]
	adds r0, #0x38
	b _08043B7C
	.align 2, 0
_08043B68: .4byte 0x0203CCF8
_08043B6C:
	mov r3, sl
	movs r4, #0x32
	ldrsh r0, [r3, r4]
	b _08043B7A
_08043B74:
	mov r1, sl
	movs r2, #0x32
	ldrsh r0, [r1, r2]
_08043B7A:
	subs r0, #0x38
_08043B7C:
	str r0, [sp, #0xe0]
_08043B7E:
	ldr r3, [sp, #0x104]
	ldrb r0, [r3]
	cmp r0, #0
	bne _08043B98
	ldr r4, _08043B94 @ =0x0000FFF8
	mov r0, sl
	ldrh r1, [r0, #0x3a]
	ands r1, r4
	str r1, [sp, #0xe4]
	b _08043BA0
	.align 2, 0
_08043B94: .4byte 0x0000FFF8
_08043B98:
	mov r2, sl
	movs r3, #0x3a
	ldrsh r2, [r2, r3]
	str r2, [sp, #0xe4]
_08043BA0:
	adds r4, r5, #0
	movs r1, #0
	ldrsh r0, [r4, r1]
	movs r1, #0xa
	bl Div
	add r2, sp, #0x68
	strh r0, [r2]
	lsls r1, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #1
	ldrh r4, [r4]
	subs r1, r4, r1
	strh r1, [r2, #2]
	lsls r0, r0, #0x10
	mov sb, r2
	cmp r0, #0
	bne _08043BC8
	movs r0, #0xb
	strh r0, [r2]
_08043BC8:
	movs r2, #2
	ldrsh r0, [r5, r2]
	movs r1, #0xa
	bl Div
	mov r3, sb
	strh r0, [r3, #4]
	adds r4, r0, #0
	lsls r1, r4, #2
	adds r2, r0, #0
	adds r1, r1, r2
	lsls r1, r1, #1
	ldrh r5, [r5, #2]
	subs r1, r5, r1
	strh r1, [r3, #6]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08043BF0
	movs r0, #0xb
	strh r0, [r3, #4]
_08043BF0:
	ldr r3, [sp, #0xe0]
	adds r3, #9
	str r3, [sp, #0xf0]
	ldr r4, [sp, #0xe4]
	adds r4, #0x91
	str r4, [sp, #0x110]
	ldr r0, [sp, #0xe0]
	adds r0, #0x81
	str r0, [sp, #0x10c]
	lsls r1, r7, #0x10
	str r1, [sp, #0xf4]
	lsls r6, r6, #0x10
	str r6, [sp, #0xf8]
	ldr r2, [sp, #0xe0]
	adds r2, #0x1d
	str r2, [sp, #0x108]
	mov r3, r8
	lsls r3, r3, #0x10
	str r3, [sp, #0xfc]
	ldr r4, [sp, #0xd4]
	lsls r4, r4, #0x10
	str r4, [sp, #0x100]
	ldr r0, [sp, #0xe0]
	adds r0, #0x95
	str r0, [sp, #0x114]
	ldr r1, [sp, #0xd8]
	cmp r1, #1
	bne _08043C7E
	add r0, sp, #0xd0
	movs r1, #0
	str r1, [r0]
	ldr r1, _08043CB8 @ =0x02016DC0
	ldr r2, _08043CBC @ =0x01000020
	bl CpuFastSet
	movs r0, #0
_08043C38:
	adds r2, r0, #1
	mov r8, r2
	lsls r5, r0, #6
	lsls r0, r0, #2
	mov r3, sb
	adds r4, r0, r3
	movs r6, #1
_08043C46:
	ldrh r1, [r4]
	lsls r0, r1, #5
	ldr r1, _08043CC0 @ =0x08113024
	adds r0, r0, r1
	ldr r7, _08043CB8 @ =0x02016DC0
	adds r1, r5, r7
	movs r2, #0x10
	bl CpuSet
	adds r5, #0x20
	adds r4, #2
	subs r6, #1
	cmp r6, #0
	bge _08043C46
	mov r0, r8
	cmp r0, #1
	ble _08043C38
	ldr r1, _08043CC4 @ =0x060139C0
	adds r0, r7, #0
	movs r2, #0x40
	bl RegisterDataMove
	adds r0, r7, #0
	adds r0, #0x40
	ldr r1, _08043CC8 @ =0x06013DC0
	movs r2, #0x40
	bl RegisterDataMove
_08043C7E:
	add r0, sp, #8
	movs r4, #0
	ldr r1, _08043CCC @ =0x000051CE
	strh r1, [r0, #8]
	adds r2, r0, #0
	mov r3, sl
	ldr r0, [r3, #0x44]
	orrs r0, r1
	strh r0, [r2, #8]
	adds r0, r2, #0
	add r1, sp, #0xf0
	ldrh r1, [r1]
	strh r1, [r0, #2]
	add r2, sp, #0x110
	ldrh r2, [r2]
	strh r2, [r0, #4]
	strh r4, [r0, #0xc]
	movs r0, #0
	bl sub_80449E4
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #1
	beq _08043CD4
	ldr r0, _08043CD0 @ =0x085CB5B0
	str r0, [sp, #0x44]
	str r4, [sp, #0x24]
	b _08043CFE
	.align 2, 0
_08043CB8: .4byte 0x02016DC0
_08043CBC: .4byte 0x01000020
_08043CC0: .4byte 0x08113024
_08043CC4: .4byte 0x060139C0
_08043CC8: .4byte 0x06013DC0
_08043CCC: .4byte 0x000051CE
_08043CD0: .4byte 0x085CB5B0
_08043CD4:
	add r1, sp, #0x70
	str r1, [sp, #0x44]
	movs r0, #0x80
	lsls r0, r0, #2
	str r0, [sp, #0x24]
	add r2, sp, #8
	adds r0, r2, #0
	ldrh r0, [r0, #2]
	subs r0, #8
	strh r0, [r2, #2]
	adds r0, r2, #0
	ldrh r0, [r0, #4]
	subs r0, #8
	strh r0, [r2, #4]
	ldr r0, _08043D48 @ =0x085CB5B0
	movs r2, #0x80
	lsls r2, r2, #1
	str r3, [sp]
	movs r3, #0x80
	bl sub_805BB24
_08043CFE:
	mov r3, sl
	ldr r0, [r3, #0x4c]
	cmp r0, #0
	bne _08043D0C
	add r0, sp, #8
	bl BasPutOam
_08043D0C:
	movs r4, #0
	str r4, [sp, #0x24]
	add r0, sp, #8
	ldr r1, _08043D4C @ =0x000061EE
	strh r1, [r0, #8]
	adds r2, r0, #0
	mov r3, sl
	ldr r0, [r3, #0x44]
	orrs r0, r1
	strh r0, [r2, #8]
	adds r0, r2, #0
	add r1, sp, #0x10c
	ldrh r1, [r1]
	strh r1, [r0, #2]
	add r2, sp, #0x110
	ldrh r2, [r2]
	strh r2, [r0, #4]
	strh r4, [r0, #0xc]
	movs r0, #1
	bl sub_80449E4
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #1
	beq _08043D50
	ldr r0, _08043D48 @ =0x085CB5B0
	str r0, [sp, #0x44]
	str r4, [sp, #0x24]
	b _08043D7A
	.align 2, 0
_08043D48: .4byte 0x085CB5B0
_08043D4C: .4byte 0x000061EE
_08043D50:
	add r1, sp, #0x70
	str r1, [sp, #0x44]
	movs r0, #0x80
	lsls r0, r0, #2
	str r0, [sp, #0x24]
	add r2, sp, #8
	adds r0, r2, #0
	ldrh r0, [r0, #2]
	subs r0, #8
	strh r0, [r2, #2]
	adds r0, r2, #0
	ldrh r0, [r0, #4]
	subs r0, #8
	strh r0, [r2, #4]
	ldr r0, _08043E5C @ =0x085CB5B0
	movs r2, #0x80
	lsls r2, r2, #1
	str r3, [sp]
	movs r3, #0x80
	bl sub_805BB24
_08043D7A:
	mov r3, sl
	ldr r0, [r3, #0x50]
	cmp r0, #0
	bne _08043D88
	add r0, sp, #8
	bl BasPutOam
_08043D88:
	ldr r4, [sp, #0xf4]
	ldr r0, _08043E60 @ =0xFFD80000
	adds r1, r4, r0
	ldr r2, [sp, #0xf8]
	adds r0, r2, r0
	lsrs r5, r0, #0x10
	lsrs r6, r4, #0x10
	lsrs r7, r2, #0x10
	lsrs r3, r1, #0x10
	mov r8, r3
	cmp r1, #0
	bge _08043DA4
	movs r4, #0
	mov r8, r4
_08043DA4:
	lsls r0, r5, #0x10
	cmp r0, #0
	bge _08043DAC
	movs r5, #0
_08043DAC:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x28
	ble _08043DB6
	movs r6, #0x28
_08043DB6:
	lsls r0, r7, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x28
	ble _08043DC0
	movs r7, #0x28
_08043DC0:
	add r0, sp, #8
	movs r3, #0
	movs r1, #0xb0
	lsls r1, r1, #8
	strh r1, [r0, #8]
	adds r2, r0, #0
	mov r4, sl
	ldr r0, [r4, #0x44]
	orrs r0, r1
	strh r0, [r2, #8]
	str r3, [sp, #0x24]
	adds r0, r2, #0
	add r1, sp, #0x108
	ldrh r1, [r1]
	strh r1, [r0, #2]
	ldr r0, _08043E64 @ =0x085CB580
	str r0, [sp, #0x44]
	ldr r2, [r4, #0x4c]
	mov sb, r2
	cmp r2, #0
	bne _08043E94
	lsls r0, r5, #0x10
	asrs r2, r0, #0x10
	add r4, sp, #0x50
	cmp r2, #0
	beq _08043E30
	mov r3, r8
	lsls r1, r3, #0x10
	asrs r1, r1, #0x10
	adds r0, r4, #0
	bl sub_805B380
	ldr r0, [sp, #0xd8]
	cmp r0, #1
	bne _08043E0E
	ldr r1, _08043E68 @ =0x02016E40
	adds r0, r4, #0
	bl sub_80435EC
_08043E0E:
	add r1, sp, #8
	ldr r0, [sp, #0xe4]
	adds r0, #0x8e
	strh r0, [r1, #4]
	adds r2, r1, #0
	movs r0, #0xfc
	lsls r0, r0, #8
	ldrh r1, [r1, #8]
	ands r0, r1
	strh r0, [r2, #8]
	adds r1, r2, #0
	strh r0, [r1, #8]
	adds r0, r1, #0
	mov r1, sb
	strh r1, [r0, #0xc]
	bl BasPutOam
_08043E30:
	lsls r1, r6, #0x10
	asrs r1, r1, #0x10
	lsls r2, r7, #0x10
	asrs r2, r2, #0x10
	adds r0, r4, #0
	bl sub_805B380
	ldr r2, [sp, #0xd8]
	cmp r2, #1
	bne _08043E4C
	ldr r1, _08043E6C @ =0x02017240
	adds r0, r4, #0
	bl sub_80435EC
_08043E4C:
	cmp r5, #0
	beq _08043E70
	add r1, sp, #8
	ldr r0, [sp, #0xe4]
	adds r0, #0x95
	strh r0, [r1, #4]
	b _08043E78
	.align 2, 0
_08043E5C: .4byte 0x085CB5B0
_08043E60: .4byte 0xFFD80000
_08043E64: .4byte 0x085CB580
_08043E68: .4byte 0x02016E40
_08043E6C: .4byte 0x02017240
_08043E70:
	add r0, sp, #8
	add r3, sp, #0x110
	ldrh r3, [r3]
	strh r3, [r0, #4]
_08043E78:
	add r2, sp, #8
	adds r1, r2, #0
	movs r0, #0xfc
	lsls r0, r0, #8
	ldrh r1, [r1, #8]
	ands r0, r1
	movs r3, #0
	movs r1, #0x20
	orrs r0, r1
	strh r0, [r2, #8]
	adds r0, r2, #0
	strh r3, [r0, #0xc]
	bl BasPutOam
_08043E94:
	ldr r4, [sp, #0xfc]
	ldr r0, _08043F74 @ =0xFFD80000
	adds r1, r4, r0
	ldr r2, [sp, #0x100]
	adds r0, r2, r0
	lsrs r5, r0, #0x10
	lsrs r6, r4, #0x10
	lsrs r7, r2, #0x10
	lsrs r3, r1, #0x10
	mov r8, r3
	cmp r1, #0
	bge _08043EB0
	movs r4, #0
	mov r8, r4
_08043EB0:
	lsls r0, r5, #0x10
	cmp r0, #0
	bge _08043EB8
	movs r5, #0
_08043EB8:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x28
	ble _08043EC2
	movs r6, #0x28
_08043EC2:
	lsls r0, r7, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x28
	ble _08043ECC
	movs r7, #0x28
_08043ECC:
	add r0, sp, #8
	movs r1, #0
	mov sb, r1
	movs r1, #0xc0
	lsls r1, r1, #8
	strh r1, [r0, #8]
	adds r2, r0, #0
	mov r3, sl
	ldr r0, [r3, #0x44]
	movs r4, #0
	add r3, sp, #0xec
	strh r4, [r3]
	orrs r0, r1
	strh r0, [r2, #8]
	mov r4, sb
	str r4, [sp, #0x24]
	adds r0, r2, #0
	add r1, sp, #0x114
	ldrh r1, [r1]
	strh r1, [r0, #2]
	ldr r0, _08043F78 @ =0x085CB580
	str r0, [sp, #0x44]
	mov r2, sl
	ldr r2, [r2, #0x50]
	mov sb, r2
	cmp r2, #0
	bne _08043FA8
	lsls r0, r5, #0x10
	asrs r2, r0, #0x10
	adds r5, r0, #0
	add r4, sp, #0x50
	cmp r2, #0
	beq _08043F4A
	mov r3, r8
	lsls r1, r3, #0x10
	asrs r1, r1, #0x10
	adds r0, r4, #0
	bl sub_805B380
	ldr r0, [sp, #0xd8]
	cmp r0, #1
	bne _08043F28
	ldr r1, _08043F7C @ =0x02017040
	adds r0, r4, #0
	bl sub_80435EC
_08043F28:
	add r1, sp, #8
	ldr r0, [sp, #0xe4]
	adds r0, #0x8e
	strh r0, [r1, #4]
	adds r2, r1, #0
	movs r0, #0xfc
	lsls r0, r0, #8
	ldrh r1, [r1, #8]
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strh r0, [r2, #8]
	adds r0, r2, #0
	mov r1, sb
	strh r1, [r0, #0xc]
	bl BasPutOam
_08043F4A:
	lsls r1, r6, #0x10
	asrs r1, r1, #0x10
	lsls r2, r7, #0x10
	asrs r2, r2, #0x10
	adds r0, r4, #0
	bl sub_805B380
	ldr r2, [sp, #0xd8]
	cmp r2, #1
	bne _08043F66
	ldr r1, _08043F80 @ =0x02017440
	adds r0, r4, #0
	bl sub_80435EC
_08043F66:
	cmp r5, #0
	beq _08043F84
	add r1, sp, #8
	ldr r0, [sp, #0xe4]
	adds r0, #0x95
	strh r0, [r1, #4]
	b _08043F8C
	.align 2, 0
_08043F74: .4byte 0xFFD80000
_08043F78: .4byte 0x085CB580
_08043F7C: .4byte 0x02017040
_08043F80: .4byte 0x02017440
_08043F84:
	add r0, sp, #8
	add r3, sp, #0x110
	ldrh r3, [r3]
	strh r3, [r0, #4]
_08043F8C:
	add r2, sp, #8
	adds r1, r2, #0
	movs r0, #0xfc
	lsls r0, r0, #8
	ldrh r1, [r1, #8]
	ands r0, r1
	movs r3, #0
	movs r1, #0x30
	orrs r0, r1
	strh r0, [r2, #8]
	adds r0, r2, #0
	strh r3, [r0, #0xc]
	bl BasPutOam
_08043FA8:
	ldr r4, [sp, #0xd8]
	cmp r4, #1
	bne _08043FBA
	ldr r0, _08044164 @ =0x02016E40
	ldr r1, _08044168 @ =0x06013000
	movs r2, #0x80
	lsls r2, r2, #4
	bl RegisterDataMove
_08043FBA:
	mov r0, sl
	ldr r4, [r0, #0x4c]
	cmp r4, #0
	bne _0804401A
	str r4, [sp, #0x24]
	ldr r0, _0804416C @ =0x085CB5C8
	str r0, [sp, #0x44]
	add r0, sp, #8
	ldr r1, _08044170 @ =0x000051D0
	strh r1, [r0, #8]
	adds r2, r0, #0
	mov r3, sl
	ldr r0, [r3, #0x44]
	orrs r0, r1
	strh r0, [r2, #8]
	adds r1, r2, #0
	ldr r0, [sp, #0xe0]
	adds r0, #0xf
	strh r0, [r1, #2]
	ldr r0, [sp, #0xe4]
	adds r0, #0x70
	strh r0, [r1, #4]
	adds r0, r1, #0
	strh r4, [r0, #0xc]
	bl BasPutOam
	str r4, [sp, #0x24]
	ldr r0, _08044174 @ =0x085CB5F8
	str r0, [sp, #0x44]
	add r0, sp, #8
	ldr r1, _08044178 @ =0x000051C0
	strh r1, [r0, #8]
	adds r2, r0, #0
	mov r3, sl
	ldr r0, [r3, #0x44]
	orrs r0, r1
	strh r0, [r2, #8]
	adds r1, r2, #0
	ldr r0, [sp, #0xe0]
	adds r0, #0x65
	strh r0, [r1, #2]
	ldr r0, [sp, #0xe4]
	adds r0, #0x78
	strh r0, [r1, #4]
	adds r0, r1, #0
	strh r4, [r0, #0xc]
	bl BasPutOam
_0804401A:
	mov r0, sl
	ldr r4, [r0, #0x50]
	cmp r4, #0
	bne _0804407A
	str r4, [sp, #0x24]
	ldr r0, _0804416C @ =0x085CB5C8
	str r0, [sp, #0x44]
	add r0, sp, #8
	ldr r1, _0804417C @ =0x000061F0
	strh r1, [r0, #8]
	adds r2, r0, #0
	mov r3, sl
	ldr r0, [r3, #0x44]
	orrs r0, r1
	strh r0, [r2, #8]
	adds r1, r2, #0
	ldr r0, [sp, #0xe0]
	adds r0, #0xd7
	strh r0, [r1, #2]
	ldr r0, [sp, #0xe4]
	adds r0, #0x70
	strh r0, [r1, #4]
	adds r0, r1, #0
	strh r4, [r0, #0xc]
	bl BasPutOam
	str r4, [sp, #0x24]
	ldr r0, _08044180 @ =0x085CB634
	str r0, [sp, #0x44]
	add r0, sp, #8
	ldr r1, _08044184 @ =0x000061C0
	strh r1, [r0, #8]
	adds r2, r0, #0
	mov r3, sl
	ldr r0, [r3, #0x44]
	orrs r0, r1
	strh r0, [r2, #8]
	adds r1, r2, #0
	ldr r0, [sp, #0xe0]
	adds r0, #0x87
	strh r0, [r1, #2]
	ldr r0, [sp, #0xe4]
	adds r0, #0x78
	strh r0, [r1, #4]
	adds r0, r1, #0
	strh r4, [r0, #0xc]
	bl BasPutOam
_0804407A:
	mov r0, sl
	ldr r4, [r0, #0x4c]
	cmp r4, #0
	bne _080440E6
	str r4, [sp, #0x24]
	ldr r1, _08044188 @ =0x0203CDC8
	movs r2, #0
	ldrsh r0, [r1, r2]
	ldr r5, [sp, #0xe4]
	adds r5, #0x7a
	cmp r0, #0
	beq _080440C0
	adds r1, r0, #0
	add r0, sp, #8
	ldr r2, [sp, #0xe8]
	bl sub_8043980
	add r0, sp, #8
	movs r1, #0xe5
	lsls r1, r1, #1
	strh r1, [r0, #8]
	adds r2, r0, #0
	mov r3, sl
	ldr r0, [r3, #0x44]
	orrs r0, r1
	strh r0, [r2, #8]
	adds r1, r2, #0
	ldr r0, [sp, #0xe0]
	adds r0, #0x36
	strh r0, [r1, #2]
	adds r0, r1, #0
	strh r5, [r0, #4]
	strh r4, [r0, #0xc]
	bl BasPutOam
_080440C0:
	ldr r0, _0804418C @ =0x085CB670
	str r0, [sp, #0x44]
	add r0, sp, #8
	ldr r1, _08044190 @ =0x0000D1DC
	strh r1, [r0, #8]
	adds r2, r0, #0
	mov r3, sl
	ldr r0, [r3, #0x44]
	orrs r0, r1
	strh r0, [r2, #8]
	adds r1, r2, #0
	ldr r0, [sp, #0xe0]
	adds r0, #0x2c
	strh r0, [r1, #2]
	adds r0, r1, #0
	strh r5, [r0, #4]
	strh r4, [r0, #0xc]
	bl BasPutOam
_080440E6:
	mov r0, sl
	ldr r4, [r0, #0x50]
	cmp r4, #0
	bne _08044152
	str r4, [sp, #0x24]
	ldr r1, _08044188 @ =0x0203CDC8
	movs r2, #2
	ldrsh r0, [r1, r2]
	ldr r5, [sp, #0xe4]
	adds r5, #0x7a
	cmp r0, #0
	beq _0804412C
	adds r1, r0, #0
	add r0, sp, #8
	ldr r2, [sp, #0xe8]
	bl sub_8043980
	add r0, sp, #8
	movs r1, #0xe5
	lsls r1, r1, #1
	strh r1, [r0, #8]
	adds r2, r0, #0
	mov r3, sl
	ldr r0, [r3, #0x44]
	orrs r0, r1
	strh r0, [r2, #8]
	adds r1, r2, #0
	ldr r0, [sp, #0xe0]
	adds r0, #0x85
	strh r0, [r1, #2]
	adds r0, r1, #0
	strh r5, [r0, #4]
	strh r4, [r0, #0xc]
	bl BasPutOam
_0804412C:
	ldr r0, _0804418C @ =0x085CB670
	str r0, [sp, #0x44]
	add r0, sp, #8
	ldr r1, _08044194 @ =0x0000E1DE
	strh r1, [r0, #8]
	adds r2, r0, #0
	mov r3, sl
	ldr r0, [r3, #0x44]
	orrs r0, r1
	strh r0, [r2, #8]
	adds r1, r2, #0
	ldr r0, [sp, #0xe0]
	adds r0, #0x7b
	strh r0, [r1, #2]
	adds r0, r1, #0
	strh r5, [r0, #4]
	strh r4, [r0, #0xc]
	bl BasPutOam
_08044152:
	add sp, #0x118
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08044164: .4byte 0x02016E40
_08044168: .4byte 0x06013000
_0804416C: .4byte 0x085CB5C8
_08044170: .4byte 0x000051D0
_08044174: .4byte 0x085CB5F8
_08044178: .4byte 0x000051C0
_0804417C: .4byte 0x000061F0
_08044180: .4byte 0x085CB634
_08044184: .4byte 0x000061C0
_08044188: .4byte 0x0203CDC8
_0804418C: .4byte 0x085CB670
_08044190: .4byte 0x0000D1DC
_08044194: .4byte 0x0000E1DE

	thumb_func_start sub_8044198
sub_8044198: @ 0x08044198
	push {r4, lr}
	ldr r4, _080441C0 @ =0x02000064
	ldr r0, _080441C4 @ =0x085CB718
	movs r1, #5
	bl SpawnProc
	str r0, [r4]
	movs r0, #0
	movs r1, #0
	bl sub_804421C
	bl sub_80441DC
	bl sub_8044274
	bl sub_8044254
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080441C0: .4byte 0x02000064
_080441C4: .4byte 0x085CB718

	thumb_func_start sub_80441C8
sub_80441C8: @ 0x080441C8
	push {lr}
	ldr r0, _080441D8 @ =0x02000064
	ldr r0, [r0]
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_080441D8: .4byte 0x02000064

	thumb_func_start sub_80441DC
sub_80441DC: @ 0x080441DC
	ldr r0, _080441E8 @ =0x02000064
	ldr r1, [r0]
	movs r0, #0
	str r0, [r1, #0x4c]
	str r0, [r1, #0x50]
	bx lr
	.align 2, 0
_080441E8: .4byte 0x02000064

	thumb_func_start sub_80441EC
sub_80441EC: @ 0x080441EC
	ldr r0, _080441F8 @ =0x02000064
	ldr r1, [r0]
	movs r0, #1
	str r0, [r1, #0x4c]
	str r0, [r1, #0x50]
	bx lr
	.align 2, 0
_080441F8: .4byte 0x02000064

	thumb_func_start sub_80441FC
sub_80441FC: @ 0x080441FC
	ldr r0, _08044208 @ =0x02000064
	ldr r1, [r0]
	movs r0, #1
	str r0, [r1, #0x4c]
	bx lr
	.align 2, 0
_08044208: .4byte 0x02000064

	thumb_func_start sub_804420C
sub_804420C: @ 0x0804420C
	ldr r0, _08044218 @ =0x02000064
	ldr r1, [r0]
	movs r0, #1
	str r0, [r1, #0x50]
	bx lr
	.align 2, 0
_08044218: .4byte 0x02000064

	thumb_func_start sub_804421C
sub_804421C: @ 0x0804421C
	ldr r2, _0804422C @ =0x02000064
	ldr r2, [r2]
	movs r3, #0
	strh r0, [r2, #0x32]
	strh r1, [r2, #0x3a]
	adds r2, #0x29
	strb r3, [r2]
	bx lr
	.align 2, 0
_0804422C: .4byte 0x02000064

	thumb_func_start sub_8044230
sub_8044230: @ 0x08044230
	ldr r2, _08044240 @ =0x02000064
	ldr r2, [r2]
	strh r0, [r2, #0x32]
	strh r1, [r2, #0x3a]
	adds r2, #0x29
	movs r0, #1
	strb r0, [r2]
	bx lr
	.align 2, 0
_08044240: .4byte 0x02000064

	thumb_func_start sub_8044244
sub_8044244: @ 0x08044244
	ldr r0, _08044250 @ =0x02000064
	ldr r0, [r0]
	adds r0, #0x29
	movs r1, #1
	strb r1, [r0]
	bx lr
	.align 2, 0
_08044250: .4byte 0x02000064

	thumb_func_start sub_8044254
sub_8044254: @ 0x08044254
	ldr r0, _08044260 @ =0x02000064
	ldr r0, [r0]
	adds r0, #0x29
	movs r1, #0
	strb r1, [r0]
	bx lr
	.align 2, 0
_08044260: .4byte 0x02000064

	thumb_func_start sub_8044264
sub_8044264: @ 0x08044264
	ldr r0, _08044270 @ =0x02000064
	ldr r0, [r0]
	adds r0, #0x2a
	movs r1, #1
	strb r1, [r0]
	bx lr
	.align 2, 0
_08044270: .4byte 0x02000064

	thumb_func_start sub_8044274
sub_8044274: @ 0x08044274
	ldr r0, _08044280 @ =0x02000064
	ldr r0, [r0]
	adds r0, #0x2a
	movs r1, #0
	strb r1, [r0]
	bx lr
	.align 2, 0
_08044280: .4byte 0x02000064

	thumb_func_start sub_8044284
sub_8044284: @ 0x08044284
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r7, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #1
	beq _08044374
	adds r0, r7, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _08044374
	ldrh r1, [r7, #0x3a]
	lsls r0, r1, #0x10
	asrs r0, r0, #0x13
	lsls r2, r0, #5
	mov r8, r2
	cmp r2, #0
	bge _080442B6
	movs r1, #0
	mov r8, r1
_080442B6:
	adds r6, r0, #7
	cmp r6, #6
	ble _080442BE
	movs r6, #6
_080442BE:
	movs r0, #6
	subs r0, r0, r6
	lsls r1, r0, #4
	subs r1, r1, r0
	lsls r1, r1, #1
	mov sl, r1
	ldr r0, _080442DC @ =0x0203CD14
	movs r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #0
	blt _080442E0
	cmp r0, #2
	bgt _080442E0
	movs r4, #0
	b _080442E2
	.align 2, 0
_080442DC: .4byte 0x0203CD14
_080442E0:
	movs r4, #0xf
_080442E2:
	ldr r0, _08044384 @ =gBg0Tm
	mov sb, r0
	movs r0, #0x9f
	str r0, [sp]
	mov r0, sb
	movs r1, #0x1e
	movs r2, #7
	movs r3, #0
	bl sub_805B094
	cmp r6, #0
	ble _0804436E
	ldr r0, [r7, #0x4c]
	cmp r0, #0
	bne _08044334
	ldr r0, _08044388 @ =0x08112968
	add r0, sl
	mov r1, r8
	lsls r5, r1, #1
	lsls r1, r4, #1
	add r1, sb
	adds r5, r5, r1
	lsls r4, r6, #0x10
	lsrs r4, r4, #0x10
	movs r1, #1
	rsbs r1, r1, #0
	str r1, [sp]
	str r1, [sp, #4]
	adds r1, r5, #0
	movs r2, #0xf
	adds r3, r4, #0
	bl sub_805B1AC
	movs r0, #0x80
	str r0, [sp]
	adds r0, r5, #0
	movs r1, #0xf
	adds r2, r4, #0
	movs r3, #2
	bl sub_805B01C
_08044334:
	ldr r0, [r7, #0x50]
	cmp r0, #0
	bne _0804436E
	ldr r0, _0804438C @ =0x08112A1C
	add r0, sl
	mov r2, r8
	lsls r5, r2, #1
	movs r2, #0xf
	lsls r1, r2, #1
	add r1, sb
	adds r5, r5, r1
	lsls r4, r6, #0x10
	lsrs r4, r4, #0x10
	movs r1, #1
	rsbs r1, r1, #0
	str r1, [sp]
	str r1, [sp, #4]
	adds r1, r5, #0
	adds r3, r4, #0
	bl sub_805B1AC
	movs r0, #0x80
	str r0, [sp]
	adds r0, r5, #0
	movs r1, #0xf
	adds r2, r4, #0
	movs r3, #3
	bl sub_805B01C
_0804436E:
	movs r0, #1
	bl EnableBgSync
_08044374:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08044384: .4byte gBg0Tm
_08044388: .4byte 0x08112968
_0804438C: .4byte 0x08112A1C

	thumb_func_start sub_8044390
sub_8044390: @ 0x08044390
	push {r4, r5, r6, lr}
	sub sp, #0x10
	ldr r4, _08044484 @ =gDispIo
	movs r2, #8
	rsbs r2, r2, #0
	ldrb r0, [r4]
	ands r2, r0
	movs r5, #1
	ldrb r0, [r4, #1]
	orrs r0, r5
	movs r6, #2
	orrs r0, r6
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r4, #1]
	movs r0, #0x41
	rsbs r0, r0, #0
	ands r2, r0
	strb r2, [r4]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #0
	movs r1, #0
	bl SetBgChrOffset
	movs r0, #1
	movs r1, #0
	bl SetBgChrOffset
	movs r0, #2
	movs r1, #0
	bl SetBgChrOffset
	movs r1, #0x80
	lsls r1, r1, #8
	movs r0, #3
	bl SetBgChrOffset
	movs r1, #0xc0
	lsls r1, r1, #7
	movs r0, #0
	bl SetBgTilemapOffset
	movs r1, #0xd0
	lsls r1, r1, #7
	movs r0, #1
	bl SetBgTilemapOffset
	movs r1, #0xe0
	lsls r1, r1, #7
	movs r0, #2
	bl SetBgTilemapOffset
	movs r1, #0xf0
	lsls r1, r1, #7
	movs r0, #3
	bl SetBgTilemapOffset
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r4, #0xc]
	ands r0, r2
	strb r0, [r4, #0xc]
	adds r0, r1, #0
	ldrb r2, [r4, #0x10]
	ands r0, r2
	orrs r0, r5
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	orrs r1, r6
	strb r1, [r4, #0x14]
	movs r0, #3
	ldrb r1, [r4, #0x18]
	orrs r0, r1
	strb r0, [r4, #0x18]
	movs r4, #0
	str r4, [sp]
	ldr r1, _08044488 @ =gBg0Tm
	ldr r5, _0804448C @ =0x01000200
	mov r0, sp
	adds r2, r5, #0
	bl CpuFastSet
	str r4, [sp, #4]
	add r0, sp, #4
	ldr r1, _08044490 @ =gBg1Tm
	adds r2, r5, #0
	bl CpuFastSet
	str r4, [sp, #8]
	add r0, sp, #8
	ldr r6, _08044494 @ =gBg2Tm
	adds r1, r6, #0
	adds r2, r5, #0
	bl CpuFastSet
	bl sub_804C500
	cmp r0, #0
	bne _08044498
	bl sub_80444EC
	b _080444A4
	.align 2, 0
_08044484: .4byte gDispIo
_08044488: .4byte gBg0Tm
_0804448C: .4byte 0x01000200
_08044490: .4byte gBg1Tm
_08044494: .4byte gBg2Tm
_08044498:
	str r4, [sp, #0xc]
	add r0, sp, #0xc
	adds r1, r6, #0
	adds r2, r5, #0
	bl CpuFastSet
_080444A4:
	bl sub_8044608
	bl EnablePalSync
	movs r0, #1
	bl EnableBgSync
	movs r0, #2
	bl EnableBgSync
	movs r0, #4
	bl EnableBgSync
	ldr r3, _080444E8 @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r2, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080444E8: .4byte gDispIo

	thumb_func_start sub_80444EC
sub_80444EC: @ 0x080444EC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r4, _0804452C @ =0x0201E0FC
	ldr r2, _08044530 @ =0x0203CD10
	movs r0, #0
	ldrsh r1, [r2, r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	ldr r3, _08044534 @ =0x087EA008
	adds r5, r0, r3
	movs r6, #2
	ldrsh r1, [r2, r6]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r3, r0, r3
	ldr r0, _08044538 @ =0x0203CD14
	movs r7, #0
	ldrsh r1, [r0, r7]
	mov r8, r2
	adds r6, r0, #0
	cmp r1, #3
	bgt _08044540
	cmp r1, #1
	bge _08044564
	cmp r1, #0
	beq _08044548
	ldr r0, _0804453C @ =0x020145C0
	b _08044576
	.align 2, 0
_0804452C: .4byte 0x0201E0FC
_08044530: .4byte 0x0203CD10
_08044534: .4byte 0x087EA008
_08044538: .4byte 0x0203CD14
_0804453C: .4byte 0x020145C0
_08044540:
	ldr r7, _0804455C @ =0x020145C0
	mov ip, r7
	cmp r1, #4
	bne _08044578
_08044548:
	ldr r0, _08044560 @ =0x02000034
	ldr r1, _0804455C @ =0x020145C0
	str r1, [r0]
	movs r7, #0x80
	lsls r7, r7, #5
	adds r2, r1, r7
	str r2, [r0, #4]
	mov ip, r1
	b _08044578
	.align 2, 0
_0804455C: .4byte 0x020145C0
_08044560: .4byte 0x02000034
_08044564:
	ldr r0, _080445E8 @ =0x02000034
	ldr r1, _080445EC @ =0x02014DC0
	str r1, [r0]
	movs r7, #0x80
	lsls r7, r7, #5
	adds r2, r1, r7
	str r2, [r0, #4]
	ldr r0, _080445F0 @ =0xFFFFF800
	adds r0, r0, r1
_08044576:
	mov ip, r0
_08044578:
	ldr r0, _080445F4 @ =gPlaySt
	ldrb r0, [r0, #0x15]
	ldr r0, _080445F8 @ =0x02000044
	ldr r1, [r5, #0x10]
	str r1, [r0]
	ldr r1, [r3, #0x10]
	str r1, [r0, #4]
	ldr r2, _080445FC @ =0x0200003C
	ldr r1, _08044600 @ =0x085CBDB0
	movs r3, #0
	ldrsh r0, [r6, r3]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldr r0, [r0]
	str r0, [r2]
	movs r7, #0
	ldrsh r0, [r6, r7]
	lsls r0, r0, #1
	adds r0, #1
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	str r0, [r2, #4]
	mov r1, r8
	ldrh r0, [r1]
	movs r2, #0
	strh r0, [r4]
	movs r0, #4
	strh r0, [r4, #2]
	movs r1, #0xa0
	lsls r1, r1, #2
	strh r1, [r4, #4]
	mov r3, r8
	ldrh r0, [r3, #2]
	strh r0, [r4, #6]
	movs r0, #5
	strh r0, [r4, #8]
	strh r1, [r4, #0xa]
	ldrh r0, [r6]
	strh r0, [r4, #0xc]
	movs r0, #2
	strh r0, [r4, #0xe]
	str r2, [r4, #0x1c]
	mov r6, ip
	str r6, [r4, #0x20]
	ldr r0, _08044604 @ =0x0203CCF6
	ldrh r0, [r0]
	strh r0, [r4, #0x10]
	adds r0, r4, #0
	bl sub_804BF40
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080445E8: .4byte 0x02000034
_080445EC: .4byte 0x02014DC0
_080445F0: .4byte 0xFFFFF800
_080445F4: .4byte gPlaySt
_080445F8: .4byte 0x02000044
_080445FC: .4byte 0x0200003C
_08044600: .4byte 0x085CBDB0
_08044604: .4byte 0x0203CCF6

	thumb_func_start sub_8044608
sub_8044608: @ 0x08044608
	push {r4, r5, r6, lr}
	sub sp, #8
	ldr r4, _08044648 @ =Pal_SystemText
	adds r0, r4, #0
	movs r1, #0x40
	movs r2, #0x20
	bl ApplyPaletteExt
	adds r0, r4, #0
	movs r1, #0x60
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0804464C @ =0x02017640
	ldr r1, _08044650 @ =0x06001400
	movs r2, #0xa0
	movs r3, #2
	bl InitTextFont
	bl SetTextDrawNoClear
	ldr r0, _08044654 @ =0x081125E0
	ldr r1, _08044658 @ =0x06001000
	bl LZ77UnCompVram
	ldr r0, _0804465C @ =0x0203CCF8
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _08044664
	ldr r5, _08044660 @ =0x085CB504
	b _08044672
	.align 2, 0
_08044648: .4byte Pal_SystemText
_0804464C: .4byte 0x02017640
_08044650: .4byte 0x06001400
_08044654: .4byte 0x081125E0
_08044658: .4byte 0x06001000
_0804465C: .4byte 0x0203CCF8
_08044660: .4byte 0x085CB504
_08044664:
	ldr r0, _080446AC @ =0x0203CD7C
	ldr r0, [r0]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r5, r0, #0
_08044672:
	ldr r4, _080446B0 @ =0x02017658
	adds r0, r4, #0
	movs r1, #6
	bl InitText
	movs r0, #0x30
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_SetCursor
	ldr r0, _080446B4 @ =0x081127F0
	ldr r1, _080446B8 @ =0x06001400
	bl LZ77UnCompVram
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_DrawString
	ldr r0, _080446BC @ =0x0203CCF8
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _080446C4
	ldr r5, _080446C0 @ =0x085CB504
	b _080446D2
	.align 2, 0
_080446AC: .4byte 0x0203CD7C
_080446B0: .4byte 0x02017658
_080446B4: .4byte 0x081127F0
_080446B8: .4byte 0x06001400
_080446BC: .4byte 0x0203CCF8
_080446C0: .4byte 0x085CB504
_080446C4:
	ldr r0, _0804470C @ =0x0203CD7C
	ldr r0, [r0]
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemName
	adds r5, r0, #0
_080446D2:
	ldr r4, _08044710 @ =0x02017668
	adds r0, r4, #0
	movs r1, #7
	bl InitText
	movs r0, #0x38
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_SetCursor
	ldr r0, _08044714 @ =0x08112840
	ldr r1, _08044718 @ =0x06001580
	bl LZ77UnCompVram
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_DrawString
	ldr r0, _0804471C @ =0x0203CCF8
	movs r1, #2
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _08044724
	ldr r5, _08044720 @ =0x085CB504
	b _08044732
	.align 2, 0
_0804470C: .4byte 0x0203CD7C
_08044710: .4byte 0x02017668
_08044714: .4byte 0x08112840
_08044718: .4byte 0x06001580
_0804471C: .4byte 0x0203CCF8
_08044720: .4byte 0x085CB504
_08044724:
	ldr r0, _0804476C @ =0x0203CD80
	ldr r0, [r0]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r5, r0, #0
_08044732:
	ldr r4, _08044770 @ =0x02017670
	adds r0, r4, #0
	movs r1, #6
	bl InitText
	movs r0, #0x30
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_SetCursor
	ldr r0, _08044774 @ =0x081128AC
	ldr r1, _08044778 @ =0x06001740
	bl LZ77UnCompVram
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_DrawString
	ldr r0, _0804477C @ =0x0203CCF8
	movs r1, #2
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _08044784
	ldr r5, _08044780 @ =0x085CB504
	b _08044792
	.align 2, 0
_0804476C: .4byte 0x0203CD80
_08044770: .4byte 0x02017670
_08044774: .4byte 0x081128AC
_08044778: .4byte 0x06001740
_0804477C: .4byte 0x0203CCF8
_08044780: .4byte 0x085CB504
_08044784:
	ldr r0, _08044848 @ =0x0203CD80
	ldr r0, [r0]
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemName
	adds r5, r0, #0
_08044792:
	ldr r4, _0804484C @ =0x02017660
	adds r0, r4, #0
	movs r1, #7
	bl InitText
	movs r0, #0x38
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_SetCursor
	ldr r0, _08044850 @ =0x081128FC
	ldr r1, _08044854 @ =0x060018C0
	bl LZ77UnCompVram
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_DrawString
	ldr r4, _08044858 @ =gBg0Tm
	adds r0, r4, #0
	movs r1, #0x9f
	bl TmFill
	ldr r0, _0804485C @ =0x08112C84
	adds r6, r4, #0
	adds r6, #0x3c
	movs r1, #1
	rsbs r1, r1, #0
	str r1, [sp]
	str r1, [sp, #4]
	adds r1, r6, #0
	movs r2, #2
	movs r3, #0x14
	bl sub_805B1AC
	adds r4, #0x3e
	movs r5, #0x80
	str r5, [sp]
	adds r0, r4, #0
	movs r1, #1
	movs r2, #0x14
	movs r3, #2
	bl sub_805B01C
	str r5, [sp]
	adds r0, r6, #0
	movs r1, #1
	movs r2, #0x14
	movs r3, #3
	bl sub_805B01C
	movs r0, #1
	bl EnableBgSync
	ldr r6, _08044860 @ =0x0203CD08
	movs r1, #0
	ldrsh r0, [r6, r1]
	lsls r0, r0, #5
	ldr r5, _08044864 @ =0x08112CD4
	adds r0, r0, r5
	ldr r4, _08044868 @ =0x02021748
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	movs r1, #2
	ldrsh r0, [r6, r1]
	lsls r0, r0, #5
	adds r0, r0, r5
	adds r4, #0x20
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	ldr r1, _0804486C @ =0x02000030
	movs r0, #0
	strh r0, [r1]
	strh r0, [r1, #2]
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08044848: .4byte 0x0203CD80
_0804484C: .4byte 0x02017660
_08044850: .4byte 0x081128FC
_08044854: .4byte 0x060018C0
_08044858: .4byte gBg0Tm
_0804485C: .4byte 0x08112C84
_08044860: .4byte 0x0203CD08
_08044864: .4byte 0x08112CD4
_08044868: .4byte 0x02021748
_0804486C: .4byte 0x02000030

	thumb_func_start sub_8044870
sub_8044870: @ 0x08044870
	push {r4, r5, lr}
	ldr r0, _08044888 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #4
	bhi _080448B0
	lsls r0, r0, #2
	ldr r1, _0804488C @ =_08044890
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08044888: .4byte 0x0203CD14
_0804488C: .4byte _08044890
_08044890: @ jump table
	.4byte _080448F8 @ case 0
	.4byte _080448A4 @ case 1
	.4byte _080448B0 @ case 2
	.4byte _080448F8 @ case 3
	.4byte _080448F8 @ case 4
_080448A4:
	ldr r0, _080448AC @ =0x0203CCF4
	movs r2, #0
	ldrsh r0, [r0, r2]
	b _080448FA
	.align 2, 0
_080448AC: .4byte 0x0203CCF4
_080448B0:
	movs r1, #0
	movs r5, #0
	ldr r0, _080448E0 @ =0x0203CCF0
	movs r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #0
	bne _080448D8
	ldr r4, _080448E4 @ =0x0203CD84
	ldrb r0, [r4]
	ldrb r1, [r4, #1]
	bl sub_806B6F8
	lsls r0, r0, #0x18
	asrs r5, r0, #0x18
	ldrb r0, [r4, #1]
	ldrb r1, [r4]
	bl sub_806B6F8
	lsls r0, r0, #0x18
	asrs r1, r0, #0x18
_080448D8:
	cmp r5, #1
	bne _080448E8
	movs r0, #0
	b _080448FA
	.align 2, 0
_080448E0: .4byte 0x0203CCF0
_080448E4: .4byte 0x0203CD84
_080448E8:
	cmp r1, #1
	beq _080448F8
	ldr r0, _080448F4 @ =0x0203CCF4
	movs r1, #0
	ldrsh r0, [r0, r1]
	b _080448FA
	.align 2, 0
_080448F4: .4byte 0x0203CCF4
_080448F8:
	movs r0, #1
_080448FA:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_8044900
sub_8044900: @ 0x08044900
	push {r4, lr}
	ldr r0, _0804496C @ =0x02017720
	movs r4, #0
	str r4, [r0]
	ldr r0, _08044970 @ =0x02017724
	str r4, [r0]
	ldr r0, _08044974 @ =0x02017728
	str r4, [r0]
	ldr r0, _08044978 @ =0x02017730
	str r4, [r0]
	ldr r0, _0804497C @ =0x02017734
	str r4, [r0]
	ldr r0, _08044980 @ =0x02017738
	str r4, [r0]
	ldr r0, _08044984 @ =0x02017740
	str r4, [r0]
	ldr r0, _08044988 @ =0x02017744
	str r4, [r0]
	ldr r0, _0804498C @ =0x02017748
	str r4, [r0]
	ldr r0, _08044990 @ =0x0201774C
	str r4, [r0]
	ldr r0, _08044994 @ =0x02017750
	str r4, [r0]
	ldr r0, _08044998 @ =0x02017754
	str r4, [r0]
	ldr r0, _0804499C @ =0x02017758
	strh r4, [r0]
	strh r4, [r0, #2]
	ldr r0, _080449A0 @ =0x0201775C
	strh r4, [r0]
	strh r4, [r0, #2]
	ldr r0, _080449A4 @ =0x02017760
	strh r4, [r0]
	strh r4, [r0, #2]
	ldr r0, _080449A8 @ =0x02017778
	strh r4, [r0]
	strh r4, [r0, #2]
	ldr r0, _080449AC @ =0x02017764
	str r4, [r0]
	str r4, [r0, #4]
	ldr r0, _080449B0 @ =0x02017770
	str r4, [r0]
	ldr r0, _080449B4 @ =0x02017774
	str r4, [r0]
	ldr r0, _080449B8 @ =0x08113D70
	ldr r1, _080449BC @ =0x06012000
	bl LZ77UnCompVram
	ldr r0, _080449C0 @ =0x0201E7A4
	str r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804496C: .4byte 0x02017720
_08044970: .4byte 0x02017724
_08044974: .4byte 0x02017728
_08044978: .4byte 0x02017730
_0804497C: .4byte 0x02017734
_08044980: .4byte 0x02017738
_08044984: .4byte 0x02017740
_08044988: .4byte 0x02017744
_0804498C: .4byte 0x02017748
_08044990: .4byte 0x0201774C
_08044994: .4byte 0x02017750
_08044998: .4byte 0x02017754
_0804499C: .4byte 0x02017758
_080449A0: .4byte 0x0201775C
_080449A4: .4byte 0x02017760
_080449A8: .4byte 0x02017778
_080449AC: .4byte 0x02017764
_080449B0: .4byte 0x02017770
_080449B4: .4byte 0x02017774
_080449B8: .4byte 0x08113D70
_080449BC: .4byte 0x06012000
_080449C0: .4byte 0x0201E7A4

	thumb_func_start sub_80449C4
sub_80449C4: @ 0x080449C4
	ldr r0, _080449D8 @ =0x02017720
	ldr r0, [r0]
	cmp r0, #0
	bne _080449E0
	ldr r0, _080449DC @ =0x02017724
	ldr r0, [r0]
	cmp r0, #0
	bne _080449E0
	movs r0, #1
	b _080449E2
	.align 2, 0
_080449D8: .4byte 0x02017720
_080449DC: .4byte 0x02017724
_080449E0:
	movs r0, #0
_080449E2:
	bx lr

	thumb_func_start sub_80449E4
sub_80449E4: @ 0x080449E4
	ldr r1, _080449F0 @ =0x02017778
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r1, #0
	ldrsh r0, [r0, r1]
	bx lr
	.align 2, 0
_080449F0: .4byte 0x02017778

	thumb_func_start sub_80449F4
sub_80449F4: @ 0x080449F4
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r1, _08044A24 @ =0x02017720
	ldr r0, [r1]
	cmp r0, #0
	bne _08044AB4
	movs r0, #1
	str r0, [r1]
	ldr r0, _08044A28 @ =0x085CB730
	movs r1, #3
	bl SpawnProc
	adds r6, r0, #0
	str r4, [r6, #0x64]
	adds r0, r4, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _08044A30
	ldr r0, _08044A2C @ =0x02000000
	ldr r1, [r0, #8]
	str r1, [r6, #0x5c]
	ldr r0, [r0]
	b _08044A38
	.align 2, 0
_08044A24: .4byte 0x02017720
_08044A28: .4byte 0x085CB730
_08044A2C: .4byte 0x02000000
_08044A30:
	ldr r0, _08044A8C @ =0x02000000
	ldr r1, [r0]
	str r1, [r6, #0x5c]
	ldr r0, [r0, #8]
_08044A38:
	str r0, [r6, #0x60]
	ldr r4, _08044A90 @ =0x0203CD46
	ldr r0, [r6, #0x60]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #0
	ldrsh r5, [r0, r1]
	adds r4, r5, #1
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldr r0, [r6, #0x60]
	bl sub_804B6C4
	lsls r5, r5, #1
	adds r5, r5, r0
	adds r0, r5, #0
	bl sub_804A5A8
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [r6, #0x4c]
	ldr r0, [r6, #0x60]
	bl sub_804B6C4
	lsls r4, r4, #0x10
	asrs r4, r4, #0xf
	adds r4, r4, r0
	adds r0, r4, #0
	bl sub_804A5A8
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [r6, #0x50]
	ldr r1, [r6, #0x4c]
	cmp r1, r0
	ble _08044A94
	movs r0, #1
	rsbs r0, r0, #0
	b _08044A96
	.align 2, 0
_08044A8C: .4byte 0x02000000
_08044A90: .4byte 0x0203CD46
_08044A94:
	movs r0, #1
_08044A96:
	str r0, [r6, #0x48]
	movs r1, #0
	strh r1, [r6, #0x2c]
	ldr r0, [r6, #0x4c]
	strh r0, [r6, #0x2e]
	str r1, [r6, #0x54]
	str r1, [r6, #0x58]
	ldr r0, [r6, #0x60]
	bl sub_804B6C4
	ldr r1, _08044ABC @ =0x02017778
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r1, #1
	strh r1, [r0]
_08044AB4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08044ABC: .4byte 0x02017778

	thumb_func_start sub_8044AC0
sub_8044AC0: @ 0x08044AC0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	ldr r4, _08044B88 @ =0x02000000
	ldr r0, [r5, #0x60]
	bl sub_804B6C4
	lsls r0, r0, #3
	adds r0, r0, r4
	ldr r6, [r0]
	ldr r0, [r5, #0x60]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, #1
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r7, [r0]
	ldr r1, [r5, #0x58]
	cmp r1, #0
	bne _08044B26
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #2
	bne _08044B26
	strh r1, [r5, #0x2c]
	ldr r0, [r5, #0x48]
	ldrh r1, [r5, #0x2e]
	adds r0, r1, r0
	strh r0, [r5, #0x2e]
	ldr r0, [r5, #0x60]
	bl sub_804B6C4
	ldr r1, _08044B8C @ =0x0203CDA0
	lsls r0, r0, #1
	adds r0, r0, r1
	ldr r1, [r5, #0x48]
	ldrh r2, [r0]
	adds r1, r2, r1
	strh r1, [r0]
	movs r0, #0x2e
	ldrsh r1, [r5, r0]
	ldr r0, [r5, #0x50]
	cmp r1, r0
	bne _08044B26
	movs r0, #1
	str r0, [r5, #0x58]
_08044B26:
	ldr r1, _08044B90 @ =0x0203CD84
	mov r8, r1
	ldr r0, [r5, #0x60]
	bl sub_804B6C4
	add r0, r8
	ldrb r0, [r0]
	cmp r0, #0x66
	beq _08044B46
	ldr r0, [r5, #0x60]
	bl sub_804B6C4
	add r0, r8
	ldrb r0, [r0]
	cmp r0, #3
	bne _08044BC0
_08044B46:
	ldr r1, [r5, #0x54]
	cmp r1, #0x50
	bne _08044BB4
	ldr r0, [r5, #0x58]
	cmp r0, #1
	bne _08044BB4
	ldr r4, _08044B94 @ =0x0203CD46
	ldr r0, [r5, #0x60]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	ldrh r1, [r0]
	adds r1, #1
	movs r4, #0
	strh r1, [r0]
	ldr r0, [r5, #0x60]
	bl sub_804B6C4
	ldr r1, _08044B98 @ =0x02017778
	lsls r0, r0, #1
	adds r0, r0, r1
	strh r4, [r0]
	ldr r0, [r5, #0x50]
	cmp r0, #0
	bne _08044C44
	bl sub_8042578
	cmp r0, #1
	bne _08044B9C
	movs r0, #0
	b _08044BAE
	.align 2, 0
_08044B88: .4byte 0x02000000
_08044B8C: .4byte 0x0203CDA0
_08044B90: .4byte 0x0203CD84
_08044B94: .4byte 0x0203CD46
_08044B98: .4byte 0x02017778
_08044B9C:
	adds r0, r6, #0
	bl sub_804B6C4
	add r0, r8
	ldrb r0, [r0]
	bl ShouldDisplayDeathQuote
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
_08044BAE:
	cmp r0, #1
	beq _08044C1E
	b _08044C28
_08044BB4:
	adds r0, r1, #1
	str r0, [r5, #0x54]
	cmp r0, #0x4f
	bls _08044C5C
	movs r0, #0x50
	b _08044C5A
_08044BC0:
	ldr r1, [r5, #0x54]
	cmp r1, #0x1e
	bne _08044C50
	ldr r0, [r5, #0x58]
	cmp r0, #1
	bne _08044C50
	ldr r4, _08044C00 @ =0x0203CD46
	ldr r0, [r5, #0x60]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	ldrh r1, [r0]
	adds r1, #1
	movs r4, #0
	strh r1, [r0]
	ldr r0, [r5, #0x60]
	bl sub_804B6C4
	ldr r1, _08044C04 @ =0x02017778
	lsls r0, r0, #1
	adds r0, r0, r1
	strh r4, [r0]
	ldr r0, [r5, #0x50]
	cmp r0, #0
	bne _08044C44
	bl sub_8042578
	cmp r0, #1
	bne _08044C08
	movs r0, #0
	b _08044C1A
	.align 2, 0
_08044C00: .4byte 0x0203CD46
_08044C04: .4byte 0x02017778
_08044C08:
	adds r0, r6, #0
	bl sub_804B6C4
	add r0, r8
	ldrb r0, [r0]
	bl ShouldDisplayDeathQuote
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
_08044C1A:
	cmp r0, #1
	bne _08044C28
_08044C1E:
	adds r0, r6, #0
	adds r1, r7, #0
	bl sub_80455C0
	b _08044C44
_08044C28:
	bl sub_804C554
	adds r0, r6, #0
	adds r1, r7, #0
	bl sub_80457E8
	ldr r0, [r5, #0x60]
	bl sub_804B6C4
	ldr r1, _08044C4C @ =0x0203CCF8
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r1, #0
	strh r1, [r0]
_08044C44:
	adds r0, r5, #0
	bl Proc_Break
	b _08044C5C
	.align 2, 0
_08044C4C: .4byte 0x0203CCF8
_08044C50:
	adds r0, r1, #1
	str r0, [r5, #0x54]
	cmp r0, #0x1d
	bls _08044C5C
	movs r0, #0x1e
_08044C5A:
	str r0, [r5, #0x54]
_08044C5C:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8044C68
sub_8044C68: @ 0x08044C68
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _08044CB0 @ =0x02017744
	ldr r0, [r0]
	cmp r0, #0
	bne _08044D00
	ldr r0, _08044CB4 @ =0x02017724
	ldr r0, [r0]
	cmp r0, #0
	bne _08044D00
	strh r0, [r5, #0x2c]
	movs r0, #1
	strh r0, [r5, #0x2e]
	ldr r0, [r5, #0x64]
	bl sub_804B80C
	adds r4, r0, #0
	bl sub_804B848
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B768
	cmp r0, #1
	bne _08044CFA
	ldr r0, _08044CB8 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #4
	bhi _08044CFA
	lsls r0, r0, #2
	ldr r1, _08044CBC @ =_08044CC0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08044CB0: .4byte 0x02017744
_08044CB4: .4byte 0x02017724
_08044CB8: .4byte 0x0203CD14
_08044CBC: .4byte _08044CC0
_08044CC0: @ jump table
	.4byte _08044CD4 @ case 0
	.4byte _08044CD4 @ case 1
	.4byte _08044CE8 @ case 2
	.4byte _08044CD4 @ case 3
	.4byte _08044CD4 @ case 4
_08044CD4:
	movs r0, #0x10
	strh r0, [r5, #0x2e]
	adds r0, r4, #0
	bl sub_804B80C
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
	b _08044CFA
_08044CE8:
	movs r0, #0x14
	strh r0, [r5, #0x2e]
	adds r0, r4, #0
	bl sub_804B80C
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
_08044CFA:
	adds r0, r5, #0
	bl Proc_Break
_08044D00:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8044D08
sub_8044D08: @ 0x08044D08
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	movs r3, #0x2e
	ldrsh r0, [r2, r3]
	subs r0, #4
	cmp r1, r0
	bne _08044D2E
	ldr r0, [r2, #0x64]
	bl sub_804B80C
	movs r0, #4
	bl EnableBgSync
	b _08044D44
_08044D2E:
	movs r3, #0x2e
	ldrsh r0, [r2, r3]
	cmp r1, r0
	bne _08044D44
	ldr r1, _08044D48 @ =0x02017720
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r2, #0
	bl Proc_Break
_08044D44:
	pop {r0}
	bx r0
	.align 2, 0
_08044D48: .4byte 0x02017720

	thumb_func_start sub_8044D4C
sub_8044D4C: @ 0x08044D4C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r1, _08044D84 @ =0x02017720
	ldr r0, [r1]
	cmp r0, #0
	bne _08044E1E
	movs r0, #1
	str r0, [r1]
	ldr r0, _08044D88 @ =0x085CB758
	movs r1, #3
	bl SpawnProc
	adds r6, r0, #0
	adds r0, r4, #0
	bl sub_804B80C
	str r0, [r6, #0x64]
	adds r0, r4, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _08044D90
	ldr r0, _08044D8C @ =0x02000000
	ldr r1, [r0, #8]
	str r1, [r6, #0x5c]
	ldr r0, [r0]
	b _08044D98
	.align 2, 0
_08044D84: .4byte 0x02017720
_08044D88: .4byte 0x085CB758
_08044D8C: .4byte 0x02000000
_08044D90:
	ldr r0, _08044DEC @ =0x02000000
	ldr r1, [r0]
	str r1, [r6, #0x5c]
	ldr r0, [r0, #8]
_08044D98:
	str r0, [r6, #0x60]
	ldr r4, _08044DF0 @ =0x0203CD46
	ldr r0, [r6, #0x60]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #0
	ldrsh r5, [r0, r1]
	adds r4, r5, #1
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldr r0, [r6, #0x60]
	bl sub_804B6C4
	lsls r5, r5, #1
	adds r5, r5, r0
	adds r0, r5, #0
	bl sub_804A5A8
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [r6, #0x4c]
	ldr r0, [r6, #0x60]
	bl sub_804B6C4
	lsls r4, r4, #0x10
	asrs r4, r4, #0xf
	adds r4, r4, r0
	adds r0, r4, #0
	bl sub_804A5A8
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [r6, #0x50]
	ldr r1, [r6, #0x4c]
	cmp r1, r0
	ble _08044DF4
	movs r0, #1
	rsbs r0, r0, #0
	b _08044DF6
	.align 2, 0
_08044DEC: .4byte 0x02000000
_08044DF0: .4byte 0x0203CD46
_08044DF4:
	movs r0, #1
_08044DF6:
	str r0, [r6, #0x48]
	adds r0, r6, #0
	adds r0, #0x29
	movs r1, #0
	strb r1, [r0]
	strh r1, [r6, #0x2c]
	ldr r0, [r6, #0x4c]
	strh r0, [r6, #0x2e]
	str r1, [r6, #0x54]
	str r1, [r6, #0x58]
	ldr r0, _08044E24 @ =0x02017748
	str r1, [r0]
	ldr r0, [r6, #0x60]
	bl sub_804B6C4
	ldr r1, _08044E28 @ =0x02017778
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r1, #1
	strh r1, [r0]
_08044E1E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08044E24: .4byte 0x02017748
_08044E28: .4byte 0x02017778

	thumb_func_start sub_8044E2C
sub_8044E2C: @ 0x08044E2C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x60]
	bl sub_804B6C4
	ldr r0, [r5, #0x60]
	bl sub_804B6C4
	ldr r1, [r5, #0x58]
	cmp r1, #0
	bne _08044E7C
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #2
	bne _08044E7C
	strh r1, [r5, #0x2c]
	ldr r0, [r5, #0x48]
	ldrh r1, [r5, #0x2e]
	adds r0, r1, r0
	strh r0, [r5, #0x2e]
	ldr r0, [r5, #0x60]
	bl sub_804B6C4
	ldr r1, _08044EC8 @ =0x0203CDA0
	lsls r0, r0, #1
	adds r0, r0, r1
	ldr r1, [r5, #0x48]
	ldrh r2, [r0]
	adds r1, r2, r1
	strh r1, [r0]
	movs r0, #0x2e
	ldrsh r1, [r5, r0]
	ldr r0, [r5, #0x50]
	cmp r1, r0
	bne _08044E7C
	movs r0, #1
	str r0, [r5, #0x58]
_08044E7C:
	ldr r0, [r5, #0x54]
	cmp r0, #0x54
	bne _08044ED8
	ldr r6, [r5, #0x58]
	cmp r6, #1
	bne _08044ED8
	ldr r4, _08044ECC @ =0x0203CD46
	ldr r0, [r5, #0x60]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	ldrh r1, [r0]
	adds r1, #1
	movs r4, #0
	strh r1, [r0]
	ldr r0, [r5, #0x60]
	bl sub_804B6C4
	ldr r1, _08044ED0 @ =0x02017778
	lsls r0, r0, #1
	adds r0, r0, r1
	strh r4, [r0]
	ldr r0, [r5, #0x50]
	cmp r0, #0
	bne _08044EB6
	adds r0, r5, #0
	adds r0, #0x29
	strb r6, [r0]
_08044EB6:
	strh r4, [r5, #0x2c]
	movs r0, #0xa
	strh r0, [r5, #0x2e]
	ldr r0, _08044ED4 @ =0x02017748
	str r6, [r0]
	adds r0, r5, #0
	bl Proc_Break
	b _08044EE4
	.align 2, 0
_08044EC8: .4byte 0x0203CDA0
_08044ECC: .4byte 0x0203CD46
_08044ED0: .4byte 0x02017778
_08044ED4: .4byte 0x02017748
_08044ED8:
	adds r0, #1
	str r0, [r5, #0x54]
	cmp r0, #0x53
	bls _08044EE4
	movs r0, #0x54
	str r0, [r5, #0x54]
_08044EE4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8044EEC
sub_8044EEC: @ 0x08044EEC
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	movs r7, #0
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r6, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08044F86
	ldr r4, _08044F68 @ =0x0203CD46
	ldr r0, [r6, #0x5c]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #0
	ldrsh r5, [r0, r1]
	adds r4, r5, #1
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldr r0, [r6, #0x5c]
	bl sub_804B6C4
	lsls r5, r5, #1
	adds r5, r5, r0
	adds r0, r5, #0
	bl sub_804A5A8
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [r6, #0x4c]
	ldr r0, [r6, #0x5c]
	bl sub_804B6C4
	lsls r4, r4, #0x10
	asrs r4, r4, #0xf
	adds r4, r4, r0
	adds r0, r4, #0
	bl sub_804A5A8
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [r6, #0x50]
	strh r7, [r6, #0x2c]
	ldr r1, [r6, #0x4c]
	strh r1, [r6, #0x2e]
	str r7, [r6, #0x54]
	str r7, [r6, #0x58]
	cmp r1, r0
	bne _08044F58
	movs r0, #1
	str r0, [r6, #0x58]
_08044F58:
	ldr r1, [r6, #0x4c]
	ldr r0, [r6, #0x50]
	cmp r1, r0
	ble _08044F6C
	movs r0, #1
	rsbs r0, r0, #0
	b _08044F6E
	.align 2, 0
_08044F68: .4byte 0x0203CD46
_08044F6C:
	movs r0, #1
_08044F6E:
	str r0, [r6, #0x48]
	adds r0, r6, #0
	bl Proc_Break
	ldr r0, [r6, #0x5c]
	bl sub_804B6C4
	ldr r1, _08044F8C @ =0x02017778
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r1, #2
	strh r1, [r0]
_08044F86:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08044F8C: .4byte 0x02017778

	thumb_func_start sub_8044F90
sub_8044F90: @ 0x08044F90
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	ldr r4, _08045064 @ =0x02000000
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	lsls r0, r0, #3
	adds r0, r0, r4
	ldr r7, [r0]
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	ldr r0, [r5, #0x60]
	bl sub_804B6C4
	lsls r0, r0, #3
	adds r0, r0, r4
	ldr r6, [r0]
	ldr r0, [r5, #0x60]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, #1
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r0, [r0]
	mov r8, r0
	ldr r1, [r5, #0x58]
	cmp r1, #0
	bne _08045020
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #4
	bne _08045020
	strh r1, [r5, #0x2c]
	ldr r0, [r5, #0x48]
	ldrh r1, [r5, #0x2e]
	adds r0, r1, r0
	strh r0, [r5, #0x2e]
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	ldr r1, _08045068 @ =0x0203CDA0
	lsls r0, r0, #1
	adds r0, r0, r1
	ldr r1, [r5, #0x48]
	ldrh r2, [r0]
	adds r1, r2, r1
	strh r1, [r0]
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x75
	bl sub_805BCA8
	movs r0, #2
	ldrsh r1, [r7, r0]
	movs r0, #0x75
	movs r2, #1
	bl sub_805BDC0
	movs r2, #0x2e
	ldrsh r1, [r5, r2]
	ldr r0, [r5, #0x50]
	cmp r1, r0
	bne _08045020
	movs r0, #1
	str r0, [r5, #0x58]
_08045020:
	ldr r1, [r5, #0x54]
	cmp r1, #0x1e
	bne _080450C4
	ldr r0, [r5, #0x58]
	cmp r0, #1
	bne _080450C4
	ldr r4, _0804506C @ =0x0203CD46
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	ldrh r1, [r0]
	adds r1, #1
	movs r4, #0
	strh r1, [r0]
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	ldr r1, _08045070 @ =0x02017778
	lsls r0, r0, #1
	adds r0, r0, r1
	strh r4, [r0]
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	bne _080450B8
	bl sub_8042578
	cmp r0, #1
	bne _08045074
	movs r0, #0
	b _08045088
	.align 2, 0
_08045064: .4byte 0x02000000
_08045068: .4byte 0x0203CDA0
_0804506C: .4byte 0x0203CD46
_08045070: .4byte 0x02017778
_08045074:
	ldr r4, _08045098 @ =0x0203CD84
	adds r0, r6, #0
	bl sub_804B6C4
	adds r0, r0, r4
	ldrb r0, [r0]
	bl ShouldDisplayDeathQuote
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
_08045088:
	cmp r0, #1
	bne _0804509C
	adds r0, r6, #0
	mov r1, r8
	bl sub_80455C0
	b _080450B8
	.align 2, 0
_08045098: .4byte 0x0203CD84
_0804509C:
	bl sub_804C554
	adds r0, r6, #0
	mov r1, r8
	bl sub_80457E8
	ldr r0, [r5, #0x60]
	bl sub_804B6C4
	ldr r1, _080450C0 @ =0x0203CCF8
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r1, #0
	strh r1, [r0]
_080450B8:
	adds r0, r5, #0
	bl Proc_Break
	b _080450D0
	.align 2, 0
_080450C0: .4byte 0x0203CCF8
_080450C4:
	adds r0, r1, #1
	str r0, [r5, #0x54]
	cmp r0, #0x1d
	bls _080450D0
	movs r0, #0x1e
	str r0, [r5, #0x54]
_080450D0:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80450DC
sub_80450DC: @ 0x080450DC
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	bl sub_80588E0
	adds r7, r0, #0
	ldr r1, _08045114 @ =0x02017720
	ldr r5, [r1]
	cmp r5, #0
	bne _0804517A
	movs r0, #1
	str r0, [r1]
	ldr r0, _08045118 @ =0x085CB790
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	strh r5, [r4, #0x2c]
	adds r0, r6, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _08045120
	ldr r0, _0804511C @ =0x02000000
	ldr r1, [r0, #8]
	str r1, [r4, #0x5c]
	ldr r0, [r0]
	b _08045128
	.align 2, 0
_08045114: .4byte 0x02017720
_08045118: .4byte 0x085CB790
_0804511C: .4byte 0x02000000
_08045120:
	ldr r0, _08045148 @ =0x02000000
	ldr r1, [r0]
	str r1, [r4, #0x5c]
	ldr r0, [r0, #8]
_08045128:
	str r0, [r4, #0x60]
	ldr r0, [r4, #0x60]
	movs r1, #1
	bl sub_8056A18
	str r6, [r4, #0x64]
	adds r4, #0x29
	movs r0, #0
	strb r0, [r4]
	adds r0, r6, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _0804514C
	movs r0, #0x10
	b _0804514E
	.align 2, 0
_08045148: .4byte 0x02000000
_0804514C:
	movs r0, #0x20
_0804514E:
	ands r0, r7
	cmp r0, #0
	beq _08045158
	movs r0, #1
	strb r0, [r4]
_08045158:
	ldrb r4, [r4]
	cmp r4, #1
	bne _08045164
	adds r0, r6, #0
	bl sub_805A998
_08045164:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0xd7
	bl sub_805BCA8
	movs r0, #2
	ldrsh r1, [r6, r0]
	movs r0, #0xd7
	movs r2, #1
	bl sub_805BDC0
_0804517A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8045180
sub_8045180: @ 0x08045180
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _080451C6
	ldr r4, _080451AC @ =0x0203CD84
	ldr r0, [r5, #0x60]
	bl sub_804B6C4
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #3
	bne _080451B0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x50
	bne _080451DA
	b _080451BE
	.align 2, 0
_080451AC: .4byte 0x0203CD84
_080451B0:
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x1e
	bne _080451DA
_080451BE:
	adds r0, r5, #0
	bl Proc_Break
	b _080451DA
_080451C6:
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x50
	bne _080451DA
	adds r0, r5, #0
	bl Proc_Break
_080451DA:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_80451E0
sub_80451E0: @ 0x080451E0
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldr r1, _08045210 @ =0x02017720
	ldr r0, [r1]
	cmp r0, #0
	bne _080452AC
	movs r0, #1
	str r0, [r1]
	ldr r0, _08045214 @ =0x085CB7B8
	movs r1, #3
	bl SpawnProc
	adds r6, r0, #0
	adds r0, r7, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _0804521C
	ldr r0, _08045218 @ =0x02000000
	ldr r1, [r0, #8]
	str r1, [r6, #0x5c]
	ldr r0, [r0]
	b _08045224
	.align 2, 0
_08045210: .4byte 0x02017720
_08045214: .4byte 0x085CB7B8
_08045218: .4byte 0x02000000
_0804521C:
	ldr r0, _0804527C @ =0x02000000
	ldr r1, [r0]
	str r1, [r6, #0x5c]
	ldr r0, [r0, #8]
_08045224:
	str r0, [r6, #0x60]
	ldr r4, _08045280 @ =0x0203CD46
	ldr r0, [r6, #0x60]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #0
	ldrsh r5, [r0, r1]
	adds r4, r5, #1
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldr r0, [r6, #0x60]
	bl sub_804B6C4
	lsls r5, r5, #1
	adds r5, r5, r0
	adds r0, r5, #0
	bl sub_804A5A8
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [r6, #0x4c]
	ldr r0, [r6, #0x60]
	bl sub_804B6C4
	lsls r4, r4, #0x10
	asrs r4, r4, #0xf
	adds r4, r4, r0
	adds r0, r4, #0
	bl sub_804A5A8
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	str r1, [r6, #0x50]
	movs r0, #0
	str r0, [r6, #0x54]
	str r0, [r6, #0x58]
	ldr r0, [r6, #0x4c]
	cmp r0, r1
	bne _08045284
	movs r0, #1
	str r0, [r6, #0x58]
	b _08045292
	.align 2, 0
_0804527C: .4byte 0x02000000
_08045280: .4byte 0x0203CD46
_08045284:
	cmp r0, r1
	ble _0804528E
	movs r0, #1
	rsbs r0, r0, #0
	b _08045290
_0804528E:
	movs r0, #1
_08045290:
	str r0, [r6, #0x48]
_08045292:
	movs r0, #0
	strh r0, [r6, #0x2c]
	ldr r0, [r6, #0x4c]
	strh r0, [r6, #0x2e]
	str r7, [r6, #0x64]
	ldr r0, [r6, #0x5c]
	bl sub_804B6C4
	ldr r1, _080452B4 @ =0x02017778
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r1, #2
	strh r1, [r0]
_080452AC:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080452B4: .4byte 0x02017778

	thumb_func_start sub_80452B8
sub_80452B8: @ 0x080452B8
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r6, [r5, #0x60]
	ldr r1, [r5, #0x58]
	cmp r1, #0
	bne _08045314
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #4
	bne _08045314
	strh r1, [r5, #0x2c]
	ldr r0, [r5, #0x48]
	ldrh r1, [r5, #0x2e]
	adds r0, r1, r0
	strh r0, [r5, #0x2e]
	adds r0, r6, #0
	bl sub_804B6C4
	ldr r1, _0804534C @ =0x0203CDA0
	lsls r0, r0, #1
	adds r0, r0, r1
	ldr r1, [r5, #0x48]
	ldrh r2, [r0]
	adds r1, r2, r1
	strh r1, [r0]
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x75
	bl sub_805BCA8
	movs r0, #2
	ldrsh r1, [r6, r0]
	movs r0, #0x75
	movs r2, #1
	bl sub_805BDC0
	movs r2, #0x2e
	ldrsh r1, [r5, r2]
	ldr r0, [r5, #0x50]
	cmp r1, r0
	bne _08045314
	movs r0, #1
	str r0, [r5, #0x58]
_08045314:
	ldr r1, [r5, #0x54]
	cmp r1, #0x1e
	bne _08045358
	ldr r0, [r5, #0x58]
	cmp r0, #1
	bne _08045358
	ldr r4, _08045350 @ =0x0203CD46
	adds r0, r6, #0
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	ldrh r1, [r0]
	adds r1, #1
	movs r4, #0
	strh r1, [r0]
	adds r0, r6, #0
	bl sub_804B6C4
	ldr r1, _08045354 @ =0x02017778
	lsls r0, r0, #1
	adds r0, r0, r1
	strh r4, [r0]
	adds r0, r5, #0
	bl Proc_Break
	b _08045364
	.align 2, 0
_0804534C: .4byte 0x0203CDA0
_08045350: .4byte 0x0203CD46
_08045354: .4byte 0x02017778
_08045358:
	adds r0, r1, #1
	str r0, [r5, #0x54]
	cmp r0, #0x1d
	bls _08045364
	movs r0, #0x1e
	str r0, [r5, #0x54]
_08045364:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_804536C
sub_804536C: @ 0x0804536C
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	ldr r1, _080453B8 @ =0x02017720
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080453BC @ =0x085CB7E0
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	str r6, [r4, #0x60]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x29
	mov r1, r8
	strb r1, [r0]
	str r5, [r4, #0x64]
	ldr r0, [r4, #0x5c]
	movs r1, #0
	bl sub_8056A18
	ldr r0, [r4, #0x5c]
	ldr r1, [r4, #0x60]
	bl sub_8045478
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080453B8: .4byte 0x02017720
_080453BC: .4byte 0x085CB7E0

	thumb_func_start sub_80453C0
sub_80453C0: @ 0x080453C0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r6, r0, #0
	ldr r5, _08045428 @ =0x0203CD84
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	adds r0, r0, r5
	ldrb r0, [r0]
	cmp r0, #0x66
	beq _080453EA
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	adds r0, r0, r5
	ldrb r0, [r0]
	cmp r0, #3
	bne _08045430
_080453EA:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	cmp r0, #0x3a
	bne _0804546C
	ldr r5, _0804542C @ =0x0203CD46
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r5
	ldrh r1, [r0]
	adds r1, #1
	strh r1, [r0]
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	bne _08045420
	adds r0, r6, #0
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r5
	ldrh r1, [r0]
	adds r1, #1
	strh r1, [r0]
_08045420:
	adds r0, r4, #0
	bl Proc_Break
	b _0804546C
	.align 2, 0
_08045428: .4byte 0x0203CD84
_0804542C: .4byte 0x0203CD46
_08045430:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	cmp r0, #8
	bne _0804546C
	ldr r5, _08045474 @ =0x0203CD46
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r5
	ldrh r1, [r0]
	adds r1, #1
	strh r1, [r0]
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	bne _08045466
	adds r0, r6, #0
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r5
	ldrh r1, [r0]
	adds r1, #1
	strh r1, [r0]
_08045466:
	adds r0, r4, #0
	bl Proc_Break
_0804546C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08045474: .4byte 0x0203CD46

	thumb_func_start sub_8045478
sub_8045478: @ 0x08045478
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08045498 @ =0x085CB808
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	str r5, [r0, #0x60]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08045498: .4byte 0x085CB808

	thumb_func_start sub_804549C
sub_804549C: @ 0x0804549C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	ldr r0, [r7, #0x5c]
	mov r8, r0
	ldr r1, [r7, #0x60]
	mov sb, r1
	ldr r4, _080454F8 @ =0x08111C44
	movs r2, #0x2c
	ldrsh r0, [r7, r2]
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r2, #0
	ldrsh r1, [r0, r2]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08045504
	mov r0, r8
	bl sub_804B6C4
	ldr r5, _080454FC @ =0x02000020
	lsls r0, r0, #1
	adds r0, r0, r5
	ldr r4, _08045500 @ =0x0201E12C
	ldrh r0, [r0]
	ldrh r1, [r4]
	subs r0, r0, r1
	mov r2, r8
	strh r0, [r2, #2]
	ldr r0, [r7, #0x60]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r5
	ldrh r0, [r0]
	ldrh r4, [r4]
	subs r0, r0, r4
	mov r1, sb
	strh r0, [r1, #2]
	adds r0, r7, #0
	bl Proc_Break
	b _08045564
	.align 2, 0
_080454F8: .4byte 0x08111C44
_080454FC: .4byte 0x02000020
_08045500: .4byte 0x0201E12C
_08045504:
	mov r0, r8
	bl sub_804B6C4
	cmp r0, #1
	bne _08045520
	movs r2, #0x2c
	ldrsh r0, [r7, r2]
	lsls r0, r0, #1
	adds r0, r0, r4
	ldrh r0, [r0]
	rsbs r0, r0, #0
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	b _0804552A
_08045520:
	movs r1, #0x2c
	ldrsh r0, [r7, r1]
	lsls r0, r0, #1
	adds r0, r0, r4
	ldrh r4, [r0]
_0804552A:
	ldr r0, [r7, #0x5c]
	bl sub_804B6C4
	ldr r6, _08045570 @ =0x02000020
	lsls r0, r0, #1
	adds r0, r0, r6
	ldr r5, _08045574 @ =0x0201E12C
	ldr r1, [r5]
	ldrh r0, [r0]
	subs r1, r0, r1
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r1, r4, r1
	mov r2, r8
	strh r1, [r2, #2]
	ldr r0, [r7, #0x60]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r6
	ldr r1, [r5]
	ldrh r0, [r0]
	subs r1, r0, r1
	adds r4, r4, r1
	mov r0, sb
	strh r4, [r0, #2]
	ldrh r0, [r7, #0x2c]
	adds r0, #1
	strh r0, [r7, #0x2c]
_08045564:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08045570: .4byte 0x02000020
_08045574: .4byte 0x0201E12C

	thumb_func_start sub_8045578
sub_8045578: @ 0x08045578
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r1, _0804559C @ =0x02017720
	ldr r4, [r1]
	cmp r4, #0
	bne _08045594
	movs r0, #1
	str r0, [r1]
	ldr r0, _080455A0 @ =0x085CB820
	movs r1, #3
	bl SpawnProc
	strh r4, [r0, #0x2c]
	str r5, [r0, #0x64]
_08045594:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804559C: .4byte 0x02017720
_080455A0: .4byte 0x085CB820

	thumb_func_start sub_80455A4
sub_80455A4: @ 0x080455A4
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x11
	bne _080455BC
	adds r0, r1, #0
	bl Proc_Break
_080455BC:
	pop {r0}
	bx r0

	thumb_func_start sub_80455C0
sub_80455C0: @ 0x080455C0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08045604 @ =0x085CB850
	movs r1, #3
	bl SpawnProc
	adds r6, r0, #0
	str r4, [r6, #0x5c]
	str r5, [r6, #0x60]
	ldr r1, _08045608 @ =0x02017730
	movs r0, #1
	str r0, [r1]
	bl sub_8058998
	cmp r0, #0
	beq _080455FC
	ldr r0, [r6, #0x5c]
	bl sub_805A77C
	str r0, [r6, #0x64]
	ldr r2, _0804560C @ =0x02000028
	ldr r1, _08045610 @ =0x0201E12C
	ldr r1, [r1]
	subs r1, #0x4e
	ldrh r2, [r2]
	subs r1, r2, r1
	strh r1, [r0, #0x32]
	movs r1, #0xb2
	strh r1, [r0, #0x3a]
_080455FC:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08045604: .4byte 0x085CB850
_08045608: .4byte 0x02017730
_0804560C: .4byte 0x02000028
_08045610: .4byte 0x0201E12C

	thumb_func_start sub_8045614
sub_8045614: @ 0x08045614
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x5c]
	bl sub_804B80C
	adds r7, r0, #0
	movs r6, #0
	ldr r0, _08045680 @ =0x02017744
	ldr r0, [r0]
	cmp r0, #0
	bne _08045646
	ldr r0, _08045684 @ =0x02017724
	ldr r0, [r0]
	cmp r0, #0
	bne _08045646
	ldr r4, _08045688 @ =0x0201E124
	adds r0, r7, #0
	bl sub_804B6C4
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r0, [r0]
	cmp r0, #1
	bne _08045646
	movs r6, #1
_08045646:
	cmp r6, #1
	bne _0804567A
	movs r0, #7
	strh r0, [r5, #0x2c]
	ldr r0, _0804568C @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08045674
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	ldr r1, _08045690 @ =0x0201773C
	ldr r1, [r1]
	cmp r0, r1
	beq _08045674
	movs r1, #1
	rsbs r1, r1, #0
	adds r0, r7, #0
	bl sub_8045C90
	movs r0, #0
	strh r0, [r5, #0x2c]
_08045674:
	adds r0, r5, #0
	bl Proc_Break
_0804567A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08045680: .4byte 0x02017744
_08045684: .4byte 0x02017724
_08045688: .4byte 0x0201E124
_0804568C: .4byte 0x0203CD14
_08045690: .4byte 0x0201773C

	thumb_func_start sub_8045694
sub_8045694: @ 0x08045694
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #8
	bne _080456BE
	movs r0, #1
	movs r1, #7
	bl sub_8048DA4
	movs r0, #1
	movs r1, #7
	movs r2, #0
	bl sub_8048E88
	adds r0, r4, #0
	bl Proc_Break
_080456BE:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_80456C4
sub_80456C4: @ 0x080456C4
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	bl sub_8048DF4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08045734
	bl sub_8043960
	bl sub_8044264
	movs r0, #0
	str r0, [sp]
	ldr r1, _0804573C @ =gBg0Tm
	ldr r2, _08045740 @ =0x01000200
	mov r0, sp
	bl CpuFastSet
	ldr r0, _08045744 @ =0x02000030
	ldrh r1, [r0]
	ldrh r2, [r0, #2]
	movs r0, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	bl EnableBgSync
	bl sub_80438D8
	ldr r5, _08045748 @ =0x0203CD84
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	adds r0, r0, r5
	ldrb r0, [r0]
	cmp r0, #0x66
	bne _08045720
	bl sub_805AFD4
_08045720:
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	adds r0, r0, r5
	ldrb r0, [r0]
	bl sub_806B808
	adds r0, r4, #0
	bl Proc_Break
_08045734:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804573C: .4byte gBg0Tm
_08045740: .4byte 0x01000200
_08045744: .4byte 0x02000030
_08045748: .4byte 0x0203CD84

	thumb_func_start sub_804574C
sub_804574C: @ 0x0804574C
	push {r4, r5, lr}
	adds r4, r0, #0
	bl IsEventRunning
	lsls r0, r0, #0x18
	asrs r5, r0, #0x18
	cmp r5, #0
	bne _080457A4
	bl sub_804C554
	ldr r0, [r4, #0x5c]
	ldr r1, [r4, #0x60]
	bl sub_80457E8
	bl sub_8044608
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	ldr r1, _080457AC @ =0x0203CCF8
	lsls r0, r0, #1
	adds r0, r0, r1
	strh r5, [r0]
	movs r0, #1
	bl EnableBgSync
	movs r0, #0
	movs r1, #7
	bl sub_8048DA4
	movs r0, #0
	movs r1, #7
	movs r2, #0
	bl sub_8048E88
	bl sub_8043970
	bl sub_8044274
	bl sub_80438C8
	adds r0, r4, #0
	bl Proc_Break
_080457A4:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080457AC: .4byte 0x0203CCF8

	thumb_func_start sub_80457B0
sub_80457B0: @ 0x080457B0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r6, [r5, #0x64]
	bl sub_8048DF4
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #1
	bne _080457DC
	ldr r0, _080457E4 @ =0x02017730
	movs r1, #0
	str r1, [r0]
	bl sub_8058998
	cmp r0, #0
	beq _080457D6
	adds r0, r6, #0
	adds r0, #0x29
	strb r4, [r0]
_080457D6:
	adds r0, r5, #0
	bl Proc_Break
_080457DC:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080457E4: .4byte 0x02017730

	thumb_func_start sub_80457E8
sub_80457E8: @ 0x080457E8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0804581C @ =0x02017720
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r1, _08045820 @ =0x0201772C
	movs r0, #1
	str r0, [r1]
	ldr r0, _08045824 @ =0x085CB888
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	str r5, [r0, #0x60]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	adds r0, r4, #0
	bl sub_8046ED8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804581C: .4byte 0x02017720
_08045820: .4byte 0x0201772C
_08045824: .4byte 0x085CB888

	thumb_func_start sub_8045828
sub_8045828: @ 0x08045828
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	bl sub_80588E0
	adds r4, r0, #0
	ldr r6, [r5, #0x5c]
	ldr r7, [r5, #0x60]
	adds r0, r6, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _08045844
	movs r0, #0x15
	b _08045846
_08045844:
	movs r0, #0x2a
_08045846:
	ands r4, r0
	ldr r0, _0804587C @ =0x02017744
	ldr r0, [r0]
	cmp r0, #0
	bne _080458BA
	ldr r0, _08045880 @ =0x02017724
	ldr r0, [r0]
	cmp r0, #0
	bne _080458BA
	movs r0, #3
	ands r0, r4
	cmp r0, #0
	beq _08045884
	movs r1, #2
	ldrh r0, [r6]
	orrs r0, r1
	strh r0, [r6]
	ldrh r0, [r7]
	orrs r0, r1
	strh r0, [r7]
	ldr r0, [r5, #0x5c]
	bl sub_8058A1C
	bl sub_8058D34
	b _0804589C
	.align 2, 0
_0804587C: .4byte 0x02017744
_08045880: .4byte 0x02017724
_08045884:
	movs r0, #0x30
	ands r0, r4
	cmp r0, #0
	bne _0804589C
	movs r0, #0xc
	ands r0, r4
	cmp r0, #0
	beq _080458A8
	ldr r0, [r5, #0x5c]
	ldr r1, [r5, #0x60]
	bl sub_8045974
_0804589C:
	ldr r0, [r5, #0x5c]
	bl sub_8058A08
	movs r1, #1
	strh r1, [r0]
	b _080458B0
_080458A8:
	ldr r0, [r5, #0x5c]
	ldr r1, [r5, #0x60]
	bl sub_8045974
_080458B0:
	movs r0, #0x32
	strh r0, [r5, #0x2e]
	adds r0, r5, #0
	bl Proc_Break
_080458BA:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80458C0
sub_80458C0: @ 0x080458C0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	bl sub_80588E0
	adds r5, r0, #0
	ldr r6, [r4, #0x5c]
	adds r0, r6, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _080458DA
	movs r0, #0x15
	b _080458DC
_080458DA:
	movs r0, #0x2a
_080458DC:
	ands r5, r0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0x1e
	bne _0804594A
	movs r0, #3
	ands r0, r5
	cmp r0, #0
	beq _08045918
	ldr r0, [r4, #0x5c]
	ldr r1, [r4, #0x60]
	bl sub_8045B24
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0xd6
	bl sub_805BCA8
	movs r0, #2
	ldrsh r1, [r6, r0]
	movs r0, #0xd6
	movs r2, #1
	bl sub_805BDC0
	movs r0, #0x64
	strh r0, [r4, #0x2e]
	b _08045966
_08045918:
	movs r0, #0x30
	ands r0, r5
	cmp r0, #0
	beq _08045926
	movs r0, #0x1f
	strh r0, [r4, #0x2e]
	b _08045966
_08045926:
	ldr r0, [r4, #0x5c]
	ldr r1, [r4, #0x60]
	bl sub_80459F8
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0xd6
	bl sub_805BCA8
	movs r2, #2
	ldrsh r1, [r6, r2]
	movs r0, #0xd6
	movs r2, #1
	bl sub_805BDC0
	movs r0, #0x32
	strh r0, [r4, #0x2e]
	b _08045966
_0804594A:
	movs r2, #0x2e
	ldrsh r0, [r4, r2]
	cmp r1, r0
	bne _08045966
	ldr r1, _0804596C @ =0x02017720
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	ldr r1, _08045970 @ =0x0201772C
	movs r0, #0
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08045966:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804596C: .4byte 0x02017720
_08045970: .4byte 0x0201772C

	thumb_func_start sub_8045974
sub_8045974: @ 0x08045974
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08045994 @ =0x085CB8A8
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	str r5, [r0, #0x60]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08045994: .4byte 0x085CB8A8

	thumb_func_start sub_8045998
sub_8045998: @ 0x08045998
	push {r4, r5, lr}
	adds r2, r0, #0
	ldr r3, [r2, #0x5c]
	ldr r4, [r2, #0x60]
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #6
	ble _080459D0
	ldr r1, _080459CC @ =0x0000FFFD
	adds r0, r1, #0
	ldrh r5, [r3]
	ands r0, r5
	strh r0, [r3]
	ldrh r0, [r4]
	ands r1, r0
	strh r1, [r4]
	movs r0, #0
	strh r0, [r2, #0x2c]
	ldrh r0, [r2, #0x2e]
	adds r0, #1
	strh r0, [r2, #0x2e]
	b _080459DE
	.align 2, 0
_080459CC: .4byte 0x0000FFFD
_080459D0:
	movs r0, #2
	ldrh r1, [r3]
	orrs r1, r0
	strh r1, [r3]
	ldrh r1, [r4]
	orrs r0, r1
	strh r0, [r4]
_080459DE:
	movs r5, #0x2e
	ldrsh r0, [r2, r5]
	cmp r0, #5
	ble _080459F2
	movs r0, #0
	strh r0, [r2, #0x2c]
	strh r0, [r2, #0x2e]
	adds r0, r2, #0
	bl Proc_Break
_080459F2:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_80459F8
sub_80459F8: @ 0x080459F8
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08045A60 @ =0x085CB8C0
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	str r5, [r0, #0x60]
	movs r6, #0
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	movs r0, #0xa
	strh r0, [r4, #0xa]
	strh r0, [r5, #0xa]
	bl BasSort
	ldr r2, _08045A64 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r6, [r0]
	ldr r0, _08045A68 @ =0x0000FFE0
	ldrh r1, [r2, #0x3c]
	ands r0, r1
	ldr r1, _08045A6C @ =0x0000E0FF
	ands r0, r1
	movs r3, #0xc0
	lsls r3, r3, #4
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2, #0x3c]
	adds r1, r2, #0
	adds r1, #0x3d
	movs r0, #0x20
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08045A60: .4byte 0x085CB8C0
_08045A64: .4byte gDispIo
_08045A68: .4byte 0x0000FFE0
_08045A6C: .4byte 0x0000E0FF

	thumb_func_start sub_8045A70
sub_8045A70: @ 0x08045A70
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r2, [r4, #0x5c]
	ldr r3, [r4, #0x60]
	ldr r0, [r2, #0x1c]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r2, #0x1c]
	ldr r0, [r3, #0x1c]
	orrs r0, r1
	str r0, [r3, #0x1c]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r5, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3c
	ble _08045AE4
	movs r0, #2
	ldrh r1, [r2]
	orrs r1, r0
	strh r1, [r2]
	ldrh r1, [r3]
	orrs r0, r1
	strh r0, [r3]
	ldr r0, [r2, #0x1c]
	ldr r1, _08045ADC @ =0xFFFFFBFF
	ands r0, r1
	str r0, [r2, #0x1c]
	ldr r0, [r3, #0x1c]
	ands r0, r1
	str r0, [r3, #0x1c]
	ldr r2, _08045AE0 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x45
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	adds r0, r4, #0
	bl Proc_Break
	b _08045B16
	.align 2, 0
_08045ADC: .4byte 0xFFFFFBFF
_08045AE0: .4byte gDispIo
_08045AE4:
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r0, #0x3c
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	ldr r3, _08045B20 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r1, #0x3f
	ldrb r4, [r2]
	ands r1, r4
	strb r1, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r5, [r0]
_08045B16:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08045B20: .4byte gDispIo

	thumb_func_start sub_8045B24
sub_8045B24: @ 0x08045B24
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08045BE8 @ =0x085CB8D8
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	str r5, [r0, #0x60]
	movs r2, #2
	movs r6, #0
	movs r3, #0
	ldrh r1, [r4]
	orrs r1, r2
	strh r1, [r4]
	ldrh r1, [r5]
	orrs r2, r1
	strh r2, [r5]
	strh r3, [r0, #0x2c]
	strh r3, [r0, #0x2e]
	ldr r0, [r0, #0x5c]
	bl sub_8058A34
	ldr r5, _08045BEC @ =gDispIo
	adds r2, r5, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r5, #0
	adds r1, #0x44
	movs r4, #0x10
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x46
	strb r6, [r0]
	ldr r0, _08045BF0 @ =0x0000FFE0
	ldrh r2, [r5, #0x3c]
	ands r0, r2
	movs r1, #8
	orrs r0, r1
	ldr r1, _08045BF4 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5, #0x3c]
	movs r2, #0x20
	ldrb r0, [r5, #1]
	orrs r0, r2
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r5, #1]
	adds r0, r5, #0
	adds r0, #0x2d
	strb r6, [r0]
	adds r0, #4
	strb r6, [r0]
	adds r1, r5, #0
	adds r1, #0x2c
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	adds r3, r5, #0
	adds r3, #0x34
	movs r0, #1
	ldrb r1, [r3]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	orrs r0, r4
	orrs r0, r2
	strb r0, [r3]
	adds r0, r5, #0
	adds r0, #0x3d
	ldrb r1, [r0]
	orrs r2, r1
	strb r2, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08045BE8: .4byte 0x085CB8D8
_08045BEC: .4byte gDispIo
_08045BF0: .4byte 0x0000FFE0
_08045BF4: .4byte 0x0000E0FF

	thumb_func_start sub_8045BF8
sub_8045BF8: @ 0x08045BF8
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r5, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3c
	ble _08045C4C
	ldr r0, _08045C44 @ =gBg3Tm
	movs r1, #0xf0
	lsls r1, r1, #8
	bl TmFill
	movs r0, #8
	bl EnableBgSync
	ldr r2, _08045C48 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x45
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	adds r0, r4, #0
	bl Proc_Break
	b _08045C84
	.align 2, 0
_08045C44: .4byte gBg3Tm
_08045C48: .4byte gDispIo
_08045C4C:
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r0, #0x3c
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	ldr r1, _08045C8C @ =gDispIo
	mov ip, r1
	mov r3, ip
	adds r3, #0x3c
	movs r1, #0x3f
	ldrb r2, [r3]
	ands r1, r2
	movs r2, #0x40
	orrs r1, r2
	strb r1, [r3]
	mov r1, ip
	adds r1, #0x44
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r5, [r0]
_08045C84:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08045C8C: .4byte gDispIo

	thumb_func_start sub_8045C90
sub_8045C90: @ 0x08045C90
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	lsls r1, r1, #0x10
	lsrs r6, r1, #0x10
	ldr r0, _08045CAC @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #4
	bhi _08045D5C
	lsls r0, r0, #2
	ldr r1, _08045CB0 @ =_08045CB4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08045CAC: .4byte 0x0203CD14
_08045CB0: .4byte _08045CB4
_08045CB4: @ jump table
	.4byte _08045D5C @ case 0
	.4byte _08045CC8 @ case 1
	.4byte _08045CC8 @ case 2
	.4byte _08045D5C @ case 3
	.4byte _08045D5C @ case 4
_08045CC8:
	ldr r0, _08045CFC @ =0x085CB8F0
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	adds r0, r5, #0
	bl sub_804B6C4
	adds r2, r4, #0
	adds r2, #0x29
	movs r1, #0
	strb r0, [r2]
	strh r1, [r4, #0x2c]
	lsls r1, r6, #0x10
	asrs r2, r1, #0x10
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	beq _08045D04
	asrs r0, r1, #0x11
	strh r0, [r4, #0x2e]
	subs r0, r2, r0
	strh r0, [r4, #0x30]
	ldr r2, _08045D00 @ =0x0203CD14
	b _08045D1E
	.align 2, 0
_08045CFC: .4byte 0x085CB8F0
_08045D00: .4byte 0x0203CD14
_08045D04:
	ldr r0, _08045D14 @ =0x0203CD14
	adds r2, r0, #0
	ldrh r0, [r2]
	cmp r0, #1
	bne _08045D18
	movs r0, #5
	b _08045D1A
	.align 2, 0
_08045D14: .4byte 0x0203CD14
_08045D18:
	movs r0, #7
_08045D1A:
	strh r0, [r4, #0x2e]
	strh r0, [r4, #0x30]
_08045D1E:
	movs r1, #0xf0
	ldrh r2, [r2]
	cmp r2, #1
	bne _08045D28
	movs r1, #0x20
_08045D28:
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r2, [r0]
	cmp r2, #0
	bne _08045D40
	rsbs r0, r1, #0
	strh r0, [r4, #0x32]
	lsrs r0, r0, #1
	strh r0, [r4, #0x34]
	strh r0, [r4, #0x36]
	strh r2, [r4, #0x38]
	b _08045D4E
_08045D40:
	movs r0, #0
	strh r0, [r4, #0x32]
	rsbs r1, r1, #0
	lsrs r0, r1, #1
	strh r0, [r4, #0x34]
	strh r0, [r4, #0x36]
	strh r1, [r4, #0x38]
_08045D4E:
	ldr r1, _08045D64 @ =0x0201E12C
	movs r2, #0x32
	ldrsh r0, [r4, r2]
	str r0, [r1]
	ldr r1, _08045D68 @ =0x02017740
	movs r0, #1
	str r0, [r1]
_08045D5C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08045D64: .4byte 0x0201E12C
_08045D68: .4byte 0x02017740

	thumb_func_start sub_8045D6C
sub_8045D6C: @ 0x08045D6C
	push {r4, r5, lr}
	ldr r3, _08045D9C @ =0x02000000
	ldr r4, [r3]
	rsbs r1, r1, #0
	ldr r2, _08045DA0 @ =0x02000020
	ldrh r5, [r2]
	adds r0, r5, r1
	strh r0, [r4, #2]
	ldr r4, [r3, #4]
	ldrh r5, [r2]
	adds r0, r5, r1
	strh r0, [r4, #2]
	ldr r4, [r3, #8]
	ldrh r5, [r2, #2]
	adds r0, r5, r1
	strh r0, [r4, #2]
	ldr r4, [r3, #0xc]
	ldrh r2, [r2, #2]
	adds r1, r2, r1
	strh r1, [r4, #2]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08045D9C: .4byte 0x02000000
_08045DA0: .4byte 0x02000020

	thumb_func_start sub_8045DA4
sub_8045DA4: @ 0x08045DA4
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0x32
	ldrsh r1, [r4, r0]
	adds r0, r4, #0
	bl sub_8045D6C
	bl sub_805894C
	cmp r0, #0
	beq _08045DC2
	movs r1, #0x32
	ldrsh r0, [r4, r1]
	bl sub_8058F60
_08045DC2:
	movs r1, #0x32
	ldrsh r0, [r4, r1]
	bl sub_8045EE8
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8045DDC
sub_8045DDC: @ 0x08045DDC
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0x32
	ldrsh r1, [r4, r0]
	movs r5, #0x34
	ldrsh r2, [r4, r5]
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r5, #0x2e
	ldrsh r0, [r4, r5]
	str r0, [sp]
	movs r0, #1
	bl Interpolate
	adds r1, r0, #0
	ldr r5, _08045E4C @ =0x0201E12C
	str r1, [r5]
	adds r0, r4, #0
	bl sub_8045D6C
	bl sub_805894C
	cmp r0, #0
	beq _08045E14
	ldr r0, [r5]
	bl sub_8058F60
_08045E14:
	ldr r0, [r5]
	bl sub_8045EE8
	bl sub_804C500
	cmp r0, #0
	beq _08045E28
	ldr r0, [r5]
	bl sub_804C50C
_08045E28:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08045E42
	movs r0, #1
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
_08045E42:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08045E4C: .4byte 0x0201E12C

	thumb_func_start sub_8045E50
sub_8045E50: @ 0x08045E50
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0x36
	ldrsh r1, [r4, r0]
	movs r5, #0x38
	ldrsh r2, [r4, r5]
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r5, #0x30
	ldrsh r0, [r4, r5]
	str r0, [sp]
	movs r0, #4
	bl Interpolate
	adds r1, r0, #0
	ldr r5, _08045EBC @ =0x0201E12C
	str r1, [r5]
	adds r0, r4, #0
	bl sub_8045D6C
	bl sub_805894C
	cmp r0, #0
	beq _08045E88
	ldr r0, [r5]
	bl sub_8058F60
_08045E88:
	ldr r0, [r5]
	bl sub_8045EE8
	bl sub_804C500
	cmp r0, #0
	beq _08045E9C
	ldr r0, [r5]
	bl sub_804C50C
_08045E9C:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08045ED6
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _08045EC4
	ldr r1, _08045EC0 @ =0x0201773C
	movs r0, #1
	b _08045EC8
	.align 2, 0
_08045EBC: .4byte 0x0201E12C
_08045EC0: .4byte 0x0201773C
_08045EC4:
	ldr r1, _08045EE0 @ =0x0201773C
	movs r0, #0
_08045EC8:
	str r0, [r1]
	ldr r1, _08045EE4 @ =0x02017740
	movs r0, #0
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08045ED6:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08045EE0: .4byte 0x0201773C
_08045EE4: .4byte 0x02017740

	thumb_func_start sub_8045EE8
sub_8045EE8: @ 0x08045EE8
	push {r4, r5, lr}
	sub sp, #0x10
	adds r5, r0, #0
	bl sub_8058998
	cmp r0, #0
	bne _08045F38
	bl sub_804C500
	cmp r0, #0
	bne _08045F38
	asrs r4, r5, #3
	movs r1, #7
	ands r1, r5
	movs r0, #2
	movs r2, #0
	bl SetBgOffset
	lsls r4, r4, #1
	ldr r0, _08045F40 @ =0x0201C8FE
	adds r4, r4, r0
	movs r0, #0x84
	lsls r0, r0, #1
	adds r4, r4, r0
	ldr r2, _08045F44 @ =gBg2Tm
	movs r0, #0x20
	str r0, [sp]
	movs r0, #0x14
	str r0, [sp, #4]
	subs r0, #0x15
	str r0, [sp, #8]
	str r0, [sp, #0xc]
	adds r0, r4, #0
	movs r1, #0x42
	movs r3, #0x20
	bl sub_805B20C
	movs r0, #4
	bl EnableBgSync
_08045F38:
	add sp, #0x10
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08045F40: .4byte 0x0201C8FE
_08045F44: .4byte gBg2Tm

	thumb_func_start sub_8045F48
sub_8045F48: @ 0x08045F48
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08045F80 @ =0x085CB918
	movs r1, #3
	bl SpawnProc
	ldr r2, _08045F84 @ =0x085CB930
	lsls r1, r4, #3
	adds r1, r1, r2
	ldr r1, [r1]
	str r1, [r0, #0x44]
	lsls r4, r4, #1
	adds r4, #1
	lsls r4, r4, #2
	adds r4, r4, r2
	ldr r1, [r4]
	adds r3, r0, #0
	adds r3, #0x29
	movs r2, #0
	strb r1, [r3]
	adds r1, r0, #0
	adds r1, #0x2a
	strb r5, [r1]
	strh r2, [r0, #0x2c]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08045F80: .4byte 0x085CB918
_08045F84: .4byte 0x085CB930

	thumb_func_start sub_8045F88
sub_8045F88: @ 0x08045F88
	push {r4, lr}
	adds r2, r0, #0
	ldr r3, [r2, #0x44]
	movs r1, #0x2c
	ldrsh r0, [r2, r1]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldrh r4, [r0]
	ldr r1, _08045FB8 @ =0x00007FFF
	cmp r4, r1
	beq _08045FC0
	ldr r1, _08045FBC @ =0x02017758
	strh r4, [r1]
	movs r4, #0x2c
	ldrsh r0, [r2, r4]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldrh r0, [r0, #2]
	strh r0, [r1, #2]
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	b _08045FEC
	.align 2, 0
_08045FB8: .4byte 0x00007FFF
_08045FBC: .4byte 0x02017758
_08045FC0:
	adds r0, r2, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	beq _08045FD0
	cmp r0, #1
	beq _08045FE4
	b _08045FEC
_08045FD0:
	strh r0, [r2, #0x2c]
	ldr r0, _08045FE0 @ =0x02017758
	ldrh r1, [r3]
	strh r1, [r0]
	ldrh r1, [r3, #2]
	strh r1, [r0, #2]
	b _08045FEC
	.align 2, 0
_08045FE0: .4byte 0x02017758
_08045FE4:
	ldr r1, _08045FF4 @ =0x02017758
	movs r0, #0
	strh r0, [r1, #2]
	strh r0, [r1]
_08045FEC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08045FF4: .4byte 0x02017758

	thumb_func_start sub_8045FF8
sub_8045FF8: @ 0x08045FF8
	push {lr}
	ldr r0, _08046008 @ =0x085CB988
	movs r1, #3
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
_08046008: .4byte 0x085CB988

	thumb_func_start nullsub_21
nullsub_21: @ 0x0804600C
	bx lr
	.align 2, 0

	thumb_func_start sub_8046010
sub_8046010: @ 0x08046010
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08046020 @ =0x02017740
	ldr r0, [r0]
	cmp r0, #1
	bne _08046024
	movs r0, #0
	b _08046100
	.align 2, 0
_08046020: .4byte 0x02017740
_08046024:
	ldr r1, _08046050 @ =0x02017734
	movs r0, #1
	str r0, [r1]
	ldr r0, _08046054 @ =0x085CB9A0
	movs r1, #3
	bl SpawnProc
	adds r2, r0, #0
	movs r0, #0
	strh r0, [r2, #0x2c]
	ldr r1, _08046058 @ =0x02000000
	ldr r0, [r1]
	str r0, [r2, #0x5c]
	ldr r0, [r1, #8]
	str r0, [r2, #0x60]
	cmp r4, #6
	bhi _080460EC
	lsls r0, r4, #2
	ldr r1, _0804605C @ =_08046060
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08046050: .4byte 0x02017734
_08046054: .4byte 0x085CB9A0
_08046058: .4byte 0x02000000
_0804605C: .4byte _08046060
_08046060: @ jump table
	.4byte _0804607C @ case 0
	.4byte _0804608C @ case 1
	.4byte _0804609C @ case 2
	.4byte _080460AC @ case 3
	.4byte _080460BC @ case 4
	.4byte _080460CC @ case 5
	.4byte _080460DC @ case 6
_0804607C:
	ldr r0, _08046088 @ =0x08111C60
	str r0, [r2, #0x44]
	adds r1, r2, #0
	adds r1, #0x29
	movs r0, #0
	b _080460F6
	.align 2, 0
_08046088: .4byte 0x08111C60
_0804608C:
	ldr r0, _08046098 @ =0x08111C82
	str r0, [r2, #0x44]
	adds r1, r2, #0
	adds r1, #0x29
	movs r0, #0
	b _080460F6
	.align 2, 0
_08046098: .4byte 0x08111C82
_0804609C:
	ldr r0, _080460A8 @ =0x08111CCC
	str r0, [r2, #0x44]
	adds r1, r2, #0
	adds r1, #0x29
	movs r0, #0
	b _080460F6
	.align 2, 0
_080460A8: .4byte 0x08111CCC
_080460AC:
	ldr r0, _080460B8 @ =0x08111D16
	str r0, [r2, #0x44]
	adds r1, r2, #0
	adds r1, #0x29
	movs r0, #0
	b _080460F6
	.align 2, 0
_080460B8: .4byte 0x08111D16
_080460BC:
	ldr r0, _080460C8 @ =0x08111D60
	str r0, [r2, #0x44]
	adds r1, r2, #0
	adds r1, #0x29
	movs r0, #0
	b _080460F6
	.align 2, 0
_080460C8: .4byte 0x08111D60
_080460CC:
	ldr r0, _080460D8 @ =0x08111DAA
	str r0, [r2, #0x44]
	adds r1, r2, #0
	adds r1, #0x29
	movs r0, #1
	b _080460F6
	.align 2, 0
_080460D8: .4byte 0x08111DAA
_080460DC:
	ldr r0, _080460E8 @ =0x08111E14
	str r0, [r2, #0x44]
	adds r1, r2, #0
	adds r1, #0x29
	movs r0, #1
	b _080460F6
	.align 2, 0
_080460E8: .4byte 0x08111E14
_080460EC:
	ldr r0, _08046108 @ =0x08111C60
	str r0, [r2, #0x44]
	adds r1, r2, #0
	adds r1, #0x29
	movs r0, #0
_080460F6:
	strb r0, [r1]
	movs r0, #0
	strh r0, [r2, #0x34]
	strh r0, [r2, #0x3c]
	adds r0, r2, #0
_08046100:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08046108: .4byte 0x08111C60

	thumb_func_start sub_804610C
sub_804610C: @ 0x0804610C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	ldr r3, [r7, #0x44]
	ldrh r4, [r7, #0x2c]
	movs r1, #0x2c
	ldrsh r0, [r7, r1]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldrh r2, [r0]
	ldr r1, _0804618C @ =0x00007FFF
	cmp r2, r1
	bne _080461A0
	ldr r3, _08046190 @ =0x02000020
	movs r4, #0
	ldrsh r2, [r3, r4]
	ldr r0, _08046194 @ =0x0201E12C
	ldr r1, [r0]
	subs r6, r2, r1
	ldr r2, _08046198 @ =0x02000024
	movs r4, #2
	ldrsh r0, [r3, r4]
	subs r4, r0, r1
	movs r0, #2
	ldrsh r5, [r2, r0]
	lsls r1, r6, #0x10
	asrs r1, r1, #0x10
	movs r3, #0
	ldrsh r2, [r2, r3]
	movs r0, #0
	bl sub_8047C88
	lsls r1, r4, #0x10
	asrs r1, r1, #0x10
	adds r2, r5, #0
	movs r0, #1
	bl sub_8047C88
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl sub_805894C
	cmp r0, #0
	beq _0804617C
	ldrh r1, [r7, #0x34]
	ldrh r2, [r7, #0x3c]
	adds r2, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #3
	bl SetBgOffset
_0804617C:
	ldr r1, _0804619C @ =0x02017734
	movs r0, #0
	str r0, [r1]
	adds r0, r7, #0
	bl Proc_End
	b _080462B2
	.align 2, 0
_0804618C: .4byte 0x00007FFF
_08046190: .4byte 0x02000020
_08046194: .4byte 0x0201E12C
_08046198: .4byte 0x02000024
_0804619C: .4byte 0x02017734
_080461A0:
	ldr r5, _080461F8 @ =0x02017758
	strh r2, [r5]
	movs r1, #0x2c
	ldrsh r0, [r7, r1]
	lsls r0, r0, #2
	adds r0, r0, r3
	ldrh r0, [r0, #2]
	strh r0, [r5, #2]
	adds r0, r4, #1
	strh r0, [r7, #0x2c]
	ldrh r1, [r5]
	ldrh r2, [r5, #2]
	movs r0, #2
	bl SetBgOffset
	bl sub_805894C
	cmp r0, #0
	beq _080461E2
	ldrh r2, [r7, #0x34]
	ldrh r3, [r5]
	adds r1, r2, r3
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldrh r4, [r7, #0x3c]
	ldrh r0, [r5, #2]
	adds r2, r4, r0
	adds r2, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #3
	bl SetBgOffset
_080461E2:
	bl sub_805894C
	cmp r0, #0
	beq _08046200
	ldr r4, _080461FC @ =0x02000020
	movs r2, #0
	ldrsh r1, [r4, r2]
	movs r3, #0
	ldrsh r0, [r5, r3]
	subs r1, r1, r0
	b _0804620C
	.align 2, 0
_080461F8: .4byte 0x02017758
_080461FC: .4byte 0x02000020
_08046200:
	ldr r4, _0804626C @ =0x02000020
	movs r2, #0
	ldrsh r1, [r4, r2]
	movs r3, #0
	ldrsh r0, [r5, r3]
	adds r1, r1, r0
_0804620C:
	ldr r3, _08046270 @ =0x0201E12C
	ldr r0, [r3]
	subs r6, r1, r0
	ldr r2, _08046274 @ =0x02000024
	movs r1, #0
	ldrsh r0, [r2, r1]
	mov r8, r0
	movs r1, #2
	ldrsh r0, [r5, r1]
	mov r1, r8
	subs r1, r1, r0
	mov r8, r1
	adds r5, r2, #0
	movs r2, #2
	ldrsh r1, [r4, r2]
	ldr r2, _08046278 @ =0x02017758
	movs r4, #0
	ldrsh r0, [r2, r4]
	adds r1, r1, r0
	ldr r0, [r3]
	subs r4, r1, r0
	movs r0, #2
	ldrsh r1, [r5, r0]
	movs r3, #2
	ldrsh r0, [r2, r3]
	subs r5, r1, r0
	ldr r0, _0804627C @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _08046280
	lsls r1, r6, #0x10
	asrs r1, r1, #0x10
	mov r3, r8
	lsls r2, r3, #0x10
	asrs r2, r2, #0x10
	movs r0, #0
	bl sub_8047C88
	lsls r1, r4, #0x10
	asrs r1, r1, #0x10
	lsls r2, r5, #0x10
	asrs r2, r2, #0x10
	movs r0, #1
	bl sub_8047C88
	b _080462B2
	.align 2, 0
_0804626C: .4byte 0x02000020
_08046270: .4byte 0x0201E12C
_08046274: .4byte 0x02000024
_08046278: .4byte 0x02017758
_0804627C: .4byte 0x0203CD14
_08046280:
	cmp r0, #0
	blt _080462B2
	cmp r0, #2
	bgt _080462B2
	ldr r0, [r7, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _080462A4
	lsls r1, r6, #0x10
	asrs r1, r1, #0x10
	mov r4, r8
	lsls r2, r4, #0x10
	asrs r2, r2, #0x10
	movs r0, #0
	bl sub_8047C88
	b _080462B2
_080462A4:
	lsls r1, r4, #0x10
	asrs r1, r1, #0x10
	lsls r2, r5, #0x10
	asrs r2, r2, #0x10
	movs r0, #1
	bl sub_8047C88
_080462B2:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80462BC
sub_80462BC: @ 0x080462BC
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov sb, r0
	mov r8, r1
	adds r6, r2, #0
	ldr r0, _08046300 @ =0x02017738
	ldr r7, [r0]
	cmp r7, #0
	beq _080462D4
	b _08046446
_080462D4:
	movs r4, #1
	str r4, [r0]
	ldr r0, _08046304 @ =0x085CB9B8
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	mov r0, sb
	str r0, [r5, #0x5c]
	mov r1, r8
	str r1, [r5, #0x60]
	strh r7, [r5, #0x2c]
	adds r0, r5, #0
	adds r0, #0x29
	strb r4, [r0]
	cmp r6, #0
	beq _0804633C
	cmp r6, #1
	bne _0804630C
	ldr r0, _08046308 @ =0x08111C82
	b _0804633E
	.align 2, 0
_08046300: .4byte 0x02017738
_08046304: .4byte 0x085CB9B8
_08046308: .4byte 0x08111C82
_0804630C:
	cmp r6, #2
	bne _08046318
	ldr r0, _08046314 @ =0x08111CCC
	b _0804633E
	.align 2, 0
_08046314: .4byte 0x08111CCC
_08046318:
	cmp r6, #3
	bne _08046324
	ldr r0, _08046320 @ =0x08111D16
	b _0804633E
	.align 2, 0
_08046320: .4byte 0x08111D16
_08046324:
	cmp r6, #4
	bne _08046330
	ldr r0, _0804632C @ =0x08111F30
	b _0804633E
	.align 2, 0
_0804632C: .4byte 0x08111F30
_08046330:
	cmp r6, #5
	bne _0804633C
	ldr r0, _08046338 @ =0x08111FC6
	b _0804633E
	.align 2, 0
_08046338: .4byte 0x08111FC6
_0804633C:
	ldr r0, _08046354 @ =0x08111C60
_0804633E:
	str r0, [r5, #0x44]
	movs r0, #1
	str r0, [r5, #0x48]
	bl sub_8058998
	adds r4, r0, #0
	cmp r4, #0
	beq _08046358
	movs r0, #0
	str r0, [r5, #0x64]
	b _08046446
	.align 2, 0
_08046354: .4byte 0x08111C60
_08046358:
	bl sub_804C500
	cmp r0, #0
	beq _08046364
	str r4, [r5, #0x64]
	b _08046446
_08046364:
	ldr r0, _08046374 @ =0x0203CD14
	movs r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #0
	bne _08046378
	str r0, [r5, #0x64]
	b _08046446
	.align 2, 0
_08046374: .4byte 0x0203CD14
_08046378:
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	ldr r1, _080463A8 @ =0x0201E12C
	ldr r1, [r1]
	ldr r2, _080463AC @ =0x02000028
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r4, r1, #0x10
	mov r0, sb
	bl sub_804B6C4
	cmp r0, #0
	bne _080463B4
	movs r0, #0x40
	strh r0, [r5, #0x36]
	movs r0, #0x68
	strh r0, [r5, #0x3e]
	ldr r0, _080463B0 @ =0x085CCE38
	b _080463BE
	.align 2, 0
_080463A8: .4byte 0x0201E12C
_080463AC: .4byte 0x02000028
_080463B0: .4byte 0x085CCE38
_080463B4:
	movs r0, #0xb0
	strh r0, [r5, #0x36]
	movs r0, #0x68
	strh r0, [r5, #0x3e]
	ldr r0, _080463E4 @ =0x085CCDAC
_080463BE:
	movs r1, #5
	bl BasCreate
	adds r1, r0, #0
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	ldrh r2, [r5, #0x36]
	subs r0, r2, r0
	strh r0, [r1, #2]
	ldrh r0, [r5, #0x3e]
	strh r0, [r1, #4]
	ldr r0, _080463E8 @ =0x02017754
	ldr r0, [r0]
	cmp r0, #1
	bne _080463EC
	movs r0, #0xd3
	lsls r0, r0, #6
	b _080463F0
	.align 2, 0
_080463E4: .4byte 0x085CCDAC
_080463E8: .4byte 0x02017754
_080463EC:
	movs r0, #0xf3
	lsls r0, r0, #6
_080463F0:
	strh r0, [r1, #8]
	str r1, [r5, #0x64]
	ldr r4, _08046454 @ =0x02000034
	mov r0, sb
	bl sub_804B6C4
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r0, [r0]
	ldr r1, _08046458 @ =0x06011800
	movs r2, #0x80
	lsls r2, r2, #4
	bl RegisterDataMove
	ldr r4, _0804645C @ =0x02000044
	mov r0, sb
	bl sub_804B6C4
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r0, [r0]
	ldr r1, _08046460 @ =0x02021968
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	ldr r0, _08046464 @ =0x0203CD14
	movs r1, #0
	ldrsh r4, [r0, r1]
	mov r0, sb
	bl sub_804B6C4
	adds r1, r0, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	adds r0, r4, #0
	bl sub_804C478
	ldr r0, _08046468 @ =0x0201E12C
	ldr r0, [r0]
	bl sub_8045EE8
_08046446:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08046454: .4byte 0x02000034
_08046458: .4byte 0x06011800
_0804645C: .4byte 0x02000044
_08046460: .4byte 0x02021968
_08046464: .4byte 0x0203CD14
_08046468: .4byte 0x0201E12C

	thumb_func_start sub_804646C
sub_804646C: @ 0x0804646C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r6, r0, #0
	ldr r5, [r6, #0x44]
	movs r1, #0x2c
	ldrsh r0, [r6, r1]
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r1, _080464B4 @ =0x00007FFF
	ldrh r0, [r0]
	cmp r0, r1
	beq _0804648A
	b _08046598
_0804648A:
	ldr r0, _080464B8 @ =0x0203CD14
	movs r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #0
	bne _080464BC
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl sub_805894C
	cmp r0, #0
	beq _080464DE
	movs r0, #3
	movs r1, #0
	movs r2, #0x10
	bl SetBgOffset
	b _080464DE
	.align 2, 0
_080464B4: .4byte 0x00007FFF
_080464B8: .4byte 0x0203CD14
_080464BC:
	cmp r0, #0
	blt _080464DE
	cmp r0, #2
	bgt _080464DE
	bl sub_805894C
	cmp r0, #0
	beq _080464D6
	movs r0, #3
	movs r1, #0
	movs r2, #0x10
	bl SetBgOffset
_080464D6:
	ldr r0, _08046580 @ =0x0201E12C
	ldr r0, [r0]
	bl sub_8045EE8
_080464DE:
	ldr r0, [r6, #0x64]
	cmp r0, #0
	beq _080464EE
	bl BasRemove
	ldr r0, _08046584 @ =0x0201E0FC
	bl sub_804C330
_080464EE:
	ldr r3, _08046588 @ =0x02000020
	movs r4, #0
	ldrsh r2, [r3, r4]
	ldr r0, _08046580 @ =0x0201E12C
	ldr r1, [r0]
	subs r7, r2, r1
	ldr r2, _0804658C @ =0x02000024
	movs r5, #2
	ldrsh r0, [r3, r5]
	subs r4, r0, r1
	movs r0, #2
	ldrsh r5, [r2, r0]
	lsls r1, r7, #0x10
	asrs r1, r1, #0x10
	movs r3, #0
	ldrsh r2, [r2, r3]
	movs r0, #0
	bl sub_8047C88
	lsls r1, r4, #0x10
	asrs r1, r1, #0x10
	adds r2, r5, #0
	movs r0, #1
	bl sub_8047C88
	ldr r1, _08046590 @ =0x02017738
	movs r0, #0
	str r0, [r1]
	adds r0, r6, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	bne _08046576
	bl sub_805894C
	cmp r0, #0
	beq _08046542
	movs r0, #3
	movs r1, #0
	movs r2, #0x10
	bl SetBgOffset
_08046542:
	ldr r4, _08046594 @ =0x02000030
	ldrh r1, [r4]
	ldrh r2, [r4, #2]
	movs r0, #0
	bl SetBgOffset
	ldrh r5, [r4]
	rsbs r0, r5, #0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldrh r2, [r4, #2]
	rsbs r1, r2, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_804392C
	ldrh r3, [r4]
	rsbs r0, r3, #0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r4, [r4, #2]
	rsbs r1, r4, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	bl sub_8044230
_08046576:
	adds r0, r6, #0
	bl Proc_End
	b _08046786
	.align 2, 0
_08046580: .4byte 0x0201E12C
_08046584: .4byte 0x0201E0FC
_08046588: .4byte 0x02000020
_0804658C: .4byte 0x02000024
_08046590: .4byte 0x02017738
_08046594: .4byte 0x02000030
_08046598:
	movs r0, #0x2c
	ldrsh r4, [r6, r0]
	cmp r4, #0
	bne _080465C4
	ldr r0, [r6, #0x64]
	cmp r0, #0
	beq _080465C4
	ldr r0, [r6, #0x5c]
	bl sub_804B6C4
	adds r1, r0, #0
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #1
	ldr r1, _0804661C @ =0x02022DC8
	adds r0, r0, r1
	str r4, [sp]
	movs r1, #0xf
	movs r2, #5
	movs r3, #0
	bl sub_805B094
_080465C4:
	ldr r4, _08046620 @ =0x02017758
	movs r1, #0x2c
	ldrsh r0, [r6, r1]
	lsls r0, r0, #2
	adds r0, r0, r5
	movs r2, #0
	ldrsh r0, [r0, r2]
	strh r0, [r4]
	movs r3, #0x2c
	ldrsh r0, [r6, r3]
	lsls r0, r0, #2
	adds r0, r0, r5
	movs r5, #2
	ldrsh r0, [r0, r5]
	strh r0, [r4, #2]
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	ldr r0, [r6, #0x64]
	cmp r0, #0
	beq _0804662C
	ldr r0, [r6, #0x5c]
	bl sub_804B6C4
	ldr r1, _08046624 @ =0x0201E12C
	ldr r1, [r1]
	ldr r2, _08046628 @ =0x02000028
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	subs r1, r1, r0
	ldr r2, [r6, #0x64]
	ldrh r3, [r6, #0x36]
	ldrh r5, [r4]
	adds r0, r3, r5
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	subs r0, r0, r1
	strh r0, [r2, #2]
	ldrh r1, [r6, #0x3e]
	ldrh r4, [r4, #2]
	subs r0, r1, r4
	strh r0, [r2, #4]
	b _08046636
	.align 2, 0
_0804661C: .4byte 0x02022DC8
_08046620: .4byte 0x02017758
_08046624: .4byte 0x0201E12C
_08046628: .4byte 0x02000028
_0804662C:
	ldrh r1, [r4]
	ldrh r2, [r4, #2]
	movs r0, #2
	bl SetBgOffset
_08046636:
	adds r0, r6, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	bne _08046696
	ldr r5, _080466CC @ =0x02017758
	ldr r4, _080466D0 @ =0x02000030
	ldrh r2, [r5]
	ldrh r3, [r4]
	adds r1, r2, r3
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldrh r0, [r5, #2]
	ldrh r3, [r4, #2]
	adds r2, r0, r3
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0
	bl SetBgOffset
	ldrh r1, [r5]
	ldrh r2, [r4]
	adds r0, r1, r2
	rsbs r0, r0, #0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldrh r3, [r5, #2]
	ldrh r2, [r4, #2]
	adds r1, r3, r2
	rsbs r1, r1, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_804392C
	ldrh r3, [r5]
	ldrh r1, [r4]
	adds r0, r3, r1
	rsbs r0, r0, #0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r5, [r5, #2]
	ldrh r4, [r4, #2]
	adds r1, r5, r4
	rsbs r1, r1, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	bl sub_8044230
_08046696:
	bl sub_805894C
	cmp r0, #0
	beq _080466B0
	ldr r0, _080466CC @ =0x02017758
	ldrh r1, [r0]
	ldrh r2, [r0, #2]
	adds r2, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #3
	bl SetBgOffset
_080466B0:
	bl sub_805894C
	cmp r0, #0
	beq _080466D8
	ldr r2, _080466D4 @ =0x02000020
	mov ip, r2
	movs r3, #0
	ldrsh r1, [r2, r3]
	ldr r2, _080466CC @ =0x02017758
	movs r4, #0
	ldrsh r0, [r2, r4]
	subs r1, r1, r0
	b _080466E8
	.align 2, 0
_080466CC: .4byte 0x02017758
_080466D0: .4byte 0x02000030
_080466D4: .4byte 0x02000020
_080466D8:
	ldr r0, _08046740 @ =0x02000020
	mov ip, r0
	movs r2, #0
	ldrsh r1, [r0, r2]
	ldr r2, _08046744 @ =0x02017758
	movs r3, #0
	ldrsh r0, [r2, r3]
	adds r1, r1, r0
_080466E8:
	ldr r4, _08046748 @ =0x0201E12C
	ldr r0, [r4]
	subs r7, r1, r0
	ldr r3, _0804674C @ =0x02000024
	movs r5, #0
	ldrsh r1, [r3, r5]
	movs r5, #2
	ldrsh r0, [r2, r5]
	subs r1, r1, r0
	mov r8, r1
	mov r5, ip
	movs r1, #2
	ldrsh r0, [r5, r1]
	movs r5, #0
	ldrsh r1, [r2, r5]
	adds r0, r0, r1
	ldr r1, [r4]
	subs r4, r0, r1
	movs r0, #2
	ldrsh r1, [r3, r0]
	movs r3, #2
	ldrsh r0, [r2, r3]
	subs r5, r1, r0
	ldr r0, _08046750 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _08046754
	lsls r1, r7, #0x10
	asrs r1, r1, #0x10
	mov r3, r8
	lsls r2, r3, #0x10
	asrs r2, r2, #0x10
	movs r0, #0
	bl sub_8047C88
	lsls r1, r4, #0x10
	asrs r1, r1, #0x10
	lsls r2, r5, #0x10
	asrs r2, r2, #0x10
	movs r0, #1
	bl sub_8047C88
	b _08046786
	.align 2, 0
_08046740: .4byte 0x02000020
_08046744: .4byte 0x02017758
_08046748: .4byte 0x0201E12C
_0804674C: .4byte 0x02000024
_08046750: .4byte 0x0203CD14
_08046754:
	cmp r0, #0
	blt _08046786
	cmp r0, #2
	bgt _08046786
	ldr r0, [r6, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08046778
	lsls r1, r7, #0x10
	asrs r1, r1, #0x10
	mov r4, r8
	lsls r2, r4, #0x10
	asrs r2, r2, #0x10
	movs r0, #0
	bl sub_8047C88
	b _08046786
_08046778:
	lsls r1, r4, #0x10
	asrs r1, r1, #0x10
	lsls r2, r5, #0x10
	asrs r2, r2, #0x10
	movs r0, #1
	bl sub_8047C88
_08046786:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8046794
sub_8046794: @ 0x08046794
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _080467C4 @ =0x085CB9D0
	movs r1, #0
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [sp]
	ldr r1, _080467C8 @ =0x020165C0
	ldr r2, _080467CC @ =0x01000100
	mov r0, sp
	bl CpuFastSet
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080467C4: .4byte 0x085CB9D0
_080467C8: .4byte 0x020165C0
_080467CC: .4byte 0x01000100

	thumb_func_start sub_80467D0
sub_80467D0: @ 0x080467D0
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08046800 @ =0x085CB9D0
	movs r1, #0
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	ldr r0, _08046804 @ =0x001F001F
	str r0, [sp]
	ldr r1, _08046808 @ =0x020165C0
	ldr r2, _0804680C @ =0x01000100
	mov r0, sp
	bl CpuFastSet
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08046800: .4byte 0x085CB9D0
_08046804: .4byte 0x001F001F
_08046808: .4byte 0x020165C0
_0804680C: .4byte 0x01000100

	thumb_func_start sub_8046810
sub_8046810: @ 0x08046810
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08046844 @ =0x020165C0
	movs r1, #0xa0
	lsls r1, r1, #0x13
	movs r2, #0x80
	lsls r2, r2, #1
	bl CpuFastSet
	bl DisablePalSync
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	blt _0804683C
	adds r0, r4, #0
	bl Proc_Break
_0804683C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08046844: .4byte 0x020165C0

	thumb_func_start sub_8046848
sub_8046848: @ 0x08046848
	push {r4, lr}
	adds r4, r0, #0
	bl EnablePalSync
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_804685C
sub_804685C: @ 0x0804685C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	ldr r0, _0804687C @ =0x085CB9F8
	movs r1, #0
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	strh r6, [r0, #0x30]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804687C: .4byte 0x085CB9F8

	thumb_func_start sub_8046880
sub_8046880: @ 0x08046880
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, _080468D0 @ =gPal
	ldr r4, _080468D4 @ =0x020165C0
	movs r5, #0x80
	lsls r5, r5, #1
	adds r1, r4, #0
	adds r2, r5, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	movs r3, #0x10
	bl sub_805B644
	movs r1, #0xa0
	lsls r1, r1, #0x13
	adds r0, r4, #0
	adds r2, r5, #0
	bl CpuFastSet
	bl DisablePalSync
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r6, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _080468CA
	movs r0, #0
	strh r0, [r6, #0x2c]
	adds r0, r6, #0
	bl Proc_Break
_080468CA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080468D0: .4byte gPal
_080468D4: .4byte 0x020165C0

	thumb_func_start sub_80468D8
sub_80468D8: @ 0x080468D8
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r7, r0]
	movs r1, #0x30
	ldrsh r0, [r7, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r6, r0, #0
	ldr r0, _08046940 @ =gPal
	ldr r4, _08046944 @ =0x020165C0
	movs r5, #0x80
	lsls r5, r5, #1
	adds r1, r4, #0
	adds r2, r5, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	adds r3, r6, #0
	bl sub_805B644
	movs r1, #0xa0
	lsls r1, r1, #0x13
	adds r0, r4, #0
	adds r2, r5, #0
	bl CpuFastSet
	bl DisablePalSync
	ldrh r0, [r7, #0x2c]
	adds r0, #1
	strh r0, [r7, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r7, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08046936
	adds r0, r7, #0
	bl Proc_Break
_08046936:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08046940: .4byte gPal
_08046944: .4byte 0x020165C0

	thumb_func_start sub_8046948
sub_8046948: @ 0x08046948
	push {r4, lr}
	adds r4, r0, #0
	bl EnablePalSync
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_804695C
sub_804695C: @ 0x0804695C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	ldr r0, _08046990 @ =0x085CBA20
	movs r1, #4
	bl SpawnProc
	adds r1, r0, #0
	str r6, [r1, #0x5c]
	movs r0, #0
	strh r0, [r1, #0x2c]
	strh r4, [r1, #0x2e]
	strh r5, [r1, #0x30]
	cmp r4, #0
	bne _0804698A
	adds r0, r1, #0
	bl Proc_Break
_0804698A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08046990: .4byte 0x085CBA20

	thumb_func_start sub_8046994
sub_8046994: @ 0x08046994
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	ldrh r3, [r2, #0x2e]
	lsls r1, r3, #0x10
	cmp r0, r1
	blt _080469AE
	adds r0, r2, #0
	bl Proc_Break
_080469AE:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80469B4
sub_80469B4: @ 0x080469B4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _080469D8
	ldr r0, _080469D0 @ =0x081134A4
	ldr r1, _080469D4 @ =0x02021A68
	movs r2, #0x10
	bl CpuSet
	b _080469E2
	.align 2, 0
_080469D0: .4byte 0x081134A4
_080469D4: .4byte 0x02021A68
_080469D8:
	ldr r0, _08046A04 @ =0x081134A4
	ldr r1, _08046A08 @ =0x02021A88
	movs r2, #0x10
	bl CpuSet
_080469E2:
	bl EnablePalSync
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	blt _080469FC
	adds r0, r4, #0
	bl Proc_Break
_080469FC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08046A04: .4byte 0x081134A4
_08046A08: .4byte 0x02021A88

	thumb_func_start sub_8046A0C
sub_8046A0C: @ 0x08046A0C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08046A3C
	ldr r0, _08046A30 @ =0x0203CD08
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #5
	ldr r1, _08046A34 @ =0x08113424
	adds r0, r0, r1
	ldr r1, _08046A38 @ =0x02021A68
	movs r2, #0x10
	bl CpuSet
	b _08046A50
	.align 2, 0
_08046A30: .4byte 0x0203CD08
_08046A34: .4byte 0x08113424
_08046A38: .4byte 0x02021A68
_08046A3C:
	ldr r0, _08046A60 @ =0x0203CD08
	movs r1, #2
	ldrsh r0, [r0, r1]
	lsls r0, r0, #5
	ldr r1, _08046A64 @ =0x08113424
	adds r0, r0, r1
	ldr r1, _08046A68 @ =0x02021A88
	movs r2, #0x10
	bl CpuSet
_08046A50:
	bl EnablePalSync
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08046A60: .4byte 0x0203CD08
_08046A64: .4byte 0x08113424
_08046A68: .4byte 0x02021A88

	thumb_func_start sub_8046A6C
sub_8046A6C: @ 0x08046A6C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r5, r0, #0
	ldr r4, _08046B24 @ =0x02017774
	ldr r0, _08046B28 @ =0x085CBA50
	movs r1, #3
	bl SpawnProc
	str r0, [r4]
	str r5, [r0, #0x5c]
	movs r2, #0
	strh r2, [r0, #0x2c]
	str r2, [r0, #0x44]
	ldr r1, _08046B2C @ =0x081120F8
	str r1, [r0, #0x48]
	str r2, [r0, #0x4c]
	str r2, [r0, #0x50]
	ldr r0, _08046B30 @ =0x0203CD08
	mov r8, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #5
	ldr r7, _08046B34 @ =0x08113424
	adds r0, r0, r7
	ldr r6, _08046B38 @ =0x0201DF6C
	adds r1, r6, #0
	movs r2, #0x10
	bl sub_805B7F4
	mov r2, r8
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #5
	ldr r2, _08046B3C @ =0x081134C4
	mov sl, r2
	add r0, sl
	ldr r4, _08046B40 @ =0x0201DFCC
	adds r1, r4, #0
	movs r2, #0x10
	bl sub_805B7F4
	ldr r5, _08046B44 @ =0x0201E02C
	movs r0, #5
	mov sb, r0
	str r0, [sp]
	adds r0, r6, #0
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #0x10
	bl sub_805B88C
	mov r1, r8
	movs r2, #2
	ldrsh r0, [r1, r2]
	lsls r0, r0, #5
	adds r0, r0, r7
	adds r6, #0x30
	adds r1, r6, #0
	movs r2, #0x10
	bl sub_805B7F4
	mov r1, r8
	movs r2, #2
	ldrsh r0, [r1, r2]
	lsls r0, r0, #5
	add r0, sl
	adds r4, #0x30
	adds r1, r4, #0
	movs r2, #0x10
	bl sub_805B7F4
	adds r5, #0x60
	mov r0, sb
	str r0, [sp]
	adds r0, r6, #0
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #0x10
	bl sub_805B88C
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08046B24: .4byte 0x02017774
_08046B28: .4byte 0x085CBA50
_08046B2C: .4byte 0x081120F8
_08046B30: .4byte 0x0203CD08
_08046B34: .4byte 0x08113424
_08046B38: .4byte 0x0201DF6C
_08046B3C: .4byte 0x081134C4
_08046B40: .4byte 0x0201DFCC
_08046B44: .4byte 0x0201E02C

	thumb_func_start sub_8046B48
sub_8046B48: @ 0x08046B48
	push {lr}
	ldr r0, _08046B58 @ =0x02017774
	ldr r0, [r0]
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_08046B58: .4byte 0x02017774

	thumb_func_start sub_8046B5C
sub_8046B5C: @ 0x08046B5C
	ldr r0, _08046B68 @ =0x02017774
	ldr r1, [r0]
	movs r0, #1
	str r0, [r1, #0x50]
	bx lr
	.align 2, 0
_08046B68: .4byte 0x02017774

	thumb_func_start sub_8046B6C
sub_8046B6C: @ 0x08046B6C
	ldr r0, _08046B78 @ =0x02017774
	ldr r1, [r0]
	movs r0, #0
	str r0, [r1, #0x50]
	bx lr
	.align 2, 0
_08046B78: .4byte 0x02017774

	thumb_func_start sub_8046B7C
sub_8046B7C: @ 0x08046B7C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r7, r0, #0
	ldr r0, [r7, #0x50]
	cmp r0, #1
	beq _08046BF4
	adds r0, r7, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	blt _08046BA8
	str r0, [r7, #0x4c]
_08046BA8:
	ldr r4, _08046C04 @ =0x02021A68
	ldr r5, _08046C08 @ =0x0201DF6C
	ldr r6, _08046C0C @ =0x0201DFCC
	ldr r0, _08046C10 @ =0x0201E02C
	mov r8, r0
	movs r0, #0x10
	mov sl, r0
	str r0, [sp]
	ldr r0, [r7, #0x4c]
	str r0, [sp, #4]
	movs r0, #5
	mov sb, r0
	str r0, [sp, #8]
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	mov r3, r8
	bl sub_805B90C
	adds r4, #0x20
	adds r5, #0x30
	adds r6, #0x30
	movs r0, #0x60
	add r8, r0
	mov r0, sl
	str r0, [sp]
	ldr r0, [r7, #0x4c]
	str r0, [sp, #4]
	mov r0, sb
	str r0, [sp, #8]
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	mov r3, r8
	bl sub_805B90C
	bl EnablePalSync
_08046BF4:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08046C04: .4byte 0x02021A68
_08046C08: .4byte 0x0201DF6C
_08046C0C: .4byte 0x0201DFCC
_08046C10: .4byte 0x0201E02C

	thumb_func_start sub_8046C14
sub_8046C14: @ 0x08046C14
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r6, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	mov r8, r3
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	ldr r0, _08046C4C @ =0x085CBA70
	movs r1, #4
	bl SpawnProc
	str r6, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r4, [r0, #0x2e]
	strh r5, [r0, #0x30]
	adds r0, #0x29
	mov r1, r8
	strb r1, [r0]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08046C4C: .4byte 0x085CBA70

	thumb_func_start sub_8046C50
sub_8046C50: @ 0x08046C50
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_805894C
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	blt _08046CF6
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08046CB0
	ldr r0, _08046CA8 @ =0x08113564
	ldr r1, _08046CAC @ =0x020219E8
	movs r2, #8
	bl CpuFastSet
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _08046CE0
	movs r0, #1
	ands r0, r5
	cmp r0, #0
	beq _08046C96
	movs r0, #0
	bl sub_8058EC8
_08046C96:
	movs r0, #0x10
	ands r0, r5
	cmp r0, #0
	beq _08046CE0
	movs r0, #0
	bl sub_8058EC8
	b _08046CE0
	.align 2, 0
_08046CA8: .4byte 0x08113564
_08046CAC: .4byte 0x020219E8
_08046CB0:
	ldr r0, _08046CFC @ =0x08113564
	ldr r1, _08046D00 @ =0x02021A28
	movs r2, #8
	bl CpuFastSet
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _08046CE0
	movs r0, #2
	ands r0, r5
	cmp r0, #0
	beq _08046CD2
	movs r0, #1
	bl sub_8058EC8
_08046CD2:
	movs r0, #0x20
	ands r0, r5
	cmp r0, #0
	beq _08046CE0
	movs r0, #1
	bl sub_8058EC8
_08046CE0:
	bl EnablePalSync
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	movs r2, #0x30
	ldrsh r0, [r4, r2]
	cmp r1, r0
	blt _08046CF6
	adds r0, r4, #0
	bl Proc_Break
_08046CF6:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08046CFC: .4byte 0x08113564
_08046D00: .4byte 0x02021A28

	thumb_func_start sub_8046D04
sub_8046D04: @ 0x08046D04
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_805894C
	adds r4, r0, #0
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08046D54
	ldr r0, _08046D4C @ =0x0200004C
	ldr r0, [r0]
	ldr r1, _08046D50 @ =0x020219E8
	movs r2, #8
	bl CpuFastSet
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _08046D86
	movs r0, #1
	ands r0, r4
	cmp r0, #0
	beq _08046D3C
	movs r0, #0
	bl sub_8058E58
_08046D3C:
	movs r0, #0x10
	ands r0, r4
	cmp r0, #0
	beq _08046D86
	movs r0, #0
	bl sub_8058E90
	b _08046D86
	.align 2, 0
_08046D4C: .4byte 0x0200004C
_08046D50: .4byte 0x020219E8
_08046D54:
	ldr r0, _08046D98 @ =0x0200004C
	ldr r0, [r0, #4]
	ldr r1, _08046D9C @ =0x02021A28
	movs r2, #8
	bl CpuFastSet
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _08046D86
	movs r0, #2
	ands r0, r4
	cmp r0, #0
	beq _08046D78
	movs r0, #1
	bl sub_8058E58
_08046D78:
	movs r0, #0x20
	ands r0, r4
	cmp r0, #0
	beq _08046D86
	movs r0, #1
	bl sub_8058E90
_08046D86:
	bl EnablePalSync
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08046D98: .4byte 0x0200004C
_08046D9C: .4byte 0x02021A28

	thumb_func_start sub_8046DA0
sub_8046DA0: @ 0x08046DA0
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _08046DB8
	ldr r0, _08046DB4 @ =0x0203CD7C
	b _08046DBA
	.align 2, 0
_08046DB4: .4byte 0x0203CD7C
_08046DB8:
	ldr r0, _08046E40 @ =0x0203CD80
_08046DBA:
	ldr r6, [r0]
	ldr r0, _08046E44 @ =0x085CBA98
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	adds r0, #0x29
	movs r1, #0
	strb r1, [r0]
	str r5, [r4, #0x5c]
	strh r1, [r4, #0x2c]
	str r1, [r4, #0x44]
	ldr r0, _08046E48 @ =0x08112122
	str r0, [r4, #0x48]
	adds r0, r6, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	str r0, [r4, #0x4c]
	ldr r0, _08046E4C @ =0x0203CCF0
	ldrh r0, [r0]
	cmp r0, #1
	bne _08046DEC
	str r1, [r4, #0x4c]
_08046DEC:
	str r1, [r4, #0x50]
	strh r1, [r4, #0x36]
	strh r1, [r4, #0x34]
	strh r1, [r4, #0x32]
	adds r0, r5, #0
	bl sub_804B6C4
	ldr r1, _08046E50 @ =0x02017764
	lsls r0, r0, #2
	adds r0, r0, r1
	str r4, [r0]
	adds r0, r5, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _08046E5C
	ldr r5, _08046E54 @ =0x0200004C
	ldr r0, [r5]
	ldr r4, _08046E58 @ =gUnk_02021108
	adds r1, r4, #0
	movs r2, #0x10
	bl sub_805B7F4
	ldr r0, [r5]
	adds r5, r4, #0
	adds r5, #0x30
	adds r1, r5, #0
	movs r2, #0x10
	bl sub_805B834
	movs r0, #0xc0
	lsls r0, r0, #1
	adds r2, r4, r0
	movs r0, #0x10
	str r0, [sp]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #0x10
	bl sub_805B88C
	b _08046E8C
	.align 2, 0
_08046E40: .4byte 0x0203CD80
_08046E44: .4byte 0x085CBA98
_08046E48: .4byte 0x08112122
_08046E4C: .4byte 0x0203CCF0
_08046E50: .4byte 0x02017764
_08046E54: .4byte 0x0200004C
_08046E58: .4byte gUnk_02021108
_08046E5C:
	ldr r5, _08046E94 @ =0x0200004C
	ldr r0, [r5, #4]
	ldr r4, _08046E98 @ =0x02021168
	adds r1, r4, #0
	movs r2, #0x10
	bl sub_805B7F4
	ldr r0, [r5, #4]
	adds r5, r4, #0
	adds r5, #0x30
	adds r1, r5, #0
	movs r2, #0x10
	bl sub_805B834
	movs r0, #0xa8
	lsls r0, r0, #2
	adds r2, r4, r0
	movs r0, #0x10
	str r0, [sp]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #0x10
	bl sub_805B88C
_08046E8C:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08046E94: .4byte 0x0200004C
_08046E98: .4byte 0x02021168

	thumb_func_start sub_8046E9C
sub_8046E9C: @ 0x08046E9C
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, _08046ED4 @ =0x02017764
	bl sub_804B6C4
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r0, [r0]
	cmp r0, #0
	beq _08046ECE
	adds r0, r4, #0
	bl sub_804B6C4
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r0, [r0]
	bl Proc_End
	adds r0, r4, #0
	bl sub_804B6C4
	lsls r0, r0, #2
	adds r0, r0, r5
	movs r1, #0
	str r1, [r0]
_08046ECE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08046ED4: .4byte 0x02017764

	thumb_func_start sub_8046ED8
sub_8046ED8: @ 0x08046ED8
	push {r4, lr}
	ldr r4, _08046EF4 @ =0x02017764
	bl sub_804B6C4
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r0, [r0]
	adds r0, #0x29
	movs r1, #1
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08046EF4: .4byte 0x02017764

	thumb_func_start sub_8046EF8
sub_8046EF8: @ 0x08046EF8
	push {r4, lr}
	ldr r4, _08046F14 @ =0x02017764
	bl sub_804B6C4
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r0, [r0]
	adds r0, #0x29
	movs r1, #0
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08046F14: .4byte 0x02017764

	thumb_func_start sub_8046F18
sub_8046F18: @ 0x08046F18
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	ldr r4, _08046F44 @ =0x02017764
	bl sub_804B6C4
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r0, [r0]
	str r5, [r0, #0x4c]
	cmp r5, #0
	bne _08046F3C
	adds r0, r6, #0
	movs r1, #0
	movs r2, #0
	movs r3, #0
	bl sub_8046F64
_08046F3C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08046F44: .4byte 0x02017764

	thumb_func_start sub_8046F48
sub_8046F48: @ 0x08046F48
	push {r4, lr}
	ldr r4, _08046F60 @ =0x02017764
	bl sub_804B6C4
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r0, [r0]
	ldr r0, [r0, #0x4c]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08046F60: .4byte 0x02017764

	thumb_func_start sub_8046F64
sub_8046F64: @ 0x08046F64
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r4, r0, #0
	mov r8, r1
	adds r6, r2, #0
	adds r7, r3, #0
	bl sub_805894C
	adds r5, r0, #0
	adds r0, r4, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _08046FE8
	ldr r0, _08046FDC @ =0x0200004C
	ldr r0, [r0]
	ldr r4, _08046FE0 @ =0x020219E8
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r0, _08046FE4 @ =0xFFFFFD20
	adds r4, r4, r0
	str r6, [sp]
	str r7, [sp, #4]
	adds r0, r4, #0
	movs r1, #0x17
	movs r2, #1
	mov r3, r8
	bl sub_805B6C8
	movs r0, #1
	ands r0, r5
	cmp r0, #0
	beq _08046FB4
	movs r0, #0
	bl sub_8058E58
_08046FB4:
	movs r0, #0x10
	ands r0, r5
	cmp r0, #0
	beq _08046FC2
	movs r0, #0
	bl sub_8058E90
_08046FC2:
	movs r0, #0x11
	ands r0, r5
	cmp r0, #0
	beq _0804703E
	str r6, [sp]
	str r7, [sp, #4]
	adds r0, r4, #0
	movs r1, #6
	movs r2, #1
	mov r3, r8
	bl sub_805B6C8
	b _0804703E
	.align 2, 0
_08046FDC: .4byte 0x0200004C
_08046FE0: .4byte 0x020219E8
_08046FE4: .4byte 0xFFFFFD20
_08046FE8:
	ldr r0, _0804704C @ =0x0200004C
	ldr r0, [r0, #4]
	ldr r4, _08047050 @ =0x02021A28
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r0, _08047054 @ =0xFFFFFCE0
	adds r4, r4, r0
	str r6, [sp]
	str r7, [sp, #4]
	adds r0, r4, #0
	movs r1, #0x19
	movs r2, #1
	mov r3, r8
	bl sub_805B6C8
	movs r0, #2
	ands r0, r5
	cmp r0, #0
	beq _08047018
	movs r0, #1
	bl sub_8058E58
_08047018:
	movs r0, #0x20
	ands r0, r5
	cmp r0, #0
	beq _08047026
	movs r0, #1
	bl sub_8058E90
_08047026:
	movs r0, #0x22
	ands r0, r5
	cmp r0, #0
	beq _0804703E
	str r6, [sp]
	str r7, [sp, #4]
	adds r0, r4, #0
	movs r1, #7
	movs r2, #1
	mov r3, r8
	bl sub_805B6C8
_0804703E:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804704C: .4byte 0x0200004C
_08047050: .4byte 0x02021A28
_08047054: .4byte 0xFFFFFCE0

	thumb_func_start sub_8047058
sub_8047058: @ 0x08047058
	push {r4, r5, r6, lr}
	sub sp, #0xc
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_8046F48
	cmp r0, #0
	beq _0804714E
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	beq _0804714E
	ldr r1, [r4, #0x4c]
	ldr r0, [r4, #0x50]
	cmp r1, r0
	beq _08047082
	movs r0, #0
	strh r0, [r4, #0x2c]
	str r0, [r4, #0x44]
	str r1, [r4, #0x50]
_08047082:
	adds r0, r4, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _080470D2
	ldr r0, [r4, #0x4c]
	cmp r0, #2
	beq _080470BA
	cmp r0, #2
	bgt _080470A8
	cmp r0, #1
	beq _080470B2
	b _080470CC
_080470A8:
	cmp r0, #3
	beq _080470CC
	cmp r0, #4
	beq _080470C2
	b _080470CC
_080470B2:
	movs r0, #0
	strh r1, [r4, #0x32]
	strh r0, [r4, #0x34]
	b _080470D0
_080470BA:
	movs r0, #0
	strh r0, [r4, #0x32]
	strh r0, [r4, #0x34]
	b _080470D0
_080470C2:
	movs r0, #0
	strh r1, [r4, #0x32]
	strh r0, [r4, #0x34]
	strh r0, [r4, #0x36]
	b _080470D2
_080470CC:
	strh r1, [r4, #0x32]
	strh r1, [r4, #0x34]
_080470D0:
	strh r1, [r4, #0x36]
_080470D2:
	ldr r0, [r4, #0x4c]
	cmp r0, #3
	beq _080470FA
	cmp r0, #3
	bgt _080470E2
	cmp r0, #1
	blt _0804714A
	b _080470E6
_080470E2:
	cmp r0, #4
	bne _0804714A
_080470E6:
	ldr r0, [r4, #0x5c]
	movs r2, #0x32
	ldrsh r1, [r4, r2]
	movs r3, #0x34
	ldrsh r2, [r4, r3]
	movs r5, #0x36
	ldrsh r3, [r4, r5]
	bl sub_8046F64
	b _0804714A
_080470FA:
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _0804712C
	ldr r0, _08047124 @ =0x020219E8
	ldr r1, _08047128 @ =gUnk_02021108
	adds r2, r1, #0
	adds r2, #0x30
	movs r6, #0xc0
	lsls r6, r6, #1
	adds r3, r1, r6
	movs r5, #0x10
	str r5, [sp]
	movs r6, #0x32
	ldrsh r4, [r4, r6]
	str r4, [sp, #4]
	str r5, [sp, #8]
	bl sub_805B90C
	b _0804714A
	.align 2, 0
_08047124: .4byte 0x020219E8
_08047128: .4byte gUnk_02021108
_0804712C:
	ldr r0, _08047158 @ =0x02021A28
	ldr r1, _0804715C @ =0x02021168
	adds r2, r1, #0
	adds r2, #0x30
	movs r5, #0xa8
	lsls r5, r5, #2
	adds r3, r1, r5
	movs r5, #0x10
	str r5, [sp]
	movs r6, #0x32
	ldrsh r4, [r4, r6]
	str r4, [sp, #4]
	str r5, [sp, #8]
	bl sub_805B90C
_0804714A:
	bl EnablePalSync
_0804714E:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08047158: .4byte 0x02021A28
_0804715C: .4byte 0x02021168

	thumb_func_start sub_8047160
sub_8047160: @ 0x08047160
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_805894C
	adds r5, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _080471A8
	ldr r0, _080471A0 @ =0x0200004C
	ldr r0, [r0]
	ldr r1, _080471A4 @ =0x020219E8
	movs r2, #8
	bl CpuFastSet
	movs r0, #1
	ands r0, r5
	cmp r0, #0
	beq _0804718E
	movs r0, #0
	bl sub_8058E58
_0804718E:
	movs r0, #0x10
	ands r0, r5
	cmp r0, #0
	beq _080471D0
	movs r0, #0
	bl sub_8058E90
	b _080471D0
	.align 2, 0
_080471A0: .4byte 0x0200004C
_080471A4: .4byte 0x020219E8
_080471A8:
	ldr r0, _080471DC @ =0x0200004C
	ldr r0, [r0, #4]
	ldr r1, _080471E0 @ =0x02021A28
	movs r2, #8
	bl CpuFastSet
	movs r0, #2
	ands r0, r5
	cmp r0, #0
	beq _080471C2
	movs r0, #1
	bl sub_8058E58
_080471C2:
	movs r0, #0x20
	ands r0, r5
	cmp r0, #0
	beq _080471D0
	movs r0, #1
	bl sub_8058E90
_080471D0:
	bl EnablePalSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080471DC: .4byte 0x0200004C
_080471E0: .4byte 0x02021A28

	thumb_func_start sub_80471E4
sub_80471E4: @ 0x080471E4
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	ldr r0, _08047220 @ =0x085CBAC0
	movs r1, #3
	bl SpawnProc
	movs r2, #0
	strh r2, [r0, #0x2c]
	str r2, [r0, #0x44]
	ldr r1, _08047224 @ =0x08112144
	str r1, [r0, #0x48]
	str r2, [r0, #0x4c]
	str r2, [r0, #0x50]
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	str r4, [r0, #0x54]
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	str r5, [r0, #0x58]
	ldr r1, _08047228 @ =0x0201776C
	str r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08047220: .4byte 0x085CBAC0
_08047224: .4byte 0x08112144
_08047228: .4byte 0x0201776C

	thumb_func_start sub_804722C
sub_804722C: @ 0x0804722C
	push {r4, lr}
	ldr r4, _08047244 @ =0x0201776C
	ldr r0, [r4]
	cmp r0, #0
	beq _0804723E
	bl Proc_End
	movs r0, #0
	str r0, [r4]
_0804723E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08047244: .4byte 0x0201776C

	thumb_func_start sub_8047248
sub_8047248: @ 0x08047248
	ldr r0, _08047254 @ =0x0201776C
	ldr r1, [r0]
	movs r0, #1
	str r0, [r1, #0x50]
	bx lr
	.align 2, 0
_08047254: .4byte 0x0201776C

	thumb_func_start sub_8047258
sub_8047258: @ 0x08047258
	ldr r0, _08047264 @ =0x0201776C
	ldr r1, [r0]
	movs r0, #0
	str r0, [r1, #0x50]
	bx lr
	.align 2, 0
_08047264: .4byte 0x0201776C

	thumb_func_start sub_8047268
sub_8047268: @ 0x08047268
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x50]
	cmp r0, #1
	beq _080472C6
	bl InitIcons
	adds r0, r4, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	blt _0804728E
	str r0, [r4, #0x4c]
_0804728E:
	ldr r0, [r4, #0x54]
	cmp r0, #0
	beq _080472A8
	movs r0, #0
	movs r1, #0x1d
	bl ApplyIconPalette
	ldr r0, _080472CC @ =gPal
	ldr r3, [r4, #0x4c]
	movs r1, #0x1d
	movs r2, #1
	bl sub_805B644
_080472A8:
	ldr r0, [r4, #0x58]
	cmp r0, #0
	beq _080472C2
	movs r0, #0
	movs r1, #0x1e
	bl ApplyIconPalette
	ldr r0, _080472CC @ =gPal
	ldr r3, [r4, #0x4c]
	movs r1, #0x1e
	movs r2, #1
	bl sub_805B644
_080472C2:
	bl EnablePalSync
_080472C6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080472CC: .4byte gPal

	thumb_func_start sub_80472D0
sub_80472D0: @ 0x080472D0
	push {r4, lr}
	adds r4, r0, #0
	bl InitIcons
	ldr r0, [r4, #0x54]
	cmp r0, #0
	beq _080472E6
	movs r0, #0
	movs r1, #0x1d
	bl ApplyIconPalette
_080472E6:
	ldr r0, [r4, #0x58]
	cmp r0, #0
	beq _080472F4
	movs r0, #0
	movs r1, #0x1e
	bl ApplyIconPalette
_080472F4:
	bl EnablePalSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8047300
sub_8047300: @ 0x08047300
	push {r4, r5, lr}
	bl sub_805894C
	adds r4, r0, #0
	cmp r4, #0
	bne _0804734C
	ldr r0, _08047334 @ =0x085CBAE8
	movs r1, #4
	bl SpawnProc
	adds r5, r0, #0
	adds r0, #0x29
	strb r4, [r0]
	strh r4, [r5, #0x2c]
	movs r0, #4
	strh r0, [r5, #0x2e]
	ldr r0, _08047338 @ =0x02017770
	ldr r0, [r0]
	cmp r0, #0
	bne _08047344
	ldr r0, _0804733C @ =0x020217C8
	ldr r1, _08047340 @ =0x0201C77C
	movs r2, #0x50
	bl CpuFastSet
	b _08047348
	.align 2, 0
_08047334: .4byte 0x085CBAE8
_08047338: .4byte 0x02017770
_0804733C: .4byte 0x020217C8
_08047340: .4byte 0x0201C77C
_08047344:
	bl Proc_End
_08047348:
	ldr r0, _08047354 @ =0x02017770
	str r5, [r0]
_0804734C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08047354: .4byte 0x02017770

	thumb_func_start sub_8047358
sub_8047358: @ 0x08047358
	ldr r0, _0804736C @ =0x02017770
	ldr r0, [r0]
	cmp r0, #0
	beq _08047368
	adds r1, r0, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
_08047368:
	bx lr
	.align 2, 0
_0804736C: .4byte 0x02017770

	thumb_func_start sub_8047370
sub_8047370: @ 0x08047370
	push {lr}
	ldr r1, _08047388 @ =0x02017770
	ldr r0, [r1]
	cmp r0, #0
	beq _08047382
	movs r0, #0
	str r0, [r1]
	bl Proc_End
_08047382:
	pop {r0}
	bx r0
	.align 2, 0
_08047388: .4byte 0x02017770

	thumb_func_start sub_804738C
sub_804738C: @ 0x0804738C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r1, #0x2e
	ldrsh r0, [r6, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #8
	bl Interpolate
	adds r5, r0, #0
	ldr r0, _080473E8 @ =0x0201C77C
	ldr r4, _080473EC @ =0x020217C8
	adds r1, r4, #0
	movs r2, #0x50
	bl CpuFastSet
	subs r4, #0xc0
	adds r0, r4, #0
	movs r1, #6
	movs r2, #0xa
	adds r3, r5, #0
	bl sub_805B5C8
	bl EnablePalSync
	ldrh r1, [r6, #0x2c]
	adds r1, #1
	strh r1, [r6, #0x2c]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r2, #0x2e
	ldrsh r0, [r6, r2]
	adds r0, #1
	cmp r1, r0
	bne _080473E0
	adds r0, r6, #0
	bl Proc_Break
_080473E0:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080473E8: .4byte 0x0201C77C
_080473EC: .4byte 0x020217C8

	thumb_func_start sub_80473F0
sub_80473F0: @ 0x080473F0
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _08047428 @ =0x0201C77C
	ldr r4, _0804742C @ =0x020217C8
	adds r1, r4, #0
	movs r2, #0x50
	bl CpuFastSet
	subs r4, #0xc0
	adds r0, r4, #0
	movs r1, #6
	movs r2, #0xa
	movs r3, #8
	bl sub_805B5C8
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	bne _08047422
	movs r0, #0
	strh r0, [r5, #0x2c]
	adds r0, r5, #0
	bl Proc_Break
_08047422:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08047428: .4byte 0x0201C77C
_0804742C: .4byte 0x020217C8

	thumb_func_start sub_8047430
sub_8047430: @ 0x08047430
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r1, #0x2e
	ldrsh r0, [r5, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #8
	movs r2, #0
	bl Interpolate
	adds r4, r0, #0
	ldr r7, _080474A4 @ =0x0201C77C
	ldr r6, _080474A8 @ =0x020217C8
	adds r0, r7, #0
	adds r1, r6, #0
	movs r2, #0x50
	bl CpuFastSet
	adds r0, r6, #0
	subs r0, #0xc0
	movs r1, #6
	movs r2, #0xa
	adds r3, r4, #0
	bl sub_805B5C8
	bl EnablePalSync
	ldrh r1, [r5, #0x2c]
	adds r1, #1
	strh r1, [r5, #0x2c]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r2, #0x2e
	ldrsh r0, [r5, r2]
	adds r0, #1
	cmp r1, r0
	bne _0804749A
	ldr r1, _080474AC @ =0x02017770
	movs r0, #0
	str r0, [r1]
	adds r0, r7, #0
	adds r1, r6, #0
	movs r2, #0x50
	bl CpuFastSet
	bl EnablePalSync
	adds r0, r5, #0
	bl Proc_Break
_0804749A:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080474A4: .4byte 0x0201C77C
_080474A8: .4byte 0x020217C8
_080474AC: .4byte 0x02017770

	thumb_func_start sub_80474B0
sub_80474B0: @ 0x080474B0
	ldr r1, _080474B8 @ =0x02017724
	movs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_080474B8: .4byte 0x02017724

	thumb_func_start sub_80474BC
sub_80474BC: @ 0x080474BC
	ldr r1, _080474C4 @ =0x02017724
	movs r0, #0
	str r0, [r1]
	bx lr
	.align 2, 0
_080474C4: .4byte 0x02017724

	thumb_func_start sub_80474C8
sub_80474C8: @ 0x080474C8
	push {lr}
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	pop {r0}
	bx r0

	thumb_func_start sub_80474D8
sub_80474D8: @ 0x080474D8
	push {lr}
	sub sp, #4
	movs r0, #0
	str r0, [sp]
	ldr r1, _080474F8 @ =gBg1Tm
	ldr r2, _080474FC @ =0x01000200
	mov r0, sp
	bl CpuFastSet
	movs r0, #2
	bl EnableBgSync
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_080474F8: .4byte gBg1Tm
_080474FC: .4byte 0x01000200

	thumb_func_start sub_8047500
sub_8047500: @ 0x08047500
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _080475CC @ =gDispIo
	mov ip, r0
	mov r2, ip
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	mov r1, ip
	adds r1, #0x44
	movs r2, #0
	movs r3, #0x10
	mov r8, r3
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r2, [r0]
	ldr r0, _080475D0 @ =0x0000FFE0
	mov r1, ip
	ldrh r1, [r1, #0x3c]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	ldr r1, _080475D4 @ =0x0000E0FF
	ands r0, r1
	movs r3, #0xe0
	lsls r3, r3, #5
	adds r1, r3, #0
	orrs r0, r1
	mov r1, ip
	strh r0, [r1, #0x3c]
	movs r5, #0x20
	ldrb r0, [r1, #1]
	orrs r0, r5
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r3, ip
	strb r0, [r3, #1]
	mov r0, ip
	adds r0, #0x2d
	strb r2, [r0]
	adds r0, #4
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x2c
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	mov r6, ip
	adds r6, #0x34
	movs r0, #1
	ldrb r1, [r6]
	orrs r1, r0
	movs r2, #2
	orrs r1, r2
	movs r4, #4
	orrs r1, r4
	movs r3, #8
	orrs r1, r3
	mov r2, r8
	orrs r1, r2
	mov r7, ip
	adds r7, #0x36
	ldrb r2, [r7]
	orrs r0, r2
	movs r2, #3
	rsbs r2, r2, #0
	ands r0, r2
	orrs r0, r4
	orrs r0, r3
	mov r3, r8
	orrs r0, r3
	orrs r1, r5
	strb r1, [r6]
	movs r1, #0x21
	rsbs r1, r1, #0
	ands r0, r1
	strb r0, [r7]
	mov r0, ip
	adds r0, #0x3d
	ldrb r1, [r0]
	orrs r5, r1
	strb r5, [r0]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080475CC: .4byte gDispIo
_080475D0: .4byte 0x0000FFE0
_080475D4: .4byte 0x0000E0FF

	thumb_func_start sub_80475D8
sub_80475D8: @ 0x080475D8
	ldr r3, _080475FC @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r2, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	bx lr
	.align 2, 0
_080475FC: .4byte gDispIo

	thumb_func_start sub_8047600
sub_8047600: @ 0x08047600
	push {lr}
	movs r2, #3
	movs r3, #4
	bl sub_8047620
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8047610
sub_8047610: @ 0x08047610
	push {lr}
	movs r2, #5
	movs r3, #5
	bl sub_8047620
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8047620
sub_8047620: @ 0x08047620
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r1, #0
	str r2, [sp]
	mov sl, r3
	bl sub_804B6C4
	cmp r0, #0
	bne _0804764C
	ldr r0, _08047648 @ =0x02000000
	ldr r7, [r0, #8]
	ldr r1, [r0, #0xc]
	mov sb, r1
	ldr r5, [r0]
	ldr r0, [r0, #4]
	b _08047658
	.align 2, 0
_08047648: .4byte 0x02000000
_0804764C:
	ldr r0, _08047668 @ =0x02000000
	ldr r7, [r0]
	ldr r1, [r0, #4]
	mov sb, r1
	ldr r5, [r0, #8]
	ldr r0, [r0, #0xc]
_08047658:
	mov r8, r0
	cmp r4, #0
	beq _0804766C
	cmp r4, #1
	bne _08047664
	b _08047796
_08047664:
	b _0804779C
	.align 2, 0
_08047668: .4byte 0x02000000
_0804766C:
	adds r0, r7, #0
	bl sub_804B6C4
	adds r1, r0, #0
	ldrh r0, [r7, #0xe]
	subs r0, #1
	lsls r0, r0, #1
	adds r0, r0, r1
	bl sub_804A57C
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	adds r0, r5, #0
	bl sub_804B6C4
	adds r1, r0, #0
	ldrh r0, [r5, #0xe]
	subs r0, #1
	lsls r0, r0, #1
	adds r0, r0, r1
	bl sub_804A57C
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	movs r1, #0x80
	lsls r1, r1, #6
	ands r0, r1
	cmp r0, #0
	beq _080476BC
	adds r0, r7, #0
	bl sub_8046F48
	cmp r0, #0
	bne _080476BC
	adds r0, r7, #0
	movs r1, #1
	bl sub_8046F18
_080476BC:
	lsls r0, r4, #0x10
	asrs r1, r0, #0x10
	movs r2, #0x80
	lsls r2, r2, #6
	ands r1, r2
	adds r4, r0, #0
	cmp r1, #0
	beq _080476DE
	adds r0, r5, #0
	bl sub_8046F48
	cmp r0, #0
	bne _080476DE
	adds r0, r5, #0
	movs r1, #1
	bl sub_8046F18
_080476DE:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	movs r1, #0x80
	lsls r1, r1, #8
	ands r0, r1
	cmp r0, #0
	bne _080476F4
	asrs r0, r4, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080476FC
_080476F4:
	adds r0, r5, #0
	adds r5, r7, #0
	adds r7, r0, #0
	mov r8, sb
_080476FC:
	ldr r4, _08047764 @ =0x0203CD46
	adds r0, r5, #0
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #0
	ldrsh r6, [r0, r1]
	adds r0, r5, #0
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #0
	ldrsh r4, [r0, r1]
	adds r4, #1
	adds r0, r5, #0
	bl sub_804B6C4
	adds r1, r0, #0
	lsls r0, r6, #1
	adds r0, r0, r1
	bl sub_804A5A8
	lsls r0, r0, #0x10
	asrs r6, r0, #0x10
	adds r0, r5, #0
	bl sub_804B6C4
	adds r1, r0, #0
	lsls r0, r4, #1
	adds r0, r0, r1
	bl sub_804A5A8
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r6, r4
	beq _0804778A
	adds r0, r5, #0
	bl sub_80449F4
	adds r0, r7, #0
	bl sub_804B7B0
	cmp r0, #1
	bne _08047768
	adds r0, r5, #0
	adds r1, r7, #0
	mov r2, sl
	bl sub_80462BC
	b _08047772
	.align 2, 0
_08047764: .4byte 0x0203CD46
_08047768:
	adds r0, r5, #0
	adds r1, r7, #0
	ldr r2, [sp]
	bl sub_80462BC
_08047772:
	adds r0, r5, #0
	movs r1, #0
	movs r2, #5
	bl sub_804695C
	adds r0, r5, #0
	movs r1, #0
	movs r2, #8
	movs r3, #0
	bl sub_8046C14
	b _0804779C
_0804778A:
	adds r0, r5, #0
	mov r1, r8
	movs r2, #0
	bl sub_804536C
	b _0804779C
_08047796:
	adds r0, r5, #0
	bl sub_80450DC
_0804779C:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80477AC
sub_80477AC: @ 0x080477AC
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov sb, r1
	bl sub_804B6C4
	cmp r0, #0
	bne _080477CC
	ldr r0, _080477C8 @ =0x02000000
	ldr r7, [r0, #8]
	ldr r5, [r0]
	ldr r0, [r0, #4]
	b _080477D4
	.align 2, 0
_080477C8: .4byte 0x02000000
_080477CC:
	ldr r0, _0804782C @ =0x02000000
	ldr r7, [r0]
	ldr r5, [r0, #8]
	ldr r0, [r0, #0xc]
_080477D4:
	mov r8, r0
	ldr r4, _08047830 @ =0x0203CD46
	adds r0, r5, #0
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #0
	ldrsh r6, [r0, r1]
	adds r0, r5, #0
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #0
	ldrsh r4, [r0, r1]
	adds r4, #1
	adds r0, r5, #0
	bl sub_804B6C4
	adds r1, r0, #0
	lsls r0, r6, #1
	adds r0, r0, r1
	bl sub_804A5A8
	lsls r0, r0, #0x10
	asrs r6, r0, #0x10
	adds r0, r5, #0
	bl sub_804B6C4
	adds r1, r0, #0
	lsls r0, r4, #1
	adds r0, r0, r1
	bl sub_804A5A8
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	mov r0, sb
	cmp r0, #0
	beq _08047834
	cmp r0, #1
	beq _0804788C
	b _08047892
	.align 2, 0
_0804782C: .4byte 0x02000000
_08047830: .4byte 0x0203CD46
_08047834:
	cmp r6, r4
	beq _08047876
	adds r0, r5, #0
	bl sub_8044D4C
	adds r0, r7, #0
	bl sub_804B7B0
	cmp r0, #1
	bne _08047854
	adds r0, r5, #0
	adds r1, r7, #0
	movs r2, #4
	bl sub_80462BC
	b _0804785E
_08047854:
	adds r0, r5, #0
	adds r1, r7, #0
	movs r2, #3
	bl sub_80462BC
_0804785E:
	adds r0, r5, #0
	movs r1, #0
	movs r2, #5
	bl sub_804695C
	adds r0, r5, #0
	movs r1, #0
	movs r2, #8
	movs r3, #0
	bl sub_8046C14
	b _08047892
_08047876:
	ldr r1, _08047888 @ =0x02017748
	movs r0, #2
	str r0, [r1]
	adds r0, r5, #0
	mov r1, r8
	movs r2, #1
	bl sub_804536C
	b _08047892
	.align 2, 0
_08047888: .4byte 0x02017748
_0804788C:
	adds r0, r5, #0
	bl sub_80450DC
_08047892:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80478A0
sub_80478A0: @ 0x080478A0
	push {r4, lr}
	adds r4, r1, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _080478B8
	ldr r0, _080478B4 @ =0x02000000
	ldr r0, [r0]
	b _080478BC
	.align 2, 0
_080478B4: .4byte 0x02000000
_080478B8:
	ldr r0, _080478C8 @ =0x02000000
	ldr r0, [r0, #8]
_080478BC:
	cmp r4, #0
	beq _080478CC
	cmp r4, #1
	beq _080478D2
	b _080478D6
	.align 2, 0
_080478C8: .4byte 0x02000000
_080478CC:
	bl sub_8045578
	b _080478D6
_080478D2:
	bl sub_80450DC
_080478D6:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_80478DC
sub_80478DC: @ 0x080478DC
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r7, r1, #0
	adds r6, r2, #0
	adds r5, r3, #0
	ldr r0, _08047900 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _08047908
	adds r0, r4, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _08047904
	adds r0, r7, #0
	b _08047918
	.align 2, 0
_08047900: .4byte 0x0203CD14
_08047904:
	adds r0, r6, #0
	b _08047918
_08047908:
	adds r0, r4, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _08047916
	adds r0, r5, #0
	b _08047918
_08047916:
	ldr r0, [sp, #0x14]
_08047918:
	movs r1, #0x78
	bl BasCreate
	adds r1, r0, #0
	movs r0, #0xa1
	lsls r0, r0, #6
	strh r0, [r1, #8]
	ldrh r0, [r4, #2]
	strh r0, [r1, #2]
	ldrh r0, [r4, #4]
	strh r0, [r1, #4]
	adds r0, r1, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8047938
sub_8047938: @ 0x08047938
	push {r4, lr}
	sub sp, #8
	adds r3, r0, #0
	ldr r0, _0804796C @ =0x0203CD14
	movs r4, #0
	ldrsh r0, [r0, r4]
	adds r4, r2, #0
	cmp r0, #0
	bne _0804794C
	adds r4, r1, #0
_0804794C:
	adds r0, r3, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _08047974
	ldr r1, _08047970 @ =gBg1Tm
	movs r0, #1
	str r0, [sp]
	adds r0, #0xff
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0x1e
	movs r3, #0x14
	bl sub_805B1DC
	b _08047988
	.align 2, 0
_0804796C: .4byte 0x0203CD14
_08047970: .4byte gBg1Tm
_08047974:
	ldr r1, _08047998 @ =gBg1Tm
	movs r0, #1
	str r0, [sp]
	adds r0, #0xff
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0x1e
	movs r3, #0x14
	bl sub_805B1AC
_08047988:
	movs r0, #2
	bl EnableBgSync
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08047998: .4byte gBg1Tm

	thumb_func_start sub_804799C
sub_804799C: @ 0x0804799C
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	adds r3, r1, #0
	ldr r0, _080479B8 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _080479C0
	ldr r1, _080479BC @ =0x0201977C
	adds r0, r3, #0
	bl LZ77UnCompWram
	b _080479C8
	.align 2, 0
_080479B8: .4byte 0x0203CD14
_080479BC: .4byte 0x0201977C
_080479C0:
	ldr r1, _080479EC @ =0x0201977C
	adds r0, r2, #0
	bl LZ77UnCompWram
_080479C8:
	ldr r5, _080479EC @ =0x0201977C
	adds r0, r4, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _080479F4
	ldr r1, _080479F0 @ =gBg1Tm
	movs r0, #1
	str r0, [sp]
	adds r0, #0xff
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r2, #0x1e
	movs r3, #0x14
	bl sub_805B1DC
	b _08047A08
	.align 2, 0
_080479EC: .4byte 0x0201977C
_080479F0: .4byte gBg1Tm
_080479F4:
	ldr r1, _08047A18 @ =gBg1Tm
	movs r0, #1
	str r0, [sp]
	adds r0, #0xff
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r2, #0x1e
	movs r3, #0x14
	bl sub_805B1AC
_08047A08:
	movs r0, #2
	bl EnableBgSync
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08047A18: .4byte gBg1Tm

	thumb_func_start sub_8047A1C
sub_8047A1C: @ 0x08047A1C
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r4, r0, #0
	adds r0, r1, #0
	adds r5, r2, #0
	adds r6, r3, #0
	ldr r7, _08047A54 @ =0x0201977C
	adds r1, r7, #0
	bl LZ77UnCompWram
	adds r0, r4, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _08047A5C
	ldr r1, _08047A58 @ =gBg1Tm
	lsls r2, r5, #0x10
	lsrs r2, r2, #0x10
	lsls r3, r6, #0x10
	lsrs r3, r3, #0x10
	movs r0, #1
	str r0, [sp]
	adds r0, #0xff
	str r0, [sp, #4]
	adds r0, r7, #0
	bl sub_805B1DC
	b _08047A74
	.align 2, 0
_08047A54: .4byte 0x0201977C
_08047A58: .4byte gBg1Tm
_08047A5C:
	ldr r1, _08047A84 @ =gBg1Tm
	lsls r2, r5, #0x10
	lsrs r2, r2, #0x10
	lsls r3, r6, #0x10
	lsrs r3, r3, #0x10
	movs r0, #1
	str r0, [sp]
	adds r0, #0xff
	str r0, [sp, #4]
	adds r0, r7, #0
	bl sub_805B1AC
_08047A74:
	movs r0, #2
	bl EnableBgSync
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08047A84: .4byte gBg1Tm

	thumb_func_start sub_8047A88
sub_8047A88: @ 0x08047A88
	push {r4, r5, r6, lr}
	adds r6, r1, #0
	ldr r5, _08047AA8 @ =0x06010800
	ldr r4, _08047AAC @ =0x0201A77C
	adds r1, r4, #0
	bl LZ77UnCompWram
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl RegisterDataMove
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08047AA8: .4byte 0x06010800
_08047AAC: .4byte 0x0201A77C

	thumb_func_start sub_8047AB0
sub_8047AB0: @ 0x08047AB0
	push {lr}
	adds r2, r1, #0
	ldr r1, _08047AC8 @ =0x02021948
	lsls r2, r2, #9
	lsrs r2, r2, #0xb
	bl CpuFastSet
	bl EnablePalSync
	pop {r0}
	bx r0
	.align 2, 0
_08047AC8: .4byte 0x02021948

	thumb_func_start sub_8047ACC
sub_8047ACC: @ 0x08047ACC
	push {r4, r5, r6, lr}
	adds r6, r1, #0
	ldr r5, _08047AEC @ =0x06002000
	ldr r4, _08047AF0 @ =0x0201777C
	adds r1, r4, #0
	bl LZ77UnCompWram
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl RegisterDataMove
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08047AEC: .4byte 0x06002000
_08047AF0: .4byte 0x0201777C

	thumb_func_start sub_8047AF4
sub_8047AF4: @ 0x08047AF4
	push {lr}
	adds r2, r1, #0
	ldr r1, _08047B0C @ =0x02021728
	lsls r2, r2, #9
	lsrs r2, r2, #0xb
	bl CpuFastSet
	bl EnablePalSync
	pop {r0}
	bx r0
	.align 2, 0
_08047B0C: .4byte 0x02021728

	thumb_func_start sub_8047B10
sub_8047B10: @ 0x08047B10
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r3, #0
	ldr r4, [sp, #0x10]
	movs r3, #0
	cmp r3, r4
	bhs _08047B36
_08047B1E:
	cmp r2, r5
	blo _08047B24
	movs r2, #0
_08047B24:
	lsls r0, r2, #1
	adds r0, r0, r6
	ldrh r0, [r0]
	strh r0, [r1]
	adds r1, #2
	adds r3, #1
	adds r2, #1
	cmp r3, r4
	blo _08047B1E
_08047B36:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_8047B3C
sub_8047B3C: @ 0x08047B3C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r3, #0
	ldr r4, [sp, #0x10]
	movs r3, #0
	cmp r3, r4
	bhs _08047B62
_08047B4A:
	cmp r2, r5
	blo _08047B50
	movs r2, #0
_08047B50:
	lsls r0, r2, #1
	adds r0, r0, r6
	ldrh r0, [r0]
	strh r0, [r1, #0x20]
	adds r1, #2
	adds r3, #1
	adds r2, #1
	cmp r3, r4
	blo _08047B4A
_08047B62:
	bl EnablePalSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_8047B6C
sub_8047B6C: @ 0x08047B6C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r3, #0
	ldr r4, [sp, #0x10]
	movs r3, #0
	cmp r3, r4
	bhs _08047B98
	movs r0, #0x90
	lsls r0, r0, #2
	adds r1, r1, r0
_08047B80:
	cmp r2, r5
	blo _08047B86
	movs r2, #0
_08047B86:
	lsls r0, r2, #1
	adds r0, r0, r6
	ldrh r0, [r0]
	strh r0, [r1]
	adds r1, #2
	adds r3, #1
	adds r2, #1
	cmp r3, r4
	blo _08047B80
_08047B98:
	bl EnablePalSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8047BA4
sub_8047BA4: @ 0x08047BA4
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r3, r1, #0
	ldrh r0, [r5]
	adds r6, r0, #0
	cmp r6, #0
	bne _08047C0C
	ldrh r0, [r3]
	mov ip, r0
	lsls r0, r0, #2
	adds r0, r0, r2
	ldrh r4, [r0]
	movs r7, #0
	ldrsh r1, [r0, r7]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _08047BD0
	movs r0, #4
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08047BD4
_08047BD0:
	adds r0, r1, #0
	b _08047C14
_08047BD4:
	movs r0, #2
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08047BE2
	strh r6, [r3]
	ldrh r4, [r2]
	b _08047BF6
_08047BE2:
	movs r0, #3
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08047BF6
	mov r0, ip
	subs r0, #1
	strh r0, [r3]
	lsls r0, r0, #2
	adds r0, r0, r2
	ldrh r4, [r0]
_08047BF6:
	ldrh r1, [r3]
	lsls r0, r1, #2
	adds r0, r0, r2
	ldrh r0, [r0, #2]
	adds r1, #1
	strh r1, [r3]
	subs r0, #1
	strh r0, [r5]
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	b _08047C14
_08047C0C:
	subs r0, #1
	strh r0, [r5]
	movs r0, #5
	rsbs r0, r0, #0
_08047C14:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8047C1C
sub_8047C1C: @ 0x08047C1C
	ldr r1, _08047C24 @ =0x02017754
	movs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_08047C24: .4byte 0x02017754

	thumb_func_start sub_8047C28
sub_8047C28: @ 0x08047C28
	ldr r0, _08047C38 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #2
	bne _08047C3C
	movs r0, #0x18
	b _08047C46
	.align 2, 0
_08047C38: .4byte 0x0203CD14
_08047C3C:
	cmp r0, #1
	beq _08047C44
	movs r0, #0
	b _08047C46
_08047C44:
	movs r0, #0x10
_08047C46:
	bx lr

	thumb_func_start sub_8047C48
sub_8047C48: @ 0x08047C48
	push {lr}
	sub sp, #4
	ldr r1, _08047C60 @ =0x0201C8BC
	str r0, [sp]
	ldr r2, _08047C64 @ =0x050002D6
	mov r0, sp
	bl CpuSet
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_08047C60: .4byte 0x0201C8BC
_08047C64: .4byte 0x050002D6

	thumb_func_start sub_8047C68
sub_8047C68: @ 0x08047C68
	push {lr}
	sub sp, #4
	ldr r1, _08047C80 @ =0x0201D414
	str r0, [sp]
	ldr r2, _08047C84 @ =0x050002D6
	mov r0, sp
	bl CpuSet
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_08047C80: .4byte 0x0201D414
_08047C84: .4byte 0x050002D6

	thumb_func_start sub_8047C88
sub_8047C88: @ 0x08047C88
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	cmp r0, #0
	bne _08047CA4
	ldr r0, _08047CA0 @ =0x02000000
	ldr r3, [r0]
	strh r1, [r3, #2]
	strh r2, [r3, #4]
	ldr r3, [r0, #4]
	b _08047CAE
	.align 2, 0
_08047CA0: .4byte 0x02000000
_08047CA4:
	ldr r0, _08047CB4 @ =0x02000000
	ldr r3, [r0, #8]
	strh r1, [r3, #2]
	strh r2, [r3, #4]
	ldr r3, [r0, #0xc]
_08047CAE:
	strh r1, [r3, #2]
	strh r2, [r3, #4]
	bx lr
	.align 2, 0
_08047CB4: .4byte 0x02000000

	thumb_func_start sub_8047CB8
sub_8047CB8: @ 0x08047CB8
	push {lr}
	bl sub_8049058
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8047CC8
sub_8047CC8: @ 0x08047CC8
	push {lr}
	bl sub_804C500
	cmp r0, #1
	bne _08047CD8
	bl sub_804C580
	b _08047D04
_08047CD8:
	bl sub_8042584
	bl BasInit
	bl sub_8044870
	ldr r1, _08047D08 @ =0x0201773C
	str r0, [r1]
	bl sub_8047DAC
	ldr r1, _08047D0C @ =0x02000000
	movs r0, #0
	str r0, [r1]
	str r0, [r1, #4]
	str r0, [r1, #8]
	str r0, [r1, #0xc]
	ldr r0, _08047D10 @ =sub_8047D38
	bl SetMainFunc
	movs r0, #0
	bl SetOnHBlankA
_08047D04:
	pop {r0}
	bx r0
	.align 2, 0
_08047D08: .4byte 0x0201773C
_08047D0C: .4byte 0x02000000
_08047D10: .4byte sub_8047D38

	thumb_func_start sub_8047D14
sub_8047D14: @ 0x08047D14
	push {lr}
	bl sub_804C500
	cmp r0, #1
	bne _08047D24
	bl sub_804C5A4
	b _08047D2E
_08047D24:
	bl sub_80481B4
	ldr r0, _08047D34 @ =sub_8047D38
	bl SetMainFunc
_08047D2E:
	pop {r0}
	bx r0
	.align 2, 0
_08047D34: .4byte sub_8047D38

	thumb_func_start sub_8047D38
sub_8047D38: @ 0x08047D38
	push {r4, lr}
	ldr r0, _08047D9C @ =gKeySt
	ldr r0, [r0]
	bl RefreshKeySt
	bl ClearSprites
	ldr r4, _08047DA0 @ =gProcTreeRootArray
	ldr r0, [r4, #4]
	bl Proc_Run
	bl GetGameLock
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08047D5E
	ldr r0, [r4, #8]
	bl Proc_Run
_08047D5E:
	ldr r0, [r4, #0xc]
	bl Proc_Run
	ldr r0, [r4, #0x14]
	bl Proc_Run
	movs r0, #0
	bl PutSpriteLayerOam
	ldr r0, [r4, #0x10]
	bl Proc_Run
	bl BasUpdateAll
	bl sub_804A5DC
	movs r0, #0xd
	bl PutSpriteLayerOam
	ldr r1, _08047DA4 @ =gBmSt
	movs r0, #1
	strb r0, [r1]
	ldr r0, _08047DA8 @ =0x04000006
	ldrh r0, [r0]
	strh r0, [r1, #6]
	bl VBlankIntrWait
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08047D9C: .4byte gKeySt
_08047DA0: .4byte gProcTreeRootArray
_08047DA4: .4byte gBmSt
_08047DA8: .4byte 0x04000006

	thumb_func_start sub_8047DAC
sub_8047DAC: @ 0x08047DAC
	push {lr}
	ldr r0, _08047DBC @ =0x085CBB18
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_08047DBC: .4byte 0x085CBB18

	thumb_func_start sub_8047DC0
sub_8047DC0: @ 0x08047DC0
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, sb
	mov r4, r8
	push {r4, r5, r6}
	sub sp, #4
	adds r5, r0, #0
	movs r4, #0
	movs r3, #0
	strh r3, [r5, #0x2c]
	movs r0, #0xf
	strh r0, [r5, #0x2e]
	ldr r2, _08047EC0 @ =0x0203CD16
	movs r1, #0
	ldrsh r0, [r2, r1]
	movs r6, #4
	ldrsh r1, [r2, r6]
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #8
	strh r0, [r5, #0x34]
	strh r0, [r5, #0x32]
	movs r1, #2
	ldrsh r0, [r2, r1]
	movs r6, #6
	ldrsh r1, [r2, r6]
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #8
	strh r0, [r5, #0x3c]
	strh r0, [r5, #0x3a]
	str r3, [sp]
	ldr r1, _08047EC4 @ =gBg2Tm
	ldr r2, _08047EC8 @ =0x01000200
	mov r0, sp
	bl CpuFastSet
	movs r0, #4
	bl EnableBgSync
	ldr r6, _08047ECC @ =gDispIo
	adds r1, r6, #0
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x44
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r1, #0xa
	movs r0, #4
	mov sl, r0
	movs r0, #4
	strb r0, [r1]
	ldr r0, _08047ED0 @ =0x0000FFE0
	ldrh r1, [r6, #0x3c]
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	strh r0, [r6, #0x3c]
	movs r2, #0x20
	mov sb, r2
	mov r0, sb
	ldrb r1, [r6, #1]
	orrs r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r6, #1]
	adds r0, r6, #0
	adds r0, #0x2d
	strb r4, [r0]
	adds r0, #4
	strb r4, [r0]
	adds r1, r6, #0
	adds r1, #0x2c
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	movs r2, #0x34
	adds r2, r2, r6
	mov r8, r2
	movs r0, #1
	ldrb r1, [r2]
	orrs r1, r0
	movs r4, #2
	orrs r1, r4
	mov r2, sl
	orrs r1, r2
	movs r3, #8
	orrs r1, r3
	movs r2, #0x10
	orrs r1, r2
	adds r6, #0x36
	ldrb r2, [r6]
	orrs r0, r2
	orrs r0, r4
	mov r2, sl
	orrs r0, r2
	orrs r0, r3
	movs r2, #0x11
	rsbs r2, r2, #0
	ands r0, r2
	subs r2, #0x10
	ands r1, r2
	mov r2, r8
	strb r1, [r2]
	mov r1, sb
	orrs r0, r1
	strb r0, [r6]
	adds r0, r5, #0
	bl Proc_Break
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08047EC0: .4byte 0x0203CD16
_08047EC4: .4byte gBg2Tm
_08047EC8: .4byte 0x01000200
_08047ECC: .4byte gDispIo
_08047ED0: .4byte 0x0000FFE0

	thumb_func_start sub_8047ED4
sub_8047ED4: @ 0x08047ED4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldrh r0, [r7, #0x2c]
	ldrh r1, [r7, #0x2e]
	cmp r0, r1
	beq _08047EEC
	adds r0, #1
	strh r0, [r7, #0x2c]
_08047EEC:
	movs r0, #0x32
	ldrsh r2, [r7, r0]
	movs r1, #0x2c
	ldrsh r3, [r7, r1]
	movs r1, #0x2e
	ldrsh r0, [r7, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	adds r6, r0, #0
	movs r0, #0x3a
	ldrsh r2, [r7, r0]
	movs r1, #0x2c
	ldrsh r3, [r7, r1]
	movs r1, #0x2e
	ldrsh r0, [r7, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	adds r5, r0, #0
	movs r0, #0x34
	ldrsh r2, [r7, r0]
	movs r1, #0x2c
	ldrsh r3, [r7, r1]
	movs r1, #0x2e
	ldrsh r0, [r7, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0xf0
	bl Interpolate
	adds r4, r0, #0
	movs r0, #0x3c
	ldrsh r2, [r7, r0]
	movs r1, #0x2c
	ldrsh r3, [r7, r1]
	movs r1, #0x2e
	ldrsh r0, [r7, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0xa0
	bl Interpolate
	ldr r1, _08047FD4 @ =gDispIo
	movs r2, #0x2d
	adds r2, r2, r1
	mov r8, r2
	movs r2, #0
	mov sb, r2
	mov r2, r8
	strb r6, [r2]
	adds r6, r1, #0
	adds r6, #0x31
	strb r5, [r6]
	adds r5, r1, #0
	adds r5, #0x2c
	strb r4, [r5]
	adds r4, r1, #0
	adds r4, #0x30
	strb r0, [r4]
	ldrh r0, [r7, #0x2c]
	ldrh r2, [r7, #0x2e]
	cmp r0, r2
	bne _08047FC4
	adds r2, r1, #0
	adds r2, #0x36
	movs r0, #1
	ldrb r1, [r2]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2]
	movs r0, #0
	bl InitOam
	bl LockBmDisplay
	mov r0, sb
	mov r2, r8
	strb r0, [r2]
	strb r0, [r6]
	movs r0, #0xf0
	strb r0, [r5]
	movs r0, #0xa0
	strb r0, [r4]
	ldr r0, _08047FD8 @ =gPal
	movs r1, #6
	movs r2, #0xa
	movs r3, #4
	bl sub_805B5C8
	bl EnablePalSync
	bl MU_EndAll
	adds r0, r7, #0
	bl Proc_Break
_08047FC4:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08047FD4: .4byte gDispIo
_08047FD8: .4byte gPal

	thumb_func_start sub_8047FDC
sub_8047FDC: @ 0x08047FDC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _08048008 @ =0x0203CCF0
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _08048040
	bl sub_80436A4
	bl sub_8044198
	ldr r0, _0804800C @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #3
	beq _08048010
	cmp r0, #3
	ble _08048040
	cmp r0, #4
	beq _08048038
	b _08048040
	.align 2, 0
_08048008: .4byte 0x0203CCF0
_0804800C: .4byte 0x0203CD14
_08048010:
	ldr r4, _08048034 @ =0x0203CCF8
	movs r1, #0
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _08048022
	bl sub_80438E8
	bl sub_80441FC
_08048022:
	movs r1, #2
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _08048040
	bl sub_80438F8
	bl sub_804420C
	b _08048040
	.align 2, 0
_08048034: .4byte 0x0203CCF8
_08048038:
	bl sub_80438E8
	bl sub_80441FC
_08048040:
	bl sub_8044390
	movs r0, #0
	bl sub_80489E8
	movs r0, #0
	bl sub_8048574
	movs r0, #0
	movs r1, #0xb
	bl sub_8048DA4
	movs r0, #0
	movs r1, #0xb
	movs r2, #0
	bl sub_8048E88
	movs r0, #0
	movs r1, #0xb
	bl sub_8048F88
	movs r0, #0
	strh r0, [r5, #0x2c]
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_804807C
sub_804807C: @ 0x0804807C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xb
	ble _080480BC
	ldr r0, _080480AC @ =0x0203CCF2
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _080480A0
	bl sub_805894C
	cmp r0, #0
	beq _080480B0
_080480A0:
	bl sub_80425F0
	adds r0, r4, #0
	bl Proc_End
	b _080480BC
	.align 2, 0
_080480AC: .4byte 0x0203CCF2
_080480B0:
	strh r0, [r4, #0x2c]
	bl sub_80425F0
	adds r0, r4, #0
	bl Proc_Break
_080480BC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80480C4
sub_80480C4: @ 0x080480C4
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r0, #8
	str r0, [sp]
	movs r0, #0
	movs r1, #4
	movs r2, #0x10
	bl Interpolate
	bl sub_805B9A4
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bne _080480F8
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
_080480F8:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8048100
sub_8048100: @ 0x08048100
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08048114 @ =0x0203CCF6
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _0804811C
	ldr r1, _08048118 @ =0x0201E0F8
	movs r0, #6
	b _08048120
	.align 2, 0
_08048114: .4byte 0x0203CCF6
_08048118: .4byte 0x0201E0F8
_0804811C:
	ldr r1, _08048148 @ =0x0201E0F8
	movs r0, #0xa
_08048120:
	str r0, [r1]
	ldr r0, _0804814C @ =0x0203CCF2
	movs r1, #0
	ldrsh r0, [r0, r1]
	subs r0, #1
	bl sub_805F100
	ldr r0, _08048150 @ =gPal
	movs r1, #6
	movs r2, #0xa
	movs r3, #0x10
	bl sub_805B5C8
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08048148: .4byte 0x0201E0F8
_0804814C: .4byte 0x0203CCF2
_08048150: .4byte gPal

	thumb_func_start sub_8048154
sub_8048154: @ 0x08048154
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r0, #8
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r4, r0, #0
	ldr r0, _080481AC @ =0x0203CCF2
	movs r1, #0
	ldrsh r0, [r0, r1]
	subs r0, #1
	bl sub_805F0DC
	ldr r0, _080481B0 @ =gPal
	movs r1, #6
	movs r2, #0xa
	adds r3, r4, #0
	bl sub_805B5C8
	bl EnablePalSync
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bne _080481A2
	movs r0, #0
	strh r0, [r5, #0x2c]
	adds r0, r5, #0
	bl Proc_Break
_080481A2:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080481AC: .4byte 0x0203CCF2
_080481B0: .4byte gPal

	thumb_func_start sub_80481B4
sub_80481B4: @ 0x080481B4
	push {lr}
	ldr r0, _080481C8 @ =0x085CBB60
	movs r1, #3
	bl SpawnProc
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r0}
	bx r0
	.align 2, 0
_080481C8: .4byte 0x085CBB60

	thumb_func_start sub_80481CC
sub_80481CC: @ 0x080481CC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r7, _080481F0 @ =0x0203CCF2
	movs r1, #0
	ldrsh r0, [r7, r1]
	cmp r0, #0
	beq _080481E6
	bl sub_805894C
	adds r6, r0, #0
	cmp r6, #0
	beq _080481F4
_080481E6:
	adds r0, r5, #0
	bl Proc_Break
	b _08048238
	.align 2, 0
_080481F0: .4byte 0x0203CCF2
_080481F4:
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r0, #8
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r4, r0, #0
	movs r1, #0
	ldrsh r0, [r7, r1]
	subs r0, #1
	bl sub_805F0DC
	ldr r0, _08048240 @ =gPal
	movs r1, #6
	movs r2, #0xa
	adds r3, r4, #0
	bl sub_805B5C8
	bl EnablePalSync
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bne _08048238
	strh r6, [r5, #0x2c]
	adds r0, r5, #0
	bl Proc_Break
_08048238:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08048240: .4byte gPal

	thumb_func_start sub_8048244
sub_8048244: @ 0x08048244
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08048264 @ =0x0203CCF2
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0804825A
	bl sub_805894C
	cmp r0, #0
	beq _08048268
_0804825A:
	adds r0, r4, #0
	bl Proc_Break
	b _0804828E
	.align 2, 0
_08048264: .4byte 0x0203CCF2
_08048268:
	ldr r0, _08048294 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl ApplyChapterMapGraphics
	movs r0, #0x10
	bl sub_805B9A4
	bl RenderMap
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	adds r0, r4, #0
	bl Proc_Break
_0804828E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08048294: .4byte gPlaySt

	thumb_func_start sub_8048298
sub_8048298: @ 0x08048298
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _080482BC @ =0x0203CCF2
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _080482B2
	bl sub_805894C
	adds r5, r0, #0
	cmp r5, #0
	beq _080482C0
_080482B2:
	adds r0, r4, #0
	bl Proc_Break
	b _080482EC
	.align 2, 0
_080482BC: .4byte 0x0203CCF2
_080482C0:
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r0, #8
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #4
	bl Interpolate
	bl sub_805B9A4
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bne _080482EC
	strh r5, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
_080482EC:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_80482F4
sub_80482F4: @ 0x080482F4
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r2, _08048350 @ =0x0203CD16
	movs r1, #0
	ldrsh r0, [r2, r1]
	movs r3, #4
	ldrsh r1, [r2, r3]
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #8
	strh r0, [r4, #0x34]
	strh r0, [r4, #0x32]
	movs r1, #2
	ldrsh r0, [r2, r1]
	movs r3, #6
	ldrsh r1, [r2, r3]
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #8
	strh r0, [r4, #0x3c]
	strh r0, [r4, #0x3a]
	bl BasInit
	movs r0, #1
	bl sub_80489E8
	movs r0, #1
	bl sub_8048574
	movs r0, #1
	movs r1, #0xb
	bl sub_8048DA4
	movs r0, #1
	movs r1, #0xb
	bl sub_8048F88
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08048350: .4byte 0x0203CD16

	thumb_func_start sub_8048354
sub_8048354: @ 0x08048354
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r5, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xc
	ble _080483D4
	bl sub_80438B4
	adds r0, r4, #0
	bl Proc_Break
	bl InitBmBgLayers
	ldr r0, _080483DC @ =gDispIo
	mov ip, r0
	movs r0, #0x20
	mov r1, ip
	ldrb r1, [r1, #1]
	orrs r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r2, ip
	strb r0, [r2, #1]
	mov r0, ip
	adds r0, #0x2d
	strb r5, [r0]
	adds r0, #4
	strb r5, [r0]
	subs r0, #5
	strb r5, [r0]
	adds r0, #4
	strb r5, [r0]
	mov r5, ip
	adds r5, #0x34
	movs r1, #1
	ldrb r0, [r5]
	orrs r0, r1
	movs r6, #2
	orrs r0, r6
	movs r4, #4
	orrs r0, r4
	movs r3, #8
	orrs r0, r3
	movs r2, #0x10
	orrs r0, r2
	strb r0, [r5]
	mov r2, ip
	adds r2, #0x36
	ldrb r0, [r2]
	orrs r1, r0
	orrs r1, r6
	orrs r1, r4
	orrs r1, r3
	movs r0, #0x11
	rsbs r0, r0, #0
	ands r1, r0
	strb r1, [r2]
_080483D4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080483DC: .4byte gDispIo

	thumb_func_start sub_80483E0
sub_80483E0: @ 0x080483E0
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
	movs r0, #0
	strh r0, [r5, #0x2c]
	movs r0, #0xf
	strh r0, [r5, #0x2e]
	bl ResetUnitSprites
	bl sub_80292B8
	bl RefreshUnitSprites
	bl ForceSyncUnitSpriteSheet
	bl ApplyUnitSpritePalettes
	ldr r2, _08048468 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r3, [r1]
	orrs r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r1, #0xa
	movs r0, #4
	strb r0, [r1]
	ldr r0, _0804846C @ =0x0000FFE0
	ldrh r1, [r2, #0x3c]
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	strh r0, [r2, #0x3c]
	adds r1, r2, #0
	adds r1, #0x34
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r1, #2
	movs r0, #0x20
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	bl sub_804C500
	cmp r0, #1
	beq _08048450
	bl ApplyChapterMapPalettes
_08048450:
	bl sub_8042578
	cmp r0, #1
	bne _0804845C
	bl sub_803CF58
_0804845C:
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08048468: .4byte gDispIo
_0804846C: .4byte 0x0000FFE0

	thumb_func_start sub_8048470
sub_8048470: @ 0x08048470
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r7, r0, #0
	ldrh r0, [r7, #0x2c]
	ldrh r1, [r7, #0x2e]
	cmp r0, r1
	beq _08048488
	adds r0, #1
	strh r0, [r7, #0x2c]
_08048488:
	movs r2, #0x32
	ldrsh r1, [r7, r2]
	movs r0, #0x2c
	ldrsh r3, [r7, r0]
	movs r2, #0x2e
	ldrsh r0, [r7, r2]
	str r0, [sp]
	movs r0, #0
	movs r2, #0
	bl Interpolate
	adds r6, r0, #0
	movs r0, #0x3a
	ldrsh r1, [r7, r0]
	movs r2, #0x2c
	ldrsh r3, [r7, r2]
	movs r2, #0x2e
	ldrsh r0, [r7, r2]
	str r0, [sp]
	movs r0, #0
	movs r2, #0
	bl Interpolate
	adds r5, r0, #0
	movs r0, #0x34
	ldrsh r1, [r7, r0]
	movs r2, #0x2c
	ldrsh r3, [r7, r2]
	movs r2, #0x2e
	ldrsh r0, [r7, r2]
	str r0, [sp]
	movs r0, #0
	movs r2, #0xf0
	bl Interpolate
	adds r4, r0, #0
	movs r0, #0x3c
	ldrsh r1, [r7, r0]
	movs r2, #0x2c
	ldrsh r3, [r7, r2]
	movs r2, #0x2e
	ldrsh r0, [r7, r2]
	str r0, [sp]
	movs r0, #0
	movs r2, #0xa0
	bl Interpolate
	ldr r1, _08048550 @ =gDispIo
	movs r2, #0x2d
	adds r2, r2, r1
	mov sb, r2
	movs r2, #0
	mov r8, r2
	mov r2, sb
	strb r6, [r2]
	adds r6, r1, #0
	adds r6, #0x31
	strb r5, [r6]
	adds r5, r1, #0
	adds r5, #0x2c
	strb r4, [r5]
	adds r4, r1, #0
	adds r4, #0x30
	strb r0, [r4]
	mov r0, r8
	str r0, [sp, #4]
	ldr r1, _08048554 @ =gBg2Tm
	ldr r2, _08048558 @ =0x01000200
	add r0, sp, #4
	bl CpuFastSet
	movs r0, #4
	bl EnableBgSync
	ldrh r1, [r7, #0x2c]
	ldrh r2, [r7, #0x2e]
	cmp r1, r2
	bne _08048542
	movs r0, #0
	mov r1, r8
	strh r1, [r7, #0x2c]
	mov r2, sb
	strb r0, [r2]
	strb r0, [r6]
	movs r0, #0xf0
	strb r0, [r5]
	movs r0, #0xa0
	strb r0, [r4]
	bl EnablePalSync
	adds r0, r7, #0
	bl Proc_Break
_08048542:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08048550: .4byte gDispIo
_08048554: .4byte gBg2Tm
_08048558: .4byte 0x01000200

	thumb_func_start sub_804855C
sub_804855C: @ 0x0804855C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80425B0
	bl sub_8029240
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8048574
sub_8048574: @ 0x08048574
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldr r3, _080485DC @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r2, #0
	movs r0, #0xa
	strb r0, [r1]
	adds r1, #1
	movs r0, #6
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r2, [r0]
	ldr r0, _080485E0 @ =0x0000FFE0
	ldrh r4, [r3, #0x3c]
	ands r0, r4
	ldr r1, _080485E4 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	adds r1, r3, #0
	adds r1, #0x3d
	movs r0, #0x20
	ldrb r3, [r1]
	orrs r0, r3
	strb r0, [r1]
	ldr r0, _080485E8 @ =0x0203CD16
	movs r4, #0
	ldrsh r3, [r0, r4]
	movs r1, #4
	ldrsh r2, [r0, r1]
	cmp r3, r2
	bne _080485EC
	movs r2, #2
	ldrsh r1, [r0, r2]
	movs r3, #6
	ldrsh r0, [r0, r3]
	movs r4, #2
	cmp r1, r0
	blt _08048618
	movs r4, #6
	b _08048618
	.align 2, 0
_080485DC: .4byte gDispIo
_080485E0: .4byte 0x0000FFE0
_080485E4: .4byte 0x0000E0FF
_080485E8: .4byte 0x0203CD16
_080485EC:
	movs r4, #2
	ldrsh r1, [r0, r4]
	movs r4, #6
	ldrsh r0, [r0, r4]
	cmp r1, r0
	bne _08048602
	movs r4, #4
	cmp r3, r2
	bge _08048618
	movs r4, #0
	b _08048618
_08048602:
	cmp r3, r2
	bge _08048610
	movs r4, #1
	cmp r1, r0
	blt _08048618
	movs r4, #7
	b _08048618
_08048610:
	movs r4, #3
	cmp r1, r0
	blt _08048618
	movs r4, #5
_08048618:
	ldr r0, _0804862C @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #3
	bgt _08048630
	cmp r0, #1
	bge _0804863C
	cmp r0, #0
	beq _08048634
	b _0804863C
	.align 2, 0
_0804862C: .4byte 0x0203CD14
_08048630:
	cmp r0, #4
	bne _0804863C
_08048634:
	ldr r0, _08048638 @ =0x085CBBC8
	b _0804863E
	.align 2, 0
_08048638: .4byte 0x085CBBC8
_0804863C:
	ldr r0, _08048670 @ =0x085CBBE8
_0804863E:
	lsls r1, r4, #2
	adds r0, r1, r0
	ldr r0, [r0]
	adds r6, r1, #0
	ldr r1, _08048674 @ =0x06010000
	bl LZ77UnCompVram
	ldr r0, _08048678 @ =0x08119CD8
	ldr r1, _0804867C @ =0x02021988
	movs r2, #1
	bl CpuFastSet
	bl EnablePalSync
	ldr r0, _08048680 @ =0x0203CD14
	movs r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #4
	bls _08048666
	b _08048942
_08048666:
	lsls r0, r0, #2
	ldr r1, _08048684 @ =_08048688
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08048670: .4byte 0x085CBBE8
_08048674: .4byte 0x06010000
_08048678: .4byte 0x08119CD8
_0804867C: .4byte 0x02021988
_08048680: .4byte 0x0203CD14
_08048684: .4byte _08048688
_08048688: @ jump table
	.4byte _0804869C @ case 0
	.4byte _0804873C @ case 1
	.4byte _0804873C @ case 2
	.4byte _080488A8 @ case 3
	.4byte _0804869C @ case 4
_0804869C:
	ldr r0, _080486EC @ =0x085CBBB0
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r7, [r5, #0x44]
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	strh r0, [r5, #0x2c]
	movs r0, #0xb
	strh r0, [r5, #0x2e]
	ldr r2, _080486F0 @ =0x0203CD16
	movs r3, #0
	ldrsh r0, [r2, r3]
	movs r4, #4
	ldrsh r1, [r2, r4]
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #8
	strh r0, [r5, #0x32]
	movs r1, #2
	ldrsh r0, [r2, r1]
	movs r3, #6
	ldrsh r1, [r2, r3]
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #8
	strh r0, [r5, #0x3a]
	movs r0, #0x78
	strh r0, [r5, #0x34]
	movs r0, #0x68
	strh r0, [r5, #0x3c]
	ldr r0, [r5, #0x44]
	cmp r0, #0
	bne _080486F8
	ldr r0, _080486F4 @ =0x085CBC08
	b _080486FA
	.align 2, 0
_080486EC: .4byte 0x085CBBB0
_080486F0: .4byte 0x0203CD16
_080486F4: .4byte 0x085CBC08
_080486F8:
	ldr r0, _08048728 @ =0x085CBC68
_080486FA:
	adds r0, r6, r0
	ldr r0, [r0]
	movs r1, #0x64
	bl BasCreate
	adds r2, r0, #0
	str r2, [r5, #0x5c]
	movs r0, #0x90
	lsls r0, r0, #7
	strh r0, [r2, #8]
	ldr r0, [r2, #0x1c]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r2, #0x1c]
	ldr r0, [r5, #0x44]
	cmp r0, #0
	bne _0804872C
	ldrh r0, [r5, #0x32]
	strh r0, [r2, #2]
	ldrh r0, [r5, #0x3a]
	b _08048732
	.align 2, 0
_08048728: .4byte 0x085CBC68
_0804872C:
	ldrh r0, [r5, #0x34]
	strh r0, [r2, #2]
	ldrh r0, [r5, #0x3c]
_08048732:
	strh r0, [r2, #4]
	ldr r0, _08048738 @ =0x085CBCC8
	b _08048936
	.align 2, 0
_08048738: .4byte 0x085CBCC8
_0804873C:
	ldr r0, _08048798 @ =0x085CBBB0
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r7, [r5, #0x44]
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	strh r0, [r5, #0x2c]
	movs r0, #0xb
	strh r0, [r5, #0x2e]
	ldr r1, _0804879C @ =0x0203CD16
	movs r4, #0
	ldrsh r0, [r1, r4]
	lsls r0, r0, #4
	adds r0, #8
	strh r0, [r5, #0x32]
	movs r2, #2
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r0, #8
	strh r0, [r5, #0x3a]
	movs r2, #0x48
	strh r2, [r5, #0x34]
	movs r0, #0x68
	strh r0, [r5, #0x3c]
	ldr r0, _080487A0 @ =0x0201773C
	ldr r0, [r0]
	cmp r0, #1
	bne _0804878E
	ldr r1, _080487A4 @ =0x081122D0
	ldr r0, _080487A8 @ =0x0203CD14
	movs r3, #0
	ldrsh r0, [r0, r3]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	subs r0, r2, r0
	strh r0, [r5, #0x34]
_0804878E:
	ldr r0, [r5, #0x44]
	cmp r0, #0
	bne _080487B0
	ldr r0, _080487AC @ =0x085CBC28
	b _080487B2
	.align 2, 0
_08048798: .4byte 0x085CBBB0
_0804879C: .4byte 0x0203CD16
_080487A0: .4byte 0x0201773C
_080487A4: .4byte 0x081122D0
_080487A8: .4byte 0x0203CD14
_080487AC: .4byte 0x085CBC28
_080487B0:
	ldr r0, _080487E0 @ =0x085CBC88
_080487B2:
	adds r0, r6, r0
	ldr r0, [r0]
	movs r1, #0x64
	bl BasCreate
	adds r2, r0, #0
	str r2, [r5, #0x5c]
	movs r0, #0x90
	lsls r0, r0, #7
	strh r0, [r2, #8]
	ldr r0, [r2, #0x1c]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r2, #0x1c]
	ldr r0, [r5, #0x44]
	cmp r0, #0
	bne _080487E4
	ldrh r0, [r5, #0x32]
	strh r0, [r2, #2]
	ldrh r0, [r5, #0x3a]
	b _080487EA
	.align 2, 0
_080487E0: .4byte 0x085CBC88
_080487E4:
	ldrh r0, [r5, #0x34]
	strh r0, [r2, #2]
	ldrh r0, [r5, #0x3c]
_080487EA:
	strh r0, [r2, #4]
	ldr r0, _08048858 @ =0x085CBCE8
	adds r0, r6, r0
	ldr r0, [r0]
	str r0, [r5, #0x60]
	movs r4, #0
	strh r4, [r5, #0x3e]
	strh r4, [r5, #0x36]
	ldr r0, _0804885C @ =0x085CBBB0
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r7, [r5, #0x44]
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	strh r4, [r5, #0x2c]
	movs r0, #0xb
	strh r0, [r5, #0x2e]
	ldr r1, _08048860 @ =0x0203CD16
	movs r4, #4
	ldrsh r0, [r1, r4]
	lsls r0, r0, #4
	adds r0, #8
	strh r0, [r5, #0x32]
	movs r2, #6
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r0, #8
	strh r0, [r5, #0x3a]
	movs r0, #0xa8
	strh r0, [r5, #0x34]
	movs r0, #0x68
	strh r0, [r5, #0x3c]
	ldr r0, _08048864 @ =0x0201773C
	ldr r0, [r0]
	cmp r0, #0
	bne _0804884C
	ldr r1, _08048868 @ =0x081122D0
	ldr r0, _0804886C @ =0x0203CD14
	movs r3, #0
	ldrsh r0, [r0, r3]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	adds r0, #0xa8
	strh r0, [r5, #0x34]
_0804884C:
	ldr r0, [r5, #0x44]
	cmp r0, #0
	bne _08048874
	ldr r0, _08048870 @ =0x085CBC48
	b _08048876
	.align 2, 0
_08048858: .4byte 0x085CBCE8
_0804885C: .4byte 0x085CBBB0
_08048860: .4byte 0x0203CD16
_08048864: .4byte 0x0201773C
_08048868: .4byte 0x081122D0
_0804886C: .4byte 0x0203CD14
_08048870: .4byte 0x085CBC48
_08048874:
	ldr r0, _080488A4 @ =0x085CBCA8
_08048876:
	adds r0, r6, r0
	ldr r0, [r0]
	movs r1, #0x64
	bl BasCreate
	adds r2, r0, #0
	str r2, [r5, #0x5c]
	movs r0, #0x90
	lsls r0, r0, #7
	strh r0, [r2, #8]
	ldr r0, [r2, #0x1c]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r2, #0x1c]
	ldr r0, [r5, #0x44]
	cmp r0, #0
	bne _0804892C
	ldrh r0, [r5, #0x32]
	strh r0, [r2, #2]
	ldrh r0, [r5, #0x3a]
	b _08048932
	.align 2, 0
_080488A4: .4byte 0x085CBCA8
_080488A8:
	ldr r0, _080488EC @ =0x085CBBB0
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r7, [r5, #0x44]
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	strh r0, [r5, #0x2c]
	movs r0, #0xb
	strh r0, [r5, #0x2e]
	ldr r1, _080488F0 @ =0x0203CD16
	movs r4, #4
	ldrsh r0, [r1, r4]
	lsls r0, r0, #4
	adds r0, #8
	strh r0, [r5, #0x32]
	movs r2, #6
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r0, #8
	strh r0, [r5, #0x3a]
	movs r0, #0x78
	strh r0, [r5, #0x34]
	movs r0, #0x68
	strh r0, [r5, #0x3c]
	ldr r0, [r5, #0x44]
	cmp r0, #0
	bne _080488F8
	ldr r0, _080488F4 @ =0x085CBC48
	b _080488FA
	.align 2, 0
_080488EC: .4byte 0x085CBBB0
_080488F0: .4byte 0x0203CD16
_080488F4: .4byte 0x085CBC48
_080488F8:
	ldr r0, _08048928 @ =0x085CBCA8
_080488FA:
	adds r0, r6, r0
	ldr r0, [r0]
	movs r1, #0x64
	bl BasCreate
	adds r2, r0, #0
	str r2, [r5, #0x5c]
	movs r0, #0x90
	lsls r0, r0, #7
	strh r0, [r2, #8]
	ldr r0, [r2, #0x1c]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r2, #0x1c]
	ldr r0, [r5, #0x44]
	cmp r0, #0
	bne _0804892C
	ldrh r0, [r5, #0x32]
	strh r0, [r2, #2]
	ldrh r0, [r5, #0x3a]
	b _08048932
	.align 2, 0
_08048928: .4byte 0x085CBCA8
_0804892C:
	ldrh r0, [r5, #0x34]
	strh r0, [r2, #2]
	ldrh r0, [r5, #0x3c]
_08048932:
	strh r0, [r2, #4]
	ldr r0, _08048948 @ =0x085CBD08
_08048936:
	adds r0, r6, r0
	ldr r0, [r0]
	str r0, [r5, #0x60]
	movs r0, #0
	strh r0, [r5, #0x3e]
	strh r0, [r5, #0x36]
_08048942:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08048948: .4byte 0x085CBD08

	thumb_func_start sub_804894C
sub_804894C: @ 0x0804894C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r5, [r4, #0x5c]
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	movs r2, #0x2e
	ldrsh r0, [r4, r2]
	cmp r1, r0
	blt _0804896E
	adds r0, r5, #0
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
	b _080489DE
_0804896E:
	ldr r0, [r4, #0x44]
	cmp r0, #0
	bne _08048998
	movs r3, #0x32
	ldrsh r1, [r4, r3]
	movs r6, #0x34
	ldrsh r2, [r4, r6]
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r6, #0x2e
	ldrsh r0, [r4, r6]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	strh r0, [r5, #2]
	movs r0, #0x3a
	ldrsh r1, [r4, r0]
	movs r3, #0x3c
	ldrsh r2, [r4, r3]
	b _080489BA
_08048998:
	movs r0, #0x34
	ldrsh r1, [r4, r0]
	movs r3, #0x32
	ldrsh r2, [r4, r3]
	movs r6, #0x2c
	ldrsh r3, [r4, r6]
	movs r6, #0x2e
	ldrsh r0, [r4, r6]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	strh r0, [r5, #2]
	movs r0, #0x3c
	ldrsh r1, [r4, r0]
	movs r3, #0x3a
	ldrsh r2, [r4, r3]
_080489BA:
	movs r6, #0x2c
	ldrsh r3, [r4, r6]
	movs r6, #0x2e
	ldrsh r0, [r4, r6]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	strh r0, [r5, #4]
	ldrh r2, [r4, #0x2c]
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	movs r3, #0x2e
	ldrsh r0, [r4, r3]
	cmp r1, r0
	bgt _080489DE
	adds r0, r2, #1
	strh r0, [r4, #0x2c]
_080489DE:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80489E8
sub_80489E8: @ 0x080489E8
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _08048A14 @ =0x085CBD28
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x44]
	movs r1, #0
	str r1, [r4, #0x50]
	str r1, [r4, #0x4c]
	ldr r0, _08048A18 @ =0x0203CD14
	movs r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #0
	blt _08048A5E
	cmp r0, #3
	ble _08048A1C
	cmp r0, #4
	beq _08048A4C
	b _08048A5E
	.align 2, 0
_08048A14: .4byte 0x085CBD28
_08048A18: .4byte 0x0203CD14
_08048A1C:
	ldr r0, _08048A48 @ =0x0203CCF8
	movs r1, #0
	ldrsh r5, [r0, r1]
	cmp r5, #1
	bne _08048A30
	bl sub_8058F00
	cmp r0, #0
	beq _08048A30
	str r5, [r4, #0x4c]
_08048A30:
	ldr r0, _08048A48 @ =0x0203CCF8
	movs r2, #2
	ldrsh r5, [r0, r2]
	cmp r5, #1
	bne _08048A5E
	bl sub_8058F00
	cmp r0, #1
	beq _08048A5E
	str r5, [r4, #0x50]
	b _08048A5E
	.align 2, 0
_08048A48: .4byte 0x0203CCF8
_08048A4C:
	cmp r5, #0
	bne _08048A58
	str r1, [r4, #0x4c]
	movs r0, #1
	str r0, [r4, #0x50]
	b _08048A5E
_08048A58:
	movs r0, #1
	str r0, [r4, #0x4c]
	str r1, [r4, #0x50]
_08048A5E:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8048A64
sub_8048A64: @ 0x08048A64
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r1, _08048B74 @ =0x081122C0
	ldr r0, _08048B78 @ =0x0203CD14
	movs r2, #0
	ldrsh r0, [r0, r2]
	adds r0, r0, r1
	ldr r1, _08048B7C @ =0x08112298
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrb r6, [r0]
	bl sub_804B048
	ldr r0, [r4, #0x44]
	cmp r0, #0
	bne _08048A9C
	ldr r1, _08048B80 @ =gBattleSt
	movs r0, #0x40
	ldrb r1, [r1, #1]
	ands r0, r1
	cmp r0, #0
	beq _08048A9C
	ldr r0, _08048B84 @ =gPal
	movs r1, #0x17
	movs r2, #1
	bl sub_805B780
_08048A9C:
	ldr r5, _08048B88 @ =0x0203CCF8
	ldrh r3, [r5]
	cmp r3, #1
	bne _08048AC2
	ldr r0, _08048B8C @ =0x02000054
	ldr r1, [r0]
	lsls r0, r6, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, _08048B90 @ =0x0200F1C0
	adds r1, r1, r0
	ldr r0, [r1, #4]
	ldr r1, [r1, #8]
	ldr r2, _08048B94 @ =0x020041C0
	adds r1, r1, r2
	str r1, [r4, #0x54]
	ldr r1, _08048B98 @ =0x02000080
	bl LZ77UnCompWram
_08048AC2:
	ldrh r5, [r5, #2]
	cmp r5, #1
	bne _08048AE6
	ldr r0, _08048B9C @ =0x02000058
	ldr r1, [r0]
	lsls r0, r6, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, _08048BA0 @ =0x02011BC0
	adds r1, r1, r0
	ldr r0, [r1, #4]
	ldr r1, [r1, #8]
	ldr r2, _08048BA4 @ =0x020099C0
	adds r1, r1, r2
	str r1, [r4, #0x58]
	ldr r1, _08048BA8 @ =0x02002080
	bl LZ77UnCompWram
_08048AE6:
	ldr r5, _08048BAC @ =0x0203CD98
	ldr r0, [r5]
	cmp r0, #0
	beq _08048AF4
	ldr r1, _08048BB0 @ =0x02001080
	bl LZ77UnCompWram
_08048AF4:
	ldr r0, [r5, #4]
	cmp r0, #0
	beq _08048B00
	ldr r1, _08048BB4 @ =0x02003080
	bl LZ77UnCompWram
_08048B00:
	ldr r1, _08048BB8 @ =0x06014000
	ldr r0, _08048B98 @ =0x02000080
	movs r2, #0x80
	lsls r2, r2, #7
	bl RegisterDataMove
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0xb
	strh r0, [r4, #0x2e]
	ldr r1, _08048BBC @ =0x0203CD16
	movs r5, #0
	ldrsh r0, [r1, r5]
	lsls r0, r0, #4
	adds r0, #8
	strh r0, [r4, #0x32]
	movs r2, #2
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r0, #8
	strh r0, [r4, #0x3a]
	movs r3, #4
	ldrsh r0, [r1, r3]
	lsls r0, r0, #4
	adds r0, #8
	strh r0, [r4, #0x34]
	movs r5, #6
	ldrsh r0, [r1, r5]
	lsls r0, r0, #4
	adds r0, #8
	strh r0, [r4, #0x3c]
	ldr r1, _08048BC0 @ =0x081122C5
	ldr r2, _08048B78 @ =0x0203CD14
	movs r3, #0
	ldrsh r0, [r2, r3]
	adds r0, r0, r1
	ldrb r5, [r0]
	strh r5, [r4, #0x36]
	ldr r1, _08048BC4 @ =0x081122CA
	movs r3, #0
	ldrsh r0, [r2, r3]
	adds r0, r0, r1
	ldrb r3, [r0]
	strh r3, [r4, #0x38]
	ldr r0, _08048BC8 @ =0x0201773C
	ldr r0, [r0]
	cmp r0, #0
	bne _08048BD0
	ldr r0, _08048BCC @ =0x081122D0
	movs r5, #0
	ldrsh r1, [r2, r5]
	lsls r1, r1, #1
	adds r1, r1, r0
	ldrh r1, [r1]
	adds r0, r1, r3
	strh r0, [r4, #0x38]
	b _08048BE0
	.align 2, 0
_08048B74: .4byte 0x081122C0
_08048B78: .4byte 0x0203CD14
_08048B7C: .4byte 0x08112298
_08048B80: .4byte gBattleSt
_08048B84: .4byte gPal
_08048B88: .4byte 0x0203CCF8
_08048B8C: .4byte 0x02000054
_08048B90: .4byte 0x0200F1C0
_08048B94: .4byte 0x020041C0
_08048B98: .4byte 0x02000080
_08048B9C: .4byte 0x02000058
_08048BA0: .4byte 0x02011BC0
_08048BA4: .4byte 0x020099C0
_08048BA8: .4byte 0x02002080
_08048BAC: .4byte 0x0203CD98
_08048BB0: .4byte 0x02001080
_08048BB4: .4byte 0x02003080
_08048BB8: .4byte 0x06014000
_08048BBC: .4byte 0x0203CD16
_08048BC0: .4byte 0x081122C5
_08048BC4: .4byte 0x081122CA
_08048BC8: .4byte 0x0201773C
_08048BCC: .4byte 0x081122D0
_08048BD0:
	ldr r0, _08048BEC @ =0x081122D0
	movs r3, #0
	ldrsh r1, [r2, r3]
	lsls r1, r1, #1
	adds r1, r1, r0
	ldrh r1, [r1]
	subs r0, r5, r1
	strh r0, [r4, #0x36]
_08048BE0:
	adds r0, r4, #0
	bl Proc_Break
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08048BEC: .4byte 0x081122D0

	thumb_func_start sub_8048BF0
sub_8048BF0: @ 0x08048BF0
	push {r4, r5, r6, r7, lr}
	ldr r4, _08048C10 @ =0xFFFFFCB4
	add sp, r4
	adds r4, r0, #0
	add r5, sp, #0x304
	ldrh r2, [r4, #0x2c]
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	movs r3, #0x2e
	ldrsh r0, [r4, r3]
	cmp r1, r0
	blt _08048C14
	adds r0, r4, #0
	bl Proc_Break
	b _08048D8A
	.align 2, 0
_08048C10: .4byte 0xFFFFFCB4
_08048C14:
	adds r0, r2, #1
	strh r0, [r4, #0x2c]
	ldr r0, [r4, #0x44]
	cmp r0, #0
	bne _08048C2C
	movs r1, #0x94
	lsls r1, r1, #2
	movs r2, #0x80
	lsls r2, r2, #1
	movs r6, #0x2c
	ldrsh r3, [r4, r6]
	b _08048C38
_08048C2C:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x94
	lsls r2, r2, #2
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
_08048C38:
	movs r6, #0x2e
	ldrsh r0, [r4, r6]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	ldr r0, [r4, #0x4c]
	cmp r0, #1
	bne _08048CEA
	ldr r0, [r4, #0x54]
	lsls r3, r7, #0x10
	asrs r3, r3, #0x10
	movs r1, #0
	str r1, [sp]
	add r1, sp, #4
	adds r2, r3, #0
	bl sub_805BB24
	ldr r0, [r4, #0x44]
	cmp r0, #0
	bne _08048C96
	movs r0, #0x32
	ldrsh r1, [r4, r0]
	movs r3, #0x36
	ldrsh r2, [r4, r3]
	movs r6, #0x2c
	ldrsh r3, [r4, r6]
	movs r6, #0x2e
	ldrsh r0, [r4, r6]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	movs r0, #0x3a
	ldrsh r1, [r4, r0]
	movs r2, #0x2c
	ldrsh r3, [r4, r2]
	movs r2, #0x2e
	ldrsh r0, [r4, r2]
	str r0, [sp]
	movs r0, #0
	movs r2, #0x58
	b _08048CC4
_08048C96:
	movs r3, #0x36
	ldrsh r1, [r4, r3]
	movs r6, #0x32
	ldrsh r2, [r4, r6]
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r6, #0x2e
	ldrsh r0, [r4, r6]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	movs r0, #0x3a
	ldrsh r2, [r4, r0]
	movs r1, #0x2c
	ldrsh r3, [r4, r1]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x58
_08048CC4:
	bl Interpolate
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	add r2, sp, #4
	str r2, [r5, #0x3c]
	movs r0, #0
	strh r6, [r5, #2]
	strh r1, [r5, #4]
	movs r1, #0x80
	lsls r1, r1, #3
	strh r1, [r5, #0xc]
	movs r1, #0xe4
	lsls r1, r1, #7
	strh r1, [r5, #8]
	str r0, [r5, #0x1c]
	adds r0, r5, #0
	bl BasPutOam
_08048CEA:
	ldr r1, [r4, #0x50]
	cmp r1, #1
	bne _08048D8A
	ldr r0, [r4, #0x58]
	lsls r3, r7, #0x10
	asrs r3, r3, #0x10
	str r1, [sp]
	add r1, sp, #4
	adds r2, r3, #0
	bl sub_805BB24
	ldr r0, [r4, #0x44]
	cmp r0, #0
	bne _08048D36
	movs r3, #0x34
	ldrsh r1, [r4, r3]
	movs r6, #0x38
	ldrsh r2, [r4, r6]
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r6, #0x2e
	ldrsh r0, [r4, r6]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	movs r0, #0x3c
	ldrsh r1, [r4, r0]
	movs r2, #0x2c
	ldrsh r3, [r4, r2]
	movs r2, #0x2e
	ldrsh r0, [r4, r2]
	str r0, [sp]
	movs r0, #0
	movs r2, #0x58
	b _08048D64
_08048D36:
	movs r3, #0x38
	ldrsh r1, [r4, r3]
	movs r6, #0x34
	ldrsh r2, [r4, r6]
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r6, #0x2e
	ldrsh r0, [r4, r6]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	movs r0, #0x3c
	ldrsh r2, [r4, r0]
	movs r1, #0x2c
	ldrsh r3, [r4, r1]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x58
_08048D64:
	bl Interpolate
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	add r2, sp, #4
	str r2, [r5, #0x3c]
	movs r0, #0
	strh r6, [r5, #2]
	strh r1, [r5, #4]
	movs r1, #0x80
	lsls r1, r1, #3
	strh r1, [r5, #0xc]
	movs r1, #0x93
	lsls r1, r1, #8
	strh r1, [r5, #8]
	str r0, [r5, #0x1c]
	adds r0, r5, #0
	bl BasPutOam
_08048D8A:
	movs r3, #0xd3
	lsls r3, r3, #2
	add sp, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8048D98
sub_8048D98: @ 0x08048D98
	push {lr}
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8048DA4
sub_8048DA4: @ 0x08048DA4
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, _08048DE8 @ =0x085CBD50
	movs r1, #3
	bl SpawnProc
	str r5, [r0, #0x44]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r4, [r0, #0x2e]
	movs r1, #0x39
	strh r1, [r0, #0x30]
	movs r2, #0
	cmp r5, #0
	bne _08048DC6
	movs r2, #0x39
_08048DC6:
	ldr r1, _08048DEC @ =0x02000030
	movs r3, #0
	ldrsh r0, [r1, r3]
	ldrh r1, [r1, #2]
	adds r1, r1, r2
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_8043918
	ldr r1, _08048DF0 @ =0x0201E0EC
	movs r0, #1
	str r0, [r1]
	bl sub_8043950
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08048DE8: .4byte 0x085CBD50
_08048DEC: .4byte 0x02000030
_08048DF0: .4byte 0x0201E0EC

	thumb_func_start sub_8048DF4
sub_8048DF4: @ 0x08048DF4
	ldr r0, _08048E00 @ =0x0201E0EC
	ldr r0, [r0]
	cmp r0, #0
	beq _08048E04
	movs r0, #0
	b _08048E06
	.align 2, 0
_08048E00: .4byte 0x0201E0EC
_08048E04:
	movs r0, #1
_08048E06:
	bx lr

	thumb_func_start sub_8048E08
sub_8048E08: @ 0x08048E08
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r2, [r4, #0x2c]
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	movs r3, #0x2e
	ldrsh r0, [r4, r3]
	cmp r1, r0
	blt _08048E34
	ldr r1, _08048E30 @ =0x0201E0EC
	movs r0, #0
	str r0, [r1]
	bl sub_8043940
	adds r0, r4, #0
	bl Proc_Break
	b _08048E7C
	.align 2, 0
_08048E30: .4byte 0x0201E0EC
_08048E34:
	adds r0, r2, #1
	strh r0, [r4, #0x2c]
	ldr r0, [r4, #0x44]
	cmp r0, #0
	bne _08048E52
	movs r0, #0x30
	ldrsh r1, [r4, r0]
	movs r2, #0x2c
	ldrsh r3, [r4, r2]
	movs r2, #0x2e
	ldrsh r0, [r4, r2]
	str r0, [sp]
	movs r0, #1
	movs r2, #0
	b _08048E64
_08048E52:
	movs r3, #0x30
	ldrsh r2, [r4, r3]
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #4
	movs r1, #0
_08048E64:
	bl Interpolate
	adds r2, r0, #0
	ldr r1, _08048E84 @ =0x02000030
	movs r3, #0
	ldrsh r0, [r1, r3]
	ldrh r1, [r1, #2]
	adds r1, r1, r2
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_8043918
_08048E7C:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08048E84: .4byte 0x02000030

	thumb_func_start sub_8048E88
sub_8048E88: @ 0x08048E88
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	ldr r0, _08048EB8 @ =0x085CBD68
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x44]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	strh r6, [r0, #0x30]
	subs r1, #0x31
	str r1, [r0, #0x48]
	cmp r4, #0
	bne _08048EBC
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r0, #0
	bl sub_804421C
	b _08048EC4
	.align 2, 0
_08048EB8: .4byte 0x085CBD68
_08048EBC:
	movs r0, #0
	movs r1, #0
	bl sub_804421C
_08048EC4:
	ldr r1, _08048ED4 @ =0x0201E0F0
	movs r0, #1
	str r0, [r1]
	bl sub_8044254
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08048ED4: .4byte 0x0201E0F0

	thumb_func_start sub_8048ED8
sub_8048ED8: @ 0x08048ED8
	ldr r0, _08048EE4 @ =0x0201E0F0
	ldr r0, [r0]
	cmp r0, #0
	beq _08048EE8
	movs r0, #0
	b _08048EEA
	.align 2, 0
_08048EE4: .4byte 0x0201E0F0
_08048EE8:
	movs r0, #1
_08048EEA:
	bx lr

	thumb_func_start sub_8048EEC
sub_8048EEC: @ 0x08048EEC
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	ldrh r2, [r1, #0x30]
	cmp r0, r2
	bne _08048F04
	movs r0, #0
	strh r0, [r1, #0x2c]
	adds r0, r1, #0
	bl Proc_Break
	b _08048F08
_08048F04:
	adds r0, #1
	strh r0, [r1, #0x2c]
_08048F08:
	pop {r0}
	bx r0

	thumb_func_start sub_8048F0C
sub_8048F0C: @ 0x08048F0C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r2, [r4, #0x2c]
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	movs r3, #0x2e
	ldrsh r0, [r4, r3]
	cmp r1, r0
	blt _08048F40
	ldr r0, _08048F3C @ =0x0201E0F0
	movs r1, #0
	str r1, [r0]
	bl sub_8044244
	ldr r0, [r4, #0x44]
	cmp r0, #2
	bne _08048F34
	bl sub_80441C8
_08048F34:
	adds r0, r4, #0
	bl Proc_Break
	b _08048F7E
	.align 2, 0
_08048F3C: .4byte 0x0201E0F0
_08048F40:
	adds r0, r2, #1
	strh r0, [r4, #0x2c]
	ldr r0, [r4, #0x44]
	cmp r0, #0
	bne _08048F60
	ldr r1, [r4, #0x48]
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r2, #0x2e
	ldrsh r0, [r4, r2]
	str r0, [sp]
	movs r0, #1
	movs r2, #0
	bl Interpolate
	b _08048F74
_08048F60:
	ldr r2, [r4, #0x48]
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #4
	movs r1, #0
	bl Interpolate
_08048F74:
	lsls r1, r0, #0x10
	lsrs r1, r1, #0x10
	movs r0, #0
	bl sub_804421C
_08048F7E:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8048F88
sub_8048F88: @ 0x08048F88
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08048FAC @ =0x085CBD88
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x44]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	cmp r4, #0
	bne _08048FB4
	ldr r2, _08048FB0 @ =0x0000FFA8
	movs r0, #2
	bl SetBgOffset
	b _08048FBE
	.align 2, 0
_08048FAC: .4byte 0x085CBD88
_08048FB0: .4byte 0x0000FFA8
_08048FB4:
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
_08048FBE:
	ldr r1, _08048FCC @ =0x0201E0F4
	movs r0, #1
	str r0, [r1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08048FCC: .4byte 0x0201E0F4

	thumb_func_start sub_8048FD0
sub_8048FD0: @ 0x08048FD0
	ldr r0, _08048FDC @ =0x0201E0F4
	ldr r0, [r0]
	cmp r0, #0
	beq _08048FE0
	movs r0, #0
	b _08048FE2
	.align 2, 0
_08048FDC: .4byte 0x0201E0F4
_08048FE0:
	movs r0, #1
_08048FE2:
	bx lr

	thumb_func_start sub_8048FE4
sub_8048FE4: @ 0x08048FE4
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldrh r2, [r4, #0x2c]
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	movs r3, #0x2e
	ldrsh r0, [r4, r3]
	cmp r1, r0
	blt _0804900C
	ldr r1, _08049008 @ =0x0201E0F4
	movs r0, #0
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
	b _08049050
	.align 2, 0
_08049008: .4byte 0x0201E0F4
_0804900C:
	adds r0, r2, #1
	strh r0, [r4, #0x2c]
	ldr r0, [r4, #0x44]
	cmp r0, #0
	bne _0804902E
	movs r1, #0x50
	rsbs r1, r1, #0
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r2, #0x2e
	ldrsh r0, [r4, r2]
	str r0, [sp]
	movs r0, #1
	movs r2, #0
	bl Interpolate
	b _08049044
_0804902E:
	movs r2, #0x50
	rsbs r2, r2, #0
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #4
	movs r1, #0
	bl Interpolate
_08049044:
	lsls r2, r0, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
_08049050:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8049058
sub_8049058: @ 0x08049058
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x24
	movs r0, #1
	str r0, [sp, #0x18]
	ldr r1, _0804907C @ =gBattleSt
	movs r0, #0x20
	ldrb r1, [r1, #1]
	ands r0, r1
	cmp r0, #0
	bne _08049080
	movs r0, #0
	bl sub_804C4F4
	b _08049086
	.align 2, 0
_0804907C: .4byte gBattleSt
_08049080:
	movs r0, #1
	bl sub_804C4F4
_08049086:
	ldr r1, _0804909C @ =gBmSt
	movs r0, #0x40
	ldrb r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	bne _080490A0
	movs r0, #0
	bl sub_804256C
	b _080490A6
	.align 2, 0
_0804909C: .4byte gBmSt
_080490A0:
	movs r0, #1
	bl sub_804256C
_080490A6:
	ldr r1, _080490C0 @ =gBattleSt
	movs r0, #0x10
	ldrb r1, [r1, #1]
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0
	beq _080490C8
	ldr r1, _080490C4 @ =0x0203CD14
	movs r0, #4
	strh r0, [r1]
	adds r0, r1, #0
	b _080490CC
	.align 2, 0
_080490C0: .4byte gBattleSt
_080490C4: .4byte 0x0203CD14
_080490C8:
	ldr r0, _080490F8 @ =0x0203CD14
	strh r2, [r0]
_080490CC:
	ldrh r0, [r0]
	cmp r0, #4
	bne _08049114
	ldr r1, _080490FC @ =0x0203CD7C
	ldr r0, _08049100 @ =gBattleUnitA
	str r0, [r1]
	str r0, [sp]
	ldr r1, _08049104 @ =0x0203CD80
	ldr r0, _08049108 @ =gBattleUnitB
	str r0, [r1]
	str r0, [sp, #4]
	ldr r1, _0804910C @ =0x0203CCFC
	movs r0, #0
	strh r0, [r1, #2]
	strh r0, [r1]
	ldr r0, _08049110 @ =0x0203CCF8
	movs r1, #1
	strh r1, [r0]
	strh r1, [r0, #2]
	ldr r7, [sp]
	adds r3, r0, #0
	b _0804920E
	.align 2, 0
_080490F8: .4byte 0x0203CD14
_080490FC: .4byte 0x0203CD7C
_08049100: .4byte gBattleUnitA
_08049104: .4byte 0x0203CD80
_08049108: .4byte gBattleUnitB
_0804910C: .4byte 0x0203CCFC
_08049110: .4byte 0x0203CCF8
_08049114:
	ldr r5, _0804914C @ =gBattleUnitA
	movs r4, #0x40
	rsbs r4, r4, #0
	adds r0, r4, #0
	ldrb r1, [r5, #0xb]
	ands r0, r1
	bl sub_804A500
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	ldr r0, _08049150 @ =gBattleUnitB
	ldrb r0, [r0, #0xb]
	ands r4, r0
	adds r0, r4, #0
	bl sub_804A500
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	ldr r1, _08049154 @ =gBattleSt
	movs r0, #0x40
	ldrb r1, [r1, #1]
	ands r0, r1
	cmp r0, #0
	beq _08049158
	movs r2, #2
	str r2, [sp, #0x18]
	b _0804917C
	.align 2, 0
_0804914C: .4byte gBattleUnitA
_08049150: .4byte gBattleUnitB
_08049154: .4byte gBattleSt
_08049158:
	adds r1, r5, #0
	adds r1, #0x4a
	ldrh r0, [r1]
	cmp r0, #0
	bne _08049168
	movs r3, #2
	str r3, [sp, #0x18]
	b _0804917C
_08049168:
	ldrh r0, [r1]
	bl GetItemIid
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_805F784
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x18]
_0804917C:
	ldr r1, _080491D0 @ =0x0203CCF8
	movs r0, #1
	strh r0, [r1, #2]
	strh r0, [r1]
	movs r4, #0
	bl sub_8042578
	cmp r0, #1
	beq _080491A4
	lsls r0, r7, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	beq _080491A2
	cmp r0, #2
	beq _080491A2
	cmp r0, #1
	bne _080491A4
	cmp r6, #1
	bne _080491A4
_080491A2:
	movs r4, #1
_080491A4:
	adds r2, r4, #0
	cmp r2, #1
	bne _080491E8
	ldr r1, _080491D4 @ =0x0203CD7C
	ldr r0, _080491D8 @ =gBattleUnitB
	str r0, [r1]
	str r0, [sp]
	ldr r1, _080491DC @ =0x0203CD80
	ldr r0, _080491E0 @ =gBattleUnitA
	str r0, [r1]
	str r0, [sp, #4]
	ldr r0, _080491E4 @ =0x0203CCFC
	movs r1, #0
	strh r2, [r0]
	strh r1, [r0, #2]
	ldr r7, [sp, #4]
	ldr r3, _080491D0 @ =0x0203CCF8
	ldr r4, [sp, #0x18]
	cmp r4, #1
	bne _0804920E
	strh r1, [r3]
	b _0804920E
	.align 2, 0
_080491D0: .4byte 0x0203CCF8
_080491D4: .4byte 0x0203CD7C
_080491D8: .4byte gBattleUnitB
_080491DC: .4byte 0x0203CD80
_080491E0: .4byte gBattleUnitA
_080491E4: .4byte 0x0203CCFC
_080491E8:
	ldr r1, _080492C4 @ =0x0203CD7C
	ldr r0, _080492C8 @ =gBattleUnitA
	str r0, [r1]
	str r0, [sp]
	ldr r1, _080492CC @ =0x0203CD80
	ldr r0, _080492D0 @ =gBattleUnitB
	str r0, [r1]
	str r0, [sp, #4]
	ldr r1, _080492D4 @ =0x0203CCFC
	movs r2, #0
	strh r2, [r1]
	movs r0, #1
	strh r0, [r1, #2]
	ldr r7, [sp]
	ldr r3, _080492D8 @ =0x0203CCF8
	ldr r0, [sp, #0x18]
	cmp r0, #1
	bne _0804920E
	strh r2, [r3, #2]
_0804920E:
	ldr r1, [sp]
	str r1, [sp, #0x10]
	ldr r2, [sp, #4]
	mov sl, r2
	ldr r4, [r1]
	str r4, [sp, #8]
	ldr r0, [r2]
	str r0, [sp, #0xc]
	movs r1, #0
	mov sb, r1
	mov r8, r1
	ldrh r1, [r3, #2]
	ldrh r2, [r3]
	str r2, [sp, #0x14]
	movs r4, #0
	ldrsh r6, [r3, r4]
	cmp r6, #0
	beq _0804923A
	ldr r2, [sp, #0x10]
	ldr r0, [r2, #4]
	ldr r0, [r0, #0x30]
	mov r8, r0
_0804923A:
	lsls r0, r1, #0x10
	asrs r5, r0, #0x10
	str r0, [sp, #0x20]
	cmp r5, #0
	beq _0804924C
	mov r3, sl
	ldr r0, [r3, #4]
	ldr r0, [r0, #0x30]
	mov sb, r0
_0804924C:
	cmp r6, #0
	beq _08049278
	ldr r3, _080492DC @ =0x0203CD16
	ldr r4, [sp, #0x10]
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	lsls r0, r0, #4
	ldr r2, _080492E0 @ =gBmSt
	movs r4, #0xc
	ldrsh r1, [r2, r4]
	subs r0, r0, r1
	asrs r0, r0, #4
	strh r0, [r3]
	ldr r1, [sp, #0x10]
	movs r0, #0xf
	ldrsb r0, [r1, r0]
	lsls r0, r0, #4
	movs r4, #0xe
	ldrsh r1, [r2, r4]
	subs r0, r0, r1
	asrs r0, r0, #4
	strh r0, [r3, #2]
_08049278:
	cmp r5, #0
	beq _080492A4
	ldr r3, _080492DC @ =0x0203CD16
	mov r1, sl
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	lsls r0, r0, #4
	ldr r2, _080492E0 @ =gBmSt
	movs r4, #0xc
	ldrsh r1, [r2, r4]
	subs r0, r0, r1
	asrs r0, r0, #4
	strh r0, [r3, #4]
	mov r1, sl
	movs r0, #0xf
	ldrsb r0, [r1, r0]
	lsls r0, r0, #4
	movs r4, #0xe
	ldrsh r1, [r2, r4]
	subs r0, r0, r1
	asrs r0, r0, #4
	strh r0, [r3, #6]
_080492A4:
	ldr r4, _080492E4 @ =0x0203CD14
	ldrh r0, [r4]
	cmp r0, #4
	beq _08049372
	adds r0, r7, #0
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemAttributes
	movs r1, #0x80
	ands r1, r0
	cmp r1, #0
	beq _080492E8
	movs r0, #2
	strh r0, [r4]
	b _0804936A
	.align 2, 0
_080492C4: .4byte 0x0203CD7C
_080492C8: .4byte gBattleUnitA
_080492CC: .4byte 0x0203CD80
_080492D0: .4byte gBattleUnitB
_080492D4: .4byte 0x0203CCFC
_080492D8: .4byte 0x0203CCF8
_080492DC: .4byte 0x0203CD16
_080492E0: .4byte gBmSt
_080492E4: .4byte 0x0203CD14
_080492E8:
	movs r0, #3
	strh r0, [r4]
	adds r0, r6, r5
	cmp r0, #2
	bne _0804936A
	ldr r0, _0804930C @ =0x0203CD16
	movs r2, #0
	ldrsh r1, [r0, r2]
	movs r3, #4
	ldrsh r2, [r0, r3]
	subs r1, r1, r2
	adds r2, r0, #0
	cmp r1, #0
	blt _08049310
	ldrh r4, [r2]
	ldrh r1, [r2, #4]
	subs r0, r4, r1
	b _08049316
	.align 2, 0
_0804930C: .4byte 0x0203CD16
_08049310:
	ldrh r3, [r2, #4]
	ldrh r4, [r2]
	subs r0, r3, r4
_08049316:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r3, r0, #0
	movs r1, #2
	ldrsh r0, [r2, r1]
	movs r4, #6
	ldrsh r1, [r2, r4]
	subs r0, r0, r1
	cmp r0, #0
	blt _08049330
	ldrh r1, [r2, #2]
	ldrh r4, [r2, #6]
	b _08049334
_08049330:
	ldrh r1, [r2, #6]
	ldrh r4, [r2, #2]
_08049334:
	subs r0, r1, r4
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r1, r3, #0x10
	asrs r1, r1, #0x10
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r0, r1, r0
	cmp r0, #1
	bgt _08049354
	ldr r1, _08049350 @ =0x0203CD14
	movs r0, #0
	b _08049368
	.align 2, 0
_08049350: .4byte 0x0203CD14
_08049354:
	cmp r0, #3
	bgt _08049364
	ldr r1, _08049360 @ =0x0203CD14
	movs r0, #1
	b _08049368
	.align 2, 0
_08049360: .4byte 0x0203CD14
_08049364:
	ldr r1, _080493A0 @ =0x0203CD14
	movs r0, #2
_08049368:
	strh r0, [r1]
_0804936A:
	ldr r0, _080493A0 @ =0x0203CD14
	ldrh r0, [r0]
	cmp r0, #4
	bne _080493AC
_08049372:
	ldr r0, [sp]
	adds r0, #0x48
	ldrh r1, [r0]
	mov r0, r8
	bl sub_8049BAC
	ldr r5, _080493A4 @ =0x0203CD76
	ldr r4, _080493A8 @ =0x0203CD00
	strh r0, [r4]
	strh r0, [r5]
	ldr r0, [sp, #4]
	adds r0, #0x48
	ldrh r1, [r0]
	mov r0, sb
	bl sub_8049BAC
	strh r0, [r4, #2]
	strh r0, [r5, #2]
	ldr r0, [sp, #0x14]
	lsls r0, r0, #0x10
	str r0, [sp, #0x1c]
	b _080493E4
	.align 2, 0
_080493A0: .4byte 0x0203CD14
_080493A4: .4byte 0x0203CD76
_080493A8: .4byte 0x0203CD00
_080493AC:
	ldr r1, [sp, #0x14]
	lsls r0, r1, #0x10
	str r0, [sp, #0x1c]
	cmp r0, #0
	beq _080493CA
	ldr r0, [sp]
	adds r0, #0x4a
	ldrh r1, [r0]
	mov r0, r8
	bl sub_8049BAC
	ldr r2, _08049514 @ =0x0203CD76
	ldr r1, _08049518 @ =0x0203CD00
	strh r0, [r1]
	strh r0, [r2]
_080493CA:
	ldr r2, [sp, #0x20]
	cmp r2, #0
	beq _080493E4
	ldr r0, [sp, #4]
	adds r0, #0x4a
	ldrh r1, [r0]
	mov r0, sb
	bl sub_8049BAC
	ldr r2, _08049514 @ =0x0203CD76
	ldr r1, _08049518 @ =0x0203CD00
	strh r0, [r1, #2]
	strh r0, [r2, #2]
_080493E4:
	ldr r3, [sp, #0x1c]
	asrs r7, r3, #0x10
	cmp r7, #0
	beq _080493F6
	ldr r0, [sp, #0x10]
	bl sub_804A49C
	ldr r1, _0804951C @ =0x0203CD04
	strh r0, [r1]
_080493F6:
	ldr r4, [sp, #0x20]
	asrs r4, r4, #0x10
	mov r8, r4
	cmp r4, #0
	beq _0804940A
	mov r0, sl
	bl sub_804A49C
	ldr r1, _0804951C @ =0x0203CD04
	strh r0, [r1, #2]
_0804940A:
	cmp r7, #0
	beq _08049422
	ldr r0, _08049514 @ =0x0203CD76
	movs r1, #0
	ldrsh r0, [r0, r1]
	ldr r1, [sp]
	adds r1, #0x4a
	ldrh r1, [r1]
	bl sub_804A4B8
	ldr r1, _08049520 @ =0x0203CD90
	str r0, [r1]
_08049422:
	mov r2, r8
	cmp r2, #0
	beq _0804943C
	ldr r0, _08049514 @ =0x0203CD76
	movs r3, #2
	ldrsh r0, [r0, r3]
	ldr r1, [sp, #4]
	adds r1, #0x4a
	ldrh r1, [r1]
	bl sub_804A4B8
	ldr r1, _08049520 @ =0x0203CD90
	str r0, [r1, #4]
_0804943C:
	ldr r4, _08049524 @ =0x0203CDC0
	mov sb, r4
	ldr r2, [sp]
	adds r2, #0x53
	ldrb r0, [r2]
	strh r0, [r4]
	ldr r6, [sp, #4]
	adds r6, #0x53
	ldrb r0, [r6]
	strh r0, [r4, #2]
	ldr r5, _08049528 @ =0x0203CD10
	ldr r1, _0804952C @ =0x0000FFFF
	adds r0, r1, #0
	ldrh r1, [r5, #2]
	orrs r1, r0
	strh r1, [r5, #2]
	ldrh r3, [r5]
	orrs r0, r3
	strh r0, [r5]
	cmp r7, #0
	beq _0804947E
	ldrb r4, [r2]
	ldr r0, _08049530 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterInfo
	ldrb r1, [r0, #0x12]
	adds r0, r4, #0
	bl sub_8049C5C
	strh r0, [r5]
_0804947E:
	mov r4, r8
	cmp r4, #0
	beq _0804949C
	ldrb r4, [r6]
	ldr r0, _08049530 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterInfo
	ldrb r1, [r0, #0x12]
	adds r0, r4, #0
	bl sub_8049C5C
	strh r0, [r5, #2]
_0804949C:
	ldr r1, _08049534 @ =gBmSt
	movs r0, #0x40
	ldrb r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _080494EA
	movs r0, #0x30
	mov r1, sb
	strh r0, [r1]
	strh r0, [r1, #2]
	cmp r7, #0
	beq _080494CA
	ldr r0, _08049530 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterInfo
	ldrb r1, [r0, #0x12]
	movs r0, #0x30
	bl sub_8049C5C
	strh r0, [r5]
_080494CA:
	mov r2, r8
	cmp r2, #0
	beq _080494EA
	mov r3, sb
	ldrh r4, [r3, #2]
	ldr r0, _08049530 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterInfo
	ldrb r1, [r0, #0x12]
	adds r0, r4, #0
	bl sub_8049C5C
	strh r0, [r5, #2]
_080494EA:
	ldr r0, _08049538 @ =0x0203CD14
	movs r4, #0
	ldrsh r0, [r0, r4]
	cmp r0, #0
	blt _08049502
	cmp r0, #3
	ble _08049502
	cmp r0, #4
	bne _08049502
	ldr r1, _08049528 @ =0x0203CD10
	ldrh r0, [r1, #2]
	strh r0, [r1]
_08049502:
	ldr r0, _08049530 @ =gPlaySt
	ldrb r0, [r0, #0x15]
	cmp r0, #2
	bgt _08049540
	cmp r0, #1
	blt _08049540
	ldr r1, _0804953C @ =0x0203CCF6
	movs r0, #1
	b _08049544
	.align 2, 0
_08049514: .4byte 0x0203CD76
_08049518: .4byte 0x0203CD00
_0804951C: .4byte 0x0203CD04
_08049520: .4byte 0x0203CD90
_08049524: .4byte 0x0203CDC0
_08049528: .4byte 0x0203CD10
_0804952C: .4byte 0x0000FFFF
_08049530: .4byte gPlaySt
_08049534: .4byte gBmSt
_08049538: .4byte 0x0203CD14
_0804953C: .4byte 0x0203CCF6
_08049540:
	ldr r1, _080495C0 @ =0x0203CCF6
	movs r0, #0
_08049544:
	strh r0, [r1]
	ldr r0, [sp, #0x1c]
	asrs r4, r0, #0x10
	cmp r4, #0
	beq _0804955C
	ldr r0, _080495C4 @ =0x0203CDC4
	ldr r2, [sp, #0x10]
	ldr r1, [r2, #4]
	ldrb r1, [r1, #0x11]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	strh r1, [r0]
_0804955C:
	ldr r3, [sp, #0x20]
	asrs r5, r3, #0x10
	cmp r5, #0
	beq _08049572
	ldr r0, _080495C4 @ =0x0203CDC4
	mov r2, sl
	ldr r1, [r2, #4]
	ldrb r1, [r1, #0x11]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	strh r1, [r0, #2]
_08049572:
	cmp r4, #0
	beq _0804958E
	ldr r1, _080495C8 @ =0x0203CDA0
	ldr r0, [sp]
	adds r0, #0x6e
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	strh r0, [r1]
	ldr r1, _080495CC @ =0x0203CDA4
	ldr r3, [sp, #0x10]
	movs r0, #0x10
	ldrsb r0, [r3, r0]
	strh r0, [r1]
_0804958E:
	cmp r5, #0
	beq _080495AA
	ldr r1, _080495C8 @ =0x0203CDA0
	ldr r0, [sp, #4]
	adds r0, #0x6e
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	strh r0, [r1, #2]
	ldr r1, _080495CC @ =0x0203CDA4
	mov r2, sl
	movs r0, #0x10
	ldrsb r0, [r2, r0]
	strh r0, [r1, #2]
_080495AA:
	bl sub_8049F1C
	ldr r0, _080495D0 @ =0x0203CD14
	ldrh r0, [r0]
	cmp r0, #4
	bne _080495D8
	ldr r1, _080495D4 @ =0x0203CD0C
	movs r0, #1
	strh r0, [r1, #2]
	strh r0, [r1]
	b _08049634
	.align 2, 0
_080495C0: .4byte 0x0203CCF6
_080495C4: .4byte 0x0203CDC4
_080495C8: .4byte 0x0203CDA0
_080495CC: .4byte 0x0203CDA4
_080495D0: .4byte 0x0203CD14
_080495D4: .4byte 0x0203CD0C
_080495D8:
	cmp r4, #0
	beq _080495F0
	ldr r3, [sp, #0x10]
	ldr r0, [r3, #4]
	ldrb r0, [r0, #4]
	ldr r1, [sp]
	adds r1, #0x4a
	ldrh r1, [r1]
	bl sub_8049D98
	ldr r1, _08049918 @ =0x0203CD0C
	strh r0, [r1]
_080495F0:
	cmp r5, #0
	beq _08049608
	mov r4, sl
	ldr r0, [r4, #4]
	ldrb r0, [r0, #4]
	ldr r1, [sp, #4]
	adds r1, #0x4a
	ldrh r1, [r1]
	bl sub_8049D98
	ldr r1, _08049918 @ =0x0203CD0C
	strh r0, [r1, #2]
_08049608:
	ldr r1, _0804991C @ =gBattleSt
	movs r0, #0x40
	ldrb r1, [r1, #1]
	ands r0, r1
	cmp r0, #0
	beq _08049634
	mov r1, sl
	ldr r0, [r1, #4]
	ldrb r0, [r0, #4]
	cmp r0, #0x36
	bne _08049624
	ldr r1, _08049918 @ =0x0203CD0C
	movs r0, #0xe
	strh r0, [r1, #2]
_08049624:
	mov r2, sl
	ldr r0, [r2, #4]
	ldrb r0, [r0, #4]
	cmp r0, #0x37
	bne _08049634
	ldr r1, _08049918 @ =0x0203CD0C
	movs r0, #0xf
	strh r0, [r1, #2]
_08049634:
	ldr r3, [sp, #0x1c]
	asrs r5, r3, #0x10
	cmp r5, #0
	beq _0804964A
	ldr r0, _08049918 @ =0x0203CD0C
	ldr r1, [sp]
	adds r1, #0x4a
	ldrh r2, [r1]
	movs r1, #0
	bl sub_8049E9C
_0804964A:
	ldr r4, [sp, #0x20]
	cmp r4, #0
	beq _0804965E
	ldr r0, _08049920 @ =0x0203CD0E
	ldr r1, [sp, #4]
	adds r1, #0x4a
	ldrh r2, [r1]
	movs r1, #1
	bl sub_8049E9C
_0804965E:
	movs r0, #0
	bl sub_80589FC
	movs r4, #0
	strh r4, [r0]
	movs r0, #1
	bl sub_80589FC
	strh r4, [r0]
	ldr r0, _08049924 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	blt _08049730
	cmp r0, #2
	bgt _08049730
	cmp r5, #0
	beq _0804969A
	ldr r0, [sp]
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemIid
	adds r4, r0, #0
	cmp r4, #0x53
	bne _0804969A
	movs r0, #0
	bl sub_80589FC
	strh r4, [r0]
_0804969A:
	ldr r2, [sp, #0x20]
	cmp r2, #0
	beq _080496B8
	ldr r0, [sp, #4]
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemIid
	adds r4, r0, #0
	cmp r4, #0x53
	bne _080496B8
	movs r0, #1
	bl sub_80589FC
	strh r4, [r0]
_080496B8:
	ldr r3, [sp, #0x1c]
	cmp r3, #0
	beq _080496D6
	ldr r0, [sp]
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemIid
	adds r4, r0, #0
	cmp r4, #0x54
	bne _080496D6
	movs r0, #0
	bl sub_80589FC
	strh r4, [r0]
_080496D6:
	ldr r4, [sp, #0x20]
	cmp r4, #0
	beq _080496F4
	ldr r0, [sp, #4]
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemIid
	adds r4, r0, #0
	cmp r4, #0x54
	bne _080496F4
	movs r0, #1
	bl sub_80589FC
	strh r4, [r0]
_080496F4:
	ldr r0, [sp, #0x1c]
	cmp r0, #0
	beq _08049712
	ldr r0, [sp]
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemIid
	adds r4, r0, #0
	cmp r4, #0x70
	bne _08049712
	movs r0, #0
	bl sub_80589FC
	strh r4, [r0]
_08049712:
	ldr r1, [sp, #0x20]
	cmp r1, #0
	beq _08049730
	ldr r0, [sp, #4]
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemIid
	adds r4, r0, #0
	cmp r4, #0x70
	bne _08049730
	movs r0, #1
	bl sub_80589FC
	strh r4, [r0]
_08049730:
	ldr r2, [sp, #0x1c]
	asrs r5, r2, #0x10
	cmp r5, #0
	beq _0804974A
	movs r0, #0x40
	rsbs r0, r0, #0
	ldr r3, [sp, #0x10]
	ldrb r3, [r3, #0xb]
	ands r0, r3
	bl sub_804A500
	ldr r1, _08049928 @ =0x0203CD08
	strh r0, [r1]
_0804974A:
	ldr r0, [sp, #0x20]
	asrs r4, r0, #0x10
	cmp r4, #0
	beq _08049764
	movs r0, #0x40
	rsbs r0, r0, #0
	mov r1, sl
	ldrb r1, [r1, #0xb]
	ands r0, r1
	bl sub_804A500
	ldr r1, _08049928 @ =0x0203CD08
	strh r0, [r1, #2]
_08049764:
	ldr r1, _0804992C @ =0x0203CD84
	movs r3, #0
	strb r3, [r1, #1]
	strb r3, [r1]
	cmp r5, #0
	beq _08049776
	ldr r2, [sp, #8]
	ldrb r0, [r2, #4]
	strb r0, [r1]
_08049776:
	cmp r4, #0
	beq _08049780
	ldr r2, [sp, #0xc]
	ldrb r0, [r2, #4]
	strb r0, [r1, #1]
_08049780:
	ldr r0, _08049930 @ =0x0203CDAC
	mov r8, r0
	cmp r5, #0
	beq _08049792
	ldr r0, [sp]
	adds r0, #0x62
	ldrh r0, [r0]
	mov r1, r8
	strh r0, [r1]
_08049792:
	cmp r4, #0
	beq _080497A0
	ldr r0, [sp, #4]
	adds r0, #0x62
	ldrh r0, [r0]
	mov r2, r8
	strh r0, [r2, #2]
_080497A0:
	mov r4, r8
	ldrh r0, [r4]
	adds r1, r0, #0
	cmp r1, #0xff
	bne _080497AE
	ldr r0, _08049934 @ =0x0000FFFF
	strh r0, [r4]
_080497AE:
	mov r2, r8
	ldrh r0, [r2, #2]
	adds r4, r0, #0
	cmp r4, #0xff
	bne _080497BC
	ldr r0, _08049934 @ =0x0000FFFF
	strh r0, [r2, #2]
_080497BC:
	cmp r5, #0
	beq _080497E4
	ldr r2, _08049938 @ =0x0203CDB0
	ldr r1, [sp]
	adds r1, #0x58
	ldr r0, [sp, #4]
	adds r0, #0x5a
	ldrh r4, [r1]
	ldrh r0, [r0]
	subs r0, r4, r0
	strh r0, [r2]
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _080497DA
	strh r3, [r2]
_080497DA:
	ldrh r1, [r1]
	cmp r1, #0xff
	bne _080497E4
	ldr r0, _08049934 @ =0x0000FFFF
	strh r0, [r2]
_080497E4:
	ldr r0, [sp, #0x20]
	cmp r0, #0
	beq _08049810
	ldr r2, _08049938 @ =0x0203CDB0
	ldr r1, [sp, #4]
	adds r1, #0x58
	ldr r0, [sp]
	adds r0, #0x5a
	ldrh r3, [r1]
	ldrh r0, [r0]
	subs r0, r3, r0
	strh r0, [r2, #2]
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _08049806
	movs r0, #0
	strh r0, [r2, #2]
_08049806:
	ldrh r1, [r1]
	cmp r1, #0xff
	bne _08049810
	ldr r0, _08049934 @ =0x0000FFFF
	strh r0, [r2, #2]
_08049810:
	ldr r4, [sp, #0x1c]
	asrs r7, r4, #0x10
	ldr r3, _0804993C @ =0x0203CDB4
	cmp r7, #0
	beq _08049822
	ldr r0, [sp]
	adds r0, #0x68
	ldrh r0, [r0]
	strh r0, [r3]
_08049822:
	ldr r0, [sp, #0x20]
	asrs r6, r0, #0x10
	cmp r6, #0
	beq _08049832
	ldr r0, [sp, #4]
	adds r0, #0x68
	ldrh r0, [r0]
	strh r0, [r3, #2]
_08049832:
	adds r1, r3, #0
	ldrh r0, [r1]
	cmp r0, #0xff
	bne _0804983E
	ldr r0, _08049934 @ =0x0000FFFF
	strh r0, [r1]
_0804983E:
	ldrh r0, [r1, #2]
	cmp r0, #0xff
	bne _08049848
	ldr r0, _08049934 @ =0x0000FFFF
	strh r0, [r1, #2]
_08049848:
	ldr r0, _08049924 @ =0x0203CD14
	ldrh r0, [r0]
	cmp r0, #4
	bne _0804986A
	ldr r2, _08049934 @ =0x0000FFFF
	adds r1, r2, #0
	mov r4, r8
	ldrh r0, [r4, #2]
	orrs r0, r1
	strh r0, [r4, #2]
	ldr r2, _08049938 @ =0x0203CDB0
	ldrh r0, [r2, #2]
	orrs r0, r1
	strh r0, [r2, #2]
	ldrh r0, [r3, #2]
	orrs r1, r0
	strh r1, [r3, #2]
_0804986A:
	cmp r7, #0
	beq _0804987C
	ldr r1, _08049940 @ =0x0203CDB8
	ldr r0, [sp]
	adds r0, #0x6d
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	strh r0, [r1]
_0804987C:
	cmp r6, #0
	beq _0804988E
	ldr r1, _08049940 @ =0x0203CDB8
	ldr r0, [sp, #4]
	adds r0, #0x6d
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	strh r0, [r1, #2]
_0804988E:
	cmp r7, #0
	beq _080498A0
	ldr r1, _08049944 @ =0x0203CDBC
	ldr r0, [sp]
	adds r0, #0x6a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	strh r0, [r1]
_080498A0:
	cmp r6, #0
	beq _080498B2
	ldr r1, _08049944 @ =0x0203CDBC
	ldr r0, [sp, #4]
	adds r0, #0x6a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	strh r0, [r1, #2]
_080498B2:
	ldr r1, _08049948 @ =0x0203CDC8
	movs r5, #0
	strh r5, [r1, #2]
	strh r5, [r1]
	cmp r7, #0
	beq _080498CA
	ldr r0, [sp]
	adds r0, #0x51
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	strh r0, [r1]
_080498CA:
	cmp r6, #0
	beq _080498DA
	ldr r0, [sp, #4]
	adds r0, #0x51
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	strh r0, [r1, #2]
_080498DA:
	ldr r4, _0804994C @ =0x0203CDCC
	strh r5, [r4, #2]
	strh r5, [r4]
	cmp r7, #0
	beq _080498F6
	ldr r0, [sp]
	adds r0, #0x48
	ldrh r0, [r0]
	mov r1, sl
	bl IsItemEffectiveAgainst
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	strh r0, [r4]
_080498F6:
	cmp r6, #0
	beq _0804990C
	ldr r0, [sp, #4]
	adds r0, #0x48
	ldrh r0, [r0]
	ldr r1, [sp, #0x10]
	bl IsItemEffectiveAgainst
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	strh r0, [r4, #2]
_0804990C:
	ldr r4, _08049950 @ =0x0203CD98
	str r5, [r4, #4]
	str r5, [r4]
	cmp r7, #0
	b _08049954
	.align 2, 0
_08049918: .4byte 0x0203CD0C
_0804991C: .4byte gBattleSt
_08049920: .4byte 0x0203CD0E
_08049924: .4byte 0x0203CD14
_08049928: .4byte 0x0203CD08
_0804992C: .4byte 0x0203CD84
_08049930: .4byte 0x0203CDAC
_08049934: .4byte 0x0000FFFF
_08049938: .4byte 0x0203CDB0
_0804993C: .4byte 0x0203CDB4
_08049940: .4byte 0x0203CDB8
_08049944: .4byte 0x0203CDBC
_08049948: .4byte 0x0203CDC8
_0804994C: .4byte 0x0203CDCC
_08049950: .4byte 0x0203CD98
_08049954:
	beq _08049994
	ldr r0, [sp]
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemIid
	cmp r0, #0x32
	bgt _08049994
	cmp r0, #0x30
	blt _08049994
	ldr r1, [sp, #0x10]
	ldr r0, [r1, #4]
	ldrb r0, [r0, #4]
	cmp r0, #0x11
	beq _08049980
	cmp r0, #0x11
	ble _08049994
	cmp r0, #0x12
	beq _08049988
	cmp r0, #0x13
	beq _08049990
	b _08049994
_08049980:
	ldr r0, _08049984 @ =0x08113FF8
	b _08049992
	.align 2, 0
_08049984: .4byte 0x08113FF8
_08049988:
	ldr r0, _0804998C @ =0x0811446C
	b _08049992
	.align 2, 0
_0804998C: .4byte 0x0811446C
_08049990:
	ldr r0, _080499C4 @ =0x0811490C
_08049992:
	str r0, [r4]
_08049994:
	ldr r2, [sp, #0x20]
	cmp r2, #0
	beq _080499EE
	ldr r0, [sp, #4]
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemIid
	cmp r0, #0x32
	bgt _080499EE
	cmp r0, #0x30
	blt _080499EE
	mov r3, sl
	ldr r0, [r3, #4]
	ldrb r0, [r0, #4]
	cmp r0, #0x11
	beq _080499C8
	cmp r0, #0x11
	ble _080499EE
	cmp r0, #0x12
	beq _080499D8
	cmp r0, #0x13
	beq _080499E8
	b _080499EE
	.align 2, 0
_080499C4: .4byte 0x0811490C
_080499C8:
	ldr r1, _080499D0 @ =0x0203CD98
	ldr r0, _080499D4 @ =0x08113FF8
	b _080499EC
	.align 2, 0
_080499D0: .4byte 0x0203CD98
_080499D4: .4byte 0x08113FF8
_080499D8:
	ldr r1, _080499E0 @ =0x0203CD98
	ldr r0, _080499E4 @ =0x0811446C
	b _080499EC
	.align 2, 0
_080499E0: .4byte 0x0203CD98
_080499E4: .4byte 0x0811446C
_080499E8:
	ldr r1, _08049A08 @ =0x0203CD98
	ldr r0, _08049A0C @ =0x0811490C
_080499EC:
	str r0, [r1, #4]
_080499EE:
	bl sub_8042578
	cmp r0, #1
	beq _08049A00
	ldr r0, _08049A10 @ =gPlaySt
	ldrb r0, [r0, #0x1c]
	lsls r0, r0, #0x1f
	cmp r0, #0
	beq _08049A18
_08049A00:
	ldr r1, _08049A14 @ =0x0203CDD0
	movs r0, #1
	b _08049A1C
	.align 2, 0
_08049A08: .4byte 0x0203CD98
_08049A0C: .4byte 0x0811490C
_08049A10: .4byte gPlaySt
_08049A14: .4byte 0x0203CDD0
_08049A18:
	ldr r1, _08049A40 @ =0x0203CDD0
	movs r0, #0
_08049A1C:
	strh r0, [r1, #2]
	strh r0, [r1]
	ldr r5, _08049A44 @ =0x0203CCF2
	movs r0, #0
	strh r0, [r5]
	bl GetBattleAnimType
	cmp r0, #3
	bne _08049A6A
	ldr r0, _08049A48 @ =0x0203CCF8
	movs r4, #0
	ldrsh r0, [r0, r4]
	cmp r0, #0
	beq _08049A50
	ldr r0, _08049A4C @ =0x0203CDC0
	ldrh r4, [r0]
	b _08049A54
	.align 2, 0
_08049A40: .4byte 0x0203CDD0
_08049A44: .4byte 0x0203CCF2
_08049A48: .4byte 0x0203CCF8
_08049A4C: .4byte 0x0203CDC0
_08049A50:
	ldr r0, _08049B78 @ =0x0203CDC0
	ldrh r4, [r0, #2]
_08049A54:
	ldr r0, _08049B7C @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterInfo
	ldrb r1, [r0, #0x12]
	adds r0, r4, #0
	bl sub_8049CFC
	strh r0, [r5]
_08049A6A:
	movs r4, #0
	bl GetBattleAnimType
	cmp r0, #0
	bne _08049A76
	movs r4, #1
_08049A76:
	bl GetBattleAnimType
	cmp r0, #3
	bne _08049A80
	movs r4, #1
_08049A80:
	bl GetBattleAnimType
	cmp r0, #1
	bne _08049AC8
	ldr r0, _08049B80 @ =0x0203CD14
	ldrh r0, [r0]
	cmp r0, #4
	bne _08049A92
	movs r4, #1
_08049A92:
	bl sub_804C500
	cmp r0, #1
	bne _08049A9C
	movs r4, #1
_08049A9C:
	ldr r1, [sp, #0x10]
	ldr r0, [r1]
	ldrb r0, [r0, #4]
	cmp r0, #0x64
	bne _08049AB2
	ldr r0, _08049B84 @ =0x0203CD08
	movs r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #0
	beq _08049AB2
	movs r4, #1
_08049AB2:
	mov r3, sl
	ldr r0, [r3]
	ldrb r0, [r0, #4]
	cmp r0, #0x64
	bne _08049AC8
	ldr r0, _08049B84 @ =0x0203CD08
	movs r1, #2
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08049AC8
	movs r4, #1
_08049AC8:
	ldr r2, [sp, #0x10]
	ldr r0, [r2]
	ldrb r1, [r0, #4]
	cmp r1, #0x42
	beq _08049B72
	mov r3, sl
	ldr r0, [r3]
	ldrb r0, [r0, #4]
	cmp r0, #0x42
	beq _08049B72
	ldr r0, [sp, #0x18]
	cmp r0, #1
	beq _08049AE6
	cmp r1, #0x66
	beq _08049B98
_08049AE6:
	cmp r4, #0
	beq _08049B72
	ldr r0, _08049B88 @ =0x0203CCF8
	adds r3, r0, #0
	ldrh r1, [r3]
	cmp r1, #1
	bne _08049B30
	ldr r1, [sp, #0x10]
	adds r1, #0x2e
	movs r0, #0xf
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #4
	beq _08049B72
	ldr r0, _08049B8C @ =0x0203CD76
	movs r2, #0
	ldrsh r0, [r0, r2]
	movs r2, #1
	rsbs r2, r2, #0
	cmp r0, r2
	beq _08049B72
	ldr r0, _08049B90 @ =0x0203CD0C
	movs r4, #0
	ldrsh r1, [r0, r4]
	movs r0, #2
	rsbs r0, r0, #0
	cmp r1, r0
	beq _08049B72
	ldr r0, _08049B94 @ =0x0203CD10
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, r2
	beq _08049B72
	ldr r0, _08049B78 @ =0x0203CDC0
	ldrh r0, [r0]
	cmp r0, #0x1b
	beq _08049B72
_08049B30:
	ldrh r3, [r3, #2]
	cmp r3, #1
	bne _08049B98
	mov r1, sl
	adds r1, #0x2e
	movs r0, #0xf
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #4
	beq _08049B72
	ldr r0, _08049B8C @ =0x0203CD76
	movs r2, #2
	ldrsh r0, [r0, r2]
	movs r2, #1
	rsbs r2, r2, #0
	cmp r0, r2
	beq _08049B72
	ldr r0, _08049B90 @ =0x0203CD0C
	movs r3, #2
	ldrsh r1, [r0, r3]
	movs r0, #2
	rsbs r0, r0, #0
	cmp r1, r0
	beq _08049B72
	ldr r0, _08049B94 @ =0x0203CD10
	movs r4, #2
	ldrsh r0, [r0, r4]
	cmp r0, r2
	beq _08049B72
	ldr r0, _08049B78 @ =0x0203CDC0
	ldrh r0, [r0, #2]
	cmp r0, #0x1b
	bne _08049B98
_08049B72:
	movs r0, #0
	b _08049B9A
	.align 2, 0
_08049B78: .4byte 0x0203CDC0
_08049B7C: .4byte gPlaySt
_08049B80: .4byte 0x0203CD14
_08049B84: .4byte 0x0203CD08
_08049B88: .4byte 0x0203CCF8
_08049B8C: .4byte 0x0203CD76
_08049B90: .4byte 0x0203CD0C
_08049B94: .4byte 0x0203CD10
_08049B98:
	movs r0, #1
_08049B9A:
	add sp, #0x24
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8049BAC
sub_8049BAC: @ 0x08049BAC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov sl, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov r8, r1
	movs r0, #0
	mov sb, r0
	mov r2, sl
	cmp r2, #0
	beq _08049BD4
	mov r0, r8
	bl GetItemKind
	cmp r0, #9
	bne _08049BDC
_08049BD4:
	ldr r0, _08049BD8 @ =0x0000FFFF
	b _08049C4A
	.align 2, 0
_08049BD8: .4byte 0x0000FFFF
_08049BDC:
	mov r3, r8
	cmp r3, #0
	bne _08049BE6
	movs r1, #9
	b _08049BF0
_08049BE6:
	mov r0, r8
	bl GetItemKind
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
_08049BF0:
	movs r6, #0
	movs r7, #0
_08049BF4:
	mov r5, sl
	b _08049C32
_08049BF8:
	cmp r6, #0
	bne _08049C00
	cmp r0, #0xff
	bhi _08049C30
_08049C00:
	cmp r6, #1
	bne _08049C0A
	ldrh r0, [r5]
	cmp r0, #0xff
	bls _08049C30
_08049C0A:
	ldrh r4, [r5]
	mov r0, r8
	str r1, [sp]
	bl GetItemIid
	ldr r1, [sp]
	cmp r4, r0
	beq _08049C24
	ldrh r2, [r5]
	ldr r3, _08049C2C @ =0xFFFFFF00
	adds r0, r2, r3
	cmp r0, r1
	bne _08049C30
_08049C24:
	ldrh r5, [r5, #2]
	mov sb, r5
	movs r7, #1
	b _08049C38
	.align 2, 0
_08049C2C: .4byte 0xFFFFFF00
_08049C30:
	adds r5, #4
_08049C32:
	ldrh r0, [r5]
	cmp r0, #0
	bne _08049BF8
_08049C38:
	cmp r7, #1
	beq _08049C42
	adds r6, #1
	cmp r6, #1
	ble _08049BF4
_08049C42:
	mov r0, sb
	subs r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
_08049C4A:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8049C5C
sub_8049C5C: @ 0x08049C5C
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #9
	bhi _08049CE8
	lsls r0, r0, #2
	ldr r1, _08049C74 @ =_08049C78
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08049C74: .4byte _08049C78
_08049C78: @ jump table
	.4byte _08049CE8 @ case 0
	.4byte _08049CA0 @ case 1
	.4byte _08049CA8 @ case 2
	.4byte _08049CB0 @ case 3
	.4byte _08049CB8 @ case 4
	.4byte _08049CC0 @ case 5
	.4byte _08049CC8 @ case 6
	.4byte _08049CD0 @ case 7
	.4byte _08049CD8 @ case 8
	.4byte _08049CE0 @ case 9
_08049CA0:
	ldr r0, _08049CA4 @ =0x0860CC42
	b _08049CEA
	.align 2, 0
_08049CA4: .4byte 0x0860CC42
_08049CA8:
	ldr r0, _08049CAC @ =0x0860CC75
	b _08049CEA
	.align 2, 0
_08049CAC: .4byte 0x0860CC75
_08049CB0:
	ldr r0, _08049CB4 @ =0x0860CCA8
	b _08049CEA
	.align 2, 0
_08049CB4: .4byte 0x0860CCA8
_08049CB8:
	ldr r0, _08049CBC @ =0x0860CCDB
	b _08049CEA
	.align 2, 0
_08049CBC: .4byte 0x0860CCDB
_08049CC0:
	ldr r0, _08049CC4 @ =0x0860CD0E
	b _08049CEA
	.align 2, 0
_08049CC4: .4byte 0x0860CD0E
_08049CC8:
	ldr r0, _08049CCC @ =0x0860CD41
	b _08049CEA
	.align 2, 0
_08049CCC: .4byte 0x0860CD41
_08049CD0:
	ldr r0, _08049CD4 @ =0x0860CD74
	b _08049CEA
	.align 2, 0
_08049CD4: .4byte 0x0860CD74
_08049CD8:
	ldr r0, _08049CDC @ =0x0860CDA7
	b _08049CEA
	.align 2, 0
_08049CDC: .4byte 0x0860CDA7
_08049CE0:
	ldr r0, _08049CE4 @ =0x0860CDDA
	b _08049CEA
	.align 2, 0
_08049CE4: .4byte 0x0860CDDA
_08049CE8:
	ldr r0, _08049CF8 @ =0x0860CC0F
_08049CEA:
	adds r0, r2, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, #1
	bx lr
	.align 2, 0
_08049CF8: .4byte 0x0860CC0F

	thumb_func_start sub_8049CFC
sub_8049CFC: @ 0x08049CFC
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #9
	bhi _08049D88
	lsls r0, r0, #2
	ldr r1, _08049D14 @ =_08049D18
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08049D14: .4byte _08049D18
_08049D18: @ jump table
	.4byte _08049D88 @ case 0
	.4byte _08049D40 @ case 1
	.4byte _08049D48 @ case 2
	.4byte _08049D50 @ case 3
	.4byte _08049D58 @ case 4
	.4byte _08049D60 @ case 5
	.4byte _08049D68 @ case 6
	.4byte _08049D70 @ case 7
	.4byte _08049D78 @ case 8
	.4byte _08049D80 @ case 9
_08049D40:
	ldr r0, _08049D44 @ =0x0860CE40
	b _08049D8A
	.align 2, 0
_08049D44: .4byte 0x0860CE40
_08049D48:
	ldr r0, _08049D4C @ =0x0860CE73
	b _08049D8A
	.align 2, 0
_08049D4C: .4byte 0x0860CE73
_08049D50:
	ldr r0, _08049D54 @ =0x0860CEA6
	b _08049D8A
	.align 2, 0
_08049D54: .4byte 0x0860CEA6
_08049D58:
	ldr r0, _08049D5C @ =0x0860CED9
	b _08049D8A
	.align 2, 0
_08049D5C: .4byte 0x0860CED9
_08049D60:
	ldr r0, _08049D64 @ =0x0860CF0C
	b _08049D8A
	.align 2, 0
_08049D64: .4byte 0x0860CF0C
_08049D68:
	ldr r0, _08049D6C @ =0x0860CF3F
	b _08049D8A
	.align 2, 0
_08049D6C: .4byte 0x0860CF3F
_08049D70:
	ldr r0, _08049D74 @ =0x0860CF72
	b _08049D8A
	.align 2, 0
_08049D74: .4byte 0x0860CF72
_08049D78:
	ldr r0, _08049D7C @ =0x0860CFA5
	b _08049D8A
	.align 2, 0
_08049D7C: .4byte 0x0860CFA5
_08049D80:
	ldr r0, _08049D84 @ =0x0860CFD8
	b _08049D8A
	.align 2, 0
_08049D84: .4byte 0x0860CFD8
_08049D88:
	ldr r0, _08049D94 @ =0x0860CE0D
_08049D8A:
	adds r0, r2, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bx lr
	.align 2, 0
_08049D94: .4byte 0x0860CE0D

	thumb_func_start sub_8049D98
sub_8049D98: @ 0x08049D98
	push {r4, lr}
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	adds r0, r1, #0
	bl GetItemIid
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r3, _08049DB4 @ =0x08662E4C
	ldrh r1, [r3]
	ldr r2, _08049DB8 @ =0x0000FFFF
	b _08049DC0
	.align 2, 0
_08049DB4: .4byte 0x08662E4C
_08049DB8: .4byte 0x0000FFFF
_08049DBC:
	adds r3, #0x10
	ldrh r1, [r3]
_08049DC0:
	cmp r1, r2
	beq _08049DC8
	cmp r1, r0
	bne _08049DBC
_08049DC8:
	ldrh r2, [r3, #4]
	ldrh r3, [r3, #4]
	cmp r3, #3
	bne _08049E92
	adds r0, r4, #0
	subs r0, #0xe
	cmp r0, #0x22
	bhi _08049E92
	lsls r0, r0, #2
	ldr r1, _08049DE4 @ =_08049DE8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08049DE4: .4byte _08049DE8
_08049DE8: @ jump table
	.4byte _08049E90 @ case 0
	.4byte _08049E90 @ case 1
	.4byte _08049E92 @ case 2
	.4byte _08049E92 @ case 3
	.4byte _08049E92 @ case 4
	.4byte _08049E92 @ case 5
	.4byte _08049E92 @ case 6
	.4byte _08049E92 @ case 7
	.4byte _08049E92 @ case 8
	.4byte _08049E92 @ case 9
	.4byte _08049E92 @ case 10
	.4byte _08049E92 @ case 11
	.4byte _08049E92 @ case 12
	.4byte _08049E92 @ case 13
	.4byte _08049E92 @ case 14
	.4byte _08049E92 @ case 15
	.4byte _08049E92 @ case 16
	.4byte _08049E92 @ case 17
	.4byte _08049E74 @ case 18
	.4byte _08049E74 @ case 19
	.4byte _08049E7C @ case 20
	.4byte _08049E7C @ case 21
	.4byte _08049E92 @ case 22
	.4byte _08049E92 @ case 23
	.4byte _08049E92 @ case 24
	.4byte _08049E92 @ case 25
	.4byte _08049E92 @ case 26
	.4byte _08049E92 @ case 27
	.4byte _08049E80 @ case 28
	.4byte _08049E84 @ case 29
	.4byte _08049E88 @ case 30
	.4byte _08049E88 @ case 31
	.4byte _08049E8C @ case 32
	.4byte _08049E8C @ case 33
	.4byte _08049E78 @ case 34
_08049E74:
	movs r2, #4
	b _08049E92
_08049E78:
	movs r2, #5
	b _08049E92
_08049E7C:
	movs r2, #6
	b _08049E92
_08049E80:
	movs r2, #7
	b _08049E92
_08049E84:
	movs r2, #8
	b _08049E92
_08049E88:
	movs r2, #9
	b _08049E92
_08049E8C:
	movs r2, #0xa
	b _08049E92
_08049E90:
	movs r2, #0xb
_08049E92:
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_8049E9C
sub_8049E9C: @ 0x08049E9C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, r2, #0
	lsls r1, r1, #0x10
	lsrs r5, r1, #0x10
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIid
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r0, #0
	ldrsh r1, [r4, r0]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08049EC2
	movs r0, #0
	strh r0, [r4]
_08049EC2:
	ldr r0, _08049EE0 @ =0x0203CCF4
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, r5
	beq _08049F14
	adds r0, r2, #0
	subs r0, #0x48
	cmp r0, #9
	bhi _08049F14
	lsls r0, r0, #2
	ldr r1, _08049EE4 @ =_08049EE8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08049EE0: .4byte 0x0203CCF4
_08049EE4: .4byte _08049EE8
_08049EE8: @ jump table
	.4byte _08049F10 @ case 0
	.4byte _08049F10 @ case 1
	.4byte _08049F14 @ case 2
	.4byte _08049F14 @ case 3
	.4byte _08049F14 @ case 4
	.4byte _08049F10 @ case 5
	.4byte _08049F14 @ case 6
	.4byte _08049F10 @ case 7
	.4byte _08049F14 @ case 8
	.4byte _08049F10 @ case 9
_08049F10:
	movs r0, #0
	strh r0, [r4]
_08049F14:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8049F1C
sub_8049F1C: @ 0x08049F1C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x24
	ldr r0, _08049F58 @ =gBattleHits
	str r0, [sp, #4]
	ldr r0, _08049F5C @ =0x0203CD88
	movs r3, #0
	str r3, [r0, #4]
	str r3, [r0]
	ldr r2, _08049F60 @ =0x0203CD14
	movs r5, #0
	ldrsh r1, [r2, r5]
	cmp r1, #4
	bne _08049F6C
	ldr r0, _08049F64 @ =0x0203CD1E
	strh r1, [r0]
	strh r1, [r0, #2]
	ldr r2, _08049F68 @ =0x0000FFFF
	adds r1, r2, #0
	ldrh r2, [r0, #4]
	orrs r2, r1
	strh r2, [r0, #4]
	ldrh r5, [r0, #6]
	orrs r1, r5
	strh r1, [r0, #6]
	b _0804A46E
	.align 2, 0
_08049F58: .4byte gBattleHits
_08049F5C: .4byte 0x0203CD88
_08049F60: .4byte 0x0203CD14
_08049F64: .4byte 0x0203CD1E
_08049F68: .4byte 0x0000FFFF
_08049F6C:
	ldr r1, _08049F94 @ =gBattleSt
	movs r0, #0x40
	ldrb r1, [r1, #1]
	ands r0, r1
	cmp r0, #0
	beq _08049FA0
	ldr r2, _08049F98 @ =0x0203CD1E
	movs r0, #6
	strh r0, [r2]
	strh r3, [r2, #2]
	ldr r1, _08049F9C @ =0x0000FFFF
	adds r0, r1, #0
	ldrh r1, [r2, #4]
	orrs r1, r0
	strh r1, [r2, #4]
	ldrh r5, [r2, #6]
	orrs r0, r5
	strh r0, [r2, #6]
	b _0804A46E
	.align 2, 0
_08049F94: .4byte gBattleSt
_08049F98: .4byte 0x0203CD1E
_08049F9C: .4byte 0x0000FFFF
_08049FA0:
	ldrh r2, [r2]
	str r2, [sp, #0x18]
	str r2, [sp, #0x1c]
	movs r0, #0
	str r0, [sp, #0x20]
	ldr r0, _0804A0A4 @ =0x0203CD7C
	ldr r0, [r0]
	str r0, [sp, #8]
	ldr r0, _0804A0A8 @ =0x0203CD80
	ldr r0, [r0]
	str r0, [sp, #0xc]
	ldr r0, [sp, #8]
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemIid
	cmp r0, #0x7d
	bne _08049FCE
	ldr r1, [sp, #0x18]
	cmp r1, #0
	bne _08049FCE
	movs r2, #1
	str r2, [sp, #0x18]
_08049FCE:
	ldr r4, [sp, #0xc]
	adds r4, #0x4a
	ldrh r0, [r4]
	bl GetItemIid
	adds r5, r4, #0
	cmp r0, #0x7d
	bne _08049FE8
	ldr r0, [sp, #0x1c]
	cmp r0, #0
	bne _08049FE8
	movs r1, #1
	str r1, [sp, #0x1c]
_08049FE8:
	ldr r4, [sp, #8]
	adds r4, #0x4a
	ldrh r0, [r4]
	bl GetItemIid
	cmp r0, #0x20
	bne _0804A000
	ldr r2, [sp, #0x18]
	cmp r2, #0
	bne _0804A000
	movs r0, #1
	str r0, [sp, #0x18]
_0804A000:
	ldrh r0, [r5]
	bl GetItemIid
	cmp r0, #0x20
	bne _0804A014
	ldr r1, [sp, #0x1c]
	cmp r1, #0
	bne _0804A014
	movs r2, #1
	str r2, [sp, #0x1c]
_0804A014:
	ldrh r0, [r4]
	bl GetItemIid
	cmp r0, #0x7f
	bne _0804A028
	ldr r0, [sp, #0x18]
	cmp r0, #0
	bne _0804A028
	movs r1, #1
	str r1, [sp, #0x18]
_0804A028:
	ldrh r0, [r5]
	bl GetItemIid
	cmp r0, #0x7f
	bne _0804A03C
	ldr r2, [sp, #0x1c]
	cmp r2, #0
	bne _0804A03C
	movs r5, #1
	str r5, [sp, #0x1c]
_0804A03C:
	ldrh r0, [r4]
	bl GetItemIid
	cmp r0, #0x53
	bne _0804A050
	ldr r0, [sp, #0x18]
	cmp r0, #0
	bne _0804A050
	movs r1, #1
	str r1, [sp, #0x18]
_0804A050:
	ldrh r0, [r4]
	bl GetItemIid
	cmp r0, #0x70
	bne _0804A05E
	movs r2, #1
	str r2, [sp, #0x20]
_0804A05E:
	movs r2, #0
	ldr r4, _0804A0AC @ =0x0203CD4A
	ldr r5, _0804A0B0 @ =0x0203CDA0
	ldr r0, _0804A0B4 @ =0x0000FFFF
	adds r3, r0, #0
	ldr r1, _0804A0B8 @ =0x0203CD1E
_0804A06A:
	ldrh r0, [r1]
	orrs r0, r3
	strh r0, [r1]
	adds r1, #2
	adds r2, #1
	cmp r2, #0x13
	bls _0804A06A
	movs r2, #0
	ldr r0, _0804A0AC @ =0x0203CD4A
	ldr r1, _0804A0B4 @ =0x0000FFFF
	adds r3, r1, #0
	adds r1, r0, #4
_0804A082:
	ldrh r0, [r1]
	orrs r0, r3
	strh r0, [r1]
	adds r1, #2
	adds r2, #1
	cmp r2, #0x13
	bls _0804A082
	ldrh r0, [r5]
	strh r0, [r4]
	ldrh r0, [r5, #2]
	strh r0, [r4, #2]
	movs r2, #0
	str r2, [sp, #0x10]
	mov r8, r2
	movs r7, #0
	ldr r5, [sp, #4]
	b _0804A462
	.align 2, 0
_0804A0A4: .4byte 0x0203CD7C
_0804A0A8: .4byte 0x0203CD80
_0804A0AC: .4byte 0x0203CD4A
_0804A0B0: .4byte 0x0203CDA0
_0804A0B4: .4byte 0x0000FFFF
_0804A0B8: .4byte 0x0203CD1E
_0804A0BC:
	movs r0, #8
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	rsbs r0, r0, #0
	lsrs r0, r0, #0x1f
	str r0, [sp, #0x14]
	ldr r0, _0804A0F4 @ =0x0203CCFC
	movs r1, #0
	ldrsh r0, [r0, r1]
	ldr r2, [sp, #0x14]
	cmp r0, r2
	bne _0804A0FC
	mov r5, sp
	movs r0, #2
	add r0, sp
	mov sb, r0
	ldr r4, [sp, #0x18]
	ldr r1, [sp, #0x1c]
	mov sl, r1
	ldr r6, [sp, #8]
	ldr r3, [sp, #0x20]
	ldr r2, [sp, #0x10]
	cmp r2, #0
	bne _0804A118
	ldr r0, _0804A0F8 @ =0x0203CCF4
	strh r2, [r0]
	b _0804A118
	.align 2, 0
_0804A0F4: .4byte 0x0203CCFC
_0804A0F8: .4byte 0x0203CCF4
_0804A0FC:
	mov r5, sp
	adds r5, #2
	mov sb, sp
	ldr r4, [sp, #0x1c]
	ldr r0, [sp, #0x18]
	mov sl, r0
	ldr r6, [sp, #0xc]
	movs r3, #0
	ldr r1, [sp, #0x10]
	cmp r1, #0
	bne _0804A118
	ldr r1, _0804A150 @ =0x0203CCF4
	movs r0, #1
	strh r0, [r1]
_0804A118:
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r2, #0
	ldr r1, [sp, #4]
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0804A134
	ldr r2, _0804A154 @ =0x0203CD88
	ldr r1, _0804A158 @ =gBattleSt
	ldr r0, [r1, #0xc]
	str r0, [r2]
	ldr r0, [r1, #0x10]
	str r0, [r2, #4]
_0804A134:
	movs r0, #1
	ldr r2, [sp, #4]
	ldrh r2, [r2]
	ands r0, r2
	cmp r0, #0
	beq _0804A168
	adds r0, r6, #0
	bl UnitKnowsMagic
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0804A160
	ldr r0, _0804A15C @ =0x08112248
	b _0804A1B6
	.align 2, 0
_0804A150: .4byte 0x0203CCF4
_0804A154: .4byte 0x0203CD88
_0804A158: .4byte gBattleSt
_0804A15C: .4byte 0x08112248
_0804A160:
	ldr r0, _0804A164 @ =0x08112270
	b _0804A1B6
	.align 2, 0
_0804A164: .4byte 0x08112270
_0804A168:
	cmp r3, #0
	bne _0804A188
	adds r0, r6, #0
	bl UnitKnowsMagic
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0804A180
	ldr r0, _0804A17C @ =0x08112234
	b _0804A1B6
	.align 2, 0
_0804A17C: .4byte 0x08112234
_0804A180:
	ldr r0, _0804A184 @ =0x08112266
	b _0804A1B6
	.align 2, 0
_0804A184: .4byte 0x08112266
_0804A188:
	movs r0, #2
	bl sub_805B9C8
	cmp r0, #1
	beq _0804A1AC
	cmp r0, #1
	bgt _0804A19C
	cmp r0, #0
	beq _0804A1A2
	b _0804A1C0
_0804A19C:
	cmp r0, #2
	beq _0804A1B4
	b _0804A1C0
_0804A1A2:
	ldr r0, _0804A1A8 @ =0x0811227A
	b _0804A1B6
	.align 2, 0
_0804A1A8: .4byte 0x0811227A
_0804A1AC:
	ldr r0, _0804A1B0 @ =0x08112284
	b _0804A1B6
	.align 2, 0
_0804A1B0: .4byte 0x08112284
_0804A1B4:
	ldr r0, _0804A1DC @ =0x0811228E
_0804A1B6:
	lsls r1, r4, #0x10
	asrs r1, r1, #0xf
	adds r1, r1, r0
	ldrh r0, [r1]
	strh r0, [r5]
_0804A1C0:
	movs r0, #2
	ldr r1, [sp, #4]
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0804A1FC
	adds r0, r6, #0
	bl UnitKnowsMagic
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0804A1E4
	ldr r0, _0804A1E0 @ =0x0811223E
	b _0804A1E6
	.align 2, 0
_0804A1DC: .4byte 0x0811228E
_0804A1E0: .4byte 0x0811223E
_0804A1E4:
	ldr r0, _0804A1F4 @ =0x08112266
_0804A1E6:
	lsls r1, r4, #0x10
	asrs r1, r1, #0xf
	adds r1, r1, r0
	ldrh r0, [r1]
	strh r0, [r5]
	ldr r0, _0804A1F8 @ =0x08112252
	b _0804A1FE
	.align 2, 0
_0804A1F4: .4byte 0x08112266
_0804A1F8: .4byte 0x08112252
_0804A1FC:
	ldr r0, _0804A27C @ =0x0811225C
_0804A1FE:
	mov r2, sl
	lsls r1, r2, #0x10
	asrs r1, r1, #0xf
	adds r1, r1, r0
	ldrh r0, [r1]
	mov r5, sb
	strh r0, [r5]
	ldr r1, _0804A280 @ =0x0203CD1E
	ldr r2, [sp, #0x10]
	lsls r0, r2, #2
	adds r5, r0, r1
	mov r0, sp
	ldrh r0, [r0]
	movs r6, #0
	strh r0, [r5]
	lsls r0, r2, #1
	adds r0, #1
	lsls r0, r0, #1
	adds r4, r0, r1
	mov r1, sp
	ldrh r0, [r1, #2]
	strh r0, [r4]
	ldr r2, [sp, #4]
	ldrh r1, [r2]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804A238
	b _0804A456
_0804A238:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _0804A2D0
	ldr r0, _0804A284 @ =0x0203CCFC
	movs r1, #0
	ldrsh r0, [r0, r1]
	ldr r2, [sp, #0x14]
	cmp r0, r2
	bne _0804A290
	lsls r0, r7, #1
	bl sub_804A5A8
	ldr r2, [sp, #4]
	movs r1, #3
	ldrsb r1, [r2, r1]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r0, #0
	bge _0804A264
	movs r2, #0
_0804A264:
	adds r0, r7, #1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	lsls r0, r7, #2
	ldr r1, _0804A288 @ =0x0203CD4A
	adds r0, r0, r1
	strh r2, [r0]
	ldr r2, _0804A28C @ =0xFFFF8000
	adds r0, r2, #0
	ldrh r1, [r5]
	orrs r0, r1
	b _0804A454
	.align 2, 0
_0804A27C: .4byte 0x0811225C
_0804A280: .4byte 0x0203CD1E
_0804A284: .4byte 0x0203CCFC
_0804A288: .4byte 0x0203CD4A
_0804A28C: .4byte 0xFFFF8000
_0804A290:
	mov r2, r8
	lsls r0, r2, #1
	adds r0, #1
	bl sub_804A5A8
	ldr r5, [sp, #4]
	movs r1, #3
	ldrsb r1, [r5, r1]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r0, #0
	bge _0804A2AC
	movs r2, #0
_0804A2AC:
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	lsls r0, r0, #1
	adds r0, #1
	lsls r0, r0, #1
	ldr r1, _0804A2C8 @ =0x0203CD4A
	adds r0, r0, r1
	strh r2, [r0]
	ldr r2, _0804A2CC @ =0xFFFF8000
	b _0804A406
	.align 2, 0
_0804A2C8: .4byte 0x0203CD4A
_0804A2CC: .4byte 0xFFFF8000
_0804A2D0:
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	beq _0804A3B8
	ldr r0, _0804A344 @ =0x0203CCFC
	movs r5, #0
	ldrsh r0, [r0, r5]
	ldr r1, [sp, #0x14]
	cmp r0, r1
	bne _0804A350
	mov r2, r8
	lsls r0, r2, #1
	adds r0, #1
	bl sub_804A5A8
	ldr r5, [sp, #4]
	movs r1, #3
	ldrsb r1, [r5, r1]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r0, #0
	bge _0804A304
	movs r2, #0
_0804A304:
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	ldr r4, _0804A348 @ =0x0203CD4A
	lsls r0, r0, #1
	adds r0, #1
	lsls r0, r0, #1
	adds r0, r0, r4
	strh r2, [r0]
	lsls r0, r7, #1
	bl sub_804A5A8
	ldr r2, [sp, #4]
	movs r1, #3
	ldrsb r1, [r2, r1]
	adds r0, r0, r1
	lsls r0, r0, #0x10
	ldr r3, _0804A34C @ =0x0203CDA4
	lsrs r2, r0, #0x10
	ldrh r5, [r3]
	lsls r1, r5, #0x10
	cmp r0, r1
	ble _0804A338
	ldrh r2, [r3]
_0804A338:
	adds r0, r7, #1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	lsls r0, r7, #2
	b _0804A3A8
	.align 2, 0
_0804A344: .4byte 0x0203CCFC
_0804A348: .4byte 0x0203CD4A
_0804A34C: .4byte 0x0203CDA4
_0804A350:
	lsls r0, r7, #1
	bl sub_804A5A8
	ldr r2, [sp, #4]
	movs r1, #3
	ldrsb r1, [r2, r1]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r0, #0
	bge _0804A368
	movs r2, #0
_0804A368:
	adds r0, r7, #1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	ldr r4, _0804A3B0 @ =0x0203CD4A
	lsls r0, r7, #2
	adds r0, r0, r4
	strh r2, [r0]
	mov r5, r8
	lsls r0, r5, #1
	adds r0, #1
	bl sub_804A5A8
	ldr r2, [sp, #4]
	movs r1, #3
	ldrsb r1, [r2, r1]
	adds r0, r0, r1
	lsls r0, r0, #0x10
	ldr r3, _0804A3B4 @ =0x0203CDA4
	lsrs r2, r0, #0x10
	ldrh r5, [r3, #2]
	lsls r1, r5, #0x10
	cmp r0, r1
	ble _0804A398
	ldrh r2, [r3, #2]
_0804A398:
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	lsls r0, r0, #1
	adds r0, #1
	lsls r0, r0, #1
_0804A3A8:
	adds r0, r0, r4
	strh r2, [r0]
	b _0804A456
	.align 2, 0
_0804A3B0: .4byte 0x0203CD4A
_0804A3B4: .4byte 0x0203CDA4
_0804A3B8:
	ldr r0, _0804A410 @ =0x0203CCFC
	movs r1, #0
	ldrsh r0, [r0, r1]
	ldr r2, [sp, #0x14]
	cmp r0, r2
	bne _0804A418
	mov r5, r8
	lsls r0, r5, #1
	adds r0, #1
	bl sub_804A5A8
	ldr r2, [sp, #4]
	movs r1, #3
	ldrsb r1, [r2, r1]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r0, #0
	bge _0804A3E0
	movs r2, #0
_0804A3E0:
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	lsls r0, r0, #1
	adds r0, #1
	lsls r0, r0, #1
	ldr r5, _0804A414 @ =0x0203CD4A
	adds r0, r0, r5
	strh r2, [r0]
	movs r0, #0x40
	ldr r1, [sp, #4]
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0804A456
	movs r2, #0x80
	lsls r2, r2, #6
_0804A406:
	adds r0, r2, #0
	ldrh r5, [r4]
	orrs r0, r5
	strh r0, [r4]
	b _0804A456
	.align 2, 0
_0804A410: .4byte 0x0203CCFC
_0804A414: .4byte 0x0203CD4A
_0804A418:
	lsls r0, r7, #1
	bl sub_804A5A8
	ldr r2, [sp, #4]
	movs r1, #3
	ldrsb r1, [r2, r1]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r0, #0
	bge _0804A430
	movs r2, #0
_0804A430:
	adds r0, r7, #1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	lsls r0, r7, #2
	ldr r1, _0804A480 @ =0x0203CD4A
	adds r0, r0, r1
	strh r2, [r0]
	movs r0, #0x40
	ldr r2, [sp, #4]
	ldrh r2, [r2]
	ands r0, r2
	cmp r0, #0
	beq _0804A456
	movs r1, #0x80
	lsls r1, r1, #6
	adds r0, r1, #0
	ldrh r2, [r5]
	orrs r0, r2
_0804A454:
	strh r0, [r5]
_0804A456:
	ldr r5, [sp, #4]
	adds r5, #4
	str r5, [sp, #4]
	ldr r0, [sp, #0x10]
	adds r0, #1
	str r0, [sp, #0x10]
_0804A462:
	ldrb r1, [r5, #2]
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	bne _0804A46E
	b _0804A0BC
_0804A46E:
	add sp, #0x24
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804A480: .4byte 0x0203CD4A

	thumb_func_start sub_804A484
sub_804A484: @ 0x0804A484
	ldr r1, _0804A494 @ =gBattleHits
	movs r0, #2
	ldrb r1, [r1, #2]
	ands r0, r1
	cmp r0, #0
	bne _0804A498
	movs r0, #0
	b _0804A49A
	.align 2, 0
_0804A494: .4byte gBattleHits
_0804A498:
	movs r0, #1
_0804A49A:
	bx lr

	thumb_func_start sub_804A49C
sub_804A49C: @ 0x0804A49C
	ldr r2, [r0]
	ldr r1, [r0, #4]
	ldr r0, [r2, #0x28]
	ldr r1, [r1, #0x24]
	orrs r0, r1
	lsrs r0, r0, #8
	movs r1, #1
	ands r0, r1
	adds r2, #0x23
	adds r2, r2, r0
	ldrb r0, [r2]
	subs r0, #1
	bx lr
	.align 2, 0

	thumb_func_start sub_804A4B8
sub_804A4B8: @ 0x0804A4B8
	push {lr}
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x67
	bne _0804A4F8
	adds r0, r1, #0
	bl GetItemIid
	cmp r0, #0x31
	beq _0804A4E8
	cmp r0, #0x31
	bgt _0804A4DA
	cmp r0, #0x30
	beq _0804A4E0
	b _0804A4F8
_0804A4DA:
	cmp r0, #0x32
	beq _0804A4F0
	b _0804A4F8
_0804A4E0:
	ldr r0, _0804A4E4 @ =0x08113FB8
	b _0804A4FA
	.align 2, 0
_0804A4E4: .4byte 0x08113FB8
_0804A4E8:
	ldr r0, _0804A4EC @ =0x08113F98
	b _0804A4FA
	.align 2, 0
_0804A4EC: .4byte 0x08113F98
_0804A4F0:
	ldr r0, _0804A4F4 @ =0x08113FD8
	b _0804A4FA
	.align 2, 0
_0804A4F4: .4byte 0x08113FD8
_0804A4F8:
	movs r0, #0
_0804A4FA:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_804A500
sub_804A500: @ 0x0804A500
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r0, #0
	cmp r0, #0x40
	beq _0804A51C
	cmp r0, #0x40
	ble _0804A524
	cmp r1, #0x80
	beq _0804A518
	cmp r1, #0xc0
	beq _0804A520
	b _0804A524
_0804A518:
	movs r0, #1
	b _0804A526
_0804A51C:
	movs r0, #2
	b _0804A526
_0804A520:
	movs r0, #3
	b _0804A526
_0804A524:
	movs r0, #0
_0804A526:
	bx lr

	thumb_func_start sub_804A528
sub_804A528: @ 0x0804A528
	push {r4, r5, lr}
	adds r5, r0, #0
	lsls r4, r1, #0x10
	lsrs r4, r4, #0x10
	bl sub_804B6C4
	ldr r1, _0804A550 @ =0x0203CD76
	lsls r0, r0, #1
	adds r0, r0, r1
	strh r4, [r0]
	bl sub_804B048
	adds r0, r5, #0
	movs r1, #6
	bl sub_804B5E0
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804A550: .4byte 0x0203CD76

	thumb_func_start sub_804A554
sub_804A554: @ 0x0804A554
	ldr r1, _0804A570 @ =0x0203CD1E
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r2, [r0]
	movs r3, #0
	ldrsh r1, [r0, r3]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _0804A578
	ldr r0, _0804A574 @ =0x00000FFF
	ands r0, r2
	b _0804A57A
	.align 2, 0
_0804A570: .4byte 0x0203CD1E
_0804A574: .4byte 0x00000FFF
_0804A578:
	adds r0, r1, #0
_0804A57A:
	bx lr

	thumb_func_start sub_804A57C
sub_804A57C: @ 0x0804A57C
	ldr r1, _0804A59C @ =0x0203CD1E
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r2, [r0]
	movs r3, #0
	ldrsh r1, [r0, r3]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _0804A5A4
	ldr r0, _0804A5A0 @ =0xFFFFF000
	ands r0, r2
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	b _0804A5A6
	.align 2, 0
_0804A59C: .4byte 0x0203CD1E
_0804A5A0: .4byte 0xFFFFF000
_0804A5A4:
	movs r0, #0
_0804A5A6:
	bx lr

	thumb_func_start sub_804A5A8
sub_804A5A8: @ 0x0804A5A8
	ldr r1, _0804A5B8 @ =0x0203CD4A
	lsls r0, r0, #1
	adds r0, r0, r1
	ldr r1, _0804A5BC @ =0x00000FFF
	ldrh r0, [r0]
	ands r1, r0
	adds r0, r1, #0
	bx lr
	.align 2, 0
_0804A5B8: .4byte 0x0203CD4A
_0804A5BC: .4byte 0x00000FFF

	thumb_func_start sub_804A5C0
sub_804A5C0: @ 0x0804A5C0
	ldr r1, _0804A5D4 @ =0x0203CD4A
	lsls r0, r0, #1
	adds r0, r0, r1
	ldr r1, _0804A5D8 @ =0xFFFFF000
	ldrh r0, [r0]
	ands r1, r0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	adds r0, r1, #0
	bx lr
	.align 2, 0
_0804A5D4: .4byte 0x0203CD4A
_0804A5D8: .4byte 0xFFFFF000

	thumb_func_start sub_804A5DC
sub_804A5DC: @ 0x0804A5DC
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	movs r2, #0

	thumb_func_start sub_0804A5E8
sub_0804A5E8: @ 0x0804A5E8
	ldr r1, _0804A640 @ =0x02000000
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r7, [r0]
	adds r2, #1
	mov sb, r2
	cmp r7, #0
	bne _0804A5FC
	bl _0804AF52
_0804A5FC:
	movs r0, #0xf0
	lsls r0, r0, #8
	ldrh r1, [r7, #0xc]
	ands r1, r0
	mov r8, r1
	cmp r1, #0
	bne _0804A60E
	bl _0804AF52
_0804A60E:
	movs r0, #0x80
	lsls r0, r0, #5
	ands r0, r1
	cmp r0, #0
	bne _0804A61A
	b _0804AD94
_0804A61A:
	ldrb r0, [r7, #0x14]
	cmp r0, #0
	bne _0804A622
	b _0804AD8A
_0804A622:
	subs r1, r0, #1
	adds r2, r7, #0
	adds r2, #0x15
	adds r1, r2, r1
	ldrb r1, [r1]
	adds r3, r0, #0
	cmp r1, #0x4a
	bls _0804A634
	b _0804AD82
_0804A634:
	lsls r0, r1, #2
	ldr r1, _0804A644 @ =_0804A648
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804A640: .4byte 0x02000000
_0804A644: .4byte _0804A648
_0804A648: @ jump table
	.4byte _0804AD82 @ case 0
	.4byte _0804A774 @ case 1
	.4byte _0804A7B4 @ case 2
	.4byte _0804A7C8 @ case 3
	.4byte _0804A7EE @ case 4
	.4byte _0804A874 @ case 5
	.4byte _0804A8C8 @ case 6
	.4byte _0804AD82 @ case 7
	.4byte _0804A8F8 @ case 8
	.4byte _0804A8F8 @ case 9
	.4byte _0804A8F8 @ case 10
	.4byte _0804A8F8 @ case 11
	.4byte _0804A8F8 @ case 12
	.4byte _0804A968 @ case 13
	.4byte _0804AD82 @ case 14
	.4byte _0804AD82 @ case 15
	.4byte _0804AD82 @ case 16
	.4byte _0804AD82 @ case 17
	.4byte _0804AD82 @ case 18
	.4byte _0804AB08 @ case 19
	.4byte _0804AB38 @ case 20
	.4byte _0804AB4C @ case 21
	.4byte _0804AD82 @ case 22
	.4byte _0804AD82 @ case 23
	.4byte _0804AB60 @ case 24
	.4byte _0804AD60 @ case 25
	.4byte _0804AB9C @ case 26
	.4byte _0804AD60 @ case 27
	.4byte _0804AD60 @ case 28
	.4byte _0804AD60 @ case 29
	.4byte _0804AD60 @ case 30
	.4byte _0804AD60 @ case 31
	.4byte _0804AD60 @ case 32
	.4byte _0804AD60 @ case 33
	.4byte _0804AD60 @ case 34
	.4byte _0804AD60 @ case 35
	.4byte _0804AD60 @ case 36
	.4byte _0804AD60 @ case 37
	.4byte _0804ABF2 @ case 38
	.4byte _0804AC08 @ case 39
	.4byte _0804AD60 @ case 40
	.4byte _0804AD60 @ case 41
	.4byte _0804AD60 @ case 42
	.4byte _0804AD60 @ case 43
	.4byte _0804AC1E @ case 44
	.4byte _0804AC32 @ case 45
	.4byte _0804AC3A @ case 46
	.4byte _0804AC50 @ case 47
	.4byte _0804AC66 @ case 48
	.4byte _0804AC7C @ case 49
	.4byte _0804AC92 @ case 50
	.4byte _0804AD60 @ case 51
	.4byte _0804AD60 @ case 52
	.4byte _0804AD60 @ case 53
	.4byte _0804AD60 @ case 54
	.4byte _0804AD60 @ case 55
	.4byte _0804AD60 @ case 56
	.4byte _0804ACA6 @ case 57
	.4byte _0804ACEC @ case 58
	.4byte _0804AD14 @ case 59
	.4byte _0804AD60 @ case 60
	.4byte _0804AD60 @ case 61
	.4byte _0804AD60 @ case 62
	.4byte _0804AD60 @ case 63
	.4byte _0804AD60 @ case 64
	.4byte _0804AD60 @ case 65
	.4byte _0804AD60 @ case 66
	.4byte _0804AD60 @ case 67
	.4byte _0804AD3C @ case 68
	.4byte _0804AD4E @ case 69
	.4byte _0804AD60 @ case 70
	.4byte _0804AD6E @ case 71
	.4byte _0804AD76 @ case 72
	.4byte _0804AD76 @ case 73
	.4byte _0804AD76 @ case 74
_0804A774:
	ldr r0, _0804A784 @ =0x0200001C
	ldr r0, [r0]
	cmp r0, #1
	bne _0804A788
	ldr r0, [r7, #0x24]
	str r0, [r7, #0x20]
	b _0804AD82
	.align 2, 0
_0804A784: .4byte 0x0200001C
_0804A788:
	ldrh r1, [r7, #0x10]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	bne _0804A794
	b _0804ACDC
_0804A794:
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	bne _0804A79E
	b _0804AD82
_0804A79E:
	bl sub_80449C4
	cmp r0, #1
	beq _0804A7A8
	b _0804AD82
_0804A7A8:
	ldr r0, _0804A7B0 @ =0x0000FFF2
	ldrh r2, [r7, #0x10]
	ands r0, r2
	b _0804ACDA
	.align 2, 0
_0804A7B0: .4byte 0x0000FFF2
_0804A7B4:
	ldrh r1, [r7, #0x10]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0804A7C0
	b _0804AD82
_0804A7C0:
	ldr r0, _0804A7C4 @ =0x0000FFFE
	b _0804ACD8
	.align 2, 0
_0804A7C4: .4byte 0x0000FFFE
_0804A7C8:
	ldrh r1, [r7, #0x10]
	movs r2, #0x20
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	bne _0804A7EA
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r7, #0x10]
	adds r0, r7, #0
	bl sub_804B6B0
	cmp r0, #0
	bne _0804A7EA
	adds r0, r7, #0
	bl sub_8057860
_0804A7EA:
	ldrh r1, [r7, #0x10]
	b _0804ACCA
_0804A7EE:
	ldrh r1, [r7, #0x10]
	movs r2, #0x20
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	bne _0804A804
	adds r0, r2, #0
	orrs r0, r1
	movs r1, #0x40
	orrs r0, r1
	strh r0, [r7, #0x10]
_0804A804:
	ldrh r2, [r7, #0x10]
	movs r0, #0x40
	ands r0, r2
	cmp r0, #0
	bne _0804A810
	b _0804AD82
_0804A810:
	ldr r1, _0804A86C @ =0x0000FFDF
	ands r1, r2
	ldr r0, _0804A870 @ =0x0000FFBF
	ands r1, r0
	ldr r0, [r7, #0x20]
	adds r0, #4
	str r0, [r7, #0x20]
	movs r5, #9
	movs r6, #0
	orrs r1, r5
	strh r1, [r7, #0x10]
	adds r0, r7, #0
	bl sub_804B80C
	adds r2, r0, #0
	adds r0, r7, #0
	str r2, [sp]
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	mov r8, r0
	mov r4, r8
	adds r0, r4, #0
	bl sub_804B6D8
	ldr r2, [sp]
	cmp r0, #1
	beq _0804A84C
	b _0804AD82
_0804A84C:
	cmp r2, #0
	bne _0804A852
	b _0804AD82
_0804A852:
	ldrh r0, [r2, #0x10]
	orrs r0, r5
	strh r0, [r2, #0x10]
	adds r0, r7, #0
	str r2, [sp]
	bl sub_804B6B0
	cmp r0, #0
	beq _0804A866
	b _0804AD82
_0804A866:
	adds r0, r4, #0
	b _0804A958
	.align 2, 0
_0804A86C: .4byte 0x0000FFDF
_0804A870: .4byte 0x0000FFBF
_0804A874:
	ldrh r1, [r7, #0x10]
	movs r2, #0x20
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	bne _0804A88A
	adds r0, r2, #0
	orrs r0, r1
	movs r1, #0x40
	orrs r0, r1
	strh r0, [r7, #0x10]
_0804A88A:
	ldrh r2, [r7, #0x10]
	movs r0, #0x40
	ands r0, r2
	cmp r0, #0
	bne _0804A896
	b _0804AD82
_0804A896:
	ldr r1, _0804A8C0 @ =0x0000FFDF
	ands r1, r2
	ldr r0, _0804A8C4 @ =0x0000FFBF
	ands r1, r0
	ldr r0, [r7, #0x20]
	adds r0, #4
	str r0, [r7, #0x20]
	movs r0, #9
	orrs r1, r0
	strh r1, [r7, #0x10]
	adds r0, r7, #0
	bl sub_804B6B0
	cmp r0, #0
	beq _0804A8B6
	b _0804AD82
_0804A8B6:
	adds r0, r7, #0
	bl sub_804C898
	b _0804AD82
	.align 2, 0
_0804A8C0: .4byte 0x0000FFDF
_0804A8C4: .4byte 0x0000FFBF
_0804A8C8:
	adds r0, r7, #0
	bl sub_804B80C
	adds r2, r0, #0
	cmp r2, #0
	bne _0804A8D6
	b _0804AD82
_0804A8D6:
	str r2, [sp]
	bl sub_804B88C
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	mov r8, r0
	movs r0, #1
	rsbs r0, r0, #0
	ldr r2, [sp]
	cmp r8, r0
	bne _0804A8EE
	b _0804AD82
_0804A8EE:
	movs r0, #2
	ldrh r3, [r2, #0x10]
	orrs r0, r3
	strh r0, [r2, #0x10]
	b _0804AD82
_0804A8F8:
	adds r0, r7, #0
	bl sub_804B6B0
	cmp r0, #0
	beq _0804A904
	b _0804AD82
_0804A904:
	adds r0, r7, #0
	bl sub_804B80C
	adds r2, r0, #0
	adds r0, r7, #0
	str r2, [sp]
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	mov r8, r0
	bl sub_804B6D8
	ldr r2, [sp]
	cmp r0, #0
	bne _0804A93C
	adds r0, r2, #0
	bl sub_805C308
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r2, [sp]
	cmp r0, #2
	beq _0804A93C
	adds r0, r2, #0
	bl sub_8056B08
	ldr r2, [sp]
_0804A93C:
	cmp r2, #0
	bne _0804A942
	b _0804AD82
_0804A942:
	movs r0, #9
	ldrh r1, [r2, #0x10]
	orrs r0, r1
	strh r0, [r2, #0x10]
	adds r0, r7, #0
	str r2, [sp]
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	mov r8, r0
_0804A958:
	bl sub_804B6D8
	adds r1, r0, #0
	ldr r2, [sp]
	adds r0, r2, #0
	bl sub_8047600
	b _0804AD82
_0804A968:
	adds r0, r7, #0
	bl sub_804B848
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	mov r8, r0
	ldr r4, _0804A9A8 @ =0x02000000
	adds r0, r7, #0
	bl sub_804B6C4
	lsls r0, r0, #3
	adds r0, r0, r4
	ldr r2, [r0]
	adds r0, r7, #0
	str r2, [sp]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, #1
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r6, [r0]
	ldrb r0, [r7, #0x12]
	ldr r2, [sp]
	cmp r0, #9
	bls _0804A99E
	b _0804AD82
_0804A99E:
	lsls r0, r0, #2
	ldr r1, _0804A9AC @ =_0804A9B0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804A9A8: .4byte 0x02000000
_0804A9AC: .4byte _0804A9B0
_0804A9B0: @ jump table
	.4byte _0804A9D8 @ case 0
	.4byte _0804A9D8 @ case 1
	.4byte _0804A9D8 @ case 2
	.4byte _0804A9D8 @ case 3
	.4byte _0804AAE0 @ case 4
	.4byte _0804AAE0 @ case 5
	.4byte _0804AAEE @ case 6
	.4byte _0804AAEE @ case 7
	.4byte _0804AAEE @ case 8
	.4byte _0804A9D8 @ case 9
_0804A9D8:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r8, r0
	bne _0804A9E2
	b _0804AAE0
_0804A9E2:
	ldrh r0, [r2, #0xe]
	adds r0, #1
	strh r0, [r2, #0xe]
	ldrh r0, [r6, #0xe]
	adds r0, #1
	strh r0, [r6, #0xe]
	adds r0, r2, #0
	mov r1, r8
	str r2, [sp]
	bl sub_804B5E0
	adds r0, r6, #0
	mov r1, r8
	bl sub_804B5E0
	movs r1, #4
	ldr r2, [sp]
	ldrh r0, [r2, #0x10]
	orrs r0, r1
	strh r0, [r2, #0x10]
	ldrh r0, [r6, #0x10]
	orrs r0, r1
	strh r0, [r6, #0x10]
	ldr r1, _0804AA38 @ =0x081122C0
	ldr r0, _0804AA3C @ =0x0203CD14
	movs r3, #0
	ldrsh r0, [r0, r3]
	adds r0, r0, r1
	ldrb r0, [r0]
	mov r8, r0
	ldr r1, _0804AA40 @ =0x08112298
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrb r4, [r0]
	adds r0, r7, #0
	str r2, [sp]
	bl sub_804B6C4
	ldr r2, [sp]
	cmp r0, #0
	bne _0804AA48
	ldr r0, _0804AA44 @ =0x02000054
	b _0804AA4A
	.align 2, 0
_0804AA38: .4byte 0x081122C0
_0804AA3C: .4byte 0x0203CD14
_0804AA40: .4byte 0x08112298
_0804AA44: .4byte 0x02000054
_0804AA48:
	ldr r0, _0804AACC @ =0x02000058
_0804AA4A:
	ldr r1, [r0]
	lsls r0, r4, #2
	adds r0, r0, r1
	ldr r4, [r0]
	adds r0, r7, #0
	str r2, [sp]
	bl sub_804B6C4
	lsls r1, r0, #2
	adds r1, r1, r0
	lsls r1, r1, #2
	adds r1, r1, r0
	lsls r1, r1, #9
	ldr r0, _0804AAD0 @ =0x0200F1C0
	adds r1, r1, r0
	adds r1, r4, r1
	ldr r0, [r1, #4]
	ldr r2, [sp]
	str r0, [r2, #0x28]
	ldr r4, [r2, #0x30]
	ldr r1, [r1, #8]
	adds r4, r4, r1
	str r4, [r2, #0x3c]
	ldr r4, [r6, #0x30]
	ldr r0, _0804AAD4 @ =0x000057F0
	adds r4, r4, r0
	str r4, [r6, #0x3c]
	ldr r4, _0804AAD8 @ =0x0203CD98
	adds r0, r7, #0
	str r2, [sp]
	bl sub_804B6C4
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r0, [r0]
	ldr r2, [sp]
	cmp r0, #0
	beq _0804AA98
	b _0804AD8A
_0804AA98:
	ldr r4, _0804AADC @ =0x0201E13C
	adds r0, r2, #0
	bl sub_804B6C4
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r1, [r0]
	ldr r2, [sp]
	ldr r0, [r2, #0x28]
	cmp r1, r0
	bne _0804AAB0
	b _0804AD8A
_0804AAB0:
	adds r0, r2, #0
	bl sub_804AF70
	ldr r2, [sp]
	adds r0, r2, #0
	bl sub_804B6C4
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r2, [sp]
	ldr r1, [r2, #0x28]
	str r1, [r0]
	b _0804AD8A
	.align 2, 0
_0804AACC: .4byte 0x02000058
_0804AAD0: .4byte 0x0200F1C0
_0804AAD4: .4byte 0x000057F0
_0804AAD8: .4byte 0x0203CD98
_0804AADC: .4byte 0x0201E13C
_0804AAE0:
	ldr r1, _0804AB00 @ =0x081122C0
	ldr r0, _0804AB04 @ =0x0203CD14
	movs r3, #0
	ldrsh r0, [r0, r3]
	adds r0, r0, r1
	ldrb r0, [r0]
	mov r8, r0
_0804AAEE:
	adds r0, r2, #0
	mov r1, r8
	bl sub_804B5E0
	adds r0, r6, #0
	mov r1, r8
	bl sub_804B5E0
	b _0804AD8A
	.align 2, 0
_0804AB00: .4byte 0x081122C0
_0804AB04: .4byte 0x0203CD14
_0804AB08:
	ldrh r2, [r7, #0x10]
	movs r1, #0x20
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	bne _0804AB1C
	adds r0, r1, #0
	orrs r0, r2
	strh r0, [r7, #0x10]
	b _0804AD82
_0804AB1C:
	ldr r1, _0804AB30 @ =0x02017750
	ldr r0, [r1]
	cmp r0, #1
	beq _0804AB26
	b _0804AD82
_0804AB26:
	movs r0, #0
	str r0, [r1]
	ldr r0, _0804AB34 @ =0x0000FFDF
	ands r0, r2
	b _0804ACDA
	.align 2, 0
_0804AB30: .4byte 0x02017750
_0804AB34: .4byte 0x0000FFDF
_0804AB38:
	adds r0, r7, #0
	bl sub_804B6B0
	cmp r0, #0
	beq _0804AB44
	b _0804AD82
_0804AB44:
	movs r0, #3
	bl sub_8046010
	b _0804AD82
_0804AB4C:
	adds r0, r7, #0
	bl sub_804B6B0
	cmp r0, #0
	beq _0804AB58
	b _0804AD82
_0804AB58:
	movs r0, #0
	bl sub_8046010
	b _0804AD82
_0804AB60:
	ldrh r1, [r7, #0x10]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0804AB6C
	b _0804AD82
_0804AB6C:
	ldr r0, _0804AB94 @ =0x0000FFFE
	ands r0, r1
	strh r0, [r7, #0x10]
	ldr r0, [r7, #0x20]
	adds r0, #4
	str r0, [r7, #0x20]
	ldr r0, _0804AB98 @ =0x0000F3FF
	ldrh r1, [r7, #8]
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r7, #8]
	movs r0, #0x8c
	strh r0, [r7, #0xa]
	bl BasSort
	b _0804AD82
	.align 2, 0
_0804AB94: .4byte 0x0000FFFE
_0804AB98: .4byte 0x0000F3FF
_0804AB9C:
	adds r0, r7, #0
	bl sub_804B6B0
	cmp r0, #0
	beq _0804ABA8
	b _0804AD82
_0804ABA8:
	adds r0, r7, #0
	bl sub_804B80C
	adds r2, r0, #0
	cmp r2, #0
	beq _0804ABDA
	movs r0, #9
	ldrh r3, [r2, #0x10]
	orrs r0, r3
	strh r0, [r2, #0x10]
	adds r0, r7, #0
	str r2, [sp]
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	mov r8, r0
	bl sub_804B6D8
	adds r1, r0, #0
	ldr r2, [sp]
	adds r0, r2, #0
	bl sub_8047600
	ldr r2, [sp]
_0804ABDA:
	adds r0, r2, #0
	bl sub_805C308
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #2
	bne _0804ABEA
	b _0804AD82
_0804ABEA:
	adds r0, r7, #0
	bl sub_8056C3C
	b _0804AD82
_0804ABF2:
	adds r0, r7, #0
	bl sub_804B6B0
	cmp r0, #0
	beq _0804ABFE
	b _0804AD82
_0804ABFE:
	adds r0, r7, #0
	movs r1, #0
	bl sub_8056D80
	b _0804AD82
_0804AC08:
	adds r0, r7, #0
	bl sub_804B6B0
	cmp r0, #0
	beq _0804AC14
	b _0804AD82
_0804AC14:
	adds r0, r7, #0
	movs r1, #1
	bl sub_8056D80
	b _0804AD82
_0804AC1E:
	adds r0, r7, #0
	bl sub_804B6B0
	cmp r0, #0
	beq _0804AC2A
	b _0804AD82
_0804AC2A:
	adds r0, r7, #0
	bl sub_8056F50
	b _0804AD82
_0804AC32:
	adds r0, r7, #0
	bl sub_804B6B0
	b _0804AD82
_0804AC3A:
	adds r0, r7, #0
	bl sub_804B6B0
	cmp r0, #0
	beq _0804AC46
	b _0804AD82
_0804AC46:
	adds r0, r7, #0
	movs r1, #0
	bl sub_80571A0
	b _0804AD82
_0804AC50:
	adds r0, r7, #0
	bl sub_804B6B0
	cmp r0, #0
	beq _0804AC5C
	b _0804AD82
_0804AC5C:
	adds r0, r7, #0
	movs r1, #1
	bl sub_80571A0
	b _0804AD82
_0804AC66:
	adds r0, r7, #0
	bl sub_804B6B0
	cmp r0, #0
	beq _0804AC72
	b _0804AD82
_0804AC72:
	adds r0, r7, #0
	movs r1, #0
	bl sub_8057344
	b _0804AD82
_0804AC7C:
	adds r0, r7, #0
	bl sub_804B6B0
	cmp r0, #0
	beq _0804AC88
	b _0804AD82
_0804AC88:
	adds r0, r7, #0
	movs r1, #1
	bl sub_8057344
	b _0804AD82
_0804AC92:
	adds r0, r7, #0
	bl sub_804B6B0
	cmp r0, #0
	bne _0804AD82
	adds r0, r7, #0
	movs r1, #2
	bl sub_8057344
	b _0804AD82
_0804ACA6:
	ldrh r1, [r7, #0x10]
	movs r2, #0x20
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	bne _0804ACCA
	adds r0, r2, #0
	orrs r0, r1
	strh r0, [r7, #0x10]
	adds r0, r7, #0
	bl sub_804B6B0
	cmp r0, #0
	bne _0804AD82
	adds r0, r7, #0
	bl sub_805755C
	b _0804AD82
_0804ACCA:
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0804AD82
	ldr r0, _0804ACE4 @ =0x0000FFDF
	ands r0, r1
	ldr r1, _0804ACE8 @ =0x0000FFBF
_0804ACD8:
	ands r0, r1
_0804ACDA:
	strh r0, [r7, #0x10]
_0804ACDC:
	ldr r0, [r7, #0x20]
	adds r0, #4
	str r0, [r7, #0x20]
	b _0804AD82
	.align 2, 0
_0804ACE4: .4byte 0x0000FFDF
_0804ACE8: .4byte 0x0000FFBF
_0804ACEC:
	ldrh r0, [r7, #2]
	adds r0, #0x20
	strh r0, [r7, #2]
	adds r0, r7, #0
	bl sub_804B6B0
	cmp r0, #0
	bne _0804AD82
	adds r0, r7, #0
	bl sub_804B6C4
	ldr r1, _0804AD10 @ =0x02000020
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r1, #0x20
	strh r1, [r0]
	b _0804AD82
	.align 2, 0
_0804AD10: .4byte 0x02000020
_0804AD14:
	ldrh r0, [r7, #2]
	subs r0, #0x20
	strh r0, [r7, #2]
	adds r0, r7, #0
	bl sub_804B6B0
	cmp r0, #0
	bne _0804AD82
	adds r0, r7, #0
	bl sub_804B6C4
	ldr r1, _0804AD38 @ =0x02000020
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r1, [r0]
	subs r1, #0x20
	strh r1, [r0]
	b _0804AD82
	.align 2, 0
_0804AD38: .4byte 0x02000020
_0804AD3C:
	adds r0, r7, #0
	bl sub_804B6B0
	cmp r0, #0
	bne _0804AD82
	adds r0, r7, #0
	bl sub_80575E8
	b _0804AD82
_0804AD4E:
	adds r0, r7, #0
	bl sub_804B6B0
	cmp r0, #0
	bne _0804AD82
	adds r0, r7, #0
	bl sub_80576AC
	b _0804AD82
_0804AD60:
	subs r0, r3, #1
	adds r0, r2, r0
	ldrb r1, [r0]
	adds r0, r7, #0
	bl sub_805BE7C
	b _0804AD82
_0804AD6E:
	adds r0, r7, #0
	bl sub_8057D20
	b _0804AD82
_0804AD76:
	subs r0, r3, #1
	adds r0, r2, r0
	ldrb r1, [r0]
	adds r0, r7, #0
	bl sub_805BE7C
_0804AD82:
	ldrb r0, [r7, #0x14]
	subs r0, #1
	strb r0, [r7, #0x14]
	b _0804A61A
_0804AD8A:
	movs r0, #0xe7
	lsls r0, r0, #8
	ldrh r1, [r7, #0xc]
	ands r0, r1
	strh r0, [r7, #0xc]
_0804AD94:
	movs r0, #0x80
	lsls r0, r0, #6
	mov r2, r8
	ands r0, r2
	cmp r0, #0
	beq _0804ADFA
	adds r0, r7, #0
	bl sub_804B6B0
	cmp r0, #0
	bne _0804ADF0
	ldr r4, _0804AE4C @ =0x0203CD98
	adds r0, r7, #0
	bl sub_804B6C4
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r0, [r0]
	cmp r0, #0
	bne _0804ADF0
	movs r0, #0x80
	lsls r0, r0, #7
	ldrh r3, [r7, #0x10]
	ands r0, r3
	cmp r0, #0
	bne _0804ADF0
	ldr r4, _0804AE50 @ =0x0201E13C
	adds r0, r7, #0
	bl sub_804B6C4
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r1, [r0]
	ldr r0, [r7, #0x28]
	cmp r1, r0
	beq _0804ADF0
	adds r0, r7, #0
	bl sub_804AFA0
	adds r0, r7, #0
	bl sub_804B6C4
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r1, [r7, #0x28]
	str r1, [r0]
_0804ADF0:
	movs r0, #0xd7
	lsls r0, r0, #8
	ldrh r1, [r7, #0xc]
	ands r0, r1
	strh r0, [r7, #0xc]
_0804ADFA:
	movs r0, #0x80
	lsls r0, r0, #7
	mov r2, r8
	ands r2, r0
	cmp r2, #0
	bne _0804AE10
	ldr r0, _0804AE54 @ =0x0200001C
	ldr r0, [r0]
	cmp r0, #1
	beq _0804AE10
	b _0804AF52
_0804AE10:
	ldrh r1, [r7, #0x10]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0804AE98
	adds r0, r7, #0
	bl sub_804B848
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	mov r8, r0
	movs r0, #1
	rsbs r0, r0, #0
	cmp r8, r0
	beq _0804AE60
	ldr r6, _0804AE58 @ =0x02000000
	adds r0, r7, #0
	bl sub_804B6C4
	lsls r0, r0, #3
	adds r0, r0, r6
	ldr r2, [r0]
	adds r0, r2, #0
	mov r1, r8
	str r2, [sp]
	bl sub_804B5E0
	ldr r4, _0804AE5C @ =0x0000FFFD
	b _0804AED0
	.align 2, 0
_0804AE4C: .4byte 0x0203CD98
_0804AE50: .4byte 0x0201E13C
_0804AE54: .4byte 0x0200001C
_0804AE58: .4byte 0x02000000
_0804AE5C: .4byte 0x0000FFFD
_0804AE60:
	ldr r5, _0804AE90 @ =0x02000000
	adds r0, r7, #0
	bl sub_804B6C4
	lsls r0, r0, #3
	adds r0, r0, r5
	ldr r2, [r0]
	ldr r4, _0804AE94 @ =0x0000FFFD
	adds r0, r4, #0
	ldrh r1, [r2, #0x10]
	ands r0, r1
	strh r0, [r2, #0x10]
	adds r0, r7, #0
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, #1
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r6, [r0]
	ldrh r2, [r6, #0x10]
	ands r4, r2
	strh r4, [r6, #0x10]
	b _0804AF52
	.align 2, 0
_0804AE90: .4byte 0x02000000
_0804AE94: .4byte 0x0000FFFD
_0804AE98:
	movs r0, #0x80
	lsls r0, r0, #8
	ands r0, r1
	cmp r0, #0
	beq _0804AF18
	adds r0, r7, #0
	bl sub_804B848
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	mov r8, r0
	movs r0, #1
	rsbs r0, r0, #0
	cmp r8, r0
	beq _0804AF52
	ldr r6, _0804AF10 @ =0x02000000
	adds r0, r7, #0
	bl sub_804B6C4
	lsls r0, r0, #3
	adds r0, r0, r6
	ldr r2, [r0]
	adds r0, r2, #0
	mov r1, r8
	str r2, [sp]
	bl sub_804B5E0
	ldr r4, _0804AF14 @ =0x00007FFF
_0804AED0:
	adds r0, r4, #0
	ldr r2, [sp]
	ldrh r3, [r2, #0x10]
	ands r0, r3
	movs r5, #4
	orrs r0, r5
	strh r0, [r2, #0x10]
	adds r0, r7, #0
	str r2, [sp]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, #1
	lsls r0, r0, #2
	adds r0, r0, r6
	ldr r6, [r0]
	adds r0, r6, #0
	mov r1, r8
	bl sub_804B5E0
	ldrh r0, [r6, #0x10]
	ands r4, r0
	orrs r4, r5
	strh r4, [r6, #0x10]
	ldr r2, [sp]
	ldrh r0, [r2, #0xe]
	adds r0, #1
	strh r0, [r2, #0xe]
	ldrh r0, [r6, #0xe]
	adds r0, #1
	strh r0, [r6, #0xe]
	b _0804AF52
	.align 2, 0
_0804AF10: .4byte 0x02000000
_0804AF14: .4byte 0x00007FFF
_0804AF18:
	adds r0, r7, #0
	bl sub_804B6B0
	cmp r0, #0
	bne _0804AF52
	adds r0, r7, #0
	bl sub_804B6C4
	adds r1, r0, #0
	ldrh r2, [r7, #0xe]
	lsls r0, r2, #1
	adds r0, r0, r1
	bl sub_804A554
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	mov r8, r0
	movs r0, #1
	rsbs r0, r0, #0
	cmp r8, r0
	bne _0804AF52
	adds r0, r7, #0
	bl sub_804B6C4
	ldr r1, _0804AF6C @ =0x0201E124
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r1, #1
	str r1, [r0]
_0804AF52:
	mov r2, sb
	cmp r2, #3
	bhi _0804AF5C
	bl sub_0804A5E8
_0804AF5C:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804AF6C: .4byte 0x0201E124

	thumb_func_start sub_804AF70
sub_804AF70: @ 0x0804AF70
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0804AF84 @ =0x085CBDD8
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804AF84: .4byte 0x085CBDD8

	thumb_func_start sub_804AF88
sub_804AF88: @ 0x0804AF88
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804AFA0
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_804AFA0
sub_804AFA0: @ 0x0804AFA0
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _0804AFCC @ =0x000003FF
	ldrh r0, [r5, #8]
	ands r4, r0
	lsls r4, r4, #5
	ldr r0, _0804AFD0 @ =0x06010000
	adds r4, r4, r0
	ldr r0, [r5, #0x28]
	ldr r1, [r5, #0x2c]
	bl LZ77UnCompWram
	ldr r0, [r5, #0x2c]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r4, #0
	bl RegisterDataMove
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804AFCC: .4byte 0x000003FF
_0804AFD0: .4byte 0x06010000

	thumb_func_start sub_804AFD4
sub_804AFD4: @ 0x0804AFD4
	adds r2, r0, #0
	ldr r0, _0804AFF8 @ =0x0203CDD0
	lsls r1, r1, #1
	adds r1, r1, r0
	movs r3, #0
	ldrsh r0, [r1, r3]
	cmp r0, #0
	beq _0804AFF4
	movs r1, #0
	adds r3, r2, #0
	adds r3, #0x80
_0804AFEA:
	ldm r3!, {r0}
	stm r2!, {r0}
	adds r1, #1
	cmp r1, #7
	bls _0804AFEA
_0804AFF4:
	bx lr
	.align 2, 0
_0804AFF8: .4byte 0x0203CDD0

	thumb_func_start sub_804AFFC
sub_804AFFC: @ 0x0804AFFC
	adds r2, r0, #0
	cmp r1, #0
	bne _0804B00C
	ldr r0, _0804B008 @ =0x0203CD7C
	b _0804B00E
	.align 2, 0
_0804B008: .4byte 0x0203CD7C
_0804B00C:
	ldr r0, _0804B024 @ =0x0203CD80
_0804B00E:
	ldr r0, [r0]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #4]
	cmp r0, #0x11
	beq _0804B036
	cmp r0, #0x11
	bhi _0804B028
	cmp r0, #0x10
	beq _0804B032
	b _0804B042
	.align 2, 0
_0804B024: .4byte 0x0203CD80
_0804B028:
	cmp r0, #0x12
	beq _0804B03A
	cmp r0, #0x13
	beq _0804B03E
	b _0804B042
_0804B032:
	movs r0, #0xe
	b _0804B044
_0804B036:
	movs r0, #0xf
	b _0804B044
_0804B03A:
	movs r0, #4
	b _0804B044
_0804B03E:
	movs r0, #5
	b _0804B044
_0804B042:
	adds r0, r2, #0
_0804B044:
	bx lr
	.align 2, 0

	thumb_func_start sub_804B048
sub_804B048: @ 0x0804B048
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r0, _0804B0F8 @ =0x086A0008
	mov sl, r0
	ldr r1, _0804B0FC @ =0x0201E13C
	movs r0, #0
	str r0, [r1, #4]
	str r0, [r1]
	ldr r0, _0804B100 @ =0x0203CCF8
	ldrh r1, [r0]
	cmp r1, #1
	bne _0804B140
	ldr r0, _0804B104 @ =0x0203CD76
	movs r2, #0
	ldrsh r7, [r0, r2]
	ldr r0, _0804B108 @ =0x0203CD08
	movs r2, #0
	ldrsh r1, [r0, r2]
	mov r8, r1
	ldr r0, _0804B10C @ =0x0203CD04
	movs r1, #0
	ldrsh r4, [r0, r1]
	lsls r0, r7, #5
	ldr r2, _0804B0F8 @ =0x086A0008
	adds r6, r0, r2
	ldr r0, [r6, #0x10]
	ldr r1, _0804B110 @ =0x0200F1C0
	bl LZ77UnCompWram
	ldr r1, _0804B114 @ =0x02000054
	ldr r0, [r6, #0xc]
	str r0, [r1]
	adds r0, r7, #0
	movs r1, #0
	bl sub_804AFFC
	lsls r0, r0, #5
	ldr r1, _0804B0F8 @ =0x086A0008
	adds r0, r0, r1
	ldr r0, [r0, #0x1c]
	ldr r5, _0804B118 @ =0x02004080
	adds r1, r5, #0
	bl LZ77UnCompWram
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	beq _0804B0C4
	lsls r0, r4, #4
	ldr r2, _0804B11C @ =0x087FC008
	adds r0, r0, r2
	ldr r0, [r0, #0xc]
	adds r1, r5, #0
	bl LZ77UnCompWram
	adds r0, r5, #0
	movs r1, #0
	bl sub_804AFD4
_0804B0C4:
	ldr r1, _0804B120 @ =0x0200004C
	mov r2, r8
	lsls r0, r2, #5
	adds r0, r0, r5
	str r0, [r1]
	ldr r4, _0804B124 @ =0x020219E8
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r0, _0804B128 @ =0x0203CD90
	ldr r0, [r0]
	adds r4, #0x20
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	cmp r7, #0x74
	beq _0804B130
	ldr r0, [r6, #0x18]
	ldr r1, _0804B12C @ =0x020041C0
	bl LZ77UnCompWram
	b _0804B138
	.align 2, 0
_0804B0F8: .4byte 0x086A0008
_0804B0FC: .4byte 0x0201E13C
_0804B100: .4byte 0x0203CCF8
_0804B104: .4byte 0x0203CD76
_0804B108: .4byte 0x0203CD08
_0804B10C: .4byte 0x0203CD04
_0804B110: .4byte 0x0200F1C0
_0804B114: .4byte 0x02000054
_0804B118: .4byte 0x02004080
_0804B11C: .4byte 0x087FC008
_0804B120: .4byte 0x0200004C
_0804B124: .4byte 0x020219E8
_0804B128: .4byte 0x0203CD90
_0804B12C: .4byte 0x020041C0
_0804B130:
	ldr r0, [r6, #0x14]
	ldr r1, _0804B254 @ =0x020041C0
	bl LZ77UnCompWram
_0804B138:
	ldr r4, _0804B258 @ =0x020099B0
	movs r0, #1
	str r0, [r4]
	ldr r0, _0804B25C @ =0x0203CCF8
_0804B140:
	movs r2, #2
	ldrsh r1, [r0, r2]
	mov sb, r1
	cmp r1, #1
	bne _0804B1DE
	ldr r0, _0804B260 @ =0x0203CD76
	movs r1, #2
	ldrsh r7, [r0, r1]
	ldr r0, _0804B264 @ =0x0203CD08
	movs r1, #2
	ldrsh r2, [r0, r1]
	mov r8, r2
	ldr r0, _0804B268 @ =0x0203CD04
	movs r2, #2
	ldrsh r4, [r0, r2]
	lsls r0, r7, #5
	mov r1, sl
	adds r6, r0, r1
	ldr r0, [r6, #0x10]
	ldr r1, _0804B26C @ =0x02011BC0
	bl LZ77UnCompWram
	ldr r1, _0804B270 @ =0x02000058
	ldr r0, [r6, #0xc]
	str r0, [r1]
	adds r0, r7, #0
	movs r1, #1
	bl sub_804AFFC
	lsls r0, r0, #5
	add r0, sl
	ldr r0, [r0, #0x1c]
	ldr r5, _0804B274 @ =0x02004120
	adds r1, r5, #0
	bl LZ77UnCompWram
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	beq _0804B1A6
	lsls r0, r4, #4
	ldr r2, _0804B278 @ =0x087FC008
	adds r0, r0, r2
	ldr r0, [r0, #0xc]
	adds r1, r5, #0
	bl LZ77UnCompWram
	adds r0, r5, #0
	movs r1, #1
	bl sub_804AFD4
_0804B1A6:
	ldr r1, _0804B27C @ =0x0200004C
	mov r2, r8
	lsls r0, r2, #5
	adds r0, r0, r5
	str r0, [r1, #4]
	ldr r4, _0804B280 @ =0x02021A28
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r0, _0804B284 @ =0x0203CD90
	ldr r0, [r0, #4]
	adds r4, #0x20
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	ldr r0, [r6, #0x14]
	ldr r4, _0804B288 @ =0x020099C0
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r0, _0804B28C @ =0x000057F0
	adds r4, r4, r0
	mov r1, sb
	str r1, [r4]
_0804B1DE:
	ldr r6, _0804B290 @ =0x0203CD88
	ldr r0, [r6]
	cmp r0, #0
	beq _0804B246
	ldr r0, [r0, #4]
	ldr r0, [r0, #0x30]
	movs r1, #0
	bl sub_8049BAC
	lsls r0, r0, #0x10
	ldr r5, _0804B284 @ =0x0203CD90
	lsrs r0, r0, #0xb
	add r0, sl
	ldr r0, [r0, #0x1c]
	str r0, [r5]
	ldr r0, [r6]
	bl sub_804A49C
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	movs r7, #1
	rsbs r7, r7, #0
	cmp r4, r7
	beq _0804B218
	lsls r0, r4, #4
	ldr r2, _0804B278 @ =0x087FC008
	adds r0, r0, r2
	ldr r0, [r0, #0xc]
	str r0, [r5]
_0804B218:
	ldr r0, [r6, #4]
	ldr r0, [r0, #4]
	ldr r0, [r0, #0x30]
	movs r1, #0
	bl sub_8049BAC
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xb
	add r0, sl
	ldr r0, [r0, #0x1c]
	str r0, [r5, #4]
	ldr r0, [r6, #4]
	bl sub_804A49C
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, r7
	beq _0804B246
	lsls r0, r4, #4
	ldr r1, _0804B278 @ =0x087FC008
	adds r0, r0, r1
	ldr r0, [r0, #0xc]
	str r0, [r5, #4]
_0804B246:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804B254: .4byte 0x020041C0
_0804B258: .4byte 0x020099B0
_0804B25C: .4byte 0x0203CCF8
_0804B260: .4byte 0x0203CD76
_0804B264: .4byte 0x0203CD08
_0804B268: .4byte 0x0203CD04
_0804B26C: .4byte 0x02011BC0
_0804B270: .4byte 0x02000058
_0804B274: .4byte 0x02004120
_0804B278: .4byte 0x087FC008
_0804B27C: .4byte 0x0200004C
_0804B280: .4byte 0x02021A28
_0804B284: .4byte 0x0203CD90
_0804B288: .4byte 0x020099C0
_0804B28C: .4byte 0x000057F0
_0804B290: .4byte 0x0203CD88

	thumb_func_start sub_804B294
sub_804B294: @ 0x0804B294
	push {lr}
	ldr r0, _0804B2AC @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #4
	bhi _0804B30E
	lsls r0, r0, #2
	ldr r1, _0804B2B0 @ =_0804B2B4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804B2AC: .4byte 0x0203CD14
_0804B2B0: .4byte _0804B2B4
_0804B2B4: @ jump table
	.4byte _0804B2C8 @ case 0
	.4byte _0804B2D2 @ case 1
	.4byte _0804B2DC @ case 2
	.4byte _0804B2C8 @ case 3
	.4byte _0804B2C8 @ case 4
_0804B2C8:
	movs r0, #6
	movs r1, #6
	bl sub_804B324
	b _0804B30E
_0804B2D2:
	movs r0, #8
	movs r1, #8
	bl sub_804B324
	b _0804B30E
_0804B2DC:
	movs r0, #8
	movs r1, #8
	bl sub_804B324
	bl sub_8044870
	cmp r0, #0
	bne _0804B300
	ldr r1, _0804B2FC @ =0x02000000
	ldr r2, [r1, #8]
	movs r0, #0xc0
	lsls r0, r0, #1
	strh r0, [r2, #2]
	ldr r1, [r1, #0xc]
	b _0804B30C
	.align 2, 0
_0804B2FC: .4byte 0x02000000
_0804B300:
	ldr r1, _0804B31C @ =0x02000000
	ldr r2, [r1]
	movs r0, #0xc0
	lsls r0, r0, #1
	strh r0, [r2, #2]
	ldr r1, [r1, #4]
_0804B30C:
	strh r0, [r1, #2]
_0804B30E:
	ldr r1, _0804B320 @ =0x0203CD46
	movs r0, #0
	strh r0, [r1]
	strh r0, [r1, #2]
	pop {r0}
	bx r0
	.align 2, 0
_0804B31C: .4byte 0x02000000
_0804B320: .4byte 0x0203CD46

	thumb_func_start sub_804B324
sub_804B324: @ 0x0804B324
	push {r4, r5, r6, lr}
	adds r2, r0, #0
	adds r6, r1, #0
	ldr r4, _0804B370 @ =0x02000000
	movs r0, #0
	str r0, [r4]
	str r0, [r4, #4]
	str r0, [r4, #8]
	str r0, [r4, #0xc]
	ldr r5, _0804B374 @ =0x0203CCF8
	ldrh r0, [r5]
	cmp r0, #1
	bne _0804B344
	adds r0, r2, #0
	bl sub_804B37C
_0804B344:
	ldrh r5, [r5, #2]
	cmp r5, #1
	bne _0804B350
	adds r0, r6, #0
	bl sub_804B4C0
_0804B350:
	ldr r0, _0804B378 @ =0x0203CD14
	ldrh r0, [r0]
	cmp r0, #4
	bne _0804B36A
	ldr r1, [r4]
	movs r2, #2
	ldrh r0, [r1]
	orrs r0, r2
	strh r0, [r1]
	ldr r1, [r4, #4]
	ldrh r0, [r1]
	orrs r0, r2
	strh r0, [r1]
_0804B36A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804B370: .4byte 0x02000000
_0804B374: .4byte 0x0203CCF8
_0804B378: .4byte 0x0203CD14

	thumb_func_start sub_804B37C
sub_804B37C: @ 0x0804B37C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	ldr r2, _0804B484 @ =0x08112298
	lsls r1, r7, #2
	adds r0, r1, r2
	ldrb r5, [r0]
	adds r0, r1, #1
	adds r0, r0, r2
	ldrb r6, [r0]
	adds r0, r1, #2
	adds r0, r0, r2
	ldrb r0, [r0]
	mov r8, r0
	adds r1, #3
	adds r1, r1, r2
	ldrb r1, [r1]
	mov sb, r1
	ldr r0, _0804B488 @ =0x081122C5
	ldr r1, _0804B48C @ =0x0203CD14
	movs r2, #0
	ldrsh r1, [r1, r2]
	adds r0, r1, r0
	ldrb r4, [r0]
	ldr r3, _0804B490 @ =0x02000028
	ldr r0, _0804B494 @ =0x081122D0
	lsls r1, r1, #1
	adds r1, r1, r0
	ldrh r1, [r1]
	rsbs r1, r1, #0
	movs r2, #0
	strh r1, [r3]
	ldr r0, _0804B498 @ =0x0200002C
	strh r2, [r0]
	ldr r0, _0804B49C @ =0x02000020
	adds r1, r1, r4
	strh r1, [r0]
	ldr r1, _0804B4A0 @ =0x02000024
	movs r0, #0x58
	strh r0, [r1]
	ldr r0, _0804B4A4 @ =0x02000054
	ldr r1, [r0]
	lsls r0, r5, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, _0804B4A8 @ =0x0200F1C0
	adds r0, r1, r0
	cmp r5, #0xff
	bne _0804B3E4
	ldr r0, _0804B4AC @ =0x085CBDA0
_0804B3E4:
	adds r1, r6, #0
	bl BasCreate
	adds r2, r0, #0
	ldr r1, _0804B49C @ =0x02000020
	ldr r0, _0804B4B0 @ =0x0201E12C
	ldrh r1, [r1]
	ldrh r0, [r0]
	subs r0, r1, r0
	movs r1, #0
	strh r0, [r2, #2]
	ldr r0, _0804B4A0 @ =0x02000024
	ldrh r0, [r0]
	strh r0, [r2, #4]
	movs r0, #0xf4
	lsls r0, r0, #7
	strh r0, [r2, #8]
	movs r3, #0x80
	lsls r3, r3, #3
	adds r0, r3, #0
	ldrh r3, [r2, #0xc]
	orrs r0, r3
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strb r7, [r2, #0x12]
	ldr r0, _0804B4B4 @ =0x02000080
	str r0, [r2, #0x2c]
	ldr r0, _0804B4B8 @ =0x020041C0
	str r0, [r2, #0x30]
	ldr r0, _0804B4BC @ =0x02000000
	str r2, [r0]
	ldr r0, _0804B4A4 @ =0x02000054
	ldr r1, [r0]
	mov r2, r8
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, _0804B4A8 @ =0x0200F1C0
	adds r0, r1, r0
	cmp r2, #0xff
	bne _0804B438
	ldr r0, _0804B4AC @ =0x085CBDA0
_0804B438:
	mov r1, sb
	bl BasCreate
	adds r2, r0, #0
	ldr r1, _0804B49C @ =0x02000020
	ldr r0, _0804B4B0 @ =0x0201E12C
	ldrh r1, [r1]
	ldrh r0, [r0]
	subs r0, r1, r0
	movs r1, #0
	strh r0, [r2, #2]
	ldr r0, _0804B4A0 @ =0x02000024
	ldrh r0, [r0]
	strh r0, [r2, #4]
	movs r0, #0xf4
	lsls r0, r0, #7
	strh r0, [r2, #8]
	movs r3, #0xa0
	lsls r3, r3, #3
	adds r0, r3, #0
	ldrh r3, [r2, #0xc]
	orrs r0, r3
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strb r7, [r2, #0x12]
	ldr r0, _0804B4B4 @ =0x02000080
	str r0, [r2, #0x2c]
	ldr r0, _0804B4B8 @ =0x020041C0
	str r0, [r2, #0x30]
	ldr r0, _0804B4BC @ =0x02000000
	str r2, [r0, #4]
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804B484: .4byte 0x08112298
_0804B488: .4byte 0x081122C5
_0804B48C: .4byte 0x0203CD14
_0804B490: .4byte 0x02000028
_0804B494: .4byte 0x081122D0
_0804B498: .4byte 0x0200002C
_0804B49C: .4byte 0x02000020
_0804B4A0: .4byte 0x02000024
_0804B4A4: .4byte 0x02000054
_0804B4A8: .4byte 0x0200F1C0
_0804B4AC: .4byte 0x085CBDA0
_0804B4B0: .4byte 0x0201E12C
_0804B4B4: .4byte 0x02000080
_0804B4B8: .4byte 0x020041C0
_0804B4BC: .4byte 0x02000000

	thumb_func_start sub_804B4C0
sub_804B4C0: @ 0x0804B4C0
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r2, _0804B5A8 @ =0x08112298
	lsls r1, r5, #2
	adds r0, r1, r2
	ldrb r3, [r0]
	adds r0, r1, #1
	adds r0, r0, r2
	ldrb r4, [r0]
	adds r0, r1, #2
	adds r0, r0, r2
	ldrb r6, [r0]
	adds r1, #3
	adds r1, r1, r2
	ldrb r7, [r1]
	ldr r1, _0804B5AC @ =0x081122CA
	ldr r0, _0804B5B0 @ =0x0203CD14
	movs r2, #0
	ldrsh r0, [r0, r2]
	adds r0, r0, r1
	ldrb r2, [r0]
	ldr r0, _0804B5B4 @ =0x02000028
	movs r1, #0
	strh r1, [r0, #2]
	ldr r0, _0804B5B8 @ =0x0200002C
	strh r1, [r0, #2]
	ldr r0, _0804B5BC @ =0x02000020
	strh r2, [r0, #2]
	ldr r1, _0804B5C0 @ =0x02000024
	movs r0, #0x58
	strh r0, [r1, #2]
	ldr r0, _0804B5C4 @ =0x02000058
	ldr r1, [r0]
	lsls r0, r3, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, _0804B5C8 @ =0x02011BC0
	adds r0, r1, r0
	cmp r3, #0xff
	bne _0804B512
	ldr r0, _0804B5CC @ =0x085CBDA0
_0804B512:
	adds r1, r4, #0
	bl BasCreate
	adds r2, r0, #0
	ldr r1, _0804B5BC @ =0x02000020
	ldr r0, _0804B5D0 @ =0x0201E12C
	ldrh r1, [r1, #2]
	ldrh r0, [r0]
	subs r0, r1, r0
	movs r1, #0
	strh r0, [r2, #2]
	ldr r0, _0804B5C0 @ =0x02000024
	ldrh r0, [r0, #2]
	strh r0, [r2, #4]
	movs r0, #0x9b
	lsls r0, r0, #8
	strh r0, [r2, #8]
	movs r3, #0xc0
	lsls r3, r3, #3
	adds r0, r3, #0
	ldrh r3, [r2, #0xc]
	orrs r0, r3
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strb r5, [r2, #0x12]
	ldr r0, _0804B5D4 @ =0x02002080
	str r0, [r2, #0x2c]
	ldr r0, _0804B5D8 @ =0x020099C0
	str r0, [r2, #0x30]
	ldr r0, _0804B5DC @ =0x02000000
	str r2, [r0, #8]
	ldr r0, _0804B5C4 @ =0x02000058
	ldr r1, [r0]
	lsls r0, r6, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, _0804B5C8 @ =0x02011BC0
	adds r0, r1, r0
	cmp r6, #0xff
	bne _0804B564
	ldr r0, _0804B5CC @ =0x085CBDA0
_0804B564:
	adds r1, r7, #0
	bl BasCreate
	adds r2, r0, #0
	ldr r1, _0804B5BC @ =0x02000020
	ldr r0, _0804B5D0 @ =0x0201E12C
	ldrh r1, [r1, #2]
	ldrh r0, [r0]
	subs r0, r1, r0
	movs r1, #0
	strh r0, [r2, #2]
	ldr r0, _0804B5C0 @ =0x02000024
	ldrh r0, [r0, #2]
	strh r0, [r2, #4]
	movs r0, #0x9b
	lsls r0, r0, #8
	strh r0, [r2, #8]
	movs r3, #0xe0
	lsls r3, r3, #3
	adds r0, r3, #0
	ldrh r3, [r2, #0xc]
	orrs r0, r3
	strh r0, [r2, #0xc]
	strh r1, [r2, #0xe]
	strb r5, [r2, #0x12]
	ldr r0, _0804B5D4 @ =0x02002080
	str r0, [r2, #0x2c]
	ldr r0, _0804B5D8 @ =0x020099C0
	str r0, [r2, #0x30]
	ldr r0, _0804B5DC @ =0x02000000
	str r2, [r0, #0xc]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804B5A8: .4byte 0x08112298
_0804B5AC: .4byte 0x081122CA
_0804B5B0: .4byte 0x0203CD14
_0804B5B4: .4byte 0x02000028
_0804B5B8: .4byte 0x0200002C
_0804B5BC: .4byte 0x02000020
_0804B5C0: .4byte 0x02000024
_0804B5C4: .4byte 0x02000058
_0804B5C8: .4byte 0x02011BC0
_0804B5CC: .4byte 0x085CBDA0
_0804B5D0: .4byte 0x0201E12C
_0804B5D4: .4byte 0x02002080
_0804B5D8: .4byte 0x020099C0
_0804B5DC: .4byte 0x02000000

	thumb_func_start sub_804B5E0
sub_804B5E0: @ 0x0804B5E0
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	bl sub_804B6B0
	cmp r0, #0
	bne _0804B600
	ldr r0, _0804B5FC @ =0x08112298
	lsls r1, r6, #2
	adds r2, r1, r0
	ldrb r5, [r2]
	adds r1, #1
	adds r1, r1, r0
	b _0804B60E
	.align 2, 0
_0804B5FC: .4byte 0x08112298
_0804B600:
	ldr r2, _0804B62C @ =0x08112298
	lsls r1, r6, #2
	adds r0, r1, #2
	adds r0, r0, r2
	ldrb r5, [r0]
	adds r1, #3
	adds r1, r1, r2
_0804B60E:
	ldrb r7, [r1]
	cmp r5, #0xff
	beq _0804B654
	adds r0, r4, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _0804B638
	ldr r0, _0804B630 @ =0x02000054
	ldr r1, [r0]
	lsls r0, r5, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, _0804B634 @ =0x0200F1C0
	b _0804B644
	.align 2, 0
_0804B62C: .4byte 0x08112298
_0804B630: .4byte 0x02000054
_0804B634: .4byte 0x0200F1C0
_0804B638:
	ldr r0, _0804B64C @ =0x02000058
	ldr r1, [r0]
	lsls r0, r5, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, _0804B650 @ =0x02011BC0
_0804B644:
	adds r1, r1, r0
	str r1, [r4, #0x24]
	str r1, [r4, #0x20]
	b _0804B65E
	.align 2, 0
_0804B64C: .4byte 0x02000058
_0804B650: .4byte 0x02011BC0
_0804B654:
	ldr r0, _0804B6A4 @ =0x085CBDA0
	str r0, [r4, #0x24]
	str r0, [r4, #0x20]
	movs r0, #0
	strh r0, [r4, #0x10]
_0804B65E:
	movs r3, #0
	movs r2, #0
	strh r7, [r4, #0xa]
	ldr r0, _0804B6A8 @ =0x0000F3FF
	ldrh r1, [r4, #8]
	ands r0, r1
	movs r5, #0x80
	lsls r5, r5, #4
	adds r1, r5, #0
	orrs r0, r1
	strh r0, [r4, #8]
	strh r2, [r4, #6]
	movs r0, #0xe0
	lsls r0, r0, #3
	ldrh r1, [r4, #0xc]
	ands r0, r1
	strh r0, [r4, #0xc]
	strb r6, [r4, #0x12]
	strb r3, [r4, #0x14]
	adds r0, r4, #0
	bl sub_804B6C4
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	subs r1, r1, r0
	lsls r1, r1, #0xb
	ldr r0, _0804B6AC @ =0x020041C0
	adds r1, r1, r0
	str r1, [r4, #0x30]
	bl BasSort
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804B6A4: .4byte 0x085CBDA0
_0804B6A8: .4byte 0x0000F3FF
_0804B6AC: .4byte 0x020041C0

	thumb_func_start sub_804B6B0
sub_804B6B0: @ 0x0804B6B0
	movs r1, #0x80
	lsls r1, r1, #1
	ldrh r0, [r0, #0xc]
	ands r1, r0
	cmp r1, #0
	beq _0804B6C0
	movs r0, #1
	b _0804B6C2
_0804B6C0:
	movs r0, #0
_0804B6C2:
	bx lr

	thumb_func_start sub_804B6C4
sub_804B6C4: @ 0x0804B6C4
	movs r1, #0x80
	lsls r1, r1, #2
	ldrh r0, [r0, #0xc]
	ands r1, r0
	cmp r1, #0
	beq _0804B6D4
	movs r0, #1
	b _0804B6D6
_0804B6D4:
	movs r0, #0
_0804B6D6:
	bx lr

	thumb_func_start sub_804B6D8
sub_804B6D8: @ 0x0804B6D8
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bhi _0804B71C
	lsls r0, r0, #2
	ldr r1, _0804B6EC @ =_0804B6F0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804B6EC: .4byte _0804B6F0
_0804B6F0: @ jump table
	.4byte _0804B71C @ case 0
	.4byte _0804B71C @ case 1
	.4byte _0804B71C @ case 2
	.4byte _0804B71C @ case 3
	.4byte _0804B718 @ case 4
	.4byte _0804B718 @ case 5
	.4byte _0804B71C @ case 6
	.4byte _0804B71C @ case 7
	.4byte _0804B71C @ case 8
	.4byte _0804B71C @ case 9
_0804B718:
	movs r0, #1
	b _0804B71E
_0804B71C:
	movs r0, #0
_0804B71E:
	bx lr

	thumb_func_start sub_804B720
sub_804B720: @ 0x0804B720
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bhi _0804B764
	lsls r0, r0, #2
	ldr r1, _0804B734 @ =_0804B738
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804B734: .4byte _0804B738
_0804B738: @ jump table
	.4byte _0804B764 @ case 0
	.4byte _0804B764 @ case 1
	.4byte _0804B764 @ case 2
	.4byte _0804B764 @ case 3
	.4byte _0804B764 @ case 4
	.4byte _0804B764 @ case 5
	.4byte _0804B760 @ case 6
	.4byte _0804B760 @ case 7
	.4byte _0804B760 @ case 8
	.4byte _0804B764 @ case 9
_0804B760:
	movs r0, #1
	b _0804B766
_0804B764:
	movs r0, #0
_0804B766:
	bx lr

	thumb_func_start sub_804B768
sub_804B768: @ 0x0804B768
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bhi _0804B7AC
	lsls r0, r0, #2
	ldr r1, _0804B77C @ =_0804B780
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804B77C: .4byte _0804B780
_0804B780: @ jump table
	.4byte _0804B7A8 @ case 0
	.4byte _0804B7A8 @ case 1
	.4byte _0804B7A8 @ case 2
	.4byte _0804B7A8 @ case 3
	.4byte _0804B7AC @ case 4
	.4byte _0804B7AC @ case 5
	.4byte _0804B7AC @ case 6
	.4byte _0804B7AC @ case 7
	.4byte _0804B7AC @ case 8
	.4byte _0804B7A8 @ case 9
_0804B7A8:
	movs r0, #1
	b _0804B7AE
_0804B7AC:
	movs r0, #0
_0804B7AE:
	bx lr

	thumb_func_start sub_804B7B0
sub_804B7B0: @ 0x0804B7B0
	push {lr}
	adds r2, r0, #0
	ldrb r0, [r2, #0x12]
	cmp r0, #9
	bhi _0804B806
	lsls r0, r0, #2
	ldr r1, _0804B7C4 @ =_0804B7C8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804B7C4: .4byte _0804B7C8
_0804B7C8: @ jump table
	.4byte _0804B806 @ case 0
	.4byte _0804B802 @ case 1
	.4byte _0804B806 @ case 2
	.4byte _0804B7F0 @ case 3
	.4byte _0804B806 @ case 4
	.4byte _0804B806 @ case 5
	.4byte _0804B806 @ case 6
	.4byte _0804B806 @ case 7
	.4byte _0804B806 @ case 8
	.4byte _0804B806 @ case 9
_0804B7F0:
	adds r0, r2, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _0804B802
	bl sub_8058998
	cmp r0, #0
	bne _0804B806
_0804B802:
	movs r0, #1
	b _0804B808
_0804B806:
	movs r0, #0
_0804B808:
	pop {r1}
	bx r1

	thumb_func_start sub_804B80C
sub_804B80C: @ 0x0804B80C
	push {r4, lr}
	ldr r4, _0804B824 @ =0x02000000
	bl sub_804B6C4
	movs r1, #1
	eors r1, r0
	lsls r1, r1, #3
	adds r1, r1, r4
	ldr r0, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0804B824: .4byte 0x02000000

	thumb_func_start sub_804B828
sub_804B828: @ 0x0804B828
	push {r4, lr}
	adds r4, r0, #0
	bl sub_804B6C4
	adds r1, r0, #0
	ldrh r0, [r4, #0xe]
	subs r0, #1
	lsls r0, r0, #1
	adds r0, r0, r1
	bl sub_804A554
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_804B848
sub_804B848: @ 0x0804B848
	push {r4, lr}
	adds r4, r0, #0
	bl sub_804B6C4
	adds r1, r0, #0
	ldrh r4, [r4, #0xe]
	lsls r0, r4, #1
	adds r0, r0, r1
	bl sub_804A554
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_804B868
sub_804B868: @ 0x0804B868
	push {r4, lr}
	adds r4, r0, #0
	bl sub_804B6C4
	adds r2, r0, #0
	ldrh r0, [r4, #0xe]
	subs r0, #1
	lsls r0, r0, #1
	movs r1, #1
	eors r1, r2
	adds r0, r0, r1
	bl sub_804A554
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_804B88C
sub_804B88C: @ 0x0804B88C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_804B6C4
	adds r2, r0, #0
	ldrh r4, [r4, #0xe]
	lsls r0, r4, #1
	movs r1, #1
	eors r1, r2
	adds r0, r0, r1
	bl sub_804A554
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_804B8B0
sub_804B8B0: @ 0x0804B8B0
	cmp r0, #0
	bne _0804B8C8
	ldr r2, _0804B8C4 @ =0x02000000
	ldr r3, [r2]
	movs r1, #2
	ldrh r0, [r3]
	orrs r0, r1
	strh r0, [r3]
	ldr r3, [r2, #4]
	b _0804B8DA
	.align 2, 0
_0804B8C4: .4byte 0x02000000
_0804B8C8:
	cmp r0, #1
	bne _0804B8E0
	ldr r2, _0804B8E4 @ =0x02000000
	ldr r3, [r2, #8]
	movs r1, #2
	ldrh r0, [r3]
	orrs r0, r1
	strh r0, [r3]
	ldr r3, [r2, #0xc]
_0804B8DA:
	ldrh r0, [r3]
	orrs r0, r1
	strh r0, [r3]
_0804B8E0:
	bx lr
	.align 2, 0
_0804B8E4: .4byte 0x02000000

	thumb_func_start sub_804B8E8
sub_804B8E8: @ 0x0804B8E8
	push {r4, lr}
	cmp r0, #0
	bne _0804B908
	ldr r2, _0804B900 @ =0x02000000
	ldr r3, [r2]
	ldr r1, _0804B904 @ =0x0000FFFD
	adds r0, r1, #0
	ldrh r4, [r3]
	ands r0, r4
	strh r0, [r3]
	ldr r3, [r2, #4]
	b _0804B91C
	.align 2, 0
_0804B900: .4byte 0x02000000
_0804B904: .4byte 0x0000FFFD
_0804B908:
	cmp r0, #1
	bne _0804B922
	ldr r2, _0804B928 @ =0x02000000
	ldr r3, [r2, #8]
	ldr r1, _0804B92C @ =0x0000FFFD
	adds r0, r1, #0
	ldrh r4, [r3]
	ands r0, r4
	strh r0, [r3]
	ldr r3, [r2, #0xc]
_0804B91C:
	ldrh r0, [r3]
	ands r1, r0
	strh r1, [r3]
_0804B922:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804B928: .4byte 0x02000000
_0804B92C: .4byte 0x0000FFFD

	thumb_func_start sub_804B930
sub_804B930: @ 0x0804B930
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	cmp r4, #0
	bne _0804B93C
	b _0804BAC2
_0804B93C:
	movs r5, #0xf0
	lsls r5, r5, #8
	ldrh r0, [r4, #0xc]
	ands r5, r0
	cmp r5, #0
	bne _0804B94A
	b _0804BAC2
_0804B94A:
	movs r0, #0x80
	lsls r0, r0, #5
	ands r0, r5
	cmp r0, #0
	bne _0804B956
	b _0804BA84
_0804B956:
	ldrb r0, [r4, #0x14]
	cmp r0, #0
	bne _0804B95E
	b _0804BA7A
_0804B95E:
	ldrb r1, [r4, #0x14]
	adds r0, r1, r4
	ldrb r0, [r0, #0x14]
	cmp r0, #0x32
	bls _0804B96A
	b _0804BA72
_0804B96A:
	lsls r0, r0, #2
	ldr r1, _0804B974 @ =_0804B978
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804B974: .4byte _0804B978
_0804B978: @ jump table
	.4byte _0804BA72 @ case 0
	.4byte _0804BA44 @ case 1
	.4byte _0804BA44 @ case 2
	.4byte _0804BA5C @ case 3
	.4byte _0804BA5C @ case 4
	.4byte _0804BA4C @ case 5
	.4byte _0804BA72 @ case 6
	.4byte _0804BA72 @ case 7
	.4byte _0804BA72 @ case 8
	.4byte _0804BA72 @ case 9
	.4byte _0804BA72 @ case 10
	.4byte _0804BA72 @ case 11
	.4byte _0804BA72 @ case 12
	.4byte _0804BA64 @ case 13
	.4byte _0804BA72 @ case 14
	.4byte _0804BA72 @ case 15
	.4byte _0804BA72 @ case 16
	.4byte _0804BA72 @ case 17
	.4byte _0804BA72 @ case 18
	.4byte _0804BA72 @ case 19
	.4byte _0804BA72 @ case 20
	.4byte _0804BA72 @ case 21
	.4byte _0804BA72 @ case 22
	.4byte _0804BA72 @ case 23
	.4byte _0804BA6C @ case 24
	.4byte _0804BA72 @ case 25
	.4byte _0804BA72 @ case 26
	.4byte _0804BA72 @ case 27
	.4byte _0804BA72 @ case 28
	.4byte _0804BA72 @ case 29
	.4byte _0804BA72 @ case 30
	.4byte _0804BA72 @ case 31
	.4byte _0804BA72 @ case 32
	.4byte _0804BA72 @ case 33
	.4byte _0804BA72 @ case 34
	.4byte _0804BA72 @ case 35
	.4byte _0804BA72 @ case 36
	.4byte _0804BA72 @ case 37
	.4byte _0804BA72 @ case 38
	.4byte _0804BA72 @ case 39
	.4byte _0804BA72 @ case 40
	.4byte _0804BA72 @ case 41
	.4byte _0804BA72 @ case 42
	.4byte _0804BA72 @ case 43
	.4byte _0804BA72 @ case 44
	.4byte _0804BA72 @ case 45
	.4byte _0804BA72 @ case 46
	.4byte _0804BA72 @ case 47
	.4byte _0804BA72 @ case 48
	.4byte _0804BA72 @ case 49
	.4byte _0804BA72 @ case 50
_0804BA44:
	adds r0, r4, #0
	bl sub_804BACC
	b _0804BA72
_0804BA4C:
	adds r0, r4, #0
	bl sub_804B6B0
	cmp r0, #0
	bne _0804BA5C
	adds r0, r4, #0
	bl sub_8058158
_0804BA5C:
	ldr r0, [r4, #0x20]
	adds r0, #4
	str r0, [r4, #0x20]
	b _0804BA72
_0804BA64:
	adds r0, r4, #0
	bl sub_804BAF0
	b _0804BA72
_0804BA6C:
	adds r0, r4, #0
	bl sub_804BACC
_0804BA72:
	ldrb r0, [r4, #0x14]
	subs r0, #1
	strb r0, [r4, #0x14]
	b _0804B956
_0804BA7A:
	movs r0, #0xe7
	lsls r0, r0, #8
	ldrh r1, [r4, #0xc]
	ands r0, r1
	strh r0, [r4, #0xc]
_0804BA84:
	movs r0, #0x80
	lsls r0, r0, #6
	ands r0, r5
	cmp r0, #0
	beq _0804BAB4
	adds r0, r4, #0
	bl sub_804B6B0
	cmp r0, #0
	bne _0804BAAA
	ldr r1, [r6, #0x28]
	ldr r0, [r4, #0x28]
	cmp r1, r0
	beq _0804BAAA
	adds r0, r4, #0
	bl sub_804AFA0
	ldr r0, [r4, #0x28]
	str r0, [r6, #0x28]
_0804BAAA:
	movs r0, #0xd7
	lsls r0, r0, #8
	ldrh r1, [r4, #0xc]
	ands r0, r1
	strh r0, [r4, #0xc]
_0804BAB4:
	movs r0, #0x80
	lsls r0, r0, #7
	ands r5, r0
	cmp r5, #0
	beq _0804BAC2
	ldr r0, _0804BAC8 @ =0x0000FFFF
	strh r0, [r4, #0xe]
_0804BAC2:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804BAC8: .4byte 0x0000FFFF

	thumb_func_start sub_804BACC
sub_804BACC: @ 0x0804BACC
	adds r1, r0, #0
	ldr r0, _0804BAEC @ =0x0000FFFE
	strh r0, [r1, #0xe]
	movs r0, #8
	ldrh r2, [r1, #0x10]
	ands r0, r2
	cmp r0, #0
	beq _0804BAE8
	strh r0, [r1, #0x10]
	movs r0, #0
	strh r0, [r1, #0xe]
	ldr r0, [r1, #0x20]
	adds r0, #4
	str r0, [r1, #0x20]
_0804BAE8:
	bx lr
	.align 2, 0
_0804BAEC: .4byte 0x0000FFFE

	thumb_func_start sub_804BAF0
sub_804BAF0: @ 0x0804BAF0
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldr r6, [r7, #0x44]
	bl sub_804B6B0
	cmp r0, #0
	bne _0804BB40
	ldr r3, _0804BB48 @ =0x08112298
	ldrh r1, [r6, #6]
	lsls r0, r1, #5
	ldr r1, _0804BB4C @ =0x086A0008
	adds r0, r0, r1
	ldr r1, [r0, #0xc]
	ldr r2, [r6, #0x10]
	ldr r4, [r6, #0x14]
	ldr r5, [r6, #0x24]
	ldrb r3, [r3, #0x18]
	lsls r0, r3, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r1, r5, r0
	ldr r0, [r1, #4]
	str r0, [r2, #0x28]
	ldr r5, [r2, #0x30]
	ldr r0, [r1, #8]
	adds r5, r5, r0
	str r5, [r2, #0x3c]
	ldr r5, [r4, #0x30]
	ldr r0, _0804BB50 @ =0x000057F0
	adds r5, r5, r0
	str r5, [r4, #0x3c]
	ldr r1, [r6, #0x28]
	ldr r0, [r7, #0x28]
	cmp r1, r0
	beq _0804BB40
	adds r0, r7, #0
	bl sub_804AF70
	ldr r0, [r7, #0x28]
	str r0, [r6, #0x28]
_0804BB40:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804BB48: .4byte 0x08112298
_0804BB4C: .4byte 0x086A0008
_0804BB50: .4byte 0x000057F0

	thumb_func_start sub_804BB54
sub_804BB54: @ 0x0804BB54
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	ldr r0, _0804BBD8 @ =0x086A0008
	mov sb, r0
	ldr r2, _0804BBDC @ =0x08112298
	ldrh r3, [r6, #8]
	lsls r1, r3, #2
	adds r0, r1, r2
	ldrb r4, [r0]
	adds r0, r1, #1
	adds r0, r0, r2
	ldrb r0, [r0]
	mov r8, r0
	adds r0, r1, #2
	adds r0, r0, r2
	ldrb r5, [r0]
	adds r1, #3
	adds r1, r1, r2
	ldrb r1, [r1]
	str r1, [sp]
	ldrh r1, [r6, #6]
	lsls r0, r1, #5
	add r0, sb
	ldr r0, [r0, #0x10]
	ldr r1, [r6, #0x24]
	bl LZ77UnCompWram
	ldrh r2, [r6, #6]
	lsls r0, r2, #5
	mov r3, sb
	adds r1, r0, r3
	ldr r2, [r1, #0xc]
	ldr r3, [r6, #0x24]
	ldr r7, _0804BBE0 @ =0x085CBDA0
	cmp r4, #0xff
	beq _0804BBAE
	lsls r0, r4, #2
	adds r0, r0, r2
	ldr r0, [r0]
	adds r7, r3, r0
_0804BBAE:
	ldr r0, _0804BBE0 @ =0x085CBDA0
	mov sl, r0
	cmp r5, #0xff
	beq _0804BBC0
	lsls r0, r5, #2
	adds r0, r0, r2
	ldr r0, [r0]
	adds r3, r3, r0
	mov sl, r3
_0804BBC0:
	ldrh r0, [r6, #0xa]
	cmp r0, #0
	bne _0804BBE8
	ldr r4, [r6, #0x20]
	ldr r0, [r1, #0x18]
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r2, _0804BBE4 @ =0x000057F0
	adds r1, r4, r2
	b _0804BBF6
	.align 2, 0
_0804BBD8: .4byte 0x086A0008
_0804BBDC: .4byte 0x08112298
_0804BBE0: .4byte 0x085CBDA0
_0804BBE4: .4byte 0x000057F0
_0804BBE8:
	ldr r4, [r6, #0x20]
	ldr r0, [r1, #0x14]
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r3, _0804BCC0 @ =0x000057F0
	adds r1, r4, r3
_0804BBF6:
	movs r0, #1
	str r0, [r1]
	mov r1, r8
	adds r0, r7, #0
	bl BasCreate
	adds r2, r0, #0
	ldr r0, [r6, #0x20]
	str r0, [r2, #0x30]
	ldrh r0, [r6, #2]
	movs r4, #0
	strh r0, [r2, #2]
	ldrh r0, [r6, #4]
	strh r0, [r2, #4]
	ldrh r1, [r6, #0xe]
	lsls r0, r1, #0xc
	movs r3, #0x80
	lsls r3, r3, #4
	adds r5, r3, #0
	orrs r0, r5
	ldrh r1, [r6, #0xc]
	orrs r0, r1
	strh r0, [r2, #8]
	ldrh r3, [r6, #0xa]
	lsls r0, r3, #9
	movs r3, #0x80
	lsls r3, r3, #3
	adds r1, r3, #0
	orrs r0, r1
	ldrh r1, [r2, #0xc]
	orrs r0, r1
	strh r0, [r2, #0xc]
	strh r4, [r2, #0xe]
	ldrh r0, [r6, #8]
	strb r0, [r2, #0x12]
	ldr r0, [r6, #0x18]
	str r0, [r2, #0x2c]
	str r2, [r6, #0x10]
	str r6, [r2, #0x44]
	ldr r1, [sp]
	mov r0, sl
	bl BasCreate
	adds r2, r0, #0
	ldr r0, [r6, #0x20]
	str r0, [r2, #0x30]
	ldrh r0, [r6, #2]
	strh r0, [r2, #2]
	ldrh r0, [r6, #4]
	strh r0, [r2, #4]
	ldrh r3, [r6, #0xe]
	lsls r0, r3, #0xc
	orrs r0, r5
	ldrh r1, [r6, #0xc]
	orrs r0, r1
	strh r0, [r2, #8]
	ldrh r3, [r6, #0xa]
	lsls r0, r3, #9
	movs r3, #0xa0
	lsls r3, r3, #3
	adds r1, r3, #0
	orrs r0, r1
	ldrh r1, [r2, #0xc]
	orrs r0, r1
	strh r0, [r2, #0xc]
	strh r4, [r2, #0xe]
	ldrh r0, [r6, #8]
	strb r0, [r2, #0x12]
	ldr r0, [r6, #0x18]
	str r0, [r2, #0x2c]
	str r2, [r6, #0x14]
	str r6, [r2, #0x44]
	ldrh r2, [r6, #6]
	lsls r0, r2, #5
	add r0, sb
	ldr r0, [r0, #0x1c]
	ldr r1, [r6, #0x1c]
	bl LZ77UnCompWram
	ldrb r3, [r6, #1]
	lsls r1, r3, #5
	ldr r0, [r6, #0x1c]
	adds r0, r0, r1
	ldrh r2, [r6, #0xe]
	lsls r1, r2, #5
	ldr r2, _0804BCC4 @ =0x02021908
	adds r1, r1, r2
	movs r2, #8
	bl CpuFastSet
	str r4, [r6, #0x28]
	bl EnablePalSync
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804BCC0: .4byte 0x000057F0
_0804BCC4: .4byte 0x02021908

	thumb_func_start sub_804BCC8
sub_804BCC8: @ 0x0804BCC8
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r6, r0, #0
	ldr r0, _0804BD38 @ =0x086A0008
	mov sb, r0
	ldr r2, _0804BD3C @ =0x08112298
	ldrh r1, [r6, #8]
	lsls r0, r1, #2
	adds r1, r0, r2
	ldrb r4, [r1]
	adds r0, #2
	adds r0, r0, r2
	ldrb r5, [r0]
	ldrh r2, [r6, #6]
	lsls r0, r2, #5
	add r0, sb
	ldr r0, [r0, #0x10]
	ldr r1, [r6, #0x24]
	bl LZ77UnCompWram
	ldrh r3, [r6, #6]
	lsls r0, r3, #5
	mov r7, sb
	adds r1, r0, r7
	ldr r2, [r1, #0xc]
	ldr r3, [r6, #0x24]
	ldr r7, _0804BD40 @ =0x085CBDA0
	cmp r4, #0xff
	beq _0804BD0E
	lsls r0, r4, #2
	adds r0, r0, r2
	ldr r0, [r0]
	adds r7, r3, r0
_0804BD0E:
	ldr r0, _0804BD40 @ =0x085CBDA0
	mov r8, r0
	cmp r5, #0xff
	beq _0804BD20
	lsls r0, r5, #2
	adds r0, r0, r2
	ldr r0, [r0]
	adds r3, r3, r0
	mov r8, r3
_0804BD20:
	ldrh r0, [r6, #0xa]
	cmp r0, #0
	bne _0804BD48
	ldr r4, [r6, #0x20]
	ldr r0, [r1, #0x18]
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r2, _0804BD44 @ =0x000057F0
	adds r1, r4, r2
	b _0804BD56
	.align 2, 0
_0804BD38: .4byte 0x086A0008
_0804BD3C: .4byte 0x08112298
_0804BD40: .4byte 0x085CBDA0
_0804BD44: .4byte 0x000057F0
_0804BD48:
	ldr r4, [r6, #0x20]
	ldr r0, [r1, #0x14]
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r3, _0804BE0C @ =0x000057F0
	adds r1, r4, r3
_0804BD56:
	movs r0, #1
	str r0, [r1]
	ldr r5, [r6, #0x10]
	str r7, [r5, #0x24]
	str r7, [r5, #0x20]
	ldr r0, [r6, #0x20]
	str r0, [r5, #0x30]
	ldrh r0, [r6, #2]
	movs r4, #0
	movs r2, #0
	strh r0, [r5, #2]
	ldrh r0, [r6, #4]
	strh r0, [r5, #4]
	ldrh r7, [r6, #0xe]
	lsls r0, r7, #0xc
	movs r1, #0x80
	lsls r1, r1, #4
	adds r3, r1, #0
	orrs r0, r3
	ldrh r7, [r6, #0xc]
	orrs r0, r7
	strh r0, [r5, #8]
	movs r1, #0xe0
	lsls r1, r1, #3
	adds r0, r1, #0
	ldrh r7, [r5, #0xc]
	ands r0, r7
	strh r0, [r5, #0xc]
	strh r2, [r5, #0x10]
	strh r2, [r5, #6]
	strh r2, [r5, #0xe]
	ldrh r0, [r6, #8]
	strb r0, [r5, #0x12]
	ldr r0, [r6, #0x18]
	str r0, [r5, #0x2c]
	strb r4, [r5, #0x14]
	str r5, [r6, #0x10]
	ldr r5, [r6, #0x14]
	mov r0, r8
	str r0, [r5, #0x24]
	str r0, [r5, #0x20]
	ldr r0, [r6, #0x20]
	str r0, [r5, #0x30]
	ldrh r0, [r6, #2]
	strh r0, [r5, #2]
	ldrh r0, [r6, #4]
	strh r0, [r5, #4]
	ldrh r7, [r6, #0xe]
	lsls r0, r7, #0xc
	orrs r0, r3
	ldrh r3, [r6, #0xc]
	orrs r0, r3
	strh r0, [r5, #8]
	ldrh r7, [r5, #0xc]
	ands r1, r7
	strh r1, [r5, #0xc]
	strh r2, [r5, #0x10]
	strh r2, [r5, #6]
	strh r2, [r5, #0xe]
	ldrh r0, [r6, #8]
	strb r0, [r5, #0x12]
	ldr r0, [r6, #0x18]
	str r0, [r5, #0x2c]
	strb r4, [r5, #0x14]
	str r5, [r6, #0x14]
	ldrh r1, [r6, #6]
	lsls r0, r1, #5
	add r0, sb
	ldr r0, [r0, #0x1c]
	ldr r1, [r6, #0x1c]
	bl LZ77UnCompWram
	ldrb r2, [r6, #1]
	lsls r1, r2, #5
	ldr r0, [r6, #0x1c]
	adds r0, r0, r1
	ldrh r6, [r6, #0xe]
	lsls r1, r6, #5
	ldr r2, _0804BE10 @ =0x02021908
	adds r1, r1, r2
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804BE0C: .4byte 0x000057F0
_0804BE10: .4byte 0x02021908

	thumb_func_start sub_804BE14
sub_804BE14: @ 0x0804BE14
	push {lr}
	strh r1, [r0, #6]
	bl sub_804BCC8
	pop {r0}
	bx r0

	thumb_func_start sub_804BE20
sub_804BE20: @ 0x0804BE20
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	strh r1, [r0, #2]
	strh r2, [r0, #4]
	ldr r2, [r0, #0x10]
	strh r1, [r2, #2]
	ldrh r1, [r0, #4]
	strh r1, [r2, #4]
	ldr r2, [r0, #0x14]
	ldrh r1, [r0, #2]
	strh r1, [r2, #2]
	ldrh r0, [r0, #4]
	strh r0, [r2, #4]
	bx lr

	thumb_func_start sub_804BE3C
sub_804BE3C: @ 0x0804BE3C
	lsls r1, r1, #0x10
	ldr r2, [r0, #0x10]
	lsrs r1, r1, #6
	strh r1, [r2, #8]
	ldr r2, [r0, #0x14]
	strh r1, [r2, #8]
	bx lr
	.align 2, 0

	thumb_func_start sub_804BE4C
sub_804BE4C: @ 0x0804BE4C
	ldr r1, [r0, #0x10]
	ldr r2, [r0, #0x14]
	ldr r0, _0804BE64 @ =0x0000FFFE
	ldrh r1, [r1, #0xe]
	cmp r1, r0
	beq _0804BE68
	ldrh r2, [r2, #0xe]
	cmp r2, r0
	beq _0804BE68
	movs r0, #0
	b _0804BE6A
	.align 2, 0
_0804BE64: .4byte 0x0000FFFE
_0804BE68:
	movs r0, #1
_0804BE6A:
	bx lr

	thumb_func_start sub_804BE6C
sub_804BE6C: @ 0x0804BE6C
	ldr r3, [r0, #0x10]
	movs r2, #8
	ldrh r1, [r3, #0x10]
	orrs r1, r2
	strh r1, [r3, #0x10]
	ldr r3, [r0, #0x14]
	ldrh r0, [r3, #0x10]
	orrs r0, r2
	strh r0, [r3, #0x10]
	bx lr

	thumb_func_start sub_804BE80
sub_804BE80: @ 0x0804BE80
	ldr r1, [r0, #0x10]
	ldr r0, _0804BE90 @ =0x0000FFFF
	ldrh r1, [r1, #0xe]
	cmp r1, r0
	bne _0804BE94
	movs r0, #1
	b _0804BE96
	.align 2, 0
_0804BE90: .4byte 0x0000FFFF
_0804BE94:
	movs r0, #0
_0804BE96:
	bx lr

	thumb_func_start sub_804BE98
sub_804BE98: @ 0x0804BE98
	push {r4, lr}
	ldr r4, _0804BEB0 @ =0x0201E138
	ldr r0, _0804BEB4 @ =0x085CBDF0
	movs r1, #4
	bl SpawnProc
	str r0, [r4]
	bl BasInit
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804BEB0: .4byte 0x0201E138
_0804BEB4: .4byte 0x085CBDF0

	thumb_func_start sub_804BEB8
sub_804BEB8: @ 0x0804BEB8
	push {lr}
	ldr r0, _0804BEC8 @ =0x0201E138
	ldr r0, [r0]
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_0804BEC8: .4byte 0x0201E138

	thumb_func_start sub_804BECC
sub_804BECC: @ 0x0804BECC
	push {lr}
	bl BasUpdateAll
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_804BED8
sub_804BED8: @ 0x0804BED8
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _0804BEFC @ =0x085CBE08
	movs r1, #4
	bl SpawnProc
	adds r5, r0, #0
	adds r0, r4, #0
	bl sub_804BB54
	str r4, [r5, #0x5c]
	str r5, [r4, #0x30]
	movs r0, #1
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804BEFC: .4byte 0x085CBE08

	thumb_func_start sub_804BF00
sub_804BF00: @ 0x0804BF00
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x10]
	bl BasRemove
	ldr r0, [r4, #0x14]
	bl BasRemove
	movs r0, #0
	str r0, [r4, #0x10]
	str r0, [r4, #0x14]
	ldr r0, [r4, #0x30]
	bl Proc_End
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_804BF24
sub_804BF24: @ 0x0804BF24
	push {r4, lr}
	ldr r4, [r0, #0x5c]
	ldr r1, [r4, #0x10]
	adds r0, r4, #0
	bl sub_804B930
	ldr r1, [r4, #0x14]
	adds r0, r4, #0
	bl sub_804B930
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_804BF40
sub_804BF40: @ 0x0804BF40
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	adds r6, r0, #0
	movs r0, #0
	ldrsh r1, [r6, r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	ldr r2, _0804BFA8 @ =0x087EA008
	adds r0, r0, r2
	mov r8, r0
	movs r0, #6
	ldrsh r1, [r6, r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r5, r0, r2
	movs r1, #0
	ldrsh r0, [r6, r1]
	movs r4, #1
	rsbs r4, r4, #0
	cmp r0, r4
	beq _0804BF7E
	mov r2, r8
	ldr r0, [r2, #0xc]
	ldr r1, [r6, #0x20]
	bl LZ77UnCompWram
_0804BF7E:
	movs r1, #6
	ldrsh r0, [r6, r1]
	cmp r0, r4
	beq _0804BF94
	ldr r0, [r5, #0xc]
	ldr r1, [r6, #0x20]
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r1, r2
	bl LZ77UnCompWram
_0804BF94:
	movs r1, #0xc
	ldrsh r0, [r6, r1]
	cmp r0, #3
	bgt _0804BFAC
	cmp r0, #1
	bge _0804BFBA
	cmp r0, #0
	beq _0804BFB0
	b _0804BFBA
	.align 2, 0
_0804BFA8: .4byte 0x087EA008
_0804BFAC:
	cmp r0, #4
	bne _0804BFBA
_0804BFB0:
	ldr r3, [r6, #0x20]
	movs r2, #0x80
	lsls r2, r2, #5
	adds r7, r3, r2
	b _0804BFC8
_0804BFBA:
	ldr r0, [r6, #0x20]
	movs r1, #0x80
	lsls r1, r1, #4
	adds r3, r0, r1
	movs r2, #0xc0
	lsls r2, r2, #5
	adds r7, r0, r2
_0804BFC8:
	mov r0, r8
	ldr r0, [r0, #0x10]
	mov r8, r0
	ldr r5, [r5, #0x10]
	mov sb, r5
	movs r1, #0xe
	ldrsh r4, [r6, r1]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	beq _0804C04C
	cmp r4, r0
	blt _0804C0AC
	cmp r4, #3
	bgt _0804C0AC
	movs r2, #4
	ldrsh r0, [r6, r2]
	adds r0, #0x40
	lsls r0, r0, #5
	movs r4, #0xc0
	lsls r4, r4, #0x13
	adds r0, r0, r4
	ldr r1, [r6, #0x1c]
	adds r1, r1, r0
	movs r5, #0x80
	lsls r5, r5, #4
	adds r0, r3, #0
	adds r2, r5, #0
	bl RegisterDataMove
	movs r1, #0xa
	ldrsh r0, [r6, r1]
	lsls r0, r0, #5
	adds r0, r0, r4
	ldr r1, [r6, #0x1c]
	adds r1, r1, r0
	adds r0, r7, #0
	adds r2, r5, #0
	bl RegisterDataMove
	movs r2, #2
	ldrsh r1, [r6, r2]
	lsls r1, r1, #5
	ldr r4, _0804C048 @ =gPal
	adds r1, r1, r4
	mov r0, r8
	movs r2, #8
	bl CpuFastSet
	movs r0, #8
	ldrsh r1, [r6, r0]
	lsls r1, r1, #5
	adds r1, r1, r4
	mov r0, sb
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	adds r0, r6, #0
	bl sub_804C330
	b _0804C0AC
	.align 2, 0
_0804C048: .4byte gPal
_0804C04C:
	movs r1, #0
	ldrsh r0, [r6, r1]
	cmp r0, r4
	beq _0804C07A
	movs r2, #4
	ldrsh r0, [r6, r2]
	lsls r0, r0, #5
	ldr r1, [r6, #0x1c]
	adds r1, r1, r0
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r3, #0
	bl RegisterDataMove
	movs r0, #2
	ldrsh r1, [r6, r0]
	lsls r1, r1, #5
	ldr r0, _0804C0C4 @ =0x02021908
	adds r1, r1, r0
	mov r0, r8
	movs r2, #8
	bl CpuFastSet
_0804C07A:
	movs r1, #6
	ldrsh r0, [r6, r1]
	cmp r0, r4
	beq _0804C0A8
	movs r2, #0xa
	ldrsh r0, [r6, r2]
	lsls r0, r0, #5
	ldr r1, [r6, #0x1c]
	adds r1, r1, r0
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r7, #0
	bl RegisterDataMove
	movs r0, #8
	ldrsh r1, [r6, r0]
	lsls r1, r1, #5
	ldr r0, _0804C0C4 @ =0x02021908
	adds r1, r1, r0
	mov r0, sb
	movs r2, #8
	bl CpuFastSet
_0804C0A8:
	bl EnablePalSync
_0804C0AC:
	ldrh r0, [r6, #0xe]
	adds r0, #1
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #4
	bls _0804C0BA
	b _0804C2DA
_0804C0BA:
	lsls r0, r0, #2
	ldr r1, _0804C0C8 @ =_0804C0CC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804C0C4: .4byte 0x02021908
_0804C0C8: .4byte _0804C0CC
_0804C0CC: @ jump table
	.4byte _0804C100 @ case 0
	.4byte _0804C0E0 @ case 1
	.4byte _0804C0E8 @ case 2
	.4byte _0804C0F0 @ case 3
	.4byte _0804C0F8 @ case 4
_0804C0E0:
	movs r0, #1
	bl EnableBgSync
	b _0804C2DA
_0804C0E8:
	movs r0, #2
	bl EnableBgSync
	b _0804C2DA
_0804C0F0:
	movs r0, #4
	bl EnableBgSync
	b _0804C2DA
_0804C0F8:
	movs r0, #8
	bl EnableBgSync
	b _0804C2DA
_0804C100:
	movs r0, #0
	str r0, [r6, #0x14]
	str r0, [r6, #0x18]
	movs r2, #0
	ldrsh r1, [r6, r2]
	subs r0, #1
	cmp r1, r0
	beq _0804C1EE
	movs r1, #0xc
	ldrsh r0, [r6, r1]
	cmp r0, #4
	bhi _0804C1EE
	lsls r0, r0, #2
	ldr r1, _0804C124 @ =_0804C128
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804C124: .4byte _0804C128
_0804C128: @ jump table
	.4byte _0804C13C @ case 0
	.4byte _0804C168 @ case 1
	.4byte _0804C194 @ case 2
	.4byte _0804C1C0 @ case 3
	.4byte _0804C13C @ case 4
_0804C13C:
	movs r2, #2
	ldrsh r0, [r6, r2]
	lsls r0, r0, #0xc
	ldrh r1, [r6, #4]
	orrs r0, r1
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, _0804C164 @ =0x085CCF38
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	movs r0, #4
	str r0, [sp, #8]
	movs r0, #0x48
	b _0804C1E4
	.align 2, 0
_0804C164: .4byte 0x085CCF38
_0804C168:
	movs r1, #2
	ldrsh r0, [r6, r1]
	lsls r0, r0, #0xc
	ldrh r2, [r6, #4]
	orrs r0, r2
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, _0804C190 @ =0x085CCE38
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	movs r0, #4
	str r0, [sp, #8]
	movs r0, #0x20
	b _0804C1E4
	.align 2, 0
_0804C190: .4byte 0x085CCE38
_0804C194:
	movs r1, #2
	ldrsh r0, [r6, r1]
	lsls r0, r0, #0xc
	ldrh r2, [r6, #4]
	orrs r0, r2
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, _0804C1BC @ =0x085CCE38
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	movs r0, #4
	str r0, [sp, #8]
	movs r0, #0x40
	b _0804C1E4
	.align 2, 0
_0804C1BC: .4byte 0x085CCE38
_0804C1C0:
	movs r1, #2
	ldrsh r0, [r6, r1]
	lsls r0, r0, #0xc
	ldrh r2, [r6, #4]
	orrs r0, r2
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, _0804C20C @ =0x085CCF38
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	movs r0, #4
	str r0, [sp, #8]
	movs r0, #0x78
_0804C1E4:
	movs r1, #0x68
	movs r3, #2
	bl sub_805B9E0
	str r0, [r6, #0x14]
_0804C1EE:
	movs r0, #6
	ldrsh r1, [r6, r0]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	beq _0804C2DA
	movs r1, #0xc
	ldrsh r0, [r6, r1]
	cmp r0, #4
	bhi _0804C2DA
	lsls r0, r0, #2
	ldr r1, _0804C210 @ =_0804C214
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804C20C: .4byte 0x085CCF38
_0804C210: .4byte _0804C214
_0804C214: @ jump table
	.4byte _0804C228 @ case 0
	.4byte _0804C254 @ case 1
	.4byte _0804C280 @ case 2
	.4byte _0804C2AC @ case 3
	.4byte _0804C228 @ case 4
_0804C228:
	movs r2, #8
	ldrsh r0, [r6, r2]
	lsls r0, r0, #0xc
	ldrh r1, [r6, #0xa]
	orrs r0, r1
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, _0804C250 @ =0x085CCEB8
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	movs r0, #4
	str r0, [sp, #8]
	movs r0, #0xa8
	b _0804C2D0
	.align 2, 0
_0804C250: .4byte 0x085CCEB8
_0804C254:
	movs r1, #8
	ldrsh r0, [r6, r1]
	lsls r0, r0, #0xc
	ldrh r2, [r6, #0xa]
	orrs r0, r2
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, _0804C27C @ =0x085CCDAC
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	movs r0, #4
	str r0, [sp, #8]
	movs r0, #0xb0
	b _0804C2D0
	.align 2, 0
_0804C27C: .4byte 0x085CCDAC
_0804C280:
	movs r1, #8
	ldrsh r0, [r6, r1]
	lsls r0, r0, #0xc
	ldrh r2, [r6, #0xa]
	orrs r0, r2
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, _0804C2A8 @ =0x085CCDAC
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	movs r0, #4
	str r0, [sp, #8]
	movs r0, #0xb0
	b _0804C2D0
	.align 2, 0
_0804C2A8: .4byte 0x085CCDAC
_0804C2AC:
	movs r1, #8
	ldrsh r0, [r6, r1]
	lsls r0, r0, #0xc
	ldrh r2, [r6, #0xa]
	orrs r0, r2
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, _0804C2E8 @ =0x085CCDAC
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	movs r0, #4
	str r0, [sp, #8]
	movs r0, #0x80
_0804C2D0:
	movs r1, #0x68
	movs r3, #2
	bl sub_805B9E0
	str r0, [r6, #0x18]
_0804C2DA:
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804C2E8: .4byte 0x085CCDAC

	thumb_func_start sub_804C2EC
sub_804C2EC: @ 0x0804C2EC
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0xe
	ldrsh r1, [r4, r0]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0804C310
	ldr r0, [r4, #0x14]
	cmp r0, #0
	beq _0804C306
	bl Proc_End
_0804C306:
	ldr r0, [r4, #0x18]
	cmp r0, #0
	beq _0804C310
	bl Proc_End
_0804C310:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_804C318
sub_804C318: @ 0x0804C318
	push {r4, r5, lr}
	ldr r4, [sp, #0xc]
	ldr r5, [r0, #0x14]
	strh r1, [r5, #0x32]
	strh r2, [r5, #0x3a]
	ldr r5, [r0, #0x18]
	strh r3, [r5, #0x32]
	strh r4, [r5, #0x3a]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_804C330
sub_804C330: @ 0x0804C330
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r7, r0, #0
	movs r4, #0
	mov sl, r4
	ldr r0, _0804C374 @ =0x085CBDB0
	movs r2, #0xc
	ldrsh r1, [r7, r2]
	lsls r2, r1, #3
	adds r2, r2, r0
	ldr r2, [r2]
	str r2, [sp, #0x10]
	lsls r1, r1, #1
	adds r1, #1
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r1, [r1]
	str r1, [sp, #0x14]
	movs r0, #0
	bl sub_8047C48
	movs r1, #0xc
	ldrsh r0, [r7, r1]
	cmp r0, #4
	bhi _0804C3C4
	lsls r0, r0, #2
	ldr r1, _0804C378 @ =_0804C37C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804C374: .4byte 0x085CBDB0
_0804C378: .4byte _0804C37C
_0804C37C: @ jump table
	.4byte _0804C390 @ case 0
	.4byte _0804C398 @ case 1
	.4byte _0804C3B0 @ case 2
	.4byte _0804C3C4 @ case 3
	.4byte _0804C390 @ case 4
_0804C390:
	movs r4, #0x21
	movs r2, #0x30
	mov sl, r2
	b _0804C3E4
_0804C398:
	movs r4, #0x1d
	movs r0, #0x30
	mov sl, r0
	ldr r0, _0804C3AC @ =0x0201773C
	ldr r0, [r0]
	movs r5, #4
	rsbs r5, r5, #0
_0804C3A6:
	cmp r0, #1
	bne _0804C3E6
	b _0804C3E4
	.align 2, 0
_0804C3AC: .4byte 0x0201773C
_0804C3B0:
	movs r4, #3
	movs r1, #0x30
	mov sl, r1
	ldr r0, _0804C3C0 @ =0x0201773C
	ldr r0, [r0]
	movs r5, #0x1e
	rsbs r5, r5, #0
	b _0804C3A6
	.align 2, 0
_0804C3C0: .4byte 0x0201773C
_0804C3C4:
	movs r2, #0
	ldrsh r0, [r7, r2]
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, r1
	beq _0804C3D6
	movs r4, #0x27
	movs r0, #3
	mov sl, r0
_0804C3D6:
	movs r2, #6
	ldrsh r0, [r7, r2]
	cmp r0, r1
	beq _0804C3E4
	movs r4, #3
	movs r0, #0x2a
	mov sl, r0
_0804C3E4:
	movs r5, #0
_0804C3E6:
	movs r1, #1
	rsbs r1, r1, #0
	mov sb, r1
	lsls r2, r4, #1
	ldr r4, _0804C46C @ =0x0201CF70
	adds r2, r2, r4
	movs r0, #0xf
	mov r8, r0
	str r0, [sp]
	movs r6, #5
	str r6, [sp, #4]
	movs r1, #2
	ldrsh r0, [r7, r1]
	str r0, [sp, #8]
	movs r1, #4
	ldrsh r0, [r7, r1]
	str r0, [sp, #0xc]
	ldr r0, [sp, #0x10]
	mov r1, sb
	movs r3, #0x42
	bl sub_805B20C
	mov r0, sl
	lsls r2, r0, #1
	adds r2, r2, r4
	mov r1, r8
	str r1, [sp]
	str r6, [sp, #4]
	movs r1, #8
	ldrsh r0, [r7, r1]
	str r0, [sp, #8]
	movs r1, #0xa
	ldrsh r0, [r7, r1]
	str r0, [sp, #0xc]
	ldr r0, [sp, #0x14]
	mov r1, sb
	movs r3, #0x42
	bl sub_805B20C
	lsls r0, r5, #1
	adds r4, r4, r0
	ldr r2, _0804C470 @ =0xFFFFFA96
	adds r4, r4, r2
	ldr r2, _0804C474 @ =gBg2Tm
	movs r0, #0x20
	str r0, [sp]
	movs r0, #0x14
	str r0, [sp, #4]
	mov r0, sb
	str r0, [sp, #8]
	str r0, [sp, #0xc]
	adds r0, r4, #0
	movs r1, #0x42
	movs r3, #0x20
	bl sub_805B20C
	movs r0, #4
	bl EnableBgSync
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804C46C: .4byte 0x0201CF70
_0804C470: .4byte 0xFFFFFA96
_0804C474: .4byte gBg2Tm

	thumb_func_start sub_804C478
sub_804C478: @ 0x0804C478
	push {lr}
	sub sp, #0x10
	lsls r1, r1, #0x10
	lsrs r3, r1, #0x10
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #4
	bhi _0804C4C0
	lsls r0, r0, #2
	ldr r1, _0804C494 @ =_0804C498
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0804C494: .4byte _0804C498
_0804C498: @ jump table
	.4byte _0804C4AC @ case 0
	.4byte _0804C4B6 @ case 1
	.4byte _0804C4C0 @ case 2
	.4byte _0804C4C0 @ case 3
	.4byte _0804C4AC @ case 4
_0804C4AC:
	movs r2, #0x30
	cmp r3, #0
	bne _0804C4C8
	movs r2, #0x21
	b _0804C4C8
_0804C4B6:
	movs r2, #0x30
	cmp r3, #0
	bne _0804C4C8
	movs r2, #0x1d
	b _0804C4C8
_0804C4C0:
	movs r2, #0x30
	cmp r3, #0
	bne _0804C4C8
	movs r2, #3
_0804C4C8:
	ldr r0, _0804C4EC @ =0x081122DA
	movs r1, #1
	rsbs r1, r1, #0
	lsls r2, r2, #1
	ldr r3, _0804C4F0 @ =0x0201CF70
	adds r2, r2, r3
	movs r3, #0xf
	str r3, [sp]
	movs r3, #5
	str r3, [sp, #4]
	str r1, [sp, #8]
	str r1, [sp, #0xc]
	movs r3, #0x42
	bl sub_805B20C
	add sp, #0x10
	pop {r0}
	bx r0
	.align 2, 0
_0804C4EC: .4byte 0x081122DA
_0804C4F0: .4byte 0x0201CF70

	thumb_func_start sub_804C4F4
sub_804C4F4: @ 0x0804C4F4
	ldr r1, _0804C4FC @ =0x0203CDD4
	str r0, [r1]
	bx lr
	.align 2, 0
_0804C4FC: .4byte 0x0203CDD4

	thumb_func_start sub_804C500
sub_804C500: @ 0x0804C500
	ldr r0, _0804C508 @ =0x0203CDD4
	ldr r0, [r0]
	bx lr
	.align 2, 0
_0804C508: .4byte 0x0203CDD4

	thumb_func_start sub_804C50C
sub_804C50C: @ 0x0804C50C
	push {r4, lr}
	sub sp, #0x10
	asrs r4, r0, #3
	movs r1, #7
	ands r1, r0
	movs r0, #3
	movs r2, #0
	bl SetBgOffset
	lsls r4, r4, #1
	ldr r0, _0804C54C @ =0x0201D424
	adds r4, r4, r0
	ldr r2, _0804C550 @ =gBg3Tm
	movs r0, #0x20
	str r0, [sp]
	movs r0, #0x16
	str r0, [sp, #4]
	subs r0, #0x17
	str r0, [sp, #8]
	str r0, [sp, #0xc]
	adds r0, r4, #0
	movs r1, #0x42
	movs r3, #0x20
	bl sub_805B20C
	movs r0, #8
	bl EnableBgSync
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804C54C: .4byte 0x0201D424
_0804C550: .4byte gBg3Tm

	thumb_func_start sub_804C554
sub_804C554: @ 0x0804C554
	push {lr}
	bl sub_804C500
	cmp r0, #0
	beq _0804C568
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x8f
	bl sub_805BCA8
_0804C568:
	pop {r0}
	bx r0

	thumb_func_start sub_804C56C
sub_804C56C: @ 0x0804C56C
	push {lr}
	bl sub_804C500
	cmp r0, #0
	beq _0804C57C
	movs r0, #0x8e
	bl sub_805BD54
_0804C57C:
	pop {r0}
	bx r0

	thumb_func_start sub_804C580
sub_804C580: @ 0x0804C580
	push {lr}
	bl sub_8042584
	bl BasInit
	bl sub_8044870
	ldr r1, _0804C5A0 @ =0x0201773C
	str r0, [r1]
	bl sub_804C5BC
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0
	.align 2, 0
_0804C5A0: .4byte 0x0201773C

	thumb_func_start sub_804C5A4
sub_804C5A4: @ 0x0804C5A4
	push {lr}
	bl BasInit
	bl sub_804C744
	ldr r0, _0804C5B8 @ =sub_8047D38
	bl SetMainFunc
	pop {r0}
	bx r0
	.align 2, 0
_0804C5B8: .4byte sub_8047D38

	thumb_func_start sub_804C5BC
sub_804C5BC: @ 0x0804C5BC
	push {lr}
	ldr r0, _0804C5CC @ =0x085CBE20
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_0804C5CC: .4byte 0x085CBE20

	thumb_func_start sub_804C5D0
sub_804C5D0: @ 0x0804C5D0
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	mov r8, r0
	movs r0, #0
	bl InitOam
	ldr r1, _0804C644 @ =0x0201773C
	ldr r0, _0804C648 @ =0x0203CCF4
	movs r2, #0
	ldrsh r0, [r0, r2]
	str r0, [r1]
	bl sub_8044390
	bl sub_804B048
	bl sub_80436A4
	bl sub_8044198
	bl sub_80425F0
	ldr r0, _0804C64C @ =0x08118330
	ldr r4, _0804C650 @ =0x020217C8
	adds r1, r4, #0
	movs r2, #0x20
	bl CpuFastSet
	subs r4, #0xc0
	ldr r5, _0804C654 @ =0x020165C0
	movs r6, #0x80
	lsls r6, r6, #1
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl CpuFastSet
	adds r0, r5, #0
	adds r1, r4, #0
	adds r2, r6, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	movs r3, #0x10
	bl sub_805B5C8
	bl EnablePalSync
	mov r0, r8
	bl Proc_Break
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804C644: .4byte 0x0201773C
_0804C648: .4byte 0x0203CCF4
_0804C64C: .4byte 0x08118330
_0804C650: .4byte 0x020217C8
_0804C654: .4byte 0x020165C0

	thumb_func_start sub_804C658
sub_804C658: @ 0x0804C658
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r5, r0, #0
	ldr r0, _0804C6B8 @ =0x08115524
	ldr r1, _0804C6BC @ =0x06008000
	bl LZ77UnCompVram
	ldr r0, _0804C6C0 @ =0x08117B90
	ldr r6, _0804C6C4 @ =0x0201977C
	adds r1, r6, #0
	bl LZ77UnCompWram
	movs r1, #1
	rsbs r1, r1, #0
	ldr r2, _0804C6C8 @ =0x0201D414
	movs r0, #0x2e
	str r0, [sp]
	movs r0, #0x14
	str r0, [sp, #4]
	movs r0, #6
	str r0, [sp, #8]
	movs r4, #0
	str r4, [sp, #0xc]
	adds r0, r6, #0
	movs r3, #0x42
	bl sub_805B20C
	movs r0, #0
	bl sub_804C50C
	movs r0, #8
	bl EnableBgSync
	strh r4, [r5, #0x2c]
	movs r0, #0x10
	strh r0, [r5, #0x2e]
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x8e
	bl sub_805BCA8
	adds r0, r5, #0
	bl Proc_Break
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804C6B8: .4byte 0x08115524
_0804C6BC: .4byte 0x06008000
_0804C6C0: .4byte 0x08117B90
_0804C6C4: .4byte 0x0201977C
_0804C6C8: .4byte 0x0201D414

	thumb_func_start sub_804C6CC
sub_804C6CC: @ 0x0804C6CC
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r1, #0x2e
	ldrsh r0, [r6, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r5, r0, #0
	ldr r0, _0804C728 @ =0x020165C0
	ldr r4, _0804C72C @ =gPal
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r4, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	adds r3, r5, #0
	bl sub_805B5C8
	bl EnablePalSync
	ldrh r1, [r6, #0x2c]
	adds r1, #1
	strh r1, [r6, #0x2c]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r2, #0x2e
	ldrsh r0, [r6, r2]
	adds r0, #1
	cmp r1, r0
	bne _0804C720
	adds r0, r6, #0
	bl Proc_Break
_0804C720:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804C728: .4byte 0x020165C0
_0804C72C: .4byte gPal

	thumb_func_start sub_804C730
sub_804C730: @ 0x0804C730
	push {r4, lr}
	adds r4, r0, #0
	bl sub_804C818
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_804C744
sub_804C744: @ 0x0804C744
	push {lr}
	ldr r0, _0804C758 @ =0x085CBE50
	movs r1, #3
	bl SpawnProc
	bl sub_804C84C
	pop {r0}
	bx r0
	.align 2, 0
_0804C758: .4byte 0x085CBE50

	thumb_func_start sub_804C75C
sub_804C75C: @ 0x0804C75C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0804C780 @ =gPal
	ldr r1, _0804C784 @ =0x020165C0
	movs r2, #0x80
	lsls r2, r2, #1
	bl CpuFastSet
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x10
	strh r0, [r4, #0x2e]
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804C780: .4byte gPal
_0804C784: .4byte 0x020165C0

	thumb_func_start sub_804C788
sub_804C788: @ 0x0804C788
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r1, #0x2e
	ldrsh r0, [r6, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r5, r0, #0
	ldr r0, _0804C7E4 @ =0x020165C0
	ldr r4, _0804C7E8 @ =gPal
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r4, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	adds r3, r5, #0
	bl sub_805B5C8
	bl EnablePalSync
	ldrh r1, [r6, #0x2c]
	adds r1, #1
	strh r1, [r6, #0x2c]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r2, #0x2e
	ldrsh r0, [r6, r2]
	adds r0, #1
	cmp r1, r0
	bne _0804C7DC
	adds r0, r6, #0
	bl Proc_Break
_0804C7DC:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804C7E4: .4byte 0x020165C0
_0804C7E8: .4byte gPal

	thumb_func_start sub_804C7EC
sub_804C7EC: @ 0x0804C7EC
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80425B0
	bl sub_80438B4
	ldr r0, _0804C810 @ =OnMain
	bl SetMainFunc
	ldr r0, _0804C814 @ =OnVBlank
	bl SetOnVBlank
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804C810: .4byte OnMain
_0804C814: .4byte OnVBlank

	thumb_func_start sub_804C818
sub_804C818: @ 0x0804C818
	push {r4, lr}
	ldr r4, _0804C83C @ =0x0201E144
	ldr r0, _0804C840 @ =0x085CBE78
	movs r1, #3
	bl SpawnProc
	str r0, [r4]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0804C844 @ =0x08112370
	str r1, [r0, #0x48]
	ldr r1, _0804C848 @ =0x085CBE90
	str r1, [r0, #0x4c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804C83C: .4byte 0x0201E144
_0804C840: .4byte 0x085CBE78
_0804C844: .4byte 0x08112370
_0804C848: .4byte 0x085CBE90

	thumb_func_start sub_804C84C
sub_804C84C: @ 0x0804C84C
	push {lr}
	ldr r0, _0804C85C @ =0x0201E144
	ldr r0, [r0]
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_0804C85C: .4byte 0x0201E144

	thumb_func_start sub_804C860
sub_804C860: @ 0x0804C860
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	blt _0804C88C
	ldr r1, [r4, #0x4c]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r1, _0804C894 @ =0x020217C8
	movs r2, #0x20
	bl CpuFastSet
	bl EnablePalSync
_0804C88C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804C894: .4byte 0x020217C8

	thumb_func_start sub_804C898
sub_804C898: @ 0x0804C898
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _0804C8C4 @ =0x0203CD0C
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	ldr r1, _0804C8C8 @ =0x085D0DA0
	movs r2, #0
	ldrsh r0, [r0, r2]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r2, [r0]
	ldr r1, _0804C8CC @ =0x0201E7A4
	movs r0, #0
	str r0, [r1]
	adds r0, r5, #0
	bl _call_via_r2
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804C8C4: .4byte 0x0203CD0C
_0804C8C8: .4byte 0x085D0DA0
_0804C8CC: .4byte 0x0201E7A4

	thumb_func_start nullsub_22
nullsub_22: @ 0x0804C8D0
	bx lr
	.align 2, 0

	thumb_func_start sub_804C8D4
sub_804C8D4: @ 0x0804C8D4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r7, [sp, #0x18]
	ldr r1, _0804C910 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804C914 @ =0x085D0E94
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	str r5, [r0, #0x44]
	str r6, [r0, #0x48]
	mov r1, r8
	str r1, [r0, #0x4c]
	str r7, [r0, #0x50]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0804C910: .4byte 0x02017744
_0804C914: .4byte 0x085D0E94

	thumb_func_start sub_804C918
sub_804C918: @ 0x0804C918
	ldr r1, _0804C924 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_0804C924: .4byte 0x02017744

	thumb_func_start sub_804C928
sub_804C928: @ 0x0804C928
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r2, r0, #0
	ldr r0, _0804C9A8 @ =0x0201E3D8
	ldr r0, [r0]
	ldr r4, _0804C9AC @ =0x0201E3E4
	cmp r0, #0
	bne _0804C940
	ldr r4, _0804C9B0 @ =0x0201E524
_0804C940:
	ldrh r0, [r2, #0x2e]
	lsls r1, r0, #0x18
	lsrs r3, r1, #0x18
	ldr r1, [r2, #0x50]
	adds r0, r0, r1
	strh r0, [r2, #0x2e]
	movs r1, #0
	ldr r0, [r2, #0x44]
	mov r8, r0
	ldr r6, [r2, #0x48]
	mov sl, r6
	ldr r7, _0804C9B4 @ =0x08605A94
	mov ip, r7
	ldr r5, [r2, #0x4c]
	ldr r0, _0804C9B8 @ =gDispIo
	mov sb, r0
_0804C960:
	mov r6, sl
	adds r0, r3, r6
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	lsls r0, r3, #1
	add r0, ip
	movs r7, #0
	ldrsh r0, [r0, r7]
	muls r0, r5, r0
	lsls r0, r0, #8
	lsrs r0, r0, #0x10
	mov r6, sb
	ldrh r6, [r6, #0x20]
	adds r0, r6, r0
	strh r0, [r4]
	adds r4, #2
	adds r1, #1
	cmp r1, #0x77
	bls _0804C960
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, r8
	bne _0804C99A
	adds r0, r2, #0
	bl Proc_End
_0804C99A:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804C9A8: .4byte 0x0201E3D8
_0804C9AC: .4byte 0x0201E3E4
_0804C9B0: .4byte 0x0201E524
_0804C9B4: .4byte 0x08605A94
_0804C9B8: .4byte gDispIo

	thumb_func_start sub_804C9BC
sub_804C9BC: @ 0x0804C9BC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0804C9E4 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804C9E8 @ =0x085D0EB4
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	str r5, [r0, #0x44]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804C9E4: .4byte 0x02017744
_0804C9E8: .4byte 0x085D0EB4

	thumb_func_start sub_804C9EC
sub_804C9EC: @ 0x0804C9EC
	ldr r1, _0804C9F8 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_0804C9F8: .4byte 0x02017744

	thumb_func_start sub_804C9FC
sub_804C9FC: @ 0x0804C9FC
	push {r4, r5, lr}
	adds r3, r0, #0
	ldr r0, _0804CA38 @ =0x0201E3D8
	ldr r0, [r0]
	ldr r1, _0804CA3C @ =0x0201E3E4
	cmp r0, #0
	bne _0804CA0C
	ldr r1, _0804CA40 @ =0x0201E524
_0804CA0C:
	movs r2, #0
	ldr r5, [r3, #0x44]
	ldr r4, _0804CA44 @ =gDispIo
_0804CA12:
	ldrh r0, [r4, #0x20]
	strh r0, [r1]
	adds r1, #2
	adds r2, #1
	cmp r2, #0x77
	bls _0804CA12
	ldrh r0, [r3, #0x2c]
	adds r0, #1
	strh r0, [r3, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, r5
	bne _0804CA32
	adds r0, r3, #0
	bl Proc_End
_0804CA32:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804CA38: .4byte 0x0201E3D8
_0804CA3C: .4byte 0x0201E3E4
_0804CA40: .4byte 0x0201E524
_0804CA44: .4byte gDispIo

	thumb_func_start sub_804CA48
sub_804CA48: @ 0x0804CA48
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov r8, r0
	adds r4, r1, #0
	adds r5, r2, #0
	adds r6, r3, #0
	ldr r1, _0804CA90 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804CA94 @ =0x085D0ED4
	movs r1, #3
	bl SpawnProc
	adds r7, r0, #0
	mov r0, r8
	str r0, [r7, #0x5c]
	movs r1, #0
	mov sb, r1
	movs r0, #0
	strh r0, [r7, #0x2c]
	strh r0, [r7, #0x2e]
	str r4, [r7, #0x44]
	str r5, [r7, #0x54]
	str r6, [r7, #0x58]
	mov r0, r8
	bl sub_804B80C
	bl sub_804B6C4
	cmp r0, #0
	bne _0804CA9C
	ldr r0, _0804CA98 @ =0x0000FFB8
	b _0804CA9E
	.align 2, 0
_0804CA90: .4byte 0x02017744
_0804CA94: .4byte 0x085D0ED4
_0804CA98: .4byte 0x0000FFB8
_0804CA9C:
	ldr r0, _0804CABC @ =0x0000FFF8
_0804CA9E:
	strh r0, [r7, #0x32]
	ldr r0, _0804CAC0 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0804CACA
	mov r0, r8
	bl sub_804B6C4
	cmp r0, #0
	bne _0804CAC4
	ldrh r0, [r7, #0x32]
	adds r0, #0x18
	b _0804CAC8
	.align 2, 0
_0804CABC: .4byte 0x0000FFF8
_0804CAC0: .4byte 0x0203CD14
_0804CAC4:
	ldrh r0, [r7, #0x32]
	subs r0, #0x18
_0804CAC8:
	strh r0, [r7, #0x32]
_0804CACA:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_804CAD8
sub_804CAD8: @ 0x0804CAD8
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r0, _0804CB20 @ =0x0201E14C
	ldr r0, [r0]
	ldr r5, _0804CB24 @ =0x0201E158
	cmp r0, #0
	bne _0804CAE8
	ldr r5, _0804CB28 @ =0x0201E298
_0804CAE8:
	ldr r1, [r4, #0x54]
	movs r2, #0x2e
	ldrsh r0, [r4, r2]
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r2, [r0]
	ldr r1, [r4, #0x58]
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r3, [r0]
	ldr r0, _0804CB2C @ =0x0000FFFF
	cmp r2, r0
	beq _0804CB54
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	movs r2, #0
	ldr r6, [r4, #0x44]
	ldr r7, _0804CB30 @ =0x00007FFF
	mov ip, r7
_0804CB10:
	ldrh r1, [r3]
	movs r7, #0
	ldrsh r0, [r3, r7]
	cmp r0, ip
	bne _0804CB34
	movs r0, #0
	b _0804CB46
	.align 2, 0
_0804CB20: .4byte 0x0201E14C
_0804CB24: .4byte 0x0201E158
_0804CB28: .4byte 0x0201E298
_0804CB2C: .4byte 0x0000FFFF
_0804CB30: .4byte 0x00007FFF
_0804CB34:
	ldrh r0, [r4, #0x32]
	adds r1, r1, r0
	ldrh r7, [r3, #2]
	adds r0, r0, r7
	lsls r1, r1, #0x10
	asrs r1, r1, #8
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	orrs r0, r1
_0804CB46:
	strh r0, [r5]
	adds r3, #4
	adds r5, #2
	adds r2, #1
	cmp r2, #0x77
	bls _0804CB10
	b _0804CB64
_0804CB54:
	movs r2, #0
	ldr r6, [r4, #0x44]
	movs r0, #0
_0804CB5A:
	strh r0, [r5]
	adds r5, #2
	adds r2, #1
	cmp r2, #0x77
	bls _0804CB5A
_0804CB64:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	cmp r0, r6
	bne _0804CB80
	ldr r1, _0804CB88 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0804CB80:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804CB88: .4byte 0x02017744

	thumb_func_start sub_804CB8C
sub_804CB8C: @ 0x0804CB8C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	mov sb, r1
	adds r5, r3, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	ldr r1, _0804CC34 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r1, _0804CC38 @ =0x0201E158
	movs r0, #0
	adds r7, r1, #0
	ldr r4, _0804CC3C @ =0x0201E298
	ldr r3, _0804CC40 @ =0x0201E3E4
	ldr r6, _0804CC44 @ =0x0201E14C
	mov ip, r6
	ldr r6, _0804CC48 @ =0x0201E3D8
	mov sl, r6
_0804CBBA:
	strh r2, [r1]
	adds r1, #2
	adds r0, #1
	cmp r0, #0x9f
	bls _0804CBBA
	adds r1, r4, #0
	movs r0, #0
_0804CBC8:
	strh r2, [r1]
	adds r1, #2
	adds r0, #1
	cmp r0, #0x9f
	bls _0804CBC8
	adds r1, r3, #0
	movs r0, #0
_0804CBD6:
	strh r2, [r1]
	adds r1, #2
	adds r0, #1
	cmp r0, #0x9f
	bls _0804CBD6
	ldr r1, _0804CC4C @ =0x0201E524
	movs r0, #0
_0804CBE4:
	strh r2, [r1]
	adds r1, #2
	adds r0, #1
	cmp r0, #0x9f
	bls _0804CBE4
	movs r4, #0
	mov r0, ip
	str r4, [r0]
	mov r1, sl
	str r4, [r1]
	ldr r6, _0804CC50 @ =0x0201E150
	str r7, [r6]
	ldr r0, _0804CC54 @ =0x0201E3DC
	str r3, [r0]
	ldr r1, _0804CC58 @ =0x0201E154
	str r7, [r1]
	ldr r6, _0804CC5C @ =0x0201E3E0
	str r3, [r6]
	adds r0, r5, #0
	bl SetOnHBlankA
	ldr r1, _0804CC60 @ =0x0201E7A4
	movs r0, #1
	str r0, [r1]
	ldr r0, _0804CC64 @ =0x085D0EEC
	movs r1, #0
	bl SpawnProc
	mov r1, r8
	str r1, [r0, #0x5c]
	strh r4, [r0, #0x2c]
	mov r6, sb
	str r6, [r0, #0x44]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804CC34: .4byte 0x02017744
_0804CC38: .4byte 0x0201E158
_0804CC3C: .4byte 0x0201E298
_0804CC40: .4byte 0x0201E3E4
_0804CC44: .4byte 0x0201E14C
_0804CC48: .4byte 0x0201E3D8
_0804CC4C: .4byte 0x0201E524
_0804CC50: .4byte 0x0201E150
_0804CC54: .4byte 0x0201E3DC
_0804CC58: .4byte 0x0201E154
_0804CC5C: .4byte 0x0201E3E0
_0804CC60: .4byte 0x0201E7A4
_0804CC64: .4byte 0x085D0EEC

	thumb_func_start sub_804CC68
sub_804CC68: @ 0x0804CC68
	push {lr}
	adds r3, r2, #0
	movs r2, #0
	bl sub_804CB8C
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_804CC78
sub_804CC78: @ 0x0804CC78
	push {lr}
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_804CC84
sub_804CC84: @ 0x0804CC84
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0804CCA8 @ =gBmSt
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0804CD04
	ldr r1, _0804CCAC @ =0x0201E14C
	ldr r0, [r1]
	cmp r0, #1
	bne _0804CCB8
	movs r0, #0
	str r0, [r1]
	ldr r1, _0804CCB0 @ =0x0201E150
	ldr r0, _0804CCB4 @ =0x0201E158
	b _0804CCC0
	.align 2, 0
_0804CCA8: .4byte gBmSt
_0804CCAC: .4byte 0x0201E14C
_0804CCB0: .4byte 0x0201E150
_0804CCB4: .4byte 0x0201E158
_0804CCB8:
	movs r0, #1
	str r0, [r1]
	ldr r1, _0804CCD8 @ =0x0201E150
	ldr r0, _0804CCDC @ =0x0201E298
_0804CCC0:
	str r0, [r1]
	adds r3, r1, #0
	ldr r1, _0804CCE0 @ =0x0201E3D8
	ldr r0, [r1]
	cmp r0, #1
	bne _0804CCEC
	movs r0, #0
	str r0, [r1]
	ldr r1, _0804CCE4 @ =0x0201E3DC
	ldr r0, _0804CCE8 @ =0x0201E3E4
	b _0804CCF4
	.align 2, 0
_0804CCD8: .4byte 0x0201E150
_0804CCDC: .4byte 0x0201E298
_0804CCE0: .4byte 0x0201E3D8
_0804CCE4: .4byte 0x0201E3DC
_0804CCE8: .4byte 0x0201E3E4
_0804CCEC:
	movs r0, #1
	str r0, [r1]
	ldr r1, _0804CD34 @ =0x0201E3DC
	ldr r0, _0804CD38 @ =0x0201E524
_0804CCF4:
	str r0, [r1]
	adds r2, r1, #0
	ldr r1, _0804CD3C @ =0x0201E154
	ldr r0, [r3]
	str r0, [r1]
	ldr r1, _0804CD40 @ =0x0201E3E0
	ldr r0, [r2]
	str r0, [r1]
_0804CD04:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r4, #0x44]
	cmp r0, r1
	bne _0804CD2E
	ldr r1, _0804CD44 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	movs r0, #0
	bl SetOnHBlankA
	ldr r1, _0804CD48 @ =0x0201E7A4
	movs r0, #0
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0804CD2E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804CD34: .4byte 0x0201E3DC
_0804CD38: .4byte 0x0201E524
_0804CD3C: .4byte 0x0201E154
_0804CD40: .4byte 0x0201E3E0
_0804CD44: .4byte 0x02017744
_0804CD48: .4byte 0x0201E7A4

	thumb_func_start sub_804CD4C
sub_804CD4C: @ 0x0804CD4C
	ldr r0, _0804CD78 @ =0x04000004
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0804CD74
	ldr r3, _0804CD7C @ =0x04000040
	ldr r2, _0804CD80 @ =0x0201E154
	ldr r0, [r2]
	ldrh r1, [r0]
	strh r1, [r3]
	adds r0, #2
	str r0, [r2]
	subs r3, #0x2c
	ldr r2, _0804CD84 @ =0x0201E3E0
	ldr r0, [r2]
	ldrh r1, [r0]
	strh r1, [r3]
	adds r0, #2
	str r0, [r2]
_0804CD74:
	bx lr
	.align 2, 0
_0804CD78: .4byte 0x04000004
_0804CD7C: .4byte 0x04000040
_0804CD80: .4byte 0x0201E154
_0804CD84: .4byte 0x0201E3E0

	thumb_func_start sub_804CD88
sub_804CD88: @ 0x0804CD88
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r7, [sp, #0x18]
	ldr r1, _0804CDC8 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804CDCC @ =0x085D0F0C
	movs r1, #3
	bl SpawnProc
	str r5, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r4, [r0, #0x2e]
	adds r4, r4, r6
	strh r4, [r0, #0x30]
	mov r1, r8
	str r1, [r0, #0x44]
	str r7, [r0, #0x48]
	ldr r1, [sp, #0x1c]
	str r1, [r0, #0x4c]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804CDC8: .4byte 0x02017744
_0804CDCC: .4byte 0x085D0F0C

	thumb_func_start sub_804CDD0
sub_804CDD0: @ 0x0804CDD0
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	movs r7, #0
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r5, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	blt _0804CEC4
	ldr r1, [r5, #0x44]
	ldr r2, [r5, #0x48]
	movs r6, #0x2c
	ldrsh r3, [r5, r6]
	movs r0, #0x2e
	ldrsh r4, [r5, r0]
	subs r3, r3, r4
	movs r6, #0x30
	ldrsh r0, [r5, r6]
	subs r0, r0, r4
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	adds r6, r0, #0
	ldr r0, [r5, #0x4c]
	cmp r0, #1
	beq _0804CE44
	cmp r0, #1
	bgt _0804CE16
	cmp r0, #0
	beq _0804CE1C
	b _0804CEAA
_0804CE16:
	cmp r0, #2
	beq _0804CE6C
	b _0804CEAA
_0804CE1C:
	ldr r3, _0804CE40 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r6, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	b _0804CEA6
	.align 2, 0
_0804CE40: .4byte gDispIo
_0804CE44:
	ldr r3, _0804CE68 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x80
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r7, [r0]
	adds r0, #1
	strb r7, [r0]
	adds r0, #1
	strb r6, [r0]
	b _0804CEAA
	.align 2, 0
_0804CE68: .4byte gDispIo
_0804CE6C:
	movs r2, #0x2c
	ldrsh r3, [r5, r2]
	movs r0, #0x2e
	ldrsh r1, [r5, r0]
	subs r3, r3, r1
	movs r2, #0x30
	ldrsh r0, [r5, r2]
	subs r0, r0, r1
	str r0, [sp]
	movs r0, #0
	movs r1, #8
	movs r2, #0x10
	bl Interpolate
	ldr r4, _0804CECC @ =gDispIo
	adds r3, r4, #0
	adds r3, #0x3c
	movs r1, #0x3f
	ldrb r2, [r3]
	ands r1, r2
	movs r2, #0x40
	orrs r1, r2
	strb r1, [r3]
	adds r1, r4, #0
	adds r1, #0x44
	strb r6, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r0, r4, #0
_0804CEA6:
	adds r0, #0x46
	strb r7, [r0]
_0804CEAA:
	movs r6, #0x2c
	ldrsh r1, [r5, r6]
	movs r2, #0x30
	ldrsh r0, [r5, r2]
	cmp r1, r0
	blt _0804CEC4
	ldr r1, _0804CED0 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
_0804CEC4:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804CECC: .4byte gDispIo
_0804CED0: .4byte 0x02017744

	thumb_func_start sub_804CED4
sub_804CED4: @ 0x0804CED4
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, sb
	mov r4, r8
	push {r4, r5, r6}
	mov r8, r0
	mov sb, r1
	mov sl, r2
	adds r5, r3, #0
	ldr r6, [sp, #0x1c]
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	lsls r6, r6, #0x10
	lsrs r6, r6, #0x10
	ldr r1, _0804CF2C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804CF30 @ =0x085D0F24
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	mov r0, r8
	str r0, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	strh r0, [r4, #0x2e]
	mov r0, sb
	str r0, [r4, #0x44]
	mov r0, sl
	str r0, [r4, #0x54]
	mov r0, r8
	bl sub_804B80C
	strh r5, [r4, #0x32]
	strh r6, [r4, #0x3a]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804CF2C: .4byte 0x02017744
_0804CF30: .4byte 0x085D0F24

	thumb_func_start sub_804CF34
sub_804CF34: @ 0x0804CF34
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r5, r0, #0
	ldr r0, _0804CFB4 @ =0x0201E14C
	ldr r0, [r0]
	ldr r1, _0804CFB8 @ =0x0201E158
	mov r8, r1
	cmp r0, #0
	bne _0804CF4E
	ldr r2, _0804CFBC @ =0x0201E298
	mov r8, r2
_0804CF4E:
	ldr r4, [r5, #0x54]
	movs r7, #0x2e
	ldrsh r0, [r5, r7]
	lsls r0, r0, #1
	adds r0, r0, r4
	ldrh r7, [r0]
	adds r0, r7, #0
	bl sub_8013F7C
	adds r6, r0, #0
	movs r1, #0x2e
	ldrsh r0, [r5, r1]
	lsls r0, r0, #1
	adds r0, r0, r4
	ldr r1, _0804CFC0 @ =0x0000FFFF
	ldrh r0, [r0, #2]
	cmp r0, r1
	beq _0804CF78
	ldrh r0, [r5, #0x2e]
	adds r0, #1
	strh r0, [r5, #0x2e]
_0804CF78:
	ldrh r1, [r5, #0x3a]
	subs r0, r1, r7
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r0, #0
	bge _0804CF86
	movs r2, #0
_0804CF86:
	adds r0, r7, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xa0
	ble _0804CF94
	movs r1, #0xa0
_0804CF94:
	movs r3, #0
	lsls r0, r2, #0x10
	ldr r2, [r5, #0x44]
	mov ip, r2
	asrs r0, r0, #0x10
	mov sb, r0
	lsls r0, r1, #0x10
	asrs r4, r0, #0x10
_0804CFA4:
	cmp sb, r3
	bhi _0804CFAC
	cmp r4, r3
	bhs _0804CFC4
_0804CFAC:
	movs r0, #0
	mov r7, r8
	strh r0, [r7]
	b _0804CFF4
	.align 2, 0
_0804CFB4: .4byte 0x0201E14C
_0804CFB8: .4byte 0x0201E158
_0804CFBC: .4byte 0x0201E298
_0804CFC0: .4byte 0x0000FFFF
_0804CFC4:
	ldrh r2, [r5, #0x32]
	ldrh r1, [r6]
	adds r0, r2, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	cmp r0, #0
	bge _0804CFD4
	movs r1, #0
_0804CFD4:
	ldrh r7, [r6, #2]
	adds r0, r2, r7
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xf0
	ble _0804CFE4
	movs r2, #0xf0
_0804CFE4:
	lsls r1, r1, #0x10
	asrs r1, r1, #8
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	orrs r0, r1
	mov r1, r8
	strh r0, [r1]
	adds r6, #4
_0804CFF4:
	movs r2, #2
	add r8, r2
	adds r3, #1
	cmp r3, #0x9f
	bls _0804CFA4
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	movs r3, #0
	strh r0, [r5, #0x2c]
	movs r4, #0x2c
	ldrsh r0, [r5, r4]
	cmp r0, ip
	bne _0804D03A
	ldr r1, _0804D048 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	ldr r2, _0804D04C @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r7, [r1]
	ands r0, r7
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x45
	strb r3, [r0]
	adds r0, #1
	strb r3, [r0]
	adds r0, r5, #0
	bl Proc_Break
_0804D03A:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804D048: .4byte 0x02017744
_0804D04C: .4byte gDispIo

	thumb_func_start sub_804D050
sub_804D050: @ 0x0804D050
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r1, _0804D080 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804D084 @ =0x085D0F3C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #6
	movs r1, #0
	bl sub_8045F48
	str r0, [r4, #0x60]
	movs r0, #0
	strh r0, [r4, #0x2c]
	strh r6, [r4, #0x2e]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804D080: .4byte 0x02017744
_0804D084: .4byte 0x085D0F3C

	thumb_func_start sub_804D088
sub_804D088: @ 0x0804D088
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	ldr r5, _0804D120 @ =0x02017758
	ldrh r1, [r5]
	ldrh r2, [r5, #2]
	movs r0, #2
	bl SetBgOffset
	ldr r4, _0804D124 @ =0x02000030
	ldrh r0, [r5]
	ldrh r2, [r4]
	adds r1, r0, r2
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldrh r3, [r5, #2]
	ldrh r0, [r4, #2]
	adds r2, r3, r0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0
	bl SetBgOffset
	ldrh r1, [r5]
	ldrh r2, [r4]
	adds r0, r1, r2
	rsbs r0, r0, #0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldrh r3, [r5, #2]
	ldrh r2, [r4, #2]
	adds r1, r3, r2
	rsbs r1, r1, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_804392C
	ldrh r3, [r5]
	ldrh r1, [r4]
	adds r0, r3, r1
	rsbs r0, r0, #0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r2, [r5, #2]
	ldrh r4, [r4, #2]
	adds r1, r2, r4
	rsbs r1, r1, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	bl sub_8044230
	bl sub_805894C
	cmp r0, #0
	beq _0804D10C
	ldrh r1, [r5]
	ldrh r2, [r5, #2]
	adds r2, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #3
	bl SetBgOffset
_0804D10C:
	bl sub_805894C
	cmp r0, #0
	beq _0804D12C
	ldr r3, _0804D128 @ =0x02000020
	ldrh r4, [r3]
	ldrh r1, [r5]
	subs r0, r4, r1
	b _0804D134
	.align 2, 0
_0804D120: .4byte 0x02017758
_0804D124: .4byte 0x02000030
_0804D128: .4byte 0x02000020
_0804D12C:
	ldr r3, _0804D244 @ =0x02000020
	ldrh r1, [r3]
	ldrh r2, [r5]
	adds r0, r1, r2
_0804D134:
	ldr r2, _0804D248 @ =0x0201E12C
	ldr r1, [r2]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	ldr r1, _0804D24C @ =0x02000024
	ldrh r4, [r1]
	ldrh r5, [r5, #2]
	subs r0, r4, r5
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	mov sb, r3
	mov sl, r1
	ldr r2, _0804D250 @ =0x02017758
	mov r1, sb
	ldrh r1, [r1, #2]
	ldrh r3, [r2]
	adds r0, r1, r3
	ldr r4, _0804D248 @ =0x0201E12C
	ldr r1, [r4]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	mov r1, sl
	ldrh r1, [r1, #2]
	ldrh r2, [r2, #2]
	subs r0, r1, r2
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	lsls r1, r7, #0x10
	asrs r1, r1, #0x10
	lsls r2, r6, #0x10
	asrs r2, r2, #0x10
	movs r0, #0
	bl sub_8047C88
	lsls r1, r5, #0x10
	asrs r1, r1, #0x10
	lsls r2, r4, #0x10
	asrs r2, r2, #0x10
	movs r0, #1
	bl sub_8047C88
	mov r2, r8
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	ldrh r3, [r2, #0x2e]
	lsls r1, r3, #0x10
	cmp r0, r1
	ble _0804D236
	ldr r1, _0804D254 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r4, _0804D258 @ =0x02000030
	ldrh r1, [r4]
	ldrh r2, [r4, #2]
	movs r0, #0
	bl SetBgOffset
	ldrh r1, [r4]
	rsbs r0, r1, #0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldrh r2, [r4, #2]
	rsbs r1, r2, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_804392C
	ldrh r3, [r4]
	rsbs r0, r3, #0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r4, [r4, #2]
	rsbs r1, r4, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	bl sub_8044230
	bl sub_805894C
	cmp r0, #0
	beq _0804D1F4
	movs r0, #3
	movs r1, #0
	movs r2, #0x10
	bl SetBgOffset
_0804D1F4:
	ldr r4, _0804D248 @ =0x0201E12C
	ldr r0, [r4]
	mov r2, sb
	ldrh r2, [r2]
	subs r1, r2, r0
	mov r3, sb
	ldrh r3, [r3, #2]
	subs r0, r3, r0
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	mov r0, sl
	ldrh r4, [r0, #2]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r3, #0
	ldrsh r2, [r0, r3]
	movs r0, #0
	bl sub_8047C88
	lsls r1, r5, #0x10
	asrs r1, r1, #0x10
	lsls r2, r4, #0x10
	asrs r2, r2, #0x10
	movs r0, #1
	bl sub_8047C88
	mov r4, r8
	ldr r0, [r4, #0x60]
	bl Proc_End
	mov r0, r8
	bl Proc_Break
_0804D236:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804D244: .4byte 0x02000020
_0804D248: .4byte 0x0201E12C
_0804D24C: .4byte 0x02000024
_0804D250: .4byte 0x02017758
_0804D254: .4byte 0x02017744
_0804D258: .4byte 0x02000030

	thumb_func_start sub_804D25C
sub_804D25C: @ 0x0804D25C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80474B0
	bl sub_80474C8
	ldr r0, _0804D27C @ =0x085D0F54
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804D27C: .4byte 0x085D0F54

	thumb_func_start sub_804D280
sub_804D280: @ 0x0804D280
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x5c]
	bl sub_804B80C
	adds r4, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	movs r6, #0
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0804D2A6
	movs r0, #9
	ldrh r1, [r4, #0x10]
	orrs r0, r1
	strh r0, [r4, #0x10]
	b _0804D2CE
_0804D2A6:
	cmp r0, #0xa
	bne _0804D2CE
	adds r0, r4, #0
	bl sub_804B848
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, r1
	beq _0804D2C4
	movs r0, #2
	ldrh r1, [r4, #0x10]
	orrs r0, r1
	strh r0, [r4, #0x10]
_0804D2C4:
	bl sub_80474BC
	adds r0, r5, #0
	bl Proc_Break
_0804D2CE:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_804D2D4
sub_804D2D4: @ 0x0804D2D4
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_80474C8
	ldr r0, _0804D308 @ =0x085D0F6C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804D308: .4byte 0x085D0F6C

	thumb_func_start sub_804D30C
sub_804D30C: @ 0x0804D30C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x5c]
	bl sub_804B80C
	adds r6, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0804D38A
	ldr r0, [r5, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
	ldr r0, [r5, #0x5c]
	bl sub_804D3A8
	ldrh r0, [r5, #0x2c]
	cmp r0, #1
	bne _0804D38A
	movs r0, #9
	ldrh r1, [r6, #0x10]
	orrs r0, r1
	strh r0, [r6, #0x10]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r6, #0
	bl sub_8047600
	adds r0, r6, #0
	bl sub_805C308
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #2
	beq _0804D37C
	ldr r0, [r5, #0x5c]
	bl sub_804B7B0
	cmp r0, #1
	bne _0804D370
	adds r0, r6, #0
	bl sub_8056B08
	b _0804D37C
_0804D370:
	ldrb r0, [r4]
	cmp r0, #0
	bne _0804D3A0
	ldr r0, [r5, #0x5c]
	bl sub_8056C3C
_0804D37C:
	ldrb r0, [r4]
	cmp r0, #0
	bne _0804D3A0
	adds r0, r6, #0
	bl sub_805C358
	b _0804D3A0
_0804D38A:
	movs r1, #0x2c
	ldrsh r0, [r5, r1]
	cmp r0, #0x46
	beq _0804D3A0
	cmp r0, #0x50
	bne _0804D3A0
	bl sub_80474BC
	adds r0, r5, #0
	bl Proc_Break
_0804D3A0:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_804D3A8
sub_804D3A8: @ 0x0804D3A8
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r1, _0804D3EC @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804D3F0 @ =0x085D0F84
	movs r1, #3
	bl SpawnProc
	adds r6, r0, #0
	str r4, [r6, #0x5c]
	movs r0, #0
	strh r0, [r6, #0x2c]
	ldr r1, _0804D3F4 @ =0x085D4148
	ldr r2, _0804D3F8 @ =0x085D3DB0
	ldr r3, _0804D3FC @ =0x085D41A4
	ldr r0, _0804D400 @ =0x085D3E0C
	str r0, [sp]
	adds r0, r4, #0
	bl sub_80478DC
	adds r5, r0, #0
	str r5, [r6, #0x60]
	adds r0, r4, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _0804D404
	ldrh r0, [r5, #2]
	adds r0, #0x48
	b _0804D408
	.align 2, 0
_0804D3EC: .4byte 0x02017744
_0804D3F0: .4byte 0x085D0F84
_0804D3F4: .4byte 0x085D4148
_0804D3F8: .4byte 0x085D3DB0
_0804D3FC: .4byte 0x085D41A4
_0804D400: .4byte 0x085D3E0C
_0804D404:
	ldrh r0, [r5, #2]
	subs r0, #0x48
_0804D408:
	strh r0, [r5, #2]
	ldr r0, _0804D418 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _0804D41C
	movs r0, #0x23
	b _0804D41E
	.align 2, 0
_0804D418: .4byte 0x0203CD14
_0804D41C:
	movs r0, #0xa
_0804D41E:
	strh r0, [r6, #0x2e]
	ldr r0, [r6, #0x5c]
	ldr r1, [r6, #0x60]
	bl sub_804D590
	str r0, [r6, #0x64]
	ldr r0, _0804D444 @ =0x0811B3E8
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0804D448 @ =0x0811AFE8
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804D444: .4byte 0x0811B3E8
_0804D448: .4byte 0x0811AFE8

	thumb_func_start sub_804D44C
sub_804D44C: @ 0x0804D44C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _0804D49E
	ldr r1, _0804D48C @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	ldr r0, [r4, #0x60]
	bl BasRemove
	ldr r0, _0804D490 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _0804D498
	ldr r0, _0804D494 @ =0x02017750
	movs r1, #1
	str r1, [r0]
	ldr r0, [r4, #0x64]
	bl Proc_End
	adds r0, r4, #0
	bl Proc_End
	b _0804D49E
	.align 2, 0
_0804D48C: .4byte 0x02017744
_0804D490: .4byte 0x0203CD14
_0804D494: .4byte 0x02017750
_0804D498:
	adds r0, r4, #0
	bl Proc_Break
_0804D49E:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_804D4A4
sub_804D4A4: @ 0x0804D4A4
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0804D4C8 @ =0x0201774C
	movs r0, #0
	str r0, [r1]
	ldr r0, [r4, #0x64]
	bl Proc_End
	ldr r0, [r4, #0x5c]
	bl sub_804D4CC
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804D4C8: .4byte 0x0201774C

	thumb_func_start sub_804D4CC
sub_804D4CC: @ 0x0804D4CC
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r1, _0804D50C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804D510 @ =0x085D0FA4
	movs r1, #3
	bl SpawnProc
	adds r6, r0, #0
	str r4, [r6, #0x5c]
	movs r0, #0
	strh r0, [r6, #0x2c]
	ldr r3, _0804D514 @ =0x085D41C4
	ldr r2, _0804D518 @ =0x085D3E2C
	str r2, [sp]
	adds r0, r4, #0
	adds r1, r3, #0
	bl sub_80478DC
	adds r5, r0, #0
	str r5, [r6, #0x60]
	adds r0, r4, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _0804D51C
	ldrh r0, [r5, #2]
	adds r0, #0x48
	b _0804D520
	.align 2, 0
_0804D50C: .4byte 0x02017744
_0804D510: .4byte 0x085D0FA4
_0804D514: .4byte 0x085D41C4
_0804D518: .4byte 0x085D3E2C
_0804D51C:
	ldrh r0, [r5, #2]
	subs r0, #0x48
_0804D520:
	strh r0, [r5, #2]
	ldr r0, _0804D548 @ =0x0811B3E8
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0804D54C @ =0x0811AFE8
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	ldr r0, [r6, #0x5c]
	ldr r1, [r6, #0x60]
	bl sub_804D590
	str r0, [r6, #0x64]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804D548: .4byte 0x0811B3E8
_0804D54C: .4byte 0x0811AFE8

	thumb_func_start sub_804D550
sub_804D550: @ 0x0804D550
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x11
	bne _0804D582
	ldr r1, _0804D588 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	ldr r1, _0804D58C @ =0x02017750
	movs r0, #1
	str r0, [r1]
	ldr r0, [r4, #0x64]
	bl Proc_End
	ldr r0, [r4, #0x60]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
_0804D582:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804D588: .4byte 0x02017744
_0804D58C: .4byte 0x02017750

	thumb_func_start sub_804D590
sub_804D590: @ 0x0804D590
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	ldr r1, _0804D5CC @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804D5D0 @ =0x085D0FBC
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r6, [r4, #0x5c]
	str r5, [r4, #0x60]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #1
	strh r0, [r4, #0x2e]
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #2
	ldrsh r2, [r6, r0]
	movs r0, #0xcd
	movs r3, #1
	bl sub_805C804
	adds r0, r4, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0804D5CC: .4byte 0x02017744
_0804D5D0: .4byte 0x085D0FBC

	thumb_func_start sub_804D5D4
sub_804D5D4: @ 0x0804D5D4
	ldr r1, _0804D5E0 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_0804D5E0: .4byte 0x02017744

	thumb_func_start sub_804D5E4
sub_804D5E4: @ 0x0804D5E4
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #8
	bne _0804D626
	ldr r0, [r4, #0x60]
	bl sub_805C76C
	adds r2, r0, #0
	ldr r0, [r4, #0x60]
	ldrh r0, [r0, #2]
	adds r2, r0, r2
	movs r1, #0x80
	lsls r1, r1, #1
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	movs r0, #0xcd
	movs r3, #1
	bl sub_805C804
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldrh r1, [r4, #0x2e]
	movs r2, #0x2e
	ldrsh r0, [r4, r2]
	cmp r0, #8
	bgt _0804D626
	adds r0, r1, #1
	strh r0, [r4, #0x2e]
_0804D626:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_804D62C
sub_804D62C: @ 0x0804D62C
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_80474C8
	ldr r0, _0804D660 @ =0x085D0FDC
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804D660: .4byte 0x085D0FDC

	thumb_func_start sub_804D664
sub_804D664: @ 0x0804D664
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x5c]
	bl sub_804B80C
	adds r6, r0, #0
	bl sub_8047C28
	adds r4, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0804D6FA
	ldr r0, [r5, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
	ldr r0, [r5, #0x5c]
	bl sub_804D728
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r5, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xcc
	movs r3, #1
	bl sub_805C804
	ldrh r0, [r5, #0x2c]
	cmp r0, #1
	bne _0804D6FA
	movs r0, #9
	ldrh r1, [r6, #0x10]
	orrs r0, r1
	strh r0, [r6, #0x10]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r6, #0
	bl sub_8047600
	adds r0, r6, #0
	bl sub_805C308
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #2
	beq _0804D6EC
	ldr r0, [r5, #0x5c]
	bl sub_804B7B0
	cmp r0, #1
	bne _0804D6E0
	adds r0, r6, #0
	bl sub_8056B08
	b _0804D6EC
_0804D6E0:
	ldrb r0, [r4]
	cmp r0, #0
	bne _0804D720
	ldr r0, [r5, #0x5c]
	bl sub_8056C3C
_0804D6EC:
	ldrb r0, [r4]
	cmp r0, #0
	bne _0804D720
	adds r0, r6, #0
	bl sub_805C358
	b _0804D720
_0804D6FA:
	movs r3, #0x2c
	ldrsh r1, [r5, r3]
	adds r0, r4, #0
	adds r0, #9
	cmp r1, r0
	bne _0804D70E
	ldr r0, [r5, #0x5c]
	bl sub_804B80C
	b _0804D720
_0804D70E:
	adds r0, r4, #0
	adds r0, #0xa
	cmp r1, r0
	bne _0804D720
	bl sub_80474BC
	adds r0, r5, #0
	bl Proc_Break
_0804D720:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_804D728
sub_804D728: @ 0x0804D728
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0804D770 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804D774 @ =0x085D0FF4
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r1, _0804D778 @ =0x085D42F0
	ldr r2, _0804D77C @ =0x085D4264
	ldr r3, _0804D780 @ =0x085D4300
	ldr r0, _0804D784 @ =0x085D4274
	str r0, [sp]
	adds r0, r5, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	ldr r0, _0804D788 @ =0x0811B3E8
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0804D78C @ =0x0811B408
	movs r1, #0x60
	bl sub_8047A88
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804D770: .4byte 0x02017744
_0804D774: .4byte 0x085D0FF4
_0804D778: .4byte 0x085D42F0
_0804D77C: .4byte 0x085D4264
_0804D780: .4byte 0x085D4300
_0804D784: .4byte 0x085D4274
_0804D788: .4byte 0x0811B3E8
_0804D78C: .4byte 0x0811B408

	thumb_func_start sub_804D790
sub_804D790: @ 0x0804D790
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #4
	bne _0804D7B6
	ldr r0, _0804D7BC @ =0x02017744
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r4, #0x60]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
_0804D7B6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804D7BC: .4byte 0x02017744

	thumb_func_start sub_804D7C0
sub_804D7C0: @ 0x0804D7C0
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_80474C8
	ldr r0, _0804D810 @ =0x085D100C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #0
	bl sub_804DBAC
	ldr r0, _0804D814 @ =0x0811B674
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0804D818 @ =0x0811B444
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804D810: .4byte 0x085D100C
_0804D814: .4byte 0x0811B674
_0804D818: .4byte 0x0811B444

	thumb_func_start sub_804D81C
sub_804D81C: @ 0x0804D81C
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_80474C8
	ldr r0, _0804D86C @ =0x085D100C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #1
	bl sub_804DBAC
	ldr r0, _0804D870 @ =0x0811B8B0
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0804D874 @ =0x0811B694
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804D86C: .4byte 0x085D100C
_0804D870: .4byte 0x0811B8B0
_0804D874: .4byte 0x0811B694

	thumb_func_start sub_804D878
sub_804D878: @ 0x0804D878
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_80474C8
	ldr r0, _0804D8C8 @ =0x085D100C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #0
	bl sub_804DBAC
	ldr r0, _0804D8CC @ =0x0811BAE8
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0804D8D0 @ =0x0811B8D0
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804D8C8: .4byte 0x085D100C
_0804D8CC: .4byte 0x0811BAE8
_0804D8D0: .4byte 0x0811B8D0

	thumb_func_start sub_804D8D4
sub_804D8D4: @ 0x0804D8D4
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_80474C8
	ldr r0, _0804D924 @ =0x085D100C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #1
	bl sub_804DBAC
	ldr r0, _0804D928 @ =0x0811BD24
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0804D92C @ =0x0811BB08
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804D924: .4byte 0x085D100C
_0804D928: .4byte 0x0811BD24
_0804D92C: .4byte 0x0811BB08

	thumb_func_start sub_804D930
sub_804D930: @ 0x0804D930
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_80474C8
	ldr r0, _0804D980 @ =0x085D100C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #1
	bl sub_804DBAC
	ldr r0, _0804D984 @ =0x0811BF70
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0804D988 @ =0x0811BD44
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804D980: .4byte 0x085D100C
_0804D984: .4byte 0x0811BF70
_0804D988: .4byte 0x0811BD44

	thumb_func_start sub_804D98C
sub_804D98C: @ 0x0804D98C
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_80474C8
	ldr r0, _0804D9DC @ =0x085D100C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #1
	bl sub_804DBAC
	ldr r0, _0804D9E0 @ =0x0811C1D8
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0804D9E4 @ =0x0811BF90
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804D9DC: .4byte 0x085D100C
_0804D9E0: .4byte 0x0811C1D8
_0804D9E4: .4byte 0x0811BF90

	thumb_func_start sub_804D9E8
sub_804D9E8: @ 0x0804D9E8
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_80474C8
	ldr r0, _0804DA38 @ =0x085D100C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #1
	bl sub_804DBAC
	ldr r0, _0804DA3C @ =0x0811C430
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0804DA40 @ =0x0811C1F8
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804DA38: .4byte 0x085D100C
_0804DA3C: .4byte 0x0811C430
_0804DA40: .4byte 0x0811C1F8

	thumb_func_start sub_804DA44
sub_804DA44: @ 0x0804DA44
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_80474C8
	ldr r0, _0804DA94 @ =0x085D100C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #1
	bl sub_804DBAC
	ldr r0, _0804DA98 @ =0x0811C6B4
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0804DA9C @ =0x0811C450
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804DA94: .4byte 0x085D100C
_0804DA98: .4byte 0x0811C6B4
_0804DA9C: .4byte 0x0811C450

	thumb_func_start sub_804DAA0
sub_804DAA0: @ 0x0804DAA0
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_80474C8
	ldr r0, _0804DAF0 @ =0x085D100C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #1
	bl sub_804DBAC
	ldr r0, _0804DAF4 @ =0x0811C944
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0804DAF8 @ =0x0811C6D4
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804DAF0: .4byte 0x085D100C
_0804DAF4: .4byte 0x0811C944
_0804DAF8: .4byte 0x0811C6D4

	thumb_func_start sub_804DAFC
sub_804DAFC: @ 0x0804DAFC
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0804DB86
	ldr r0, [r5, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r5, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xca
	movs r3, #1
	bl sub_805C804
	ldrh r0, [r5, #0x2c]
	cmp r0, #1
	bne _0804DB86
	ldr r0, [r5, #0x5c]
	bl sub_804B80C
	adds r6, r0, #0
	movs r0, #9
	ldrh r1, [r6, #0x10]
	orrs r0, r1
	strh r0, [r6, #0x10]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r6, #0
	bl sub_8047600
	adds r0, r6, #0
	bl sub_805C308
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #2
	beq _0804DB78
	ldr r0, [r5, #0x5c]
	bl sub_804B7B0
	cmp r0, #1
	bne _0804DB6C
	adds r0, r6, #0
	bl sub_8056B08
	b _0804DB78
_0804DB6C:
	ldrb r0, [r4]
	cmp r0, #0
	bne _0804DBA4
	ldr r0, [r5, #0x5c]
	bl sub_8056C3C
_0804DB78:
	ldrb r0, [r4]
	cmp r0, #0
	bne _0804DBA4
	adds r0, r6, #0
	bl sub_805C358
	b _0804DBA4
_0804DB86:
	movs r3, #0x2c
	ldrsh r0, [r5, r3]
	cmp r0, #0xe
	bne _0804DB96
	ldr r0, [r5, #0x5c]
	bl sub_804B80C
	b _0804DBA4
_0804DB96:
	cmp r0, #0x10
	bne _0804DBA4
	bl sub_80474BC
	adds r0, r5, #0
	bl Proc_Break
_0804DBA4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_804DBAC
sub_804DBAC: @ 0x0804DBAC
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r4, r1, #0
	ldr r1, _0804DBD8 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804DBDC @ =0x085D1024
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r6, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	cmp r4, #0
	bne _0804DBE8
	ldr r2, _0804DBE0 @ =0x085D44E4
	ldr r3, _0804DBE4 @ =0x085D4738
	b _0804DBEC
	.align 2, 0
_0804DBD8: .4byte 0x02017744
_0804DBDC: .4byte 0x085D1024
_0804DBE0: .4byte 0x085D44E4
_0804DBE4: .4byte 0x085D4738
_0804DBE8:
	ldr r2, _0804DC0C @ =0x085D4998
	ldr r3, _0804DC10 @ =0x085D4BF8
_0804DBEC:
	str r2, [sp]
	adds r0, r6, #0
	adds r1, r3, #0
	bl sub_80478DC
	adds r4, r0, #0
	str r4, [r5, #0x60]
	adds r0, r6, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _0804DC14
	ldrh r0, [r4, #2]
	adds r0, #0x38
	b _0804DC18
	.align 2, 0
_0804DC0C: .4byte 0x085D4998
_0804DC10: .4byte 0x085D4BF8
_0804DC14:
	ldrh r0, [r4, #2]
	subs r0, #0x38
_0804DC18:
	strh r0, [r4, #2]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_804DC24
sub_804DC24: @ 0x0804DC24
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xc
	bne _0804DC4A
	ldr r0, _0804DC50 @ =0x02017744
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r4, #0x60]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
_0804DC4A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804DC50: .4byte 0x02017744

	thumb_func_start sub_804DC54
sub_804DC54: @ 0x0804DC54
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_80474C8
	ldr r0, _0804DC88 @ =0x085D103C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804DC88: .4byte 0x085D103C

	thumb_func_start sub_804DC8C
sub_804DC8C: @ 0x0804DC8C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x5c]
	bl sub_804B80C
	adds r4, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	movs r6, #0
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x27
	bne _0804DCC4
	adds r0, r4, #0
	bl sub_804DD38
	adds r0, r4, #0
	bl sub_804DDC8
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #2
	ldrsh r2, [r4, r0]
	movs r0, #0xef
	movs r3, #1
	bl sub_805C804
_0804DCC4:
	movs r1, #0x2c
	ldrsh r0, [r5, r1]
	cmp r0, #0x45
	bne _0804DD1C
	movs r0, #9
	ldrh r1, [r4, #0x10]
	orrs r0, r1
	strh r0, [r4, #0x10]
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r1, [r0]
	adds r0, r4, #0
	bl sub_80478A0
	adds r0, r4, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _0804DD00
	ldr r0, _0804DCF8 @ =0x0200004C
	ldr r0, [r0]
	ldr r1, _0804DCFC @ =0x020219E8
	movs r2, #8
	bl CpuFastSet
	b _0804DD0C
	.align 2, 0
_0804DCF8: .4byte 0x0200004C
_0804DCFC: .4byte 0x020219E8
_0804DD00:
	ldr r0, _0804DD14 @ =0x0200004C
	ldr r0, [r0, #4]
	ldr r1, _0804DD18 @ =0x02021A28
	movs r2, #8
	bl CpuFastSet
_0804DD0C:
	adds r0, r4, #0
	bl sub_8046EF8
	b _0804DD32
	.align 2, 0
_0804DD14: .4byte 0x0200004C
_0804DD18: .4byte 0x02021A28
_0804DD1C:
	cmp r0, #0x64
	bne _0804DD32
	movs r0, #2
	ldrh r1, [r4, #0x10]
	orrs r0, r1
	strh r0, [r4, #0x10]
	bl sub_80474BC
	adds r0, r5, #0
	bl Proc_Break
_0804DD32:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_804DD38
sub_804DD38: @ 0x0804DD38
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r1, _0804DD80 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804DD84 @ =0x085D1054
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r0, _0804DD88 @ =0x0811CAF8
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, _0804DD8C @ =0x0811CD14
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, [r4, #0x5c]
	ldr r2, _0804DD90 @ =0x0811D0D4
	adds r1, r2, #0
	bl sub_804799C
	bl sub_80474C8
	bl sub_8047500
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804DD80: .4byte 0x02017744
_0804DD84: .4byte 0x085D1054
_0804DD88: .4byte 0x0811CAF8
_0804DD8C: .4byte 0x0811CD14
_0804DD90: .4byte 0x0811D0D4

	thumb_func_start sub_804DD94
sub_804DD94: @ 0x0804DD94
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x1f
	bne _0804DDBC
	bl sub_80474D8
	bl sub_80475D8
	ldr r1, _0804DDC4 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0804DDBC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804DDC4: .4byte 0x02017744

	thumb_func_start sub_804DDC8
sub_804DDC8: @ 0x0804DDC8
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0804DDF4 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804DDF8 @ =0x085D106C
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0804DDFC @ =0x08119CDC
	str r1, [r0, #0x48]
	ldr r1, _0804DE00 @ =0x0811CD14
	str r1, [r0, #0x4c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804DDF4: .4byte 0x02017744
_0804DDF8: .4byte 0x085D106C
_0804DDFC: .4byte 0x08119CDC
_0804DE00: .4byte 0x0811CD14

	thumb_func_start sub_804DE04
sub_804DE04: @ 0x0804DE04
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0804DE2A
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl sub_8047AF4
	b _0804DE40
_0804DE2A:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0804DE40
	ldr r1, _0804DE48 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0804DE40:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804DE48: .4byte 0x02017744

	thumb_func_start sub_804DE4C
sub_804DE4C: @ 0x0804DE4C
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_80474C8
	ldr r0, _0804DE80 @ =0x085D108C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804DE80: .4byte 0x085D108C

	thumb_func_start sub_804DE84
sub_804DE84: @ 0x0804DE84
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x5c]
	bl sub_804B80C
	adds r4, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	movs r6, #0
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x19
	bne _0804DEBC
	adds r0, r4, #0
	bl sub_804DD38
	adds r0, r4, #0
	bl sub_804DDC8
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #2
	ldrsh r2, [r4, r0]
	movs r0, #0xef
	movs r3, #1
	bl sub_805C804
_0804DEBC:
	movs r1, #0x2c
	ldrsh r0, [r5, r1]
	cmp r0, #0x37
	bne _0804DF14
	movs r0, #9
	ldrh r1, [r4, #0x10]
	orrs r0, r1
	strh r0, [r4, #0x10]
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r1, [r0]
	adds r0, r4, #0
	bl sub_80478A0
	adds r0, r4, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _0804DEF8
	ldr r0, _0804DEF0 @ =0x0200004C
	ldr r0, [r0]
	ldr r1, _0804DEF4 @ =0x020219E8
	movs r2, #8
	bl CpuFastSet
	b _0804DF04
	.align 2, 0
_0804DEF0: .4byte 0x0200004C
_0804DEF4: .4byte 0x020219E8
_0804DEF8:
	ldr r0, _0804DF0C @ =0x0200004C
	ldr r0, [r0, #4]
	ldr r1, _0804DF10 @ =0x02021A28
	movs r2, #8
	bl CpuFastSet
_0804DF04:
	adds r0, r4, #0
	bl sub_8046EF8
	b _0804DF2A
	.align 2, 0
_0804DF0C: .4byte 0x0200004C
_0804DF10: .4byte 0x02021A28
_0804DF14:
	cmp r0, #0x64
	bne _0804DF2A
	movs r0, #2
	ldrh r1, [r4, #0x10]
	orrs r0, r1
	strh r0, [r4, #0x10]
	bl sub_80474BC
	adds r0, r5, #0
	bl Proc_Break
_0804DF2A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_804DF30
sub_804DF30: @ 0x0804DF30
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_80474C8
	ldr r0, _0804DF7C @ =0x085D10A4
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r1, r4, #0
	adds r1, #0x29
	strb r0, [r1]
	movs r0, #0x9b
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl sub_805C804
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804DF7C: .4byte 0x085D10A4

	thumb_func_start sub_804DF80
sub_804DF80: @ 0x0804DF80
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x5c]
	bl sub_804B80C
	adds r6, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #2
	bne _0804DFA6
	ldr r0, [r5, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
	b _0804E038
_0804DFA6:
	movs r1, #0x2c
	ldrsh r0, [r5, r1]
	cmp r0, #0x22
	bne _0804DFC8
	ldr r0, _0804DFC4 @ =0x00000137
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r5, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl sub_805C804
	b _0804E038
	.align 2, 0
_0804DFC4: .4byte 0x00000137
_0804DFC8:
	cmp r0, #0x2a
	bne _0804DFD4
	adds r0, r6, #0
	bl sub_804E040
	b _0804E038
_0804DFD4:
	cmp r0, #0x2d
	bne _0804E026
	movs r0, #9
	ldrh r1, [r6, #0x10]
	orrs r0, r1
	strh r0, [r6, #0x10]
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r6, #0
	bl sub_8047600
	adds r0, r6, #0
	bl sub_805C308
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #2
	beq _0804E018
	ldr r0, [r5, #0x5c]
	bl sub_804B7B0
	cmp r0, #1
	bne _0804E00C
	adds r0, r6, #0
	bl sub_8056B08
	b _0804E018
_0804E00C:
	ldrb r0, [r4]
	cmp r0, #0
	bne _0804E038
	ldr r0, [r5, #0x5c]
	bl sub_8056C3C
_0804E018:
	ldrb r0, [r4]
	cmp r0, #0
	bne _0804E038
	adds r0, r6, #0
	bl sub_805C358
	b _0804E038
_0804E026:
	cmp r0, #0x3e
	beq _0804E038
	cmp r0, #0x40
	bne _0804E038
	bl sub_80474BC
	adds r0, r5, #0
	bl Proc_Break
_0804E038:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_804E040
sub_804E040: @ 0x0804E040
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0804E094 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804E098 @ =0x085D10BC
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r7, #0
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r3, _0804E09C @ =0x085D4CFC
	ldr r2, _0804E0A0 @ =0x085D4D98
	str r2, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	bl sub_80478DC
	adds r6, r0, #0
	str r6, [r4, #0x60]
	ldrh r0, [r6, #4]
	adds r0, #0x10
	strh r0, [r6, #4]
	movs r0, #0xc0
	lsls r0, r0, #4
	ldrh r1, [r6, #8]
	ands r0, r1
	strh r0, [r6, #8]
	adds r0, r5, #0
	bl sub_804B6C4
	cmp r0, #1
	bne _0804E0A4
	movs r1, #0xe4
	lsls r1, r1, #7
	b _0804E0A8
	.align 2, 0
_0804E094: .4byte 0x02017744
_0804E098: .4byte 0x085D10BC
_0804E09C: .4byte 0x085D4CFC
_0804E0A0: .4byte 0x085D4D98
_0804E0A4:
	movs r1, #0x93
	lsls r1, r1, #8
_0804E0A8:
	adds r0, r1, #0
	ldrh r1, [r6, #8]
	orrs r0, r1
	strh r0, [r6, #8]
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_804E0B8
sub_804E0B8: @ 0x0804E0B8
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xa
	ble _0804E0DE
	ldr r0, [r4, #0x60]
	bl BasRemove
	ldr r1, _0804E0E4 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0804E0DE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804E0E4: .4byte 0x02017744

	thumb_func_start sub_804E0E8
sub_804E0E8: @ 0x0804E0E8
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _0804E120 @ =0x085D10D4
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804E120: .4byte 0x085D10D4

	thumb_func_start sub_804E124
sub_804E124: @ 0x0804E124
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0804E148
	ldr r0, [r4, #0x5c]
	movs r1, #6
	bl sub_8046794
	b _0804E1BA
_0804E148:
	cmp r0, #6
	bne _0804E180
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
	adds r0, r5, #0
	movs r1, #9
	bl sub_804E1C0
	adds r0, r5, #0
	movs r1, #9
	bl sub_804E2B4
	adds r0, r5, #0
	bl sub_804E3C0
	movs r0, #0x86
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl sub_805C804
	b _0804E1BA
_0804E180:
	cmp r0, #0xa
	bne _0804E1A4
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_8047600
	ldrb r0, [r4]
	cmp r0, #0
	bne _0804E1BA
	adds r0, r5, #0
	bl sub_805C358
	b _0804E1BA
_0804E1A4:
	cmp r0, #0x19
	beq _0804E1BA
	cmp r0, #0x1e
	bne _0804E1BA
	bl sub_80474BC
	bl sub_8047358
	adds r0, r4, #0
	bl Proc_Break
_0804E1BA:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_804E1C0
sub_804E1C0: @ 0x0804E1C0
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r1, _0804E220 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804E224 @ =0x085D10EC
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	strh r6, [r4, #0x2e]
	ldr r0, _0804E228 @ =0x0811F22C
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, _0804E22C @ =0x0811E36C
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, _0804E230 @ =0x0811F32C
	ldr r5, _0804E234 @ =0x0201977C
	adds r1, r5, #0
	bl LZ77UnCompWram
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _0804E23C
	ldr r1, _0804E238 @ =gBg1Tm
	movs r0, #1
	str r0, [sp]
	adds r0, #0xff
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r2, #0x20
	movs r3, #0x14
	bl sub_805B1AC
	b _0804E250
	.align 2, 0
_0804E220: .4byte 0x02017744
_0804E224: .4byte 0x085D10EC
_0804E228: .4byte 0x0811F22C
_0804E22C: .4byte 0x0811E36C
_0804E230: .4byte 0x0811F32C
_0804E234: .4byte 0x0201977C
_0804E238: .4byte gBg1Tm
_0804E23C:
	ldr r1, _0804E278 @ =gBg1Tm
	movs r0, #1
	str r0, [sp]
	adds r0, #0xff
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r2, #0x20
	movs r3, #0x14
	bl sub_805B1DC
_0804E250:
	movs r0, #2
	bl EnableBgSync
	bl sub_8047500
	ldr r2, _0804E27C @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804E278: .4byte gBg1Tm
_0804E27C: .4byte gDispIo

	thumb_func_start sub_804E280
sub_804E280: @ 0x0804E280
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _0804E2AA
	bl sub_80474D8
	ldr r1, _0804E2B0 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_Break
_0804E2AA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804E2B0: .4byte 0x02017744

	thumb_func_start sub_804E2B4
sub_804E2B4: @ 0x0804E2B4
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0804E2E4 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804E2E8 @ =0x085D1104
	movs r1, #3
	bl SpawnProc
	adds r6, r0, #0
	str r4, [r6, #0x5c]
	movs r0, #0
	strh r0, [r6, #0x2c]
	strh r5, [r6, #0x2e]
	adds r0, r4, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _0804E2EC
	movs r0, #0xd8
	b _0804E2F0
	.align 2, 0
_0804E2E4: .4byte 0x02017744
_0804E2E8: .4byte 0x085D1104
_0804E2EC:
	movs r0, #0xd8
	rsbs r0, r0, #0
_0804E2F0:
	str r0, [r6, #0x44]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_804E2F8
sub_804E2F8: @ 0x0804E2F8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r6, r0, #0
	ldr r2, [r6, #0x44]
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r1, #0x2e
	ldrsh r0, [r6, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	ldr r4, _0804E330 @ =gDispIo
	strh r0, [r4, #0x20]
	ldr r0, [r6, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _0804E334
	ldrh r4, [r4, #0x20]
	lsrs r0, r4, #3
	adds r7, r0, #0
	adds r7, #0x1e
	b _0804E33A
	.align 2, 0
_0804E330: .4byte gDispIo
_0804E334:
	ldrh r4, [r4, #0x20]
	lsrs r0, r4, #3
	subs r7, r0, #1
_0804E33A:
	movs r2, #0x1f
	mov r8, r2
	adds r0, r7, #0
	ands r0, r2
	lsls r0, r0, #1
	ldr r5, _0804E3B8 @ =gBg1Tm
	adds r0, r0, r5
	movs r4, #0x80
	lsls r4, r4, #1
	str r4, [sp]
	movs r1, #1
	movs r2, #0x14
	movs r3, #1
	bl sub_805B094
	adds r0, r7, #1
	mov r1, r8
	ands r0, r1
	lsls r0, r0, #1
	adds r0, r0, r5
	str r4, [sp]
	movs r1, #1
	movs r2, #0x14
	movs r3, #1
	bl sub_805B094
	adds r0, r7, #2
	mov r2, r8
	ands r0, r2
	lsls r0, r0, #1
	adds r0, r0, r5
	str r4, [sp]
	movs r1, #1
	movs r2, #0x14
	movs r3, #1
	bl sub_805B094
	movs r0, #2
	bl EnableBgSync
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r6, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0804E3AC
	ldr r1, _0804E3BC @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80474D8
	adds r0, r6, #0
	bl Proc_Break
_0804E3AC:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804E3B8: .4byte gBg1Tm
_0804E3BC: .4byte 0x02017744

	thumb_func_start sub_804E3C0
sub_804E3C0: @ 0x0804E3C0
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0804E3EC @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804E3F0 @ =0x085D111C
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0804E3F4 @ =0x08119D56
	str r1, [r0, #0x48]
	ldr r1, _0804E3F8 @ =0x0811F22C
	str r1, [r0, #0x4c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804E3EC: .4byte 0x02017744
_0804E3F0: .4byte 0x085D111C
_0804E3F4: .4byte 0x08119D56
_0804E3F8: .4byte 0x0811F22C

	thumb_func_start sub_804E3FC
sub_804E3FC: @ 0x0804E3FC
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0804E422
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl sub_8047AF4
	b _0804E43C
_0804E422:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0804E43C
	bl sub_80475D8
	ldr r1, _0804E444 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0804E43C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804E444: .4byte 0x02017744

	thumb_func_start sub_804E448
sub_804E448: @ 0x0804E448
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _0804E480 @ =0x085D113C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804E480: .4byte 0x085D113C

	thumb_func_start sub_804E484
sub_804E484: @ 0x0804E484
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	bl sub_8047C28
	adds r6, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r7, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0804E4B2
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
_0804E4B2:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	adds r0, r6, #1
	cmp r1, r0
	bne _0804E500
	ldr r0, _0804E4FC @ =0x0000010D
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl sub_805C804
	adds r0, r5, #0
	bl sub_804E540
	ldr r0, [r4, #0x5c]
	movs r1, #6
	bl sub_8046794
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_8047600
	ldrb r0, [r4]
	cmp r0, #0
	bne _0804E536
	adds r0, r5, #0
	bl sub_805C358
	b _0804E536
	.align 2, 0
_0804E4FC: .4byte 0x0000010D
_0804E500:
	adds r0, r6, #0
	adds r0, #0x1c
	cmp r1, r0
	bne _0804E51A
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0xe
	movs r3, #0x10
	bl sub_804CD88
	b _0804E536
_0804E51A:
	adds r0, r6, #0
	adds r0, #0x32
	cmp r1, r0
	beq _0804E536
	adds r0, #5
	cmp r1, r0
	bne _0804E536
	bl sub_80474BC
	bl sub_8047358
	adds r0, r4, #0
	bl Proc_Break
_0804E536:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_804E540
sub_804E540: @ 0x0804E540
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0804E598 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804E59C @ =0x085D1154
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x34
	strh r0, [r4, #0x2e]
	adds r0, r5, #0
	bl sub_804B6C4
	ldr r3, _0804E5A0 @ =0x085D6E78
	cmp r0, #0
	bne _0804E570
	ldr r3, _0804E5A4 @ =0x085D6218
_0804E570:
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	ldr r0, _0804E5A8 @ =0x081203F4
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0804E5AC @ =0x0811F6F4
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804E598: .4byte 0x02017744
_0804E59C: .4byte 0x085D1154
_0804E5A0: .4byte 0x085D6E78
_0804E5A4: .4byte 0x085D6218
_0804E5A8: .4byte 0x081203F4
_0804E5AC: .4byte 0x0811F6F4

	thumb_func_start sub_804E5B0
sub_804E5B0: @ 0x0804E5B0
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0804E5D8
	ldr r0, [r4, #0x60]
	bl BasRemove
	ldr r1, _0804E5E0 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0804E5D8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804E5E0: .4byte 0x02017744

	thumb_func_start sub_804E5E4
sub_804E5E4: @ 0x0804E5E4
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_80474C8
	ldr r0, _0804E618 @ =0x085D116C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804E618: .4byte 0x085D116C

	thumb_func_start sub_804E61C
sub_804E61C: @ 0x0804E61C
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r6, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0804E67C
	ldr r0, [r4, #0x5c]
	movs r1, #0x5a
	bl sub_804D050
	adds r0, r5, #0
	bl sub_804E6BC
	adds r0, r5, #0
	bl sub_804E778
	adds r0, r5, #0
	bl sub_804E848
	str r6, [sp]
	str r6, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x28
	movs r2, #0xf
	movs r3, #0x10
	bl sub_804CD88
	ldr r0, _0804E678 @ =0x0000011D
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl sub_805C804
	b _0804E6B2
	.align 2, 0
_0804E678: .4byte 0x0000011D
_0804E67C:
	cmp r0, #0xf
	bne _0804E6A0
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_8047600
	ldrb r0, [r4]
	cmp r0, #0
	bne _0804E6B2
	adds r0, r5, #0
	bl sub_805C358
	b _0804E6B2
_0804E6A0:
	cmp r0, #0x78
	beq _0804E6B2
	cmp r0, #0x82
	bne _0804E6B2
	bl sub_80474BC
	adds r0, r4, #0
	bl Proc_Break
_0804E6B2:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_804E6BC
sub_804E6BC: @ 0x0804E6BC
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r1, _0804E70C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804E710 @ =0x085D1184
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r6, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	movs r0, #0x34
	strh r0, [r5, #0x2e]
	adds r0, r6, #0
	bl sub_804B6C4
	ldr r3, _0804E714 @ =0x085D9208
	cmp r0, #0
	bne _0804E6EC
	ldr r3, _0804E718 @ =0x085D8608
_0804E6EC:
	str r3, [sp]
	adds r0, r6, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	adds r4, r0, #0
	str r4, [r5, #0x60]
	adds r0, r6, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _0804E71C
	ldrh r0, [r4, #2]
	adds r0, #0x20
	b _0804E720
	.align 2, 0
_0804E70C: .4byte 0x02017744
_0804E710: .4byte 0x085D1184
_0804E714: .4byte 0x085D9208
_0804E718: .4byte 0x085D8608
_0804E71C:
	ldrh r0, [r4, #2]
	subs r0, #0x20
_0804E720:
	strh r0, [r4, #2]
	ldr r0, _0804E73C @ =0x081203F4
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0804E740 @ =0x0811F6F4
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804E73C: .4byte 0x081203F4
_0804E740: .4byte 0x0811F6F4

	thumb_func_start sub_804E744
sub_804E744: @ 0x0804E744
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0804E76C
	ldr r0, [r4, #0x60]
	bl BasRemove
	ldr r1, _0804E774 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0804E76C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804E774: .4byte 0x02017744

	thumb_func_start sub_804E778
sub_804E778: @ 0x0804E778
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r1, _0804E7D8 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804E7DC @ =0x085D119C
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	movs r0, #0x70
	strh r0, [r5, #0x2e]
	ldr r0, _0804E7E0 @ =0x0813A6F8
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, [r5, #0x5c]
	ldr r2, _0804E7E4 @ =0x0813BA64
	adds r1, r2, #0
	bl sub_804799C
	bl sub_80474C8
	bl sub_8047500
	ldr r0, _0804E7E8 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0804E808
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _0804E7EC
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _0804E7F6
	.align 2, 0
_0804E7D8: .4byte 0x02017744
_0804E7DC: .4byte 0x085D119C
_0804E7E0: .4byte 0x0813A6F8
_0804E7E4: .4byte 0x0813BA64
_0804E7E8: .4byte 0x0203CD14
_0804E7EC:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_0804E7F6:
	ldr r0, _0804E810 @ =0x02022344
	movs r1, #0x80
	lsls r1, r1, #1
	str r1, [sp]
	movs r1, #2
	movs r2, #0x14
	movs r3, #1
	bl sub_805B0D4
_0804E808:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804E810: .4byte 0x02022344

	thumb_func_start sub_804E814
sub_804E814: @ 0x0804E814
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _0804E83E
	bl sub_80474D8
	bl sub_80475D8
	ldr r1, _0804E844 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0804E83E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804E844: .4byte 0x02017744

	thumb_func_start sub_804E848
sub_804E848: @ 0x0804E848
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0804E874 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804E878 @ =0x085D11B4
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0804E87C @ =0x08119D78
	str r1, [r0, #0x48]
	ldr r1, _0804E880 @ =0x0813B6B4
	str r1, [r0, #0x4c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804E874: .4byte 0x02017744
_0804E878: .4byte 0x085D11B4
_0804E87C: .4byte 0x08119D78
_0804E880: .4byte 0x0813B6B4

	thumb_func_start sub_804E884
sub_804E884: @ 0x0804E884
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0804E8AA
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl sub_8047AF4
	b _0804E8C0
_0804E8AA:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0804E8C0
	ldr r1, _0804E8C8 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0804E8C0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804E8C8: .4byte 0x02017744

	thumb_func_start sub_804E8CC
sub_804E8CC: @ 0x0804E8CC
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _0804E904 @ =0x085D11D4
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804E904: .4byte 0x085D11D4

	thumb_func_start sub_804E908
sub_804E908: @ 0x0804E908
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0804E942
	ldr r0, [r4, #0x5c]
	movs r1, #0x5a
	bl sub_804D050
	ldr r0, [r4, #0x5c]
	bl sub_804E988
	movs r0, #0x8f
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl sub_805C804
_0804E942:
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	cmp r0, #4
	bne _0804E96A
	movs r0, #9
	ldrh r3, [r5, #0x10]
	orrs r0, r3
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_8047600
	ldrb r0, [r4]
	cmp r0, #0
	bne _0804E980
	adds r0, r5, #0
	bl sub_805C358
	b _0804E980
_0804E96A:
	cmp r0, #0x32
	beq _0804E980
	cmp r0, #0x3c
	bne _0804E980
	bl sub_80474BC
	bl sub_8047358
	adds r0, r4, #0
	bl Proc_Break
_0804E980:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_804E988
sub_804E988: @ 0x0804E988
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r1, _0804E9C4 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804E9C8 @ =0x085D11EC
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	ldr r2, _0804E9CC @ =0x085D9E38
	ldr r3, _0804E9D0 @ =0x085DAA68
	str r2, [sp]
	adds r0, r4, #0
	adds r1, r3, #0
	bl sub_80478DC
	adds r6, r0, #0
	str r6, [r5, #0x60]
	adds r0, r4, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _0804E9D4
	ldrh r0, [r6, #2]
	adds r0, #0x20
	b _0804E9D8
	.align 2, 0
_0804E9C4: .4byte 0x02017744
_0804E9C8: .4byte 0x085D11EC
_0804E9CC: .4byte 0x085D9E38
_0804E9D0: .4byte 0x085DAA68
_0804E9D4:
	ldrh r0, [r6, #2]
	subs r0, #0x20
_0804E9D8:
	strh r0, [r6, #2]
	ldr r0, _0804E9F4 @ =0x081214B8
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0804E9F8 @ =0x0811F6F4
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804E9F4: .4byte 0x081214B8
_0804E9F8: .4byte 0x0811F6F4

	thumb_func_start sub_804E9FC
sub_804E9FC: @ 0x0804E9FC
	push {lr}
	ldr r2, _0804EA10 @ =0x02017744
	ldr r1, [r2]
	subs r1, #1
	str r1, [r2]
	ldr r0, [r0, #0x60]
	bl BasRemove
	pop {r0}
	bx r0
	.align 2, 0
_0804EA10: .4byte 0x02017744

	thumb_func_start sub_804EA14
sub_804EA14: @ 0x0804EA14
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_80474C8
	ldr r0, _0804EA48 @ =0x085D120C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804EA48: .4byte 0x085D120C

	thumb_func_start sub_804EA4C
sub_804EA4C: @ 0x0804EA4C
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0804EA90
	ldr r0, [r4, #0x5c]
	movs r1, #0x5a
	bl sub_804D050
	ldr r0, [r4, #0x5c]
	bl sub_804EAD4
	ldr r0, [r4, #0x5c]
	bl sub_804EB7C
	ldr r0, [r4, #0x5c]
	bl sub_804EC04
	ldr r0, _0804EAB8 @ =0x0000011F
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl sub_805C804
_0804EA90:
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	cmp r0, #4
	bne _0804EABC
	movs r0, #9
	ldrh r3, [r5, #0x10]
	orrs r0, r3
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_8047600
	ldrb r0, [r4]
	cmp r0, #0
	bne _0804EACE
	adds r0, r5, #0
	bl sub_805C358
	b _0804EACE
	.align 2, 0
_0804EAB8: .4byte 0x0000011F
_0804EABC:
	cmp r0, #0x20
	beq _0804EACE
	cmp r0, #0x30
	bne _0804EACE
	bl sub_80474BC
	adds r0, r4, #0
	bl Proc_Break
_0804EACE:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_804EAD4
sub_804EAD4: @ 0x0804EAD4
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0804EB10 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804EB14 @ =0x085D1224
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0804EB18 @ =0x08119DEA
	str r1, [r0, #0x48]
	ldr r1, _0804EB1C @ =0x085D123C
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r0, _0804EB20 @ =0x081214F8
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	bl sub_8047500
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804EB10: .4byte 0x02017744
_0804EB14: .4byte 0x085D1224
_0804EB18: .4byte 0x08119DEA
_0804EB1C: .4byte 0x085D123C
_0804EB20: .4byte 0x081214F8

	thumb_func_start sub_804EB24
sub_804EB24: @ 0x0804EB24
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _0804EB52
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl sub_804799C
	b _0804EB70
_0804EB52:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _0804EB70
	bl sub_80474D8
	ldr r1, _0804EB78 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_Break
_0804EB70:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804EB78: .4byte 0x02017744

	thumb_func_start sub_804EB7C
sub_804EB7C: @ 0x0804EB7C
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0804EBA8 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804EBAC @ =0x085D126C
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0804EBB0 @ =0x08119E30
	str r1, [r0, #0x48]
	ldr r1, _0804EBB4 @ =0x0813E75C
	str r1, [r0, #0x4c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804EBA8: .4byte 0x02017744
_0804EBAC: .4byte 0x085D126C
_0804EBB0: .4byte 0x08119E30
_0804EBB4: .4byte 0x0813E75C

	thumb_func_start sub_804EBB8
sub_804EBB8: @ 0x0804EBB8
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0804EBDE
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl sub_8047AF4
	b _0804EBF8
_0804EBDE:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0804EBF8
	bl sub_80475D8
	ldr r1, _0804EC00 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0804EBF8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804EC00: .4byte 0x02017744

	thumb_func_start sub_804EC04
sub_804EC04: @ 0x0804EC04
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0804EC48 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804EC4C @ =0x085D128C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x37
	strh r0, [r4, #0x2e]
	ldr r3, _0804EC50 @ =0x085DB6A4
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	adds r6, r0, #0
	str r6, [r4, #0x60]
	adds r0, r5, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _0804EC54
	ldrh r0, [r6, #2]
	adds r0, #0x24
	b _0804EC58
	.align 2, 0
_0804EC48: .4byte 0x02017744
_0804EC4C: .4byte 0x085D128C
_0804EC50: .4byte 0x085DB6A4
_0804EC54:
	ldrh r0, [r6, #2]
	subs r0, #0x24
_0804EC58:
	strh r0, [r6, #2]
	ldrh r0, [r6, #4]
	adds r0, #0xc
	strh r0, [r6, #4]
	ldr r0, _0804EC7C @ =0x081214D8
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0804EC80 @ =0x0811F6F4
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804EC7C: .4byte 0x081214D8
_0804EC80: .4byte 0x0811F6F4

	thumb_func_start sub_804EC84
sub_804EC84: @ 0x0804EC84
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _0804ECAC
	ldr r0, _0804ECB4 @ =0x02017744
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r4, #0x60]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
_0804ECAC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804ECB4: .4byte 0x02017744

	thumb_func_start sub_804ECB8
sub_804ECB8: @ 0x0804ECB8
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _0804ECF0 @ =0x085D12A4
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804ECF0: .4byte 0x085D12A4

	thumb_func_start sub_804ECF4
sub_804ECF4: @ 0x0804ECF4
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	bl sub_8047C28
	adds r6, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0804ED1E
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
_0804ED1E:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	adds r0, r6, #1
	cmp r1, r0
	bne _0804ED3C
	adds r0, r5, #0
	bl sub_804ED94
	adds r0, r5, #0
	bl sub_804EE9C
	adds r0, r5, #0
	bl sub_804EF24
	b _0804ED8E
_0804ED3C:
	adds r0, r6, #4
	cmp r1, r0
	bne _0804ED72
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_8047600
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #2
	ldrsh r2, [r5, r0]
	movs r0, #0xf5
	movs r3, #1
	bl sub_805C804
	ldrb r0, [r4]
	cmp r0, #0
	bne _0804ED8E
	adds r0, r5, #0
	bl sub_805C358
	b _0804ED8E
_0804ED72:
	adds r0, r6, #0
	adds r0, #0x50
	cmp r1, r0
	beq _0804ED8E
	adds r0, #0x10
	cmp r1, r0
	bne _0804ED8E
	bl sub_80474BC
	bl sub_8047358
	adds r0, r4, #0
	bl Proc_Break
_0804ED8E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_804ED94
sub_804ED94: @ 0x0804ED94
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _0804EDEC @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804EDF0 @ =0x085D12BC
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _0804EDF4 @ =0x08119ED2
	str r0, [r5, #0x48]
	ldr r0, _0804EDF8 @ =0x085D12D4
	str r0, [r5, #0x4c]
	ldr r0, _0804EDFC @ =0x085D12DC
	str r0, [r5, #0x50]
	ldr r0, _0804EE00 @ =0x0812C68C
	movs r1, #0x86
	lsls r1, r1, #5
	bl sub_8047ACC
	bl sub_8047500
	ldr r0, _0804EE04 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0804EE12
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _0804EE08
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _0804EE12
	.align 2, 0
_0804EDEC: .4byte 0x02017744
_0804EDF0: .4byte 0x085D12BC
_0804EDF4: .4byte 0x08119ED2
_0804EDF8: .4byte 0x085D12D4
_0804EDFC: .4byte 0x085D12DC
_0804EE00: .4byte 0x0812C68C
_0804EE04: .4byte 0x0203CD14
_0804EE08:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_0804EE12:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_804EE18
sub_804EE18: @ 0x0804EE18
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r6, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r5, r0, #0x10
	cmp r5, #0
	blt _0804EE70
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r5, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl sub_804799C
	cmp r5, #0
	bne _0804EE4E
	ldr r6, _0804EE68 @ =0x0000011F
_0804EE4E:
	cmp r5, #1
	bne _0804EE56
	movs r6, #0xa8
	lsls r6, r6, #1
_0804EE56:
	ldr r0, _0804EE6C @ =0x02022344
	str r6, [sp]
	movs r1, #2
	movs r2, #0x14
	movs r3, #1
	bl sub_805B094
	b _0804EE8E
	.align 2, 0
_0804EE68: .4byte 0x0000011F
_0804EE6C: .4byte 0x02022344
_0804EE70:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r5, r0
	bne _0804EE8E
	bl sub_80474D8
	ldr r1, _0804EE98 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_Break
_0804EE8E:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804EE98: .4byte 0x02017744

	thumb_func_start sub_804EE9C
sub_804EE9C: @ 0x0804EE9C
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0804EEC8 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804EECC @ =0x085D12E4
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0804EED0 @ =0x08119EDC
	str r1, [r0, #0x48]
	ldr r1, _0804EED4 @ =0x0812CF48
	str r1, [r0, #0x4c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804EEC8: .4byte 0x02017744
_0804EECC: .4byte 0x085D12E4
_0804EED0: .4byte 0x08119EDC
_0804EED4: .4byte 0x0812CF48

	thumb_func_start sub_804EED8
sub_804EED8: @ 0x0804EED8
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0804EEFE
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl sub_8047AF4
	b _0804EF18
_0804EEFE:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0804EF18
	bl sub_80475D8
	ldr r1, _0804EF20 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0804EF18:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804EF20: .4byte 0x02017744

	thumb_func_start sub_804EF24
sub_804EF24: @ 0x0804EF24
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0804EF6C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804EF70 @ =0x085D1304
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r3, _0804EF74 @ =0x085E2508
	ldr r2, _0804EF78 @ =0x085E19DC
	str r2, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	ldr r0, _0804EF7C @ =0x0812D80C
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0804EF80 @ =0x0812D374
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804EF6C: .4byte 0x02017744
_0804EF70: .4byte 0x085D1304
_0804EF74: .4byte 0x085E2508
_0804EF78: .4byte 0x085E19DC
_0804EF7C: .4byte 0x0812D80C
_0804EF80: .4byte 0x0812D374

	thumb_func_start sub_804EF84
sub_804EF84: @ 0x0804EF84
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x32
	ble _0804EFAA
	ldr r0, [r4, #0x60]
	bl BasRemove
	ldr r1, _0804EFB0 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0804EFAA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804EFB0: .4byte 0x02017744

	thumb_func_start sub_804EFB4
sub_804EFB4: @ 0x0804EFB4
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _0804EFF4 @ =0x085D131C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r1, #0
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x2a
	strb r1, [r0]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804EFF4: .4byte 0x085D131C

	thumb_func_start sub_804EFF8
sub_804EFF8: @ 0x0804EFF8
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _0804F038 @ =0x085D131C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x2a
	movs r0, #1
	strb r0, [r1]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804F038: .4byte 0x085D131C

	thumb_func_start sub_804F03C
sub_804F03C: @ 0x0804F03C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r6, r0, #0
	ldr r0, _0804F068 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _0804F06C
	movs r5, #0x20
	movs r7, #0x34
	movs r3, #0x36
	mov r8, r3
	movs r0, #0x55
	mov sb, r0
	b _0804F078
	.align 2, 0
_0804F068: .4byte 0x0203CD14
_0804F06C:
	movs r5, #0x28
	movs r7, #0x3c
	movs r1, #0x41
	mov r8, r1
	movs r3, #0x60
	mov sb, r3
_0804F078:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0804F0A4
	ldr r0, [r4, #0x5c]
	bl sub_804F144
	ldr r0, [r4, #0x5c]
	bl sub_804F1FC
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xf1
	movs r3, #1
	bl sub_805C804
_0804F0A4:
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	cmp r0, r5
	bne _0804F0B8
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
	b _0804F138
_0804F0B8:
	cmp r0, r7
	bne _0804F122
	movs r0, #9
	ldrh r3, [r6, #0x10]
	orrs r0, r3
	strh r0, [r6, #0x10]
	adds r5, r4, #0
	adds r5, #0x29
	ldrb r1, [r5]
	adds r0, r6, #0
	bl sub_8047600
	ldrb r0, [r5]
	cmp r0, #0
	bne _0804F138
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	bne _0804F0F8
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #2
	ldrsh r2, [r6, r0]
	movs r0, #0xf7
	movs r3, #1
	bl sub_805C804
	adds r0, r6, #0
	bl sub_804F2D0
	b _0804F11A
_0804F0F8:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r6, r3]
	movs r0, #0xf8
	movs r3, #1
	bl sub_805C804
	adds r0, r6, #0
	bl sub_804F3B8
	adds r0, r6, #0
	bl sub_804F484
	adds r0, r6, #0
	bl sub_804F510
_0804F11A:
	adds r0, r6, #0
	bl sub_805C358
	b _0804F138
_0804F122:
	cmp r0, r8
	beq _0804F138
	cmp r0, sb
	bne _0804F138
	bl sub_80474BC
	bl sub_8047358
	adds r0, r4, #0
	bl Proc_Break
_0804F138:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_804F144
sub_804F144: @ 0x0804F144
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0804F188 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804F18C @ =0x085D1334
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0804F190 @ =0x08119F1E
	str r1, [r0, #0x48]
	ldr r1, _0804F194 @ =0x085D134C
	str r1, [r0, #0x4c]
	ldr r1, _0804F198 @ =0x085D137C
	str r1, [r0, #0x50]
	ldr r0, _0804F19C @ =0x0812E4A4
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, _0804F1A0 @ =0x0812D8AC
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	bl sub_8047500
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804F188: .4byte 0x02017744
_0804F18C: .4byte 0x085D1334
_0804F190: .4byte 0x08119F1E
_0804F194: .4byte 0x085D134C
_0804F198: .4byte 0x085D137C
_0804F19C: .4byte 0x0812E4A4
_0804F1A0: .4byte 0x0812D8AC

	thumb_func_start sub_804F1A4
sub_804F1A4: @ 0x0804F1A4
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _0804F1D2
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl sub_804799C
	b _0804F1F0
_0804F1D2:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _0804F1F0
	bl sub_80474D8
	ldr r1, _0804F1F8 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_Break
_0804F1F0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804F1F8: .4byte 0x02017744

	thumb_func_start sub_804F1FC
sub_804F1FC: @ 0x0804F1FC
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r1, _0804F240 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804F244 @ =0x085D13AC
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r6, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r1, _0804F248 @ =0x085E2CA8
	ldr r2, _0804F24C @ =0x085E2920
	ldr r3, _0804F250 @ =0x085E2CD4
	ldr r0, _0804F254 @ =0x085E294C
	str r0, [sp]
	adds r0, r6, #0
	bl sub_80478DC
	adds r5, r0, #0
	str r5, [r4, #0x60]
	adds r0, r6, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _0804F258
	ldrh r0, [r6, #2]
	subs r0, #8
	b _0804F25C
	.align 2, 0
_0804F240: .4byte 0x02017744
_0804F244: .4byte 0x085D13AC
_0804F248: .4byte 0x085E2CA8
_0804F24C: .4byte 0x085E2920
_0804F250: .4byte 0x085E2CD4
_0804F254: .4byte 0x085E294C
_0804F258:
	ldrh r0, [r6, #2]
	adds r0, #8
_0804F25C:
	strh r0, [r5, #2]
	ldrh r0, [r6, #4]
	adds r0, #8
	strh r0, [r5, #4]
	ldr r0, _0804F280 @ =0x0812FFD8
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0804F284 @ =0x0812F9DC
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804F280: .4byte 0x0812FFD8
_0804F284: .4byte 0x0812F9DC

	thumb_func_start sub_804F288
sub_804F288: @ 0x0804F288
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x25
	bne _0804F2AE
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xf2
	movs r3, #1
	bl sub_805C804
	b _0804F2C6
_0804F2AE:
	cmp r0, #0x32
	ble _0804F2C6
	ldr r0, [r4, #0x60]
	bl BasRemove
	ldr r1, _0804F2CC @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0804F2C6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804F2CC: .4byte 0x02017744

	thumb_func_start sub_804F2D0
sub_804F2D0: @ 0x0804F2D0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _0804F328 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804F32C @ =0x085D13C4
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _0804F330 @ =0x08119F50
	str r0, [r5, #0x48]
	ldr r0, _0804F334 @ =0x085D1430
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _0804F338 @ =0x085D13DC
	str r0, [r5, #0x54]
	ldr r0, _0804F33C @ =0x08138BF0
	movs r1, #0x20
	bl sub_8047AF4
	bl sub_8047500
	ldr r0, _0804F340 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0804F34E
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _0804F344
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _0804F34E
	.align 2, 0
_0804F328: .4byte 0x02017744
_0804F32C: .4byte 0x085D13C4
_0804F330: .4byte 0x08119F50
_0804F334: .4byte 0x085D1430
_0804F338: .4byte 0x085D13DC
_0804F33C: .4byte 0x08138BF0
_0804F340: .4byte 0x0203CD14
_0804F344:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_0804F34E:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_804F354
sub_804F354: @ 0x0804F354
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _0804F390
	ldr r5, [r7, #0x4c]
	ldr r6, [r7, #0x50]
	ldr r0, [r7, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, [r7, #0x5c]
	adds r5, r4, r5
	ldr r1, [r5]
	adds r4, r4, r6
	ldr r2, [r4]
	bl sub_804799C
	b _0804F3AE
_0804F390:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _0804F3AE
	bl sub_80474D8
	ldr r1, _0804F3B4 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r7, #0
	bl Proc_End
_0804F3AE:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804F3B4: .4byte 0x02017744

	thumb_func_start sub_804F3B8
sub_804F3B8: @ 0x0804F3B8
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r1, _0804F414 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804F418 @ =0x085D1484
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	ldr r0, _0804F41C @ =0x0813A6F8
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, [r5, #0x5c]
	ldr r2, _0804F420 @ =0x0813B8B4
	adds r1, r2, #0
	bl sub_804799C
	bl sub_80474C8
	bl sub_8047500
	ldr r0, _0804F424 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0804F444
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _0804F428
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _0804F432
	.align 2, 0
_0804F414: .4byte 0x02017744
_0804F418: .4byte 0x085D1484
_0804F41C: .4byte 0x0813A6F8
_0804F420: .4byte 0x0813B8B4
_0804F424: .4byte 0x0203CD14
_0804F428:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_0804F432:
	ldr r0, _0804F44C @ =0x02022344
	movs r1, #0x80
	lsls r1, r1, #1
	str r1, [sp]
	movs r1, #2
	movs r2, #0x14
	movs r3, #1
	bl sub_805B0D4
_0804F444:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804F44C: .4byte 0x02022344

	thumb_func_start sub_804F450
sub_804F450: @ 0x0804F450
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x28
	bne _0804F478
	bl sub_80474D8
	bl sub_80475D8
	ldr r1, _0804F480 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0804F478:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804F480: .4byte 0x02017744

	thumb_func_start sub_804F484
sub_804F484: @ 0x0804F484
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0804F4B8 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804F4BC @ =0x085D149C
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0804F4C0 @ =0x08119FA6
	str r1, [r0, #0x48]
	ldr r1, _0804F4C4 @ =0x0813B6B4
	str r1, [r0, #0x4c]
	adds r0, r1, #0
	movs r1, #0x20
	bl sub_8047AF4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804F4B8: .4byte 0x02017744
_0804F4BC: .4byte 0x085D149C
_0804F4C0: .4byte 0x08119FA6
_0804F4C4: .4byte 0x0813B6B4

	thumb_func_start sub_804F4C8
sub_804F4C8: @ 0x0804F4C8
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0804F4EE
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl sub_8047AF4
	b _0804F504
_0804F4EE:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0804F504
	ldr r1, _0804F50C @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0804F504:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804F50C: .4byte 0x02017744

	thumb_func_start sub_804F510
sub_804F510: @ 0x0804F510
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0804F550 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804F554 @ =0x085D14BC
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r3, _0804F558 @ =0x085E48C4
	ldr r2, _0804F55C @ =0x085E3AA4
	str r2, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	bl sub_80478DC
	adds r6, r0, #0
	str r6, [r4, #0x60]
	adds r0, r5, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _0804F560
	ldrh r0, [r6, #2]
	subs r0, #8
	b _0804F564
	.align 2, 0
_0804F550: .4byte 0x02017744
_0804F554: .4byte 0x085D14BC
_0804F558: .4byte 0x085E48C4
_0804F55C: .4byte 0x085E3AA4
_0804F560:
	ldrh r0, [r6, #2]
	adds r0, #8
_0804F564:
	strh r0, [r6, #2]
	ldr r0, [r6, #0x1c]
	movs r1, #0x80
	lsls r1, r1, #3
	orrs r0, r1
	str r0, [r6, #0x1c]
	ldr r0, _0804F58C @ =0x0813BD74
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0804F590 @ =0x0813BAFC
	movs r1, #0x80
	lsls r1, r1, #4
	bl sub_8047A88
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804F58C: .4byte 0x0813BD74
_0804F590: .4byte 0x0813BAFC

	thumb_func_start sub_804F594
sub_804F594: @ 0x0804F594
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x28
	ble _0804F5BA
	ldr r0, [r4, #0x60]
	bl BasRemove
	ldr r1, _0804F5C0 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0804F5BA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804F5C0: .4byte 0x02017744

	thumb_func_start sub_804F5C4
sub_804F5C4: @ 0x0804F5C4
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _0804F5FC @ =0x085D14D4
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804F5FC: .4byte 0x085D14D4

	thumb_func_start sub_804F600
sub_804F600: @ 0x0804F600
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	bl sub_8047C28
	adds r6, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r1, #0
	mov r8, r1
	movs r7, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0804F636
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
_0804F636:
	movs r2, #0x2c
	ldrsh r1, [r4, r2]
	adds r0, r6, #1
	cmp r1, r0
	bne _0804F692
	adds r0, r5, #0
	bl sub_804F738
	adds r0, r5, #0
	bl sub_804F99C
	ldr r3, _0804F6A8 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	mov r2, r8
	strb r2, [r0]
	adds r0, #1
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	str r1, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl sub_804CD88
	movs r0, #0x91
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl sub_805C804
_0804F692:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	adds r0, r6, #0
	adds r0, #0x52
	cmp r1, r0
	bne _0804F6AC
	ldr r0, [r4, #0x5c]
	movs r1, #4
	bl sub_8046794
	b _0804F72C
	.align 2, 0
_0804F6A8: .4byte gDispIo
_0804F6AC:
	adds r0, r6, #0
	adds r0, #0x55
	cmp r1, r0
	bne _0804F6E8
	adds r0, r5, #0
	bl sub_804F820
	adds r0, r5, #0
	bl sub_804F908
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x18
	movs r2, #0x10
	movs r3, #0x10
	bl sub_804CD88
	ldr r0, _0804F6E4 @ =0x00000123
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl sub_805C804
	b _0804F72C
	.align 2, 0
_0804F6E4: .4byte 0x00000123
_0804F6E8:
	adds r0, r6, #0
	adds r0, #0x58
	cmp r1, r0
	bne _0804F710
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_8047600
	ldrb r0, [r4]
	cmp r0, #0
	bne _0804F72C
	adds r0, r5, #0
	bl sub_805C358
	b _0804F72C
_0804F710:
	adds r0, r6, #0
	adds r0, #0x88
	cmp r1, r0
	beq _0804F72C
	adds r0, #0x19
	cmp r1, r0
	bne _0804F72C
	bl sub_80474BC
	bl sub_8047358
	adds r0, r4, #0
	bl Proc_Break
_0804F72C:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_804F738
sub_804F738: @ 0x0804F738
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _0804F78C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804F790 @ =0x085D14EC
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _0804F794 @ =0x08119FFC
	str r0, [r5, #0x48]
	ldr r0, _0804F798 @ =0x085D1504
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _0804F79C @ =0x085D151C
	str r0, [r5, #0x54]
	ldr r0, _0804F7A0 @ =0x081521C0
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, _0804F7A4 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0804F7B2
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _0804F7A8
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _0804F7B2
	.align 2, 0
_0804F78C: .4byte 0x02017744
_0804F790: .4byte 0x085D14EC
_0804F794: .4byte 0x08119FFC
_0804F798: .4byte 0x085D1504
_0804F79C: .4byte 0x085D151C
_0804F7A0: .4byte 0x081521C0
_0804F7A4: .4byte 0x0203CD14
_0804F7A8:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_0804F7B2:
	bl sub_8047500
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_804F7BC
sub_804F7BC: @ 0x0804F7BC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #0
	blt _0804F7F8
	ldr r1, [r4, #0x4c]
	ldr r2, [r4, #0x50]
	ldr r5, [r4, #0x54]
	ldr r0, [r4, #0x5c]
	lsls r4, r3, #2
	adds r1, r4, r1
	ldr r1, [r1]
	adds r2, r4, r2
	ldr r2, [r2]
	bl sub_804799C
	adds r4, r4, r5
	ldr r0, [r4]
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	b _0804F816
_0804F7F8:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r3, r0
	bne _0804F816
	bl sub_80474D8
	ldr r1, _0804F81C @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_Break
_0804F816:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804F81C: .4byte 0x02017744

	thumb_func_start sub_804F820
sub_804F820: @ 0x0804F820
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _0804F874 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804F878 @ =0x085D1534
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _0804F87C @ =0x0811A06A
	str r0, [r5, #0x48]
	ldr r0, _0804F880 @ =0x085D154C
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _0804F884 @ =0x085D1578
	str r0, [r5, #0x54]
	ldr r0, _0804F888 @ =0x0814A498
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, _0804F88C @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0804F89A
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _0804F890
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _0804F89A
	.align 2, 0
_0804F874: .4byte 0x02017744
_0804F878: .4byte 0x085D1534
_0804F87C: .4byte 0x0811A06A
_0804F880: .4byte 0x085D154C
_0804F884: .4byte 0x085D1578
_0804F888: .4byte 0x0814A498
_0804F88C: .4byte 0x0203CD14
_0804F890:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_0804F89A:
	bl sub_8047500
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_804F8A4
sub_804F8A4: @ 0x0804F8A4
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #0
	blt _0804F8E0
	ldr r1, [r4, #0x4c]
	ldr r2, [r4, #0x50]
	ldr r5, [r4, #0x54]
	ldr r0, [r4, #0x5c]
	lsls r4, r3, #2
	adds r1, r4, r1
	ldr r1, [r1]
	adds r2, r4, r2
	ldr r2, [r2]
	bl sub_804799C
	adds r4, r4, r5
	ldr r0, [r4]
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	b _0804F8FE
_0804F8E0:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r3, r0
	bne _0804F8FE
	bl sub_80474D8
	ldr r1, _0804F904 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_Break
_0804F8FE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804F904: .4byte 0x02017744

	thumb_func_start sub_804F908
sub_804F908: @ 0x0804F908
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0804F958 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804F95C @ =0x085D15A4
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r3, _0804F960 @ =0x085E79F8
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	ldrh r1, [r0, #2]
	adds r1, #0x18
	strh r1, [r0, #2]
	ldr r0, _0804F964 @ =0x081AC0F4
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0804F968 @ =0x08152E78
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804F958: .4byte 0x02017744
_0804F95C: .4byte 0x085D15A4
_0804F960: .4byte 0x085E79F8
_0804F964: .4byte 0x081AC0F4
_0804F968: .4byte 0x08152E78

	thumb_func_start sub_804F96C
sub_804F96C: @ 0x0804F96C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x33
	ble _0804F992
	ldr r0, [r4, #0x60]
	bl BasRemove
	ldr r1, _0804F998 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0804F992:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804F998: .4byte 0x02017744

	thumb_func_start sub_804F99C
sub_804F99C: @ 0x0804F99C
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0804F9D8 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804F9DC @ =0x085D15BC
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r2, #0
	strh r2, [r0, #0x2c]
	strh r2, [r0, #0x2e]
	movs r1, #1
	str r1, [r0, #0x44]
	str r2, [r0, #0x48]
	ldr r0, _0804F9E0 @ =0x081AC0F4
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0804F9E4 @ =0x08152E78
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804F9D8: .4byte 0x02017744
_0804F9DC: .4byte 0x085D15BC
_0804F9E0: .4byte 0x081AC0F4
_0804F9E4: .4byte 0x08152E78

	thumb_func_start sub_804F9E8
sub_804F9E8: @ 0x0804F9E8
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
_0804F9EE:
	ldr r0, [r5, #0x5c]
	adds r1, r4, #0
	bl sub_804FA14
	adds r4, #1
	cmp r4, #0x1f
	ble _0804F9EE
	ldr r1, _0804FA10 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804FA10: .4byte 0x02017744

	thumb_func_start sub_804FA14
sub_804FA14: @ 0x0804FA14
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	mov r8, r1
	mov r4, sp
	mov r0, sp
	movs r1, #0
	movs r2, #8
	bl memset
	movs r5, #0
	movs r0, #1
	strb r0, [r4, #6]
	strb r0, [r4, #7]
	ldr r1, _0804FAA4 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804FAA8 @ =0x085D15D4
	movs r1, #3
	bl SpawnProc
	adds r7, r0, #0
	str r6, [r7, #0x5c]
	strh r5, [r7, #0x2c]
	movs r0, #0x64
	strh r0, [r7, #0x2e]
	movs r0, #7
	mov r1, r8
	ands r0, r1
	mov r2, sp
	adds r4, r2, r0
	ldrb r0, [r4]
	adds r1, r7, #0
	adds r1, #0x29
	strb r0, [r1]
	ldr r0, _0804FAAC @ =0x085E7A64
	movs r1, #0x78
	bl BasCreate
	str r0, [r7, #0x60]
	movs r1, #0xa1
	lsls r1, r1, #6
	strh r1, [r0, #8]
	movs r1, #0x80
	lsls r1, r1, #1
	strh r1, [r0, #2]
	strh r1, [r0, #4]
	ldr r5, _0804FAB0 @ =0x0000FFFF
	adds r0, r5, #0
	bl sub_805B9C8
	strh r0, [r7, #0x32]
	adds r0, r5, #0
	bl sub_805B9C8
	strh r0, [r7, #0x3a]
	ldrb r0, [r4]
	cmp r0, #0
	bne _0804FAB8
	adds r0, r5, #0
	bl sub_805B9C8
	ldr r2, _0804FAB4 @ =0x000001FF
	adds r1, r2, #0
	ands r0, r1
	movs r1, #0xe0
	lsls r1, r1, #3
	b _0804FACA
	.align 2, 0
_0804FAA4: .4byte 0x02017744
_0804FAA8: .4byte 0x085D15D4
_0804FAAC: .4byte 0x085E7A64
_0804FAB0: .4byte 0x0000FFFF
_0804FAB4: .4byte 0x000001FF
_0804FAB8:
	adds r0, r5, #0
	bl sub_805B9C8
	ldr r2, _0804FB14 @ =0x000001FF
	adds r1, r2, #0
	ands r0, r1
	movs r2, #0xa0
	lsls r2, r2, #4
	adds r1, r2, #0
_0804FACA:
	adds r0, r0, r1
	strh r0, [r7, #0x34]
	ldr r4, _0804FB18 @ =0x0000FF0F
	adds r0, r4, #0
	bl sub_805B9C8
	ldr r2, _0804FB1C @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	ldr r1, _0804FB20 @ =0xFFFFFF00
	adds r0, r0, r1
	strh r0, [r7, #0x3c]
	adds r0, r4, #0
	bl sub_805B9C8
	strh r0, [r7, #0x36]
	adds r0, r4, #0
	bl sub_805B9C8
	strh r0, [r7, #0x3e]
	movs r0, #7
	mov r2, r8
	ands r0, r2
	add r0, sp
	ldrb r0, [r0]
	cmp r0, #0
	bne _0804FB24
	adds r0, r4, #0
	bl sub_805B9C8
	ldr r2, _0804FB14 @ =0x000001FF
	adds r1, r2, #0
	ands r0, r1
	movs r1, #0xe0
	lsls r1, r1, #3
	b _0804FB36
	.align 2, 0
_0804FB14: .4byte 0x000001FF
_0804FB18: .4byte 0x0000FF0F
_0804FB1C: .4byte 0x000003FF
_0804FB20: .4byte 0xFFFFFF00
_0804FB24:
	adds r0, r4, #0
	bl sub_805B9C8
	ldr r2, _0804FB5C @ =0x000001FF
	adds r1, r2, #0
	ands r0, r1
	movs r2, #0xa0
	lsls r2, r2, #4
	adds r1, r2, #0
_0804FB36:
	adds r0, r0, r1
	strh r0, [r7, #0x38]
	ldr r0, _0804FB60 @ =0x0000FF0F
	bl sub_805B9C8
	ldr r2, _0804FB64 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	ldr r1, _0804FB68 @ =0xFFFFFF00
	adds r0, r0, r1
	adds r1, r7, #0
	adds r1, #0x40
	strh r0, [r1]
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804FB5C: .4byte 0x000001FF
_0804FB60: .4byte 0x0000FF0F
_0804FB64: .4byte 0x000003FF
_0804FB68: .4byte 0xFFFFFF00

	thumb_func_start sub_804FB6C
sub_804FB6C: @ 0x0804FB6C
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r3, [r4, #0x60]
	ldrh r2, [r4, #0x2c]
	adds r2, #1
	strh r2, [r4, #0x2c]
	lsls r1, r2, #0x10
	ldrh r5, [r4, #0x2e]
	lsls r0, r5, #0x10
	cmp r1, r0
	ble _0804FB9C
	ldr r1, _0804FB98 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r3, #0
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
	b _0804FC1C
	.align 2, 0
_0804FB98: .4byte 0x02017744
_0804FB9C:
	movs r0, #1
	ands r2, r0
	cmp r2, #0
	bne _0804FBE0
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _0804FBB8
	ldr r0, _0804FBB4 @ =0x085E7AC4
	b _0804FBBA
	.align 2, 0
_0804FBB4: .4byte 0x085E7AC4
_0804FBB8:
	ldr r0, _0804FBDC @ =0x085E7ACC
_0804FBBA:
	str r0, [r3, #0x24]
	str r0, [r3, #0x20]
	movs r0, #0
	strh r0, [r3, #6]
	ldrh r1, [r4, #0x32]
	ldrh r2, [r4, #0x34]
	adds r0, r1, r2
	strh r0, [r4, #0x32]
	ldrh r5, [r4, #0x3a]
	ldrh r2, [r4, #0x3c]
	adds r1, r5, r2
	strh r1, [r4, #0x3a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	strh r0, [r3, #2]
	ldrh r4, [r4, #0x3a]
	b _0804FC18
	.align 2, 0
_0804FBDC: .4byte 0x085E7ACC
_0804FBE0:
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _0804FBF4
	ldr r0, _0804FBF0 @ =0x085E7AC4
	b _0804FBF6
	.align 2, 0
_0804FBF0: .4byte 0x085E7AC4
_0804FBF4:
	ldr r0, _0804FC24 @ =0x085E7ACC
_0804FBF6:
	str r0, [r3, #0x24]
	str r0, [r3, #0x20]
	movs r0, #0
	strh r0, [r3, #6]
	ldrh r5, [r4, #0x3e]
	ldrh r1, [r4, #0x38]
	adds r0, r5, r1
	strh r0, [r4, #0x3e]
	adds r1, r4, #0
	adds r1, #0x40
	ldrh r1, [r1]
	adds r0, r1, r0
	strh r0, [r4, #0x3e]
	ldrh r2, [r4, #0x36]
	lsrs r0, r2, #8
	strh r0, [r3, #2]
	ldrh r4, [r4, #0x3e]
_0804FC18:
	lsrs r0, r4, #8
	strh r0, [r3, #4]
_0804FC1C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804FC24: .4byte 0x085E7ACC

	thumb_func_start sub_804FC28
sub_804FC28: @ 0x0804FC28
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _0804FC60 @ =0x085D15EC
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0804FC60: .4byte 0x085D15EC

	thumb_func_start sub_804FC64
sub_804FC64: @ 0x0804FC64
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	bl sub_8047C28
	adds r6, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0804FC8E
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
_0804FC8E:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	adds r0, r6, #1
	cmp r1, r0
	bne _0804FCB4
	ldr r0, _0804FCFC @ =0x00000119
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl sub_805C804
	adds r0, r5, #0
	bl sub_804FD24
	adds r0, r5, #0
	bl sub_804FE60
_0804FCB4:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	adds r0, r6, #0
	adds r0, #0x59
	cmp r1, r0
	bne _0804FCCA
	adds r0, r5, #0
	movs r1, #2
	movs r2, #3
	bl sub_804FF94
_0804FCCA:
	movs r3, #0x2c
	ldrsh r1, [r4, r3]
	adds r0, r6, #0
	adds r0, #0x5e
	cmp r1, r0
	bne _0804FD00
	adds r0, r5, #0
	bl sub_804FDD4
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_8047600
	ldrb r0, [r4]
	cmp r0, #0
	bne _0804FD1C
	adds r0, r5, #0
	bl sub_805C358
	b _0804FD1C
	.align 2, 0
_0804FCFC: .4byte 0x00000119
_0804FD00:
	adds r0, r6, #0
	adds r0, #0xc3
	cmp r1, r0
	beq _0804FD1C
	adds r0, #5
	cmp r1, r0
	bne _0804FD1C
	bl sub_80474BC
	bl sub_8047358
	adds r0, r4, #0
	bl Proc_Break
_0804FD1C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_804FD24
sub_804FD24: @ 0x0804FD24
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0804FD60 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804FD64 @ =0x085D1604
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0804FD68 @ =0x0811A098
	str r1, [r0, #0x48]
	ldr r1, _0804FD6C @ =0x085D1648
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _0804FD70 @ =0x085D161C
	str r1, [r0, #0x54]
	ldr r0, _0804FD74 @ =0x0813E75C
	movs r1, #0x20
	bl sub_8047AF4
	bl sub_8047500
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804FD60: .4byte 0x02017744
_0804FD64: .4byte 0x085D1604
_0804FD68: .4byte 0x0811A098
_0804FD6C: .4byte 0x085D1648
_0804FD70: .4byte 0x085D161C
_0804FD74: .4byte 0x0813E75C

	thumb_func_start sub_804FD78
sub_804FD78: @ 0x0804FD78
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _0804FDB4
	ldr r5, [r7, #0x4c]
	ldr r6, [r7, #0x50]
	ldr r0, [r7, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, [r7, #0x5c]
	adds r5, r4, r5
	ldr r1, [r5]
	adds r4, r4, r6
	ldr r2, [r4]
	bl sub_804799C
	b _0804FDCA
_0804FDB4:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _0804FDCA
	ldr r1, _0804FDD0 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r7, #0
	bl Proc_End
_0804FDCA:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0804FDD0: .4byte 0x02017744

	thumb_func_start sub_804FDD4
sub_804FDD4: @ 0x0804FDD4
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0804FDF0 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804FDF4 @ =0x085D1674
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804FDF0: .4byte 0x02017744
_0804FDF4: .4byte 0x085D1674

	thumb_func_start sub_804FDF8
sub_804FDF8: @ 0x0804FDF8
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	ldr r3, _0804FE30 @ =0x085E5858
	str r3, [sp]
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	ldr r0, _0804FE34 @ =0x0812D80C
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0804FE38 @ =0x0812D374
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	adds r0, r4, #0
	bl Proc_Break
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804FE30: .4byte 0x085E5858
_0804FE34: .4byte 0x0812D80C
_0804FE38: .4byte 0x0812D374

	thumb_func_start sub_804FE3C
sub_804FE3C: @ 0x0804FE3C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x60]
	bl BasRemove
	ldr r1, _0804FE5C @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804FE5C: .4byte 0x02017744

	thumb_func_start sub_804FE60
sub_804FE60: @ 0x0804FE60
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0804FE7C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804FE80 @ =0x085D169C
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804FE7C: .4byte 0x02017744
_0804FE80: .4byte 0x085D169C

	thumb_func_start sub_804FE84
sub_804FE84: @ 0x0804FE84
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0x8d
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl sub_805C804
	ldr r0, [r4, #0x5c]
	movs r1, #0x26
	bl sub_8046794
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #5
	strh r0, [r4, #0x2e]
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_804FEB8
sub_804FEB8: @ 0x0804FEB8
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r1, #0x2e
	ldrsh r0, [r6, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r5, r0, #0
	ldr r0, _0804FF14 @ =gPal
	ldr r4, _0804FF18 @ =0x020165C0
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r4, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	adds r3, r5, #0
	bl sub_805B644
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r6, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0804FF0C
	movs r0, #0
	strh r0, [r6, #0x2c]
	movs r0, #0xa
	strh r0, [r6, #0x2e]
	adds r0, r6, #0
	bl Proc_Break
_0804FF0C:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804FF14: .4byte gPal
_0804FF18: .4byte 0x020165C0

	thumb_func_start sub_804FF1C
sub_804FF1C: @ 0x0804FF1C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	ldr r2, _0804FF8C @ =gDispIo
	mov ip, r2
	mov r3, ip
	adds r3, #0x3c
	movs r1, #0x3f
	ldrb r2, [r3]
	ands r1, r2
	movs r2, #0x40
	orrs r1, r2
	strb r1, [r3]
	mov r1, ip
	adds r1, #0x44
	movs r2, #0
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r2, [r0]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0804FF84
	bl sub_80474D8
	bl sub_80475D8
	ldr r1, _0804FF90 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0804FF84:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0804FF8C: .4byte gDispIo
_0804FF90: .4byte 0x02017744

	thumb_func_start sub_804FF94
sub_804FF94: @ 0x0804FF94
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	ldr r1, _0804FFC8 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0804FFCC @ =gPal
	ldr r1, _0804FFD0 @ =0x020165C0
	movs r2, #0x80
	lsls r2, r2, #1
	bl CpuFastSet
	ldr r0, _0804FFD4 @ =0x085D16DC
	movs r1, #0
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	strh r6, [r0, #0x30]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0804FFC8: .4byte 0x02017744
_0804FFCC: .4byte gPal
_0804FFD0: .4byte 0x020165C0
_0804FFD4: .4byte 0x085D16DC

	thumb_func_start sub_804FFD8
sub_804FFD8: @ 0x0804FFD8
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r1, #0x2e
	ldrsh r0, [r5, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r3, r0, #0
	ldr r4, _08050034 @ =0x020165C0
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	bl sub_805B5C8
	movs r1, #0xa0
	lsls r1, r1, #0x13
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r4, #0
	bl CpuFastSet
	bl DisablePalSync
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r5, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805002C
	movs r0, #0
	strh r0, [r5, #0x2c]
	adds r0, r5, #0
	bl Proc_Break
_0805002C:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08050034: .4byte 0x020165C0

	thumb_func_start sub_8050038
sub_8050038: @ 0x08050038
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08050074 @ =0x020165C0
	movs r1, #0xa0
	lsls r1, r1, #0x13
	movs r2, #0x80
	lsls r2, r2, #1
	bl CpuFastSet
	bl DisablePalSync
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805006C
	ldr r1, _08050078 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0805006C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08050074: .4byte 0x020165C0
_08050078: .4byte 0x02017744

	thumb_func_start sub_805007C
sub_805007C: @ 0x0805007C
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _080500B4 @ =0x085D16FC
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080500B4: .4byte 0x085D16FC

	thumb_func_start sub_80500B8
sub_80500B8: @ 0x080500B8
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	bl sub_8047C28
	adds r2, r0, #0
	ldr r0, _08050110 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r3, #0x3a
	cmp r0, #0
	beq _080500DA
	movs r3, #0x32
_080500DA:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r6, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08050114
	ldr r0, [r4, #0x5c]
	bl sub_8050308
	movs r0, #0x84
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl sub_805C804
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
	b _080501B0
	.align 2, 0
_08050110: .4byte 0x0203CD14
_08050114:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	adds r0, r3, r2
	cmp r1, r0
	bne _08050128
	ldr r0, [r4, #0x5c]
	movs r1, #6
	bl sub_8046794
	b _080501B0
_08050128:
	adds r0, r2, #6
	adds r0, r3, r0
	cmp r1, r0
	bne _08050164
	adds r0, r5, #0
	bl sub_80501B8
	adds r0, r5, #0
	bl sub_805027C
	str r6, [sp]
	str r6, [sp, #4]
	adds r0, r5, #0
	movs r1, #6
	movs r2, #5
	movs r3, #0x10
	bl sub_804CD88
	ldr r0, _08050160 @ =0x00000109
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl sub_805C804
	b _080501B0
	.align 2, 0
_08050160: .4byte 0x00000109
_08050164:
	adds r0, r2, #0
	adds r0, #8
	adds r0, r3, r0
	cmp r1, r0
	bne _0805018E
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_8047600
	ldrb r0, [r4]
	cmp r0, #0
	bne _080501B0
	adds r0, r5, #0
	bl sub_805C358
	b _080501B0
_0805018E:
	adds r0, r2, #0
	adds r0, #0xc
	adds r0, r3, r0
	cmp r1, r0
	beq _080501B0
	adds r0, r2, #0
	adds r0, #0xe
	adds r0, r3, r0
	cmp r1, r0
	bne _080501B0
	bl sub_80474BC
	bl sub_8047358
	adds r0, r4, #0
	bl Proc_Break
_080501B0:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_80501B8
sub_80501B8: @ 0x080501B8
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r1, _08050204 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08050208 @ =0x085D1714
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	str r0, [r4, #0x44]
	ldr r0, _0805020C @ =0x0811A0DE
	str r0, [r4, #0x48]
	ldr r0, _08050210 @ =0x085D172C
	str r0, [r4, #0x4c]
	ldr r0, _08050214 @ =0x08159D98
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	bl sub_8047500
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08050218
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _08050222
	.align 2, 0
_08050204: .4byte 0x02017744
_08050208: .4byte 0x085D1714
_0805020C: .4byte 0x0811A0DE
_08050210: .4byte 0x085D172C
_08050214: .4byte 0x08159D98
_08050218:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_08050222:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8050228
sub_8050228: @ 0x08050228
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _08050254
	ldr r2, [r4, #0x4c]
	ldr r0, [r4, #0x5c]
	lsls r1, r1, #2
	adds r1, r1, r2
	ldr r1, [r1]
	movs r2, #0x20
	movs r3, #0x14
	bl sub_8047A1C
	b _08050272
_08050254:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08050272
	bl sub_80474D8
	ldr r1, _08050278 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_Break
_08050272:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08050278: .4byte 0x02017744

	thumb_func_start sub_805027C
sub_805027C: @ 0x0805027C
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _080502B0 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080502B4 @ =0x085D1734
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	str r1, [r0, #0x44]
	ldr r1, _080502B8 @ =0x0811A0E8
	str r1, [r0, #0x48]
	ldr r1, _080502BC @ =0x0815B364
	str r1, [r0, #0x4c]
	adds r0, r1, #0
	movs r1, #0x20
	bl sub_8047AF4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080502B0: .4byte 0x02017744
_080502B4: .4byte 0x085D1734
_080502B8: .4byte 0x0811A0E8
_080502BC: .4byte 0x0815B364

	thumb_func_start sub_80502C0
sub_80502C0: @ 0x080502C0
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _080502E6
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl sub_8047AF4
	b _080502FC
_080502E6:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _080502FC
	ldr r1, _08050304 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_080502FC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08050304: .4byte 0x02017744

	thumb_func_start sub_8050308
sub_8050308: @ 0x08050308
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r1, _0805034C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08050350 @ =0x085D1754
	movs r1, #3
	bl SpawnProc
	adds r6, r0, #0
	str r4, [r6, #0x5c]
	movs r0, #0
	strh r0, [r6, #0x2c]
	ldr r1, _08050354 @ =0x085EA7F0
	ldr r2, _08050358 @ =0x085E90AC
	ldr r3, _0805035C @ =0x085EA8A4
	ldr r0, _08050360 @ =0x085E9160
	str r0, [sp]
	adds r0, r4, #0
	bl sub_80478DC
	adds r5, r0, #0
	str r5, [r6, #0x60]
	adds r0, r4, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _08050364
	ldrh r0, [r5, #2]
	adds r0, #0x48
	b _08050368
	.align 2, 0
_0805034C: .4byte 0x02017744
_08050350: .4byte 0x085D1754
_08050354: .4byte 0x085EA7F0
_08050358: .4byte 0x085E90AC
_0805035C: .4byte 0x085EA8A4
_08050360: .4byte 0x085E9160
_08050364:
	ldrh r0, [r5, #2]
	subs r0, #0x48
_08050368:
	strh r0, [r5, #2]
	movs r0, #0x60
	strh r0, [r6, #0x2e]
	ldr r0, _08050388 @ =0x0815BED4
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0805038C @ =0x0815B910
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08050388: .4byte 0x0815BED4
_0805038C: .4byte 0x0815B910

	thumb_func_start sub_8050390
sub_8050390: @ 0x08050390
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	ldrh r3, [r2, #0x2e]
	lsls r1, r3, #0x10
	cmp r0, r1
	bne _080503B2
	ldr r1, _080503B8 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r2, #0
	bl Proc_Break
_080503B2:
	pop {r0}
	bx r0
	.align 2, 0
_080503B8: .4byte 0x02017744

	thumb_func_start sub_80503BC
sub_80503BC: @ 0x080503BC
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _080503F4 @ =0x085D176C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080503F4: .4byte 0x085D176C

	thumb_func_start sub_80503F8
sub_80503F8: @ 0x080503F8
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	bl sub_8047C28
	adds r2, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08050434
	movs r0, #0x85
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl sub_805C804
	adds r0, r5, #0
	bl sub_80504F0
	b _080504E8
_08050434:
	cmp r0, #0x18
	bne _08050440
	ldr r0, [r4, #0x5c]
	bl sub_80506B4
	b _080504E8
_08050440:
	cmp r0, #0x82
	bne _08050450
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
	b _080504E8
_08050450:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	adds r0, r2, #0
	adds r0, #0x83
	cmp r1, r0
	bne _08050466
	adds r0, r5, #0
	bl sub_80506F8
	str r0, [r4, #0x64]
	b _080504E8
_08050466:
	adds r0, r2, #0
	adds r0, #0x96
	cmp r1, r0
	bne _0805048C
	ldr r0, _08050488 @ =0x0000010B
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl sub_805C804
	ldr r0, [r4, #0x5c]
	bl sub_80505A0
	b _080504E8
	.align 2, 0
_08050488: .4byte 0x0000010B
_0805048C:
	adds r0, r2, #0
	adds r0, #0xaa
	cmp r1, r0
	bne _0805049C
	ldr r0, [r4, #0x64]
	bl Proc_End
	b _080504E8
_0805049C:
	adds r0, r2, #0
	adds r0, #0xc3
	cmp r1, r0
	bne _080504CC
	ldr r0, [r4, #0x5c]
	movs r1, #6
	bl sub_8046794
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_8047600
	ldrb r0, [r4]
	cmp r0, #0
	bne _080504E8
	adds r0, r5, #0
	bl sub_805C358
	b _080504E8
_080504CC:
	adds r0, r2, #0
	adds r0, #0xe6
	cmp r1, r0
	beq _080504E8
	adds r0, #0xa
	cmp r1, r0
	bne _080504E8
	bl sub_80474BC
	bl sub_8047358
	adds r0, r4, #0
	bl Proc_Break
_080504E8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80504F0
sub_80504F0: @ 0x080504F0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08050548 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805054C @ =0x085D1784
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08050550 @ =0x0811A102
	str r0, [r5, #0x48]
	ldr r0, _08050554 @ =0x085D179C
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08050558 @ =0x085D1840
	str r0, [r5, #0x54]
	ldr r0, _0805055C @ =0x0815F880
	movs r1, #0x20
	bl sub_8047AF4
	bl sub_8047500
	ldr r0, _08050560 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805056E
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08050564
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
	b _0805056E
	.align 2, 0
_08050548: .4byte 0x02017744
_0805054C: .4byte 0x085D1784
_08050550: .4byte 0x0811A102
_08050554: .4byte 0x085D179C
_08050558: .4byte 0x085D1840
_0805055C: .4byte 0x0815F880
_08050560: .4byte 0x0203CD14
_08050564:
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
_0805056E:
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08050584
	ldr r0, _08050580 @ =gDispIo
	ldrh r1, [r0, #0x20]
	adds r1, #4
	b _0805058A
	.align 2, 0
_08050580: .4byte gDispIo
_08050584:
	ldr r0, _0805059C @ =gDispIo
	ldrh r1, [r0, #0x20]
	subs r1, #4
_0805058A:
	strh r1, [r0, #0x20]
	adds r1, r0, #0
	ldrh r0, [r1, #0x22]
	adds r0, #8
	strh r0, [r1, #0x22]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805059C: .4byte gDispIo

	thumb_func_start sub_80505A0
sub_80505A0: @ 0x080505A0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08050620 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08050624 @ =0x085D1784
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r4, #0
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08050628 @ =0x0811A134
	str r0, [r5, #0x48]
	ldr r0, _0805062C @ =0x085D179C
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08050630 @ =0x085D1840
	str r0, [r5, #0x54]
	ldr r0, _08050634 @ =0x0815F8A0
	movs r1, #0x20
	bl sub_8047AF4
	bl sub_8047500
	ldr r3, _08050638 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r0, #0xa
	strb r0, [r1]
	adds r1, #1
	movs r0, #7
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r4, [r0]
	ldr r0, _0805063C @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805064A
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08050640
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
	b _0805064A
	.align 2, 0
_08050620: .4byte 0x02017744
_08050624: .4byte 0x085D1784
_08050628: .4byte 0x0811A134
_0805062C: .4byte 0x085D179C
_08050630: .4byte 0x085D1840
_08050634: .4byte 0x0815F8A0
_08050638: .4byte gDispIo
_0805063C: .4byte 0x0203CD14
_08050640:
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
_0805064A:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8050650
sub_8050650: @ 0x08050650
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _0805068C
	ldr r5, [r7, #0x4c]
	ldr r6, [r7, #0x50]
	ldr r0, [r7, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, [r7, #0x5c]
	adds r5, r4, r5
	ldr r1, [r5]
	adds r4, r4, r6
	ldr r2, [r4]
	bl sub_804799C
	b _080506AA
_0805068C:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _080506AA
	bl sub_80474D8
	ldr r1, _080506B0 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r7, #0
	bl Proc_End
_080506AA:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080506B0: .4byte 0x02017744

	thumb_func_start sub_80506B4
sub_80506B4: @ 0x080506B4
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _080506EC @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080506F0 @ =0x085D18E4
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	adds r0, r5, #0
	bl sub_804B80C
	ldr r3, _080506F4 @ =0x085D0E8C
	ldr r0, [r4, #0x5c]
	str r3, [sp]
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080506EC: .4byte 0x02017744
_080506F0: .4byte 0x085D18E4
_080506F4: .4byte 0x085D0E8C

	thumb_func_start sub_80506F8
sub_80506F8: @ 0x080506F8
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _08050738 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805073C @ =0x085D192C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	adds r0, r5, #0
	bl sub_804B80C
	ldr r3, _08050740 @ =0x085D0E8C
	ldr r0, [r4, #0x5c]
	str r3, [sp]
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	ldrh r1, [r0, #4]
	subs r1, #4
	strh r1, [r0, #4]
	adds r0, r4, #0
	add sp, #4
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08050738: .4byte 0x02017744
_0805073C: .4byte 0x085D192C
_08050740: .4byte 0x085D0E8C

	thumb_func_start sub_8050744
sub_8050744: @ 0x08050744
	push {lr}
	ldr r2, _08050758 @ =0x02017744
	ldr r1, [r2]
	subs r1, #1
	str r1, [r2]
	ldr r0, [r0, #0x60]
	bl BasRemove
	pop {r0}
	bx r0
	.align 2, 0
_08050758: .4byte 0x02017744

	thumb_func_start sub_805075C
sub_805075C: @ 0x0805075C
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _0805078C @ =0x085EABC0
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _08050790 @ =0x081629D4
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _08050794 @ =0x08161DDC
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805078C: .4byte 0x085EABC0
_08050790: .4byte 0x081629D4
_08050794: .4byte 0x08161DDC

	thumb_func_start sub_8050798
sub_8050798: @ 0x08050798
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _080507C8 @ =0x085EADB0
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _080507CC @ =0x081629D4
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _080507D0 @ =0x081621DC
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080507C8: .4byte 0x085EADB0
_080507CC: .4byte 0x081629D4
_080507D0: .4byte 0x081621DC

	thumb_func_start sub_80507D4
sub_80507D4: @ 0x080507D4
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _08050804 @ =0x085EB264
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _08050808 @ =0x081629D4
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0805080C @ =0x0816261C
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08050804: .4byte 0x085EB264
_08050808: .4byte 0x081629D4
_0805080C: .4byte 0x0816261C

	thumb_func_start sub_8050810
sub_8050810: @ 0x08050810
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _08050838 @ =0x085EB1A8
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	movs r0, #0x14
	strh r0, [r1, #0xa]
	bl BasSort
	movs r0, #0x27
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08050838: .4byte 0x085EB1A8

	thumb_func_start sub_805083C
sub_805083C: @ 0x0805083C
	adds r1, r0, #0
	ldr r2, [r1, #0x60]
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	movs r3, #0
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x28
	bne _0805085A
	ldr r0, _0805085C @ =0x085EB1DC
	str r0, [r2, #0x24]
	str r0, [r2, #0x20]
	strh r3, [r2, #6]
	strh r3, [r1, #0x2c]
_0805085A:
	bx lr
	.align 2, 0
_0805085C: .4byte 0x085EB1DC

	thumb_func_start sub_8050860
sub_8050860: @ 0x08050860
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _08050898 @ =0x085D195C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08050898: .4byte 0x085D195C

	thumb_func_start sub_805089C
sub_805089C: @ 0x0805089C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r6, r0, #0
	bl sub_8047C28
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r1, #0
	mov r8, r1
	movs r7, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _080508D2
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
_080508D2:
	movs r2, #0x2c
	ldrsh r1, [r4, r2]
	adds r0, r5, #1
	cmp r1, r0
	bne _08050930
	ldr r3, _0805092C @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	mov r2, r8
	strb r2, [r0]
	adds r0, #1
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	str r1, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0
	movs r2, #0xa
	movs r3, #0
	bl sub_804CD88
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0x28
	movs r2, #0x28
	movs r3, #0x10
	bl sub_804CD88
	adds r0, r6, #0
	bl sub_8050A70
	movs r0, #0x92
	lsls r0, r0, #1
	b _08050982
	.align 2, 0
_0805092C: .4byte gDispIo
_08050930:
	adds r0, r5, #0
	adds r0, #0xf
	cmp r1, r0
	bne _0805096C
	movs r0, #2
	str r0, [sp]
	adds r0, r6, #0
	movs r1, #0x52
	movs r2, #0xf
	movs r3, #0
	bl sub_804C8D4
	adds r1, r0, #0
	adds r0, r6, #0
	movs r2, #0x3c
	bl sub_8050D68
	ldr r0, _08050964 @ =gDispIo
	movs r1, #0x20
	ldrsh r2, [r0, r1]
	ldr r3, _08050968 @ =sub_804CD4C
	adds r0, r6, #0
	movs r1, #0x53
	bl sub_804CB8C
	b _080509D8
	.align 2, 0
_08050964: .4byte gDispIo
_08050968: .4byte sub_804CD4C
_0805096C:
	adds r0, r5, #0
	adds r0, #0x64
	cmp r1, r0
	bne _08050998
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r1, [r0]
	adds r0, r6, #0
	bl sub_80509E4
	ldr r0, _08050994 @ =0x00000125
_08050982:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r6, r3]
	movs r3, #1
	bl sub_805C804
	b _080509D8
	.align 2, 0
_08050994: .4byte 0x00000125
_08050998:
	adds r0, r5, #0
	adds r0, #0x69
	cmp r1, r0
	bne _080509C0
	movs r0, #9
	ldrh r1, [r6, #0x10]
	orrs r0, r1
	strh r0, [r6, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r6, #0
	bl sub_80477AC
	ldrb r0, [r4]
	cmp r0, #0
	bne _080509D8
	adds r0, r6, #0
	bl sub_805C358
	b _080509D8
_080509C0:
	adds r0, r5, #0
	adds r0, #0x96
	cmp r1, r0
	beq _080509D8
	adds r0, #0x14
	cmp r1, r0
	bne _080509D8
	bl sub_80474BC
	adds r0, r4, #0
	bl Proc_Break
_080509D8:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80509E4
sub_80509E4: @ 0x080509E4
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _08050A44 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08050A48 @ =0x085D1974
	movs r1, #3
	bl SpawnProc
	adds r6, r0, #0
	str r4, [r6, #0x5c]
	adds r1, r6, #0
	adds r1, #0x29
	movs r0, #0
	strb r5, [r1]
	strh r0, [r6, #0x2c]
	str r0, [r6, #0x44]
	ldr r0, _08050A4C @ =0x0811A1AA
	str r0, [r6, #0x48]
	ldr r0, _08050A50 @ =0x085D1A88
	str r0, [r6, #0x4c]
	str r0, [r6, #0x50]
	ldr r0, _08050A54 @ =0x085D19BC
	str r0, [r6, #0x54]
	ldr r0, _08050A58 @ =0x0816B328
	movs r1, #0x20
	bl sub_8047AF4
	bl sub_8047500
	ldr r0, _08050A5C @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08050A6A
	ldr r0, [r6, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08050A60
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _08050A6A
	.align 2, 0
_08050A44: .4byte 0x02017744
_08050A48: .4byte 0x085D1974
_08050A4C: .4byte 0x0811A1AA
_08050A50: .4byte 0x085D1A88
_08050A54: .4byte 0x085D19BC
_08050A58: .4byte 0x0816B328
_08050A5C: .4byte 0x0203CD14
_08050A60:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_08050A6A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_8050A70
sub_8050A70: @ 0x08050A70
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08050AE0 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08050AE4 @ =0x085D19A4
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08050AE8 @ =0x0811A276
	str r0, [r5, #0x48]
	ldr r0, _08050AEC @ =0x085D1A88
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08050AF0 @ =0x085D19BC
	str r0, [r5, #0x54]
	ldr r0, _08050AF4 @ =0x0816B328
	movs r1, #0x20
	bl sub_8047AF4
	bl sub_8047500
	ldr r2, _08050AF8 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	ldr r0, _08050AFC @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08050B0A
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08050B00
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _08050B0A
	.align 2, 0
_08050AE0: .4byte 0x02017744
_08050AE4: .4byte 0x085D19A4
_08050AE8: .4byte 0x0811A276
_08050AEC: .4byte 0x085D1A88
_08050AF0: .4byte 0x085D19BC
_08050AF4: .4byte 0x0816B328
_08050AF8: .4byte gDispIo
_08050AFC: .4byte 0x0203CD14
_08050B00:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_08050B0A:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8050B10
sub_8050B10: @ 0x08050B10
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _08050B4C
	ldr r5, [r7, #0x4c]
	ldr r6, [r7, #0x50]
	ldr r0, [r7, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, [r7, #0x5c]
	adds r5, r4, r5
	ldr r1, [r5]
	adds r4, r4, r6
	ldr r2, [r4]
	bl sub_804799C
	b _08050B8E
_08050B4C:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _08050B8E
	bl sub_80474D8
	adds r0, r7, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	bne _08050B80
	ldr r1, _08050B7C @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	bl sub_8047358
	adds r0, r7, #0
	bl Proc_End
	b _08050B8E
	.align 2, 0
_08050B7C: .4byte 0x02017744
_08050B80:
	movs r0, #0
	strh r0, [r7, #0x2c]
	movs r0, #0x1e
	strh r0, [r7, #0x2e]
	adds r0, r7, #0
	bl Proc_Break
_08050B8E:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8050B94
sub_8050B94: @ 0x08050B94
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, _08050BB8 @ =0x02017748
	ldr r0, [r5]
	cmp r0, #2
	bne _08050BC0
	ldr r1, _08050BBC @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	bl sub_8047358
	adds r0, r4, #0
	bl Proc_End
	b _08050C1A
	.align 2, 0
_08050BB8: .4byte 0x02017748
_08050BBC: .4byte 0x02017744
_08050BC0:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r3, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r1, #0x2e
	ldrsh r2, [r4, r1]
	ldrh r1, [r4, #0x2e]
	cmp r0, r2
	ble _08050BD8
	strh r1, [r4, #0x2c]
_08050BD8:
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	cmp r0, r2
	bne _08050C1A
	ldr r0, [r5]
	cmp r0, #1
	bne _08050C1A
	strh r3, [r4, #0x2c]
	strh r3, [r4, #0x2e]
	str r3, [r4, #0x44]
	ldr r0, _08050C20 @ =0x0811A218
	str r0, [r4, #0x48]
	ldr r0, _08050C24 @ =0x085D1A88
	str r0, [r4, #0x4c]
	str r0, [r4, #0x50]
	ldr r0, _08050C28 @ =0x085D19BC
	str r0, [r4, #0x54]
	ldr r0, _08050C2C @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08050C14
	bl sub_8047C28
	strh r0, [r4, #0x2e]
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
_08050C14:
	adds r0, r4, #0
	bl Proc_Break
_08050C1A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08050C20: .4byte 0x0811A218
_08050C24: .4byte 0x085D1A88
_08050C28: .4byte 0x085D19BC
_08050C2C: .4byte 0x0203CD14

	thumb_func_start sub_8050C30
sub_8050C30: @ 0x08050C30
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08050C96
	ldr r0, _08050C6C @ =0x0203CD14
	movs r3, #0
	ldrsh r0, [r0, r3]
	cmp r0, #0
	beq _08050C7A
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08050C70
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
	b _08050C7A
	.align 2, 0
_08050C6C: .4byte 0x0203CD14
_08050C70:
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
_08050C7A:
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x93
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl sub_805C804
	adds r0, r4, #0
	bl Proc_Break
_08050C96:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8050C9C
sub_8050C9C: @ 0x08050C9C
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _08050CD8
	ldr r5, [r7, #0x4c]
	ldr r6, [r7, #0x50]
	ldr r0, [r7, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, [r7, #0x5c]
	adds r5, r4, r5
	ldr r1, [r5]
	adds r4, r4, r6
	ldr r2, [r4]
	bl sub_804799C
	b _08050CFA
_08050CD8:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _08050CFA
	bl sub_80474D8
	ldr r1, _08050D00 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	bl sub_8047358
	adds r0, r7, #0
	bl Proc_Break
_08050CFA:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08050D00: .4byte 0x02017744

	thumb_func_start sub_8050D04
sub_8050D04: @ 0x08050D04
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _08050D40
	ldr r5, [r7, #0x4c]
	ldr r6, [r7, #0x50]
	ldr r0, [r7, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, [r7, #0x5c]
	adds r5, r4, r5
	ldr r1, [r5]
	adds r4, r4, r6
	ldr r2, [r4]
	bl sub_804799C
	b _08050D5E
_08050D40:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _08050D5E
	bl sub_80474D8
	ldr r1, _08050D64 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r7, #0
	bl Proc_Break
_08050D5E:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08050D64: .4byte 0x02017744

	thumb_func_start sub_8050D68
sub_8050D68: @ 0x08050D68
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	adds r5, r2, #0
	ldr r1, _08050D90 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08050D94 @ =0x085D1B54
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	str r6, [r0, #0x64]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08050D90: .4byte 0x02017744
_08050D94: .4byte 0x085D1B54

	thumb_func_start sub_8050D98
sub_8050D98: @ 0x08050D98
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r4, [r5, #0x64]
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r1, #0x2e
	ldrsh r0, [r5, r1]
	str r0, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0x80
	bl Interpolate
	str r0, [r4, #0x4c]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r5, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08050DD4
	ldr r1, _08050DDC @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
_08050DD4:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08050DDC: .4byte 0x02017744

	thumb_func_start sub_8050DE0
sub_8050DE0: @ 0x08050DE0
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _08050E18 @ =0x085D1B6C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08050E18: .4byte 0x085D1B6C

	thumb_func_start sub_8050E1C
sub_8050E1C: @ 0x08050E1C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	bl sub_8047C28
	adds r6, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08050E46
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
_08050E46:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	adds r0, r6, #1
	cmp r1, r0
	bne _08050E6A
	movs r0, #0x90
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl sub_805C804
	adds r0, r5, #0
	bl sub_8050ED4
	b _08050ECC
_08050E6A:
	adds r0, r6, #0
	adds r0, #0x1a
	cmp r1, r0
	bne _08050EB0
	ldr r0, _08050EAC @ =0x00000121
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl sub_805C804
	ldr r0, [r4, #0x5c]
	movs r1, #4
	bl sub_8046794
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_8047600
	ldrb r0, [r4]
	cmp r0, #0
	bne _08050ECC
	adds r0, r5, #0
	bl sub_805C358
	b _08050ECC
	.align 2, 0
_08050EAC: .4byte 0x00000121
_08050EB0:
	adds r0, r6, #0
	adds r0, #0x2f
	cmp r1, r0
	beq _08050ECC
	adds r0, #1
	cmp r1, r0
	bne _08050ECC
	bl sub_80474BC
	bl sub_8047358
	adds r0, r4, #0
	bl Proc_Break
_08050ECC:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8050ED4
sub_8050ED4: @ 0x08050ED4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08050F28 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08050F2C @ =0x085D1B84
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08050F30 @ =0x0811A27C
	str r0, [r5, #0x48]
	ldr r0, _08050F34 @ =0x085D1CA4
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08050F38 @ =0x085D1B9C
	str r0, [r5, #0x54]
	ldr r0, _08050F3C @ =0x085D1C20
	str r0, [r5, #0x58]
	bl sub_8047500
	ldr r0, _08050F40 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08050F4E
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08050F44
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _08050F4E
	.align 2, 0
_08050F28: .4byte 0x02017744
_08050F2C: .4byte 0x085D1B84
_08050F30: .4byte 0x0811A27C
_08050F34: .4byte 0x085D1CA4
_08050F38: .4byte 0x085D1B9C
_08050F3C: .4byte 0x085D1C20
_08050F40: .4byte 0x0203CD14
_08050F44:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_08050F4E:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8050F54
sub_8050F54: @ 0x08050F54
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r5, r0, #0x10
	cmp r5, #0
	blt _08050FDC
	ldr r6, [r7, #0x4c]
	ldr r0, [r7, #0x50]
	mov r8, r0
	ldr r0, [r7, #0x54]
	ldr r4, [r7, #0x58]
	lsls r5, r5, #2
	adds r0, r5, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	adds r4, r5, r4
	ldr r0, [r4]
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, [r7, #0x5c]
	adds r6, r5, r6
	ldr r1, [r6]
	add r5, r8
	ldr r2, [r5]
	bl sub_804799C
	ldr r0, _08050FBC @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08050FFA
	ldr r0, [r7, #0x5c]
	bl sub_804B6C4
	adds r1, r0, #0
	cmp r1, #0
	bne _08050FC4
	ldr r0, _08050FC0 @ =gBg1Tm
	b _08050FC8
	.align 2, 0
_08050FBC: .4byte 0x0203CD14
_08050FC0: .4byte gBg1Tm
_08050FC4:
	ldr r0, _08050FD8 @ =0x02022342
	movs r1, #0
_08050FC8:
	str r1, [sp]
	movs r1, #3
	movs r2, #0x14
	movs r3, #0
	bl sub_805B094
	b _08050FFA
	.align 2, 0
_08050FD8: .4byte 0x02022342
_08050FDC:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r5, r0
	bne _08050FFA
	bl sub_80474D8
	ldr r1, _08051008 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r7, #0
	bl Proc_End
_08050FFA:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08051008: .4byte 0x02017744

	thumb_func_start sub_805100C
sub_805100C: @ 0x0805100C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _08051048 @ =0x085D1D28
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r6, #0
	strh r6, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	ldr r0, _0805104C @ =0x0201E7A8
	str r6, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08051048: .4byte 0x085D1D28
_0805104C: .4byte 0x0201E7A8

	thumb_func_start sub_8051050
sub_8051050: @ 0x08051050
	push {lr}
	adds r2, r0, #0
	adds r3, r1, #0
	ldr r0, _0805106C @ =0x0201E7A8
	ldr r0, [r0]
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _08051070
	adds r1, #0xff
	movs r0, #0xfe
	bl sub_805C804
	b _0805107A
	.align 2, 0
_0805106C: .4byte 0x0201E7A8
_08051070:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0xff
	bl sub_805C804
_0805107A:
	ldr r1, _08051088 @ =0x0201E7A8
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08051088: .4byte 0x0201E7A8

	thumb_func_start sub_805108C
sub_805108C: @ 0x0805108C
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r6, r0, #0
	ldr r0, [r6, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	bl sub_8047C28
	adds r4, r0, #0
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	movs r7, #0
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _080510BA
	ldr r0, [r6, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
_080510BA:
	movs r0, #0x2c
	ldrsh r1, [r6, r0]
	adds r0, r4, #1
	cmp r1, r0
	bne _080510DC
	adds r0, r5, #0
	movs r1, #4
	bl sub_8046794
	adds r0, r5, #0
	bl sub_80511BC
	adds r0, r5, #0
	bl sub_8051288
	movs r0, #0x30
	b _08051102
_080510DC:
	adds r0, r4, #0
	adds r0, #0x15
	cmp r1, r0
	bne _080510F0
	adds r0, r5, #0
	movs r1, #4
	bl sub_8046794
	movs r0, #0xa0
	b _08051102
_080510F0:
	adds r0, r4, #0
	adds r0, #0x29
	cmp r1, r0
	bne _0805110A
	adds r0, r5, #0
	movs r1, #4
	bl sub_8046794
	movs r0, #0x70
_08051102:
	movs r1, #0
	bl sub_8051050
	b _080511B4
_0805110A:
	adds r0, r4, #0
	adds r0, #0x3d
	cmp r1, r0
	bne _0805113E
	adds r0, r5, #0
	movs r1, #4
	bl sub_8046794
	movs r0, #0x10
	str r0, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #3
	movs r2, #0xa
	movs r3, #0
	bl sub_804CD88
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	adds r0, r1, #0
	movs r3, #1
	bl sub_805C804
	b _080511B4
_0805113E:
	adds r0, r4, #0
	adds r0, #0x5e
	cmp r1, r0
	bne _08051184
	adds r0, r5, #0
	movs r1, #4
	bl sub_8046794
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, r6, #0
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_8047600
	ldr r0, _08051180 @ =0x00000101
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl sub_805C804
	ldrb r0, [r4]
	cmp r0, #0
	bne _080511B4
	adds r0, r5, #0
	bl sub_805C358
	b _080511B4
	.align 2, 0
_08051180: .4byte 0x00000101
_08051184:
	adds r0, r4, #0
	adds r0, #0x69
	cmp r1, r0
	bne _0805119E
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0x14
	movs r3, #8
	bl sub_804CD88
	b _080511B4
_0805119E:
	adds r0, r4, #0
	adds r0, #0x71
	cmp r1, r0
	bne _080511B4
	bl sub_80474BC
	bl sub_8047358
	adds r0, r6, #0
	bl Proc_Break
_080511B4:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80511BC
sub_80511BC: @ 0x080511BC
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _080511F4 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080511F8 @ =0x085D1D40
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _080511FC @ =0x0811A302
	str r1, [r0, #0x48]
	ldr r1, _08051200 @ =0x085D1FC8
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _08051204 @ =0x085D1D58
	str r1, [r0, #0x54]
	ldr r1, _08051208 @ =0x085D1E90
	str r1, [r0, #0x58]
	bl sub_8047500
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080511F4: .4byte 0x02017744
_080511F8: .4byte 0x085D1D40
_080511FC: .4byte 0x0811A302
_08051200: .4byte 0x085D1FC8
_08051204: .4byte 0x085D1D58
_08051208: .4byte 0x085D1E90

	thumb_func_start sub_805120C
sub_805120C: @ 0x0805120C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r5, r0, #0x10
	cmp r5, #0
	blt _0805125A
	ldr r6, [r7, #0x4c]
	ldr r0, [r7, #0x50]
	mov r8, r0
	ldr r0, [r7, #0x54]
	ldr r4, [r7, #0x58]
	lsls r5, r5, #2
	adds r0, r5, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	adds r4, r5, r4
	ldr r0, [r4]
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, [r7, #0x5c]
	adds r6, r5, r6
	ldr r1, [r6]
	add r5, r8
	ldr r2, [r5]
	bl sub_804799C
	b _08051278
_0805125A:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r5, r0
	bne _08051278
	bl sub_80474D8
	ldr r1, _08051284 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r7, #0
	bl Proc_End
_08051278:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08051284: .4byte 0x02017744

	thumb_func_start sub_8051288
sub_8051288: @ 0x08051288
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _080512B4 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080512B8 @ =0x085D2100
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r2, #0
	strh r2, [r0, #0x2c]
	movs r1, #7
	str r1, [r0, #0x44]
	strh r2, [r0, #0x2e]
	movs r1, #6
	str r1, [r0, #0x48]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080512B4: .4byte 0x02017744
_080512B8: .4byte 0x085D2100

	thumb_func_start sub_80512BC
sub_80512BC: @ 0x080512BC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r5, #0x44]
	cmp r0, r1
	ble _08051318
	movs r0, #0
	strh r0, [r5, #0x2c]
	ldr r2, _08051320 @ =0x085D2120
	movs r1, #0x2e
	ldrsh r0, [r5, r1]
	lsls r1, r0, #3
	adds r1, r1, r2
	ldr r4, [r1]
	lsls r0, r0, #1
	adds r0, #1
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r2, [r0]
	ldr r0, [r5, #0x60]
	adds r1, r4, #0
	bl sub_8051328
	adds r0, r4, #0
	movs r1, #1
	bl sub_8051050
	ldrh r0, [r5, #0x2e]
	adds r0, #1
	strh r0, [r5, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r5, #0x48]
	cmp r0, r1
	ble _08051318
	ldr r1, _08051324 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
_08051318:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08051320: .4byte 0x085D2120
_08051324: .4byte 0x02017744

	thumb_func_start sub_8051328
sub_8051328: @ 0x08051328
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	ldr r1, _08051380 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08051384 @ =0x085D2158
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	ldr r3, _08051388 @ =0x085EDCC8
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	strh r6, [r0, #2]
	mov r1, r8
	strh r1, [r0, #4]
	ldr r0, _0805138C @ =0x081AB190
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _08051390 @ =0x081AAECC
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08051380: .4byte 0x02017744
_08051384: .4byte 0x085D2158
_08051388: .4byte 0x085EDCC8
_0805138C: .4byte 0x081AB190
_08051390: .4byte 0x081AAECC

	thumb_func_start sub_8051394
sub_8051394: @ 0x08051394
	push {lr}
	ldr r0, [r0, #0x60]
	bl BasRemove
	ldr r1, _080513A8 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_080513A8: .4byte 0x02017744

	thumb_func_start sub_80513AC
sub_80513AC: @ 0x080513AC
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _080513E4 @ =0x085D2178
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080513E4: .4byte 0x085D2178

	thumb_func_start sub_80513E8
sub_80513E8: @ 0x080513E8
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r6, r0, #0
	ldr r0, [r6, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	bl sub_8047C28
	adds r4, r0, #0
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	movs r7, #0
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08051416
	ldr r0, [r6, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
_08051416:
	movs r0, #0x2c
	ldrsh r1, [r6, r0]
	adds r0, r4, #1
	cmp r1, r0
	bne _08051448
	adds r0, r5, #0
	bl sub_805151C
	bl sub_80516B8
	adds r0, r5, #0
	movs r1, #0xa0
	bl sub_8051624
	ldr r0, _08051444 @ =0x0000012D
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl sub_805C804
	b _08051514
	.align 2, 0
_08051444: .4byte 0x0000012D
_08051448:
	adds r0, r4, #0
	adds r0, #0x5a
	cmp r1, r0
	bne _0805146A
	adds r0, r5, #0
	movs r1, #0x3c
	bl sub_8051720
	movs r0, #0x97
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x78
	movs r3, #0
	bl sub_805C804
	b _08051514
_0805146A:
	adds r0, r4, #0
	adds r0, #0xa0
	cmp r1, r0
	bne _0805147C
	ldr r0, [r6, #0x5c]
	movs r1, #3
	bl sub_80467D0
	b _08051514
_0805147C:
	adds r0, r4, #0
	adds r0, #0xa3
	cmp r1, r0
	bne _080514F4
	adds r0, r5, #0
	movs r1, #0x64
	bl sub_804D050
	adds r0, r5, #0
	movs r1, #0x64
	bl sub_8051870
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x50
	movs r2, #0x14
	movs r3, #0x10
	bl sub_804CD88
	ldr r2, _080514EC @ =sub_8051C00
	adds r0, r5, #0
	movs r1, #0x64
	bl sub_804CC68
	movs r0, #0x64
	bl sub_8051C30
	adds r0, r5, #0
	bl sub_8051A14
	ldr r0, _080514F0 @ =0x0000012F
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x78
	movs r3, #0
	bl sub_805C804
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, r6, #0
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_8047600
	ldrb r0, [r4]
	cmp r0, #0
	bne _08051514
	adds r0, r5, #0
	bl sub_805C358
	b _08051514
	.align 2, 0
_080514EC: .4byte sub_8051C00
_080514F0: .4byte 0x0000012F
_080514F4:
	adds r0, r4, #0
	adds r0, #0xfa
	cmp r1, r0
	beq _08051514
	movs r2, #0x82
	lsls r2, r2, #1
	adds r0, r4, r2
	cmp r1, r0
	bne _08051514
	bl sub_80474BC
	bl sub_8047358
	adds r0, r6, #0
	bl Proc_Break
_08051514:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_805151C
sub_805151C: @ 0x0805151C
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08051570 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08051574 @ =0x085D2190
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08051578 @ =0x0811A478
	str r0, [r5, #0x48]
	ldr r0, _0805157C @ =0x085D21A8
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08051580 @ =0x085D21DC
	str r0, [r5, #0x54]
	ldr r0, _08051584 @ =0x081408CC
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, _08051588 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08051596
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _0805158C
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _08051596
	.align 2, 0
_08051570: .4byte 0x02017744
_08051574: .4byte 0x085D2190
_08051578: .4byte 0x0811A478
_0805157C: .4byte 0x085D21A8
_08051580: .4byte 0x085D21DC
_08051584: .4byte 0x081408CC
_08051588: .4byte 0x0203CD14
_0805158C:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_08051596:
	bl sub_8047500
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_80515A0
sub_80515A0: @ 0x080515A0
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _080515F8
	ldr r5, [r7, #0x4c]
	ldr r6, [r7, #0x50]
	ldr r0, [r7, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, [r7, #0x5c]
	adds r5, r4, r5
	ldr r1, [r5]
	adds r4, r4, r6
	ldr r2, [r4]
	bl sub_804799C
	ldr r0, _080515F0 @ =0x02022344
	ldr r1, _080515F4 @ =0x0000011F
	str r1, [sp]
	movs r1, #2
	movs r2, #0x14
	movs r3, #1
	bl sub_805B094
	b _08051616
	.align 2, 0
_080515F0: .4byte 0x02022344
_080515F4: .4byte 0x0000011F
_080515F8:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _08051616
	bl sub_80474D8
	ldr r1, _08051620 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r7, #0
	bl Proc_Break
_08051616:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08051620: .4byte 0x02017744

	thumb_func_start sub_8051624
sub_8051624: @ 0x08051624
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0805165C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08051660 @ =0x085D2210
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	strh r5, [r0, #0x30]
	str r1, [r0, #0x44]
	ldr r1, _08051664 @ =0x0811A50E
	str r1, [r0, #0x48]
	ldr r1, _08051668 @ =0x081408CC
	str r1, [r0, #0x4c]
	adds r0, r1, #0
	movs r1, #0x20
	bl sub_8047AF4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805165C: .4byte 0x02017744
_08051660: .4byte 0x085D2210
_08051664: .4byte 0x0811A50E
_08051668: .4byte 0x081408CC

	thumb_func_start sub_805166C
sub_805166C: @ 0x0805166C
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _08051690
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl sub_8047AF4
_08051690:
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _080516AE
	ldr r1, _080516B4 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_080516AE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080516B4: .4byte 0x02017744

	thumb_func_start sub_80516B8
sub_80516B8: @ 0x080516B8
	push {lr}
	ldr r0, _080516D0 @ =0x02017744
	ldr r1, [r0]
	adds r1, #1
	str r1, [r0]
	ldr r0, _080516D4 @ =0x085D2230
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_080516D0: .4byte 0x02017744
_080516D4: .4byte 0x085D2230

	thumb_func_start sub_80516D8
sub_80516D8: @ 0x080516D8
	push {lr}
	ldr r2, _080516E8 @ =gDispIo
	movs r1, #8
	strh r1, [r2, #0x22]
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0
_080516E8: .4byte gDispIo

	thumb_func_start sub_80516EC
sub_80516EC: @ 0x080516EC
	push {lr}
	ldr r2, _080516FC @ =gDispIo
	movs r1, #0x10
	strh r1, [r2, #0x22]
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0
_080516FC: .4byte gDispIo

	thumb_func_start sub_8051700
sub_8051700: @ 0x08051700
	push {lr}
	ldr r2, _08051718 @ =gDispIo
	movs r1, #0x18
	strh r1, [r2, #0x22]
	ldr r2, _0805171C @ =0x02017744
	ldr r1, [r2]
	subs r1, #1
	str r1, [r2]
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0
_08051718: .4byte gDispIo
_0805171C: .4byte 0x02017744

	thumb_func_start sub_8051720
sub_8051720: @ 0x08051720
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _08051760 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08051764 @ =0x085D2270
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r2, #0
	strh r2, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	strh r2, [r0, #0x30]
	movs r1, #1
	str r1, [r0, #0x44]
	str r2, [r0, #0x48]
	ldr r0, _08051768 @ =0x08143EE4
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	ldr r0, _0805176C @ =0x08144A00
	movs r1, #0x20
	bl sub_8047AB0
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08051760: .4byte 0x02017744
_08051764: .4byte 0x085D2270
_08051768: .4byte 0x08143EE4
_0805176C: .4byte 0x08144A00

	thumb_func_start sub_8051770
sub_8051770: @ 0x08051770
	push {r4, lr}
	adds r3, r0, #0
	ldrh r0, [r3, #0x2c]
	adds r0, #1
	movs r2, #0
	strh r0, [r3, #0x2c]
	lsls r0, r0, #0x10
	ldrh r4, [r3, #0x2e]
	lsls r1, r4, #0x10
	cmp r0, r1
	bne _0805179C
	ldr r1, _08051798 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r3, #0
	bl Proc_Break
	b _080517DA
	.align 2, 0
_08051798: .4byte 0x02017744
_0805179C:
	ldrh r0, [r3, #0x30]
	adds r0, #1
	strh r0, [r3, #0x30]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r3, #0x44]
	cmp r0, r1
	bne _080517DA
	strh r2, [r3, #0x30]
	movs r0, #2
	str r0, [r3, #0x44]
	ldr r4, _080517E0 @ =0x085D2288
	ldr r0, [r3, #0x48]
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r1, [r0]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _080517C6
	str r2, [r3, #0x48]
_080517C6:
	ldr r2, [r3, #0x48]
	lsls r0, r2, #2
	adds r0, r0, r4
	ldr r1, [r0]
	adds r2, #1
	str r2, [r3, #0x48]
	ldr r0, [r3, #0x5c]
	movs r2, #0x50
	bl sub_80517E4
_080517DA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080517E0: .4byte 0x085D2288

	thumb_func_start sub_80517E4
sub_80517E4: @ 0x080517E4
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	ldr r1, _08051830 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08051834 @ =0x085D22E0
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0xc
	strh r0, [r4, #0x2e]
	ldr r3, _08051838 @ =0x085E5C10
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	strh r6, [r0, #2]
	mov r1, r8
	strh r1, [r0, #4]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08051830: .4byte 0x02017744
_08051834: .4byte 0x085D22E0
_08051838: .4byte 0x085E5C10

	thumb_func_start sub_805183C
sub_805183C: @ 0x0805183C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08051864
	ldr r0, _0805186C @ =0x02017744
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r4, #0x60]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
_08051864:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805186C: .4byte 0x02017744

	thumb_func_start sub_8051870
sub_8051870: @ 0x08051870
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _080518E0 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080518E4 @ =0x085D22F8
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	strh r1, [r0, #0x30]
	ldr r0, _080518E8 @ =0x08141320
	ldr r1, _080518EC @ =0x0201777C
	bl LZ77UnCompWram
	ldr r0, _080518F0 @ =0x08142EAC
	ldr r1, _080518F4 @ =0x0201B77C
	bl LZ77UnCompWram
	ldr r0, _080518F8 @ =0x08143AB8
	ldr r4, _080518FC @ =0x0201977C
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r0, _08051900 @ =0x08143DA8
	movs r1, #0x80
	lsls r1, r1, #4
	adds r4, r4, r1
	adds r1, r4, #0
	bl LZ77UnCompWram
	movs r0, #2
	bl EnableBgSync
	bl sub_8047500
	ldr r2, _08051904 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080518E0: .4byte 0x02017744
_080518E4: .4byte 0x085D22F8
_080518E8: .4byte 0x08141320
_080518EC: .4byte 0x0201777C
_080518F0: .4byte 0x08142EAC
_080518F4: .4byte 0x0201B77C
_080518F8: .4byte 0x08143AB8
_080518FC: .4byte 0x0201977C
_08051900: .4byte 0x08143DA8
_08051904: .4byte gDispIo

	thumb_func_start sub_8051908
sub_8051908: @ 0x08051908
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	movs r5, #1
	adds r0, r5, #0
	ldrh r1, [r4, #0x2c]
	ands r0, r1
	cmp r0, #0
	bne _080519A0
	movs r2, #0x30
	ldrsh r0, [r4, r2]
	cmp r0, #1
	beq _0805193C
	cmp r0, #1
	bgt _0805192C
	cmp r0, #0
	beq _08051932
	b _0805194C
_0805192C:
	cmp r0, #2
	beq _08051944
	b _0805194C
_08051932:
	ldr r0, _08051938 @ =0x08143A38
	b _0805194E
	.align 2, 0
_08051938: .4byte 0x08143A38
_0805193C:
	ldr r0, _08051940 @ =0x08143A58
	b _0805194E
	.align 2, 0
_08051940: .4byte 0x08143A58
_08051944:
	ldr r0, _08051948 @ =0x08143A78
	b _0805194E
	.align 2, 0
_08051948: .4byte 0x08143A78
_0805194C:
	movs r0, #0
_0805194E:
	movs r1, #0x20
	bl sub_8047AF4
	ldrh r0, [r4, #0x30]
	adds r0, #1
	strh r0, [r4, #0x30]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #3
	bne _08051966
	movs r0, #0
	strh r0, [r4, #0x30]
_08051966:
	ldr r0, _08051990 @ =0x0201777C
	ldr r1, _08051994 @ =0x06002000
	movs r2, #0x80
	lsls r2, r2, #6
	bl RegisterDataMove
	ldr r0, _08051998 @ =0x0201977C
	ldr r1, _0805199C @ =gBg1Tm
	movs r2, #1
	str r2, [sp]
	adds r2, #0xff
	str r2, [sp, #4]
	movs r2, #0x20
	movs r3, #0x10
	bl sub_805B1AC
	movs r0, #2
	bl EnableBgSync
	b _080519CE
	.align 2, 0
_08051990: .4byte 0x0201777C
_08051994: .4byte 0x06002000
_08051998: .4byte 0x0201977C
_0805199C: .4byte gBg1Tm
_080519A0:
	ldr r0, _080519FC @ =0x08143A98
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, _08051A00 @ =0x0201B77C
	ldr r1, _08051A04 @ =0x06002000
	movs r2, #0x80
	lsls r2, r2, #5
	bl RegisterDataMove
	ldr r0, _08051A08 @ =0x02019F7C
	ldr r1, _08051A0C @ =gBg1Tm
	str r5, [sp]
	movs r2, #0x80
	lsls r2, r2, #1
	str r2, [sp, #4]
	movs r2, #0x20
	movs r3, #0x10
	bl sub_805B1AC
	movs r0, #2
	bl EnableBgSync
_080519CE:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _080519F4
	bl sub_80474D8
	ldr r1, _08051A10 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_End
_080519F4:
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080519FC: .4byte 0x08143A98
_08051A00: .4byte 0x0201B77C
_08051A04: .4byte 0x06002000
_08051A08: .4byte 0x02019F7C
_08051A0C: .4byte gBg1Tm
_08051A10: .4byte 0x02017744

	thumb_func_start sub_8051A14
sub_8051A14: @ 0x08051A14
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08051A50 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08051A54 @ =0x085D2310
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r2, #0
	strh r2, [r0, #0x2c]
	strh r2, [r0, #0x2e]
	movs r1, #2
	str r1, [r0, #0x44]
	str r2, [r0, #0x48]
	ldr r0, _08051A58 @ =0x08143EE4
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	ldr r0, _08051A5C @ =0x08144A00
	movs r1, #0x20
	bl sub_8047AB0
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08051A50: .4byte 0x02017744
_08051A54: .4byte 0x085D2310
_08051A58: .4byte 0x08143EE4
_08051A5C: .4byte 0x08144A00

	thumb_func_start sub_8051A60
sub_8051A60: @ 0x08051A60
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x41
	bne _08051A88
	ldr r1, _08051A84 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
	b _08051ABC
	.align 2, 0
_08051A84: .4byte 0x02017744
_08051A88:
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r4, #0x44]
	cmp r0, r1
	bne _08051ABC
	movs r0, #0
	strh r0, [r4, #0x2e]
	movs r0, #2
	str r0, [r4, #0x44]
	ldr r0, [r4, #0x5c]
	ldr r2, [r4, #0x48]
	adds r1, r2, #0
	adds r2, #1
	str r2, [r4, #0x48]
	bl sub_8051AC4
	ldr r0, [r4, #0x5c]
	ldr r2, [r4, #0x48]
	adds r1, r2, #0
	adds r2, #1
	str r2, [r4, #0x48]
	bl sub_8051AC4
_08051ABC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8051AC4
sub_8051AC4: @ 0x08051AC4
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _08051B1C @ =0x0811A520
	mov r0, sp
	movs r2, #0x10
	bl memcpy
	ldr r1, _08051B20 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08051B24 @ =0x085D2328
	movs r1, #3
	bl SpawnProc
	adds r6, r0, #0
	str r4, [r6, #0x5c]
	movs r4, #0
	strh r4, [r6, #0x2c]
	movs r0, #7
	ands r0, r5
	lsls r0, r0, #1
	add r0, sp
	ldrh r0, [r0]
	strh r0, [r6, #0x2e]
	movs r0, #0xe0
	bl sub_805B9C8
	adds r0, #8
	strh r0, [r6, #0x32]
	strh r4, [r6, #0x3a]
	movs r0, #9
	bl sub_805B9C8
	cmp r0, #9
	bhi _08051B78
	lsls r0, r0, #2
	ldr r1, _08051B28 @ =_08051B2C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08051B1C: .4byte 0x0811A520
_08051B20: .4byte 0x02017744
_08051B24: .4byte 0x085D2328
_08051B28: .4byte _08051B2C
_08051B2C: @ jump table
	.4byte _08051B54 @ case 0
	.4byte _08051B54 @ case 1
	.4byte _08051B54 @ case 2
	.4byte _08051B54 @ case 3
	.4byte _08051B54 @ case 4
	.4byte _08051B54 @ case 5
	.4byte _08051B54 @ case 6
	.4byte _08051B5C @ case 7
	.4byte _08051B64 @ case 8
	.4byte _08051B6C @ case 9
_08051B54:
	ldr r0, _08051B58 @ =0x085E5C44
	b _08051B6E
	.align 2, 0
_08051B58: .4byte 0x085E5C44
_08051B5C:
	ldr r0, _08051B60 @ =0x085E5C3C
	b _08051B6E
	.align 2, 0
_08051B60: .4byte 0x085E5C3C
_08051B64:
	ldr r0, _08051B68 @ =0x085E5C34
	b _08051B6E
	.align 2, 0
_08051B68: .4byte 0x085E5C34
_08051B6C:
	ldr r0, _08051B8C @ =0x085E5C2C
_08051B6E:
	movs r1, #0x78
	bl BasCreate
	adds r4, r0, #0
	str r4, [r6, #0x60]
_08051B78:
	cmp r4, #0
	bne _08051B94
	ldr r1, _08051B90 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r6, #0
	bl Proc_End
	b _08051BA2
	.align 2, 0
_08051B8C: .4byte 0x085E5C2C
_08051B90: .4byte 0x02017744
_08051B94:
	movs r0, #0x91
	lsls r0, r0, #6
	strh r0, [r4, #8]
	ldrh r0, [r6, #0x32]
	strh r0, [r4, #2]
	ldrh r0, [r6, #0x3a]
	strh r0, [r4, #4]
_08051BA2:
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8051BAC
sub_8051BAC: @ 0x08051BAC
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r5, [r4, #0x60]
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	movs r2, #0x2e
	ldrsh r0, [r4, r2]
	cmp r1, r0
	ble _08051BDC
	ldr r1, _08051BD8 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r5, #0
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
	b _08051BF8
	.align 2, 0
_08051BD8: .4byte 0x02017744
_08051BDC:
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #1
	movs r1, #0x78
	movs r2, #8
	bl Interpolate
	strh r0, [r5, #4]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
_08051BF8:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8051C00
sub_8051C00: @ 0x08051C00
	ldr r0, _08051C24 @ =0x04000004
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _08051C20
	ldr r2, _08051C28 @ =0x04000014
	ldr r3, _08051C2C @ =0x0201E154
	ldr r1, [r3]
	ldrh r0, [r1]
	strh r0, [r2]
	adds r2, #2
	ldrh r0, [r1]
	strh r0, [r2]
	adds r1, #2
	str r1, [r3]
_08051C20:
	bx lr
	.align 2, 0
_08051C24: .4byte 0x04000004
_08051C28: .4byte 0x04000014
_08051C2C: .4byte 0x0201E154

	thumb_func_start sub_8051C30
sub_8051C30: @ 0x08051C30
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08051C54 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08051C58 @ =0x085D2340
	movs r1, #3
	bl SpawnProc
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r4, [r0, #0x2e]
	strh r1, [r0, #0x30]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08051C54: .4byte 0x02017744
_08051C58: .4byte 0x085D2340

	thumb_func_start sub_8051C5C
sub_8051C5C: @ 0x08051C5C
	push {r4, r5, r6, r7, lr}
	adds r3, r0, #0
	ldr r0, _08051CBC @ =0x0201E3D8
	ldr r0, [r0]
	ldr r4, _08051CC0 @ =0x0201E158
	cmp r0, #0
	bne _08051C6C
	ldr r4, _08051CC4 @ =0x0201E298
_08051C6C:
	movs r2, #0
	ldr r6, _08051CC8 @ =gSinLut
	movs r5, #0xff
_08051C72:
	lsls r0, r2, #1
	movs r7, #0x30
	ldrsh r1, [r3, r7]
	adds r0, r0, r1
	ands r0, r5
	lsls r0, r0, #1
	adds r0, r0, r6
	movs r1, #0
	ldrsh r0, [r0, r1]
	asrs r0, r0, #0xa
	adds r0, #4
	strh r0, [r4]
	adds r4, #2
	adds r2, #1
	cmp r2, #0x9f
	bls _08051C72
	ldrh r0, [r3, #0x30]
	adds r0, #2
	strh r0, [r3, #0x30]
	ldrh r0, [r3, #0x2c]
	adds r0, #1
	strh r0, [r3, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r3, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08051CB6
	ldr r1, _08051CCC @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r3, #0
	bl Proc_Break
_08051CB6:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08051CBC: .4byte 0x0201E3D8
_08051CC0: .4byte 0x0201E158
_08051CC4: .4byte 0x0201E298
_08051CC8: .4byte gSinLut
_08051CCC: .4byte 0x02017744

	thumb_func_start sub_8051CD0
sub_8051CD0: @ 0x08051CD0
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _08051D08 @ =0x085D2358
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08051D08: .4byte 0x085D2358

	thumb_func_start sub_8051D0C
sub_8051D0C: @ 0x08051D0C
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	bl sub_8047C28
	adds r3, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #1
	bne _08051D50
	ldr r0, _08051D4C @ =0x00000127
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl sub_805C804
	adds r0, r5, #0
	bl sub_8051DFC
	ldr r0, [r4, #0x5c]
	bl sub_8051FEC
	b _08051DF6
	.align 2, 0
_08051D4C: .4byte 0x00000127
_08051D50:
	cmp r2, #0x14
	bne _08051D64
	movs r0, #0x94
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	b _08051D90
_08051D64:
	cmp r2, #0x32
	bne _08051D74
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
	b _08051DF6
_08051D74:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	adds r0, r3, #0
	adds r0, #0x46
	cmp r1, r0
	bne _08051D9C
	adds r0, r5, #0
	bl sub_8051E80
	ldr r0, _08051D98 @ =0x00000129
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
_08051D90:
	movs r3, #1
	bl sub_805C804
	b _08051DF6
	.align 2, 0
_08051D98: .4byte 0x00000129
_08051D9C:
	adds r0, r3, #0
	adds r0, #0x49
	cmp r1, r0
	bne _08051DAE
	ldr r0, [r4, #0x5c]
	movs r1, #0xa
	bl sub_8046794
	b _08051DF6
_08051DAE:
	adds r0, r3, #0
	adds r0, #0x4b
	cmp r1, r0
	bne _08051DDC
	adds r0, r5, #0
	bl sub_8051F04
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_8047600
	ldrb r0, [r4]
	cmp r0, #0
	bne _08051DF6
	adds r0, r5, #0
	bl sub_805C358
	b _08051DF6
_08051DDC:
	adds r0, r3, #0
	adds r0, #0x5a
	cmp r1, r0
	beq _08051DF6
	cmp r2, #0x64
	bne _08051DF6
	bl sub_80474BC
	bl sub_8047358
	adds r0, r4, #0
	bl Proc_Break
_08051DF6:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8051DFC
sub_8051DFC: @ 0x08051DFC
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08051E50 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08051E54 @ =0x085D2370
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08051E58 @ =0x0811A530
	str r0, [r5, #0x48]
	ldr r0, _08051E5C @ =0x085D23D8
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08051E60 @ =0x085D2388
	str r0, [r5, #0x54]
	ldr r0, _08051E64 @ =0x08176A6C
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, _08051E68 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08051E76
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08051E6C
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
	b _08051E76
	.align 2, 0
_08051E50: .4byte 0x02017744
_08051E54: .4byte 0x085D2370
_08051E58: .4byte 0x0811A530
_08051E5C: .4byte 0x085D23D8
_08051E60: .4byte 0x085D2388
_08051E64: .4byte 0x08176A6C
_08051E68: .4byte 0x0203CD14
_08051E6C:
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
_08051E76:
	bl sub_8047500
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8051E80
sub_8051E80: @ 0x08051E80
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08051ED4 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08051ED8 @ =0x085D2370
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08051EDC @ =0x0811A59E
	str r0, [r5, #0x48]
	ldr r0, _08051EE0 @ =0x085D2434
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08051EE4 @ =0x085D2428
	str r0, [r5, #0x54]
	ldr r0, _08051EE8 @ =0x08176A6C
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, _08051EEC @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08051EFA
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08051EF0
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _08051EFA
	.align 2, 0
_08051ED4: .4byte 0x02017744
_08051ED8: .4byte 0x085D2370
_08051EDC: .4byte 0x0811A59E
_08051EE0: .4byte 0x085D2434
_08051EE4: .4byte 0x085D2428
_08051EE8: .4byte 0x08176A6C
_08051EEC: .4byte 0x0203CD14
_08051EF0:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_08051EFA:
	bl sub_8047500
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8051F04
sub_8051F04: @ 0x08051F04
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08051F58 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08051F5C @ =0x085D2370
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08051F60 @ =0x0811A5AC
	str r0, [r5, #0x48]
	ldr r0, _08051F64 @ =0x085D2494
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08051F68 @ =0x085D2440
	str r0, [r5, #0x54]
	ldr r0, _08051F6C @ =0x08176A4C
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, _08051F70 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08051F7E
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08051F74
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _08051F7E
	.align 2, 0
_08051F58: .4byte 0x02017744
_08051F5C: .4byte 0x085D2370
_08051F60: .4byte 0x0811A5AC
_08051F64: .4byte 0x085D2494
_08051F68: .4byte 0x085D2440
_08051F6C: .4byte 0x08176A4C
_08051F70: .4byte 0x0203CD14
_08051F74:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_08051F7E:
	bl sub_8047500
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8051F88
sub_8051F88: @ 0x08051F88
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _08051FC4
	ldr r5, [r7, #0x4c]
	ldr r6, [r7, #0x50]
	ldr r0, [r7, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, [r7, #0x5c]
	adds r5, r4, r5
	ldr r1, [r5]
	adds r4, r4, r6
	ldr r2, [r4]
	bl sub_804799C
	b _08051FE2
_08051FC4:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _08051FE2
	bl sub_80474D8
	ldr r1, _08051FE8 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r7, #0
	bl Proc_Break
_08051FE2:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08051FE8: .4byte 0x02017744

	thumb_func_start sub_8051FEC
sub_8051FEC: @ 0x08051FEC
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0805202C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08052030 @ =0x085D24E8
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r3, _08052034 @ =0x085EB83C
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	adds r6, r0, #0
	str r6, [r4, #0x60]
	adds r0, r5, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _08052038
	ldrh r0, [r6, #2]
	subs r0, #6
	b _0805203C
	.align 2, 0
_0805202C: .4byte 0x02017744
_08052030: .4byte 0x085D24E8
_08052034: .4byte 0x085EB83C
_08052038:
	ldrh r0, [r6, #2]
	adds r0, #6
_0805203C:
	strh r0, [r6, #2]
	ldr r0, _08052058 @ =0x0817AC2C
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0805205C @ =0x0817AAC0
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08052058: .4byte 0x0817AC2C
_0805205C: .4byte 0x0817AAC0

	thumb_func_start sub_8052060
sub_8052060: @ 0x08052060
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x2c
	bne _08052086
	ldr r0, [r4, #0x60]
	bl BasRemove
	ldr r1, _0805208C @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08052086:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805208C: .4byte 0x02017744

	thumb_func_start sub_8052090
sub_8052090: @ 0x08052090
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _080520C8 @ =0x085D2500
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080520C8: .4byte 0x085D2500

	thumb_func_start sub_80520CC
sub_80520CC: @ 0x080520CC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	bl sub_8047C28
	adds r6, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r7, #0
	movs r1, #0
	mov r8, r1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08052100
	ldr r0, [r4, #0x5c]
	subs r1, #1
	bl sub_8045C90
_08052100:
	movs r2, #0x2c
	ldrsh r1, [r4, r2]
	adds r0, r6, #1
	cmp r1, r0
	bne _08052158
	adds r0, r5, #0
	bl sub_8052238
	ldr r3, _08052154 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r7, [r0]
	adds r0, #1
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r7, [r0]
	str r1, [sp]
	mov r2, r8
	str r2, [sp, #4]
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0x20
	movs r3, #0
	bl sub_804CD88
	adds r0, r5, #0
	movs r1, #0xaa
	bl sub_80524F4
	movs r0, #0x95
	lsls r0, r0, #1
	b _08052162
	.align 2, 0
_08052154: .4byte gDispIo
_08052158:
	ldr r2, _08052174 @ =0x0000011B
	adds r0, r6, r2
	cmp r1, r0
	bne _0805217C
	ldr r0, _08052178 @ =0x0000012B
_08052162:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl sub_805C804
	b _0805222A
	.align 2, 0
_08052174: .4byte 0x0000011B
_08052178: .4byte 0x0000012B
_0805217C:
	ldr r2, _08052190 @ =0x0000013B
	adds r0, r6, r2
	cmp r1, r0
	bne _08052194
	adds r0, r5, #0
	movs r1, #0x19
	bl sub_80526F4
	b _0805222A
	.align 2, 0
_08052190: .4byte 0x0000013B
_08052194:
	movs r3, #0xaa
	lsls r3, r3, #1
	adds r0, r6, r3
	cmp r1, r0
	bne _080521C6
	adds r0, r5, #0
	movs r1, #0xc
	bl sub_8046794
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_8047610
	ldrb r0, [r4]
	cmp r0, #0
	bne _0805222A
	adds r0, r5, #0
	bl sub_805C358
	b _0805222A
_080521C6:
	movs r2, #0xad
	lsls r2, r2, #1
	adds r0, r6, r2
	cmp r1, r0
	bne _08052212
	movs r0, #0x96
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x78
	movs r3, #0
	bl sub_805C804
	adds r0, r5, #0
	movs r1, #0x64
	bl sub_804D050
	adds r0, r5, #0
	movs r1, #0x64
	bl sub_8052334
	adds r0, r5, #0
	movs r1, #0x64
	bl sub_8052460
	mov r3, r8
	str r3, [sp]
	str r3, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x46
	movs r2, #0x1e
	movs r3, #0x10
	bl sub_804CD88
	adds r0, r5, #0
	bl sub_8052848
	b _0805222A
_08052212:
	movs r2, #0xf5
	lsls r2, r2, #1
	adds r0, r6, r2
	cmp r1, r0
	bne _0805222A
	bl sub_80474BC
	bl sub_8047358
	adds r0, r4, #0
	bl Proc_Break
_0805222A:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8052238
sub_8052238: @ 0x08052238
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _0805228C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08052290 @ =0x085D2518
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08052294 @ =0x0811A602
	str r0, [r5, #0x48]
	ldr r0, _08052298 @ =0x085D2544
	str r0, [r5, #0x4c]
	ldr r0, _0805229C @ =0x085D2530
	str r0, [r5, #0x54]
	ldr r0, _080522A0 @ =0x081BB35C
	movs r1, #0x20
	bl sub_8047AF4
	bl sub_80474C8
	bl sub_8047500
	ldr r0, _080522A4 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _080522B4
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _080522A8
	movs r0, #1
	movs r1, #0xf8
	b _080522AC
	.align 2, 0
_0805228C: .4byte 0x02017744
_08052290: .4byte 0x085D2518
_08052294: .4byte 0x0811A602
_08052298: .4byte 0x085D2544
_0805229C: .4byte 0x085D2530
_080522A0: .4byte 0x081BB35C
_080522A4: .4byte 0x0203CD14
_080522A8:
	movs r0, #1
	movs r1, #0x18
_080522AC:
	movs r2, #0
	bl SetBgOffset
	b _080522C8
_080522B4:
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _080522C8
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	bl SetBgOffset
_080522C8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80522D0
sub_80522D0: @ 0x080522D0
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r0, #0x2c
	adds r1, r6, #0
	adds r1, #0x44
	ldr r2, [r6, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _0805230A
	ldr r5, [r6, #0x4c]
	ldr r0, [r6, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, [r6, #0x5c]
	adds r4, r4, r5
	ldr r1, [r4]
	movs r2, #0x20
	movs r3, #0x14
	bl sub_8047A1C
	b _08052328
_0805230A:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _08052328
	bl sub_80474D8
	ldr r1, _08052330 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r6, #0
	bl Proc_Break
_08052328:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08052330: .4byte 0x02017744

	thumb_func_start sub_8052334
sub_8052334: @ 0x08052334
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0805237C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08052380 @ =0x085D2558
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	strh r1, [r0, #0x32]
	strh r1, [r0, #0x3a]
	strh r1, [r0, #0x34]
	strh r1, [r0, #0x3c]
	ldr r0, _08052384 @ =0x081B8E64
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, _08052388 @ =0x081BB37C
	movs r1, #0x20
	bl sub_8047AF4
	bl sub_80474C8
	bl sub_8047500
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805237C: .4byte 0x02017744
_08052380: .4byte 0x085D2558
_08052384: .4byte 0x081B8E64
_08052388: .4byte 0x081BB37C

	thumb_func_start sub_805238C
sub_805238C: @ 0x0805238C
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r5, r0, #0
	movs r6, #1
	adds r0, r6, #0
	ldrh r1, [r5, #0x2c]
	ands r0, r1
	cmp r0, #0
	beq _080523E8
	ldrh r2, [r5, #0x32]
	subs r2, #0xc
	strh r2, [r5, #0x32]
	ldrh r1, [r5, #0x3a]
	adds r1, #0xc
	strh r1, [r5, #0x3a]
	ldr r0, _080523D8 @ =gDispIo
	strh r2, [r0, #0x20]
	strh r1, [r0, #0x22]
	ldr r0, _080523DC @ =0x081BB5E4
	ldr r4, _080523E0 @ =0x0201977C
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r1, _080523E4 @ =gBg1Tm
	str r6, [sp]
	movs r0, #0x80
	lsls r0, r0, #1
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0x20
	movs r3, #0x20
	bl sub_805B1AC
	movs r0, #2
	bl EnableBgSync
	b _0805241E
	.align 2, 0
_080523D8: .4byte gDispIo
_080523DC: .4byte 0x081BB5E4
_080523E0: .4byte 0x0201977C
_080523E4: .4byte gBg1Tm
_080523E8:
	ldrh r2, [r5, #0x34]
	adds r2, #8
	strh r2, [r5, #0x34]
	ldrh r1, [r5, #0x3c]
	adds r1, #8
	strh r1, [r5, #0x3c]
	ldr r0, _0805244C @ =gDispIo
	strh r2, [r0, #0x20]
	strh r1, [r0, #0x22]
	ldr r0, _08052450 @ =0x081BB5E4
	ldr r4, _08052454 @ =0x0201977C
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r1, _08052458 @ =gBg1Tm
	str r6, [sp]
	movs r0, #0x80
	lsls r0, r0, #1
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0x20
	movs r3, #0x20
	bl sub_805B1DC
	movs r0, #2
	bl EnableBgSync
_0805241E:
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r5, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _08052444
	bl sub_80474D8
	bl sub_80475D8
	ldr r1, _0805245C @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
_08052444:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805244C: .4byte gDispIo
_08052450: .4byte 0x081BB5E4
_08052454: .4byte 0x0201977C
_08052458: .4byte gBg1Tm
_0805245C: .4byte 0x02017744

	thumb_func_start sub_8052460
sub_8052460: @ 0x08052460
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _08052498 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805249C @ =0x085D2570
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	strh r5, [r0, #0x30]
	str r1, [r0, #0x44]
	ldr r1, _080524A0 @ =0x0811A618
	str r1, [r0, #0x48]
	ldr r1, _080524A4 @ =0x081BB37C
	str r1, [r0, #0x4c]
	adds r0, r1, #0
	movs r1, #0x20
	bl sub_8047AF4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08052498: .4byte 0x02017744
_0805249C: .4byte 0x085D2570
_080524A0: .4byte 0x0811A618
_080524A4: .4byte 0x081BB37C

	thumb_func_start sub_80524A8
sub_80524A8: @ 0x080524A8
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _080524CC
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl sub_8047AF4
_080524CC:
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _080524EA
	ldr r1, _080524F0 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_080524EA:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080524F0: .4byte 0x02017744

	thumb_func_start sub_80524F4
sub_80524F4: @ 0x080524F4
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _08052534 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08052538 @ =0x085D2590
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r2, #0
	strh r2, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	strh r2, [r0, #0x30]
	movs r1, #0xa
	str r1, [r0, #0x44]
	str r2, [r0, #0x48]
	ldr r0, _0805253C @ =0x081BC0A8
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _08052540 @ =0x081BBBB4
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08052534: .4byte 0x02017744
_08052538: .4byte 0x085D2590
_0805253C: .4byte 0x081BC0A8
_08052540: .4byte 0x081BBBB4

	thumb_func_start sub_8052544
sub_8052544: @ 0x08052544
	push {lr}
	adds r3, r0, #0
	ldrh r0, [r3, #0x2c]
	adds r0, #1
	strh r0, [r3, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r3, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _0805256C
	ldr r1, _08052568 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r3, #0
	bl Proc_Break
	b _08052592
	.align 2, 0
_08052568: .4byte 0x02017744
_0805256C:
	ldrh r0, [r3, #0x30]
	adds r0, #1
	strh r0, [r3, #0x30]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r3, #0x44]
	cmp r0, r1
	bne _08052592
	movs r0, #0
	strh r0, [r3, #0x30]
	movs r0, #0xa
	str r0, [r3, #0x44]
	ldr r0, [r3, #0x5c]
	ldr r2, [r3, #0x48]
	adds r1, r2, #0
	adds r2, #1
	str r2, [r3, #0x48]
	bl sub_8052598
_08052592:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8052598
sub_8052598: @ 0x08052598
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r1, _08052624 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08052628 @ =0x085D25A8
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r6, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x1e
	bl sub_805B9C8
	adds r0, #0x8c
	strh r0, [r4, #0x2e]
	movs r0, #0x1e
	bl sub_805B9C8
	adds r5, r0, #0
	movs r0, #0x1e
	bl sub_805B9C8
	adds r1, r0, #0
	adds r0, r5, #0
	adds r0, #0x46
	strh r0, [r4, #0x32]
	adds r0, r1, #0
	adds r0, #0x28
	strh r0, [r4, #0x34]
	ldr r0, _0805262C @ =0x0000FFEC
	strh r0, [r4, #0x3a]
	movs r0, #0xa0
	strh r0, [r4, #0x3c]
	ldr r0, _08052630 @ =0x0203CD14
	movs r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #0
	bne _080525F8
	adds r0, r5, #0
	adds r0, #0x5e
	strh r0, [r4, #0x32]
	adds r0, r1, #0
	adds r0, #0x40
	strh r0, [r4, #0x34]
_080525F8:
	adds r0, r6, #0
	bl sub_804B6C4
	cmp r0, #1
	bne _08052610
	movs r0, #0xf0
	ldrh r2, [r4, #0x32]
	subs r1, r0, r2
	strh r1, [r4, #0x32]
	ldrh r1, [r4, #0x34]
	subs r0, r0, r1
	strh r0, [r4, #0x34]
_08052610:
	movs r0, #2
	bl sub_805B9C8
	cmp r0, #0
	beq _08052638
	cmp r0, #1
	beq _08052640
	ldr r0, _08052634 @ =0x08603B2C
	b _08052642
	.align 2, 0
_08052624: .4byte 0x02017744
_08052628: .4byte 0x085D25A8
_0805262C: .4byte 0x0000FFEC
_08052630: .4byte 0x0203CD14
_08052634: .4byte 0x08603B2C
_08052638:
	ldr r0, _0805263C @ =0x08603B1C
	b _08052642
	.align 2, 0
_0805263C: .4byte 0x08603B1C
_08052640:
	ldr r0, _08052660 @ =0x08603B24
_08052642:
	movs r1, #0x78
	bl BasCreate
	adds r1, r0, #0
	str r1, [r4, #0x60]
	cmp r1, #0
	bne _08052668
	ldr r1, _08052664 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_End
	b _08052676
	.align 2, 0
_08052660: .4byte 0x08603B24
_08052664: .4byte 0x02017744
_08052668:
	movs r0, #0x91
	lsls r0, r0, #6
	strh r0, [r1, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r1, #2]
	strh r0, [r1, #4]
_08052676:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_805267C
sub_805267C: @ 0x0805267C
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r6, [r5, #0x60]
	movs r0, #0x2c
	ldrsh r1, [r5, r0]
	movs r2, #0x2e
	ldrsh r0, [r5, r2]
	cmp r1, r0
	ble _080526AC
	ldr r1, _080526A8 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r6, #0
	bl BasRemove
	adds r0, r5, #0
	bl Proc_Break
	b _080526EC
	.align 2, 0
_080526A8: .4byte 0x02017744
_080526AC:
	movs r4, #0x32
	ldrsh r1, [r5, r4]
	movs r7, #0x34
	ldrsh r2, [r5, r7]
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r4, #0x2e
	ldrsh r0, [r5, r4]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	adds r4, r0, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	movs r7, #0x3a
	ldrsh r1, [r5, r7]
	movs r0, #0x3c
	ldrsh r2, [r5, r0]
	movs r7, #0x2c
	ldrsh r3, [r5, r7]
	movs r7, #0x2e
	ldrsh r0, [r5, r7]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	strh r4, [r6, #2]
	strh r0, [r6, #4]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
_080526EC:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80526F4
sub_80526F4: @ 0x080526F4
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r4, r1, #0
	ldr r1, _0805278C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08052790 @ =0x085D25C0
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r6, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	strh r0, [r5, #0x2e]
	strh r4, [r5, #0x30]
	movs r0, #0x5b
	strh r0, [r5, #0x32]
	movs r0, #0x3f
	strh r0, [r5, #0x34]
	ldr r0, _08052794 @ =0x0000FFF6
	strh r0, [r5, #0x3a]
	movs r0, #0x64
	strh r0, [r5, #0x3c]
	ldr r0, _08052798 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _0805273A
	movs r0, #0x73
	strh r0, [r5, #0x32]
	movs r0, #0x57
	strh r0, [r5, #0x34]
_0805273A:
	adds r0, r6, #0
	bl sub_804B6C4
	cmp r0, #1
	bne _08052752
	movs r0, #0xf0
	ldrh r2, [r5, #0x32]
	subs r1, r0, r2
	strh r1, [r5, #0x32]
	ldrh r1, [r5, #0x34]
	subs r0, r0, r1
	strh r0, [r5, #0x34]
_08052752:
	ldr r3, _0805279C @ =0x08603B34
	str r3, [sp]
	adds r0, r6, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r5, #0x60]
	ldrh r1, [r5, #0x32]
	strh r1, [r0, #2]
	ldrh r1, [r5, #0x3a]
	strh r1, [r0, #4]
	ldr r3, _080527A0 @ =0x08603B58
	str r3, [sp]
	adds r0, r6, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r5, #0x64]
	ldrh r1, [r5, #0x32]
	strh r1, [r0, #2]
	ldrh r1, [r5, #0x3a]
	strh r1, [r0, #4]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805278C: .4byte 0x02017744
_08052790: .4byte 0x085D25C0
_08052794: .4byte 0x0000FFF6
_08052798: .4byte 0x0203CD14
_0805279C: .4byte 0x08603B34
_080527A0: .4byte 0x08603B58

	thumb_func_start sub_80527A4
sub_80527A4: @ 0x080527A4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r4, r0, #0
	ldr r6, [r4, #0x60]
	ldr r5, [r4, #0x64]
	movs r0, #0x32
	ldrsh r1, [r4, r0]
	movs r7, #0x34
	ldrsh r2, [r4, r7]
	movs r0, #0x2e
	ldrsh r3, [r4, r0]
	movs r7, #0x30
	ldrsh r0, [r4, r7]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	movs r1, #0
	mov r8, r1
	strh r0, [r5, #2]
	strh r0, [r6, #2]
	movs r2, #0x3a
	ldrsh r1, [r4, r2]
	movs r7, #0x3c
	ldrsh r2, [r4, r7]
	movs r0, #0x2e
	ldrsh r3, [r4, r0]
	movs r7, #0x30
	ldrsh r0, [r4, r7]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	strh r0, [r5, #4]
	strh r0, [r6, #4]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x11
	bne _0805280A
	mov r0, r8
	strh r0, [r4, #0x2c]
	ldr r0, _08052840 @ =0x08603B58
	str r0, [r5, #0x24]
	str r0, [r5, #0x20]
	mov r1, r8
	strh r1, [r6, #6]
_0805280A:
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08052834
	adds r0, r6, #0
	bl BasRemove
	adds r0, r5, #0
	bl BasRemove
	ldr r1, _08052844 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08052834:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08052840: .4byte 0x08603B58
_08052844: .4byte 0x02017744

	thumb_func_start sub_8052848
sub_8052848: @ 0x08052848
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08052870 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08052874 @ =0x085D25D8
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r2, #0
	strh r2, [r0, #0x2c]
	strh r2, [r0, #0x2e]
	movs r1, #1
	str r1, [r0, #0x44]
	str r2, [r0, #0x48]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08052870: .4byte 0x02017744
_08052874: .4byte 0x085D25D8

	thumb_func_start sub_8052878
sub_8052878: @ 0x08052878
	push {lr}
	adds r3, r0, #0
	ldrh r0, [r3, #0x2c]
	adds r0, #1
	strh r0, [r3, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x2f
	bne _080528A0
	ldr r1, _0805289C @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r3, #0
	bl Proc_Break
	b _080528C6
	.align 2, 0
_0805289C: .4byte 0x02017744
_080528A0:
	ldrh r0, [r3, #0x2e]
	adds r0, #1
	strh r0, [r3, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r3, #0x44]
	cmp r0, r1
	bne _080528C6
	movs r0, #0
	strh r0, [r3, #0x2e]
	movs r0, #1
	str r0, [r3, #0x44]
	ldr r0, [r3, #0x5c]
	ldr r2, [r3, #0x48]
	adds r1, r2, #0
	adds r2, #1
	str r2, [r3, #0x48]
	bl sub_80528CC
_080528C6:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80528CC
sub_80528CC: @ 0x080528CC
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08052928 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805292C @ =0x085D25F0
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	movs r0, #0x14
	strh r0, [r5, #0x2e]
	movs r0, #0x78
	bl sub_805B9C8
	adds r1, r0, #0
	subs r1, #0x3c
	strh r1, [r5, #0x32]
	adds r0, #0xb4
	strh r0, [r5, #0x34]
	movs r1, #0x32
	ldrsh r0, [r5, r1]
	lsls r1, r0, #1
	adds r1, r1, r0
	asrs r1, r1, #1
	movs r0, #0x34
	ldrsh r2, [r5, r0]
	lsls r0, r2, #1
	adds r0, r0, r2
	asrs r0, r0, #1
	adds r1, #0xc0
	strh r1, [r5, #0x3a]
	ldr r1, _08052930 @ =0xFFFFFEB8
	adds r0, r0, r1
	strh r0, [r5, #0x3c]
	movs r0, #2
	bl sub_805B9C8
	cmp r0, #1
	bne _08052938
	ldr r0, _08052934 @ =0x08603BA4
	b _0805293A
	.align 2, 0
_08052928: .4byte 0x02017744
_0805292C: .4byte 0x085D25F0
_08052930: .4byte 0xFFFFFEB8
_08052934: .4byte 0x08603BA4
_08052938:
	ldr r0, _08052958 @ =0x08603BC0
_0805293A:
	movs r1, #0x78
	bl BasCreate
	adds r1, r0, #0
	str r1, [r5, #0x60]
	cmp r1, #0
	bne _08052960
	ldr r1, _0805295C @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r5, #0
	bl Proc_End
	b _0805296E
	.align 2, 0
_08052958: .4byte 0x08603BC0
_0805295C: .4byte 0x02017744
_08052960:
	movs r0, #0x91
	lsls r0, r0, #6
	strh r0, [r1, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r1, #2]
	strh r0, [r1, #4]
_0805296E:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8052974
sub_8052974: @ 0x08052974
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r6, [r5, #0x60]
	movs r0, #0x2c
	ldrsh r1, [r5, r0]
	movs r2, #0x2e
	ldrsh r0, [r5, r2]
	cmp r1, r0
	ble _080529A4
	ldr r1, _080529A0 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r6, #0
	bl BasRemove
	adds r0, r5, #0
	bl Proc_Break
	b _080529E4
	.align 2, 0
_080529A0: .4byte 0x02017744
_080529A4:
	movs r4, #0x32
	ldrsh r1, [r5, r4]
	movs r7, #0x34
	ldrsh r2, [r5, r7]
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r4, #0x2e
	ldrsh r0, [r5, r4]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	adds r4, r0, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	movs r7, #0x3a
	ldrsh r1, [r5, r7]
	movs r0, #0x3c
	ldrsh r2, [r5, r0]
	movs r7, #0x2c
	ldrsh r3, [r5, r7]
	movs r7, #0x2e
	ldrsh r0, [r5, r7]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	strh r4, [r6, #2]
	strh r0, [r6, #4]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
_080529E4:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80529EC
sub_80529EC: @ 0x080529EC
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _08052A24 @ =0x085D2608
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08052A24: .4byte 0x085D2608

	thumb_func_start sub_8052A28
sub_8052A28: @ 0x08052A28
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r6, r0, #0
	ldr r0, [r6, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	bl sub_8047C28
	adds r4, r0, #0
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	movs r7, #0
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08052A56
	ldr r0, [r6, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
_08052A56:
	movs r0, #0x2c
	ldrsh r1, [r6, r0]
	adds r0, r4, #1
	cmp r1, r0
	bne _08052AD4
	ldr r4, _08052AC4 @ =0x000001D1
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_8052BA8
	adds r0, r5, #0
	bl sub_8052D40
	adds r0, r5, #0
	bl sub_8052C68
	ldr r1, _08052AC8 @ =0x0000018B
	adds r0, r5, #0
	movs r2, #0xa
	bl sub_805315C
	ldr r1, _08052ACC @ =0x0000019F
	adds r0, r5, #0
	movs r2, #0x14
	bl sub_80531C4
	adds r0, r5, #0
	bl sub_8052DF4
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_805304C
	movs r0, #3
	str r0, [sp]
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #0x14
	movs r3, #0x80
	bl sub_804C8D4
	adds r1, r0, #0
	adds r0, r5, #0
	movs r2, #0x8c
	bl sub_80530E4
	ldr r2, _08052AD0 @ =sub_804CD4C
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_804CC68
	movs r0, #0x82
	lsls r0, r0, #1
	b _08052B38
	.align 2, 0
_08052AC4: .4byte 0x000001D1
_08052AC8: .4byte 0x0000018B
_08052ACC: .4byte 0x0000019F
_08052AD0: .4byte sub_804CD4C
_08052AD4:
	adds r0, r4, #0
	adds r0, #0x92
	cmp r1, r0
	bne _08052AE4
	ldr r0, _08052AE0 @ =0x00000105
	b _08052B38
	.align 2, 0
_08052AE0: .4byte 0x00000105
_08052AE4:
	movs r2, #0xe6
	lsls r2, r2, #1
	adds r0, r4, r2
	cmp r1, r0
	bne _08052AFA
	adds r0, r5, #0
	movs r1, #0xa
	movs r2, #0x14
	bl sub_804685C
	b _08052B9A
_08052AFA:
	ldr r2, _08052B48 @ =0x000001D5
	adds r0, r4, r2
	cmp r1, r0
	bne _08052B4C
	adds r0, r5, #0
	movs r1, #0xa0
	bl sub_805327C
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x6e
	movs r2, #0x28
	movs r3, #0x10
	bl sub_804CD88
	adds r0, r5, #0
	movs r1, #0x8c
	movs r2, #0x18
	bl sub_8053420
	adds r0, r5, #0
	movs r1, #0x3c
	bl sub_8053530
	adds r0, r5, #0
	movs r1, #0x5a
	bl sub_804D050
	movs r0, #0x83
	lsls r0, r0, #1
_08052B38:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x78
	movs r3, #0
	bl sub_805C804
	b _08052B9A
	.align 2, 0
_08052B48: .4byte 0x000001D5
_08052B4C:
	ldr r2, _08052B78 @ =0x0000020D
	adds r0, r4, r2
	cmp r1, r0
	bne _08052B7C
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, r6, #0
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_8047600
	ldrb r0, [r4]
	cmp r0, #0
	bne _08052B9A
	adds r0, r5, #0
	bl sub_805C358
	b _08052B9A
	.align 2, 0
_08052B78: .4byte 0x0000020D
_08052B7C:
	ldr r2, _08052BA4 @ =0x00000271
	adds r0, r4, r2
	cmp r1, r0
	beq _08052B9A
	adds r2, #0xa
	adds r0, r4, r2
	cmp r1, r0
	bne _08052B9A
	bl sub_80474BC
	bl sub_8047358
	adds r0, r6, #0
	bl Proc_Break
_08052B9A:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08052BA4: .4byte 0x00000271

	thumb_func_start sub_8052BA8
sub_8052BA8: @ 0x08052BA8
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _08052C18 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08052C1C @ =0x085D2620
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	ldr r0, _08052C20 @ =0x0817AC4C
	movs r1, #0x84
	lsls r1, r1, #5
	bl sub_8047ACC
	bl sub_80474D8
	ldr r0, _08052C24 @ =0x0817B438
	ldr r4, _08052C28 @ =0x0201977C
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r1, _08052C2C @ =gBg1Tm
	movs r0, #1
	str r0, [sp]
	adds r0, #0xff
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0x20
	movs r3, #0x14
	bl sub_805B1AC
	bl sub_8047500
	ldr r2, _08052C30 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08052C18: .4byte 0x02017744
_08052C1C: .4byte 0x085D2620
_08052C20: .4byte 0x0817AC4C
_08052C24: .4byte 0x0817B438
_08052C28: .4byte 0x0201977C
_08052C2C: .4byte gBg1Tm
_08052C30: .4byte gDispIo

	thumb_func_start sub_8052C34
sub_8052C34: @ 0x08052C34
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _08052C5E
	bl sub_80474D8
	ldr r1, _08052C64 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_End
_08052C5E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08052C64: .4byte 0x02017744

	thumb_func_start sub_8052C68
sub_8052C68: @ 0x08052C68
	push {r4, lr}
	ldr r1, _08052C94 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08052C98 @ =0x085D2638
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	bl SetBgOffset
	movs r0, #0
	strh r0, [r4, #0x2c]
	strh r0, [r4, #0x2e]
	strh r0, [r4, #0x30]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08052C94: .4byte 0x02017744
_08052C98: .4byte 0x085D2638

	thumb_func_start sub_8052C9C
sub_8052C9C: @ 0x08052C9C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0x30
	ldrsh r3, [r6, r0]
	movs r0, #0x96
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0xff
	bl Interpolate
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	ldrh r1, [r6, #0x30]
	movs r3, #0x30
	ldrsh r0, [r6, r3]
	cmp r0, #0x96
	bgt _08052CC6
	adds r0, r1, #1
	strh r0, [r6, #0x30]
_08052CC6:
	ldrh r3, [r6, #0x2e]
	movs r1, #0xff
	ands r1, r3
	ldr r5, _08052D34 @ =0x08605A94
	lsls r0, r1, #1
	adds r0, r0, r5
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	ldrh r0, [r0]
	muls r0, r2, r0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x18
	ldr r4, _08052D38 @ =gDispIo
	strh r0, [r4, #0x20]
	adds r1, #0x40
	lsls r1, r1, #1
	adds r1, r1, r5
	ldrh r1, [r1]
	adds r0, r1, #0
	muls r0, r2, r0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x18
	adds r0, #0x10
	strh r0, [r4, #0x22]
	adds r3, #2
	strh r3, [r6, #0x2e]
	movs r0, #1
	ldrh r1, [r6, #0x2c]
	ands r0, r1
	cmp r0, #0
	bne _08052D0E
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	bl SetBgOffset
_08052D0E:
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	movs r1, #0xa0
	lsls r1, r1, #0x11
	cmp r0, r1
	bne _08052D2C
	ldr r1, _08052D3C @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r6, #0
	bl Proc_Break
_08052D2C:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08052D34: .4byte 0x08605A94
_08052D38: .4byte gDispIo
_08052D3C: .4byte 0x02017744

	thumb_func_start sub_8052D40
sub_8052D40: @ 0x08052D40
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08052D7C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08052D80 @ =0x085D2658
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	movs r1, #0x10
	strh r1, [r0, #0x2e]
	ldr r0, _08052D84 @ =0x0817B418
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, _08052D88 @ =gPal
	movs r1, #1
	movs r2, #1
	movs r3, #0x10
	bl sub_805B5C8
	bl EnablePalSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08052D7C: .4byte 0x02017744
_08052D80: .4byte 0x085D2658
_08052D84: .4byte 0x0817B418
_08052D88: .4byte gPal

	thumb_func_start sub_8052D8C
sub_8052D8C: @ 0x08052D8C
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r1, #0x2e
	ldrsh r0, [r5, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r4, r0, #0
	ldr r0, _08052DE8 @ =0x0817B418
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, _08052DEC @ =gPal
	movs r1, #1
	movs r2, #1
	adds r3, r4, #0
	bl sub_805B5C8
	bl EnablePalSync
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r5, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08052DDE
	ldr r1, _08052DF0 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
_08052DDE:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08052DE8: .4byte 0x0817B418
_08052DEC: .4byte gPal
_08052DF0: .4byte 0x02017744

	thumb_func_start sub_8052DF4
sub_8052DF4: @ 0x08052DF4
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r4, #0
_08052DFA:
	ldr r0, _08052E24 @ =0x085D2678
	movs r1, #3
	bl SpawnProc
	str r5, [r0, #0x5c]
	str r4, [r0, #0x44]
	adds r4, #1
	cmp r4, #7
	bls _08052DFA
	ldr r0, _08052E28 @ =0x0817BBB4
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _08052E2C @ =0x0817B8D0
	movs r1, #0x80
	lsls r1, r1, #4
	bl sub_8047A88
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08052E24: .4byte 0x085D2678
_08052E28: .4byte 0x0817BBB4
_08052E2C: .4byte 0x0817B8D0

	thumb_func_start sub_8052E30
sub_8052E30: @ 0x08052E30
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r1, _08052E90 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	movs r0, #0
	strh r0, [r4, #0x2c]
	strh r0, [r4, #0x2e]
	ldr r0, [r4, #0x44]
	lsls r1, r0, #0xd
	strh r1, [r4, #0x30]
	ldr r1, _08052E94 @ =0x085D26B0
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r3, [r0]
	ldr r0, [r4, #0x5c]
	str r3, [sp]
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	ldr r1, _08052E98 @ =0x0000F3FF
	ldrh r2, [r0, #8]
	ands r1, r2
	movs r3, #0x80
	lsls r3, r3, #3
	adds r2, r3, #0
	orrs r1, r2
	strh r1, [r0, #8]
	movs r1, #0x80
	lsls r1, r1, #1
	strh r1, [r0, #2]
	strh r1, [r0, #4]
	movs r0, #0x78
	strh r0, [r4, #0x32]
	movs r0, #0x40
	strh r0, [r4, #0x3a]
	adds r0, r4, #0
	bl Proc_Break
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08052E90: .4byte 0x02017744
_08052E94: .4byte 0x085D26B0
_08052E98: .4byte 0x0000F3FF

	thumb_func_start sub_8052E9C
sub_8052E9C: @ 0x08052E9C
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r4, [r5, #0x60]
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r7, #0x3c
	str r7, [sp]
	movs r0, #0
	movs r1, #0xb4
	movs r2, #0x32
	bl Interpolate
	ldrh r2, [r5, #0x30]
	movs r3, #0xc0
	lsls r3, r3, #2
	adds r1, r2, r3
	movs r6, #0
	strh r1, [r5, #0x30]
	lsrs r2, r1, #8
	ldr r3, _08052F24 @ =gSinLut
	lsls r1, r2, #1
	adds r1, r1, r3
	adds r2, #0x40
	lsls r2, r2, #1
	adds r2, r2, r3
	movs r3, #0
	ldrsh r1, [r1, r3]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	muls r1, r0, r1
	lsls r1, r1, #4
	movs r3, #0
	ldrsh r2, [r2, r3]
	muls r0, r2, r0
	lsls r0, r0, #4
	asrs r1, r1, #0x10
	ldrh r2, [r5, #0x32]
	adds r1, r2, r1
	asrs r0, r0, #0x10
	ldrh r3, [r5, #0x3a]
	adds r0, r3, r0
	strh r1, [r4, #2]
	strh r0, [r4, #4]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3c
	ble _08052F04
	strh r7, [r5, #0x2c]
_08052F04:
	ldrh r0, [r5, #0x2e]
	adds r0, #1
	strh r0, [r5, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x78
	ble _08052F1C
	strh r6, [r5, #0x2c]
	strh r6, [r5, #0x2e]
	adds r0, r5, #0
	bl Proc_Break
_08052F1C:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08052F24: .4byte gSinLut

	thumb_func_start sub_8052F28
sub_8052F28: @ 0x08052F28
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r4, [r5, #0x60]
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r7, #0x50
	str r7, [sp]
	movs r0, #0
	movs r1, #0x32
	movs r2, #0
	bl Interpolate
	ldrh r2, [r5, #0x30]
	movs r3, #0xc0
	lsls r3, r3, #2
	adds r1, r2, r3
	movs r6, #0
	strh r1, [r5, #0x30]
	lsrs r2, r1, #8
	ldr r3, _08052FB0 @ =gSinLut
	lsls r1, r2, #1
	adds r1, r1, r3
	adds r2, #0x40
	lsls r2, r2, #1
	adds r2, r2, r3
	movs r3, #0
	ldrsh r1, [r1, r3]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	muls r1, r0, r1
	lsls r1, r1, #4
	movs r3, #0
	ldrsh r2, [r2, r3]
	muls r0, r2, r0
	lsls r0, r0, #4
	asrs r1, r1, #0x10
	ldrh r2, [r5, #0x32]
	adds r1, r2, r1
	asrs r0, r0, #0x10
	ldrh r3, [r5, #0x3a]
	adds r0, r3, r0
	strh r1, [r4, #2]
	strh r0, [r4, #4]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x50
	ble _08052F90
	strh r7, [r5, #0x2c]
_08052F90:
	ldrh r0, [r5, #0x2e]
	adds r0, #1
	strh r0, [r5, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x50
	ble _08052FA8
	strh r6, [r5, #0x2c]
	strh r6, [r5, #0x2e]
	adds r0, r5, #0
	bl Proc_Break
_08052FA8:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08052FB0: .4byte gSinLut

	thumb_func_start sub_8052FB4
sub_8052FB4: @ 0x08052FB4
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r4, [r5, #0x60]
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r6, #0x32
	str r6, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0xb4
	bl Interpolate
	ldrh r2, [r5, #0x30]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r2, r3
	strh r1, [r5, #0x30]
	lsrs r2, r1, #8
	ldr r3, _08053044 @ =gSinLut
	lsls r1, r2, #1
	adds r1, r1, r3
	adds r2, #0x40
	lsls r2, r2, #1
	adds r2, r2, r3
	movs r3, #0
	ldrsh r1, [r1, r3]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	muls r1, r0, r1
	lsls r1, r1, #4
	movs r3, #0
	ldrsh r2, [r2, r3]
	muls r0, r2, r0
	lsls r0, r0, #4
	asrs r1, r1, #0x10
	ldrh r2, [r5, #0x32]
	adds r1, r2, r1
	asrs r0, r0, #0x10
	ldrh r3, [r5, #0x3a]
	adds r0, r3, r0
	strh r1, [r4, #2]
	strh r0, [r4, #4]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x32
	ble _0805301A
	strh r6, [r5, #0x2c]
_0805301A:
	ldrh r0, [r5, #0x2e]
	adds r0, #1
	strh r0, [r5, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x32
	ble _0805303C
	ldr r0, _08053048 @ =0x02017744
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r5, #0x60]
	bl BasRemove
	adds r0, r5, #0
	bl Proc_Break
_0805303C:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08053044: .4byte gSinLut
_08053048: .4byte 0x02017744

	thumb_func_start sub_805304C
sub_805304C: @ 0x0805304C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _0805307C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08053080 @ =0x085D26D0
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	strh r5, [r0, #0x30]
	str r1, [r0, #0x44]
	ldr r1, _08053084 @ =0x0811A62A
	str r1, [r0, #0x48]
	ldr r1, _08053088 @ =0x0817BBB6
	str r1, [r0, #0x4c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805307C: .4byte 0x02017744
_08053080: .4byte 0x085D26D0
_08053084: .4byte 0x0811A62A
_08053088: .4byte 0x0817BBB6

	thumb_func_start sub_805308C
sub_805308C: @ 0x0805308C
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #0
	blt _080530B6
	ldr r0, [r4, #0x4c]
	ldr r1, _080530DC @ =0x0202170A
	movs r2, #0xf
	str r2, [sp]
	adds r2, r3, #0
	movs r3, #0xf
	bl sub_8047B6C
_080530B6:
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _080530D4
	ldr r1, _080530E0 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_080530D4:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080530DC: .4byte 0x0202170A
_080530E0: .4byte 0x02017744

	thumb_func_start sub_80530E4
sub_80530E4: @ 0x080530E4
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	adds r5, r2, #0
	ldr r1, _0805310C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08053110 @ =0x085D26F0
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	str r6, [r0, #0x64]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805310C: .4byte 0x02017744
_08053110: .4byte 0x085D26F0

	thumb_func_start sub_8053114
sub_8053114: @ 0x08053114
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r4, [r5, #0x64]
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r1, #0x2e
	ldrsh r0, [r5, r1]
	str r0, [sp]
	movs r0, #4
	movs r1, #0x80
	movs r2, #0
	bl Interpolate
	str r0, [r4, #0x4c]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r5, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08053150
	ldr r1, _08053158 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
_08053150:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08053158: .4byte 0x02017744

	thumb_func_start sub_805315C
sub_805315C: @ 0x0805315C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	ldr r1, _08053184 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08053188 @ =0x085D2708
	movs r1, #3
	bl SpawnProc
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r4, [r0, #0x2e]
	strh r5, [r0, #0x30]
	str r6, [r0, #0x5c]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08053184: .4byte 0x02017744
_08053188: .4byte 0x085D2708

	thumb_func_start sub_805318C
sub_805318C: @ 0x0805318C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _080531B8
	ldr r1, _080531C0 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	ldr r0, [r4, #0x5c]
	movs r2, #0x30
	ldrsh r1, [r4, r2]
	bl sub_8046794
	adds r0, r4, #0
	bl Proc_Break
_080531B8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080531C0: .4byte 0x02017744

	thumb_func_start sub_80531C4
sub_80531C4: @ 0x080531C4
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	ldr r1, _080531EC @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080531F0 @ =0x085D2720
	movs r1, #3
	bl SpawnProc
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r4, [r0, #0x2e]
	strh r5, [r0, #0x30]
	str r6, [r0, #0x5c]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080531EC: .4byte 0x02017744
_080531F0: .4byte 0x085D2720

	thumb_func_start sub_80531F4
sub_80531F4: @ 0x080531F4
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	ldrh r3, [r2, #0x2e]
	lsls r1, r3, #0x10
	cmp r0, r1
	ble _08053212
	movs r0, #0
	strh r0, [r2, #0x2c]
	adds r0, r2, #0
	bl Proc_Break
_08053212:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8053218
sub_8053218: @ 0x08053218
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r1, #0x30
	ldrsh r0, [r5, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r4, r0, #0
	ldr r0, _08053270 @ =0x0817B418
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, _08053274 @ =gPal
	movs r1, #1
	movs r2, #1
	adds r3, r4, #0
	bl sub_805B644
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r5, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08053266
	ldr r1, _08053278 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
_08053266:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08053270: .4byte 0x0817B418
_08053274: .4byte gPal
_08053278: .4byte 0x02017744

	thumb_func_start sub_805327C
sub_805327C: @ 0x0805327C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	ldr r1, _08053320 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08053324 @ =0x085D2740
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r6, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	strh r0, [r5, #0x2e]
	strh r4, [r5, #0x30]
	str r0, [r5, #0x44]
	ldr r0, _08053328 @ =0x0811A668
	str r0, [r5, #0x48]
	ldr r0, _0805332C @ =0x085D2768
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08053330 @ =0x085D2758
	str r0, [r5, #0x54]
	ldr r0, _08053334 @ =0x08181E60
	movs r1, #0x20
	bl sub_8047AF4
	bl sub_8047500
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl sub_805894C
	cmp r0, #0
	beq _08053318
	ldr r0, [r5, #0x5c]
	bl sub_804B80C
	ldr r4, _08053338 @ =gDispIo
	movs r2, #4
	rsbs r2, r2, #0
	adds r1, r2, #0
	ldrb r3, [r4, #0xc]
	ands r1, r3
	strb r1, [r4, #0xc]
	adds r1, r2, #0
	ldrb r3, [r4, #0x18]
	ands r1, r3
	movs r3, #1
	orrs r1, r3
	strb r1, [r4, #0x18]
	ldrb r1, [r4, #0x10]
	ands r2, r1
	movs r1, #2
	orrs r2, r1
	strb r2, [r4, #0x10]
	movs r1, #3
	ldrb r2, [r4, #0x14]
	orrs r1, r2
	strb r1, [r4, #0x14]
	ldr r1, _0805333C @ =0x0000F3FF
	adds r2, r1, #0
	ldrh r3, [r6, #8]
	ands r2, r3
	movs r4, #0x80
	lsls r4, r4, #3
	adds r3, r4, #0
	orrs r2, r3
	strh r2, [r6, #8]
	ldrh r2, [r0, #8]
	ands r1, r2
	orrs r1, r3
	strh r1, [r0, #8]
_08053318:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08053320: .4byte 0x02017744
_08053324: .4byte 0x085D2740
_08053328: .4byte 0x0811A668
_0805332C: .4byte 0x085D2768
_08053330: .4byte 0x085D2758
_08053334: .4byte 0x08181E60
_08053338: .4byte gDispIo
_0805333C: .4byte 0x0000F3FF

	thumb_func_start sub_8053340
sub_8053340: @ 0x08053340
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	ldr r0, [r7, #0x5c]
	bl sub_804B80C
	mov r8, r0
	adds r0, r7, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _08053388
	ldr r5, [r7, #0x4c]
	ldr r6, [r7, #0x50]
	ldr r0, [r7, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, [r7, #0x5c]
	adds r5, r4, r5
	ldr r1, [r5]
	adds r4, r4, r6
	ldr r2, [r4]
	bl sub_804799C
_08053388:
	ldrh r0, [r7, #0x2e]
	adds r0, #1
	strh r0, [r7, #0x2e]
	lsls r0, r0, #0x10
	ldrh r2, [r7, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _08053408
	bl sub_805894C
	cmp r0, #0
	beq _080533F2
	ldr r3, _08053414 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x18]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x18]
	movs r0, #3
	ldrb r1, [r3, #0x14]
	orrs r0, r1
	strb r0, [r3, #0x14]
	ldr r2, [r7, #0x5c]
	ldr r1, _08053418 @ =0x0000F3FF
	adds r0, r1, #0
	ldrh r3, [r2, #8]
	ands r0, r3
	strh r0, [r2, #8]
	ldr r2, [r7, #0x5c]
	movs r0, #0x80
	lsls r0, r0, #4
	adds r3, r0, #0
	ldrh r0, [r2, #8]
	orrs r0, r3
	strh r0, [r2, #8]
	mov r2, r8
	ldrh r2, [r2, #8]
	ands r1, r2
	orrs r1, r3
	mov r3, r8
	strh r1, [r3, #8]
_080533F2:
	bl sub_80474D8
	ldr r1, _0805341C @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r7, #0
	bl Proc_End
_08053408:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08053414: .4byte gDispIo
_08053418: .4byte 0x0000F3FF
_0805341C: .4byte 0x02017744

	thumb_func_start sub_8053420
sub_8053420: @ 0x08053420
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	ldr r1, _080534A4 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080534A8 @ =0x085D2778
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	strh r6, [r4, #0x2e]
	mov r0, r8
	strh r0, [r4, #0x30]
	ldr r3, _080534AC @ =0x085EBF40
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	adds r5, r0, #0
	str r5, [r4, #0x60]
	movs r0, #0x78
	strh r0, [r5, #2]
	movs r0, #0x48
	strh r0, [r5, #4]
	movs r0, #0x14
	strh r0, [r5, #0xa]
	bl BasSort
	bl sub_805894C
	cmp r0, #0
	beq _08053486
	ldr r0, _080534B0 @ =0x0000F3FF
	ldrh r1, [r5, #8]
	ands r0, r1
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5, #8]
_08053486:
	ldr r0, _080534B4 @ =0x081629D4
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _080534B8 @ =0x081830F4
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080534A4: .4byte 0x02017744
_080534A8: .4byte 0x085D2778
_080534AC: .4byte 0x085EBF40
_080534B0: .4byte 0x0000F3FF
_080534B4: .4byte 0x081629D4
_080534B8: .4byte 0x081830F4

	thumb_func_start sub_80534BC
sub_80534BC: @ 0x080534BC
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r2, [r4, #0x60]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r3, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r5, [r4, #0x2e]
	lsls r1, r5, #0x10
	cmp r0, r1
	ble _080534EE
	strh r3, [r4, #0x2c]
	ldr r0, _080534F4 @ =0x085EC478
	str r0, [r2, #0x24]
	str r0, [r2, #0x20]
	strh r3, [r2, #6]
	ldr r0, _080534F8 @ =0x0818360C
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	adds r0, r4, #0
	bl Proc_Break
_080534EE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080534F4: .4byte 0x085EC478
_080534F8: .4byte 0x0818360C

	thumb_func_start sub_80534FC
sub_80534FC: @ 0x080534FC
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08053524
	ldr r0, [r4, #0x60]
	bl BasRemove
	ldr r1, _0805352C @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08053524:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805352C: .4byte 0x02017744

	thumb_func_start sub_8053530
sub_8053530: @ 0x08053530
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _08053560 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08053564 @ =0x085D2798
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r2, #0
	strh r2, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	strh r2, [r0, #0x30]
	movs r1, #1
	str r1, [r0, #0x44]
	str r2, [r0, #0x48]
	str r2, [r0, #0x4c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08053560: .4byte 0x02017744
_08053564: .4byte 0x085D2798

	thumb_func_start sub_8053568
sub_8053568: @ 0x08053568
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r1, #0
	mov ip, r1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _08053594
	ldr r1, _08053590 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
	b _080535E4
	.align 2, 0
_08053590: .4byte 0x02017744
_08053594:
	ldrh r0, [r4, #0x30]
	adds r0, #1
	strh r0, [r4, #0x30]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r4, #0x44]
	cmp r0, r1
	bne _080535E4
	mov r0, ip
	strh r0, [r4, #0x30]
	movs r0, #2
	str r0, [r4, #0x44]
	ldr r3, _080535EC @ =0x085D27B0
	ldr r1, [r4, #0x4c]
	lsls r2, r1, #2
	adds r0, r2, r3
	ldr r7, [r0]
	ldr r0, _080535F0 @ =0x085D287C
	adds r0, r2, r0
	ldr r6, [r0]
	ldr r0, _080535F4 @ =0x085D2944
	adds r2, r2, r0
	ldr r5, [r2]
	adds r1, #1
	str r1, [r4, #0x4c]
	lsls r1, r1, #2
	adds r1, r1, r3
	ldr r1, [r1]
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _080535D8
	mov r1, ip
	str r1, [r4, #0x4c]
_080535D8:
	ldr r0, [r4, #0x5c]
	adds r1, r7, #0
	adds r2, r6, #0
	adds r3, r5, #0
	bl sub_80535F8
_080535E4:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080535EC: .4byte 0x085D27B0
_080535F0: .4byte 0x085D287C
_080535F4: .4byte 0x085D2944

	thumb_func_start sub_80535F8
sub_80535F8: @ 0x080535F8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	mov r8, r0
	adds r4, r1, #0
	adds r5, r2, #0
	adds r7, r3, #0
	ldr r1, _08053644 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08053648 @ =0x085D2A0C
	movs r1, #3
	bl SpawnProc
	adds r6, r0, #0
	mov r0, r8
	str r0, [r6, #0x5c]
	movs r0, #0
	strh r0, [r6, #0x2c]
	strh r4, [r6, #0x2e]
	str r5, [r6, #0x44]
	lsls r4, r4, #0xb
	adds r5, r5, r4
	str r5, [r6, #0x48]
	movs r0, #0x78
	strh r0, [r6, #0x32]
	movs r0, #0x48
	strh r0, [r6, #0x3a]
	cmp r7, #6
	bhi _0805367C
	lsls r0, r7, #2
	ldr r1, _0805364C @ =_08053650
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08053644: .4byte 0x02017744
_08053648: .4byte 0x085D2A0C
_0805364C: .4byte _08053650
_08053650: @ jump table
	.4byte _0805366C @ case 0
	.4byte _0805366C @ case 1
	.4byte _0805366C @ case 2
	.4byte _0805366C @ case 3
	.4byte _0805366C @ case 4
	.4byte _08053674 @ case 5
	.4byte _0805367C @ case 6
_0805366C:
	ldr r3, _08053670 @ =0x085EBF60
	b _0805367E
	.align 2, 0
_08053670: .4byte 0x085EBF60
_08053674:
	ldr r3, _08053678 @ =0x085EBF58
	b _0805367E
	.align 2, 0
_08053678: .4byte 0x085EBF58
_0805367C:
	ldr r3, _080536BC @ =0x085EBF50
_0805367E:
	str r3, [sp]
	mov r0, r8
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	adds r4, r0, #0
	str r4, [r6, #0x60]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r4, #2]
	strh r0, [r4, #4]
	bl sub_805894C
	cmp r0, #0
	beq _080536AE
	ldr r0, _080536C0 @ =0x0000F3FF
	ldrh r1, [r4, #8]
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r4, #8]
_080536AE:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080536BC: .4byte 0x085EBF50
_080536C0: .4byte 0x0000F3FF

	thumb_func_start sub_80536C4
sub_80536C4: @ 0x080536C4
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r5, [r6, #0x60]
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r1, #0x2e
	ldrsh r0, [r6, r1]
	str r0, [sp]
	movs r0, #1
	movs r1, #0x6e
	movs r2, #0
	bl Interpolate
	adds r4, r0, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldr r1, [r6, #0x44]
	ldr r2, [r6, #0x48]
	movs r7, #0x2c
	ldrsh r3, [r6, r7]
	movs r7, #0x2e
	ldrsh r0, [r6, r7]
	str r0, [sp]
	movs r0, #1
	bl Interpolate
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x18
	ldr r2, _0805375C @ =gSinLut
	lsls r1, r0, #1
	adds r1, r1, r2
	adds r0, #0x40
	lsls r0, r0, #1
	adds r0, r0, r2
	movs r2, #0
	ldrsh r1, [r1, r2]
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	muls r1, r4, r1
	lsls r1, r1, #4
	movs r7, #0
	ldrsh r0, [r0, r7]
	muls r0, r4, r0
	lsls r0, r0, #4
	asrs r1, r1, #0x10
	ldrh r2, [r6, #0x32]
	adds r1, r2, r1
	asrs r0, r0, #0x10
	ldrh r7, [r6, #0x3a]
	adds r0, r7, r0
	strh r1, [r5, #2]
	strh r0, [r5, #4]
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r6, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08053752
	ldr r0, [r6, #0x60]
	bl BasRemove
	ldr r1, _08053760 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r6, #0
	bl Proc_Break
_08053752:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805375C: .4byte gSinLut
_08053760: .4byte 0x02017744

	thumb_func_start sub_8053764
sub_8053764: @ 0x08053764
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _0805379C @ =0x085D2A24
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805379C: .4byte 0x085D2A24

	thumb_func_start sub_80537A0
sub_80537A0: @ 0x080537A0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	ldr r0, [r6, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	bl sub_8047C28
	adds r4, r0, #0
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	movs r1, #0
	mov r8, r1
	movs r7, #0
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _080537D6
	ldr r0, [r6, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
_080537D6:
	movs r2, #0x2c
	ldrsh r1, [r6, r2]
	adds r0, r4, #1
	cmp r1, r0
	bne _08053848
	ldr r3, _08053844 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	mov r2, r8
	strb r2, [r0]
	adds r0, #1
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	str r1, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0x1e
	movs r3, #0
	bl sub_804CD88
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0xa0
	movs r2, #0x1e
	movs r3, #0x10
	bl sub_804CD88
	ldr r0, [r6, #0x5c]
	bl sub_8053954
	ldr r0, [r6, #0x5c]
	bl sub_8053CB4
	movs r0, #0x9c
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x78
	movs r3, #0
	bl sub_805C804
	b _08053946
	.align 2, 0
_08053844: .4byte gDispIo
_08053848:
	adds r0, r4, #0
	adds r0, #0x7f
	cmp r1, r0
	bne _0805387C
	movs r0, #2
	str r0, [sp]
	adds r0, r5, #0
	movs r1, #0x52
	movs r2, #0xf
	movs r3, #0
	bl sub_804C8D4
	adds r1, r0, #0
	adds r0, r5, #0
	movs r2, #0x3c
	bl sub_8050D68
	ldr r2, _08053878 @ =sub_804CD4C
	adds r0, r5, #0
	movs r1, #0x53
	bl sub_804CC68
	b _08053946
	.align 2, 0
_08053878: .4byte sub_804CD4C
_0805387C:
	adds r0, r4, #0
	adds r0, #0xd2
	cmp r1, r0
	bne _0805388C
	adds r0, r5, #0
	bl sub_80539C4
	b _08053946
_0805388C:
	adds r0, r4, #0
	adds r0, #0xd7
	cmp r1, r0
	bne _080538AC
	ldr r0, _080538A8 @ =0x00000139
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl sub_805C804
	b _08053946
	.align 2, 0
_080538A8: .4byte 0x00000139
_080538AC:
	adds r0, r4, #0
	adds r0, #0xf1
	cmp r1, r0
	bne _080538BC
	ldr r0, [r6, #0x5c]
	bl sub_8053AFC
	b _08053946
_080538BC:
	movs r2, #0x9e
	lsls r2, r2, #1
	adds r0, r4, r2
	cmp r1, r0
	bne _08053902
	movs r0, #0x9d
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl sub_805C804
	adds r0, r5, #0
	movs r1, #0xa
	bl sub_8046794
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, r6, #0
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_8047600
	ldrb r0, [r4]
	cmp r0, #0
	bne _08053946
	adds r0, r5, #0
	bl sub_805C358
	b _08053946
_08053902:
	movs r2, #0xa3
	lsls r2, r2, #1
	adds r0, r4, r2
	cmp r1, r0
	bne _08053924
	adds r0, r5, #0
	bl sub_8053A44
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x10
	movs r2, #0xa
	movs r3, #0x10
	bl sub_804CD88
	b _08053946
_08053924:
	movs r3, #0xaf
	lsls r3, r3, #1
	adds r0, r4, r3
	cmp r1, r0
	beq _08053946
	movs r2, #0xb4
	lsls r2, r2, #1
	adds r0, r4, r2
	cmp r1, r0
	bne _08053946
	bl sub_80474BC
	bl sub_8047358
	adds r0, r6, #0
	bl Proc_Break
_08053946:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8053954
sub_8053954: @ 0x08053954
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _080539A8 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080539AC @ =0x085D2A3C
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _080539B0 @ =0x0811A67A
	str r1, [r0, #0x48]
	ldr r1, _080539B4 @ =0x085D2A54
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _080539B8 @ =0x085D2AC0
	str r1, [r0, #0x54]
	ldr r0, _080539BC @ =0x0816B328
	movs r1, #0x20
	bl sub_8047AF4
	bl sub_8047500
	ldr r2, _080539C0 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080539A8: .4byte 0x02017744
_080539AC: .4byte 0x085D2A3C
_080539B0: .4byte 0x0811A67A
_080539B4: .4byte 0x085D2A54
_080539B8: .4byte 0x085D2AC0
_080539BC: .4byte 0x0816B328
_080539C0: .4byte gDispIo

	thumb_func_start sub_80539C4
sub_80539C4: @ 0x080539C4
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08053A28 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08053A2C @ =0x085D2A3C
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r4, #0
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _08053A30 @ =0x0811A680
	str r1, [r0, #0x48]
	ldr r1, _08053A34 @ =0x085D2A54
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _08053A38 @ =0x085D2AC0
	str r1, [r0, #0x54]
	ldr r0, _08053A3C @ =0x0818BBCC
	movs r1, #0x20
	bl sub_8047AF4
	bl sub_8047500
	ldr r3, _08053A40 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r0, #0xc
	strb r0, [r1]
	adds r1, #1
	movs r0, #6
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08053A28: .4byte 0x02017744
_08053A2C: .4byte 0x085D2A3C
_08053A30: .4byte 0x0811A680
_08053A34: .4byte 0x085D2A54
_08053A38: .4byte 0x085D2AC0
_08053A3C: .4byte 0x0818BBCC
_08053A40: .4byte gDispIo

	thumb_func_start sub_8053A44
sub_8053A44: @ 0x08053A44
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08053A80 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08053A84 @ =0x085D2A3C
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _08053A88 @ =0x0811A722
	str r1, [r0, #0x48]
	ldr r1, _08053A8C @ =0x085D2A54
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _08053A90 @ =0x085D2AC0
	str r1, [r0, #0x54]
	ldr r0, _08053A94 @ =0x0818BBEC
	movs r1, #0x20
	bl sub_8047AF4
	bl sub_8047500
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08053A80: .4byte 0x02017744
_08053A84: .4byte 0x085D2A3C
_08053A88: .4byte 0x0811A722
_08053A8C: .4byte 0x085D2A54
_08053A90: .4byte 0x085D2AC0
_08053A94: .4byte 0x0818BBEC

	thumb_func_start sub_8053A98
sub_8053A98: @ 0x08053A98
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _08053AD4
	ldr r5, [r7, #0x4c]
	ldr r6, [r7, #0x50]
	ldr r0, [r7, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, [r7, #0x5c]
	adds r5, r4, r5
	ldr r1, [r5]
	adds r4, r4, r6
	ldr r2, [r4]
	bl sub_804799C
	b _08053AF2
_08053AD4:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _08053AF2
	bl sub_80474D8
	ldr r1, _08053AF8 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r7, #0
	bl Proc_Break
_08053AF2:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08053AF8: .4byte 0x02017744

	thumb_func_start sub_8053AFC
sub_8053AFC: @ 0x08053AFC
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _08053B54 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08053B58 @ =0x085D2B2C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	adds r0, r5, #0
	bl sub_804B80C
	adds r5, r0, #0
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r3, _08053B5C @ =0x085D0E8C
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	adds r6, r0, #0
	str r6, [r4, #0x60]
	ldr r0, _08053B60 @ =0x0000F3FF
	ldrh r1, [r6, #8]
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r6, #8]
	adds r0, r5, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _08053B64
	ldrh r0, [r6, #2]
	subs r0, #8
	b _08053B68
	.align 2, 0
_08053B54: .4byte 0x02017744
_08053B58: .4byte 0x085D2B2C
_08053B5C: .4byte 0x085D0E8C
_08053B60: .4byte 0x0000F3FF
_08053B64:
	ldrh r0, [r6, #2]
	adds r0, #8
_08053B68:
	strh r0, [r6, #2]
	ldrh r0, [r6, #4]
	subs r0, #0x10
	strh r0, [r6, #4]
	bl sub_8058998
	cmp r0, #0
	beq _08053B7E
	ldrh r0, [r6, #2]
	subs r0, #0x10
	strh r0, [r6, #2]
_08053B7E:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8053B88
sub_8053B88: @ 0x08053B88
	push {lr}
	ldr r2, _08053B9C @ =0x02017744
	ldr r1, [r2]
	subs r1, #1
	str r1, [r2]
	ldr r0, [r0, #0x60]
	bl BasRemove
	pop {r0}
	bx r0
	.align 2, 0
_08053B9C: .4byte 0x02017744

	thumb_func_start sub_8053BA0
sub_8053BA0: @ 0x08053BA0
	push {r4, lr}
	adds r1, r0, #0
	ldr r2, [r1, #0x60]
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	movs r4, #0
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #1
	bne _08053BE4
	ldr r0, _08053BD8 @ =0x085EC630
	str r0, [r2, #0x24]
	str r0, [r2, #0x20]
	strh r4, [r2, #6]
	movs r0, #0xa
	strh r0, [r1, #0x2e]
	ldr r0, _08053BDC @ =0x0818EA78
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _08053BE0 @ =0x0818DD18
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	b _08053BF4
	.align 2, 0
_08053BD8: .4byte 0x085EC630
_08053BDC: .4byte 0x0818EA78
_08053BE0: .4byte 0x0818DD18
_08053BE4:
	movs r2, #0x2e
	ldrsh r0, [r1, r2]
	cmp r3, r0
	bne _08053BF4
	strh r4, [r1, #0x2c]
	adds r0, r1, #0
	bl Proc_Break
_08053BF4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8053BFC
sub_8053BFC: @ 0x08053BFC
	push {r4, lr}
	adds r1, r0, #0
	ldr r2, [r1, #0x60]
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	movs r4, #0
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #1
	bne _08053C40
	ldr r0, _08053C34 @ =0x085EC938
	str r0, [r2, #0x24]
	str r0, [r2, #0x20]
	strh r4, [r2, #6]
	movs r0, #0xa
	strh r0, [r1, #0x2e]
	ldr r0, _08053C38 @ =0x0818EA78
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _08053C3C @ =0x0818E1E4
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	b _08053C50
	.align 2, 0
_08053C34: .4byte 0x085EC938
_08053C38: .4byte 0x0818EA78
_08053C3C: .4byte 0x0818E1E4
_08053C40:
	movs r2, #0x2e
	ldrsh r0, [r1, r2]
	cmp r3, r0
	bne _08053C50
	strh r4, [r1, #0x2c]
	adds r0, r1, #0
	bl Proc_Break
_08053C50:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8053C58
sub_8053C58: @ 0x08053C58
	push {r4, lr}
	adds r1, r0, #0
	ldr r2, [r1, #0x60]
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	movs r4, #0
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #1
	bne _08053C9C
	ldr r0, _08053C90 @ =0x085ECC34
	str r0, [r2, #0x24]
	str r0, [r2, #0x20]
	strh r4, [r2, #6]
	movs r0, #0xa
	strh r0, [r1, #0x2e]
	ldr r0, _08053C94 @ =0x0818EA78
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _08053C98 @ =0x0818E67C
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	b _08053CAC
	.align 2, 0
_08053C90: .4byte 0x085ECC34
_08053C94: .4byte 0x0818EA78
_08053C98: .4byte 0x0818E67C
_08053C9C:
	movs r2, #0x2e
	ldrsh r0, [r1, r2]
	cmp r3, r0
	bne _08053CAC
	strh r4, [r1, #0x2c]
	adds r0, r1, #0
	bl Proc_Break
_08053CAC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8053CB4
sub_8053CB4: @ 0x08053CB4
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08053CEC @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08053CF0 @ =0x085D2B74
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	movs r1, #0x64
	strh r1, [r0, #0x30]
	ldr r0, _08053CF4 @ =0x081629D4
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _08053CF8 @ =0x08161DDC
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08053CEC: .4byte 0x02017744
_08053CF0: .4byte 0x085D2B74
_08053CF4: .4byte 0x081629D4
_08053CF8: .4byte 0x08161DDC

	thumb_func_start sub_8053CFC
sub_8053CFC: @ 0x08053CFC
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x12
	bne _08053D4E
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r0, _08053D54 @ =0x085D2B8C
	movs r1, #0x2e
	ldrsh r2, [r4, r1]
	lsls r1, r2, #2
	adds r1, r1, r0
	lsls r2, r2, #1
	adds r2, #1
	lsls r2, r2, #1
	adds r2, r2, r0
	ldr r0, [r4, #0x5c]
	movs r3, #0
	ldrsh r1, [r1, r3]
	movs r3, #0
	ldrsh r2, [r2, r3]
	bl sub_8053D5C
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #6
	bne _08053D4E
	ldr r1, _08053D58 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08053D4E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08053D54: .4byte 0x085D2B8C
_08053D58: .4byte 0x02017744

	thumb_func_start sub_8053D5C
sub_8053D5C: @ 0x08053D5C
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	ldr r1, _08053DA4 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08053DA8 @ =0x085D2BA4
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r3, _08053DAC @ =0x085EAC34
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	strh r6, [r0, #2]
	mov r1, r8
	strh r1, [r0, #4]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08053DA4: .4byte 0x02017744
_08053DA8: .4byte 0x085D2BA4
_08053DAC: .4byte 0x085EAC34

	thumb_func_start sub_8053DB0
sub_8053DB0: @ 0x08053DB0
	push {lr}
	ldr r2, _08053DC4 @ =0x02017744
	ldr r1, [r2]
	subs r1, #1
	str r1, [r2]
	ldr r0, [r0, #0x60]
	bl BasRemove
	pop {r0}
	bx r0
	.align 2, 0
_08053DC4: .4byte 0x02017744

	thumb_func_start sub_8053DC8
sub_8053DC8: @ 0x08053DC8
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _08053E00 @ =0x085D2BC4
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08053E00: .4byte 0x085D2BC4

	thumb_func_start sub_8053E04
sub_8053E04: @ 0x08053E04
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	ldr r0, [r6, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	bl sub_8047C28
	adds r4, r0, #0
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	movs r1, #0
	mov r8, r1
	movs r7, #0
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08053E3A
	ldr r0, [r6, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
_08053E3A:
	movs r2, #0x2c
	ldrsh r1, [r6, r2]
	adds r0, r4, #1
	cmp r1, r0
	bne _08053ED0
	adds r0, r5, #0
	movs r1, #0x64
	bl sub_8053FF4
	adds r0, r5, #0
	movs r1, #0x64
	bl sub_80540D0
	movs r4, #0x80
	lsls r4, r4, #1
	movs r0, #1
	str r0, [sp]
	adds r0, r5, #0
	movs r1, #0x64
	movs r2, #2
	adds r3, r4, #0
	bl sub_804C8D4
	ldr r2, _08053EC8 @ =sub_804CD4C
	adds r0, r5, #0
	movs r1, #0x69
	bl sub_804CC68
	ldr r3, _08053ECC @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	mov r2, r8
	strb r2, [r0]
	adds r0, #1
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	str r1, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0xf
	movs r3, #0
	bl sub_804CD88
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x46
	movs r2, #0xf
	movs r3, #0x10
	bl sub_804CD88
	movs r0, #0x98
	lsls r0, r0, #1
	adds r1, r4, #0
	movs r2, #0x78
	movs r3, #0
	bl sub_805C804
	b _08053FE8
	.align 2, 0
_08053EC8: .4byte sub_804CD4C
_08053ECC: .4byte gDispIo
_08053ED0:
	adds r0, r4, #0
	adds r0, #0x28
	cmp r1, r0
	bne _08053EE8
	adds r0, r5, #0
	movs r1, #0x4a
	bl sub_8054168
	ldr r0, _08053EE4 @ =0x00000131
	b _08053F40
	.align 2, 0
_08053EE4: .4byte 0x00000131
_08053EE8:
	adds r0, r4, #0
	adds r0, #0x6e
	cmp r1, r0
	bne _08053EF8
	adds r0, r5, #0
	bl sub_80541FC
	b _08053FE8
_08053EF8:
	adds r0, r4, #0
	adds r0, #0x6f
	cmp r1, r0
	beq _08053F3C
	adds r0, r4, #0
	adds r0, #0x8b
	cmp r1, r0
	beq _08053F3C
	adds r0, r4, #0
	adds r0, #0xa7
	cmp r1, r0
	beq _08053F3C
	adds r0, r4, #0
	adds r0, #0xc3
	cmp r1, r0
	beq _08053F3C
	adds r0, r4, #0
	adds r0, #0xdf
	cmp r1, r0
	beq _08053F3C
	adds r0, r4, #0
	adds r0, #0xfb
	cmp r1, r0
	beq _08053F3C
	ldr r2, _08053F50 @ =0x00000117
	adds r0, r4, r2
	cmp r1, r0
	beq _08053F3C
	movs r0, #0x2c
	ldrsh r1, [r6, r0]
	ldr r7, _08053F54 @ =0x00000133
	adds r0, r4, r7
	cmp r1, r0
	bne _08053F58
_08053F3C:
	movs r0, #0x99
	lsls r0, r0, #1
_08053F40:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r3, #1
	bl sub_805C804
	b _08053FE8
	.align 2, 0
_08053F50: .4byte 0x00000117
_08053F54: .4byte 0x00000133
_08053F58:
	movs r2, #0xb3
	lsls r2, r2, #1
	adds r0, r4, r2
	cmp r1, r0
	bne _08053FA2
	adds r0, r5, #0
	movs r1, #0xa
	bl sub_8046794
	adds r0, r5, #0
	bl sub_80543C4
	movs r0, #9
	ldrh r3, [r5, #0x10]
	orrs r0, r3
	strh r0, [r5, #0x10]
	adds r4, r6, #0
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_8047600
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #2
	ldrsh r2, [r5, r0]
	adds r0, r7, #0
	movs r3, #1
	bl sub_805C804
	ldrb r0, [r4]
	cmp r0, #0
	bne _08053FE8
	adds r0, r5, #0
	bl sub_805C358
	b _08053FE8
_08053FA2:
	movs r2, #0xb8
	lsls r2, r2, #1
	adds r0, r4, r2
	cmp r1, r0
	bne _08053FC6
	adds r0, r5, #0
	bl sub_805428C
	movs r0, #0
	str r0, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x12
	movs r2, #8
	movs r3, #0x10
	bl sub_804CD88
	b _08053FE8
_08053FC6:
	movs r3, #0xcd
	lsls r3, r3, #1
	adds r0, r4, r3
	cmp r1, r0
	beq _08053FE8
	movs r2, #0xd2
	lsls r2, r2, #1
	adds r0, r4, r2
	cmp r1, r0
	bne _08053FE8
	bl sub_80474BC
	bl sub_8047358
	adds r0, r6, #0
	bl Proc_Break
_08053FE8:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8053FF4
sub_8053FF4: @ 0x08053FF4
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _08054068 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805406C @ =0x085D2BDC
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	ldr r0, _08054070 @ =0x0818EA98
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	bl sub_80474D8
	ldr r0, _08054074 @ =0x0818F3D8
	ldr r4, _08054078 @ =0x0201977C
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r1, _0805407C @ =gBg1Tm
	movs r0, #1
	str r0, [sp]
	adds r0, #0xff
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0x20
	movs r3, #0x20
	bl sub_805B1AC
	movs r0, #2
	bl EnableBgSync
	bl sub_8047500
	ldr r2, _08054080 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08054068: .4byte 0x02017744
_0805406C: .4byte 0x085D2BDC
_08054070: .4byte 0x0818EA98
_08054074: .4byte 0x0818F3D8
_08054078: .4byte 0x0201977C
_0805407C: .4byte gBg1Tm
_08054080: .4byte gDispIo

	thumb_func_start sub_8054084
sub_8054084: @ 0x08054084
	push {lr}
	bl sub_80474D8
	ldr r1, _0805409C @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	pop {r0}
	bx r0
	.align 2, 0
_0805409C: .4byte 0x02017744

	thumb_func_start sub_80540A0
sub_80540A0: @ 0x080540A0
	push {lr}
	adds r2, r0, #0
	ldr r0, _080540CC @ =gDispIo
	ldrh r1, [r0, #0x22]
	adds r1, #1
	strh r1, [r0, #0x22]
	ldrh r1, [r0, #0x20]
	subs r1, #1
	strh r1, [r0, #0x20]
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	ldrh r3, [r2, #0x2e]
	lsls r1, r3, #0x10
	cmp r0, r1
	ble _080540C8
	adds r0, r2, #0
	bl Proc_Break
_080540C8:
	pop {r0}
	bx r0
	.align 2, 0
_080540CC: .4byte gDispIo

	thumb_func_start sub_80540D0
sub_80540D0: @ 0x080540D0
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _08054108 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805410C @ =0x085D2BFC
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	strh r5, [r0, #0x30]
	str r1, [r0, #0x44]
	ldr r1, _08054110 @ =0x0811A758
	str r1, [r0, #0x48]
	ldr r1, _08054114 @ =0x0818F1F8
	str r1, [r0, #0x4c]
	adds r0, r1, #0
	movs r1, #0x20
	bl sub_8047AF4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08054108: .4byte 0x02017744
_0805410C: .4byte 0x085D2BFC
_08054110: .4byte 0x0811A758
_08054114: .4byte 0x0818F1F8

	thumb_func_start sub_8054118
sub_8054118: @ 0x08054118
	ldr r1, _08054124 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_08054124: .4byte 0x02017744

	thumb_func_start sub_8054128
sub_8054128: @ 0x08054128
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0805414C
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl sub_8047AF4
_0805414C:
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08054162
	adds r0, r4, #0
	bl Proc_Break
_08054162:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8054168
sub_8054168: @ 0x08054168
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r1, _080541B4 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080541B8 @ =0x085D2C24
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	strh r6, [r4, #0x2e]
	ldr r3, _080541BC @ =0x085ED924
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	ldr r0, _080541C0 @ =0x0819875C
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _080541C4 @ =0x08197BE0
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080541B4: .4byte 0x02017744
_080541B8: .4byte 0x085D2C24
_080541BC: .4byte 0x085ED924
_080541C0: .4byte 0x0819875C
_080541C4: .4byte 0x08197BE0

	thumb_func_start sub_80541C8
sub_80541C8: @ 0x080541C8
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _080541F0
	ldr r0, _080541F8 @ =0x02017744
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r4, #0x60]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
_080541F0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080541F8: .4byte 0x02017744

	thumb_func_start sub_80541FC
sub_80541FC: @ 0x080541FC
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08054260 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08054264 @ =0x085D2C3C
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08054268 @ =0x0811A796
	str r0, [r5, #0x48]
	ldr r0, _0805426C @ =0x085D2D20
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08054270 @ =0x085D2C54
	str r0, [r5, #0x54]
	ldr r0, _08054274 @ =0x08193598
	movs r1, #0x20
	bl sub_8047AF4
	bl sub_8047500
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _08054278 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08054286
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _0805427C
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _08054286
	.align 2, 0
_08054260: .4byte 0x02017744
_08054264: .4byte 0x085D2C3C
_08054268: .4byte 0x0811A796
_0805426C: .4byte 0x085D2D20
_08054270: .4byte 0x085D2C54
_08054274: .4byte 0x08193598
_08054278: .4byte 0x0203CD14
_0805427C:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_08054286:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_805428C
sub_805428C: @ 0x0805428C
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _080542E4 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080542E8 @ =0x085D2C3C
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _080542EC @ =0x08119F50
	str r0, [r5, #0x48]
	ldr r0, _080542F0 @ =0x085D1430
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _080542F4 @ =0x085D13DC
	str r0, [r5, #0x54]
	ldr r0, _080542F8 @ =0x081935B8
	movs r1, #0x20
	bl sub_8047AF4
	bl sub_8047500
	ldr r0, _080542FC @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0805430A
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08054300
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _0805430A
	.align 2, 0
_080542E4: .4byte 0x02017744
_080542E8: .4byte 0x085D2C3C
_080542EC: .4byte 0x08119F50
_080542F0: .4byte 0x085D1430
_080542F4: .4byte 0x085D13DC
_080542F8: .4byte 0x081935B8
_080542FC: .4byte 0x0203CD14
_08054300:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_0805430A:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8054310
sub_8054310: @ 0x08054310
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r4, r0, #0x10
	cmp r4, #0
	blt _08054398
	ldr r5, [r7, #0x4c]
	ldr r6, [r7, #0x50]
	ldr r0, [r7, #0x54]
	lsls r4, r4, #2
	adds r0, r4, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, [r7, #0x5c]
	adds r5, r4, r5
	ldr r1, [r5]
	adds r4, r4, r6
	ldr r2, [r4]
	bl sub_804799C
	ldr r0, _08054374 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _080543B6
	ldr r0, [r7, #0x5c]
	bl sub_804B6C4
	adds r1, r0, #0
	cmp r1, #0
	bne _0805437C
	ldr r0, _08054378 @ =gBg1Tm
	str r1, [sp]
	movs r1, #3
	movs r2, #0x14
	movs r3, #0
	bl sub_805B094
	b _0805438C
	.align 2, 0
_08054374: .4byte 0x0203CD14
_08054378: .4byte gBg1Tm
_0805437C:
	ldr r0, _08054394 @ =0x02022342
	movs r1, #0
	str r1, [sp]
	movs r1, #3
	movs r2, #0x14
	movs r3, #0
	bl sub_805B094
_0805438C:
	movs r0, #2
	bl EnableBgSync
	b _080543B6
	.align 2, 0
_08054394: .4byte 0x02022342
_08054398:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _080543B6
	bl sub_80474D8
	ldr r1, _080543C0 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r7, #0
	bl Proc_Break
_080543B6:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080543C0: .4byte 0x02017744

	thumb_func_start sub_80543C4
sub_80543C4: @ 0x080543C4
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _080543FC @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08054400 @ =0x085D2DEC
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	str r1, [r0, #0x44]
	ldr r0, _08054404 @ =0x0819877C
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _08054408 @ =0x08197BE0
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080543FC: .4byte 0x02017744
_08054400: .4byte 0x085D2DEC
_08054404: .4byte 0x0819877C
_08054408: .4byte 0x08197BE0

	thumb_func_start sub_805440C
sub_805440C: @ 0x0805440C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #2
	bne _0805444C
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r0, [r4, #0x5c]
	ldr r2, [r4, #0x44]
	adds r1, r2, #0
	adds r2, #1
	str r2, [r4, #0x44]
	bl sub_8054458
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #8
	bne _0805444C
	ldr r1, _08054454 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0805444C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08054454: .4byte 0x02017744

	thumb_func_start sub_8054458
sub_8054458: @ 0x08054458
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	ldr r1, _08054498 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805449C @ =0x085D2E04
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r6, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	movs r0, #0x1e
	strh r0, [r5, #0x2e]
	ldr r1, _080544A0 @ =0x085D2E1C
	movs r0, #7
	ands r0, r4
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	str r0, [r5, #0x44]
	movs r1, #0
	movs r0, #1
	ands r0, r4
	cmp r0, #0
	beq _080544A4
	cmp r0, #1
	beq _080544AC
	b _080544B8
	.align 2, 0
_08054498: .4byte 0x02017744
_0805449C: .4byte 0x085D2E04
_080544A0: .4byte 0x085D2E1C
_080544A4:
	ldr r0, _080544A8 @ =0x085ED8CC
	b _080544AE
	.align 2, 0
_080544A8: .4byte 0x085ED8CC
_080544AC:
	ldr r0, _080544D4 @ =0x085ED8F8
_080544AE:
	movs r1, #0x78
	bl BasCreate
	adds r1, r0, #0
	str r1, [r5, #0x60]
_080544B8:
	movs r0, #0xa1
	lsls r0, r0, #6
	strh r0, [r1, #8]
	ldrh r0, [r6, #2]
	strh r0, [r1, #2]
	ldrh r0, [r6, #2]
	strh r0, [r5, #0x32]
	ldrh r0, [r6, #4]
	strh r0, [r1, #4]
	ldrh r0, [r6, #4]
	strh r0, [r5, #0x3a]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080544D4: .4byte 0x085ED8F8

	thumb_func_start sub_80544D8
sub_80544D8: @ 0x080544D8
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r5, [r6, #0x60]
	movs r2, #0x96
	lsls r2, r2, #1
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r1, #0x2e
	ldrsh r0, [r6, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	ldr r4, _08054550 @ =gSinLut
	ldr r2, [r6, #0x44]
	lsls r1, r2, #1
	adds r1, r1, r4
	movs r3, #0
	ldrsh r1, [r1, r3]
	adds r3, r0, #0
	muls r3, r1, r3
	adds r2, #0x40
	lsls r2, r2, #1
	adds r2, r2, r4
	movs r4, #0
	ldrsh r1, [r2, r4]
	muls r0, r1, r0
	asrs r3, r3, #0xc
	ldrh r1, [r6, #0x32]
	adds r3, r1, r3
	strh r3, [r5, #2]
	asrs r0, r0, #0xc
	ldrh r2, [r6, #0x3a]
	adds r0, r2, r0
	strh r0, [r5, #4]
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	ldrh r3, [r6, #0x2e]
	lsls r1, r3, #0x10
	cmp r0, r1
	ble _08054546
	ldr r0, _08054554 @ =0x02017744
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r6, #0x60]
	bl BasRemove
	adds r0, r6, #0
	bl Proc_Break
_08054546:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08054550: .4byte gSinLut
_08054554: .4byte 0x02017744

	thumb_func_start sub_8054558
sub_8054558: @ 0x08054558
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _0805457C @ =0x085D2E3C
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805457C: .4byte 0x085D2E3C

	thumb_func_start sub_8054580
sub_8054580: @ 0x08054580
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r6, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _080545B0
	ldr r0, [r4, #0x5c]
	bl sub_8054F8C
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xf3
	b _0805465C
_080545B0:
	cmp r0, #0x34
	bne _08054618
	ldr r0, [r4, #0x5c]
	movs r1, #0
	bl sub_8054B98
	ldr r0, [r4, #0x5c]
	movs r1, #0
	bl sub_8054D78
	ldr r3, _08054614 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r6, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r6, [r0]
	ldr r0, [r4, #0x5c]
	movs r1, #1
	movs r2, #0xc
	movs r3, #0
	bl sub_8054EA0
	ldr r0, [r4, #0x5c]
	movs r1, #0x23
	movs r2, #0x19
	movs r3, #1
	bl sub_8054EA0
	movs r0, #0x87
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	b _0805465C
	.align 2, 0
_08054614: .4byte gDispIo
_08054618:
	cmp r0, #0x37
	bne _08054626
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	b _080546A0
_08054626:
	cmp r0, #0x71
	bne _08054668
	ldr r0, [r4, #0x5c]
	movs r1, #0
	bl sub_8054C54
	ldr r0, [r4, #0x5c]
	movs r1, #0
	bl sub_8054DE8
	ldr r0, [r4, #0x5c]
	movs r1, #1
	movs r2, #0xc
	movs r3, #0
	bl sub_8054EA0
	ldr r0, [r4, #0x5c]
	movs r1, #0x1d
	movs r2, #0x19
	movs r3, #1
	bl sub_8054EA0
	ldr r0, _08054664 @ =0x0000010F
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
_0805465C:
	movs r3, #1
	bl sub_805C804
	b _080546A0
	.align 2, 0
_08054664: .4byte 0x0000010F
_08054668:
	cmp r0, #0xa6
	bne _08054674
	adds r0, r5, #0
	bl sub_80451E0
	b _080546A0
_08054674:
	cmp r0, #0xb5
	bne _080546A0
	bl sub_80474BC
	bl sub_8047358
	adds r0, r5, #0
	bl sub_804B848
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, r1
	beq _0805469A
	movs r0, #2
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
_0805469A:
	adds r0, r4, #0
	bl Proc_Break
_080546A0:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80546A8
sub_80546A8: @ 0x080546A8
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _080546CC @ =0x085D2E54
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080546CC: .4byte 0x085D2E54

	thumb_func_start sub_80546D0
sub_80546D0: @ 0x080546D0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	bl sub_8047C28
	adds r2, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r6, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08054706
	ldr r0, [r4, #0x5c]
	bl sub_8054F8C
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xf3
	b _080547EE
_08054706:
	cmp r0, #0x34
	bne _0805476C
	ldr r0, [r4, #0x5c]
	movs r1, #1
	bl sub_8054B98
	ldr r0, [r4, #0x5c]
	movs r1, #1
	bl sub_8054D78
	ldr r3, _08054768 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r6, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r6, [r0]
	ldr r0, [r4, #0x5c]
	movs r1, #1
	movs r2, #0xc
	movs r3, #0
	bl sub_8054EA0
	ldr r0, [r4, #0x5c]
	movs r1, #0x23
	movs r2, #0x19
	movs r3, #1
	bl sub_8054EA0
	movs r0, #0x88
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	b _080547EE
	.align 2, 0
_08054768: .4byte gDispIo
_0805476C:
	cmp r0, #0x37
	bne _0805477A
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	b _08054840
_0805477A:
	cmp r0, #0x71
	bne _0805478A
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
	b _08054840
_0805478A:
	movs r3, #0x2c
	ldrsh r1, [r4, r3]
	adds r0, r2, #0
	adds r0, #0x72
	cmp r1, r0
	bne _08054800
	ldr r0, [r4, #0x5c]
	movs r1, #1
	bl sub_8054C54
	ldr r0, [r4, #0x5c]
	movs r1, #1
	bl sub_8054DE8
	ldr r3, _080547F8 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r6, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r6, [r0]
	ldr r0, [r4, #0x5c]
	movs r1, #1
	movs r2, #0xc
	movs r3, #0
	bl sub_8054EA0
	ldr r0, [r4, #0x5c]
	movs r1, #0x1d
	movs r2, #0x19
	movs r3, #1
	bl sub_8054EA0
	ldr r0, _080547FC @ =0x00000111
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
_080547EE:
	movs r3, #1
	bl sub_805C804
	b _08054840
	.align 2, 0
_080547F8: .4byte gDispIo
_080547FC: .4byte 0x00000111
_08054800:
	adds r0, r2, #0
	adds r0, #0xa6
	cmp r1, r0
	bne _08054810
	adds r0, r5, #0
	bl sub_80451E0
	b _08054840
_08054810:
	adds r0, r2, #0
	adds r0, #0xb5
	cmp r1, r0
	bne _08054840
	bl sub_80474BC
	bl sub_8047358
	adds r0, r5, #0
	bl sub_804B848
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, r1
	beq _0805483A
	movs r0, #2
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
_0805483A:
	adds r0, r4, #0
	bl Proc_Break
_08054840:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8054848
sub_8054848: @ 0x08054848
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _0805486C @ =0x085D2E6C
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805486C: .4byte 0x085D2E6C

	thumb_func_start sub_8054870
sub_8054870: @ 0x08054870
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	bl sub_8047C28
	adds r2, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r6, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _080548A6
	ldr r0, [r4, #0x5c]
	bl sub_8054F8C
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xf3
	b _0805498E
_080548A6:
	cmp r0, #0x34
	bne _0805490C
	ldr r0, [r4, #0x5c]
	movs r1, #2
	bl sub_8054B98
	ldr r0, [r4, #0x5c]
	movs r1, #2
	bl sub_8054D78
	ldr r3, _08054908 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r6, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r6, [r0]
	ldr r0, [r4, #0x5c]
	movs r1, #1
	movs r2, #0xc
	movs r3, #0
	bl sub_8054EA0
	ldr r0, [r4, #0x5c]
	movs r1, #0x23
	movs r2, #0x19
	movs r3, #1
	bl sub_8054EA0
	movs r0, #0x89
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	b _0805498E
	.align 2, 0
_08054908: .4byte gDispIo
_0805490C:
	cmp r0, #0x37
	bne _0805491A
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	b _080549E0
_0805491A:
	cmp r0, #0x71
	bne _0805492A
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
	b _080549E0
_0805492A:
	movs r3, #0x2c
	ldrsh r1, [r4, r3]
	adds r0, r2, #0
	adds r0, #0x72
	cmp r1, r0
	bne _080549A0
	ldr r0, [r4, #0x5c]
	movs r1, #2
	bl sub_8054C54
	ldr r0, [r4, #0x5c]
	movs r1, #2
	bl sub_8054DE8
	ldr r3, _08054998 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r6, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r6, [r0]
	ldr r0, [r4, #0x5c]
	movs r1, #1
	movs r2, #0xc
	movs r3, #0
	bl sub_8054EA0
	ldr r0, [r4, #0x5c]
	movs r1, #0x1d
	movs r2, #0x19
	movs r3, #1
	bl sub_8054EA0
	ldr r0, _0805499C @ =0x00000113
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
_0805498E:
	movs r3, #1
	bl sub_805C804
	b _080549E0
	.align 2, 0
_08054998: .4byte gDispIo
_0805499C: .4byte 0x00000113
_080549A0:
	adds r0, r2, #0
	adds r0, #0xa6
	cmp r1, r0
	bne _080549B0
	adds r0, r5, #0
	bl sub_80451E0
	b _080549E0
_080549B0:
	adds r0, r2, #0
	adds r0, #0xb5
	cmp r1, r0
	bne _080549E0
	bl sub_80474BC
	bl sub_8047358
	adds r0, r5, #0
	bl sub_804B848
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, r1
	beq _080549DA
	movs r0, #2
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
_080549DA:
	adds r0, r4, #0
	bl Proc_Break
_080549E0:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80549E8
sub_80549E8: @ 0x080549E8
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _08054A0C @ =0x085D2E84
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08054A0C: .4byte 0x085D2E84

	thumb_func_start sub_8054A10
sub_8054A10: @ 0x08054A10
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	bl sub_8047C28
	adds r2, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r6, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08054A4E
	ldr r0, [r4, #0x5c]
	bl sub_8054F8C
	ldr r0, [r4, #0x5c]
	movs r1, #0
	bl sub_80550EC
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xf3
	b _08054B3E
_08054A4E:
	cmp r0, #0x34
	bne _08054AB4
	ldr r0, [r4, #0x5c]
	movs r1, #0
	bl sub_8054B98
	ldr r0, [r4, #0x5c]
	movs r1, #0
	bl sub_8054D78
	ldr r3, _08054AB0 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r6, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r6, [r0]
	ldr r0, [r4, #0x5c]
	movs r1, #1
	movs r2, #0xc
	movs r3, #0
	bl sub_8054EA0
	ldr r0, [r4, #0x5c]
	movs r1, #0x23
	movs r2, #0x19
	movs r3, #1
	bl sub_8054EA0
	movs r0, #0x87
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	b _08054B3E
	.align 2, 0
_08054AB0: .4byte gDispIo
_08054AB4:
	cmp r0, #0x37
	bne _08054AC2
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	b _08054B90
_08054AC2:
	cmp r0, #0x97
	bne _08054ADA
	ldr r0, [r4, #0x5c]
	movs r1, #1
	bl sub_80550EC
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
	b _08054B90
_08054ADA:
	movs r3, #0x2c
	ldrsh r1, [r4, r3]
	adds r0, r2, #0
	adds r0, #0xa1
	cmp r1, r0
	bne _08054B50
	ldr r0, [r4, #0x5c]
	movs r1, #0
	bl sub_8054C54
	ldr r0, [r4, #0x5c]
	movs r1, #0
	bl sub_8054DE8
	ldr r3, _08054B48 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r6, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r6, [r0]
	ldr r0, [r4, #0x5c]
	movs r1, #1
	movs r2, #0xc
	movs r3, #0
	bl sub_8054EA0
	ldr r0, [r4, #0x5c]
	movs r1, #0x1d
	movs r2, #0x19
	movs r3, #1
	bl sub_8054EA0
	ldr r0, _08054B4C @ =0x0000010F
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
_08054B3E:
	movs r3, #1
	bl sub_805C804
	b _08054B90
	.align 2, 0
_08054B48: .4byte gDispIo
_08054B4C: .4byte 0x0000010F
_08054B50:
	adds r0, r2, #0
	adds r0, #0xd3
	cmp r1, r0
	bne _08054B60
	adds r0, r5, #0
	bl sub_80451E0
	b _08054B90
_08054B60:
	adds r0, r2, #0
	adds r0, #0xdd
	cmp r1, r0
	bne _08054B90
	bl sub_80474BC
	bl sub_8047358
	adds r0, r5, #0
	bl sub_804B848
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, r1
	beq _08054B8A
	movs r0, #2
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
_08054B8A:
	adds r0, r4, #0
	bl Proc_Break
_08054B90:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8054B98
sub_8054B98: @ 0x08054B98
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	ldr r1, _08054BE0 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08054BE4 @ =0x085D2E9C
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	cmp r6, #0
	beq _08054BF8
	cmp r6, #2
	bhi _08054C4A
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	ldr r0, _08054BE8 @ =0x0811A8A4
	str r0, [r5, #0x48]
	ldr r0, _08054BEC @ =0x081AC90C
	str r0, [r5, #0x4c]
	ldr r0, _08054BF0 @ =0x081AD26C
	str r0, [r5, #0x50]
	ldr r0, _08054BF4 @ =0x081AC114
	movs r1, #0xa8
	lsls r1, r1, #5
	bl sub_8047ACC
	b _08054C4A
	.align 2, 0
_08054BE0: .4byte 0x02017744
_08054BE4: .4byte 0x085D2E9C
_08054BE8: .4byte 0x0811A8A4
_08054BEC: .4byte 0x081AC90C
_08054BF0: .4byte 0x081AD26C
_08054BF4: .4byte 0x081AC114
_08054BF8:
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	ldr r0, _08054C30 @ =0x0811A898
	str r0, [r5, #0x48]
	ldr r0, _08054C34 @ =0x081AB340
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08054C38 @ =0x081AB1B0
	movs r1, #0x80
	lsls r1, r1, #3
	bl sub_8047ACC
	ldr r0, _08054C3C @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08054C4A
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08054C40
	movs r0, #1
	movs r1, #0x18
	b _08054C44
	.align 2, 0
_08054C30: .4byte 0x0811A898
_08054C34: .4byte 0x081AB340
_08054C38: .4byte 0x081AB1B0
_08054C3C: .4byte 0x0203CD14
_08054C40:
	movs r0, #1
	movs r1, #0xe8
_08054C44:
	movs r2, #0
	bl SetBgOffset
_08054C4A:
	bl sub_8047500
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_8054C54
sub_8054C54: @ 0x08054C54
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	ldr r1, _08054C9C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08054CA0 @ =0x085D2E9C
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r1, #0
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	adds r0, r5, #0
	adds r0, #0x29
	strb r1, [r0]
	cmp r6, #0
	beq _08054CB4
	cmp r6, #2
	bhi _08054CFE
	ldr r0, _08054CA4 @ =0x0811A8AA
	str r0, [r5, #0x48]
	ldr r0, _08054CA8 @ =0x081AC90C
	str r0, [r5, #0x4c]
	ldr r0, _08054CAC @ =0x081AD26C
	str r0, [r5, #0x50]
	ldr r0, _08054CB0 @ =0x081AC114
	movs r1, #0xa8
	lsls r1, r1, #5
	bl sub_8047ACC
	b _08054CFE
	.align 2, 0
_08054C9C: .4byte 0x02017744
_08054CA0: .4byte 0x085D2E9C
_08054CA4: .4byte 0x0811A8AA
_08054CA8: .4byte 0x081AC90C
_08054CAC: .4byte 0x081AD26C
_08054CB0: .4byte 0x081AC114
_08054CB4:
	ldr r0, _08054CE4 @ =0x0811A89E
	str r0, [r5, #0x48]
	ldr r0, _08054CE8 @ =0x081AB340
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08054CEC @ =0x081AB1B0
	movs r1, #0x80
	lsls r1, r1, #3
	bl sub_8047ACC
	ldr r0, _08054CF0 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08054CFE
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08054CF4
	movs r0, #1
	movs r1, #0xe8
	b _08054CF8
	.align 2, 0
_08054CE4: .4byte 0x0811A89E
_08054CE8: .4byte 0x081AB340
_08054CEC: .4byte 0x081AB1B0
_08054CF0: .4byte 0x0203CD14
_08054CF4:
	movs r0, #1
	movs r1, #0x18
_08054CF8:
	movs r2, #0
	bl SetBgOffset
_08054CFE:
	bl sub_8047500
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_8054D08
sub_8054D08: @ 0x08054D08
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #0
	blt _08054D3A
	ldr r1, [r4, #0x4c]
	ldr r2, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r4, r3, #2
	adds r4, r4, r3
	lsls r3, r4, #4
	subs r3, r3, r4
	lsls r3, r3, #4
	adds r1, r1, r3
	adds r2, r2, r3
	bl sub_8047938
	b _08054D6C
_08054D3A:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r3, r0
	bne _08054D6C
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _08054D54
	bl sub_80474D8
	bl sub_80475D8
_08054D54:
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r1, _08054D74 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08054D6C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08054D74: .4byte 0x02017744

	thumb_func_start sub_8054D78
sub_8054D78: @ 0x08054D78
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _08054DA0 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08054DA4 @ =0x085D2EB4
	movs r1, #3
	bl SpawnProc
	adds r1, r0, #0
	str r4, [r1, #0x5c]
	movs r0, #0
	strh r0, [r1, #0x2c]
	str r0, [r1, #0x44]
	cmp r5, #0
	bne _08054DAC
	ldr r0, _08054DA8 @ =0x0811A8B0
	b _08054DBA
	.align 2, 0
_08054DA0: .4byte 0x02017744
_08054DA4: .4byte 0x085D2EB4
_08054DA8: .4byte 0x0811A8B0
_08054DAC:
	cmp r5, #1
	bne _08054DB8
	ldr r0, _08054DB4 @ =0x0811A934
	b _08054DBA
	.align 2, 0
_08054DB4: .4byte 0x0811A934
_08054DB8:
	ldr r0, _08054DC4 @ =0x0811A966
_08054DBA:
	str r0, [r1, #0x48]
	cmp r5, #0
	bne _08054DCC
	ldr r0, _08054DC8 @ =0x081ABCA0
	b _08054DDA
	.align 2, 0
_08054DC4: .4byte 0x0811A966
_08054DC8: .4byte 0x081ABCA0
_08054DCC:
	cmp r5, #1
	bne _08054DD8
	ldr r0, _08054DD4 @ =0x081ADDEC
	b _08054DDA
	.align 2, 0
_08054DD4: .4byte 0x081ADDEC
_08054DD8:
	ldr r0, _08054DE4 @ =0x081ADBCC
_08054DDA:
	str r0, [r1, #0x4c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08054DE4: .4byte 0x081ADBCC

	thumb_func_start sub_8054DE8
sub_8054DE8: @ 0x08054DE8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _08054E10 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08054E14 @ =0x085D2EB4
	movs r1, #3
	bl SpawnProc
	adds r1, r0, #0
	str r4, [r1, #0x5c]
	movs r0, #0
	strh r0, [r1, #0x2c]
	str r0, [r1, #0x44]
	cmp r5, #0
	bne _08054E1C
	ldr r0, _08054E18 @ =0x0811A8F2
	b _08054E2A
	.align 2, 0
_08054E10: .4byte 0x02017744
_08054E14: .4byte 0x085D2EB4
_08054E18: .4byte 0x0811A8F2
_08054E1C:
	cmp r5, #1
	bne _08054E28
	ldr r0, _08054E24 @ =0x0811A934
	b _08054E2A
	.align 2, 0
_08054E24: .4byte 0x0811A934
_08054E28:
	ldr r0, _08054E34 @ =0x0811A966
_08054E2A:
	str r0, [r1, #0x48]
	cmp r5, #0
	bne _08054E3C
	ldr r0, _08054E38 @ =0x081ABCA0
	b _08054E4A
	.align 2, 0
_08054E34: .4byte 0x0811A966
_08054E38: .4byte 0x081ABCA0
_08054E3C:
	cmp r5, #1
	bne _08054E48
	ldr r0, _08054E44 @ =0x081ADDEC
	b _08054E4A
	.align 2, 0
_08054E44: .4byte 0x081ADDEC
_08054E48:
	ldr r0, _08054E54 @ =0x081ADBCC
_08054E4A:
	str r0, [r1, #0x4c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08054E54: .4byte 0x081ADBCC

	thumb_func_start sub_8054E58
sub_8054E58: @ 0x08054E58
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _08054E7E
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl sub_8047AF4
	b _08054E94
_08054E7E:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08054E94
	ldr r1, _08054E9C @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08054E94:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08054E9C: .4byte 0x02017744

	thumb_func_start sub_8054EA0
sub_8054EA0: @ 0x08054EA0
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r1, _08054ED4 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08054ED8 @ =0x085D2ED4
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	strh r5, [r0, #0x2c]
	strh r6, [r0, #0x2e]
	adds r0, #0x29
	mov r1, r8
	strb r1, [r0]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08054ED4: .4byte 0x02017744
_08054ED8: .4byte 0x085D2ED4

	thumb_func_start sub_8054EDC
sub_8054EDC: @ 0x08054EDC
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	subs r0, #1
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08054EF2
	adds r0, r1, #0
	bl Proc_Break
_08054EF2:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8054EF8
sub_8054EF8: @ 0x08054EF8
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	movs r2, #0x2e
	ldrsh r0, [r4, r2]
	cmp r1, r0
	ble _08054F20
	ldr r1, _08054F1C @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
	b _08054F7E
	.align 2, 0
_08054F1C: .4byte 0x02017744
_08054F20:
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _08054F3C
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	b _08054F4C
_08054F3C:
	movs r2, #0x2c
	ldrsh r3, [r4, r2]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
_08054F4C:
	bl Interpolate
	adds r5, r0, #0
	ldr r3, _08054F88 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r5, [r0]
	adds r2, #9
	movs r0, #0x10
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x46
	strb r1, [r0]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
_08054F7E:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08054F88: .4byte gDispIo

	thumb_func_start sub_8054F8C
sub_8054F8C: @ 0x08054F8C
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _08054FD8 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08054FDC @ =0x085D2EF4
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x33
	strh r0, [r4, #0x2e]
	ldr r3, _08054FE0 @ =0x085F0A14
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	ldr r0, _08054FE4 @ =0x081AC0F4
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _08054FE8 @ =0x081ABEA0
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08054FD8: .4byte 0x02017744
_08054FDC: .4byte 0x085D2EF4
_08054FE0: .4byte 0x085F0A14
_08054FE4: .4byte 0x081AC0F4
_08054FE8: .4byte 0x081ABEA0

	thumb_func_start sub_8054FEC
sub_8054FEC: @ 0x08054FEC
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0805503C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08055040 @ =0x085D2F0C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x33
	strh r0, [r4, #0x2e]
	movs r0, #0x34
	strh r0, [r4, #0x30]
	ldr r3, _08055044 @ =0x085F0A14
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	ldr r0, _08055048 @ =0x081AC0F4
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0805504C @ =0x081ABEA0
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805503C: .4byte 0x02017744
_08055040: .4byte 0x085D2F0C
_08055044: .4byte 0x085F0A14
_08055048: .4byte 0x081AC0F4
_0805504C: .4byte 0x081ABEA0

	thumb_func_start sub_8055050
sub_8055050: @ 0x08055050
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _08055078
	ldr r0, _08055080 @ =0x02017744
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r4, #0x60]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
_08055078:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08055080: .4byte 0x02017744

	thumb_func_start sub_8055084
sub_8055084: @ 0x08055084
	push {r4, r5, lr}
	adds r2, r0, #0
	ldr r3, [r2, #0x60]
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	movs r4, #0
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	ldrh r5, [r2, #0x2e]
	lsls r1, r5, #0x10
	cmp r0, r1
	bne _080550AC
	ldr r0, _080550B4 @ =0x085F0AA4
	str r0, [r3, #0x24]
	str r0, [r3, #0x20]
	strh r4, [r3, #6]
	strh r4, [r2, #0x2c]
	adds r0, r2, #0
	bl Proc_Break
_080550AC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080550B4: .4byte 0x085F0AA4

	thumb_func_start sub_80550B8
sub_80550B8: @ 0x080550B8
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _080550E0
	ldr r0, _080550E8 @ =0x02017744
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r4, #0x60]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
_080550E0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080550E8: .4byte 0x02017744

	thumb_func_start sub_80550EC
sub_80550EC: @ 0x080550EC
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r1, _0805511C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08055120 @ =0x085D2F2C
	movs r1, #3
	bl SpawnProc
	adds r1, r0, #0
	str r5, [r1, #0x5c]
	movs r0, #0
	strh r0, [r1, #0x2c]
	adds r0, r1, #0
	adds r0, #0x29
	strb r4, [r0]
	cmp r4, #0
	bne _08055124
	movs r0, #0x2b
	strh r0, [r1, #0x2e]
	movs r0, #0x44
	b _0805512A
	.align 2, 0
_0805511C: .4byte 0x02017744
_08055120: .4byte 0x085D2F2C
_08055124:
	movs r0, #0x1f
	strh r0, [r1, #0x2e]
	movs r0, #0x3d
_0805512A:
	strh r0, [r1, #0x30]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8055134
sub_8055134: @ 0x08055134
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _080551F2
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _0805519A
	ldr r0, _0805517C @ =0x085F1FC0
	mov r8, r0
	ldr r7, _08055180 @ =0x085F35C0
	ldr r0, _08055184 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08055188
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	movs r5, #0x88
	cmp r0, #0
	bne _08055196
	movs r5, #0x68
	b _08055196
	.align 2, 0
_0805517C: .4byte 0x085F1FC0
_08055180: .4byte 0x085F35C0
_08055184: .4byte 0x0203CD14
_08055188:
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	movs r5, #0x70
	cmp r0, #0
	bne _08055196
	movs r5, #0x80
_08055196:
	movs r6, #0x4e
	b _080551D8
_0805519A:
	ldr r2, _080551BC @ =0x085F2034
	mov r8, r2
	ldr r7, _080551C0 @ =0x085F3634
	ldr r0, _080551C4 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _080551C8
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	movs r5, #0x4c
	cmp r0, #0
	bne _080551D6
	movs r5, #0xa4
	b _080551D6
	.align 2, 0
_080551BC: .4byte 0x085F2034
_080551C0: .4byte 0x085F3634
_080551C4: .4byte 0x0203CD14
_080551C8:
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	movs r5, #0x64
	cmp r0, #0
	bne _080551D6
	movs r5, #0x8c
_080551D6:
	movs r6, #0x40
_080551D8:
	ldr r0, [r4, #0x5c]
	mov r2, r8
	str r2, [sp]
	adds r1, r7, #0
	adds r3, r7, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	strh r5, [r0, #2]
	strh r6, [r0, #4]
	adds r0, r4, #0
	bl Proc_Break
_080551F2:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8055200
sub_8055200: @ 0x08055200
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _08055228
	ldr r0, _08055230 @ =0x02017744
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r4, #0x60]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
_08055228:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08055230: .4byte 0x02017744

	thumb_func_start sub_8055234
sub_8055234: @ 0x08055234
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _08055260 @ =0x085D2F4C
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r2, #0
	movs r1, #0
	strh r1, [r0, #0x2c]
	adds r0, #0x29
	strb r2, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08055260: .4byte 0x085D2F4C

	thumb_func_start sub_8055264
sub_8055264: @ 0x08055264
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _08055290 @ =0x085D2F4C
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	adds r0, #0x29
	movs r1, #1
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08055290: .4byte 0x085D2F4C

	thumb_func_start sub_8055294
sub_8055294: @ 0x08055294
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r5, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #1
	bne _080552C2
	ldr r0, [r4, #0x5c]
	bl sub_8054FEC
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xf3
	movs r3, #1
	bl sub_805C804
	b _08055358
_080552C2:
	cmp r1, #0x34
	bne _080552DA
	ldr r0, [r4, #0x5c]
	bl sub_8055364
	ldr r0, [r4, #0x5c]
	adds r1, r4, #0
	adds r1, #0x29
	ldrb r1, [r1]
	bl sub_8055434
	b _08055358
_080552DA:
	cmp r1, #0xb7
	bne _08055344
	movs r0, #0x8a
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x78
	movs r3, #0
	bl sub_805C804
	ldr r0, [r4, #0x5c]
	bl sub_80554C8
	ldr r0, [r4, #0x5c]
	adds r1, r4, #0
	adds r1, #0x29
	ldrb r1, [r1]
	bl sub_8055628
	ldr r3, _08055340 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r5, [r0]
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r5, [r0]
	ldr r0, [r4, #0x5c]
	movs r1, #1
	movs r2, #0x14
	movs r3, #0
	bl sub_8054EA0
	ldr r0, [r4, #0x5c]
	movs r1, #0xb4
	movs r2, #0x28
	movs r3, #1
	bl sub_8054EA0
	b _08055358
	.align 2, 0
_08055340: .4byte gDispIo
_08055344:
	ldr r0, _08055360 @ =0x000001C5
	cmp r1, r0
	bne _08055358
	bl sub_80474BC
	bl sub_8047358
	adds r0, r4, #0
	bl Proc_Break
_08055358:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08055360: .4byte 0x000001C5

	thumb_func_start sub_8055364
sub_8055364: @ 0x08055364
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _080553A0 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080553A4 @ =0x085D2F64
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _080553A8 @ =0x0811A9A8
	str r1, [r0, #0x48]
	ldr r1, _080553AC @ =0x085D2F7C
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r0, _080553B0 @ =0x081AB1B0
	movs r1, #0x80
	lsls r1, r1, #3
	bl sub_8047ACC
	bl sub_8047500
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080553A0: .4byte 0x02017744
_080553A4: .4byte 0x085D2F64
_080553A8: .4byte 0x0811A9A8
_080553AC: .4byte 0x085D2F7C
_080553B0: .4byte 0x081AB1B0

	thumb_func_start sub_80553B4
sub_80553B4: @ 0x080553B4
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r6, r0, #0
	adds r0, r4, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r5, r0, #0x10
	cmp r5, #0
	blt _0805540C
	ldr r1, [r4, #0x4c]
	ldr r2, [r4, #0x50]
	lsls r0, r5, #2
	adds r1, r0, r1
	ldr r1, [r1]
	adds r0, r0, r2
	ldr r2, [r0]
	adds r0, r6, #0
	bl sub_804799C
	ldr r0, _08055404 @ =0x0811A9BA
	lsls r1, r5, #1
	adds r0, r1, r0
	ldrh r0, [r0]
	ldr r2, _08055408 @ =0x0811A9C2
	adds r1, r1, r2
	ldrh r2, [r1]
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #0
	bl sub_805C804
	b _0805542A
	.align 2, 0
_08055404: .4byte 0x0811A9BA
_08055408: .4byte 0x0811A9C2
_0805540C:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r5, r0
	bne _0805542A
	bl sub_80474D8
	ldr r1, _08055430 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_Break
_0805542A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08055430: .4byte 0x02017744

	thumb_func_start sub_8055434
sub_8055434: @ 0x08055434
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _08055460 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08055464 @ =0x085D2F8C
	movs r1, #3
	bl SpawnProc
	adds r1, r0, #0
	str r4, [r1, #0x5c]
	movs r0, #0
	strh r0, [r1, #0x2c]
	str r0, [r1, #0x44]
	ldr r0, _08055468 @ =0x0811A9CA
	str r0, [r1, #0x48]
	cmp r5, #0
	bne _08055470
	ldr r0, _0805546C @ =0x081AE88C
	b _08055472
	.align 2, 0
_08055460: .4byte 0x02017744
_08055464: .4byte 0x085D2F8C
_08055468: .4byte 0x0811A9CA
_0805546C: .4byte 0x081AE88C
_08055470:
	ldr r0, _0805547C @ =0x081AEA8C
_08055472:
	str r0, [r1, #0x4c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805547C: .4byte 0x081AEA8C

	thumb_func_start sub_8055480
sub_8055480: @ 0x08055480
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _080554A6
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl sub_8047AF4
	b _080554BC
_080554A6:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _080554BC
	ldr r1, _080554C4 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_080554BC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080554C4: .4byte 0x02017744

	thumb_func_start sub_80554C8
sub_80554C8: @ 0x080554C8
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r1, _0805555C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08055560 @ =0x085D2FAC
	movs r1, #3
	bl SpawnProc
	str r5, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _08055564 @ =0x0811AACC
	str r1, [r0, #0x48]
	ldr r1, _08055568 @ =0x085D2FC4
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r0, _0805556C @ =0x081AC114
	movs r1, #0xa8
	lsls r1, r1, #5
	bl sub_8047ACC
	ldr r4, _08055570 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r4, #0xc]
	ands r0, r2
	strb r0, [r4, #0xc]
	adds r0, r1, #0
	ldrb r2, [r4, #0x14]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r4, #0x14]
	ldrb r0, [r4, #0x10]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r4, #0x10]
	movs r0, #3
	ldrb r1, [r4, #0x18]
	orrs r0, r1
	strb r0, [r4, #0x18]
	bl sub_8047C1C
	ldr r0, _08055574 @ =0x0000F3FF
	ldrh r2, [r5, #8]
	ands r0, r2
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5, #8]
	bl sub_8047500
	ldr r0, _08055578 @ =0x0000FFE0
	ldrh r1, [r4, #0x3c]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	ldr r1, _0805557C @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r4, #0x3c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805555C: .4byte 0x02017744
_08055560: .4byte 0x085D2FAC
_08055564: .4byte 0x0811AACC
_08055568: .4byte 0x085D2FC4
_0805556C: .4byte 0x081AC114
_08055570: .4byte gDispIo
_08055574: .4byte 0x0000F3FF
_08055578: .4byte 0x0000FFE0
_0805557C: .4byte 0x0000E0FF

	thumb_func_start sub_8055580
sub_8055580: @ 0x08055580
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	ldr r6, [r4, #0x5c]
	adds r0, r4, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #0
	blt _080555BA
	ldr r1, [r4, #0x4c]
	ldr r2, [r4, #0x50]
	lsls r0, r3, #2
	adds r1, r0, r1
	ldr r1, [r1]
	adds r0, r0, r2
	ldr r2, [r0]
	adds r0, r5, #0
	bl sub_804799C
	b _08055614
_080555BA:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r3, r0
	bne _08055614
	bl sub_80474D8
	ldr r1, _0805561C @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	ldr r3, _08055620 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	ldr r0, _08055624 @ =0x0000F3FF
	ldrh r2, [r6, #8]
	ands r0, r2
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r6, #8]
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_Break
_08055614:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805561C: .4byte 0x02017744
_08055620: .4byte gDispIo
_08055624: .4byte 0x0000F3FF

	thumb_func_start sub_8055628
sub_8055628: @ 0x08055628
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _08055654 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08055658 @ =0x085D2FC8
	movs r1, #3
	bl SpawnProc
	adds r1, r0, #0
	str r4, [r1, #0x5c]
	movs r0, #0
	strh r0, [r1, #0x2c]
	str r0, [r1, #0x44]
	ldr r0, _0805565C @ =0x0811AAD2
	str r0, [r1, #0x48]
	cmp r5, #0
	bne _08055664
	ldr r0, _08055660 @ =0x081ABCA0
	b _08055666
	.align 2, 0
_08055654: .4byte 0x02017744
_08055658: .4byte 0x085D2FC8
_0805565C: .4byte 0x0811AAD2
_08055660: .4byte 0x081ABCA0
_08055664:
	ldr r0, _08055670 @ =0x081AEC8C
_08055666:
	str r0, [r1, #0x4c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08055670: .4byte 0x081AEC8C

	thumb_func_start sub_8055674
sub_8055674: @ 0x08055674
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0805569A
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl sub_8047AF4
	b _080556B0
_0805569A:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _080556B0
	ldr r1, _080556B8 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_080556B0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080556B8: .4byte 0x02017744

	thumb_func_start sub_80556BC
sub_80556BC: @ 0x080556BC
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _080556F4 @ =0x085D2FE8
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080556F4: .4byte 0x085D2FE8

	thumb_func_start sub_80556F8
sub_80556F8: @ 0x080556F8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r6, r0, #0
	bl sub_8047C28
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r1, #0
	mov r8, r1
	movs r7, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805572E
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
_0805572E:
	movs r2, #0x2c
	ldrsh r1, [r4, r2]
	adds r0, r5, #1
	cmp r1, r0
	bne _080557A4
	adds r0, r6, #0
	bl sub_805581C
	movs r5, #8
	str r5, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0x28
	movs r2, #0x1e
	movs r3, #0x10
	bl sub_804CD88
	movs r4, #0x10
	str r4, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0x47
	movs r2, #0x1e
	movs r3, #8
	bl sub_804CD88
	str r5, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0x66
	movs r2, #0x1e
	movs r3, #0x10
	bl sub_804CD88
	str r4, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0x85
	movs r2, #0x1e
	movs r3, #8
	bl sub_804CD88
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0xa4
	movs r2, #0x3c
	movs r3, #0x10
	bl sub_804CD88
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #2
	ldrsh r2, [r6, r0]
	movs r0, #0xfd
	movs r3, #1
	bl sub_805C804
	b _08055810
_080557A4:
	adds r0, r5, #0
	adds r0, #0x50
	cmp r1, r0
	bne _080557B4
	adds r0, r6, #0
	bl sub_80558D4
	b _08055810
_080557B4:
	adds r0, r5, #0
	adds r0, #0xa4
	cmp r1, r0
	bne _080557CA
	adds r0, r6, #0
	movs r1, #1
	movs r2, #5
	movs r3, #0
	bl sub_8046C14
	b _08055810
_080557CA:
	adds r0, r5, #0
	adds r0, #0xc8
	cmp r1, r0
	bne _080557F0
	movs r0, #9
	ldrh r1, [r6, #0x10]
	orrs r0, r1
	strh r0, [r6, #0x10]
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r1, [r0]
	adds r0, r6, #0
	bl sub_80478A0
	adds r0, r6, #0
	movs r1, #0
	bl sub_8046F18
	b _08055810
_080557F0:
	movs r2, #0x96
	lsls r2, r2, #1
	adds r0, r5, r2
	cmp r1, r0
	bne _08055810
	movs r0, #2
	ldrh r1, [r6, #0x10]
	orrs r0, r1
	strh r0, [r6, #0x10]
	bl sub_80474BC
	bl sub_8047358
	adds r0, r4, #0
	bl Proc_Break
_08055810:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_805581C
sub_805581C: @ 0x0805581C
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08055858 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805585C @ =0x085D3000
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _08055860 @ =0x0811ABB0
	str r1, [r0, #0x48]
	ldr r1, _08055864 @ =0x085D3018
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _08055868 @ =0x085D304C
	str r1, [r0, #0x54]
	ldr r0, _0805586C @ =0x081B1710
	movs r1, #0x20
	bl sub_8047AF4
	bl sub_8047500
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08055858: .4byte 0x02017744
_0805585C: .4byte 0x085D3000
_08055860: .4byte 0x0811ABB0
_08055864: .4byte 0x085D3018
_08055868: .4byte 0x085D304C
_0805586C: .4byte 0x081B1710

	thumb_func_start sub_8055870
sub_8055870: @ 0x08055870
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #0
	blt _080558AC
	ldr r1, [r4, #0x4c]
	ldr r2, [r4, #0x50]
	ldr r5, [r4, #0x54]
	ldr r0, [r4, #0x5c]
	lsls r4, r3, #2
	adds r1, r4, r1
	ldr r1, [r1]
	adds r2, r4, r2
	ldr r2, [r2]
	bl sub_804799C
	adds r4, r4, r5
	ldr r0, [r4]
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	b _080558CA
_080558AC:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r3, r0
	bne _080558CA
	bl sub_80474D8
	ldr r1, _080558D0 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_Break
_080558CA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080558D0: .4byte 0x02017744

	thumb_func_start sub_80558D4
sub_80558D4: @ 0x080558D4
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r1, _08055910 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08055914 @ =0x085D3080
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	ldr r3, _08055918 @ =0x085F63A8
	str r3, [sp]
	adds r0, r4, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	adds r6, r0, #0
	str r6, [r5, #0x60]
	adds r0, r4, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _0805591C
	ldrh r0, [r6, #2]
	subs r0, #8
	b _08055920
	.align 2, 0
_08055910: .4byte 0x02017744
_08055914: .4byte 0x085D3080
_08055918: .4byte 0x085F63A8
_0805591C:
	ldrh r0, [r6, #2]
	adds r0, #8
_08055920:
	strh r0, [r6, #2]
	ldrh r0, [r6, #4]
	subs r0, #8
	strh r0, [r6, #4]
	ldr r0, _08055944 @ =0x081B7650
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _08055948 @ =0x081B7468
	movs r1, #0x80
	lsls r1, r1, #4
	bl sub_8047A88
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08055944: .4byte 0x081B7650
_08055948: .4byte 0x081B7468

	thumb_func_start sub_805594C
sub_805594C: @ 0x0805594C
	ldr r1, _08055958 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_08055958: .4byte 0x02017744

	thumb_func_start sub_805595C
sub_805595C: @ 0x0805595C
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _08055994 @ =0x085D30A0
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08055994: .4byte 0x085D30A0

	thumb_func_start sub_8055998
sub_8055998: @ 0x08055998
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	bl sub_8047C28
	adds r6, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r1, #0
	mov r8, r1
	movs r7, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _080559DC
	ldr r0, [r4, #0x5c]
	bl sub_8055B84
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xfa
	movs r3, #1
	bl sub_805C804
_080559DC:
	ldrh r0, [r4, #0x2c]
	cmp r0, #0x29
	bne _080559EE
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
	b _08055A92
_080559EE:
	movs r3, #0x2c
	ldrsh r1, [r4, r3]
	adds r0, r6, #0
	adds r0, #0x44
	cmp r1, r0
	bne _08055A22
	ldr r0, [r4, #0x5c]
	bl sub_8055AA0
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #2
	ldrsh r2, [r5, r0]
	movs r0, #0xfb
	movs r3, #1
	bl sub_805C804
	ldr r0, [r4, #0x5c]
	str r7, [sp]
	str r7, [sp, #4]
	movs r1, #0x42
	movs r2, #0x14
	movs r3, #0x10
	bl sub_804CD88
	b _08055A92
_08055A22:
	adds r0, r6, #0
	adds r0, #0x86
	cmp r1, r0
	bne _08055A74
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	movs r0, #0xfc
	movs r3, #1
	bl sub_805C804
	bl sub_805BD8C
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r6, r4, #0
	adds r6, #0x29
	ldrb r1, [r6]
	adds r0, r5, #0
	bl sub_80478A0
	ldr r0, [r4, #0x5c]
	movs r1, #0xa
	bl sub_8046794
	ldrb r0, [r6]
	cmp r0, #0
	bne _08055A92
	adds r0, r5, #0
	bl sub_8046F48
	cmp r0, #0
	bne _08055A92
	adds r0, r5, #0
	movs r1, #3
	bl sub_8046F18
	b _08055A92
_08055A74:
	adds r0, r6, #0
	adds r0, #0x9e
	cmp r1, r0
	bne _08055A92
	movs r0, #2
	ldrh r3, [r5, #0x10]
	orrs r0, r3
	strh r0, [r5, #0x10]
	bl sub_80474BC
	bl sub_8047358
	adds r0, r4, #0
	bl Proc_Break
_08055A92:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8055AA0
sub_8055AA0: @ 0x08055AA0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08055B00 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08055B04 @ =0x085D30B8
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08055B08 @ =0x0811ABE6
	str r0, [r5, #0x48]
	ldr r0, _08055B0C @ =0x085D30D0
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08055B10 @ =0x081B4254
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, _08055B14 @ =0x081B2348
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	bl sub_8047500
	ldr r0, _08055B18 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08055B26
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08055B1C
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
	b _08055B26
	.align 2, 0
_08055B00: .4byte 0x02017744
_08055B04: .4byte 0x085D30B8
_08055B08: .4byte 0x0811ABE6
_08055B0C: .4byte 0x085D30D0
_08055B10: .4byte 0x081B4254
_08055B14: .4byte 0x081B2348
_08055B18: .4byte 0x0203CD14
_08055B1C:
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
_08055B26:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8055B2C
sub_8055B2C: @ 0x08055B2C
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _08055B5A
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl sub_804799C
	b _08055B78
_08055B5A:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _08055B78
	bl sub_80474D8
	ldr r1, _08055B80 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_Break
_08055B78:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08055B80: .4byte 0x02017744

	thumb_func_start sub_8055B84
sub_8055B84: @ 0x08055B84
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _08055BC8 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08055BCC @ =0x085D3118
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	ldr r3, _08055BD0 @ =0x085F6674
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	ldr r0, _08055BD4 @ =0x081B4254
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _08055BD8 @ =0x081B3D34
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08055BC8: .4byte 0x02017744
_08055BCC: .4byte 0x085D3118
_08055BD0: .4byte 0x085F6674
_08055BD4: .4byte 0x081B4254
_08055BD8: .4byte 0x081B3D34

	thumb_func_start sub_8055BDC
sub_8055BDC: @ 0x08055BDC
	push {lr}
	ldr r0, [r0, #0x60]
	bl BasRemove
	ldr r1, _08055BF0 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08055BF0: .4byte 0x02017744

	thumb_func_start sub_8055BF4
sub_8055BF4: @ 0x08055BF4
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _08055C2C @ =0x085D3138
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08055C2C: .4byte 0x085D3138

	thumb_func_start sub_8055C30
sub_8055C30: @ 0x08055C30
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	bl sub_8047C28
	adds r6, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r1, #0
	mov r8, r1
	movs r7, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08055C74
	ldr r0, [r4, #0x5c]
	bl sub_8055E14
	ldr r0, _08055CC8 @ =0x0000011B
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl sub_805C804
_08055C74:
	ldrh r0, [r4, #0x2c]
	cmp r0, #0x64
	bne _08055C84
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
_08055C84:
	movs r2, #0x2c
	ldrsh r1, [r4, r2]
	adds r0, r6, #0
	adds r0, #0x82
	cmp r1, r0
	bne _08055CCC
	adds r0, r5, #0
	bl sub_8055E6C
	adds r0, r5, #0
	bl sub_8055ED0
	ldr r0, [r4, #0x5c]
	bl sub_8055D30
	movs r0, #0x10
	str r0, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0x14
	movs r3, #0
	bl sub_804CD88
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r5, #0
	movs r1, #0xe6
	movs r2, #0x14
	movs r3, #0x10
	bl sub_804CD88
	b _08055D22
	.align 2, 0
_08055CC8: .4byte 0x0000011B
_08055CCC:
	movs r3, #0xa5
	lsls r3, r3, #1
	adds r0, r6, r3
	cmp r1, r0
	bne _08055D02
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_80478A0
	ldrb r0, [r4]
	cmp r0, #0
	bne _08055D22
	adds r0, r5, #0
	bl sub_8046F48
	cmp r0, #0
	bne _08055D22
	adds r0, r5, #0
	movs r1, #2
	bl sub_8046F18
	b _08055D22
_08055D02:
	movs r2, #0xb9
	lsls r2, r2, #1
	adds r0, r6, r2
	cmp r1, r0
	bne _08055D22
	movs r0, #2
	ldrh r3, [r5, #0x10]
	orrs r0, r3
	strh r0, [r5, #0x10]
	bl sub_80474BC
	bl sub_8047358
	adds r0, r4, #0
	bl Proc_Break
_08055D22:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8055D30
sub_8055D30: @ 0x08055D30
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08055D90 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08055D94 @ =0x085D3150
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08055D98 @ =0x0811AC30
	str r0, [r5, #0x48]
	ldr r0, _08055D9C @ =0x085D3168
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08055DA0 @ =0x081B6688
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, _08055DA4 @ =0x081B57BC
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	bl sub_8047500
	ldr r0, _08055DA8 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08055DB6
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08055DAC
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
	b _08055DB6
	.align 2, 0
_08055D90: .4byte 0x02017744
_08055D94: .4byte 0x085D3150
_08055D98: .4byte 0x0811AC30
_08055D9C: .4byte 0x085D3168
_08055DA0: .4byte 0x081B6688
_08055DA4: .4byte 0x081B57BC
_08055DA8: .4byte 0x0203CD14
_08055DAC:
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
_08055DB6:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8055DBC
sub_8055DBC: @ 0x08055DBC
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _08055DEA
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl sub_804799C
	b _08055E08
_08055DEA:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _08055E08
	bl sub_80474D8
	ldr r1, _08055E10 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_Break
_08055E08:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08055E10: .4byte 0x02017744

	thumb_func_start sub_8055E14
sub_8055E14: @ 0x08055E14
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _08055E58 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08055E5C @ =0x085D31A8
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	ldr r3, _08055E60 @ =0x085FE544
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	ldr r0, _08055E64 @ =0x081B7650
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _08055E68 @ =0x081B7468
	movs r1, #0x80
	lsls r1, r1, #4
	bl sub_8047A88
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08055E58: .4byte 0x02017744
_08055E5C: .4byte 0x085D31A8
_08055E60: .4byte 0x085FE544
_08055E64: .4byte 0x081B7650
_08055E68: .4byte 0x081B7468

	thumb_func_start sub_8055E6C
sub_8055E6C: @ 0x08055E6C
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _08055EB4 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08055EB8 @ =0x085D31C8
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	ldr r3, _08055EBC @ =0x085FE3C4
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	adds r5, r0, #0
	str r5, [r4, #0x60]
	ldrh r0, [r5, #4]
	subs r0, #8
	strh r0, [r5, #4]
	bl sub_8058998
	cmp r0, #0
	beq _08055EAC
	ldrh r0, [r5, #2]
	subs r0, #0x10
	strh r0, [r5, #2]
_08055EAC:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08055EB4: .4byte 0x02017744
_08055EB8: .4byte 0x085D31C8
_08055EBC: .4byte 0x085FE3C4

	thumb_func_start sub_8055EC0
sub_8055EC0: @ 0x08055EC0
	ldr r1, _08055ECC @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_08055ECC: .4byte 0x02017744

	thumb_func_start sub_8055ED0
sub_8055ED0: @ 0x08055ED0
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _08055EEC @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08055EF0 @ =0x085D31E8
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08055EEC: .4byte 0x02017744
_08055EF0: .4byte 0x085D31E8

	thumb_func_start sub_8055EF4
sub_8055EF4: @ 0x08055EF4
	push {r4, lr}
	movs r3, #0x8e
	lsls r3, r3, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r0, #0x5c]
	movs r4, #2
	ldrsh r2, [r0, r4]
	adds r0, r3, #0
	movs r3, #1
	bl sub_805C804
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8055F14
sub_8055F14: @ 0x08055F14
	ldr r1, _08055F20 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_08055F20: .4byte 0x02017744

	thumb_func_start sub_8055F24
sub_8055F24: @ 0x08055F24
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _08055F5C @ =0x085D3230
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08055F5C: .4byte 0x085D3230

	thumb_func_start sub_8055F60
sub_8055F60: @ 0x08055F60
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r6, r0, #0
	bl sub_8047C28
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r1, #0
	mov r8, r1
	movs r7, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08055F96
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
_08055F96:
	movs r2, #0x2c
	ldrsh r1, [r4, r2]
	adds r0, r5, #1
	cmp r1, r0
	bne _08056010
	adds r0, r6, #0
	bl sub_8056080
	movs r5, #8
	str r5, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0x28
	movs r2, #0x1e
	movs r3, #0x10
	bl sub_804CD88
	movs r4, #0x10
	str r4, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0x47
	movs r2, #0x1e
	movs r3, #8
	bl sub_804CD88
	str r5, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0x66
	movs r2, #0x1e
	movs r3, #0x10
	bl sub_804CD88
	str r4, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0x85
	movs r2, #0x1e
	movs r3, #8
	bl sub_804CD88
	str r7, [sp]
	str r7, [sp, #4]
	adds r0, r6, #0
	movs r1, #0xa4
	movs r2, #0x3c
	movs r3, #0x10
	bl sub_804CD88
	ldr r0, _0805600C @ =0x00000103
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r6, r3]
	movs r3, #1
	bl sub_805C804
	b _08056074
	.align 2, 0
_0805600C: .4byte 0x00000103
_08056010:
	adds r0, r5, #0
	adds r0, #0x50
	cmp r1, r0
	bne _08056020
	adds r0, r6, #0
	bl sub_8056138
	b _08056074
_08056020:
	adds r0, r5, #0
	adds r0, #0xa4
	cmp r1, r0
	bne _08056036
	adds r0, r6, #0
	movs r1, #1
	movs r2, #5
	movs r3, #0
	bl sub_8046C14
	b _08056074
_08056036:
	adds r0, r5, #0
	adds r0, #0xc8
	cmp r1, r0
	bne _08056054
	movs r0, #9
	ldrh r1, [r6, #0x10]
	orrs r0, r1
	strh r0, [r6, #0x10]
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r1, [r0]
	adds r0, r6, #0
	bl sub_80478A0
	b _08056074
_08056054:
	movs r2, #0x96
	lsls r2, r2, #1
	adds r0, r5, r2
	cmp r1, r0
	bne _08056074
	movs r0, #2
	ldrh r3, [r6, #0x10]
	orrs r0, r3
	strh r0, [r6, #0x10]
	bl sub_80474BC
	bl sub_8047358
	adds r0, r4, #0
	bl Proc_Break
_08056074:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8056080
sub_8056080: @ 0x08056080
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _080560BC @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080560C0 @ =0x085D3248
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _080560C4 @ =0x0811AD32
	str r1, [r0, #0x48]
	ldr r1, _080560C8 @ =0x085D3260
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _080560CC @ =0x085D3294
	str r1, [r0, #0x54]
	ldr r0, _080560D0 @ =0x081B4274
	movs r1, #0x20
	bl sub_8047AF4
	bl sub_8047500
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080560BC: .4byte 0x02017744
_080560C0: .4byte 0x085D3248
_080560C4: .4byte 0x0811AD32
_080560C8: .4byte 0x085D3260
_080560CC: .4byte 0x085D3294
_080560D0: .4byte 0x081B4274

	thumb_func_start sub_80560D4
sub_80560D4: @ 0x080560D4
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r3, r0, #0x10
	cmp r3, #0
	blt _08056110
	ldr r1, [r4, #0x4c]
	ldr r2, [r4, #0x50]
	ldr r5, [r4, #0x54]
	ldr r0, [r4, #0x5c]
	lsls r4, r3, #2
	adds r1, r4, r1
	ldr r1, [r1]
	adds r2, r4, r2
	ldr r2, [r2]
	bl sub_804799C
	adds r4, r4, r5
	ldr r0, [r4]
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	b _0805612E
_08056110:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r3, r0
	bne _0805612E
	bl sub_80474D8
	ldr r1, _08056134 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_Break
_0805612E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08056134: .4byte 0x02017744

	thumb_func_start sub_8056138
sub_8056138: @ 0x08056138
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0805617C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08056180 @ =0x085D32C8
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	ldr r3, _08056184 @ =0x085F9358
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	ldr r0, _08056188 @ =0x081B7670
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0805618C @ =0x081B7468
	movs r1, #0x80
	lsls r1, r1, #4
	bl sub_8047A88
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805617C: .4byte 0x02017744
_08056180: .4byte 0x085D32C8
_08056184: .4byte 0x085F9358
_08056188: .4byte 0x081B7670
_0805618C: .4byte 0x081B7468

	thumb_func_start sub_8056190
sub_8056190: @ 0x08056190
	ldr r1, _0805619C @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_0805619C: .4byte 0x02017744

	thumb_func_start sub_80561A0
sub_80561A0: @ 0x080561A0
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _080561D8 @ =0x085D32E8
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080561D8: .4byte 0x085D32E8

	thumb_func_start sub_80561DC
sub_80561DC: @ 0x080561DC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	bl sub_8047C28
	adds r6, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r7, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805620A
	ldr r0, [r4, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
_0805620A:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	adds r0, r6, #1
	cmp r1, r0
	bne _0805625C
	adds r0, r5, #0
	bl sub_80564E4
	adds r0, r5, #0
	movs r1, #0x4a
	bl sub_80562C0
	adds r0, r5, #0
	movs r1, #0x4a
	bl sub_8056444
	movs r4, #0x80
	lsls r4, r4, #1
	movs r0, #1
	str r0, [sp]
	adds r0, r5, #0
	movs r1, #0x4a
	movs r2, #0xa
	adds r3, r4, #0
	bl sub_804C8D4
	ldr r2, _08056258 @ =sub_804CD4C
	adds r0, r5, #0
	movs r1, #0x4a
	bl sub_804CC68
	movs r1, #2
	ldrsh r2, [r5, r1]
	movs r0, #0xf9
	adds r1, r4, #0
	movs r3, #1
	bl sub_805C804
	b _080562B6
	.align 2, 0
_08056258: .4byte sub_804CD4C
_0805625C:
	adds r0, r6, #0
	adds r0, #0x4a
	cmp r1, r0
	bne _08056298
	adds r0, r5, #0
	movs r1, #5
	bl sub_8046794
	movs r0, #9
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r5, #0
	bl sub_80478A0
	ldrb r0, [r4]
	cmp r0, #0
	bne _080562B6
	adds r0, r5, #0
	bl sub_8046F48
	cmp r0, #0
	bne _080562B6
	adds r0, r5, #0
	movs r1, #4
	bl sub_8046F18
	b _080562B6
_08056298:
	adds r0, r6, #0
	adds r0, #0x5a
	cmp r1, r0
	bne _080562B6
	movs r0, #2
	ldrh r1, [r5, #0x10]
	orrs r0, r1
	strh r0, [r5, #0x10]
	bl sub_80474BC
	bl sub_8047358
	adds r0, r4, #0
	bl Proc_Break
_080562B6:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80562C0
sub_80562C0: @ 0x080562C0
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r1, _080563B8 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080563BC @ =0x085D3300
	movs r1, #3
	bl SpawnProc
	str r5, [r0, #0x5c]
	movs r6, #0
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r4, [r0, #0x2e]
	ldr r0, _080563C0 @ =0x081B7690
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, _080563C4 @ =0x081B4E9C
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, _080563C8 @ =0x081B4F9C
	ldr r1, _080563CC @ =gBg1Tm
	movs r2, #1
	str r2, [sp]
	adds r2, #0xff
	str r2, [sp, #4]
	movs r2, #0x20
	movs r3, #0x20
	bl sub_805B1AC
	movs r0, #2
	bl EnableBgSync
	bl sub_8047500
	ldr r0, _080563D0 @ =gDispIo
	mov ip, r0
	mov r2, ip
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	mov r1, ip
	adds r1, #0x44
	movs r0, #0xe
	strb r0, [r1]
	adds r1, #1
	movs r4, #8
	movs r0, #8
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r6, [r0]
	mov r6, ip
	adds r6, #0x37
	movs r3, #0x20
	ldrb r1, [r6]
	orrs r1, r3
	movs r0, #0x21
	rsbs r0, r0, #0
	mov r2, ip
	ldrb r2, [r2, #1]
	ands r0, r2
	movs r2, #0x41
	rsbs r2, r2, #0
	ands r0, r2
	movs r2, #0x80
	orrs r0, r2
	mov r7, ip
	strb r0, [r7, #1]
	movs r0, #2
	rsbs r0, r0, #0
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	movs r0, #4
	orrs r1, r0
	orrs r1, r4
	movs r0, #0x10
	orrs r1, r0
	strb r1, [r6]
	ldr r0, _080563D4 @ =0x0000FFE0
	ldrh r1, [r7, #0x3c]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	ldr r1, _080563D8 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xe0
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r7, #0x3c]
	mov r0, ip
	adds r0, #0x3d
	ldrb r7, [r0]
	orrs r3, r7
	strb r3, [r0]
	ldr r0, [r5, #0x1c]
	movs r1, #0x80
	lsls r1, r1, #4
	orrs r0, r1
	str r0, [r5, #0x1c]
	ldr r0, _080563DC @ =0x0000F3FF
	ldrh r1, [r5, #8]
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5, #8]
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080563B8: .4byte 0x02017744
_080563BC: .4byte 0x085D3300
_080563C0: .4byte 0x081B7690
_080563C4: .4byte 0x081B4E9C
_080563C8: .4byte 0x081B4F9C
_080563CC: .4byte gBg1Tm
_080563D0: .4byte gDispIo
_080563D4: .4byte 0x0000FFE0
_080563D8: .4byte 0x0000E0FF
_080563DC: .4byte 0x0000F3FF

	thumb_func_start sub_80563E0
sub_80563E0: @ 0x080563E0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, [r4, #0x5c]
	ldr r1, _08056434 @ =gDispIo
	ldrh r0, [r1, #0x22]
	subs r0, #1
	strh r0, [r1, #0x22]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _0805642C
	bl sub_80474D8
	bl sub_80475D8
	ldr r0, [r5, #0x1c]
	ldr r1, _08056438 @ =0xFFFFF7FF
	ands r0, r1
	str r0, [r5, #0x1c]
	ldr r0, _0805643C @ =0x0000F3FF
	ldrh r1, [r5, #8]
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5, #8]
	ldr r1, _08056440 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0805642C:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08056434: .4byte gDispIo
_08056438: .4byte 0xFFFFF7FF
_0805643C: .4byte 0x0000F3FF
_08056440: .4byte 0x02017744

	thumb_func_start sub_8056444
sub_8056444: @ 0x08056444
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _08056468 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805646C @ =0x085D3318
	movs r1, #4
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08056468: .4byte 0x02017744
_0805646C: .4byte 0x085D3318

	thumb_func_start sub_8056470
sub_8056470: @ 0x08056470
	push {r4, lr}
	sub sp, #0x48
	adds r4, r0, #0
	ldr r2, [r4, #0x5c]
	mov r1, sp
	ldrh r0, [r2, #2]
	strh r0, [r1, #2]
	ldrh r0, [r2, #4]
	strh r0, [r1, #4]
	ldr r0, [r2, #0x3c]
	str r0, [sp, #0x3c]
	ldr r0, [r2, #0x1c]
	ldr r1, _080564CC @ =0xFFFFF7FF
	ands r0, r1
	str r0, [sp, #0x1c]
	mov r0, sp
	ldrh r1, [r2, #8]
	strh r1, [r0, #8]
	mov r2, sp
	ldr r0, _080564D0 @ =0x0000F3FF
	ands r0, r1
	strh r0, [r2, #8]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2, #8]
	mov r0, sp
	bl BasPutOam
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _080564C2
	adds r0, r4, #0
	bl Proc_Break
_080564C2:
	add sp, #0x48
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080564CC: .4byte 0xFFFFF7FF
_080564D0: .4byte 0x0000F3FF

	thumb_func_start sub_80564D4
sub_80564D4: @ 0x080564D4
	ldr r1, _080564E0 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_080564E0: .4byte 0x02017744

	thumb_func_start sub_80564E4
sub_80564E4: @ 0x080564E4
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0805652C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08056530 @ =0x085D3338
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	adds r0, r5, #0
	bl sub_804B80C
	ldr r3, _08056534 @ =0x085D0E8C
	ldr r0, [r4, #0x5c]
	str r3, [sp]
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	ldr r1, _08056538 @ =0x0000F3FF
	ldrh r2, [r0, #8]
	ands r1, r2
	movs r3, #0x80
	lsls r3, r3, #3
	adds r2, r3, #0
	orrs r1, r2
	strh r1, [r0, #8]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805652C: .4byte 0x02017744
_08056530: .4byte 0x085D3338
_08056534: .4byte 0x085D0E8C
_08056538: .4byte 0x0000F3FF

	thumb_func_start sub_805653C
sub_805653C: @ 0x0805653C
	push {lr}
	ldr r2, _08056550 @ =0x02017744
	ldr r1, [r2]
	subs r1, #1
	str r1, [r2]
	ldr r0, [r0, #0x60]
	bl BasRemove
	pop {r0}
	bx r0
	.align 2, 0
_08056550: .4byte 0x02017744

	thumb_func_start sub_8056554
sub_8056554: @ 0x08056554
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _08056584 @ =0x085FEAF8
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _08056588 @ =0x081B7F68
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0805658C @ =0x081B76B0
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08056584: .4byte 0x085FEAF8
_08056588: .4byte 0x081B7F68
_0805658C: .4byte 0x081B76B0

	thumb_func_start sub_8056590
sub_8056590: @ 0x08056590
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _080565C0 @ =0x085FEB0C
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _080565C4 @ =0x081B7F68
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _080565C8 @ =0x081B76B0
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080565C0: .4byte 0x085FEB0C
_080565C4: .4byte 0x081B7F68
_080565C8: .4byte 0x081B76B0

	thumb_func_start sub_80565CC
sub_80565CC: @ 0x080565CC
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _080565FC @ =0x085FEB20
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _08056600 @ =0x081B7F68
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _08056604 @ =0x081B76B0
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080565FC: .4byte 0x085FEB20
_08056600: .4byte 0x081B7F68
_08056604: .4byte 0x081B76B0

	thumb_func_start sub_8056608
sub_8056608: @ 0x08056608
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _08056638 @ =0x085FEB34
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _0805663C @ =0x081B7F68
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _08056640 @ =0x081B76B0
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08056638: .4byte 0x085FEB34
_0805663C: .4byte 0x081B7F68
_08056640: .4byte 0x081B76B0

	thumb_func_start sub_8056644
sub_8056644: @ 0x08056644
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _08056674 @ =0x085FEB48
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _08056678 @ =0x081B7F68
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0805667C @ =0x081B76B0
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08056674: .4byte 0x085FEB48
_08056678: .4byte 0x081B7F68
_0805667C: .4byte 0x081B76B0

	thumb_func_start sub_8056680
sub_8056680: @ 0x08056680
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _080566B0 @ =0x085FEEBC
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _080566B4 @ =0x081B7F68
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _080566B8 @ =0x081B7B48
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080566B0: .4byte 0x085FEEBC
_080566B4: .4byte 0x081B7F68
_080566B8: .4byte 0x081B7B48

	thumb_func_start sub_80566BC
sub_80566BC: @ 0x080566BC
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _080566EC @ =0x085FEEC8
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _080566F0 @ =0x081B7F68
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _080566F4 @ =0x081B7B48
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080566EC: .4byte 0x085FEEC8
_080566F0: .4byte 0x081B7F68
_080566F4: .4byte 0x081B7B48

	thumb_func_start sub_80566F8
sub_80566F8: @ 0x080566F8
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _08056728 @ =0x085FEED4
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _0805672C @ =0x081B7F68
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _08056730 @ =0x081B7B48
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08056728: .4byte 0x085FEED4
_0805672C: .4byte 0x081B7F68
_08056730: .4byte 0x081B7B48

	thumb_func_start sub_8056734
sub_8056734: @ 0x08056734
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _08056764 @ =0x085FEEE0
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _08056768 @ =0x081B7F68
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0805676C @ =0x081B7B48
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08056764: .4byte 0x085FEEE0
_08056768: .4byte 0x081B7F68
_0805676C: .4byte 0x081B7B48

	thumb_func_start sub_8056770
sub_8056770: @ 0x08056770
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, _080567A0 @ =0x085FEEEC
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _080567A4 @ =0x081B7F68
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _080567A8 @ =0x081B7B48
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080567A0: .4byte 0x085FEEEC
_080567A4: .4byte 0x081B7F68
_080567A8: .4byte 0x081B7B48

	thumb_func_start sub_80567AC
sub_80567AC: @ 0x080567AC
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80474B0
	bl sub_8047300
	bl sub_80474C8
	ldr r0, _080567E4 @ =0x085D33F0
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r5, #0
	bl sub_804B868
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	bl sub_804B6D8
	adds r4, #0x29
	strb r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080567E4: .4byte 0x085D33F0

	thumb_func_start sub_80567E8
sub_80567E8: @ 0x080567E8
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x5c]
	bl sub_804B80C
	adds r4, r0, #0
	bl sub_8047C28
	adds r6, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	movs r7, #0
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08056814
	ldr r0, [r5, #0x5c]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8045C90
_08056814:
	movs r0, #0x2c
	ldrsh r1, [r5, r0]
	adds r0, r6, #1
	cmp r1, r0
	bne _08056844
	ldr r0, [r5, #0x5c]
	bl sub_80568B4
	adds r0, r4, #0
	bl sub_8056968
	adds r0, r4, #0
	bl sub_80569C0
	movs r0, #0x81
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r4, r3]
	movs r3, #1
	bl sub_805C804
	b _080568AE
_08056844:
	adds r0, r6, #0
	adds r0, #0x28
	cmp r1, r0
	beq _08056854
	adds r0, r6, #0
	adds r0, #0x50
	cmp r1, r0
	bne _0805685C
_08056854:
	adds r0, r4, #0
	bl sub_80569C0
	b _080568AE
_0805685C:
	adds r0, r6, #0
	adds r0, #0xb0
	cmp r1, r0
	bne _08056872
	adds r0, r4, #0
	movs r1, #1
	movs r2, #5
	movs r3, #0
	bl sub_8046C14
	b _080568AE
_08056872:
	adds r0, r6, #0
	adds r0, #0xe1
	cmp r1, r0
	bne _08056890
	movs r0, #9
	ldrh r1, [r4, #0x10]
	orrs r0, r1
	strh r0, [r4, #0x10]
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r1, [r0]
	adds r0, r4, #0
	bl sub_80478A0
	b _080568AE
_08056890:
	adds r0, r6, #0
	adds r0, #0xe6
	cmp r1, r0
	bne _080568AE
	movs r0, #2
	ldrh r3, [r4, #0x10]
	orrs r0, r3
	strh r0, [r4, #0x10]
	bl sub_80474BC
	bl sub_8047358
	adds r0, r5, #0
	bl Proc_Break
_080568AE:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80568B4
sub_80568B4: @ 0x080568B4
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _080568F8 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080568FC @ =0x085D3408
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _08056900 @ =0x0811AD68
	str r1, [r0, #0x48]
	ldr r1, _08056904 @ =0x085D3420
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r0, _08056908 @ =0x081B8934
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, _0805690C @ =0x081B80A8
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	bl sub_8047500
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080568F8: .4byte 0x02017744
_080568FC: .4byte 0x085D3408
_08056900: .4byte 0x0811AD68
_08056904: .4byte 0x085D3420
_08056908: .4byte 0x081B8934
_0805690C: .4byte 0x081B80A8

	thumb_func_start sub_8056910
sub_8056910: @ 0x08056910
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _0805693E
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl sub_804799C
	b _0805695C
_0805693E:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _0805695C
	bl sub_80474D8
	ldr r1, _08056964 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_Break
_0805695C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08056964: .4byte 0x02017744

	thumb_func_start sub_8056968
sub_8056968: @ 0x08056968
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _080569AC @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080569B0 @ =0x085D3434
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	ldr r3, _080569B4 @ =0x08602FAC
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	ldr r0, _080569B8 @ =0x081B8E44
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _080569BC @ =0x081B7468
	movs r1, #0x80
	lsls r1, r1, #4
	bl sub_8047A88
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080569AC: .4byte 0x02017744
_080569B0: .4byte 0x085D3434
_080569B4: .4byte 0x08602FAC
_080569B8: .4byte 0x081B8E44
_080569BC: .4byte 0x081B7468

	thumb_func_start sub_80569C0
sub_80569C0: @ 0x080569C0
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _080569F4 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080569F8 @ =0x085D3454
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	ldr r3, _080569FC @ =0x086030FC
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080569F4: .4byte 0x02017744
_080569F8: .4byte 0x085D3454
_080569FC: .4byte 0x086030FC

	thumb_func_start sub_8056A00
sub_8056A00: @ 0x08056A00
	push {lr}
	ldr r0, [r0, #0x60]
	bl BasRemove
	ldr r1, _08056A14 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08056A14: .4byte 0x02017744

	thumb_func_start sub_8056A18
sub_8056A18: @ 0x08056A18
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08056A38 @ =0x085D3474
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	adds r0, #0x29
	strb r5, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08056A38: .4byte 0x085D3474

	thumb_func_start sub_8056A3C
sub_8056A3C: @ 0x08056A3C
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08056A5A
	ldr r0, [r1, #0x5c]
	adds r1, #0x29
	ldrb r1, [r1]
	bl sub_8056A68
	b _08056A64
_08056A5A:
	cmp r0, #0xa
	bne _08056A64
	adds r0, r1, #0
	bl Proc_Break
_08056A64:
	pop {r0}
	bx r0

	thumb_func_start sub_8056A68
sub_8056A68: @ 0x08056A68
	push {r4, r5, r6, lr}
	sub sp, #0xc
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, _08056A8C @ =0x085D348C
	movs r1, #3
	bl SpawnProc
	adds r6, r0, #0
	str r5, [r6, #0x5c]
	movs r0, #0
	strh r0, [r6, #0x2c]
	cmp r4, #0
	bne _08056A94
	movs r0, #0x32
	strh r0, [r6, #0x2e]
	ldr r4, _08056A90 @ =0x085CDCA4
	b _08056A9A
	.align 2, 0
_08056A8C: .4byte 0x085D348C
_08056A90: .4byte 0x085CDCA4
_08056A94:
	movs r0, #0x32
	strh r0, [r6, #0x2e]
	ldr r4, _08056AD4 @ =0x085CDD18
_08056A9A:
	adds r0, r5, #0
	bl sub_804B6C4
	movs r2, #0xa2
	lsls r2, r2, #7
	cmp r0, #0
	bne _08056AAC
	movs r2, #0xc2
	lsls r2, r2, #7
_08056AAC:
	movs r1, #2
	ldrsh r0, [r5, r1]
	movs r3, #4
	ldrsh r1, [r5, r3]
	subs r1, #0x28
	str r2, [sp]
	movs r2, #0
	str r2, [sp, #4]
	movs r2, #3
	str r2, [sp, #8]
	adds r2, r4, #0
	movs r3, #2
	bl sub_805B9E0
	str r0, [r6, #0x60]
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08056AD4: .4byte 0x085CDD18

	thumb_func_start sub_8056AD8
sub_8056AD8: @ 0x08056AD8
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, [r4, #0x5c]
	ldrh r0, [r0, #2]
	strh r0, [r1, #0x32]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08056B00
	ldr r0, [r4, #0x60]
	bl Proc_End
	adds r0, r4, #0
	bl Proc_Break
_08056B00:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8056B08
sub_8056B08: @ 0x08056B08
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80474C8
	ldr r0, _08056B24 @ =0x085D34A4
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08056B24: .4byte 0x085D34A4

	thumb_func_start sub_8056B28
sub_8056B28: @ 0x08056B28
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08056B48
	ldr r0, [r4, #0x5c]
	bl sub_8056B58
	ldr r0, [r4, #0x5c]
	bl sub_8056BD0
	b _08056B52
_08056B48:
	cmp r0, #0x11
	bne _08056B52
	adds r0, r4, #0
	bl Proc_Break
_08056B52:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8056B58
sub_8056B58: @ 0x08056B58
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _08056B94 @ =0x085D34BC
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r0, _08056B98 @ =0x08122A3C
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, _08056B9C @ =0x08123B1C
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, [r4, #0x5c]
	ldr r1, _08056BA0 @ =0x08123D1C
	ldr r2, _08056BA4 @ =0x081241BC
	bl sub_804799C
	bl sub_8047500
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08056B94: .4byte 0x085D34BC
_08056B98: .4byte 0x08122A3C
_08056B9C: .4byte 0x08123B1C
_08056BA0: .4byte 0x08123D1C
_08056BA4: .4byte 0x081241BC

	thumb_func_start sub_8056BA8
sub_8056BA8: @ 0x08056BA8
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x11
	bne _08056BC8
	bl sub_80474D8
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_Break
_08056BC8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8056BD0
sub_8056BD0: @ 0x08056BD0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08056BF4 @ =0x085D34D4
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _08056BF8 @ =0x0811AE34
	str r1, [r0, #0x48]
	ldr r1, _08056BFC @ =0x08123B1C
	str r1, [r0, #0x4c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08056BF4: .4byte 0x085D34D4
_08056BF8: .4byte 0x0811AE34
_08056BFC: .4byte 0x08123B1C

	thumb_func_start sub_8056C00
sub_8056C00: @ 0x08056C00
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _08056C26
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	movs r1, #0x20
	bl sub_8047AF4
	b _08056C34
_08056C26:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08056C34
	adds r0, r4, #0
	bl Proc_Break
_08056C34:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8056C3C
sub_8056C3C: @ 0x08056C3C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80474C8
	ldr r0, _08056C58 @ =0x085D34F4
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08056C58: .4byte 0x085D34F4

	thumb_func_start sub_8056C5C
sub_8056C5C: @ 0x08056C5C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r1, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08056C80
	ldr r0, [r4, #0x5c]
	movs r1, #4
	bl sub_8046794
	b _08056C96
_08056C80:
	cmp r0, #4
	bne _08056C8C
	adds r0, r1, #0
	bl sub_8056C9C
	b _08056C96
_08056C8C:
	cmp r0, #0x18
	bne _08056C96
	adds r0, r4, #0
	bl Proc_Break
_08056C96:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8056C9C
sub_8056C9C: @ 0x08056C9C
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08056CFC @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08056D00 @ =0x085D350C
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08056D04 @ =0x0811AE76
	str r0, [r5, #0x48]
	ldr r0, _08056D08 @ =0x085D3524
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08056D0C @ =0x08124B64
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, _08056D10 @ =0x0812479C
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	bl sub_8047500
	ldr r0, _08056D14 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08056D22
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08056D18
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _08056D22
	.align 2, 0
_08056CFC: .4byte 0x02017744
_08056D00: .4byte 0x085D350C
_08056D04: .4byte 0x0811AE76
_08056D08: .4byte 0x085D3524
_08056D0C: .4byte 0x08124B64
_08056D10: .4byte 0x0812479C
_08056D14: .4byte 0x0203CD14
_08056D18:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_08056D22:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8056D28
sub_8056D28: @ 0x08056D28
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _08056D56
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl sub_804799C
	b _08056D74
_08056D56:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _08056D74
	bl sub_80474D8
	ldr r1, _08056D7C @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_Break
_08056D74:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08056D7C: .4byte 0x02017744

	thumb_func_start sub_8056D80
sub_8056D80: @ 0x08056D80
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08056DA4 @ =0x085D354C
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_8056DB4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08056DA4: .4byte 0x085D354C

	thumb_func_start sub_8056DA8
sub_8056DA8: @ 0x08056DA8
	push {lr}
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8056DB4
sub_8056DB4: @ 0x08056DB4
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r4, r1, #0
	ldr r0, _08056DDC @ =0x085D3564
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r6, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	adds r0, r5, #0
	adds r0, #0x29
	strb r4, [r0]
	cmp r4, #0
	bne _08056DE8
	ldr r2, _08056DE0 @ =0x085DC850
	ldr r3, _08056DE4 @ =0x085DDAF0
	b _08056DEC
	.align 2, 0
_08056DDC: .4byte 0x085D3564
_08056DE0: .4byte 0x085DC850
_08056DE4: .4byte 0x085DDAF0
_08056DE8:
	ldr r2, _08056E18 @ =0x085DEDC0
	ldr r3, _08056E1C @ =0x085E0090
_08056DEC:
	str r2, [sp]
	adds r0, r6, #0
	adds r1, r3, #0
	bl sub_80478DC
	adds r4, r0, #0
	str r4, [r5, #0x60]
	movs r0, #0xc0
	lsls r0, r0, #4
	ldrh r1, [r4, #8]
	ands r0, r1
	movs r5, #0
	strh r0, [r4, #8]
	adds r0, r6, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _08056E20
	movs r1, #0xe4
	lsls r1, r1, #7
	b _08056E24
	.align 2, 0
_08056E18: .4byte 0x085DEDC0
_08056E1C: .4byte 0x085E0090
_08056E20:
	movs r1, #0x93
	lsls r1, r1, #8
_08056E24:
	adds r0, r1, #0
	ldrh r1, [r4, #8]
	orrs r0, r1
	strh r0, [r4, #8]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_8056E34
sub_8056E34: @ 0x08056E34
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x60]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x45
	bne _08056E92
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _08056E6C
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08056E64
	ldr r0, _08056E60 @ =0x085DDBF4
	b _08056E82
	.align 2, 0
_08056E60: .4byte 0x085DDBF4
_08056E64:
	ldr r0, _08056E68 @ =0x085DC954
	b _08056E82
	.align 2, 0
_08056E68: .4byte 0x085DC954
_08056E6C:
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08056E80
	ldr r0, _08056E7C @ =0x085E0194
	b _08056E82
	.align 2, 0
_08056E7C: .4byte 0x085E0194
_08056E80:
	ldr r0, _08056E98 @ =0x085DEEC4
_08056E82:
	str r0, [r4, #0x24]
	str r0, [r4, #0x20]
	movs r0, #0
	strh r0, [r4, #6]
	strh r0, [r5, #0x2c]
	adds r0, r5, #0
	bl Proc_Break
_08056E92:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08056E98: .4byte 0x085DEEC4

	thumb_func_start sub_8056E9C
sub_8056E9C: @ 0x08056E9C
	push {lr}
	adds r1, r0, #0
	ldr r0, [r1, #0x5c]
	ldrh r2, [r0, #0x10]
	movs r0, #4
	ands r0, r2
	cmp r0, #0
	beq _08056EBE
	movs r0, #8
	ands r0, r2
	cmp r0, #0
	beq _08056EBE
	movs r0, #0
	strh r0, [r1, #0x2c]
	adds r0, r1, #0
	bl Proc_Break
_08056EBE:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8056EC4
sub_8056EC4: @ 0x08056EC4
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x60]
	bl sub_80449C4
	cmp r0, #1
	bne _08056F1E
	adds r0, r5, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _08056EF8
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08056EF0
	ldr r0, _08056EEC @ =0x085DDC1C
	b _08056F0E
	.align 2, 0
_08056EEC: .4byte 0x085DDC1C
_08056EF0:
	ldr r0, _08056EF4 @ =0x085DC97C
	b _08056F0E
	.align 2, 0
_08056EF4: .4byte 0x085DC97C
_08056EF8:
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08056F0C
	ldr r0, _08056F08 @ =0x085E01BC
	b _08056F0E
	.align 2, 0
_08056F08: .4byte 0x085E01BC
_08056F0C:
	ldr r0, _08056F24 @ =0x085DEEEC
_08056F0E:
	str r0, [r4, #0x24]
	str r0, [r4, #0x20]
	movs r0, #0
	strh r0, [r4, #6]
	strh r0, [r5, #0x2c]
	adds r0, r5, #0
	bl Proc_Break
_08056F1E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08056F24: .4byte 0x085DEEEC

	thumb_func_start sub_8056F28
sub_8056F28: @ 0x08056F28
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x14
	bne _08056F4A
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r0, [r4, #0x60]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
_08056F4A:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8056F50
sub_8056F50: @ 0x08056F50
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _08056F7C @ =0x02017744
	ldr r5, [r0]
	cmp r5, #0
	bne _08056F8E
	ldr r0, _08056F80 @ =0x085D3594
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	strh r5, [r0, #0x2c]
	ldr r0, _08056F84 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _08056F88
	adds r0, r4, #0
	bl sub_8056FA0
	b _08056F8E
	.align 2, 0
_08056F7C: .4byte 0x02017744
_08056F80: .4byte 0x085D3594
_08056F84: .4byte 0x0203CD14
_08056F88:
	adds r0, r4, #0
	bl sub_80570A0
_08056F8E:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8056F94
sub_8056F94: @ 0x08056F94
	push {lr}
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8056FA0
sub_8056FA0: @ 0x08056FA0
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _08056FD8 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08056FDC @ =0x085D35AC
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r3, _08056FE0 @ =0x085D0E8C
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08056FD8: .4byte 0x02017744
_08056FDC: .4byte 0x085D35AC
_08056FE0: .4byte 0x085D0E8C

	thumb_func_start sub_8056FE4
sub_8056FE4: @ 0x08056FE4
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x60]
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #1
	bne _08056FFC
	ldr r0, _08056FF8 @ =0x085D7190
	b _08056FFE
	.align 2, 0
_08056FF8: .4byte 0x085D7190
_08056FFC:
	ldr r0, _08057024 @ =0x085D74FC
_08056FFE:
	str r0, [r4, #0x24]
	str r0, [r4, #0x20]
	movs r0, #0
	strh r0, [r4, #6]
	ldr r0, _08057028 @ =0x08121498
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0805702C @ =0x08120414
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08057024: .4byte 0x085D74FC
_08057028: .4byte 0x08121498
_0805702C: .4byte 0x08120414

	thumb_func_start sub_8057030
sub_8057030: @ 0x08057030
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x60]
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #1
	bne _08057048
	ldr r0, _08057044 @ =0x085D77E4
	b _0805704A
	.align 2, 0
_08057044: .4byte 0x085D77E4
_08057048:
	ldr r0, _08057070 @ =0x085D7A40
_0805704A:
	str r0, [r4, #0x24]
	str r0, [r4, #0x20]
	movs r0, #0
	strh r0, [r4, #6]
	ldr r0, _08057074 @ =0x08121498
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _08057078 @ =0x08120CB4
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08057070: .4byte 0x085D7A40
_08057074: .4byte 0x08121498
_08057078: .4byte 0x08120CB4

	thumb_func_start sub_805707C
sub_805707C: @ 0x0805707C
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805709C @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	ldr r0, [r4, #0x60]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805709C: .4byte 0x02017744

	thumb_func_start sub_80570A0
sub_80570A0: @ 0x080570A0
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _080570D8 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080570DC @ =0x085D35E4
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r3, _080570E0 @ =0x085D0E8C
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080570D8: .4byte 0x02017744
_080570DC: .4byte 0x085D35E4
_080570E0: .4byte 0x085D0E8C

	thumb_func_start sub_80570E4
sub_80570E4: @ 0x080570E4
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x60]
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #1
	bne _080570FC
	ldr r0, _080570F8 @ =0x085D71D8
	b _080570FE
	.align 2, 0
_080570F8: .4byte 0x085D71D8
_080570FC:
	ldr r0, _08057124 @ =0x085D7544
_080570FE:
	str r0, [r4, #0x24]
	str r0, [r4, #0x20]
	movs r0, #0
	strh r0, [r4, #6]
	ldr r0, _08057128 @ =0x08121498
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0805712C @ =0x08120414
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08057124: .4byte 0x085D7544
_08057128: .4byte 0x08121498
_0805712C: .4byte 0x08120414

	thumb_func_start sub_8057130
sub_8057130: @ 0x08057130
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x60]
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #1
	bne _08057148
	ldr r0, _08057144 @ =0x085D77F4
	b _0805714A
	.align 2, 0
_08057144: .4byte 0x085D77F4
_08057148:
	ldr r0, _08057170 @ =0x085D7A50
_0805714A:
	str r0, [r4, #0x24]
	str r0, [r4, #0x20]
	movs r0, #0
	strh r0, [r4, #6]
	ldr r0, _08057174 @ =0x08121498
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _08057178 @ =0x08120CB4
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08057170: .4byte 0x085D7A50
_08057174: .4byte 0x08121498
_08057178: .4byte 0x08120CB4

	thumb_func_start sub_805717C
sub_805717C: @ 0x0805717C
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0805719C @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	ldr r0, [r4, #0x60]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805719C: .4byte 0x02017744

	thumb_func_start sub_80571A0
sub_80571A0: @ 0x080571A0
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	adds r7, r1, #0
	ldr r0, _080571EC @ =0x02017744
	ldr r4, [r0]
	cmp r4, #0
	bne _08057200
	bl sub_80474C8
	ldr r0, _080571F0 @ =0x085D361C
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r6, [r5, #0x5c]
	strh r4, [r5, #0x2c]
	ldr r4, _080571F4 @ =0x0203CD76
	adds r0, r6, #0
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0x11
	beq _080571F8
	cmp r0, #0x11
	bgt _080571F8
	cmp r0, #0xd
	bgt _080571F8
	cmp r0, #0xc
	blt _080571F8
	ldr r0, [r5, #0x5c]
	adds r1, r7, #0
	bl sub_8057224
	b _08057200
	.align 2, 0
_080571EC: .4byte 0x02017744
_080571F0: .4byte 0x085D361C
_080571F4: .4byte 0x0203CD76
_080571F8:
	ldr r0, [r5, #0x5c]
	adds r1, r7, #2
	bl sub_8057224
_08057200:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8057208
sub_8057208: @ 0x08057208
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x14
	bne _08057220
	adds r0, r1, #0
	bl Proc_Break
_08057220:
	pop {r0}
	bx r0

	thumb_func_start sub_8057224
sub_8057224: @ 0x08057224
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	ldr r1, _08057258 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805725C @ =0x085D3634
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	cmp r6, #1
	beq _08057270
	cmp r6, #1
	blo _08057260
	cmp r6, #2
	beq _08057280
	cmp r6, #3
	beq _08057288
	b _08057292
	.align 2, 0
_08057258: .4byte 0x02017744
_0805725C: .4byte 0x085D3634
_08057260:
	ldr r0, _08057268 @ =0x0811AEA0
	str r0, [r5, #0x48]
	ldr r0, _0805726C @ =0x085D364C
	b _0805728E
	.align 2, 0
_08057268: .4byte 0x0811AEA0
_0805726C: .4byte 0x085D364C
_08057270:
	ldr r0, _08057278 @ =0x0811AEB6
	str r0, [r5, #0x48]
	ldr r0, _0805727C @ =0x085D364C
	b _0805728E
	.align 2, 0
_08057278: .4byte 0x0811AEB6
_0805727C: .4byte 0x085D364C
_08057280:
	ldr r0, _08057284 @ =0x0811AEBC
	b _0805728A
	.align 2, 0
_08057284: .4byte 0x0811AEBC
_08057288:
	ldr r0, _080572C8 @ =0x0811AEDE
_0805728A:
	str r0, [r5, #0x48]
	ldr r0, _080572CC @ =0x085D3664
_0805728E:
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
_08057292:
	ldr r0, _080572D0 @ =0x08129504
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, _080572D4 @ =0x0812A258
	movs r1, #0x20
	bl sub_8047AF4
	bl sub_8047500
	ldr r0, _080572D8 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _080572E6
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _080572DC
	movs r0, #1
	movs r1, #0x18
	movs r2, #0
	bl SetBgOffset
	b _080572E6
	.align 2, 0
_080572C8: .4byte 0x0811AEDE
_080572CC: .4byte 0x085D3664
_080572D0: .4byte 0x08129504
_080572D4: .4byte 0x0812A258
_080572D8: .4byte 0x0203CD14
_080572DC:
	movs r0, #1
	movs r1, #0xe8
	movs r2, #0
	bl SetBgOffset
_080572E6:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_80572EC
sub_80572EC: @ 0x080572EC
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _0805731A
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl sub_804799C
	b _08057338
_0805731A:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _08057338
	bl sub_80474D8
	ldr r1, _08057340 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_End
_08057338:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08057340: .4byte 0x02017744

	thumb_func_start sub_8057344
sub_8057344: @ 0x08057344
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r0, _0805736C @ =0x02017744
	ldr r4, [r0]
	cmp r4, #0
	bne _08057366
	ldr r0, _08057370 @ =0x085D36A4
	movs r1, #3
	bl SpawnProc
	str r5, [r0, #0x5c]
	strh r4, [r0, #0x2c]
	adds r0, r5, #0
	adds r1, r6, #0
	bl sub_8057380
_08057366:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805736C: .4byte 0x02017744
_08057370: .4byte 0x085D36A4

	thumb_func_start sub_8057374
sub_8057374: @ 0x08057374
	push {lr}
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8057380
sub_8057380: @ 0x08057380
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r4, r1, #0
	ldr r1, _080573E8 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _080573EC @ =0x085D36BC
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r6, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	ldr r2, _080573F0 @ =0x085E0280
	cmp r4, #0
	beq _080573AE
	ldr r2, _080573F4 @ =0x085E0510
	cmp r4, #1
	bne _080573AE
	ldr r2, _080573F8 @ =0x085E03C8
_080573AE:
	ldr r3, _080573FC @ =0x085E0324
	cmp r4, #0
	beq _080573BC
	ldr r3, _08057400 @ =0x085E05B4
	cmp r4, #1
	bne _080573BC
	ldr r3, _08057404 @ =0x085E046C
_080573BC:
	str r2, [sp]
	adds r0, r6, #0
	adds r1, r3, #0
	bl sub_80478DC
	str r0, [r5, #0x60]
	ldr r4, _08057408 @ =0x0203CDC0
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0x32
	bls _080573DE
	b _08057510
_080573DE:
	lsls r0, r0, #2
	ldr r1, _0805740C @ =_08057410
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080573E8: .4byte 0x02017744
_080573EC: .4byte 0x085D36BC
_080573F0: .4byte 0x085E0280
_080573F4: .4byte 0x085E0510
_080573F8: .4byte 0x085E03C8
_080573FC: .4byte 0x085E0324
_08057400: .4byte 0x085E05B4
_08057404: .4byte 0x085E046C
_08057408: .4byte 0x0203CDC0
_0805740C: .4byte _08057410
_08057410: @ jump table
	.4byte _08057510 @ case 0
	.4byte _080574DC @ case 1
	.4byte _080574DC @ case 2
	.4byte _080574DC @ case 3
	.4byte _080574DC @ case 4
	.4byte _080574DC @ case 5
	.4byte _08057508 @ case 6
	.4byte _08057508 @ case 7
	.4byte _08057508 @ case 8
	.4byte _08057508 @ case 9
	.4byte _080574DC @ case 10
	.4byte _08057508 @ case 11
	.4byte _080574DC @ case 12
	.4byte _080574DC @ case 13
	.4byte _080574DC @ case 14
	.4byte _080574DC @ case 15
	.4byte _080574F8 @ case 16
	.4byte _080574DC @ case 17
	.4byte _080574DC @ case 18
	.4byte _080574DC @ case 19
	.4byte _080574E4 @ case 20
	.4byte _080574F8 @ case 21
	.4byte _080574F8 @ case 22
	.4byte _08057508 @ case 23
	.4byte _08057508 @ case 24
	.4byte _080574DC @ case 25
	.4byte _080574DC @ case 26
	.4byte _080574DC @ case 27
	.4byte _080574DC @ case 28
	.4byte _08057508 @ case 29
	.4byte _08057508 @ case 30
	.4byte _08057508 @ case 31
	.4byte _08057508 @ case 32
	.4byte _08057508 @ case 33
	.4byte _080574DC @ case 34
	.4byte _080574DC @ case 35
	.4byte _08057508 @ case 36
	.4byte _080574DC @ case 37
	.4byte _080574DC @ case 38
	.4byte _080574DC @ case 39
	.4byte _080574DC @ case 40
	.4byte _080574DC @ case 41
	.4byte _080574DC @ case 42
	.4byte _080574DC @ case 43
	.4byte _08057510 @ case 44
	.4byte _08057508 @ case 45
	.4byte _08057510 @ case 46
	.4byte _080574DC @ case 47
	.4byte _08057508 @ case 48
	.4byte _08057508 @ case 49
	.4byte _08057508 @ case 50
_080574DC:
	ldr r0, _080574E0 @ =0x0812C62C
	b _080574FA
	.align 2, 0
_080574E0: .4byte 0x0812C62C
_080574E4:
	ldr r0, [r5, #0x5c]
	bl sub_805C2B0
	cmp r0, #0
	beq _080574F8
	ldr r0, _080574F4 @ =0x0812C62C
	b _080574FA
	.align 2, 0
_080574F4: .4byte 0x0812C62C
_080574F8:
	ldr r0, _08057504 @ =0x0812C64C
_080574FA:
	movs r1, #0x20
	bl sub_8047AB0
	b _08057510
	.align 2, 0
_08057504: .4byte 0x0812C64C
_08057508:
	ldr r0, _08057524 @ =0x0812C66C
	movs r1, #0x20
	bl sub_8047AB0
_08057510:
	ldr r0, _08057528 @ =0x0812C1BC
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08057524: .4byte 0x0812C66C
_08057528: .4byte 0x0812C1BC

	thumb_func_start sub_805752C
sub_805752C: @ 0x0805752C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bne _08057552
	ldr r0, _08057558 @ =0x02017744
	ldr r1, [r0]
	subs r1, #1
	str r1, [r0]
	ldr r0, [r4, #0x60]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
_08057552:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08057558: .4byte 0x02017744

	thumb_func_start sub_805755C
sub_805755C: @ 0x0805755C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08057574 @ =0x085D36D4
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08057574: .4byte 0x085D36D4

	thumb_func_start sub_8057578
sub_8057578: @ 0x08057578
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldr r6, [r7, #0x5c]
	ldrh r0, [r7, #0x2c]
	adds r0, #1
	strh r0, [r7, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805759A
	adds r0, r6, #0
	movs r1, #1
	movs r2, #0x28
	movs r3, #0
	bl sub_8046C14
	b _080575DE
_0805759A:
	cmp r0, #0xa
	bne _080575A8
	adds r0, r6, #0
	movs r1, #0x14
	bl sub_8046794
	b _080575DE
_080575A8:
	cmp r0, #0x2d
	bne _080575DE
	ldr r5, _080575E4 @ =0x02000000
	adds r0, r6, #0
	bl sub_804B6C4
	lsls r0, r0, #3
	adds r0, r0, r5
	ldr r4, [r0]
	adds r0, r6, #0
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, #1
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r2, [r0]
	movs r0, #0x40
	ldrh r1, [r4, #0x10]
	orrs r1, r0
	strh r1, [r4, #0x10]
	ldrh r1, [r2, #0x10]
	orrs r0, r1
	strh r0, [r2, #0x10]
	adds r0, r7, #0
	bl Proc_Break
_080575DE:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080575E4: .4byte 0x02000000

	thumb_func_start sub_80575E8
sub_80575E8: @ 0x080575E8
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _08057648 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805764C @ =0x085D36EC
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x28
	strh r0, [r4, #0x2e]
	ldr r3, _08057650 @ =0x085D55C0
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	ldr r0, _08057654 @ =0x0811CAD8
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _08057658 @ =0x0811C964
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xee
	movs r3, #1
	bl sub_805C804
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08057648: .4byte 0x02017744
_0805764C: .4byte 0x085D36EC
_08057650: .4byte 0x085D55C0
_08057654: .4byte 0x0811CAD8
_08057658: .4byte 0x0811C964

	thumb_func_start sub_805765C
sub_805765C: @ 0x0805765C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x18
	bne _08057680
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xee
	movs r3, #1
	bl sub_805C804
_08057680:
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	movs r2, #0x2e
	ldrsh r0, [r4, r2]
	cmp r1, r0
	ble _080576A0
	ldr r0, [r4, #0x60]
	bl BasRemove
	ldr r1, _080576A8 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_080576A0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080576A8: .4byte 0x02017744

	thumb_func_start sub_80576AC
sub_80576AC: @ 0x080576AC
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, _0805770C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08057710 @ =0x085D3704
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x19
	strh r0, [r4, #0x2e]
	ldr r3, _08057714 @ =0x085D5590
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	ldr r0, _08057718 @ =0x0811CAD8
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0805771C @ =0x0811C964
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xe1
	movs r3, #1
	bl sub_805C804
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805770C: .4byte 0x02017744
_08057710: .4byte 0x085D3704
_08057714: .4byte 0x085D5590
_08057718: .4byte 0x0811CAD8
_0805771C: .4byte 0x0811C964

	thumb_func_start sub_8057720
sub_8057720: @ 0x08057720
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08057748
	ldr r0, [r4, #0x60]
	bl BasRemove
	ldr r1, _08057750 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_08057748:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08057750: .4byte 0x02017744

	thumb_func_start sub_8057754
sub_8057754: @ 0x08057754
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r7, r2, #0
	bl sub_805894C
	adds r4, r0, #0
	cmp r4, #0
	bne _0805778E
	ldr r1, _08057794 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08057798 @ =0x085D371C
	movs r1, #3
	bl SpawnProc
	str r5, [r0, #0x5c]
	movs r2, #0
	strh r4, [r0, #0x2c]
	strh r6, [r0, #0x2e]
	strh r7, [r0, #0x30]
	ldr r1, _0805779C @ =gDispIo
	movs r0, #0x40
	ldrb r3, [r1, #0x18]
	orrs r0, r3
	strb r0, [r1, #0x18]
	adds r1, #0x38
	strb r2, [r1]
_0805778E:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08057794: .4byte 0x02017744
_08057798: .4byte 0x085D371C
_0805779C: .4byte gDispIo

	thumb_func_start sub_80577A0
sub_80577A0: @ 0x080577A0
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0x30
	ldrsh r2, [r4, r0]
	movs r1, #0x2c
	ldrsh r3, [r4, r1]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	ldr r2, _080577F0 @ =gDispIo
	adds r2, #0x38
	movs r3, #0xf
	adds r1, r0, #0
	ands r1, r3
	lsls r0, r0, #4
	orrs r0, r1
	strb r0, [r2]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _080577E6
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
_080577E6:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080577F0: .4byte gDispIo

	thumb_func_start sub_80577F4
sub_80577F4: @ 0x080577F4
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0x30
	ldrsh r1, [r4, r0]
	movs r2, #0x2c
	ldrsh r3, [r4, r2]
	movs r2, #0x2e
	ldrsh r0, [r4, r2]
	str r0, [sp]
	movs r0, #0
	movs r2, #0
	bl Interpolate
	ldr r3, _08057858 @ =gDispIo
	adds r5, r3, #0
	adds r5, #0x38
	movs r2, #0xf
	adds r1, r0, #0
	ands r1, r2
	lsls r0, r0, #4
	orrs r0, r1
	strb r0, [r5]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805784E
	ldr r1, _0805785C @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	movs r0, #0x41
	rsbs r0, r0, #0
	ldrb r1, [r3, #0x18]
	ands r0, r1
	strb r0, [r3, #0x18]
	movs r0, #0
	strb r0, [r5]
	adds r0, r4, #0
	bl Proc_Break
_0805784E:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08057858: .4byte gDispIo
_0805785C: .4byte 0x02017744

	thumb_func_start sub_8057860
sub_8057860: @ 0x08057860
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r4, _08057894 @ =0x02017760
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _080578BC
	adds r0, r5, #0
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #1
	strh r1, [r0]
	adds r0, r5, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _0805789C
	ldr r0, _08057898 @ =0x0203CD7C
	b _0805789E
	.align 2, 0
_08057894: .4byte 0x02017760
_08057898: .4byte 0x0203CD7C
_0805789C:
	ldr r0, _080578EC @ =0x0203CD80
_0805789E:
	ldr r0, [r0]
	adds r4, r0, #0
	adds r4, #0x4a
	ldrh r0, [r4]
	bl GetItemKind
	ldrh r0, [r4]
	bl GetItemRequiredExp
	movs r1, #0
	cmp r0, #0xfb
	bne _080578B8
	movs r1, #1
_080578B8:
	cmp r1, #0
	bne _080578F4
_080578BC:
	ldr r4, _080578F0 @ =0x02000000
	adds r0, r5, #0
	bl sub_804B6C4
	lsls r0, r0, #3
	adds r0, r0, r4
	ldr r6, [r0]
	adds r0, r5, #0
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, #1
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r2, [r0]
	movs r1, #0x40
	ldrh r0, [r6, #0x10]
	orrs r0, r1
	strh r0, [r6, #0x10]
	ldrh r0, [r2, #0x10]
	orrs r0, r1
	strh r0, [r2, #0x10]
	b _08057916
	.align 2, 0
_080578EC: .4byte 0x0203CD80
_080578F0: .4byte 0x02000000
_080578F4:
	ldr r0, _0805791C @ =0x085D373C
	movs r1, #3
	bl SpawnProc
	str r5, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0xf0
	movs r2, #0x78
	movs r3, #0
	bl sub_805C804
	adds r0, r5, #0
	bl sub_805792C
_08057916:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805791C: .4byte 0x085D373C

	thumb_func_start sub_8057920
sub_8057920: @ 0x08057920
	push {lr}
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805792C
sub_805792C: @ 0x0805792C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80474C8
	ldr r0, _08057948 @ =0x085D3754
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08057948: .4byte 0x085D3754

	thumb_func_start sub_805794C
sub_805794C: @ 0x0805794C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _08057966
	ldr r0, [r6, #0x5c]
	bl sub_80579C0
	b _080579B6
_08057966:
	cmp r0, #0x15
	bne _08057980
	ldr r0, [r6, #0x5c]
	ldr r2, _0805797C @ =sub_8057A34
	movs r1, #0x2d
	bl sub_804CC68
	bl sub_8057A5C
	b _080579B6
	.align 2, 0
_0805797C: .4byte sub_8057A34
_08057980:
	cmp r0, #0x46
	bne _080579B6
	ldr r5, _080579BC @ =0x02000000
	ldr r0, [r6, #0x5c]
	bl sub_804B6C4
	lsls r0, r0, #3
	adds r0, r0, r5
	ldr r4, [r0]
	ldr r0, [r6, #0x5c]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, #1
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r2, [r0]
	movs r0, #0x40
	ldrh r1, [r4, #0x10]
	orrs r1, r0
	strh r1, [r4, #0x10]
	ldrh r1, [r2, #0x10]
	orrs r0, r1
	strh r0, [r2, #0x10]
	adds r0, r6, #0
	bl Proc_Break
_080579B6:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080579BC: .4byte 0x02000000

	thumb_func_start sub_80579C0
sub_80579C0: @ 0x080579C0
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _080579FC @ =0x085D376C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r0, _08057A00 @ =0x08124618
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, _08057A04 @ =0x081246D8
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, [r4, #0x5c]
	ldr r2, _08057A08 @ =0x081246F8
	adds r1, r2, #0
	bl sub_804799C
	bl sub_8047500
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080579FC: .4byte 0x085D376C
_08057A00: .4byte 0x08124618
_08057A04: .4byte 0x081246D8
_08057A08: .4byte 0x081246F8

	thumb_func_start sub_8057A0C
sub_8057A0C: @ 0x08057A0C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3c
	bne _08057A2C
	bl sub_80474D8
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_Break
_08057A2C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8057A34
sub_8057A34: @ 0x08057A34
	ldr r0, _08057A50 @ =0x04000004
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _08057A4E
	ldr r3, _08057A54 @ =0x04000016
	ldr r2, _08057A58 @ =0x0201E3E0
	ldr r0, [r2]
	ldrh r1, [r0]
	strh r1, [r3]
	adds r0, #2
	str r0, [r2]
_08057A4E:
	bx lr
	.align 2, 0
_08057A50: .4byte 0x04000004
_08057A54: .4byte 0x04000016
_08057A58: .4byte 0x0201E3E0

	thumb_func_start sub_8057A5C
sub_8057A5C: @ 0x08057A5C
	push {lr}
	ldr r0, _08057A78 @ =0x085D3784
	movs r1, #3
	bl SpawnProc
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	str r1, [r0, #0x44]
	bl sub_8057B2C
	pop {r0}
	bx r0
	.align 2, 0
_08057A78: .4byte 0x085D3784

	thumb_func_start sub_8057A7C
sub_8057A7C: @ 0x08057A7C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov sb, r0
	ldr r0, _08057AD8 @ =0x0201E3D8
	ldr r0, [r0]
	ldr r5, _08057ADC @ =0x0201E158
	cmp r0, #0
	bne _08057A92
	ldr r5, _08057AE0 @ =0x0201E298
_08057A92:
	ldr r4, _08057AE4 @ =0x0201E3E4
	cmp r0, #0
	bne _08057A9A
	ldr r4, _08057AE8 @ =0x0201E524
_08057A9A:
	movs r3, #0
	movs r0, #0
	mov r8, r0
	movs r1, #0x88
	lsls r1, r1, #0x10
	mov ip, r1
	movs r7, #0x88
	ldr r6, _08057AEC @ =0x085D37B4
_08057AAA:
	cmp r3, #0x77
	bhi _08057B04
	movs r2, #0
	ldrsh r1, [r6, r2]
	mov r2, sb
	ldr r0, [r2, #0x44]
	muls r0, r1, r0
	lsls r0, r0, #4
	lsrs r2, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	beq _08057AFC
	cmp r3, #0x3b
	bhi _08057AF4
	adds r0, r3, #0
	subs r0, #0x88
	cmp r1, r0
	bhs _08057AFC
	ldr r1, _08057AF0 @ =0x0000FF78
	adds r0, r3, r1
	lsls r0, r0, #0x10
	b _08057AFA
	.align 2, 0
_08057AD8: .4byte 0x0201E3D8
_08057ADC: .4byte 0x0201E158
_08057AE0: .4byte 0x0201E298
_08057AE4: .4byte 0x0201E3E4
_08057AE8: .4byte 0x0201E524
_08057AEC: .4byte 0x085D37B4
_08057AF0: .4byte 0x0000FF78
_08057AF4:
	cmp r1, r7
	bls _08057AFC
	mov r0, ip
_08057AFA:
	lsrs r2, r0, #0x10
_08057AFC:
	strh r2, [r5]
	adds r5, #2
	strh r2, [r4]
	b _08057B0C
_08057B04:
	mov r1, r8
	strh r1, [r5]
	adds r5, #2
	strh r1, [r4]
_08057B0C:
	adds r4, #2
	ldr r2, _08057B28 @ =0xFFFF0000
	add ip, r2
	subs r7, #1
	adds r6, #2
	adds r3, #1
	cmp r3, #0x9f
	bls _08057AAA
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08057B28: .4byte 0xFFFF0000

	thumb_func_start sub_8057B2C
sub_8057B2C: @ 0x08057B2C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08057B48 @ =0x085D379C
	movs r1, #3
	bl SpawnProc
	movs r1, #0
	strh r1, [r0, #0x2c]
	movs r1, #0x28
	strh r1, [r0, #0x2e]
	str r4, [r0, #0x5c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08057B48: .4byte 0x085D379C

	thumb_func_start sub_8057B4C
sub_8057B4C: @ 0x08057B4C
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r5, [r4, #0x5c]
	movs r2, #0x80
	lsls r2, r2, #0xb
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	str r0, [r5, #0x44]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _08057B88
	adds r0, r5, #0
	bl Proc_End
	adds r0, r4, #0
	bl Proc_Break
_08057B88:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8057B90
sub_8057B90: @ 0x08057B90
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80474C8
	ldr r0, _08057BAC @ =0x085D38A4
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08057BAC: .4byte 0x085D38A4

	thumb_func_start sub_8057BB0
sub_8057BB0: @ 0x08057BB0
	push {r4, r5, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x11
	bne _08057BE6
	ldr r0, [r5, #0x5c]
	movs r1, #0x49
	bl sub_8057BF8
	movs r4, #0xa0
	lsls r4, r4, #1
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r4, #0
	bl sub_805BCA8
	ldr r0, [r5, #0x5c]
	movs r2, #2
	ldrsh r1, [r0, r2]
	adds r0, r4, #0
	movs r2, #1
	bl sub_805BDC0
_08057BE6:
	ldrh r0, [r5, #0x2c]
	cmp r0, #0x64
	bne _08057BF2
	adds r0, r5, #0
	bl Proc_Break
_08057BF2:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8057BF8
sub_8057BF8: @ 0x08057BF8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r1, _08057C78 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08057C7C @ =0x085D38BC
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	strh r5, [r0, #0x30]
	str r1, [r0, #0x44]
	ldr r1, _08057C80 @ =0x0811AF00
	str r1, [r0, #0x48]
	ldr r1, _08057C84 @ =0x085D38D4
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r0, _08057C88 @ =0x0812BE10
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, _08057C8C @ =0x0812B19C
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	bl sub_8047500
	ldr r3, _08057C90 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x14]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x14]
	ldrb r0, [r3, #0x10]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x10]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	bl SetBgOffset
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08057C78: .4byte 0x02017744
_08057C7C: .4byte 0x085D38BC
_08057C80: .4byte 0x0811AF00
_08057C84: .4byte 0x085D38D4
_08057C88: .4byte 0x0812BE10
_08057C8C: .4byte 0x0812B19C
_08057C90: .4byte gDispIo

	thumb_func_start sub_8057C94
sub_8057C94: @ 0x08057C94
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _08057CC0
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl sub_804799C
_08057CC0:
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x30]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _08057D12
	ldr r3, _08057D18 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x18]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x18]
	movs r0, #3
	ldrb r1, [r3, #0x14]
	orrs r0, r1
	strb r0, [r3, #0x14]
	bl sub_80474D8
	ldr r1, _08057D1C @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_Break
_08057D12:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08057D18: .4byte gDispIo
_08057D1C: .4byte 0x02017744

	thumb_func_start sub_8057D20
sub_8057D20: @ 0x08057D20
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r7, r0, #0
	bl sub_804B6C4
	ldr r1, _08057D4C @ =0x0203CD76
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	subs r0, #0xc
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x29
	bhi _08057E1C
	lsls r0, r0, #2
	ldr r1, _08057D50 @ =_08057D54
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08057D4C: .4byte 0x0203CD76
_08057D50: .4byte _08057D54
_08057D54: @ jump table
	.4byte _08057DFC @ case 0
	.4byte _08057DFC @ case 1
	.4byte _08057E1C @ case 2
	.4byte _08057E1C @ case 3
	.4byte _08057E1C @ case 4
	.4byte _08057E0C @ case 5
	.4byte _08057E1C @ case 6
	.4byte _08057E1C @ case 7
	.4byte _08057E1C @ case 8
	.4byte _08057E1C @ case 9
	.4byte _08057E1C @ case 10
	.4byte _08057E1C @ case 11
	.4byte _08057E1C @ case 12
	.4byte _08057E1C @ case 13
	.4byte _08057E1C @ case 14
	.4byte _08057E1C @ case 15
	.4byte _08057E1C @ case 16
	.4byte _08057E1C @ case 17
	.4byte _08057E1C @ case 18
	.4byte _08057E1C @ case 19
	.4byte _08057E1C @ case 20
	.4byte _08057E1C @ case 21
	.4byte _08057E1C @ case 22
	.4byte _08057E1C @ case 23
	.4byte _08057E1C @ case 24
	.4byte _08057E1C @ case 25
	.4byte _08057E1C @ case 26
	.4byte _08057E1C @ case 27
	.4byte _08057E1C @ case 28
	.4byte _08057E1C @ case 29
	.4byte _08057E1C @ case 30
	.4byte _08057E1C @ case 31
	.4byte _08057E1C @ case 32
	.4byte _08057E1C @ case 33
	.4byte _08057E1C @ case 34
	.4byte _08057E1C @ case 35
	.4byte _08057E1C @ case 36
	.4byte _08057E1C @ case 37
	.4byte _08057E1C @ case 38
	.4byte _08057E1C @ case 39
	.4byte _08057E1C @ case 40
	.4byte _08057E0C @ case 41
_08057DFC:
	ldr r6, _08057E04 @ =0x085E0748
	ldr r4, _08057E08 @ =0x085E08DC
	b _08057E20
	.align 2, 0
_08057E04: .4byte 0x085E0748
_08057E08: .4byte 0x085E08DC
_08057E0C:
	ldr r6, _08057E14 @ =0x085E0A88
	ldr r4, _08057E18 @ =0x085E0C34
	b _08057E20
	.align 2, 0
_08057E14: .4byte 0x085E0A88
_08057E18: .4byte 0x085E0C34
_08057E1C:
	ldr r6, _08057E68 @ =0x085E0DE0
	ldr r4, _08057E6C @ =0x085E0F88
_08057E20:
	ldr r0, _08057E70 @ =0x085D38E4
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r7, [r5, #0x5c]
	movs r0, #0
	mov r8, r0
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r6, [sp]
	adds r0, r7, #0
	adds r1, r4, #0
	adds r2, r6, #0
	adds r3, r4, #0
	bl sub_80478DC
	adds r4, r0, #0
	str r4, [r5, #0x60]
	movs r0, #0xc0
	lsls r0, r0, #4
	ldrh r1, [r4, #8]
	ands r0, r1
	strh r0, [r4, #8]
	movs r0, #0x64
	strh r0, [r4, #0xa]
	bl BasSort
	adds r0, r7, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _08057E74
	movs r1, #0xe4
	lsls r1, r1, #7
	b _08057E78
	.align 2, 0
_08057E68: .4byte 0x085E0DE0
_08057E6C: .4byte 0x085E0F88
_08057E70: .4byte 0x085D38E4
_08057E74:
	movs r1, #0x93
	lsls r1, r1, #8
_08057E78:
	adds r0, r1, #0
	ldrh r1, [r4, #8]
	orrs r0, r1
	strh r0, [r4, #8]
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	bl sub_804B8B0
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8057E98
sub_8057E98: @ 0x08057E98
	push {lr}
	adds r2, r0, #0
	ldr r1, [r2, #0x60]
	ldr r0, [r2, #0x5c]
	ldrh r0, [r0, #2]
	strh r0, [r1, #2]
	ldr r0, [r2, #0x5c]
	ldrh r1, [r0, #0x10]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _08057EBE
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _08057EBE
	adds r0, r2, #0
	bl Proc_Break
_08057EBE:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8057EC4
sub_8057EC4: @ 0x08057EC4
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x60]
	ldr r0, [r4, #0x5c]
	ldrh r0, [r0, #2]
	strh r0, [r1, #2]
	bl sub_80449C4
	cmp r0, #1
	bne _08057EEE
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	bl sub_804B8E8
	ldr r0, [r4, #0x60]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
_08057EEE:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8057EF4
sub_8057EF4: @ 0x08057EF4
	ldr r0, _08057F00 @ =0x0203CDD8
	movs r1, #0
	str r1, [r0]
	ldr r0, _08057F04 @ =0x0203CDDC
	str r1, [r0]
	bx lr
	.align 2, 0
_08057F00: .4byte 0x0203CDD8
_08057F04: .4byte 0x0203CDDC

	thumb_func_start sub_8057F08
sub_8057F08: @ 0x08057F08
	push {r4, lr}
	ldr r4, _08057F20 @ =0x0203CDD8
	ldr r0, [r4]
	cmp r0, #0
	beq _08057F1A
	bl Proc_End
	movs r0, #0
	str r0, [r4]
_08057F1A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08057F20: .4byte 0x0203CDD8

	thumb_func_start sub_8057F24
sub_8057F24: @ 0x08057F24
	push {r4, lr}
	ldr r4, _08057F3C @ =0x0203CDDC
	ldr r0, [r4]
	cmp r0, #0
	beq _08057F36
	bl Proc_End
	movs r0, #0
	str r0, [r4]
_08057F36:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08057F3C: .4byte 0x0203CDDC

	thumb_func_start sub_8057F40
sub_8057F40: @ 0x08057F40
	ldr r1, _08057F48 @ =0x0203CDD8
	str r0, [r1]
	bx lr
	.align 2, 0
_08057F48: .4byte 0x0203CDD8

	thumb_func_start sub_8057F4C
sub_8057F4C: @ 0x08057F4C
	ldr r1, _08057F54 @ =0x0203CDDC
	str r0, [r1]
	bx lr
	.align 2, 0
_08057F54: .4byte 0x0203CDDC

	thumb_func_start sub_8057F58
sub_8057F58: @ 0x08057F58
	ldr r0, [r0, #0x44]
	ldr r0, [r0, #0x2c]
	bx lr
	.align 2, 0

	thumb_func_start sub_8057F60
sub_8057F60: @ 0x08057F60
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _08057F7C
	ldr r0, _08057F78 @ =0x081122C5
	ldrh r1, [r4, #2]
	ldrb r0, [r0]
	subs r0, r1, r0
	b _08057F84
	.align 2, 0
_08057F78: .4byte 0x081122C5
_08057F7C:
	ldr r0, _08057FB4 @ =0x081122CA
	ldrb r0, [r0]
	ldrh r3, [r4, #2]
	subs r0, r0, r3
_08057F84:
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	movs r2, #0x58
	ldrh r4, [r4, #4]
	subs r2, r2, r4
	ldrh r0, [r5, #0x12]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	ldrh r3, [r5, #2]
	subs r1, r1, r3
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	ldrh r5, [r5, #4]
	subs r2, r2, r5
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	bl SetBgOffset
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08057FB4: .4byte 0x081122CA

	thumb_func_start sub_8057FB8
sub_8057FB8: @ 0x08057FB8
	push {r4, lr}
	sub sp, #4
	bl sub_8057F58
	adds r4, r0, #0
	movs r0, #0
	str r0, [sp]
	ldr r1, [r4, #0x14]
	ldr r2, _08057FE4 @ =0x01000200
	mov r0, sp
	bl CpuFastSet
	movs r0, #1
	ldrh r4, [r4, #0x12]
	lsls r0, r4
	bl EnableBgSync
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08057FE4: .4byte 0x01000200

	thumb_func_start sub_8057FE8
sub_8057FE8: @ 0x08057FE8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r7, r2, #0
	adds r6, r3, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	bl sub_8057F58
	mov r8, r0
	cmp r4, #0
	bne _08058008
	adds r0, r7, #0
	b _0805800A
_08058008:
	adds r0, r6, #0
_0805800A:
	movs r1, #0x78
	bl BasCreate
	adds r2, r0, #0
	mov r1, r8
	ldrh r1, [r1, #0x10]
	lsls r0, r1, #0xc
	mov r3, r8
	ldrh r3, [r3, #0xe]
	orrs r0, r3
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2, #8]
	ldrh r0, [r5, #2]
	strh r0, [r2, #2]
	ldrh r0, [r5, #4]
	strh r0, [r2, #4]
	adds r0, r2, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_805803C
sub_805803C: @ 0x0805803C
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r6, r2, #0
	lsls r1, r1, #0x10
	lsrs r7, r1, #0x10
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	adds r5, r3, #0
	bl sub_8057F58
	adds r4, r0, #0
	cmp r5, #1
	bne _0805805E
	ldr r1, [r4, #0x1c]
	adds r0, r6, #0
	bl LZ77UnCompWram
_0805805E:
	adds r2, r6, #0
	cmp r5, #1
	bne _08058066
	ldr r2, [r4, #0x1c]
_08058066:
	cmp r7, #0
	bne _08058080
	ldr r1, [r4, #0x14]
	ldrh r0, [r4, #0xc]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #0x1e
	movs r3, #0x14
	bl sub_805B1DC
	b _08058094
_08058080:
	ldr r1, [r4, #0x14]
	ldrh r0, [r4, #0xc]
	str r0, [sp]
	ldrh r0, [r4, #0xa]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #0x1e
	movs r3, #0x14
	bl sub_805B1AC
_08058094:
	movs r0, #1
	ldrh r4, [r4, #0x12]
	lsls r0, r4
	bl EnableBgSync
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80580A8
sub_80580A8: @ 0x080580A8
	push {r4, r5, r6, lr}
	adds r6, r1, #0
	bl sub_8057F58
	adds r4, r0, #0
	ldrh r0, [r4, #0xa]
	lsls r5, r0, #5
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r5, r5, r0
	ldr r1, [r4, #0x18]
	adds r0, r6, #0
	bl LZ77UnCompWram
	ldr r0, [r4, #0x18]
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r5, #0
	bl RegisterDataMove
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80580D8
sub_80580D8: @ 0x080580D8
	push {r4, lr}
	adds r4, r1, #0
	bl sub_8057F58
	ldrh r0, [r0, #0xc]
	lsls r1, r0, #5
	ldr r0, _080580FC @ =gPal
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080580FC: .4byte gPal

	thumb_func_start sub_8058100
sub_8058100: @ 0x08058100
	push {r4, r5, r6, lr}
	adds r6, r1, #0
	bl sub_8057F58
	adds r4, r0, #0
	ldrh r0, [r4, #0xe]
	lsls r5, r0, #5
	ldr r0, _0805812C @ =0x06010000
	adds r5, r5, r0
	ldr r1, [r4, #0x20]
	adds r0, r6, #0
	bl LZ77UnCompWram
	ldr r0, [r4, #0x20]
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r5, #0
	bl RegisterDataMove
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805812C: .4byte 0x06010000

	thumb_func_start sub_8058130
sub_8058130: @ 0x08058130
	push {r4, lr}
	adds r4, r1, #0
	bl sub_8057F58
	ldrh r0, [r0, #0x10]
	lsls r1, r0, #5
	ldr r0, _08058154 @ =0x02021908
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08058154: .4byte 0x02021908

	thumb_func_start sub_8058158
sub_8058158: @ 0x08058158
	push {r4, lr}
	adds r4, r0, #0
	bl sub_8057F58
	ldr r1, _08058178 @ =0x085D3904
	ldrh r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r4, #0
	bl _call_via_r1
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08058178: .4byte 0x085D3904

	thumb_func_start nullsub_23
nullsub_23: @ 0x0805817C
	bx lr
	.align 2, 0

	thumb_func_start sub_8058180
sub_8058180: @ 0x08058180
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _0805819C @ =0x085D3924
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	bl sub_8057F40
	str r4, [r5, #0x5c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805819C: .4byte 0x085D3924

	thumb_func_start sub_80581A0
sub_80581A0: @ 0x080581A0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	adds r1, r4, #0
	bl sub_80581C0
	ldr r0, [r4, #0x5c]
	adds r1, r4, #0
	bl sub_805826C
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_80581C0
sub_80581C0: @ 0x080581C0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	bl sub_8057F58
	adds r6, r0, #0
	ldr r0, _0805820C @ =0x085D394C
	adds r1, r4, #0
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	str r0, [r4, #0x44]
	ldr r0, _08058210 @ =0x0811AF20
	str r0, [r4, #0x48]
	ldr r0, _08058214 @ =0x085D3964
	str r0, [r4, #0x4c]
	ldr r1, _08058218 @ =0x0812E4A4
	adds r0, r5, #0
	bl sub_80580D8
	ldr r0, [r4, #0x5c]
	ldr r1, _0805821C @ =0x0812D8AC
	bl sub_80580A8
	ldr r0, [r6, #0x24]
	bl _call_via_r0
	ldr r0, [r4, #0x5c]
	adds r1, r6, #0
	bl sub_8057F60
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805820C: .4byte 0x085D394C
_08058210: .4byte 0x0811AF20
_08058214: .4byte 0x085D3964
_08058218: .4byte 0x0812E4A4
_0805821C: .4byte 0x0812D8AC

	thumb_func_start sub_8058220
sub_8058220: @ 0x08058220
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0805824C
	ldr r2, [r4, #0x4c]
	ldr r0, [r4, #0x5c]
	lsls r1, r1, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #1
	movs r3, #1
	bl sub_805803C
	b _08058264
_0805824C:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08058264
	ldr r0, [r4, #0x5c]
	bl sub_8057FB8
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_Break
_08058264:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805826C
sub_805826C: @ 0x0805826C
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	bl sub_8057F58
	adds r7, r0, #0
	ldr r0, _080582A8 @ =0x085D3994
	adds r1, r4, #0
	bl SpawnProc
	adds r6, r0, #0
	str r5, [r6, #0x5c]
	movs r0, #0
	strh r0, [r6, #0x2c]
	ldr r2, _080582AC @ =0x085E2CA8
	ldr r3, _080582B0 @ =0x085E2920
	adds r0, r5, #0
	movs r1, #1
	bl sub_8057FE8
	adds r4, r0, #0
	str r4, [r6, #0x60]
	adds r0, r5, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _080582B4
	ldrh r0, [r5, #2]
	subs r0, #8
	b _080582B8
	.align 2, 0
_080582A8: .4byte 0x085D3994
_080582AC: .4byte 0x085E2CA8
_080582B0: .4byte 0x085E2920
_080582B4:
	ldrh r0, [r5, #2]
	adds r0, #8
_080582B8:
	strh r0, [r4, #2]
	ldrh r0, [r5, #4]
	adds r0, #8
	strh r0, [r4, #4]
	ldrh r2, [r4, #2]
	ldrh r3, [r7, #6]
	adds r1, r2, r3
	strh r1, [r4, #2]
	ldrh r7, [r7, #8]
	adds r0, r7, r0
	strh r0, [r4, #4]
	ldr r0, [r6, #0x5c]
	ldr r1, _080582E4 @ =0x0812FFD8
	bl sub_8058130
	ldr r0, [r6, #0x5c]
	ldr r1, _080582E8 @ =0x0812F9DC
	bl sub_8058100
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080582E4: .4byte 0x0812FFD8
_080582E8: .4byte 0x0812F9DC

	thumb_func_start sub_80582EC
sub_80582EC: @ 0x080582EC
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x32
	ble _0805830A
	ldr r0, [r4, #0x60]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
_0805830A:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8058310
sub_8058310: @ 0x08058310
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _0805832C @ =0x085D39AC
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	bl sub_8057F40
	str r4, [r5, #0x5c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805832C: .4byte 0x085D39AC

	thumb_func_start sub_8058330
sub_8058330: @ 0x08058330
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	adds r1, r4, #0
	bl sub_8058358
	ldr r0, [r4, #0x5c]
	adds r1, r4, #0
	bl sub_8058438
	ldr r0, [r4, #0x5c]
	adds r1, r4, #0
	bl sub_80584AC
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8058358
sub_8058358: @ 0x08058358
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl sub_8057F58
	adds r6, r0, #0
	ldr r0, _080583A0 @ =0x085D39D4
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	str r0, [r4, #0x44]
	ldr r0, _080583A4 @ =0x0811AF52
	str r0, [r4, #0x48]
	ldr r0, _080583A8 @ =0x085D39EC
	str r0, [r4, #0x4c]
	ldr r1, _080583AC @ =0x0812CF48
	adds r0, r5, #0
	bl sub_80580D8
	ldr r0, [r4, #0x5c]
	ldr r1, _080583B0 @ =0x0812C68C
	bl sub_80580A8
	ldr r0, [r6, #0x24]
	bl _call_via_r0
	ldr r0, [r4, #0x5c]
	adds r1, r6, #0
	bl sub_8057F60
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080583A0: .4byte 0x085D39D4
_080583A4: .4byte 0x0811AF52
_080583A8: .4byte 0x085D39EC
_080583AC: .4byte 0x0812CF48
_080583B0: .4byte 0x0812C68C

	thumb_func_start sub_80583B4
sub_80583B4: @ 0x080583B4
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r7, #0
	ldr r0, [r4, #0x5c]
	bl sub_8057F58
	adds r6, r0, #0
	adds r0, r4, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r5, r0, #0x10
	cmp r5, #0
	blt _08058416
	ldr r2, [r4, #0x4c]
	ldr r0, [r4, #0x5c]
	lsls r1, r5, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0
	movs r3, #1
	bl sub_805803C
	cmp r5, #0
	bne _080583F8
	ldrh r0, [r6, #0xa]
	adds r0, #0x1f
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
_080583F8:
	cmp r5, #1
	bne _08058404
	ldrh r0, [r6, #0xa]
	adds r0, #0x50
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
_08058404:
	ldr r0, [r6, #0x14]
	adds r0, #0x3c
	ldrh r3, [r6, #0xc]
	str r7, [sp]
	movs r1, #2
	movs r2, #0x14
	bl sub_805B094
	b _0805842E
_08058416:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r5, r0
	bne _0805842E
	ldr r0, [r4, #0x5c]
	bl sub_8057FB8
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_Break
_0805842E:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8058438
sub_8058438: @ 0x08058438
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _08058460 @ =0x085D39F4
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	bl sub_8057F4C
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	str r0, [r4, #0x44]
	ldr r0, _08058464 @ =0x0811AF5C
	str r0, [r4, #0x48]
	ldr r0, _08058468 @ =0x0812CF48
	str r0, [r4, #0x4c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08058460: .4byte 0x085D39F4
_08058464: .4byte 0x0811AF5C
_08058468: .4byte 0x0812CF48

	thumb_func_start sub_805846C
sub_805846C: @ 0x0805846C
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _08058492
	ldr r1, [r4, #0x4c]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #5
	adds r1, r1, r2
	bl sub_80580D8
	b _080584A4
_08058492:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _080584A4
	bl sub_8057F24
	adds r0, r4, #0
	bl Proc_Break
_080584A4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80584AC
sub_80584AC: @ 0x080584AC
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	bl sub_8057F58
	adds r7, r0, #0
	ldr r0, _080584E8 @ =0x085D3A14
	movs r1, #3
	bl SpawnProc
	adds r6, r0, #0
	str r5, [r6, #0x5c]
	movs r0, #0
	strh r0, [r6, #0x2c]
	ldr r2, _080584EC @ =0x085E2508
	ldr r3, _080584F0 @ =0x085E19DC
	adds r0, r5, #0
	movs r1, #1
	bl sub_8057FE8
	adds r4, r0, #0
	str r4, [r6, #0x60]
	adds r0, r5, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _080584F4
	ldrh r0, [r5, #2]
	adds r0, #0x38
	b _080584F8
	.align 2, 0
_080584E8: .4byte 0x085D3A14
_080584EC: .4byte 0x085E2508
_080584F0: .4byte 0x085E19DC
_080584F4:
	ldrh r0, [r5, #2]
	subs r0, #0x38
_080584F8:
	strh r0, [r4, #2]
	ldrh r1, [r4, #2]
	ldrh r2, [r7, #6]
	adds r0, r1, r2
	strh r0, [r4, #2]
	ldrh r1, [r4, #4]
	ldrh r7, [r7, #8]
	adds r0, r1, r7
	strh r0, [r4, #4]
	ldr r0, [r6, #0x5c]
	ldr r1, _08058520 @ =0x0812D80C
	bl sub_8058130
	ldr r0, [r6, #0x5c]
	ldr r1, _08058524 @ =0x0812D374
	bl sub_8058100
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08058520: .4byte 0x0812D80C
_08058524: .4byte 0x0812D374

	thumb_func_start sub_8058528
sub_8058528: @ 0x08058528
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x32
	ble _08058546
	ldr r0, [r4, #0x60]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
_08058546:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_805854C
sub_805854C: @ 0x0805854C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08058564 @ =0x085D3A2C
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08058564: .4byte 0x085D3A2C

	thumb_func_start sub_8058568
sub_8058568: @ 0x08058568
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	adds r1, r4, #0
	bl sub_80587C0
	ldr r0, [r4, #0x5c]
	adds r1, r4, #0
	bl sub_80585DC
	ldr r0, [r4, #0x5c]
	adds r1, r4, #0
	bl sub_805867C
	ldr r3, _080585D8 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r2, #9
	movs r0, #0x10
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x46
	strb r1, [r0]
	ldr r0, [r4, #0x5c]
	str r4, [sp]
	movs r1, #1
	movs r2, #0xc
	movs r3, #0
	bl sub_80586F0
	ldr r0, [r4, #0x5c]
	str r4, [sp]
	movs r1, #0x23
	movs r2, #0x19
	movs r3, #1
	bl sub_80586F0
	adds r0, r4, #0
	bl Proc_Break
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080585D8: .4byte gDispIo

	thumb_func_start sub_80585DC
sub_80585DC: @ 0x080585DC
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl sub_8057F58
	adds r6, r0, #0
	ldr r0, _08058620 @ =0x085D3A54
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	bl sub_8057F40
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	str r0, [r4, #0x44]
	ldr r0, _08058624 @ =0x0811AF9E
	str r0, [r4, #0x48]
	ldr r0, _08058628 @ =0x085D3A6C
	str r0, [r4, #0x4c]
	ldr r1, _0805862C @ =0x081AB1B0
	adds r0, r5, #0
	bl sub_80580A8
	ldr r0, [r6, #0x24]
	bl _call_via_r0
	ldr r0, [r4, #0x5c]
	adds r1, r6, #0
	bl sub_8057F60
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08058620: .4byte 0x085D3A54
_08058624: .4byte 0x0811AF9E
_08058628: .4byte 0x085D3A6C
_0805862C: .4byte 0x081AB1B0

	thumb_func_start sub_8058630
sub_8058630: @ 0x08058630
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0805865C
	ldr r2, [r4, #0x4c]
	ldr r0, [r4, #0x5c]
	lsls r1, r1, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #1
	movs r3, #0
	bl sub_805803C
	b _08058674
_0805865C:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _08058674
	ldr r0, [r4, #0x5c]
	bl sub_8057FB8
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_Break
_08058674:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805867C
sub_805867C: @ 0x0805867C
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _080586A4 @ =0x085D3A70
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	bl sub_8057F4C
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	str r0, [r4, #0x44]
	ldr r0, _080586A8 @ =0x0811AFA4
	str r0, [r4, #0x48]
	ldr r0, _080586AC @ =0x081ABCA0
	str r0, [r4, #0x4c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080586A4: .4byte 0x085D3A70
_080586A8: .4byte 0x0811AFA4
_080586AC: .4byte 0x081ABCA0

	thumb_func_start sub_80586B0
sub_80586B0: @ 0x080586B0
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _080586D6
	ldr r1, [r4, #0x4c]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #5
	adds r1, r1, r2
	bl sub_80580D8
	b _080586E8
_080586D6:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _080586E8
	bl sub_8057F24
	adds r0, r4, #0
	bl Proc_Break
_080586E8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80586F0
sub_80586F0: @ 0x080586F0
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r0, _0805871C @ =0x085D3A90
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	strh r5, [r0, #0x2c]
	strh r6, [r0, #0x2e]
	adds r0, #0x29
	mov r1, r8
	strb r1, [r0]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805871C: .4byte 0x085D3A90

	thumb_func_start sub_8058720
sub_8058720: @ 0x08058720
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	subs r0, #1
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08058736
	adds r0, r1, #0
	bl Proc_Break
_08058736:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805873C
sub_805873C: @ 0x0805873C
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0x2c
	ldrsh r1, [r4, r0]
	movs r2, #0x2e
	ldrsh r0, [r4, r2]
	cmp r1, r0
	ble _08058756
	adds r0, r4, #0
	bl Proc_Break
	b _080587B4
_08058756:
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _08058772
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	b _08058782
_08058772:
	movs r2, #0x2c
	ldrsh r3, [r4, r2]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
_08058782:
	bl Interpolate
	adds r5, r0, #0
	ldr r3, _080587BC @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r5, [r0]
	adds r2, #9
	movs r0, #0x10
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x46
	strb r1, [r0]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
_080587B4:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080587BC: .4byte gDispIo

	thumb_func_start sub_80587C0
sub_80587C0: @ 0x080587C0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl sub_8057F58
	adds r6, r0, #0
	ldr r0, _08058814 @ =0x085D3AB0
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x33
	strh r0, [r4, #0x2e]
	ldr r3, _08058818 @ =0x085F0A14
	adds r0, r5, #0
	movs r1, #1
	adds r2, r3, #0
	bl sub_8057FE8
	str r0, [r4, #0x60]
	ldrh r2, [r0, #2]
	ldrh r3, [r6, #6]
	adds r1, r2, r3
	strh r1, [r0, #2]
	ldrh r2, [r0, #4]
	ldrh r6, [r6, #8]
	adds r1, r2, r6
	strh r1, [r0, #4]
	ldr r0, [r4, #0x5c]
	ldr r1, _0805881C @ =0x081AC0F4
	bl sub_8058130
	ldr r0, [r4, #0x5c]
	ldr r1, _08058820 @ =0x081ABEA0
	bl sub_8058100
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08058814: .4byte 0x085D3AB0
_08058818: .4byte 0x085F0A14
_0805881C: .4byte 0x081AC0F4
_08058820: .4byte 0x081ABEA0

	thumb_func_start sub_8058824
sub_8058824: @ 0x08058824
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _08058844
	ldr r0, [r4, #0x60]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
_08058844:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805884C
sub_805884C: @ 0x0805884C
	ldr r1, _0805886C @ =0x0201E7AC
	movs r0, #0
	str r0, [r1]
	str r0, [r1, #4]
	ldr r1, _08058870 @ =0x0201E7BC
	str r0, [r1]
	ldr r1, _08058874 @ =0x0201E7C0
	strh r0, [r1]
	strh r0, [r1, #2]
	ldr r1, _08058878 @ =0x0201E7C4
	strh r0, [r1]
	strh r0, [r1, #2]
	ldr r1, _0805887C @ =0x0201E7C8
	strh r0, [r1]
	strh r0, [r1, #2]
	bx lr
	.align 2, 0
_0805886C: .4byte 0x0201E7AC
_08058870: .4byte 0x0201E7BC
_08058874: .4byte 0x0201E7C0
_08058878: .4byte 0x0201E7C4
_0805887C: .4byte 0x0201E7C8

	thumb_func_start sub_8058880
sub_8058880: @ 0x08058880
	push {r4, lr}
	ldr r4, _08058898 @ =0x0201E7C0
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	ldrh r0, [r0]
	cmp r0, #1
	beq _0805889C
	movs r0, #0
	b _0805889E
	.align 2, 0
_08058898: .4byte 0x0201E7C0
_0805889C:
	movs r0, #1
_0805889E:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_80588A4
sub_80588A4: @ 0x080588A4
	push {lr}
	bl sub_804B6C4
	ldr r1, _080588B8 @ =0x0201E7C8
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r1, #2
	strh r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_080588B8: .4byte 0x0201E7C8

	thumb_func_start sub_80588BC
sub_80588BC: @ 0x080588BC
	push {r4, lr}
	ldr r4, _080588D4 @ =0x0201E7C0
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	ldrh r0, [r0]
	cmp r0, #2
	beq _080588D8
	movs r0, #0
	b _080588DA
	.align 2, 0
_080588D4: .4byte 0x0201E7C0
_080588D8:
	movs r0, #1
_080588DA:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_80588E0
sub_80588E0: @ 0x080588E0
	push {r4, lr}
	movs r4, #0
	movs r0, #0
	bl sub_80589FC
	ldrh r0, [r0]
	cmp r0, #0x53
	bne _080588F2
	movs r4, #1
_080588F2:
	movs r0, #1
	bl sub_80589FC
	ldrh r0, [r0]
	cmp r0, #0x53
	bne _08058902
	movs r0, #2
	orrs r4, r0
_08058902:
	movs r0, #0
	bl sub_80589FC
	ldrh r0, [r0]
	cmp r0, #0x54
	bne _08058912
	movs r0, #4
	orrs r4, r0
_08058912:
	movs r0, #1
	bl sub_80589FC
	ldrh r0, [r0]
	cmp r0, #0x54
	bne _08058922
	movs r0, #8
	orrs r4, r0
_08058922:
	movs r0, #0
	bl sub_80589FC
	ldrh r0, [r0]
	cmp r0, #0x70
	bne _08058932
	movs r0, #0x10
	orrs r4, r0
_08058932:
	movs r0, #1
	bl sub_80589FC
	ldrh r0, [r0]
	cmp r0, #0x70
	bne _08058942
	movs r0, #0x20
	orrs r4, r0
_08058942:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_805894C
sub_805894C: @ 0x0805894C
	push {r4, lr}
	movs r4, #0
	movs r0, #0
	bl sub_80589FC
	ldrh r0, [r0]
	cmp r0, #0x53
	bne _0805895E
	movs r4, #1
_0805895E:
	movs r0, #1
	bl sub_80589FC
	ldrh r0, [r0]
	cmp r0, #0x53
	bne _0805896E
	movs r0, #2
	orrs r4, r0
_0805896E:
	movs r0, #0
	bl sub_80589FC
	ldrh r0, [r0]
	cmp r0, #0x70
	bne _0805897E
	movs r0, #0x10
	orrs r4, r0
_0805897E:
	movs r0, #1
	bl sub_80589FC
	ldrh r0, [r0]
	cmp r0, #0x70
	bne _0805898E
	movs r0, #0x20
	orrs r4, r0
_0805898E:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8058998
sub_8058998: @ 0x08058998
	push {r4, lr}
	movs r4, #0
	movs r0, #0
	bl sub_80589FC
	ldrh r0, [r0]
	cmp r0, #0x70
	bne _080589AA
	movs r4, #0x10
_080589AA:
	movs r0, #1
	bl sub_80589FC
	ldrh r0, [r0]
	cmp r0, #0x70
	bne _080589BA
	movs r0, #0x20
	orrs r4, r0
_080589BA:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80589C4
sub_80589C4: @ 0x080589C4
	push {r4, lr}
	adds r4, r0, #0
	bl sub_8058A08
	ldrh r0, [r0]
	cmp r0, #1
	beq _080589F4
	ldr r0, _080589EC @ =0x0203CD14
	ldrh r0, [r0]
	cmp r0, #2
	bne _080589E8
	adds r0, r4, #0
	bl sub_804B6C4
	ldr r1, _080589F0 @ =0x0201773C
	ldr r1, [r1]
	cmp r0, r1
	bne _080589F4
_080589E8:
	movs r0, #0
	b _080589F6
	.align 2, 0
_080589EC: .4byte 0x0203CD14
_080589F0: .4byte 0x0201773C
_080589F4:
	movs r0, #1
_080589F6:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_80589FC
sub_80589FC: @ 0x080589FC
	lsls r0, r0, #1
	ldr r1, _08058A04 @ =0x0203CDE0
	adds r0, r0, r1
	bx lr
	.align 2, 0
_08058A04: .4byte 0x0203CDE0

	thumb_func_start sub_8058A08
sub_8058A08: @ 0x08058A08
	push {lr}
	bl sub_804B6C4
	lsls r0, r0, #1
	ldr r1, _08058A18 @ =0x0201E7C4
	adds r0, r0, r1
	pop {r1}
	bx r1
	.align 2, 0
_08058A18: .4byte 0x0201E7C4

	thumb_func_start sub_8058A1C
sub_8058A1C: @ 0x08058A1C
	push {r4, lr}
	ldr r4, _08058A30 @ =0x0201E7AC
	bl sub_804B6C4
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r0, [r0]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08058A30: .4byte 0x0201E7AC

	thumb_func_start sub_8058A34
sub_8058A34: @ 0x08058A34
	push {r4, lr}
	ldr r4, _08058A4C @ =0x0201E7B4
	bl sub_804B6C4
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r0, [r0]
	bl Proc_End
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08058A4C: .4byte 0x0201E7B4

	thumb_func_start sub_8058A50
sub_8058A50: @ 0x08058A50
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	ldr r1, _08058A78 @ =0x02000000
	ldr r3, [r1]
	ldr r4, [r1, #8]
	ldr r1, _08058A7C @ =0x0000F3FF
	adds r2, r1, #0
	ldrh r5, [r3, #8]
	ands r2, r5
	lsrs r0, r0, #0xe
	orrs r2, r0
	strh r2, [r3, #8]
	ldrh r2, [r4, #8]
	ands r1, r2
	orrs r1, r0
	strh r1, [r4, #8]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08058A78: .4byte 0x02000000
_08058A7C: .4byte 0x0000F3FF

	thumb_func_start sub_8058A80
sub_8058A80: @ 0x08058A80
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r6, _08058AAC @ =0x081BF434
	ldr r5, _08058AB0 @ =0x02021728
	adds r0, r6, #0
	adds r1, r5, #0
	movs r2, #8
	bl CpuFastSet
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08058AB4
	adds r1, r5, #0
	adds r1, #0xa0
	adds r0, r6, #0
	movs r2, #8
	bl CpuFastSet
	b _08058AC0
	.align 2, 0
_08058AAC: .4byte 0x081BF434
_08058AB0: .4byte 0x02021728
_08058AB4:
	adds r1, r5, #0
	adds r1, #0xc0
	adds r0, r6, #0
	movs r2, #8
	bl CpuFastSet
_08058AC0:
	bl EnablePalSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8058ACC
sub_8058ACC: @ 0x08058ACC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	adds r4, r0, #0
	ldr r0, _08058B64 @ =0x081BC268
	ldr r1, _08058B68 @ =0x0201777C
	mov r8, r1
	bl LZ77UnCompWram
	ldr r0, _08058B6C @ =0x081BF5B4
	ldr r7, _08058B70 @ =0x0201977C
	adds r1, r7, #0
	bl LZ77UnCompWram
	movs r0, #0
	bl sub_8047C68
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	adds r1, r0, #0
	cmp r1, #0
	bne _08058B50
	ldr r0, _08058B74 @ =0x0203CD14
	movs r2, #0
	ldrsh r0, [r0, r2]
	movs r2, #0x1d
	cmp r0, #0
	bne _08058B0A
	movs r2, #0x23
_08058B0A:
	movs r5, #1
	rsbs r5, r5, #0
	lsls r2, r2, #1
	ldr r4, _08058B78 @ =0x0201D414
	adds r2, r2, r4
	movs r0, #0xf
	str r0, [sp]
	movs r6, #0x16
	str r6, [sp, #4]
	movs r0, #6
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	adds r0, r7, #0
	adds r1, r5, #0
	movs r3, #0x42
	bl sub_805B2BC
	adds r4, #0x42
	ldr r2, _08058B7C @ =gBg3Tm
	movs r0, #0x20
	str r0, [sp]
	str r6, [sp, #4]
	str r5, [sp, #8]
	str r5, [sp, #0xc]
	adds r0, r4, #0
	movs r1, #0x42
	movs r3, #0x20
	bl sub_805B20C
	ldr r1, _08058B80 @ =0x06008000
	movs r2, #0x80
	lsls r2, r2, #6
	mov r0, r8
	bl RegisterDataMove
_08058B50:
	movs r0, #8
	bl EnableBgSync
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08058B64: .4byte 0x081BC268
_08058B68: .4byte 0x0201777C
_08058B6C: .4byte 0x081BF5B4
_08058B70: .4byte 0x0201977C
_08058B74: .4byte 0x0203CD14
_08058B78: .4byte 0x0201D414
_08058B7C: .4byte gBg3Tm
_08058B80: .4byte 0x06008000

	thumb_func_start sub_8058B84
sub_8058B84: @ 0x08058B84
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	adds r4, r0, #0
	ldr r0, _08058C1C @ =0x081BCBDC
	ldr r1, _08058C20 @ =0x0201777C
	mov r8, r1
	bl LZ77UnCompWram
	ldr r0, _08058C24 @ =0x081BF6F4
	ldr r7, _08058C28 @ =0x0201977C
	adds r1, r7, #0
	bl LZ77UnCompWram
	movs r0, #0
	bl sub_8047C68
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	adds r1, r0, #0
	cmp r1, #0
	bne _08058C08
	ldr r0, _08058C2C @ =0x0203CD14
	movs r2, #0
	ldrsh r0, [r0, r2]
	movs r2, #0x1b
	cmp r0, #0
	bne _08058BC2
	movs r2, #0x21
_08058BC2:
	movs r5, #1
	rsbs r5, r5, #0
	lsls r2, r2, #1
	ldr r4, _08058C30 @ =0x0201D414
	adds r2, r2, r4
	movs r0, #0xf
	str r0, [sp]
	movs r6, #0x16
	str r6, [sp, #4]
	movs r0, #6
	str r0, [sp, #8]
	str r1, [sp, #0xc]
	adds r0, r7, #0
	adds r1, r5, #0
	movs r3, #0x42
	bl sub_805B2BC
	adds r4, #0x42
	ldr r2, _08058C34 @ =gBg3Tm
	movs r0, #0x20
	str r0, [sp]
	str r6, [sp, #4]
	str r5, [sp, #8]
	str r5, [sp, #0xc]
	adds r0, r4, #0
	movs r1, #0x42
	movs r3, #0x20
	bl sub_805B20C
	ldr r1, _08058C38 @ =0x06008000
	movs r2, #0x80
	lsls r2, r2, #6
	mov r0, r8
	bl RegisterDataMove
_08058C08:
	movs r0, #8
	bl EnableBgSync
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08058C1C: .4byte 0x081BCBDC
_08058C20: .4byte 0x0201777C
_08058C24: .4byte 0x081BF6F4
_08058C28: .4byte 0x0201977C
_08058C2C: .4byte 0x0203CD14
_08058C30: .4byte 0x0201D414
_08058C34: .4byte gBg3Tm
_08058C38: .4byte 0x06008000

	thumb_func_start sub_8058C3C
sub_8058C3C: @ 0x08058C3C
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r4, r0, #0
	ldr r0, _08058CCC @ =0x081BD5E8
	ldr r1, _08058CD0 @ =0x0201777C
	bl LZ77UnCompWram
	ldr r0, _08058CD4 @ =0x081BF848
	ldr r1, _08058CD8 @ =0x0201977C
	bl LZ77UnCompWram
	movs r0, #0
	bl sub_8047C68
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08058CBE
	ldr r0, _08058CDC @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #0x21
	cmp r0, #0
	beq _08058C76
	movs r2, #1
	cmp r0, #1
	bne _08058C76
	movs r2, #0x1b
_08058C76:
	ldr r0, _08058CD8 @ =0x0201977C
	movs r5, #1
	rsbs r5, r5, #0
	lsls r2, r2, #1
	ldr r4, _08058CE0 @ =0x0201D414
	adds r2, r2, r4
	movs r1, #0xf
	str r1, [sp]
	movs r6, #0x16
	str r6, [sp, #4]
	movs r1, #6
	str r1, [sp, #8]
	movs r1, #0
	str r1, [sp, #0xc]
	adds r1, r5, #0
	movs r3, #0x42
	bl sub_805B2BC
	adds r4, #0x42
	ldr r2, _08058CE4 @ =gBg3Tm
	movs r0, #0x20
	str r0, [sp]
	str r6, [sp, #4]
	str r5, [sp, #8]
	str r5, [sp, #0xc]
	adds r0, r4, #0
	movs r1, #0x42
	movs r3, #0x20
	bl sub_805B20C
	ldr r0, _08058CD0 @ =0x0201777C
	ldr r1, _08058CE8 @ =0x06008000
	movs r2, #0x80
	lsls r2, r2, #6
	bl RegisterDataMove
_08058CBE:
	movs r0, #8
	bl EnableBgSync
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08058CCC: .4byte 0x081BD5E8
_08058CD0: .4byte 0x0201777C
_08058CD4: .4byte 0x081BF848
_08058CD8: .4byte 0x0201977C
_08058CDC: .4byte 0x0203CD14
_08058CE0: .4byte 0x0201D414
_08058CE4: .4byte gBg3Tm
_08058CE8: .4byte 0x06008000

	thumb_func_start sub_8058CEC
sub_8058CEC: @ 0x08058CEC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08058D04 @ =0x086046D8
	movs r1, #4
	bl SpawnProc
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r4, [r0, #0x44]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08058D04: .4byte 0x086046D8

	thumb_func_start sub_8058D08
sub_8058D08: @ 0x08058D08
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x44]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r0, #3
	movs r2, #0x10
	bl SetBgOffset
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x46
	bne _08058D2E
	adds r0, r4, #0
	bl Proc_Break
_08058D2E:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8058D34
sub_8058D34: @ 0x08058D34
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r5, r0, #0
	ldr r0, _08058D94 @ =0x081BE490
	ldr r4, _08058D98 @ =0x0201777C
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r1, _08058D9C @ =0x06008000
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r4, #0
	bl RegisterDataMove
	movs r0, #0
	bl sub_8047C68
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	adds r5, r0, #0
	cmp r5, #0
	bne _08058E14
	ldr r0, _08058DA0 @ =0x081BFA34
	ldr r4, _08058DA4 @ =0x0201977C
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r6, _08058DA8 @ =gBg3Tm
	movs r0, #6
	str r0, [sp]
	str r5, [sp, #4]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #0x1e
	movs r3, #0x16
	bl sub_805B1DC
	ldr r0, _08058DAC @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #1
	beq _08058DC2
	cmp r0, #1
	bgt _08058DB0
	cmp r0, #0
	beq _08058DB6
	b _08058E14
	.align 2, 0
_08058D94: .4byte 0x081BE490
_08058D98: .4byte 0x0201777C
_08058D9C: .4byte 0x06008000
_08058DA0: .4byte 0x081BFA34
_08058DA4: .4byte 0x0201977C
_08058DA8: .4byte gBg3Tm
_08058DAC: .4byte 0x0203CD14
_08058DB0:
	cmp r0, #2
	beq _08058E04
	b _08058E14
_08058DB6:
	movs r0, #3
	movs r1, #0
	movs r2, #0x10
	bl SetBgOffset
	b _08058E14
_08058DC2:
	ldr r4, _08058E00 @ =0x0201E12C
	ldr r0, [r4]
	adds r0, #0x30
	bl sub_8058CEC
	ldr r1, [r4]
	adds r1, #0x30
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r0, #3
	movs r2, #0x10
	bl SetBgOffset
	ldr r4, [r4]
	cmp r4, #0
	bne _08058E14
	str r4, [sp]
	adds r0, r6, #0
	movs r1, #2
	movs r2, #0x16
	movs r3, #0xf0
	bl sub_805B094
	adds r0, r6, #4
	str r4, [sp]
	movs r1, #2
	movs r2, #0x16
	movs r3, #0xf0
	bl sub_805B094
	b _08058E14
	.align 2, 0
_08058E00: .4byte 0x0201E12C
_08058E04:
	movs r0, #0x10
	bl sub_8058CEC
	movs r0, #3
	movs r1, #0x10
	movs r2, #0x10
	bl SetBgOffset
_08058E14:
	movs r0, #8
	bl EnableBgSync
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8058E24
sub_8058E24: @ 0x08058E24
	push {r4, lr}
	sub sp, #4
	movs r0, #0
	str r0, [sp]
	ldr r4, _08058E4C @ =0x0201C77C
	ldr r2, _08058E50 @ =0x01000008
	mov r0, sp
	adds r1, r4, #0
	bl CpuFastSet
	ldr r1, _08058E54 @ =0x06008000
	adds r0, r4, #0
	movs r2, #0x20
	bl RegisterDataMove
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08058E4C: .4byte 0x0201C77C
_08058E50: .4byte 0x01000008
_08058E54: .4byte 0x06008000

	thumb_func_start sub_8058E58
sub_8058E58: @ 0x08058E58
	push {lr}
	cmp r0, #0
	bne _08058E74
	ldr r0, _08058E6C @ =0x081BF434
	ldr r1, _08058E70 @ =0x020217C8
	movs r2, #8
	bl CpuFastSet
	b _08058E7E
	.align 2, 0
_08058E6C: .4byte 0x081BF434
_08058E70: .4byte 0x020217C8
_08058E74:
	ldr r0, _08058E88 @ =0x081BF434
	ldr r1, _08058E8C @ =0x020217E8
	movs r2, #8
	bl CpuFastSet
_08058E7E:
	bl EnablePalSync
	pop {r0}
	bx r0
	.align 2, 0
_08058E88: .4byte 0x081BF434
_08058E8C: .4byte 0x020217E8

	thumb_func_start sub_8058E90
sub_8058E90: @ 0x08058E90
	push {lr}
	cmp r0, #0
	bne _08058EAC
	ldr r0, _08058EA4 @ =0x081C4DE8
	ldr r1, _08058EA8 @ =0x020217C8
	movs r2, #8
	bl CpuFastSet
	b _08058EB6
	.align 2, 0
_08058EA4: .4byte 0x081C4DE8
_08058EA8: .4byte 0x020217C8
_08058EAC:
	ldr r0, _08058EC0 @ =0x081C4DE8
	ldr r1, _08058EC4 @ =0x020217E8
	movs r2, #8
	bl CpuFastSet
_08058EB6:
	bl EnablePalSync
	pop {r0}
	bx r0
	.align 2, 0
_08058EC0: .4byte 0x081C4DE8
_08058EC4: .4byte 0x020217E8

	thumb_func_start sub_8058EC8
sub_8058EC8: @ 0x08058EC8
	push {lr}
	cmp r0, #0
	bne _08058EE4
	ldr r0, _08058EDC @ =0x08113564
	ldr r1, _08058EE0 @ =0x020217C8
	movs r2, #8
	bl CpuFastSet
	b _08058EEE
	.align 2, 0
_08058EDC: .4byte 0x08113564
_08058EE0: .4byte 0x020217C8
_08058EE4:
	ldr r0, _08058EF8 @ =0x08113564
	ldr r1, _08058EFC @ =0x020217E8
	movs r2, #8
	bl CpuFastSet
_08058EEE:
	bl EnablePalSync
	pop {r0}
	bx r0
	.align 2, 0
_08058EF8: .4byte 0x08113564
_08058EFC: .4byte 0x020217E8

	thumb_func_start sub_8058F00
sub_8058F00: @ 0x08058F00
	push {lr}
	bl sub_8058998
	adds r1, r0, #0
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _08058F14
	movs r0, #0
	b _08058F22
_08058F14:
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	bne _08058F20
	movs r0, #2
	b _08058F22
_08058F20:
	movs r0, #1
_08058F22:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8058F28
sub_8058F28: @ 0x08058F28
	push {lr}
	bl sub_8058F00
	bl sub_804B8B0
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8058F38
sub_8058F38: @ 0x08058F38
	push {lr}
	bl sub_8058998
	cmp r0, #0
	beq _08058F58
	ldr r0, _08058F54 @ =0x02000000
	ldr r0, [r0]
	bl sub_8058A08
	ldrh r0, [r0]
	cmp r0, #1
	bne _08058F58
	movs r0, #1
	b _08058F5A
	.align 2, 0
_08058F54: .4byte 0x02000000
_08058F58:
	movs r0, #0
_08058F5A:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8058F60
sub_8058F60: @ 0x08058F60
	push {r4, lr}
	sub sp, #0x10
	asrs r4, r0, #3
	movs r1, #7
	ands r1, r0
	movs r0, #3
	movs r2, #0x10
	bl SetBgOffset
	lsls r4, r4, #1
	ldr r0, _08058FA0 @ =0x0201D456
	adds r4, r4, r0
	ldr r2, _08058FA4 @ =gBg3Tm
	movs r0, #0x20
	str r0, [sp]
	movs r0, #0x16
	str r0, [sp, #4]
	subs r0, #0x17
	str r0, [sp, #8]
	str r0, [sp, #0xc]
	adds r0, r4, #0
	movs r1, #0x42
	movs r3, #0x20
	bl sub_805B20C
	movs r0, #8
	bl EnableBgSync
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08058FA0: .4byte 0x0201D456
_08058FA4: .4byte gBg3Tm

	thumb_func_start sub_8058FA8
sub_8058FA8: @ 0x08058FA8
	push {r4, lr}
	sub sp, #0x10
	ldr r4, _08058FDC @ =0x0201977C
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r0, _08058FE0 @ =0x0203CD14
	movs r1, #0
	ldrsh r3, [r0, r1]
	cmp r3, #0
	bne _08058FE8
	movs r1, #1
	rsbs r1, r1, #0
	ldr r2, _08058FE4 @ =gBg3Tm
	movs r0, #0x1e
	str r0, [sp]
	str r0, [sp, #4]
	movs r0, #6
	str r0, [sp, #8]
	str r3, [sp, #0xc]
	adds r0, r4, #0
	movs r3, #0x20
	bl sub_805B20C
	b _08059006
	.align 2, 0
_08058FDC: .4byte 0x0201977C
_08058FE0: .4byte 0x0203CD14
_08058FE4: .4byte gBg3Tm
_08058FE8:
	adds r0, r4, #0
	adds r0, #8
	ldr r2, _08059014 @ =gBg3Tm
	movs r1, #0x1a
	str r1, [sp]
	movs r1, #0x1e
	str r1, [sp, #4]
	movs r1, #6
	str r1, [sp, #8]
	movs r1, #0
	str r1, [sp, #0xc]
	movs r1, #0x1e
	movs r3, #0x20
	bl sub_805B20C
_08059006:
	movs r0, #8
	bl EnableBgSync
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08059014: .4byte gBg3Tm

	thumb_func_start sub_8059018
sub_8059018: @ 0x08059018
	push {lr}
	sub sp, #0x10
	ldr r1, _08059068 @ =0x0201E7CC
	bl LZ77UnCompWram
	ldr r0, _0805906C @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r2, #0x21
	cmp r0, #0
	beq _08059036
	movs r2, #3
	cmp r0, #1
	bne _08059036
	movs r2, #0x1d
_08059036:
	ldr r0, _08059068 @ =0x0201E7CC
	movs r1, #1
	rsbs r1, r1, #0
	lsls r2, r2, #1
	ldr r3, _08059070 @ =0x0201D414
	adds r2, r2, r3
	movs r3, #0x1e
	str r3, [sp]
	movs r3, #0x16
	str r3, [sp, #4]
	movs r3, #6
	str r3, [sp, #8]
	movs r3, #0
	str r3, [sp, #0xc]
	movs r3, #0x42
	bl sub_805B20C
	ldr r0, _08059074 @ =0x0201E12C
	ldr r0, [r0]
	bl sub_8058F60
	add sp, #0x10
	pop {r0}
	bx r0
	.align 2, 0
_08059068: .4byte 0x0201E7CC
_0805906C: .4byte 0x0203CD14
_08059070: .4byte 0x0201D414
_08059074: .4byte 0x0201E12C

	thumb_func_start sub_8059078
sub_8059078: @ 0x08059078
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0805908C @ =0x086046F0
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805908C: .4byte 0x086046F0

	thumb_func_start sub_8059090
sub_8059090: @ 0x08059090
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x5c]
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0xe6
	bl sub_805BCA8
	movs r0, #2
	ldrsh r1, [r4, r0]
	movs r0, #0xe6
	movs r2, #1
	bl sub_805BDC0
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_80590B8
sub_80590B8: @ 0x080590B8
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	bl sub_804B6C4
	adds r4, r0, #0
	ldr r0, _080590F0 @ =0x08604710
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	ldr r0, _080590F4 @ =0x0201E7AC
	lsls r4, r4, #2
	adds r4, r4, r0
	str r5, [r4]
	adds r0, r6, #0
	bl sub_804B6C4
	ldr r1, _080590F8 @ =0x0201E7C8
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r2, #0
	movs r1, #1
	strh r1, [r0]
	str r6, [r5, #0x5c]
	strh r2, [r5, #0x2c]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080590F0: .4byte 0x08604710
_080590F4: .4byte 0x0201E7AC
_080590F8: .4byte 0x0201E7C8

	thumb_func_start sub_80590FC
sub_80590FC: @ 0x080590FC
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r0, #8
	str r0, [sp]
	movs r0, #1
	movs r1, #4
	movs r2, #0x10
	bl Interpolate
	bl sub_805B9A4
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bne _0805913C
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r0, [r4, #0x5c]
	movs r1, #0
	movs r2, #0xa
	movs r3, #1
	bl sub_8046C14
	adds r0, r4, #0
	bl Proc_Break
_0805913C:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8059144
sub_8059144: @ 0x08059144
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_80589C4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08059162
	movs r0, #0x3c
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
	b _080591A4
_08059162:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xb
	bne _080591A4
	ldr r1, [r4, #0x5c]
	movs r0, #2
	ldrh r2, [r1]
	orrs r0, r2
	strh r0, [r1]
	ldr r0, [r4, #0x5c]
	movs r1, #0
	bl sub_8059690
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0xe8
	bl sub_805BCA8
	ldr r0, [r4, #0x5c]
	movs r2, #2
	ldrsh r1, [r0, r2]
	movs r0, #0xe8
	movs r2, #1
	bl sub_805BDC0
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
_080591A4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80591AC
sub_80591AC: @ 0x080591AC
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3d
	bne _080591C8
	movs r0, #0
	strh r0, [r1, #0x2c]
	adds r0, r1, #0
	bl Proc_Break
_080591C8:
	pop {r0}
	bx r0

	thumb_func_start sub_80591CC
sub_80591CC: @ 0x080591CC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_80589C4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08059244
	bl sub_8058E24
	ldr r0, _0805923C @ =gBg3Tm
	movs r1, #0xf0
	lsls r1, r1, #8
	bl TmFill
	movs r0, #3
	movs r1, #0
	movs r2, #0x10
	bl SetBgOffset
	movs r0, #8
	bl EnableBgSync
	ldr r3, _08059240 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x18]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x18]
	movs r0, #3
	ldrb r1, [r3, #0x14]
	orrs r0, r1
	strb r0, [r3, #0x14]
	movs r0, #1
	bl sub_8058A50
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
	b _080592C0
	.align 2, 0
_0805923C: .4byte gBg3Tm
_08059240: .4byte gDispIo
_08059244:
	movs r2, #0x2c
	ldrsh r0, [r4, r2]
	cmp r0, #0
	bne _080592A8
	bl sub_8058E24
	ldr r0, _080592C8 @ =gBg3Tm
	movs r1, #0xf0
	lsls r1, r1, #8
	bl TmFill
	movs r0, #3
	movs r1, #0
	movs r2, #0x10
	bl SetBgOffset
	ldr r3, _080592CC @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x18]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x18]
	movs r0, #3
	ldrb r1, [r3, #0x14]
	orrs r0, r1
	strb r0, [r3, #0x14]
	movs r0, #8
	bl EnableBgSync
	movs r0, #1
	bl sub_8058A50
	adds r0, r4, #0
	bl sub_8058A80
	adds r0, r4, #0
	bl sub_8058ACC
_080592A8:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #6
	bne _080592C0
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
_080592C0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080592C8: .4byte gBg3Tm
_080592CC: .4byte gDispIo

	thumb_func_start sub_80592D0
sub_80592D0: @ 0x080592D0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_80589C4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _080592EE
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
	b _08059320
_080592EE:
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _08059302
	adds r0, r4, #0
	bl sub_8058B84
	movs r0, #5
	bl sub_8046010
_08059302:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xb
	bne _08059320
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r0, [r4, #0x5c]
	bl sub_8059078
	adds r0, r4, #0
	bl Proc_Break
_08059320:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8059328
sub_8059328: @ 0x08059328
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x5c]
	bl sub_80589C4
	lsls r0, r0, #0x18
	asrs r6, r0, #0x18
	cmp r6, #1
	bne _0805937C
	adds r0, r5, #0
	bl sub_8058C3C
	ldr r0, [r5, #0x5c]
	bl sub_80598F0
	ldr r1, [r5, #0x5c]
	ldr r0, _08059374 @ =0x0000FFFD
	ldrh r2, [r1]
	ands r0, r2
	movs r4, #0
	strh r0, [r1]
	ldr r0, [r5, #0x5c]
	movs r1, #0x55
	bl sub_804A528
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	ldr r1, _08059378 @ =0x0201E7C0
	lsls r0, r0, #1
	adds r0, r0, r1
	strh r6, [r0]
	strh r4, [r5, #0x2c]
	adds r0, r5, #0
	bl Proc_Break
	b _080593C6
	.align 2, 0
_08059374: .4byte 0x0000FFFD
_08059378: .4byte 0x0201E7C0
_0805937C:
	movs r1, #0x2c
	ldrsh r0, [r5, r1]
	cmp r0, #0
	bne _080593A2
	adds r0, r5, #0
	bl sub_8058C3C
	ldr r0, [r5, #0x5c]
	bl sub_80598F0
	ldr r1, [r5, #0x5c]
	ldr r0, _080593CC @ =0x0000FFFD
	ldrh r2, [r1]
	ands r0, r2
	strh r0, [r1]
	ldr r0, [r5, #0x5c]
	movs r1, #0x55
	bl sub_804A528
_080593A2:
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3d
	bne _080593C6
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	ldr r1, _080593D0 @ =0x0201E7C0
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r1, #1
	strh r1, [r0]
	adds r0, r5, #0
	bl Proc_Break
_080593C6:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080593CC: .4byte 0x0000FFFD
_080593D0: .4byte 0x0201E7C0

	thumb_func_start sub_80593D4
sub_80593D4: @ 0x080593D4
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _080593FC @ =0x0201E7C8
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	ldrh r0, [r0]
	cmp r0, #2
	bne _080593F4
	movs r0, #0
	strh r0, [r5, #0x2c]
	adds r0, r5, #0
	bl Proc_Break
_080593F4:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080593FC: .4byte 0x0201E7C8

	thumb_func_start sub_8059400
sub_8059400: @ 0x08059400
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_8058A34
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8059418
sub_8059418: @ 0x08059418
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_80589C4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08059436
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
	b _08059466
_08059436:
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _0805944E
	adds r0, r4, #0
	bl sub_8058B84
	ldr r0, [r4, #0x5c]
	movs r1, #2
	ldrh r2, [r0]
	orrs r1, r2
	strh r1, [r0]
_0805944E:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #6
	bne _08059466
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
_08059466:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_805946C
sub_805946C: @ 0x0805946C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_80589C4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0805948E
	bl sub_8058E24
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
	b _080594C4
_0805948E:
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _080594AC
	bl sub_8058E24
	movs r0, #0x10
	bl sub_805B9A4
	adds r0, r4, #0
	bl sub_8058A80
	adds r0, r4, #0
	bl sub_8058ACC
_080594AC:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #6
	bne _080594C4
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
_080594C4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80594CC
sub_80594CC: @ 0x080594CC
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _08059504
	ldr r0, [r4, #0x5c]
	bl sub_80589C4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08059504
	ldr r0, [r4, #0x5c]
	movs r1, #1
	bl sub_8059690
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0xe9
	bl sub_805BCA8
	ldr r0, [r4, #0x5c]
	movs r2, #2
	ldrsh r1, [r0, r2]
	movs r0, #0xe9
	movs r2, #1
	bl sub_805BDC0
_08059504:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #6
	bne _08059568
	ldr r0, _08059570 @ =gBg3Tm
	movs r1, #0xf0
	lsls r1, r1, #8
	bl TmFill
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #8
	bl EnableBgSync
	ldr r3, _08059574 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #2
	bl sub_8058A50
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
_08059568:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08059570: .4byte gBg3Tm
_08059574: .4byte gDispIo

	thumb_func_start sub_8059578
sub_8059578: @ 0x08059578
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, [r6, #0x5c]
	bl sub_80589C4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08059596
	movs r0, #0x50
	strh r0, [r6, #0x2c]
	adds r0, r6, #0
	bl Proc_Break
	b _080595DC
_08059596:
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3d
	bne _080595DC
	ldr r1, [r6, #0x5c]
	ldr r0, _080595E4 @ =0x0000FFFD
	ldrh r2, [r1]
	ands r0, r2
	strh r0, [r1]
	ldr r5, [r6, #0x5c]
	ldr r4, _080595E8 @ =0x0203CD00
	adds r0, r5, #0
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r0, r5, #0
	bl sub_804A528
	ldr r0, [r6, #0x5c]
	movs r1, #0
	movs r2, #0xa
	movs r3, #1
	bl sub_8046C14
	movs r0, #0
	strh r0, [r6, #0x2c]
	adds r0, r6, #0
	bl Proc_Break
_080595DC:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080595E4: .4byte 0x0000FFFD
_080595E8: .4byte 0x0203CD00

	thumb_func_start sub_80595EC
sub_80595EC: @ 0x080595EC
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x51
	bne _0805960E
	movs r0, #0x10
	bl sub_805B9A4
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
_0805960E:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8059614
sub_8059614: @ 0x08059614
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _08059632
	ldr r0, _08059668 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl ApplyChapterMapGraphics
	bl RenderMap
_08059632:
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r0, #8
	str r0, [sp]
	movs r0, #4
	movs r1, #0x10
	movs r2, #4
	bl Interpolate
	bl sub_805B9A4
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bne _08059660
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
_08059660:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08059668: .4byte gPlaySt

	thumb_func_start sub_805966C
sub_805966C: @ 0x0805966C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	ldr r1, _0805968C @ =0x0201E7C0
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r1, #2
	strh r1, [r0]
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805968C: .4byte 0x0201E7C0

	thumb_func_start sub_8059690
sub_8059690: @ 0x08059690
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r2, _080596A8 @ =0x02017744
	ldr r0, [r2]
	adds r0, #1
	str r0, [r2]
	cmp r1, #0
	bne _080596B0
	ldr r0, _080596AC @ =0x08604798
	b _080596B2
	.align 2, 0
_080596A8: .4byte 0x02017744
_080596AC: .4byte 0x08604798
_080596B0:
	ldr r0, _08059718 @ =0x086047E0
_080596B2:
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	ldr r3, _0805971C @ =0x085D0E8C
	str r3, [sp]
	adds r0, r5, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r4, #0x60]
	movs r3, #0
	movs r1, #0x98
	lsls r1, r1, #6
	strh r1, [r0, #8]
	ldr r1, [r0, #0x1c]
	movs r2, #0x80
	lsls r2, r2, #3
	orrs r1, r2
	str r1, [r0, #0x1c]
	ldrh r1, [r0, #4]
	adds r1, #8
	strh r1, [r0, #4]
	strh r3, [r4, #0x2c]
	bl sub_8047500
	ldr r2, _08059720 @ =gDispIo+0x3C
	ldr r0, _08059724 @ =0x0000FFE0
	ldrh r1, [r2]
	ands r0, r1
	ldr r1, _08059728 @ =0x0000E0FF
	ands r0, r1
	movs r3, #0xe0
	lsls r3, r3, #4
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r0, _0805972C @ =0x081C1C74
	movs r1, #0x20
	bl sub_8047AB0
	movs r0, #8
	ldrh r1, [r5]
	orrs r0, r1
	strh r0, [r5]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08059718: .4byte 0x086047E0
_0805971C: .4byte 0x085D0E8C
_08059720: .4byte gDispIo+0x3C
_08059724: .4byte 0x0000FFE0
_08059728: .4byte 0x0000E0FF
_0805972C: .4byte 0x081C1C74

	thumb_func_start sub_8059730
sub_8059730: @ 0x08059730
	push {r4, lr}
	ldr r4, [r0, #0x5c]
	ldr r2, _08059750 @ =0x02017744
	ldr r1, [r2]
	subs r1, #1
	str r1, [r2]
	ldr r0, [r0, #0x60]
	bl BasRemove
	ldr r0, _08059754 @ =0x0000FFF7
	ldrh r1, [r4]
	ands r0, r1
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08059750: .4byte 0x02017744
_08059754: .4byte 0x0000FFF7

	thumb_func_start sub_8059758
sub_8059758: @ 0x08059758
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r1, [r6, #0x60]
	ldr r0, _0805978C @ =0x08604C34
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _08059790 @ =0x081BFC74
	ldr r5, _08059794 @ =0x06014000
	ldr r4, _08059798 @ =0x0201A77C
	adds r1, r4, #0
	bl LZ77UnCompWram
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r4, #0
	adds r1, r5, #0
	bl RegisterDataMove
	adds r0, r6, #0
	bl Proc_Break
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805978C: .4byte 0x08604C34
_08059790: .4byte 0x081BFC74
_08059794: .4byte 0x06014000
_08059798: .4byte 0x0201A77C

	thumb_func_start sub_805979C
sub_805979C: @ 0x0805979C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r1, [r6, #0x60]
	ldr r0, _080597D0 @ =0x08604E30
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _080597D4 @ =0x081C079C
	ldr r5, _080597D8 @ =0x06014000
	ldr r4, _080597DC @ =0x0201A77C
	adds r1, r4, #0
	bl LZ77UnCompWram
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r4, #0
	adds r1, r5, #0
	bl RegisterDataMove
	adds r0, r6, #0
	bl Proc_Break
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080597D0: .4byte 0x08604E30
_080597D4: .4byte 0x081C079C
_080597D8: .4byte 0x06014000
_080597DC: .4byte 0x0201A77C

	thumb_func_start sub_80597E0
sub_80597E0: @ 0x080597E0
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r1, [r6, #0x60]
	ldr r0, _08059814 @ =0x08604F94
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _08059818 @ =0x081C14D0
	ldr r5, _0805981C @ =0x06014000
	ldr r4, _08059820 @ =0x0201A77C
	adds r1, r4, #0
	bl LZ77UnCompWram
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r4, #0
	adds r1, r5, #0
	bl RegisterDataMove
	adds r0, r6, #0
	bl Proc_Break
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08059814: .4byte 0x08604F94
_08059818: .4byte 0x081C14D0
_0805981C: .4byte 0x06014000
_08059820: .4byte 0x0201A77C

	thumb_func_start sub_8059824
sub_8059824: @ 0x08059824
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r1, [r6, #0x60]
	ldr r0, _08059858 @ =0x08604C48
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _0805985C @ =0x081BFC74
	ldr r5, _08059860 @ =0x06014000
	ldr r4, _08059864 @ =0x0201A77C
	adds r1, r4, #0
	bl LZ77UnCompWram
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r4, #0
	adds r1, r5, #0
	bl RegisterDataMove
	adds r0, r6, #0
	bl Proc_Break
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08059858: .4byte 0x08604C48
_0805985C: .4byte 0x081BFC74
_08059860: .4byte 0x06014000
_08059864: .4byte 0x0201A77C

	thumb_func_start sub_8059868
sub_8059868: @ 0x08059868
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r1, [r6, #0x60]
	ldr r0, _0805989C @ =0x08604E4C
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _080598A0 @ =0x081C079C
	ldr r5, _080598A4 @ =0x06014000
	ldr r4, _080598A8 @ =0x0201A77C
	adds r1, r4, #0
	bl LZ77UnCompWram
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r4, #0
	adds r1, r5, #0
	bl RegisterDataMove
	adds r0, r6, #0
	bl Proc_Break
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805989C: .4byte 0x08604E4C
_080598A0: .4byte 0x081C079C
_080598A4: .4byte 0x06014000
_080598A8: .4byte 0x0201A77C

	thumb_func_start sub_80598AC
sub_80598AC: @ 0x080598AC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r1, [r6, #0x60]
	ldr r0, _080598E0 @ =0x08604FA0
	str r0, [r1, #0x24]
	str r0, [r1, #0x20]
	movs r0, #0
	strh r0, [r1, #6]
	ldr r0, _080598E4 @ =0x081C14D0
	ldr r5, _080598E8 @ =0x06014000
	ldr r4, _080598EC @ =0x0201A77C
	adds r1, r4, #0
	bl LZ77UnCompWram
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r4, #0
	adds r1, r5, #0
	bl RegisterDataMove
	adds r0, r6, #0
	bl Proc_Break
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080598E0: .4byte 0x08604FA0
_080598E4: .4byte 0x081C14D0
_080598E8: .4byte 0x06014000
_080598EC: .4byte 0x0201A77C

	thumb_func_start sub_80598F0
sub_80598F0: @ 0x080598F0
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_804B6C4
	adds r4, r0, #0
	ldr r0, _08059920 @ =0x08604828
	movs r1, #4
	bl SpawnProc
	ldr r1, _08059924 @ =0x0201E7B4
	lsls r4, r4, #2
	adds r4, r4, r1
	str r0, [r4]
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	str r5, [r0, #0x5c]
	ldrb r1, [r5, #0x12]
	str r1, [r0, #0x54]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08059920: .4byte 0x08604828
_08059924: .4byte 0x0201E7B4

	thumb_func_start sub_8059928
sub_8059928: @ 0x08059928
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_8046F48
	adds r1, r0, #0
	cmp r1, #0
	bne _080599CA
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r2, [r0]
	adds r5, r0, #0
	cmp r2, #0
	beq _0805994A
	cmp r2, #1
	beq _08059958
	b _08059968
_0805994A:
	strh r1, [r4, #0x2c]
	str r1, [r4, #0x44]
	ldr r0, _08059954 @ =0x081BC0C8
	b _0805995E
	.align 2, 0
_08059954: .4byte 0x081BC0C8
_08059958:
	strh r1, [r4, #0x2c]
	str r1, [r4, #0x44]
	ldr r0, _08059994 @ =0x081BC0EE
_0805995E:
	str r0, [r4, #0x48]
	ldr r0, _08059998 @ =0x081BF434
	str r0, [r4, #0x4c]
	movs r0, #2
	strb r0, [r5]
_08059968:
	adds r0, r4, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _080599A0
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #5
	adds r0, r0, r1
	ldr r1, _0805999C @ =0x020217C8
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	b _080599AC
	.align 2, 0
_08059994: .4byte 0x081BC0EE
_08059998: .4byte 0x081BF434
_0805999C: .4byte 0x020217C8
_080599A0:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _080599AC
	movs r0, #0
	strb r0, [r5]
_080599AC:
	ldr r0, [r4, #0x5c]
	ldrb r1, [r0, #0x12]
	ldr r0, [r4, #0x54]
	cmp r1, r0
	beq _080599C4
	adds r0, r1, #0
	cmp r0, #1
	beq _080599C0
	cmp r0, #3
	bne _080599C4
_080599C0:
	movs r0, #1
	strb r0, [r5]
_080599C4:
	ldr r0, [r4, #0x5c]
	ldrb r0, [r0, #0x12]
	str r0, [r4, #0x54]
_080599CA:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_80599D0
sub_80599D0: @ 0x080599D0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	bl sub_804B6C4
	adds r4, r0, #0
	ldr r0, _08059A10 @ =0x08604840
	movs r1, #3
	bl SpawnProc
	adds r6, r0, #0
	ldr r0, _08059A14 @ =0x0201E7AC
	lsls r4, r4, #2
	adds r4, r4, r0
	str r6, [r4]
	adds r0, r5, #0
	bl sub_804B6C4
	ldr r1, _08059A18 @ =0x0201E7C8
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r1, #1
	strh r1, [r0]
	str r5, [r6, #0x5c]
	adds r0, r5, #0
	bl sub_80589C4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08059A1C
	movs r0, #0x3c
	b _08059A1E
	.align 2, 0
_08059A10: .4byte 0x08604840
_08059A14: .4byte 0x0201E7AC
_08059A18: .4byte 0x0201E7C8
_08059A1C:
	movs r0, #0
_08059A1E:
	strh r0, [r6, #0x2c]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8059A28
sub_8059A28: @ 0x08059A28
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3d
	bne _08059A40
	adds r0, r1, #0
	bl Proc_Break
_08059A40:
	pop {r0}
	bx r0

	thumb_func_start sub_8059A44
sub_8059A44: @ 0x08059A44
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r4, _08059AA0 @ =0x0203CD08
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #0
	ldrsh r4, [r0, r1]
	ldr r0, _08059AA4 @ =0x086A0B68
	ldr r0, [r0, #0x1c]
	ldr r6, _08059AA8 @ =0x0201C77C
	adds r1, r6, #0
	bl LZ77UnCompWram
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	movs r1, #0xd0
	lsls r1, r1, #1
	cmp r0, #0
	bne _08059A74
	subs r1, #0x20
_08059A74:
	lsls r0, r4, #5
	adds r0, r0, r6
	lsls r1, r1, #1
	ldr r2, _08059AAC @ =gPal
	adds r1, r1, r2
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	ldr r0, [r5, #0x5c]
	bl sub_80589C4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08059AB0
	adds r0, r5, #0
	bl Proc_Break
	b _08059ACA
	.align 2, 0
_08059AA0: .4byte 0x0203CD08
_08059AA4: .4byte 0x086A0B68
_08059AA8: .4byte 0x0201C77C
_08059AAC: .4byte gPal
_08059AB0:
	movs r0, #0
	strh r0, [r5, #0x2c]
	ldr r0, [r5, #0x5c]
	movs r1, #0x6b
	bl sub_804A528
	ldr r0, [r5, #0x5c]
	movs r1, #0
	bl sub_804B5E0
	adds r0, r5, #0
	bl Proc_Break
_08059ACA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_8059AD0
sub_8059AD0: @ 0x08059AD0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_80589C4
	lsls r0, r0, #0x18
	asrs r5, r0, #0x18
	cmp r5, #1
	bne _08059B04
	ldr r0, [r4, #0x5c]
	movs r1, #0x5b
	bl sub_804A528
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	ldr r1, _08059B00 @ =0x0201E7C0
	lsls r0, r0, #1
	adds r0, r0, r1
	strh r5, [r0]
	adds r0, r4, #0
	bl Proc_Break
	b _08059B6E
	.align 2, 0
_08059B00: .4byte 0x0201E7C0
_08059B04:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x1a
	bne _08059B2A
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0xdc
	bl sub_805BCA8
	ldr r0, [r4, #0x5c]
	movs r2, #2
	ldrsh r1, [r0, r2]
	movs r0, #0xdc
	movs r2, #1
	bl sub_805BDC0
_08059B2A:
	ldr r0, [r4, #0x5c]
	ldr r1, [r0, #0x20]
	movs r0, #0x3f
	ldrb r1, [r1, #3]
	ands r0, r1
	cmp r0, #0
	bne _08059B6E
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0xde
	bl sub_805BCA8
	ldr r0, [r4, #0x5c]
	movs r2, #2
	ldrsh r1, [r0, r2]
	movs r0, #0xde
	movs r2, #1
	bl sub_805BDC0
	ldr r0, [r4, #0x5c]
	movs r1, #0x5b
	bl sub_804A528
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	ldr r1, _08059B74 @ =0x0201E7C0
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r1, #1
	strh r1, [r0]
	adds r0, r4, #0
	bl Proc_Break
_08059B6E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08059B74: .4byte 0x0201E7C0

	thumb_func_start sub_8059B78
sub_8059B78: @ 0x08059B78
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _08059BA4 @ =0x0201E7C8
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	ldrh r0, [r0]
	cmp r0, #2
	bne _08059BDC
	ldr r0, [r5, #0x5c]
	bl sub_80589C4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08059BA8
	adds r0, r5, #0
	bl Proc_Break
	b _08059BDC
	.align 2, 0
_08059BA4: .4byte 0x0201E7C8
_08059BA8:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0xdd
	bl sub_805BCA8
	ldr r0, [r5, #0x5c]
	movs r2, #2
	ldrsh r1, [r0, r2]
	movs r0, #0xdd
	movs r2, #1
	bl sub_805BDC0
	ldr r0, [r5, #0x5c]
	movs r1, #0x6c
	bl sub_804A528
	ldr r0, [r5, #0x5c]
	movs r1, #0
	bl sub_804B5E0
	ldr r0, [r5, #0x5c]
	bl sub_8059C78
	adds r0, r5, #0
	bl Proc_Break
_08059BDC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8059BE4
sub_8059BE4: @ 0x08059BE4
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	ldr r0, [r6, #0x5c]
	bl sub_80589C4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08059C02
	movs r0, #0x3c
	strh r0, [r6, #0x2c]
	adds r0, r6, #0
	bl Proc_Break
	b _08059C2E
_08059C02:
	ldr r5, [r6, #0x5c]
	ldr r0, [r5, #0x20]
	movs r7, #0x3f
	ldrb r0, [r0, #3]
	ands r7, r0
	cmp r7, #0
	bne _08059C2E
	ldr r4, _08059C34 @ =0x0203CD00
	adds r0, r5, #0
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r0, r5, #0
	bl sub_804A528
	strh r7, [r6, #0x2c]
	adds r0, r6, #0
	bl Proc_Break
_08059C2E:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08059C34: .4byte 0x0203CD00

	thumb_func_start sub_8059C38
sub_8059C38: @ 0x08059C38
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3d
	bne _08059C50
	adds r0, r1, #0
	bl Proc_Break
_08059C50:
	pop {r0}
	bx r0

	thumb_func_start sub_8059C54
sub_8059C54: @ 0x08059C54
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	ldr r1, _08059C74 @ =0x0201E7C0
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r1, #2
	strh r1, [r0]
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08059C74: .4byte 0x0201E7C0

	thumb_func_start sub_8059C78
sub_8059C78: @ 0x08059C78
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08059CD0 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _08059CD4 @ =0x08604888
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x44]
	ldr r0, _08059CD8 @ =0x081BC0FC
	str r0, [r5, #0x48]
	ldr r0, _08059CDC @ =0x086048A0
	str r0, [r5, #0x4c]
	str r0, [r5, #0x50]
	ldr r0, _08059CE0 @ =0x081C864C
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, _08059CE4 @ =0x081C8F38
	movs r1, #0x20
	bl sub_8047AF4
	bl sub_8047500
	ldr r0, _08059CE8 @ =0x0203CD14
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08059CF8
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _08059CEC
	movs r0, #1
	movs r1, #0x18
	b _08059CF0
	.align 2, 0
_08059CD0: .4byte 0x02017744
_08059CD4: .4byte 0x08604888
_08059CD8: .4byte 0x081BC0FC
_08059CDC: .4byte 0x086048A0
_08059CE0: .4byte 0x081C864C
_08059CE4: .4byte 0x081C8F38
_08059CE8: .4byte 0x0203CD14
_08059CEC:
	movs r0, #1
	movs r1, #0xe8
_08059CF0:
	movs r2, #0
	bl SetBgOffset
	b _08059D02
_08059CF8:
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
_08059D02:
	ldr r3, _08059D30 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r2, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08059D30: .4byte gDispIo

	thumb_func_start sub_8059D34
sub_8059D34: @ 0x08059D34
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _08059D62
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl sub_804799C
	b _08059D80
_08059D62:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _08059D80
	bl sub_80474D8
	ldr r1, _08059D88 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	bl sub_80475D8
	adds r0, r4, #0
	bl Proc_Break
_08059D80:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08059D88: .4byte 0x02017744

	thumb_func_start sub_8059D8C
sub_8059D8C: @ 0x08059D8C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	bl sub_804B6C4
	adds r4, r0, #0
	ldr r0, _08059DC4 @ =0x086048D0
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	ldr r0, _08059DC8 @ =0x0201E7AC
	lsls r4, r4, #2
	adds r4, r4, r0
	str r5, [r4]
	adds r0, r6, #0
	bl sub_804B6C4
	ldr r1, _08059DCC @ =0x0201E7C8
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r2, #0
	movs r1, #1
	strh r1, [r0]
	str r6, [r5, #0x5c]
	strh r2, [r5, #0x2c]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08059DC4: .4byte 0x086048D0
_08059DC8: .4byte 0x0201E7AC
_08059DCC: .4byte 0x0201E7C8

	thumb_func_start sub_8059DD0
sub_8059DD0: @ 0x08059DD0
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r0, #8
	str r0, [sp]
	movs r0, #1
	movs r1, #4
	movs r2, #0x10
	bl Interpolate
	bl sub_805B9A4
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bne _08059E00
	adds r0, r4, #0
	bl Proc_Break
_08059E00:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8059E08
sub_8059E08: @ 0x08059E08
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x5c]
	movs r1, #0x74
	bl sub_804A528
	ldr r0, _08059E6C @ =0x02000000
	ldr r3, [r0]
	ldr r4, [r0, #4]
	ldr r2, _08059E70 @ =0x02000020
	ldr r7, _08059E74 @ =0x02000028
	ldrh r1, [r7]
	adds r1, #0x54
	strh r1, [r2]
	ldr r6, _08059E78 @ =0x0201E12C
	ldr r0, [r6]
	subs r1, r1, r0
	strh r1, [r3, #2]
	ldrh r2, [r2]
	subs r0, r2, r0
	strh r0, [r4, #2]
	ldr r0, [r5, #0x5c]
	bl sub_80589C4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _08059E5A
	ldr r0, [r5, #0x5c]
	bl sub_805A77C
	ldr r2, _08059E7C @ =0x0201E7B4
	str r0, [r2]
	ldr r1, [r6]
	subs r1, #0x4e
	ldrh r7, [r7]
	subs r1, r7, r1
	strh r1, [r0, #0x34]
	ldr r1, [r2]
	movs r0, #0x50
	strh r0, [r1, #0x3c]
_08059E5A:
	movs r0, #0
	strh r0, [r5, #0x2c]
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08059E6C: .4byte 0x02000000
_08059E70: .4byte 0x02000020
_08059E74: .4byte 0x02000028
_08059E78: .4byte 0x0201E12C
_08059E7C: .4byte 0x0201E7B4

	thumb_func_start sub_8059E80
sub_8059E80: @ 0x08059E80
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, _08059EFC @ =0x081C1C94
	ldr r1, _08059F00 @ =0x06008000
	bl LZ77UnCompVram
	ldr r0, _08059F04 @ =0x081C5AAC
	ldr r1, _08059F08 @ =0x0201977C
	bl LZ77UnCompWram
	ldr r0, _08059F0C @ =0x001F001F
	bl sub_8047C68
	ldr r0, _08059F10 @ =gBg3Tm
	movs r1, #0x1f
	bl TmFill
	movs r0, #8
	bl EnableBgSync
	ldr r0, _08059F14 @ =0x081C4DE8
	ldr r4, _08059F18 @ =0x020217C8
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r1, _08059F1C @ =0x0201EFCC
	adds r0, r4, #0
	movs r2, #8
	bl CpuFastSet
	movs r1, #0x88
	lsls r1, r1, #2
	adds r0, r4, r1
	ldr r1, _08059F20 @ =0x0201EFEC
	movs r2, #8
	bl CpuFastSet
	adds r0, r4, #0
	subs r0, #0x40
	ldr r1, _08059F24 @ =0x0201F00C
	movs r2, #0x10
	bl CpuFastSet
	movs r0, #0
	str r0, [sp]
	ldr r2, _08059F28 @ =0x01000008
	mov r0, sp
	adds r1, r4, #0
	bl CpuFastSet
	bl EnablePalSync
	adds r0, r5, #0
	bl Proc_Break
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08059EFC: .4byte 0x081C1C94
_08059F00: .4byte 0x06008000
_08059F04: .4byte 0x081C5AAC
_08059F08: .4byte 0x0201977C
_08059F0C: .4byte 0x001F001F
_08059F10: .4byte gBg3Tm
_08059F14: .4byte 0x081C4DE8
_08059F18: .4byte 0x020217C8
_08059F1C: .4byte 0x0201EFCC
_08059F20: .4byte 0x0201EFEC
_08059F24: .4byte 0x0201F00C
_08059F28: .4byte 0x01000008

	thumb_func_start sub_8059F2C
sub_8059F2C: @ 0x08059F2C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r0, _08059F4C @ =0x0201E7B4
	ldr r5, [r0]
	ldr r0, [r6, #0x5c]
	bl sub_80589C4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08059F50
	adds r0, r6, #0
	bl Proc_Break
	b _08059FE4
	.align 2, 0
_08059F4C: .4byte 0x0201E7B4
_08059F50:
	movs r0, #0x34
	ldrsh r2, [r5, r0]
	adds r1, r2, #0
	adds r1, #0x30
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r4, #0x10
	str r4, [sp]
	movs r0, #1
	bl Interpolate
	strh r0, [r5, #0x32]
	movs r1, #0x3c
	ldrsh r2, [r5, r1]
	adds r1, r2, #0
	subs r1, #0x80
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	str r4, [sp]
	movs r0, #1
	bl Interpolate
	strh r0, [r5, #0x3a]
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x11
	bne _08059FE4
	ldr r0, _08059FEC @ =0x0201EFCC
	ldr r4, _08059FF0 @ =0x020217C8
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r0, _08059FF4 @ =0x0201EFEC
	movs r1, #0x88
	lsls r1, r1, #2
	adds r4, r4, r1
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r0, _08059FF8 @ =0x081C4E28
	bl sub_8058FA8
	ldr r0, [r6, #0x5c]
	movs r1, #3
	movs r2, #0x64
	bl sub_804685C
	ldr r4, _08059FFC @ =0x0000013F
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r4, #0
	bl sub_805BCA8
	ldr r0, [r6, #0x5c]
	movs r2, #2
	ldrsh r1, [r0, r2]
	adds r0, r4, #0
	movs r2, #1
	bl sub_805BDC0
	movs r0, #6
	bl sub_8046010
	adds r5, r0, #0
	movs r0, #0x72
	strh r0, [r5, #0x3c]
	adds r0, r6, #0
	bl Proc_Break
_08059FE4:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08059FEC: .4byte 0x0201EFCC
_08059FF0: .4byte 0x020217C8
_08059FF4: .4byte 0x0201EFEC
_08059FF8: .4byte 0x081C4E28
_08059FFC: .4byte 0x0000013F

	thumb_func_start sub_805A000
sub_805A000: @ 0x0805A000
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_80589C4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0805A028
	ldr r0, [r4, #0x5c]
	bl sub_805A410
	str r0, [r4, #0x64]
	adds r0, r4, #0
	bl Proc_Break
	b _0805A096
_0805A028:
	ldr r5, _0805A0A4 @ =0x0201E7B4
	ldr r1, [r5]
	ldr r0, _0805A0A8 @ =0x02000028
	mov r8, r0
	ldr r2, _0805A0AC @ =0x0201E12C
	mov sb, r2
	ldr r0, [r2]
	subs r0, #0x4e
	mov r3, r8
	ldrh r3, [r3]
	subs r0, r3, r0
	strh r0, [r1, #0x32]
	ldr r0, [r5]
	movs r6, #0x50
	strh r6, [r0, #0x3a]
	ldr r2, _0805A0B0 @ =0x02017758
	ldrh r3, [r2]
	ldr r0, _0805A0B4 @ =0x00007FFF
	cmp r3, r0
	beq _0805A062
	ldr r1, [r5]
	ldrh r7, [r1, #0x32]
	adds r0, r3, r7
	strh r0, [r1, #0x32]
	ldr r1, [r5]
	ldrh r3, [r1, #0x3a]
	ldrh r2, [r2, #2]
	adds r0, r3, r2
	strh r0, [r1, #0x3a]
_0805A062:
	ldr r0, _0805A0B8 @ =0x02017734
	ldr r0, [r0]
	cmp r0, #0
	bne _0805A096
	movs r0, #3
	movs r1, #0
	movs r2, #0x82
	bl SetBgOffset
	ldr r1, [r5]
	mov r7, sb
	ldr r0, [r7]
	subs r0, #0x4e
	mov r2, r8
	ldrh r2, [r2]
	subs r0, r2, r0
	strh r0, [r1, #0x32]
	ldr r0, [r5]
	strh r6, [r0, #0x3a]
	ldr r0, [r4, #0x5c]
	bl sub_805A410
	str r0, [r4, #0x64]
	adds r0, r4, #0
	bl Proc_Break
_0805A096:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805A0A4: .4byte 0x0201E7B4
_0805A0A8: .4byte 0x02000028
_0805A0AC: .4byte 0x0201E12C
_0805A0B0: .4byte 0x02017758
_0805A0B4: .4byte 0x00007FFF
_0805A0B8: .4byte 0x02017734

	thumb_func_start sub_805A0BC
sub_805A0BC: @ 0x0805A0BC
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x64]
	adds r5, r0, #0
	adds r5, #0x29
	ldrb r0, [r5]
	cmp r0, #1
	bne _0805A132
	ldr r0, [r4, #0x5c]
	bl sub_80589C4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0805A0E2
	adds r0, r4, #0
	bl Proc_Break
	b _0805A132
_0805A0E2:
	movs r1, #0
	movs r0, #2
	strb r0, [r5]
	strh r1, [r4, #0x2c]
	ldr r0, [r4, #0x5c]
	bl sub_805A598
	str r0, [r4, #0x64]
	ldr r0, [r4, #0x5c]
	bl sub_805A7EC
	adds r1, r0, #0
	ldr r0, _0805A10C @ =0x0201E7B4
	str r1, [r0, #4]
	ldr r0, _0805A110 @ =0x0203CD14
	movs r2, #0
	ldrsh r0, [r0, r2]
	cmp r0, #0
	bne _0805A114
	movs r0, #0x54
	b _0805A116
	.align 2, 0
_0805A10C: .4byte 0x0201E7B4
_0805A110: .4byte 0x0203CD14
_0805A114:
	movs r0, #0x34
_0805A116:
	strh r0, [r1, #0x32]
	ldr r0, _0805A138 @ =0x0201E7B4
	ldr r1, [r0, #4]
	ldr r0, _0805A13C @ =0x0000FFF5
	strh r0, [r1, #0x3a]
	movs r0, #0xa2
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	bl sub_805BCA8
	adds r0, r4, #0
	bl Proc_Break
_0805A132:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805A138: .4byte 0x0201E7B4
_0805A13C: .4byte 0x0000FFF5

	thumb_func_start sub_805A140
sub_805A140: @ 0x0805A140
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r5, r0, #0
	ldr r7, [r5, #0x64]
	ldr r6, _0805A198 @ =0x0201E7B4
	ldr r0, [r6]
	mov r8, r0
	ldr r1, [r6, #4]
	mov sb, r1
	ldr r0, [r5, #0x5c]
	bl sub_80589C4
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #1
	bne _0805A1A8
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	bl sub_804B8E8
	ldr r0, _0805A19C @ =0x0201EFCC
	ldr r1, _0805A1A0 @ =0x020217C8
	movs r2, #8
	bl CpuFastSet
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	ldr r1, _0805A1A4 @ =0x0201E7C0
	lsls r0, r0, #1
	adds r0, r0, r1
	strh r4, [r0]
	ldr r0, [r5, #0x5c]
	bl sub_805A858
	adds r0, r5, #0
	bl Proc_Break
	b _0805A216
	.align 2, 0
_0805A198: .4byte 0x0201E7B4
_0805A19C: .4byte 0x0201EFCC
_0805A1A0: .4byte 0x020217C8
_0805A1A4: .4byte 0x0201E7C0
_0805A1A8:
	movs r2, #0x2c
	ldrsh r3, [r5, r2]
	movs r0, #0x90
	lsls r0, r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x72
	bl Interpolate
	rsbs r1, r0, #0
	adds r1, #0x82
	strh r1, [r7, #0x3a]
	adds r1, r0, #0
	adds r1, #0x50
	mov r2, r8
	strh r1, [r2, #0x3a]
	subs r0, #0xb
	mov r1, sb
	strh r0, [r1, #0x3a]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xff
	bne _0805A216
	adds r0, r7, #0
	adds r0, #0x29
	movs r4, #1
	strb r4, [r0]
	ldr r0, [r6]
	adds r0, #0x29
	strb r4, [r0]
	ldr r0, [r6, #4]
	adds r0, #0x29
	strb r4, [r0]
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	bl sub_804B8E8
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	ldr r1, _0805A224 @ =0x0201E7C0
	lsls r0, r0, #1
	adds r0, r0, r1
	strh r4, [r0]
	ldr r0, [r5, #0x5c]
	bl sub_805A858
	adds r0, r5, #0
	bl Proc_Break
_0805A216:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805A224: .4byte 0x0201E7C0

	thumb_func_start sub_805A228
sub_805A228: @ 0x0805A228
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _0805A268 @ =0x0201E7C8
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	ldrh r0, [r0]
	cmp r0, #2
	bne _0805A262
	bl sub_805A894
	ldr r4, _0805A26C @ =0x0201E7C4
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	ldrh r0, [r0]
	cmp r0, #1
	bne _0805A25C
	ldr r0, [r5, #0x5c]
	bl sub_805AB5C
	str r0, [r5, #0x64]
_0805A25C:
	adds r0, r5, #0
	bl Proc_Break
_0805A262:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805A268: .4byte 0x0201E7C8
_0805A26C: .4byte 0x0201E7C4

	thumb_func_start sub_805A270
sub_805A270: @ 0x0805A270
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r6, [r5, #0x64]
	ldr r4, _0805A29C @ =0x0201E7C4
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	ldrh r0, [r0]
	cmp r0, #0
	bne _0805A2A0
	ldr r0, [r5, #0x5c]
	movs r1, #1
	movs r2, #0x20
	bl sub_805A658
	str r0, [r5, #0x64]
	adds r0, r5, #0
	bl Proc_Break
	b _0805A2B4
	.align 2, 0
_0805A29C: .4byte 0x0201E7C4
_0805A2A0:
	adds r1, r6, #0
	adds r1, #0x29
	ldrb r0, [r1]
	cmp r0, #1
	bne _0805A2B4
	movs r0, #2
	strb r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
_0805A2B4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805A2BC
sub_805A2BC: @ 0x0805A2BC
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r6, [r5, #0x64]
	ldr r4, _0805A2E0 @ =0x0201E7C4
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	ldrh r0, [r0]
	cmp r0, #1
	bne _0805A2E4
	ldr r0, [r5, #0x5c]
	bl sub_805A4C8
	str r0, [r5, #0x64]
	b _0805A30E
	.align 2, 0
_0805A2E0: .4byte 0x0201E7C4
_0805A2E4:
	ldr r0, [r5, #0x5c]
	bl sub_80589C4
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0805A316
	adds r1, r6, #0
	adds r1, #0x29
	ldrb r0, [r1]
	cmp r0, #1
	bne _0805A352
	movs r0, #2
	strb r0, [r1]
	ldr r0, [r5, #0x5c]
	bl sub_805A4C8
	str r0, [r5, #0x64]
	movs r0, #0x10
	bl sub_805B9A4
_0805A30E:
	adds r0, r5, #0
	bl Proc_Break
	b _0805A352
_0805A316:
	adds r1, r6, #0
	adds r1, #0x29
	ldrb r0, [r1]
	cmp r0, #1
	bne _0805A352
	movs r4, #0
	movs r0, #2
	strb r0, [r1]
	ldr r0, [r5, #0x5c]
	bl sub_805A4C8
	str r0, [r5, #0x64]
	movs r0, #0x10
	bl sub_805B9A4
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	ldr r1, _0805A358 @ =0x0203CCF8
	lsls r0, r0, #1
	adds r0, r0, r1
	strh r4, [r0]
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	bl sub_804B8B0
	adds r0, r5, #0
	bl Proc_Break
_0805A352:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805A358: .4byte 0x0203CCF8

	thumb_func_start sub_805A35C
sub_805A35C: @ 0x0805A35C
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x64]
	adds r1, r0, #0
	adds r1, #0x29
	ldrb r0, [r1]
	cmp r0, #1
	bne _0805A38A
	movs r4, #0
	movs r0, #2
	strb r0, [r1]
	ldr r0, _0805A390 @ =gBg3Tm
	movs r1, #0xf0
	lsls r1, r1, #8
	bl TmFill
	movs r0, #8
	bl EnableBgSync
	strh r4, [r5, #0x2c]
	adds r0, r5, #0
	bl Proc_Break
_0805A38A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805A390: .4byte gBg3Tm

	thumb_func_start sub_805A394
sub_805A394: @ 0x0805A394
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _0805A3B2
	ldr r0, _0805A3E8 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl ApplyChapterMapGraphics
	bl RenderMap
_0805A3B2:
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r0, #8
	str r0, [sp]
	movs r0, #4
	movs r1, #0x10
	movs r2, #4
	bl Interpolate
	bl sub_805B9A4
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bne _0805A3E0
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
_0805A3E0:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805A3E8: .4byte gPlaySt

	thumb_func_start sub_805A3EC
sub_805A3EC: @ 0x0805A3EC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B6C4
	ldr r1, _0805A40C @ =0x0201E7C0
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r1, #2
	strh r1, [r0]
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805A40C: .4byte 0x0201E7C0

	thumb_func_start sub_805A410
sub_805A410: @ 0x0805A410
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0805A430 @ =0x08604948
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	adds r2, r0, #0
	adds r2, #0x29
	movs r1, #0
	strb r1, [r2]
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0805A430: .4byte 0x08604948

	thumb_func_start sub_805A434
sub_805A434: @ 0x0805A434
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r0, #8
	str r0, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r5, r0, #0
	ldr r0, _0805A4A8 @ =0x0201F00C
	ldr r4, _0805A4AC @ =0x02021788
	adds r1, r4, #0
	movs r2, #0x10
	bl CpuFastSet
	subs r4, #0x80
	adds r0, r4, #0
	movs r1, #4
	movs r2, #2
	adds r3, r5, #0
	bl sub_805B5C8
	bl EnablePalSync
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	movs r2, #0
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bne _0805A4A0
	strh r2, [r6, #0x2c]
	adds r1, r6, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	ldr r0, _0805A4B0 @ =0x02022DC8
	str r2, [sp]
	movs r1, #0x1e
	movs r2, #5
	movs r3, #0
	bl sub_805B094
	movs r0, #4
	bl EnableBgSync
	adds r0, r6, #0
	bl Proc_Break
_0805A4A0:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805A4A8: .4byte 0x0201F00C
_0805A4AC: .4byte 0x02021788
_0805A4B0: .4byte 0x02022DC8

	thumb_func_start sub_805A4B4
sub_805A4B4: @ 0x0805A4B4
	push {lr}
	adds r1, r0, #0
	adds r1, #0x29
	ldrb r1, [r1]
	cmp r1, #2
	bne _0805A4C4
	bl Proc_Break
_0805A4C4:
	pop {r0}
	bx r0

	thumb_func_start sub_805A4C8
sub_805A4C8: @ 0x0805A4C8
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _0805A50C @ =0x08604968
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	strh r0, [r5, #0x2c]
	ldr r0, _0805A510 @ =0x0201E0FC
	bl sub_804BF40
	ldr r4, _0805A514 @ =0x02021788
	ldr r1, _0805A518 @ =0x0201F00C
	adds r0, r4, #0
	movs r2, #0x10
	bl CpuFastSet
	subs r4, #0x80
	adds r0, r4, #0
	movs r1, #4
	movs r2, #2
	movs r3, #0x10
	bl sub_805B5C8
	adds r0, r5, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0805A50C: .4byte 0x08604968
_0805A510: .4byte 0x0201E0FC
_0805A514: .4byte 0x02021788
_0805A518: .4byte 0x0201F00C

	thumb_func_start sub_805A51C
sub_805A51C: @ 0x0805A51C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r0, #8
	str r0, [sp]
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r5, r0, #0
	ldr r0, _0805A57C @ =0x0201F00C
	ldr r4, _0805A580 @ =0x02021788
	adds r1, r4, #0
	movs r2, #0x10
	bl CpuFastSet
	subs r4, #0x80
	adds r0, r4, #0
	movs r1, #4
	movs r2, #2
	adds r3, r5, #0
	bl sub_805B5C8
	bl EnablePalSync
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #9
	bne _0805A574
	movs r0, #0
	strh r0, [r6, #0x2c]
	adds r1, r6, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	adds r0, r6, #0
	bl Proc_Break
_0805A574:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805A57C: .4byte 0x0201F00C
_0805A580: .4byte 0x02021788

	thumb_func_start sub_805A584
sub_805A584: @ 0x0805A584
	push {lr}
	adds r1, r0, #0
	adds r1, #0x29
	ldrb r1, [r1]
	cmp r1, #2
	bne _0805A594
	bl Proc_Break
_0805A594:
	pop {r0}
	bx r0

	thumb_func_start sub_805A598
sub_805A598: @ 0x0805A598
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0805A5C0 @ =0x08604988
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r3, #0
	movs r2, #0
	strh r2, [r0, #0x32]
	strh r2, [r0, #0x3a]
	movs r1, #9
	strh r1, [r0, #0x2c]
	strh r2, [r0, #0x2e]
	adds r1, r0, #0
	adds r1, #0x29
	strb r3, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0805A5C0: .4byte 0x08604988

	thumb_func_start sub_805A5C4
sub_805A5C4: @ 0x0805A5C4
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xa
	bne _0805A616
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _0805A5EC
	ldr r0, _0805A5E8 @ =0x081C4E28
	bl sub_8058FA8
	b _0805A602
	.align 2, 0
_0805A5E8: .4byte 0x081C4E28
_0805A5EC:
	cmp r0, #1
	bne _0805A5FC
	ldr r0, _0805A5F8 @ =0x081C5264
	bl sub_8058FA8
	b _0805A602
	.align 2, 0
_0805A5F8: .4byte 0x081C5264
_0805A5FC:
	ldr r0, _0805A638 @ =0x081C5688
	bl sub_8058FA8
_0805A602:
	movs r1, #0
	strh r1, [r4, #0x2c]
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #3
	bne _0805A616
	strh r1, [r4, #0x2e]
_0805A616:
	ldrh r1, [r4, #0x32]
	ldrh r2, [r4, #0x3a]
	movs r0, #3
	bl SetBgOffset
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	bne _0805A630
	adds r0, r4, #0
	bl Proc_Break
_0805A630:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805A638: .4byte 0x081C5688

	thumb_func_start sub_805A63C
sub_805A63C: @ 0x0805A63C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r1, [r4, #0x32]
	ldrh r2, [r4, #0x3a]
	movs r0, #3
	bl SetBgOffset
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805A658
sub_805A658: @ 0x0805A658
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r4, r0, #0
	mov r8, r1
	adds r6, r2, #0
	ldr r0, _0805A6A8 @ =0x086049A8
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	strh r0, [r5, #0x2c]
	strh r6, [r5, #0x2e]
	mov r0, r8
	strh r0, [r5, #0x30]
	ldr r4, _0805A6AC @ =0x020217C8
	ldr r1, _0805A6B0 @ =0x0201EFCC
	adds r0, r4, #0
	movs r2, #8
	bl CpuFastSet
	movs r0, #0x88
	lsls r0, r0, #2
	adds r4, r4, r0
	ldr r1, _0805A6B4 @ =0x0201EFEC
	adds r0, r4, #0
	movs r2, #8
	bl CpuFastSet
	adds r0, r5, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0805A6A8: .4byte 0x086049A8
_0805A6AC: .4byte 0x020217C8
_0805A6B0: .4byte 0x0201EFCC
_0805A6B4: .4byte 0x0201EFEC

	thumb_func_start sub_805A6B8
sub_805A6B8: @ 0x0805A6B8
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	ldrh r3, [r2, #0x30]
	lsls r1, r3, #0x10
	cmp r0, r1
	bne _0805A6D6
	movs r0, #0
	strh r0, [r2, #0x2c]
	adds r0, r2, #0
	bl Proc_Break
_0805A6D6:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805A6DC
sub_805A6DC: @ 0x0805A6DC
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r6, r0]
	movs r1, #0x2e
	ldrsh r0, [r6, r1]
	str r0, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r5, r0, #0
	ldr r0, _0805A75C @ =0x0201EFCC
	ldr r4, _0805A760 @ =0x020217C8
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r0, _0805A764 @ =0x0201EFEC
	movs r2, #0x88
	lsls r2, r2, #2
	adds r1, r4, r2
	movs r2, #8
	bl CpuFastSet
	subs r4, #0xc0
	adds r0, r4, #0
	movs r1, #6
	movs r2, #1
	adds r3, r5, #0
	bl sub_805B5C8
	adds r0, r4, #0
	movs r1, #0x17
	movs r2, #1
	adds r3, r5, #0
	bl sub_805B5C8
	bl EnablePalSync
	ldrh r1, [r6, #0x2c]
	adds r1, #1
	strh r1, [r6, #0x2c]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r2, #0x2e
	ldrsh r0, [r6, r2]
	adds r0, #1
	cmp r1, r0
	bne _0805A752
	adds r1, r6, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	adds r0, r6, #0
	bl Proc_Break
_0805A752:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805A75C: .4byte 0x0201EFCC
_0805A760: .4byte 0x020217C8
_0805A764: .4byte 0x0201EFEC

	thumb_func_start sub_805A768
sub_805A768: @ 0x0805A768
	push {lr}
	adds r1, r0, #0
	adds r1, #0x29
	ldrb r1, [r1]
	cmp r1, #2
	bne _0805A778
	bl Proc_Break
_0805A778:
	pop {r0}
	bx r0

	thumb_func_start sub_805A77C
sub_805A77C: @ 0x0805A77C
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _0805A7B8 @ =0x086049D0
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	ldr r0, _0805A7BC @ =0x08605A50
	movs r1, #0x78
	bl BasCreate
	movs r2, #0
	movs r1, #0xf4
	lsls r1, r1, #7
	strh r1, [r0, #8]
	movs r1, #0xc0
	lsls r1, r1, #1
	strh r1, [r4, #0x32]
	strh r1, [r0, #2]
	strh r1, [r4, #0x3a]
	strh r1, [r0, #4]
	str r0, [r4, #0x60]
	adds r0, r4, #0
	adds r0, #0x29
	strb r2, [r0]
	adds r0, r4, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0805A7B8: .4byte 0x086049D0
_0805A7BC: .4byte 0x08605A50

	thumb_func_start sub_805A7C0
sub_805A7C0: @ 0x0805A7C0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x60]
	ldrh r1, [r4, #0x32]
	strh r1, [r0, #2]
	ldrh r1, [r4, #0x3a]
	strh r1, [r0, #4]
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	bne _0805A7E4
	ldr r0, [r4, #0x60]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
_0805A7E4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805A7EC
sub_805A7EC: @ 0x0805A7EC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _0805A824 @ =0x086049E8
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	ldr r0, _0805A828 @ =0x08605A70
	movs r1, #0x78
	bl BasCreate
	movs r2, #0
	movs r1, #0xf4
	lsls r1, r1, #7
	strh r1, [r0, #8]
	movs r1, #0xc0
	lsls r1, r1, #1
	strh r1, [r0, #2]
	strh r1, [r0, #4]
	str r0, [r4, #0x60]
	adds r0, r4, #0
	adds r0, #0x29
	strb r2, [r0]
	adds r0, r4, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0805A824: .4byte 0x086049E8
_0805A828: .4byte 0x08605A70

	thumb_func_start sub_805A82C
sub_805A82C: @ 0x0805A82C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x60]
	ldrh r1, [r4, #0x32]
	strh r1, [r0, #2]
	ldrh r1, [r4, #0x3a]
	strh r1, [r0, #4]
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	bne _0805A850
	ldr r0, [r4, #0x60]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
_0805A850:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805A858
sub_805A858: @ 0x0805A858
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0805A884 @ =0x08604A00
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	str r1, [r0, #0x44]
	ldr r1, _0805A888 @ =0x081BC132
	str r1, [r0, #0x48]
	ldr r1, _0805A88C @ =0x08604A18
	str r1, [r0, #0x4c]
	ldrb r1, [r4, #0x12]
	str r1, [r0, #0x54]
	ldr r1, _0805A890 @ =0x0201E7BC
	str r0, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0805A884: .4byte 0x08604A00
_0805A888: .4byte 0x081BC132
_0805A88C: .4byte 0x08604A18
_0805A890: .4byte 0x0201E7BC

	thumb_func_start sub_805A894
sub_805A894: @ 0x0805A894
	push {r4, lr}
	ldr r4, _0805A8AC @ =0x0201E7BC
	ldr r0, [r4]
	cmp r0, #0
	beq _0805A8A6
	bl Proc_End
	movs r0, #0
	str r0, [r4]
_0805A8A6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805A8AC: .4byte 0x0201E7BC

	thumb_func_start sub_805A8B0
sub_805A8B0: @ 0x0805A8B0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	ldrb r1, [r0, #0x12]
	ldr r0, [r4, #0x54]
	cmp r0, r1
	beq _0805A930
	str r1, [r4, #0x54]
	movs r0, #0
	strh r0, [r4, #0x2c]
	strh r0, [r4, #0x2e]
	str r0, [r4, #0x44]
	cmp r1, #9
	bhi _0805A930
	lsls r0, r1, #2
	ldr r1, _0805A8D8 @ =_0805A8DC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0805A8D8: .4byte _0805A8DC
_0805A8DC: @ jump table
	.4byte _0805A904 @ case 0
	.4byte _0805A91C @ case 1
	.4byte _0805A90C @ case 2
	.4byte _0805A914 @ case 3
	.4byte _0805A92C @ case 4
	.4byte _0805A92C @ case 5
	.4byte _0805A92C @ case 6
	.4byte _0805A92C @ case 7
	.4byte _0805A92C @ case 8
	.4byte _0805A904 @ case 9
_0805A904:
	ldr r0, _0805A908 @ =0x081BC140
	b _0805A92E
	.align 2, 0
_0805A908: .4byte 0x081BC140
_0805A90C:
	ldr r0, _0805A910 @ =0x081BC15E
	b _0805A92E
	.align 2, 0
_0805A910: .4byte 0x081BC15E
_0805A914:
	ldr r0, _0805A918 @ =0x081BC17C
	b _0805A92E
	.align 2, 0
_0805A918: .4byte 0x081BC17C
_0805A91C:
	ldr r0, _0805A928 @ =0x081BC19A
	str r0, [r4, #0x48]
	ldr r0, [r4, #0x5c]
	bl sub_8057B90
	b _0805A930
	.align 2, 0
_0805A928: .4byte 0x081BC19A
_0805A92C:
	ldr r0, _0805A954 @ =0x081BC132
_0805A92E:
	str r0, [r4, #0x48]
_0805A930:
	adds r0, r4, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #0
	blt _0805A958
	ldr r0, [r4, #0x4c]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	bl sub_8059018
	b _0805A992
	.align 2, 0
_0805A954: .4byte 0x081BC132
_0805A958:
	movs r0, #4
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0805A992
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _0805A97E
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	movs r1, #8
	ldrh r0, [r0, #0x10]
	ands r1, r0
	cmp r1, #0
	beq _0805A992
	movs r0, #1
	strh r0, [r4, #0x2e]
	b _0805A992
_0805A97E:
	bl sub_80449C4
	cmp r0, #1
	bne _0805A992
	movs r0, #0
	strh r0, [r4, #0x2c]
	strh r0, [r4, #0x2e]
	ldr r0, [r4, #0x44]
	adds r0, #1
	str r0, [r4, #0x44]
_0805A992:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_805A998
sub_805A998: @ 0x0805A998
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _0805A9E4 @ =0x08604A3C
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	strh r0, [r5, #0x2c]
	movs r0, #0x10
	strh r0, [r5, #0x2e]
	ldr r4, _0805A9E8 @ =0x020217C8
	ldr r1, _0805A9EC @ =0x0201EFCC
	adds r0, r4, #0
	movs r2, #8
	bl CpuFastSet
	movs r0, #0x88
	lsls r0, r0, #2
	adds r4, r4, r0
	ldr r1, _0805A9F0 @ =0x0201EFEC
	adds r0, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r0, _0805A9F4 @ =0x00000143
	movs r1, #0x80
	lsls r1, r1, #1
	bl sub_805BCA8
	adds r0, r5, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0805A9E4: .4byte 0x08604A3C
_0805A9E8: .4byte 0x020217C8
_0805A9EC: .4byte 0x0201EFCC
_0805A9F0: .4byte 0x0201EFEC
_0805A9F4: .4byte 0x00000143

	thumb_func_start sub_805A9F8
sub_805A9F8: @ 0x0805A9F8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r7, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r7, r0]
	movs r1, #0x2e
	ldrsh r0, [r7, r1]
	str r0, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	mov r8, r0
	ldr r0, _0805AA90 @ =0x0201EFCC
	ldr r4, _0805AA94 @ =0x020217C8
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r6, _0805AA98 @ =0x0201EFEC
	movs r2, #0x88
	lsls r2, r2, #2
	adds r1, r4, r2
	adds r0, r6, #0
	movs r2, #8
	bl CpuFastSet
	adds r5, r4, #0
	subs r5, #0xc0
	adds r0, r5, #0
	movs r1, #6
	movs r2, #1
	mov r3, r8
	bl sub_805B5C8
	adds r0, r5, #0
	movs r1, #0x17
	movs r2, #1
	mov r3, r8
	bl sub_805B5C8
	movs r0, #0x8f
	lsls r0, r0, #2
	adds r1, r4, r0
	ldrh r0, [r6, #0x1c]
	strh r0, [r1]
	ldr r1, _0805AA9C @ =0x0000023E
	adds r4, r4, r1
	ldrh r0, [r6, #0x1e]
	strh r0, [r4]
	bl EnablePalSync
	ldrh r1, [r7, #0x2c]
	adds r1, #1
	strh r1, [r7, #0x2c]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r2, #0x2e
	ldrsh r0, [r7, r2]
	adds r0, #1
	cmp r1, r0
	bne _0805AA84
	movs r0, #0
	strh r0, [r7, #0x2c]
	adds r0, r7, #0
	bl Proc_Break
_0805AA84:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805AA90: .4byte 0x0201EFCC
_0805AA94: .4byte 0x020217C8
_0805AA98: .4byte 0x0201EFEC
_0805AA9C: .4byte 0x0000023E

	thumb_func_start sub_805AAA0
sub_805AAA0: @ 0x0805AAA0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r7, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r7, r0]
	movs r1, #0x2e
	ldrsh r0, [r7, r1]
	str r0, [sp]
	movs r0, #1
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	mov r8, r0
	ldr r0, _0805AB40 @ =0x0201EFCC
	ldr r4, _0805AB44 @ =0x020217C8
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r6, _0805AB48 @ =0x0201EFEC
	movs r2, #0x88
	lsls r2, r2, #2
	adds r1, r4, r2
	adds r0, r6, #0
	movs r2, #8
	bl CpuFastSet
	adds r5, r4, #0
	subs r5, #0xc0
	adds r0, r5, #0
	movs r1, #6
	movs r2, #1
	mov r3, r8
	bl sub_805B5C8
	adds r0, r5, #0
	movs r1, #0x17
	movs r2, #1
	mov r3, r8
	bl sub_805B5C8
	movs r0, #0x8f
	lsls r0, r0, #2
	adds r1, r4, r0
	ldrh r0, [r6, #0x1c]
	strh r0, [r1]
	ldr r1, _0805AB4C @ =0x0000023E
	adds r4, r4, r1
	ldrh r0, [r6, #0x1e]
	strh r0, [r4]
	bl EnablePalSync
	ldrh r1, [r7, #0x2c]
	adds r1, #1
	strh r1, [r7, #0x2c]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r2, #0x2e
	ldrsh r0, [r7, r2]
	adds r0, #1
	cmp r1, r0
	bne _0805AB34
	movs r0, #0
	strh r0, [r7, #0x2c]
	adds r1, r7, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	adds r0, r7, #0
	bl Proc_Break
_0805AB34:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805AB40: .4byte 0x0201EFCC
_0805AB44: .4byte 0x020217C8
_0805AB48: .4byte 0x0201EFEC
_0805AB4C: .4byte 0x0000023E

	thumb_func_start sub_805AB50
sub_805AB50: @ 0x0805AB50
	push {lr}
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805AB5C
sub_805AB5C: @ 0x0805AB5C
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r4, r0, #0
	ldr r0, _0805ABB0 @ =0x08604A6C
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	adds r0, #0x29
	movs r4, #0
	strb r4, [r0]
	strh r4, [r5, #0x2c]
	ldr r0, _0805ABB4 @ =0x081C4E28
	ldr r6, _0805ABB8 @ =0x0201977C
	adds r1, r6, #0
	bl LZ77UnCompWram
	movs r1, #1
	rsbs r1, r1, #0
	ldr r2, _0805ABBC @ =gBg3Tm
	movs r0, #0x1e
	str r0, [sp]
	str r0, [sp, #4]
	movs r0, #6
	str r0, [sp, #8]
	str r4, [sp, #0xc]
	adds r0, r6, #0
	movs r3, #0x20
	bl sub_805B20C
	ldr r0, [r5, #0x5c]
	movs r1, #0x64
	movs r2, #0xc8
	bl sub_805A658
	str r0, [r5, #0x60]
	adds r0, r5, #0
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0805ABB0: .4byte 0x08604A6C
_0805ABB4: .4byte 0x081C4E28
_0805ABB8: .4byte 0x0201977C
_0805ABBC: .4byte gBg3Tm

	thumb_func_start sub_805ABC0
sub_805ABC0: @ 0x0805ABC0
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805ABE8
	ldr r0, [r4, #0x5c]
	movs r1, #3
	movs r2, #2
	movs r3, #3
	bl sub_805AE1C
	ldr r0, _0805AC50 @ =0x00000147
	movs r1, #0x80
	lsls r1, r1, #1
	bl sub_805BCA8
_0805ABE8:
	ldrh r0, [r4, #0x2c]
	cmp r0, #0x23
	bne _0805AC04
	ldr r0, [r4, #0x5c]
	movs r1, #3
	movs r2, #2
	movs r3, #3
	bl sub_805AE1C
	ldr r0, _0805AC50 @ =0x00000147
	movs r1, #0x80
	lsls r1, r1, #1
	bl sub_805BCA8
_0805AC04:
	ldrh r0, [r4, #0x2c]
	cmp r0, #0x32
	bne _0805AC20
	ldr r0, [r4, #0x5c]
	movs r1, #3
	movs r2, #2
	movs r3, #3
	bl sub_805AE1C
	ldr r0, _0805AC50 @ =0x00000147
	movs r1, #0x80
	lsls r1, r1, #1
	bl sub_805BCA8
_0805AC20:
	ldrh r0, [r4, #0x2c]
	cmp r0, #0x64
	bne _0805AC48
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x96
	lsls r0, r0, #1
	strh r0, [r4, #0x2e]
	adds r0, #0x19
	bl sub_805BD54
	movs r0, #0xa3
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	bl sub_805BCA8
	adds r0, r4, #0
	bl Proc_Break
_0805AC48:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805AC50: .4byte 0x00000147

	thumb_func_start sub_805AC54
sub_805AC54: @ 0x0805AC54
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	adds r7, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r7, r0]
	movs r1, #0x2e
	ldrsh r0, [r7, r1]
	str r0, [sp]
	movs r0, #1
	movs r1, #0
	movs r2, #0xa0
	bl Interpolate
	adds r6, r0, #0
	rsbs r4, r6, #0
	adds r4, #0xf0
	movs r0, #0xff
	ands r4, r0
	asrs r4, r4, #3
	movs r2, #0x20
	subs r2, r2, r6
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #3
	movs r1, #0
	bl SetBgOffset
	add r1, sp, #4
	movs r0, #0x1f
	strh r0, [r1]
	lsls r4, r4, #6
	ldr r0, _0805ADBC @ =gBg3Tm
	adds r4, r4, r0
	ldr r2, _0805ADC0 @ =0x01000020
	adds r0, r1, #0
	adds r1, r4, #0
	bl CpuSet
	movs r0, #8
	bl EnableBgSync
	ldr r0, _0805ADC4 @ =0x02000000
	ldr r4, [r0]
	ldr r5, [r0, #4]
	ldr r3, _0805ADC8 @ =0x02000020
	ldr r0, _0805ADCC @ =0x0201E12C
	ldr r1, [r0]
	ldrh r2, [r3]
	subs r0, r2, r1
	movs r2, #0
	mov r8, r2
	strh r0, [r4, #2]
	ldr r2, _0805ADD0 @ =0x02000024
	ldrh r0, [r2]
	adds r0, r0, r6
	strh r0, [r4, #4]
	ldrh r3, [r3]
	subs r1, r3, r1
	strh r1, [r5, #2]
	ldrh r2, [r2]
	adds r6, r2, r6
	strh r6, [r5, #4]
	ldr r1, _0805ADD4 @ =gDispIo
	ldr r3, _0805ADD8 @ =0x02017758
	ldrh r2, [r3]
	ldrh r6, [r1, #0x28]
	adds r0, r2, r6
	strh r0, [r1, #0x28]
	ldrh r0, [r1, #0x2a]
	ldrh r6, [r3, #2]
	adds r0, r0, r6
	strh r0, [r1, #0x2a]
	ldrh r0, [r4, #2]
	subs r2, r0, r2
	strh r2, [r4, #2]
	ldrh r1, [r4, #4]
	ldrh r2, [r3, #2]
	subs r0, r1, r2
	strh r0, [r4, #4]
	ldrh r6, [r5, #2]
	ldrh r1, [r3]
	subs r0, r6, r1
	strh r0, [r5, #2]
	ldrh r2, [r5, #4]
	ldrh r3, [r3, #2]
	subs r0, r2, r3
	strh r0, [r5, #4]
	ldrh r0, [r7, #0x2c]
	adds r0, #1
	strh r0, [r7, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805AD1E
	movs r0, #8
	movs r1, #0
	bl sub_8045F48
	str r0, [r7, #0x5c]
_0805AD1E:
	ldrh r6, [r7, #0x2c]
	cmp r6, #0x3c
	bne _0805AD34
	ldr r0, [r7, #0x5c]
	bl Proc_End
	movs r0, #9
	movs r1, #0
	bl sub_8045F48
	str r0, [r7, #0x5c]
_0805AD34:
	ldrh r0, [r7, #0x2c]
	cmp r0, #0x5a
	bne _0805AD4A
	ldr r0, [r7, #0x5c]
	bl Proc_End
	movs r0, #0xa
	movs r1, #0
	bl sub_8045F48
	str r0, [r7, #0x5c]
_0805AD4A:
	ldrh r1, [r7, #0x2c]
	cmp r1, #0x87
	bne _0805AD5C
	ldr r0, [r7, #0x5c]
	movs r1, #0x3c
	movs r2, #0x1e
	movs r3, #0x78
	bl sub_805AE1C
_0805AD5C:
	ldrh r2, [r7, #0x2c]
	cmp r2, #0xc8
	bne _0805AD92
	mov r0, sp
	adds r0, #6
	mov r6, r8
	strh r6, [r0]
	ldr r4, _0805ADDC @ =0x020217C8
	ldr r5, _0805ADE0 @ =0x01000010
	adds r1, r4, #0
	adds r2, r5, #0
	bl CpuSet
	add r0, sp, #8
	strh r6, [r0]
	movs r1, #0x88
	lsls r1, r1, #2
	adds r4, r4, r1
	adds r1, r4, #0
	adds r2, r5, #0
	bl CpuSet
	bl EnablePalSync
	ldr r0, [r7, #0x60]
	bl Proc_End
_0805AD92:
	movs r2, #0x2c
	ldrsh r1, [r7, r2]
	movs r6, #0x2e
	ldrsh r0, [r7, r6]
	adds r0, #1
	cmp r1, r0
	bne _0805ADB0
	mov r0, r8
	strh r0, [r7, #0x2c]
	ldr r0, [r7, #0x5c]
	bl Proc_End
	adds r0, r7, #0
	bl Proc_Break
_0805ADB0:
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805ADBC: .4byte gBg3Tm
_0805ADC0: .4byte 0x01000020
_0805ADC4: .4byte 0x02000000
_0805ADC8: .4byte 0x02000020
_0805ADCC: .4byte 0x0201E12C
_0805ADD0: .4byte 0x02000024
_0805ADD4: .4byte gDispIo
_0805ADD8: .4byte 0x02017758
_0805ADDC: .4byte 0x020217C8
_0805ADE0: .4byte 0x01000010

	thumb_func_start sub_805ADE4
sub_805ADE4: @ 0x0805ADE4
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xc8
	bne _0805AE04
	adds r2, r1, #0
	adds r2, #0x29
	movs r0, #1
	strb r0, [r2]
	adds r0, r1, #0
	bl Proc_Break
_0805AE04:
	pop {r0}
	bx r0

	thumb_func_start sub_805AE08
sub_805AE08: @ 0x0805AE08
	push {lr}
	adds r1, r0, #0
	adds r1, #0x29
	ldrb r1, [r1]
	cmp r1, #2
	bne _0805AE18
	bl Proc_Break
_0805AE18:
	pop {r0}
	bx r0

	thumb_func_start sub_805AE1C
sub_805AE1C: @ 0x0805AE1C
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r0, _0805AE64 @ =0x08604A9C
	movs r1, #0
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r5, [r0, #0x44]
	str r6, [r0, #0x48]
	mov r1, r8
	str r1, [r0, #0x4c]
	ldr r2, _0805AE68 @ =gDispIo
	adds r3, r2, #0
	adds r3, #0x3c
	movs r1, #0x21
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r4, [r3]
	ands r0, r4
	strb r0, [r3]
	adds r2, #0x3d
	ldrb r0, [r2]
	ands r1, r0
	strb r1, [r2]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805AE64: .4byte 0x08604A9C
_0805AE68: .4byte gDispIo

	thumb_func_start sub_805AE6C
sub_805AE6C: @ 0x0805AE6C
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r7, r0]
	ldr r0, [r7, #0x44]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r6, r0, #0
	ldr r0, _0805AED4 @ =gPal
	ldr r4, _0805AED8 @ =0x020165C0
	movs r5, #0x80
	lsls r5, r5, #1
	adds r1, r4, #0
	adds r2, r5, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	adds r3, r6, #0
	bl sub_805B644
	movs r1, #0xa0
	lsls r1, r1, #0x13
	adds r0, r4, #0
	adds r2, r5, #0
	bl CpuFastSet
	bl DisablePalSync
	ldrh r0, [r7, #0x2c]
	adds r0, #1
	strh r0, [r7, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r7, #0x44]
	cmp r0, r1
	ble _0805AECC
	movs r0, #0
	strh r0, [r7, #0x2c]
	adds r0, r7, #0
	bl Proc_Break
_0805AECC:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805AED4: .4byte gPal
_0805AED8: .4byte 0x020165C0

	thumb_func_start sub_805AEDC
sub_805AEDC: @ 0x0805AEDC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, _0805AF2C @ =gPal
	ldr r4, _0805AF30 @ =0x020165C0
	movs r5, #0x80
	lsls r5, r5, #1
	adds r1, r4, #0
	adds r2, r5, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	movs r3, #0x10
	bl sub_805B644
	movs r1, #0xa0
	lsls r1, r1, #0x13
	adds r0, r4, #0
	adds r2, r5, #0
	bl CpuFastSet
	bl DisablePalSync
	ldrh r0, [r6, #0x2c]
	adds r0, #1
	strh r0, [r6, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r6, #0x48]
	cmp r0, r1
	ble _0805AF26
	movs r0, #0
	strh r0, [r6, #0x2c]
	adds r0, r6, #0
	bl Proc_Break
_0805AF26:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805AF2C: .4byte gPal
_0805AF30: .4byte 0x020165C0

	thumb_func_start sub_805AF34
sub_805AF34: @ 0x0805AF34
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r7, r0]
	ldr r0, [r7, #0x4c]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r6, r0, #0
	ldr r0, _0805AF9C @ =gPal
	ldr r4, _0805AFA0 @ =0x020165C0
	movs r5, #0x80
	lsls r5, r5, #1
	adds r1, r4, #0
	adds r2, r5, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	adds r3, r6, #0
	bl sub_805B644
	movs r1, #0xa0
	lsls r1, r1, #0x13
	adds r0, r4, #0
	adds r2, r5, #0
	bl CpuFastSet
	bl DisablePalSync
	ldrh r0, [r7, #0x2c]
	adds r0, #1
	strh r0, [r7, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r7, #0x4c]
	cmp r0, r1
	ble _0805AF94
	movs r0, #0
	strh r0, [r7, #0x2c]
	adds r0, r7, #0
	bl Proc_Break
_0805AF94:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805AF9C: .4byte gPal
_0805AFA0: .4byte 0x020165C0

	thumb_func_start sub_805AFA4
sub_805AFA4: @ 0x0805AFA4
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, _0805AFD0 @ =gDispIo
	adds r3, r2, #0
	adds r3, #0x3c
	movs r0, #0x20
	ldrb r1, [r3]
	orrs r1, r0
	strb r1, [r3]
	adds r2, #0x3d
	ldrb r1, [r2]
	orrs r0, r1
	strb r0, [r2]
	bl EnablePalSync
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805AFD0: .4byte gDispIo

	thumb_func_start sub_805AFD4
sub_805AFD4: @ 0x0805AFD4
	push {lr}
	ldr r0, _0805AFE8 @ =0x08604ACC
	movs r1, #3
	bl SpawnProc
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r0}
	bx r0
	.align 2, 0
_0805AFE8: .4byte 0x08604ACC

	thumb_func_start sub_805AFEC
sub_805AFEC: @ 0x0805AFEC
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x14
	bne _0805B012
	ldr r0, _0805B018 @ =0x00000145
	movs r1, #0x80
	lsls r1, r1, #1
	bl sub_805BCA8
	bl sub_805BD8C
	adds r0, r4, #0
	bl Proc_Break
_0805B012:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805B018: .4byte 0x00000145

	thumb_func_start sub_805B01C
sub_805B01C: @ 0x0805B01C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r6, r3, #0
	ldr r3, [sp, #0x1c]
	mov r8, r3
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov ip, r1
	lsls r2, r2, #0x10
	adds r1, r0, #0
	lsrs r2, r2, #0x10
	cmp r2, #0
	beq _0805B082
	movs r0, #0x20
	mov r3, ip
	subs r0, r0, r3
	lsls r0, r0, #0x10
	mov sb, r0
_0805B044:
	mov r3, ip
	subs r5, r2, #1
	cmp r3, #0
	beq _0805B076
	movs r2, #1
	rsbs r2, r2, #0
	ldr r7, _0805B090 @ =0x00000FFF
	lsls r4, r6, #0xc
_0805B054:
	ldrh r0, [r1]
	cmp r6, r2
	beq _0805B062
	ands r0, r7
	adds r0, r0, r4
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
_0805B062:
	cmp r8, r2
	beq _0805B06C
	add r0, r8
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
_0805B06C:
	strh r0, [r1]
	adds r1, #2
	subs r3, #1
	cmp r3, #0
	bne _0805B054
_0805B076:
	mov r2, sb
	lsrs r0, r2, #0xf
	adds r1, r1, r0
	adds r2, r5, #0
	cmp r2, #0
	bne _0805B044
_0805B082:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805B090: .4byte 0x00000FFF

	thumb_func_start sub_805B094
sub_805B094: @ 0x0805B094
	push {r4, r5, r6, r7, lr}
	adds r5, r3, #0
	ldr r7, [sp, #0x14]
	lsls r1, r1, #0x10
	lsrs r4, r1, #0x10
	lsls r2, r2, #0x10
	adds r3, r0, #0
	lsrs r2, r2, #0x10
	cmp r2, #0
	beq _0805B0CC
	movs r0, #0x20
	subs r0, r0, r4
	lsls r0, r0, #0x10
	lsrs r6, r0, #0xf
	lsls r5, r5, #0xc
_0805B0B2:
	adds r0, r4, #0
	subs r2, #1
	cmp r0, #0
	beq _0805B0C6
	adds r1, r7, r5
_0805B0BC:
	strh r1, [r3]
	adds r3, #2
	subs r0, #1
	cmp r0, #0
	bne _0805B0BC
_0805B0C6:
	adds r3, r3, r6
	cmp r2, #0
	bne _0805B0B2
_0805B0CC:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805B0D4
sub_805B0D4: @ 0x0805B0D4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r3, #0
	ldr r3, [sp, #0x18]
	mov ip, r3
	lsls r1, r1, #0x10
	lsrs r7, r1, #0x10
	lsls r2, r2, #0x10
	adds r1, r0, #0
	lsrs r2, r2, #0x10
	cmp r2, #0
	beq _0805B130
	movs r0, #0x20
	subs r0, r0, r7
	lsls r0, r0, #0x10
	mov r8, r0
_0805B0F6:
	adds r3, r7, #0
	subs r5, r2, #1
	cmp r3, #0
	beq _0805B124
	movs r2, #1
	rsbs r2, r2, #0
	lsls r4, r6, #0xc
_0805B104:
	ldrh r0, [r1]
	cmp r6, r2
	beq _0805B110
	adds r0, r0, r4
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
_0805B110:
	cmp ip, r2
	beq _0805B11A
	add r0, ip
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
_0805B11A:
	strh r0, [r1]
	adds r1, #2
	subs r3, #1
	cmp r3, #0
	bne _0805B104
_0805B124:
	mov r2, r8
	lsrs r0, r2, #0xf
	adds r1, r1, r0
	adds r2, r5, #0
	cmp r2, #0
	bne _0805B0F6
_0805B130:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805B13C
sub_805B13C: @ 0x0805B13C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov ip, r1
	lsls r2, r2, #0x10
	adds r3, r0, #0
	lsrs r2, r2, #0x10
	cmp r2, #0
	beq _0805B198
	movs r0, #0x20
	subs r0, r0, r1
	lsls r0, r0, #0x10
	mov r8, r0
	ldr r0, _0805B1A4 @ =0x08605D14
	mov sb, r0
_0805B160:
	mov r4, ip
	subs r2, #1
	cmp r4, #0
	beq _0805B18E
	ldr r7, _0805B1A8 @ =0x00000FFF
	mov r6, sb
	movs r5, #0xf
_0805B16E:
	ldrh r0, [r3]
	adds r1, r0, #0
	lsrs r0, r0, #0xc
	ands r0, r5
	subs r0, #6
	lsls r0, r0, #0x10
	ands r1, r7
	lsrs r0, r0, #0xf
	adds r0, r0, r6
	ldrh r0, [r0]
	adds r1, r0, r1
	strh r1, [r3]
	adds r3, #2
	subs r4, #1
	cmp r4, #0
	bne _0805B16E
_0805B18E:
	mov r1, r8
	lsrs r0, r1, #0xf
	adds r3, r3, r0
	cmp r2, #0
	bne _0805B160
_0805B198:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805B1A4: .4byte 0x08605D14
_0805B1A8: .4byte 0x00000FFF

	thumb_func_start sub_805B1AC
sub_805B1AC: @ 0x0805B1AC
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r6, r1, #0
	ldr r4, [sp, #0x20]
	ldr r5, [sp, #0x24]
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	movs r1, #1
	rsbs r1, r1, #0
	str r2, [sp]
	str r3, [sp, #4]
	str r4, [sp, #8]
	str r5, [sp, #0xc]
	adds r2, r6, #0
	movs r3, #0x20
	bl sub_805B20C
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805B1DC
sub_805B1DC: @ 0x0805B1DC
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r6, r1, #0
	ldr r4, [sp, #0x20]
	ldr r5, [sp, #0x24]
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	movs r1, #1
	rsbs r1, r1, #0
	str r2, [sp]
	str r3, [sp, #4]
	str r4, [sp, #8]
	str r5, [sp, #0xc]
	adds r2, r6, #0
	movs r3, #0x20
	bl sub_805B2BC
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805B20C
sub_805B20C: @ 0x0805B20C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r5, r0, #0
	adds r4, r2, #0
	ldr r0, [sp, #0x28]
	ldr r2, [sp, #0x2c]
	ldr r6, [sp, #0x30]
	mov r8, r6
	ldr r6, [sp, #0x34]
	mov ip, r6
	lsls r1, r1, #0x10
	lsrs r6, r1, #0x10
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	cmp r2, #0
	beq _0805B2A8
	lsls r0, r6, #0x10
	lsls r1, r3, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	asrs r1, r1, #0x10
	str r1, [sp, #4]
	subs r0, r6, r7
	lsls r0, r0, #0x10
	mov sl, r0
	subs r0, r3, r7
	lsls r0, r0, #0x10
	mov sb, r0
_0805B254:
	adds r1, r7, #0
	subs r6, r2, #1
	cmp r1, #0
	beq _0805B286
	movs r2, #1
	rsbs r2, r2, #0
	mov r0, r8
	lsls r3, r0, #0xc
_0805B264:
	ldrh r0, [r5]
	cmp r8, r2
	beq _0805B270
	adds r0, r0, r3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
_0805B270:
	cmp ip, r2
	beq _0805B27A
	add r0, ip
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
_0805B27A:
	strh r0, [r4]
	adds r5, #2
	adds r4, #2
	subs r1, #1
	cmp r1, #0
	bne _0805B264
_0805B286:
	ldr r2, _0805B2B8 @ =0xFFFF0000
	asrs r1, r2, #0x10
	ldr r0, [sp]
	cmp r0, r1
	beq _0805B296
	mov r2, sl
	lsrs r0, r2, #0xf
	adds r5, r5, r0
_0805B296:
	ldr r0, [sp, #4]
	cmp r0, r1
	beq _0805B2A2
	mov r1, sb
	lsrs r0, r1, #0xf
	adds r4, r4, r0
_0805B2A2:
	adds r2, r6, #0
	cmp r2, #0
	bne _0805B254
_0805B2A8:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805B2B8: .4byte 0xFFFF0000

	thumb_func_start sub_805B2BC
sub_805B2BC: @ 0x0805B2BC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r5, r0, #0
	adds r4, r2, #0
	ldr r0, [sp, #0x2c]
	ldr r2, [sp, #0x30]
	ldr r6, [sp, #0x34]
	mov sb, r6
	ldr r6, [sp, #0x38]
	mov r8, r6
	lsls r1, r1, #0x10
	lsrs r6, r1, #0x10
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov ip, r0
	lsls r2, r2, #0x10
	lsls r0, r0, #1
	subs r0, #2
	adds r4, r4, r0
	lsrs r2, r2, #0x10
	cmp r2, #0
	beq _0805B36A
	lsls r0, r6, #0x10
	lsls r1, r3, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	asrs r1, r1, #0x10
	str r1, [sp, #8]
	mov r1, ip
	subs r0, r6, r1
	lsls r0, r0, #0x10
	str r0, [sp, #4]
	adds r0, r1, r3
	lsls r0, r0, #0x10
	mov sl, r0
_0805B30E:
	mov r1, ip
	subs r7, r2, #1
	cmp r1, #0
	beq _0805B348
	movs r2, #1
	rsbs r2, r2, #0
	mov r6, sb
	lsls r3, r6, #0xc
	movs r0, #0x80
	lsls r0, r0, #3
	adds r6, r0, #0
_0805B324:
	ldrh r0, [r5]
	cmp sb, r2
	beq _0805B330
	adds r0, r0, r3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
_0805B330:
	cmp r8, r2
	beq _0805B33A
	add r0, r8
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
_0805B33A:
	eors r0, r6
	strh r0, [r4]
	adds r5, #2
	subs r4, #2
	subs r1, #1
	cmp r1, #0
	bne _0805B324
_0805B348:
	ldr r2, _0805B37C @ =0xFFFF0000
	asrs r1, r2, #0x10
	ldr r6, [sp]
	cmp r6, r1
	beq _0805B358
	ldr r2, [sp, #4]
	lsrs r0, r2, #0xf
	adds r5, r5, r0
_0805B358:
	ldr r6, [sp, #8]
	cmp r6, r1
	beq _0805B364
	mov r1, sl
	lsrs r0, r1, #0xf
	adds r4, r4, r0
_0805B364:
	adds r2, r7, #0
	cmp r2, #0
	bne _0805B30E
_0805B36A:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805B37C: .4byte 0xFFFF0000

	thumb_func_start sub_805B380
sub_805B380: @ 0x0805B380
	push {r4, r5, r6, r7, lr}
	adds r3, r0, #0
	adds r6, r1, #0
	adds r7, r2, #0
	movs r0, #0
	mov ip, r0
	cmp r7, #0
	beq _0805B450
	movs r2, #0
_0805B392:
	cmp r7, r2
	bgt _0805B3A8
	mov r1, ip
	cmp r1, #0
	bne _0805B3A4
	movs r0, #1
	mov ip, r0
	movs r0, #0xe
	b _0805B408
_0805B3A4:
	movs r0, #0xff
	b _0805B408
_0805B3A8:
	adds r0, r2, #1
	cmp r7, r0
	bne _0805B3C4
	movs r1, #1
	mov ip, r1
	cmp r6, r2
	bgt _0805B3BA
	movs r0, #0xd
	b _0805B408
_0805B3BA:
	adds r1, r2, #4
	cmp r6, r0
	bne _0805B44A
	movs r0, #0xc
	b _0805B446
_0805B3C4:
	adds r4, r2, #2
	cmp r7, r4
	bne _0805B3E8
	movs r1, #1
	mov ip, r1
	cmp r6, r2
	bgt _0805B3D6
	movs r0, #0xb
	b _0805B408
_0805B3D6:
	cmp r6, r0
	bne _0805B3DE
	movs r0, #0xa
	b _0805B408
_0805B3DE:
	adds r1, r2, #4
	cmp r6, r4
	bne _0805B44A
	movs r0, #9
	b _0805B446
_0805B3E8:
	adds r5, r2, #3
	cmp r7, r5
	bne _0805B41A
	movs r1, #1
	mov ip, r1
	cmp r6, r2
	bgt _0805B3FA
	movs r0, #8
	b _0805B408
_0805B3FA:
	cmp r6, r0
	bne _0805B402
	movs r0, #7
	b _0805B408
_0805B402:
	cmp r6, r4
	bne _0805B410
	movs r0, #6
_0805B408:
	strh r0, [r3]
	adds r3, #2
	adds r1, r2, #4
	b _0805B44A
_0805B410:
	adds r1, r2, #4
	cmp r6, r5
	bne _0805B44A
	movs r0, #5
	b _0805B446
_0805B41A:
	adds r1, r2, #4
	cmp r7, r1
	blt _0805B44A
	cmp r6, r2
	bgt _0805B428
	movs r0, #4
	b _0805B446
_0805B428:
	cmp r6, r0
	bne _0805B430
	movs r0, #3
	b _0805B446
_0805B430:
	cmp r6, r4
	bne _0805B438
	movs r0, #2
	b _0805B446
_0805B438:
	cmp r6, r5
	bne _0805B440
	movs r0, #1
	b _0805B446
_0805B440:
	cmp r6, r1
	blt _0805B44A
	movs r0, #0
_0805B446:
	strh r0, [r3]
	adds r3, #2
_0805B44A:
	adds r2, r1, #0
	cmp r2, #0x28
	ble _0805B392
_0805B450:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805B458
sub_805B458: @ 0x0805B458
	push {r4, r5, r6, r7, lr}
	adds r2, r0, #0
	adds r3, r1, #0
	cmp r3, #5
	ble _0805B466
	movs r0, #6
	b _0805B46E
_0805B466:
	ldr r0, _0805B488 @ =0x081C9EC8
	lsls r1, r3, #1
	adds r1, r1, r0
	ldrh r0, [r1]
_0805B46E:
	strh r0, [r2]
	adds r2, #2
	movs r1, #0
	movs r7, #0x10
	ldr r6, _0805B48C @ =0x081C9ED6
	subs r4, r3, #6
	movs r5, #7
_0805B47C:
	adds r0, r1, #0
	adds r0, #0xe
	cmp r3, r0
	blt _0805B490
	strh r7, [r2]
	b _0805B4A4
	.align 2, 0
_0805B488: .4byte 0x081C9EC8
_0805B48C: .4byte 0x081C9ED6
_0805B490:
	adds r0, r1, #6
	cmp r3, r0
	blt _0805B4A2
	subs r0, r4, r1
	lsls r0, r0, #1
	adds r0, r0, r6
	ldrh r0, [r0]
	strh r0, [r2]
	b _0805B4A4
_0805B4A2:
	strh r5, [r2]
_0805B4A4:
	adds r2, #2
	adds r1, #8
	cmp r1, #0x57
	ble _0805B47C
	cmp r3, #0x62
	ble _0805B4B4
	movs r0, #0x17
	b _0805B4CE
_0805B4B4:
	cmp r3, #0x5d
	ble _0805B4CC
	ldr r0, _0805B4C8 @ =0x081C9EE8
	adds r1, r3, #0
	subs r1, #0x5e
	lsls r1, r1, #1
	adds r1, r1, r0
	ldrh r0, [r1]
	b _0805B4CE
	.align 2, 0
_0805B4C8: .4byte 0x081C9EE8
_0805B4CC:
	movs r0, #0x11
_0805B4CE:
	strh r0, [r2]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805B4D8
sub_805B4D8: @ 0x0805B4D8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	str r0, [sp, #4]
	str r1, [sp, #8]
	str r2, [sp, #0xc]
	ldr r0, [sp, #0x3c]
	ldr r1, [sp, #0x40]
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp, #0x10]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	str r1, [sp, #0x14]
	cmp r3, #0
	beq _0805B5A8
	str r3, [sp, #0x18]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	mov sl, r0
	lsls r0, r1, #0x10
	asrs r7, r0, #0x10
_0805B50E:
	ldr r1, [sp, #4]
	ldrh r0, [r1]
	movs r1, #0x1f
	ands r1, r0
	movs r6, #0xf8
	lsls r6, r6, #2
	ands r6, r0
	movs r2, #0xf8
	lsls r2, r2, #7
	mov sb, r2
	mov r3, sb
	ands r3, r0
	mov sb, r3
	ldr r2, [sp, #8]
	ldrh r0, [r2]
	movs r2, #0x1f
	ands r2, r0
	movs r4, #0xf8
	lsls r4, r4, #2
	ands r4, r0
	movs r3, #0xf8
	lsls r3, r3, #7
	mov r8, r3
	ands r3, r0
	mov r8, r3
	str r7, [sp]
	movs r0, #0
	mov r3, sl
	bl Interpolate
	adds r5, r0, #0
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	str r7, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r4, #0
	mov r3, sl
	bl Interpolate
	adds r4, r0, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	str r7, [sp]
	movs r0, #0
	mov r1, sb
	mov r2, r8
	mov r3, sl
	bl Interpolate
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	movs r1, #0xf8
	lsls r1, r1, #7
	ands r0, r1
	movs r2, #0xf8
	lsls r2, r2, #2
	ands r4, r2
	orrs r0, r4
	movs r3, #0x1f
	ands r5, r3
	orrs r0, r5
	ldr r1, [sp, #0xc]
	strh r0, [r1]
	ldr r2, [sp, #4]
	adds r2, #2
	str r2, [sp, #4]
	ldr r3, [sp, #8]
	adds r3, #2
	str r3, [sp, #8]
	adds r1, #2
	str r1, [sp, #0xc]
	ldr r0, [sp, #0x18]
	subs r0, #1
	str r0, [sp, #0x18]
	cmp r0, #0
	bne _0805B50E
_0805B5A8:
	ldr r1, [sp, #0x10]
	ldr r2, [sp, #0x14]
	cmp r1, r2
	beq _0805B5B4
	movs r0, #0
	b _0805B5B6
_0805B5B4:
	movs r0, #1
_0805B5B6:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_805B5C8
sub_805B5C8: @ 0x0805B5C8
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov sb, r0
	adds r4, r1, #0
	adds r5, r2, #0
	lsls r0, r3, #5
	movs r1, #0x10
	bl Div
	adds r6, r0, #0
	adds r0, r4, r5
	cmp r4, r0
	bge _0805B638
	mov r8, r0
	movs r0, #0x1f
	mov ip, r0
_0805B5EC:
	lsls r0, r4, #5
	adds r7, r4, #1
	mov r1, sb
	adds r5, r1, r0
	movs r4, #0xf
_0805B5F6:
	ldrh r1, [r5]
	movs r2, #0x1f
	ands r2, r1
	lsls r1, r1, #0x10
	lsrs r3, r1, #0x15
	mov r0, ip
	ands r3, r0
	lsrs r1, r1, #0x1a
	ands r1, r0
	adds r0, r2, #0
	muls r0, r6, r0
	asrs r0, r0, #5
	subs r2, r2, r0
	adds r0, r3, #0
	muls r0, r6, r0
	asrs r0, r0, #5
	subs r3, r3, r0
	adds r0, r1, #0
	muls r0, r6, r0
	asrs r0, r0, #5
	subs r1, r1, r0
	lsls r3, r3, #5
	orrs r2, r3
	lsls r1, r1, #0xa
	orrs r2, r1
	strh r2, [r5]
	adds r5, #2
	subs r4, #1
	cmp r4, #0
	bge _0805B5F6
	adds r4, r7, #0
	cmp r4, r8
	blt _0805B5EC
_0805B638:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_805B644
sub_805B644: @ 0x0805B644
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sl, r0
	adds r4, r1, #0
	adds r5, r2, #0
	lsls r0, r3, #5
	movs r1, #0x10
	bl Div
	adds r6, r0, #0
	adds r0, r4, r5
	cmp r4, r0
	bge _0805B6BA
	mov sb, r0
	movs r0, #0x1f
	mov r8, r0
	movs r7, #0x1f
_0805B66C:
	lsls r0, r4, #5
	adds r4, #1
	mov ip, r4
	mov r1, sl
	adds r5, r1, r0
	movs r4, #0xf
_0805B678:
	ldrh r1, [r5]
	adds r2, r7, #0
	ands r2, r1
	lsls r1, r1, #0x10
	lsrs r3, r1, #0x15
	mov r0, r8
	ands r3, r0
	lsrs r1, r1, #0x1a
	ands r1, r0
	subs r0, r7, r2
	muls r0, r6, r0
	asrs r0, r0, #5
	adds r2, r2, r0
	subs r0, r7, r3
	muls r0, r6, r0
	asrs r0, r0, #5
	adds r3, r3, r0
	subs r0, r7, r1
	muls r0, r6, r0
	asrs r0, r0, #5
	adds r1, r1, r0
	lsls r3, r3, #5
	orrs r2, r3
	lsls r1, r1, #0xa
	orrs r2, r1
	strh r2, [r5]
	adds r5, #2
	subs r4, #1
	cmp r4, #0
	bge _0805B678
	mov r4, ip
	cmp r4, sb
	blt _0805B66C
_0805B6BA:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_805B6C8
sub_805B6C8: @ 0x0805B6C8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	str r0, [sp]
	adds r6, r1, #0
	mov r8, r2
	adds r0, r3, #0
	ldr r4, [sp, #0x2c]
	ldr r5, [sp, #0x30]
	lsls r0, r0, #5
	movs r1, #0x10
	bl Div
	mov sl, r0
	lsls r4, r4, #5
	adds r0, r4, #0
	movs r1, #0x10
	bl Div
	mov sb, r0
	lsls r5, r5, #5
	adds r0, r5, #0
	movs r1, #0x10
	bl Div
	mov ip, r0
	mov r1, r8
	adds r0, r6, r1
	cmp r6, r0
	bge _0805B76E
	str r0, [sp, #4]
	movs r0, #0x1f
	mov r8, r0
	movs r7, #0x1f
_0805B712:
	lsls r0, r6, #5
	adds r6, #1
	str r6, [sp, #8]
	ldr r1, [sp]
	adds r4, r1, r0
	movs r5, #0xf
_0805B71E:
	ldrh r1, [r4]
	adds r2, r7, #0
	ands r2, r1
	lsls r1, r1, #0x10
	lsrs r3, r1, #0x15
	mov r6, r8
	ands r3, r6
	lsrs r1, r1, #0x1a
	ands r1, r6
	subs r0, r7, r2
	mov r6, sl
	muls r6, r0, r6
	adds r0, r6, #0
	asrs r0, r0, #5
	adds r2, r2, r0
	subs r0, r7, r3
	mov r6, sb
	muls r6, r0, r6
	adds r0, r6, #0
	asrs r0, r0, #5
	adds r3, r3, r0
	subs r0, r7, r1
	mov r6, ip
	muls r6, r0, r6
	adds r0, r6, #0
	asrs r0, r0, #5
	adds r1, r1, r0
	lsls r3, r3, #5
	orrs r2, r3
	lsls r1, r1, #0xa
	orrs r2, r1
	strh r2, [r4]
	adds r4, #2
	subs r5, #1
	cmp r5, #0
	bge _0805B71E
	ldr r6, [sp, #8]
	ldr r0, [sp, #4]
	cmp r6, r0
	blt _0805B712
_0805B76E:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805B780
sub_805B780: @ 0x0805B780
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sb, r0
	adds r0, r1, r2
	cmp r1, r0
	bge _0805B7E6
	mov sl, r0
	movs r0, #0x1f
	mov r8, r0
_0805B798:
	movs r5, #0
	lsls r6, r1, #5
	adds r7, r1, #1
_0805B79E:
	mov r1, sb
	adds r4, r1, r6
	lsls r0, r5, #1
	adds r4, r4, r0
	ldrh r2, [r4]
	movs r0, #0x1f
	ands r0, r2
	lsls r2, r2, #0x10
	lsrs r3, r2, #0x15
	mov r1, r8
	ands r3, r1
	lsrs r2, r2, #0x1a
	ands r2, r1
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r0, r3, #1
	adds r0, r0, r3
	lsls r0, r0, #1
	adds r1, r1, r0
	adds r1, r1, r2
	adds r0, r1, #0
	movs r1, #0xa
	bl Div
	adds r1, r0, #0
	lsls r0, r1, #5
	orrs r0, r1
	lsls r1, r1, #0xa
	orrs r0, r1
	strh r0, [r4]
	adds r5, #1
	cmp r5, #0xf
	ble _0805B79E
	adds r1, r7, #0
	cmp r1, sl
	blt _0805B798
_0805B7E6:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_805B7F4
sub_805B7F4: @ 0x0805B7F4
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r3, r1, #0
	adds r6, r2, #0
	movs r5, #0
	cmp r5, r6
	bhs _0805B82C
	movs r7, #0x1f
	movs r0, #0x1f
	mov ip, r0
_0805B808:
	ldrh r0, [r4]
	adds r4, #2
	adds r1, r0, #0
	mov r2, ip
	ands r1, r2
	lsrs r2, r0, #5
	ands r2, r7
	lsrs r0, r0, #0xa
	ands r0, r7
	strb r1, [r3]
	adds r3, #1
	strb r2, [r3]
	adds r3, #1
	strb r0, [r3]
	adds r3, #1
	adds r5, #1
	cmp r5, r6
	blo _0805B808
_0805B82C:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805B834
sub_805B834: @ 0x0805B834
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r7, r2, #0
	movs r6, #0
	cmp r6, r7
	bhs _0805B882
	movs r0, #0x1f
	mov r8, r0
_0805B84A:
	ldrh r2, [r5]
	adds r5, #2
	movs r1, #0x1f
	ands r1, r2
	lsrs r3, r2, #5
	mov r0, r8
	ands r3, r0
	lsrs r2, r2, #0xa
	ands r2, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r1, r3, #1
	adds r1, r1, r3
	lsls r1, r1, #1
	adds r0, r0, r1
	adds r0, r0, r2
	movs r1, #0xa
	bl Div
	strb r0, [r4]
	adds r4, #1
	strb r0, [r4]
	adds r4, #1
	strb r0, [r4]
	adds r4, #1
	adds r6, #1
	cmp r6, r7
	blo _0805B84A
_0805B882:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_805B88C
sub_805B88C: @ 0x0805B88C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r6, r0, #0
	adds r5, r1, #0
	adds r4, r2, #0
	mov r8, r3
	ldr r0, [sp, #0x1c]
	mov sb, r0
	movs r7, #0
	cmp r7, r8
	bhs _0805B900
_0805B8A6:
	movs r0, #0
	ldrsb r0, [r5, r0]
	movs r1, #0
	ldrsb r1, [r6, r1]
	adds r6, #1
	adds r5, #1
	subs r0, r0, r1
	lsls r0, r0, #0x18
	asrs r0, r0, #0x10
	mov r1, sb
	bl Div
	strh r0, [r4]
	adds r4, #2
	movs r0, #0
	ldrsb r0, [r5, r0]
	movs r1, #0
	ldrsb r1, [r6, r1]
	adds r6, #1
	adds r5, #1
	subs r0, r0, r1
	lsls r0, r0, #0x18
	asrs r0, r0, #0x10
	mov r1, sb
	bl Div
	strh r0, [r4]
	adds r4, #2
	movs r0, #0
	ldrsb r0, [r5, r0]
	movs r1, #0
	ldrsb r1, [r6, r1]
	adds r6, #1
	adds r5, #1
	subs r0, r0, r1
	lsls r0, r0, #0x18
	asrs r0, r0, #0x10
	mov r1, sb
	bl Div
	strh r0, [r4]
	adds r4, #2
	adds r7, #1
	cmp r7, r8
	blo _0805B8A6
_0805B900:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_805B90C
sub_805B90C: @ 0x0805B90C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov ip, r0
	adds r6, r1, #0
	adds r5, r2, #0
	adds r4, r3, #0
	ldr r0, [sp, #0x1c]
	mov sb, r0
	ldr r7, [sp, #0x20]
	movs r0, #0
	mov r8, r0
	cmp r8, sb
	bhs _0805B998
_0805B92A:
	ldr r0, [sp, #0x24]
	cmp r7, r0
	beq _0805B96E
	movs r0, #0
	ldrsh r1, [r4, r0]
	adds r4, #2
	movs r0, #0
	ldrsh r3, [r4, r0]
	adds r4, #2
	movs r0, #0
	ldrsh r2, [r4, r0]
	adds r4, #2
	adds r0, r1, #0
	muls r0, r7, r0
	asrs r1, r0, #8
	adds r0, r3, #0
	muls r0, r7, r0
	asrs r3, r0, #8
	adds r0, r2, #0
	muls r0, r7, r0
	asrs r2, r0, #8
	movs r0, #0
	ldrsb r0, [r6, r0]
	adds r1, r1, r0
	adds r6, #1
	movs r0, #0
	ldrsb r0, [r6, r0]
	adds r3, r3, r0
	adds r6, #1
	movs r0, #0
	ldrsb r0, [r6, r0]
	adds r2, r2, r0
	adds r6, #1
	b _0805B980
_0805B96E:
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r5, #1
	movs r3, #0
	ldrsb r3, [r5, r3]
	adds r5, #1
	movs r2, #0
	ldrsb r2, [r5, r2]
	adds r5, #1
_0805B980:
	lsls r0, r3, #5
	orrs r1, r0
	lsls r0, r2, #0xa
	orrs r1, r0
	mov r0, ip
	strh r1, [r0]
	movs r0, #2
	add ip, r0
	movs r0, #1
	add r8, r0
	cmp r8, sb
	blo _0805B92A
_0805B998:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_805B9A4
sub_805B9A4: @ 0x0805B9A4
	push {r4, lr}
	adds r4, r0, #0
	bl ApplyChapterMapPalettes
	ldr r0, _0805B9C4 @ =gPal
	movs r1, #6
	movs r2, #0xa
	adds r3, r4, #0
	bl sub_805B5C8
	bl EnablePalSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805B9C4: .4byte gPal

	thumb_func_start sub_805B9C8
sub_805B9C8: @ 0x0805B9C8
	push {r4, lr}
	adds r4, r0, #0
	bl RandNextB
	adds r4, #1
	adds r1, r4, #0
	bl DivRem
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_805B9E0
sub_805B9E0: @ 0x0805B9E0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	adds r4, r3, #0
	ldr r7, [sp, #0x18]
	ldr r1, [sp, #0x20]
	ldr r0, _0805BA28 @ =0x08605D28
	bl SpawnProc
	movs r2, #0
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	adds r3, r0, #0
	adds r3, #0x29
	strb r4, [r3]
	adds r3, #1
	strb r2, [r3]
	strh r5, [r0, #0x32]
	strh r6, [r0, #0x3a]
	strh r1, [r0, #0x34]
	strh r1, [r0, #0x3c]
	mov r2, r8
	str r2, [r0, #0x44]
	str r1, [r0, #0x48]
	str r7, [r0, #0x4c]
	ldr r1, [sp, #0x1c]
	str r1, [r0, #0x50]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0805BA28: .4byte 0x08605D28

	thumb_func_start sub_805BA2C
sub_805BA2C: @ 0x0805BA2C
	push {r4, r5, lr}
	sub sp, #0x48
	adds r2, r0, #0
	ldr r1, [r2, #0x44]
	movs r3, #0x2c
	ldrsh r0, [r2, r3]
	cmp r0, #0
	bne _0805BAA4
	movs r4, #0x2e
	ldrsh r0, [r2, r4]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r3, [r0]
	movs r1, #0x3f
	ldrb r0, [r0, #3]
	ands r1, r0
	cmp r1, #0
	bne _0805BA82
	adds r0, r2, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	beq _0805BA72
	cmp r0, #1
	bgt _0805BA64
	cmp r0, #0
	beq _0805BA6A
	b _0805BAA4
_0805BA64:
	cmp r0, #2
	beq _0805BA78
	b _0805BAA4
_0805BA6A:
	adds r0, r2, #0
	bl Proc_Break
	b _0805BADE
_0805BA72:
	strh r0, [r2, #0x2c]
	strh r1, [r2, #0x2e]
	b _0805BAA4
_0805BA78:
	movs r0, #1
	strh r0, [r2, #0x2c]
	ldrh r0, [r2, #0x2e]
	subs r0, #1
	b _0805BAA2
_0805BA82:
	cmp r1, #4
	bne _0805BA8A
	strh r3, [r2, #0x2c]
	b _0805BA9E
_0805BA8A:
	ldr r0, _0805BAE8 @ =0x0FFFFFFC
	ands r0, r3
	str r0, [r2, #0x48]
	lsrs r0, r3, #0x1a
	movs r1, #0x1c
	ands r0, r1
	movs r1, #3
	ands r3, r1
	adds r0, r0, r3
	strh r0, [r2, #0x2c]
_0805BA9E:
	ldrh r0, [r2, #0x2e]
	adds r0, #1
_0805BAA2:
	strh r0, [r2, #0x2e]
_0805BAA4:
	ldrh r0, [r2, #0x2c]
	subs r0, #1
	strh r0, [r2, #0x2c]
	adds r0, r2, #0
	adds r0, #0x2a
	ldrb r3, [r0]
	cmp r3, #0
	bne _0805BADE
	ldr r0, [r2, #0x48]
	cmp r0, #0
	beq _0805BADE
	str r0, [sp, #0x3c]
	mov r1, sp
	ldr r0, [r2, #0x4c]
	strh r0, [r1, #8]
	ldr r0, [r2, #0x50]
	str r0, [sp, #0x1c]
	ldrh r5, [r2, #0x32]
	ldrh r4, [r2, #0x34]
	adds r0, r5, r4
	strh r0, [r1, #2]
	ldrh r5, [r2, #0x3a]
	ldrh r4, [r2, #0x3c]
	adds r0, r5, r4
	strh r0, [r1, #4]
	mov r0, sp
	strh r3, [r0, #0xc]
	bl BasPutOam
_0805BADE:
	add sp, #0x48
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805BAE8: .4byte 0x0FFFFFFC

	thumb_func_start sub_805BAEC
sub_805BAEC: @ 0x0805BAEC
	lsrs r1, r0, #0x1e
	movs r2, #0xc0
	lsls r2, r2, #8
	ands r2, r0
	ldr r0, _0805BB04 @ =0x081C9EF4
	lsls r1, r1, #1
	lsrs r2, r2, #0xb
	adds r1, r1, r2
	adds r1, r1, r0
	movs r2, #0
	ldrsh r0, [r1, r2]
	bx lr
	.align 2, 0
_0805BB04: .4byte 0x081C9EF4

	thumb_func_start sub_805BB08
sub_805BB08: @ 0x0805BB08
	lsrs r1, r0, #0x1e
	movs r2, #0xc0
	lsls r2, r2, #8
	ands r2, r0
	ldr r0, _0805BB20 @ =0x081C9F14
	lsls r1, r1, #1
	lsrs r2, r2, #0xb
	adds r1, r1, r2
	adds r1, r1, r0
	movs r2, #0
	ldrsh r0, [r1, r2]
	bx lr
	.align 2, 0
_0805BB20: .4byte 0x081C9F14

	thumb_func_start sub_805BB24
sub_805BB24: @ 0x0805BB24
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r6, r1, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	mov r8, r2
	adds r7, r0, #0
	ldr r1, _0805BC9C @ =0xFFFF0000
	ldr r0, [sp, #4]
	ands r0, r1
	str r0, [sp, #4]
	lsls r3, r3, #0x10
	mov sb, r3
	mov r0, r8
	orrs r0, r3
	str r0, [sp]
	ldr r4, _0805BCA0 @ =0xFFFF0004
	adds r1, r6, #0
	stm r1!, {r4}
	mov r0, sp
	movs r2, #1
	movs r3, #2
	bl ObjAffineSet
	adds r5, r6, #0
	adds r5, #0xc
	str r4, [r6, #0xc]
	adds r1, r6, #0
	adds r1, #0x10
	mov r0, sp
	movs r2, #1
	movs r3, #2
	bl ObjAffineSet
	ldrh r1, [r5, #4]
	rsbs r0, r1, #0
	strh r0, [r5, #4]
	ldrh r2, [r5, #6]
	rsbs r0, r2, #0
	strh r0, [r5, #6]
	adds r5, #0xc
	str r4, [r6, #0x18]
	adds r1, r6, #0
	adds r1, #0x1c
	mov r0, sp
	movs r2, #1
	movs r3, #2
	bl ObjAffineSet
	ldrh r3, [r5, #8]
	rsbs r0, r3, #0
	strh r0, [r5, #8]
	ldrh r1, [r5, #0xa]
	rsbs r0, r1, #0
	strh r0, [r5, #0xa]
	adds r5, #0xc
	str r4, [r6, #0x24]
	adds r1, r6, #0
	adds r1, #0x28
	mov r0, sp
	movs r2, #1
	movs r3, #2
	bl ObjAffineSet
	ldrh r2, [r5, #4]
	rsbs r0, r2, #0
	strh r0, [r5, #4]
	ldrh r3, [r5, #6]
	rsbs r0, r3, #0
	strh r0, [r5, #6]
	ldrh r1, [r5, #8]
	rsbs r0, r1, #0
	strh r0, [r5, #8]
	ldrh r2, [r5, #0xa]
	rsbs r0, r2, #0
	strh r0, [r5, #0xa]
	adds r6, #0x30
	ldr r0, [r7]
	cmp r0, #1
	beq _0805BC7C
	mov r3, r8
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	mov r8, r0
	mov r0, sb
	asrs r5, r0, #0x10
_0805BBD6:
	ldr r2, [r7]
	movs r0, #0x80
	lsls r0, r0, #0x15
	ands r0, r2
	rsbs r0, r0, #0
	asrs r1, r0, #0x1f
	movs r0, #0x80
	lsls r0, r0, #0x12
	ands r1, r0
	movs r0, #0x80
	lsls r0, r0, #0x16
	ands r0, r2
	cmp r0, #0
	beq _0805BBF8
	movs r3, #0x80
	lsls r3, r3, #0x13
	adds r1, r1, r3
_0805BBF8:
	ldr r0, _0805BCA4 @ =0xC1FFFFFF
	ands r0, r2
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r1, r3
	adds r0, r0, r1
	str r0, [r6]
	ldrh r0, [r7, #4]
	strh r0, [r6, #4]
	adds r0, r2, #0
	bl sub_805BAEC
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x11
	lsls r1, r4, #8
	adds r0, r1, #0
	mov r1, r8
	bl Div
	subs r1, r4, r0
	movs r2, #6
	ldrsh r0, [r7, r2]
	subs r4, r0, r1
	lsls r1, r0, #8
	adds r0, r1, #0
	mov r1, r8
	bl Div
	adds r1, r0, #0
	movs r3, #6
	ldrsh r0, [r7, r3]
	subs r1, r0, r1
	subs r4, r4, r1
	strh r4, [r6, #6]
	ldr r0, [r7]
	bl sub_805BB08
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x11
	lsls r1, r4, #8
	adds r0, r1, #0
	adds r1, r5, #0
	bl Div
	subs r1, r4, r0
	movs r2, #8
	ldrsh r0, [r7, r2]
	subs r4, r0, r1
	lsls r1, r0, #8
	adds r0, r1, #0
	adds r1, r5, #0
	bl Div
	adds r1, r0, #0
	movs r3, #8
	ldrsh r0, [r7, r3]
	subs r1, r0, r1
	subs r4, r4, r1
	strh r4, [r6, #8]
	adds r6, #0xc
	adds r7, #0xc
	ldr r0, [r7]
	cmp r0, #1
	bne _0805BBD6
_0805BC7C:
	ldr r0, [r7]
	str r0, [r6]
	ldrh r0, [r7, #4]
	strh r0, [r6, #4]
	ldrh r0, [r7, #6]
	strh r0, [r6, #6]
	ldrh r0, [r7, #8]
	strh r0, [r6, #8]
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805BC9C: .4byte 0xFFFF0000
_0805BCA0: .4byte 0xFFFF0004
_0805BCA4: .4byte 0xC1FFFFFF

	thumb_func_start sub_805BCA8
sub_805BCA8: @ 0x0805BCA8
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	ldr r1, _0805BCE4 @ =gBmSt
	movs r0, #0x20
	ldrb r1, [r1, #4]
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #0
	bne _0805BCFA
	bl sub_805BDB4
	cmp r0, #0
	bne _0805BCEC
	bl sub_805BDA8
	adds r0, r5, #0
	bl sub_8002F9C
	ldr r0, _0805BCE8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0805BCFA
	lsls r0, r6, #0x10
	lsrs r0, r0, #0x10
	bl m4aSongNumStart
	b _0805BCFA
	.align 2, 0
_0805BCE4: .4byte gBmSt
_0805BCE8: .4byte gPlaySt
_0805BCEC:
	ldr r0, _0805BD00 @ =0x08605D40
	movs r1, #3
	bl SpawnProc
	str r5, [r0, #0x44]
	str r6, [r0, #0x48]
	strh r4, [r0, #0x2c]
_0805BCFA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805BD00: .4byte 0x08605D40

	thumb_func_start sub_805BD04
sub_805BD04: @ 0x0805BD04
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #5
	bne _0805BD1E
	adds r0, r4, #0
	bl Proc_Break
	b _0805BD4A
_0805BD1E:
	bl sub_805BDB4
	cmp r0, #0
	bne _0805BD4A
	bl sub_805BDA8
	ldr r0, [r4, #0x44]
	bl sub_8002F9C
	ldr r0, _0805BD50 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0805BD44
	ldr r0, [r4, #0x48]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl m4aSongNumStart
_0805BD44:
	adds r0, r4, #0
	bl Proc_Break
_0805BD4A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805BD50: .4byte gPlaySt

	thumb_func_start sub_805BD54
sub_805BD54: @ 0x0805BD54
	push {lr}
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl m4aSongNumStop
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805BD64
sub_805BD64: @ 0x0805BD64
	push {r4, lr}
	adds r4, r0, #0
	adds r2, r1, #0
	ldr r1, _0805BD88 @ =gBmSt
	movs r0, #0x20
	ldrb r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	bne _0805BD82
	adds r0, r2, #0
	bl SetBgmVolume
	adds r0, r4, #0
	bl OverrideBgm
_0805BD82:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805BD88: .4byte gBmSt

	thumb_func_start sub_805BD8C
sub_805BD8C: @ 0x0805BD8C
	push {lr}
	ldr r0, _0805BD98 @ =gMpi_FightBgm
	bl m4aMPlayStop
	pop {r0}
	bx r0
	.align 2, 0
_0805BD98: .4byte gMpi_FightBgm

	thumb_func_start sub_805BD9C
sub_805BD9C: @ 0x0805BD9C
	ldr r1, _0805BDA4 @ =0x0201F050
	movs r0, #0
	str r0, [r1]
	bx lr
	.align 2, 0
_0805BDA4: .4byte 0x0201F050

	thumb_func_start sub_805BDA8
sub_805BDA8: @ 0x0805BDA8
	ldr r1, _0805BDB0 @ =0x0201F050
	movs r0, #1
	str r0, [r1]
	bx lr
	.align 2, 0
_0805BDB0: .4byte 0x0201F050

	thumb_func_start sub_805BDB4
sub_805BDB4: @ 0x0805BDB4
	ldr r0, _0805BDBC @ =0x0201F050
	ldr r0, [r0]
	bx lr
	.align 2, 0
_0805BDBC: .4byte 0x0201F050

	thumb_func_start sub_805BDC0
sub_805BDC0: @ 0x0805BDC0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	ldr r1, _0805BDEC @ =gBmSt
	movs r0, #0x20
	ldrb r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	bne _0805BE68
	cmp r2, #0
	beq _0805BE38
	cmp r6, #0x77
	bgt _0805BDF0
	adds r0, r6, #0
	muls r0, r6, r0
	movs r1, #0x78
	bl Div
	adds r5, r0, #0
	subs r5, #0x78
	b _0805BE04
	.align 2, 0
_0805BDEC: .4byte gBmSt
_0805BDF0:
	movs r0, #0xf0
	subs r0, r0, r6
	adds r1, r0, #0
	muls r1, r0, r1
	adds r0, r1, #0
	movs r1, #0x78
	bl Div
	movs r1, #0x78
	subs r5, r1, r0
_0805BE04:
	ldr r2, _0805BE2C @ =gMPlayTable
	ldr r0, _0805BE30 @ =gSongTable
	lsls r1, r4, #3
	adds r1, r1, r0
	ldrh r3, [r1, #4]
	lsls r0, r3, #1
	adds r0, r0, r3
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r4, [r0]
	adds r0, r4, #0
	bl m4aMPlayImmInit
	ldr r1, _0805BE34 @ =0x0000FFFF
	lsls r2, r5, #0x18
	asrs r2, r2, #0x18
	adds r0, r4, #0
	bl m4aMPlayPanpotControl
	b _0805BE68
	.align 2, 0
_0805BE2C: .4byte gMPlayTable
_0805BE30: .4byte gSongTable
_0805BE34: .4byte 0x0000FFFF
_0805BE38:
	ldr r2, _0805BE70 @ =gMPlayTable
	ldr r0, _0805BE74 @ =gSongTable
	lsls r1, r4, #3
	adds r1, r1, r0
	ldrh r3, [r1, #4]
	lsls r0, r3, #1
	adds r0, r0, r3
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r4, [r0]
	adds r0, r4, #0
	bl m4aMPlayImmInit
	ldr r5, _0805BE78 @ =0x0000FFFF
	adds r0, r6, #0
	bl Screen2Pan
	adds r2, r0, #0
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	adds r0, r4, #0
	adds r1, r5, #0
	bl m4aMPlayPanpotControl
_0805BE68:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805BE70: .4byte gMPlayTable
_0805BE74: .4byte gSongTable
_0805BE78: .4byte 0x0000FFFF

	thumb_func_start sub_805BE7C
sub_805BE7C: @ 0x0805BE7C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	mov r8, r0
	mov sb, r1
	bl sub_804B80C
	adds r6, r0, #0
	mov r0, r8
	bl sub_804B6B0
	cmp r0, #1
	bne _0805BE9C
	b _0805C190
_0805BE9C:
	mov r0, r8
	bl sub_804B6C4
	adds r5, r0, #0
	cmp r5, #0
	bne _0805BEB4
	ldr r0, _0805BEB0 @ =0x0203CDC0
	movs r1, #0
	ldrsh r4, [r0, r1]
	b _0805BEBA
	.align 2, 0
_0805BEB0: .4byte 0x0203CDC0
_0805BEB4:
	ldr r0, _0805BEE4 @ =0x0203CDC0
	movs r3, #2
	ldrsh r4, [r0, r3]
_0805BEBA:
	lsls r0, r4, #0x10
	lsrs r0, r0, #0x10
	bl sub_805C1A0
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	cmp r4, #0x14
	bne _0805BED6
	mov r0, r8
	bl sub_805C2B0
	cmp r0, #0
	bne _0805BED6
	movs r7, #2
_0805BED6:
	cmp r5, #0
	bne _0805BEEC
	ldr r0, _0805BEE8 @ =0x0203CDC4
	movs r1, #0
	ldrsh r0, [r0, r1]
	b _0805BEF2
	.align 2, 0
_0805BEE4: .4byte 0x0203CDC0
_0805BEE8: .4byte 0x0203CDC4
_0805BEEC:
	ldr r0, _0805BF30 @ =0x0203CDC4
	movs r3, #2
	ldrsh r0, [r0, r3]
_0805BEF2:
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_805C2E0
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	ldr r4, _0805BF34 @ =0x0000FFFF
	mov r0, r8
	str r2, [sp]
	bl sub_805C76C
	mov r1, r8
	ldrh r1, [r1, #2]
	adds r0, r1, r0
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	movs r0, #0x80
	lsls r0, r0, #1
	mov r8, r0
	mov r0, sb
	subs r0, #0x19
	ldr r2, [sp]
	cmp r0, #0x31
	bls _0805BF24
	b _0805C16A
_0805BF24:
	lsls r0, r0, #2
	ldr r1, _0805BF38 @ =_0805BF3C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0805BF30: .4byte 0x0203CDC4
_0805BF34: .4byte 0x0000FFFF
_0805BF38: .4byte _0805BF3C
_0805BF3C: @ jump table
	.4byte _0805C004 @ case 0
	.4byte _0805C16A @ case 1
	.4byte _0805C0D4 @ case 2
	.4byte _0805C008 @ case 3
	.4byte _0805C010 @ case 4
	.4byte _0805C018 @ case 5
	.4byte _0805C020 @ case 6
	.4byte _0805C040 @ case 7
	.4byte _0805C060 @ case 8
	.4byte _0805C09E @ case 9
	.4byte _0805C0A2 @ case 10
	.4byte _0805C0A6 @ case 11
	.4byte _0805C0AA @ case 12
	.4byte _0805C16A @ case 13
	.4byte _0805C16A @ case 14
	.4byte _0805C0B4 @ case 15
	.4byte _0805C0B8 @ case 16
	.4byte _0805C0C0 @ case 17
	.4byte _0805C0C6 @ case 18
	.4byte _0805C16A @ case 19
	.4byte _0805C16A @ case 20
	.4byte _0805C16A @ case 21
	.4byte _0805C16A @ case 22
	.4byte _0805C16A @ case 23
	.4byte _0805C16A @ case 24
	.4byte _0805C16A @ case 25
	.4byte _0805C0D0 @ case 26
	.4byte _0805C0D4 @ case 27
	.4byte _0805C0EC @ case 28
	.4byte _0805C0FC @ case 29
	.4byte _0805C100 @ case 30
	.4byte _0805C104 @ case 31
	.4byte _0805C16A @ case 32
	.4byte _0805C16A @ case 33
	.4byte _0805C16A @ case 34
	.4byte _0805C108 @ case 35
	.4byte _0805C11C @ case 36
	.4byte _0805C130 @ case 37
	.4byte _0805C134 @ case 38
	.4byte _0805C13A @ case 39
	.4byte _0805C144 @ case 40
	.4byte _0805C148 @ case 41
	.4byte _0805C14C @ case 42
	.4byte _0805C16A @ case 43
	.4byte _0805C16A @ case 44
	.4byte _0805C152 @ case 45
	.4byte _0805C16A @ case 46
	.4byte _0805C156 @ case 47
	.4byte _0805C15A @ case 48
	.4byte _0805C164 @ case 49
_0805C004:
	movs r4, #0xd1
	b _0805C16C
_0805C008:
	ldr r1, _0805C00C @ =0x08605F34
	b _0805C0D6
	.align 2, 0
_0805C00C: .4byte 0x08605F34
_0805C010:
	ldr r1, _0805C014 @ =0x08605F50
	b _0805C0D6
	.align 2, 0
_0805C014: .4byte 0x08605F50
_0805C018:
	ldr r1, _0805C01C @ =0x08605F6C
	b _0805C0D6
	.align 2, 0
_0805C01C: .4byte 0x08605F6C
_0805C020:
	adds r0, r6, #0
	bl sub_805C3B8
	adds r0, r6, #0
	bl sub_805C308
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	beq _0805C088
	cmp r0, #1
	bgt _0805C07E
	cmp r0, #0
	bne _0805C08E
	movs r4, #0xd2
	b _0805C08E
_0805C040:
	adds r0, r6, #0
	bl sub_805C3B8
	adds r0, r6, #0
	bl sub_805C308
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	beq _0805C088
	cmp r0, #1
	bgt _0805C07E
	cmp r0, #0
	bne _0805C08E
	movs r4, #0xd3
	b _0805C08E
_0805C060:
	adds r0, r6, #0
	bl sub_805C3B8
	adds r0, r6, #0
	bl sub_805C308
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	beq _0805C088
	cmp r0, #1
	bgt _0805C07E
	cmp r0, #0
	beq _0805C084
	b _0805C08E
_0805C07E:
	cmp r0, #2
	beq _0805C08C
	b _0805C08E
_0805C084:
	movs r4, #0xd4
	b _0805C08E
_0805C088:
	movs r4, #0xd5
	b _0805C08E
_0805C08C:
	movs r4, #0xec
_0805C08E:
	adds r0, r6, #0
	bl sub_805C76C
	ldrh r6, [r6, #2]
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	b _0805C16C
_0805C09E:
	movs r4, #0xc9
	b _0805C16C
_0805C0A2:
	movs r4, #0xc8
	b _0805C16C
_0805C0A6:
	movs r4, #0xca
	b _0805C16C
_0805C0AA:
	ldr r4, _0805C0B0 @ =0x00000263
	b _0805C0EE
	.align 2, 0
_0805C0B0: .4byte 0x00000263
_0805C0B4:
	movs r4, #0xf6
	b _0805C16C
_0805C0B8:
	ldr r4, _0805C0BC @ =0x00000141
	b _0805C16C
	.align 2, 0
_0805C0BC: .4byte 0x00000141
_0805C0C0:
	movs r4, #0xa1
	lsls r4, r4, #1
	b _0805C16C
_0805C0C6:
	ldr r4, _0805C0CC @ =0x00000267
	b _0805C0EE
	.align 2, 0
_0805C0CC: .4byte 0x00000267
_0805C0D0:
	movs r4, #0xe7
	b _0805C16C
_0805C0D4:
	ldr r1, _0805C0E8 @ =0x08605F18
_0805C0D6:
	lsls r0, r7, #2
	adds r0, r0, r1
	ldr r1, [r0]
	lsls r0, r2, #1
	adds r0, r0, r5
	lsls r0, r0, #1
	adds r0, r0, r1
	ldrh r4, [r0]
	b _0805C16C
	.align 2, 0
_0805C0E8: .4byte 0x08605F18
_0805C0EC:
	ldr r4, _0805C0F8 @ =0x00000265
_0805C0EE:
	cmp r5, #0
	bne _0805C16C
	subs r4, #1
	b _0805C16C
	.align 2, 0
_0805C0F8: .4byte 0x00000265
_0805C0FC:
	movs r4, #0xce
	b _0805C16C
_0805C100:
	movs r4, #0xcf
	b _0805C16C
_0805C104:
	movs r4, #0xcb
	b _0805C16C
_0805C108:
	ldr r4, _0805C118 @ =0x00000263
	cmp r5, #0
	bne _0805C110
	subs r4, #1
_0805C110:
	movs r1, #0x80
	mov r8, r1
	b _0805C16C
	.align 2, 0
_0805C118: .4byte 0x00000263
_0805C11C:
	ldr r4, _0805C12C @ =0x00000267
	cmp r5, #0
	bne _0805C124
	subs r4, #1
_0805C124:
	movs r0, #0x80
	mov r8, r0
	b _0805C16C
	.align 2, 0
_0805C12C: .4byte 0x00000267
_0805C130:
	movs r4, #0xf1
	b _0805C16C
_0805C134:
	movs r4, #0x9b
	lsls r4, r4, #1
	b _0805C16C
_0805C13A:
	ldr r4, _0805C140 @ =0x00000117
	b _0805C16C
	.align 2, 0
_0805C140: .4byte 0x00000117
_0805C144:
	movs r4, #0xeb
	b _0805C16C
_0805C148:
	movs r4, #0xea
	b _0805C16C
_0805C14C:
	movs r4, #0x8c
	lsls r4, r4, #1
	b _0805C16C
_0805C152:
	movs r4, #0xe0
	b _0805C16C
_0805C156:
	movs r4, #0xed
	b _0805C16C
_0805C15A:
	ldr r4, _0805C160 @ =0x00000135
	b _0805C16C
	.align 2, 0
_0805C160: .4byte 0x00000135
_0805C164:
	movs r4, #0x9a
	lsls r4, r4, #1
	b _0805C16C
_0805C16A:
	movs r4, #0
_0805C16C:
	lsls r0, r4, #0x10
	asrs r4, r0, #0x10
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	beq _0805C190
	mov r1, r8
	adds r0, r4, #0
	str r3, [sp, #4]
	bl sub_805BCA8
	ldr r3, [sp, #4]
	lsls r1, r3, #0x10
	asrs r1, r1, #0x10
	movs r2, #1
	adds r0, r4, #0
	bl sub_805BDC0
_0805C190:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805C1A0
sub_805C1A0: @ 0x0805C1A0
	push {r4, lr}
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	bl sub_804C500
	cmp r0, #1
	bne _0805C1B2
_0805C1AE:
	movs r0, #0
	b _0805C2AA
_0805C1B2:
	cmp r4, #0x32
	bhi _0805C2A8
	lsls r0, r4, #2
	ldr r1, _0805C1C0 @ =_0805C1C4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0805C1C0: .4byte _0805C1C4
_0805C1C4: @ jump table
	.4byte _0805C2A8 @ case 0
	.4byte _0805C1AE @ case 1
	.4byte _0805C1AE @ case 2
	.4byte _0805C1AE @ case 3
	.4byte _0805C1AE @ case 4
	.4byte _0805C1AE @ case 5
	.4byte _0805C2A4 @ case 6
	.4byte _0805C2A4 @ case 7
	.4byte _0805C2A4 @ case 8
	.4byte _0805C2A4 @ case 9
	.4byte _0805C1AE @ case 10
	.4byte _0805C2A4 @ case 11
	.4byte _0805C290 @ case 12
	.4byte _0805C290 @ case 13
	.4byte _0805C29C @ case 14
	.4byte _0805C29C @ case 15
	.4byte _0805C294 @ case 16
	.4byte _0805C1AE @ case 17
	.4byte _0805C298 @ case 18
	.4byte _0805C2A0 @ case 19
	.4byte _0805C2A0 @ case 20
	.4byte _0805C294 @ case 21
	.4byte _0805C294 @ case 22
	.4byte _0805C2A4 @ case 23
	.4byte _0805C2A4 @ case 24
	.4byte _0805C1AE @ case 25
	.4byte _0805C1AE @ case 26
	.4byte _0805C1AE @ case 27
	.4byte _0805C1AE @ case 28
	.4byte _0805C2A4 @ case 29
	.4byte _0805C2A4 @ case 30
	.4byte _0805C2A4 @ case 31
	.4byte _0805C2A4 @ case 32
	.4byte _0805C2A4 @ case 33
	.4byte _0805C1AE @ case 34
	.4byte _0805C1AE @ case 35
	.4byte _0805C2A4 @ case 36
	.4byte _0805C1AE @ case 37
	.4byte _0805C298 @ case 38
	.4byte _0805C1AE @ case 39
	.4byte _0805C1AE @ case 40
	.4byte _0805C1AE @ case 41
	.4byte _0805C298 @ case 42
	.4byte _0805C1AE @ case 43
	.4byte _0805C2A8 @ case 44
	.4byte _0805C2A4 @ case 45
	.4byte _0805C2A8 @ case 46
	.4byte _0805C1AE @ case 47
	.4byte _0805C2A4 @ case 48
	.4byte _0805C2A4 @ case 49
	.4byte _0805C2A4 @ case 50
_0805C290:
	movs r0, #1
	b _0805C2AA
_0805C294:
	movs r0, #2
	b _0805C2AA
_0805C298:
	movs r0, #3
	b _0805C2AA
_0805C29C:
	movs r0, #4
	b _0805C2AA
_0805C2A0:
	movs r0, #5
	b _0805C2AA
_0805C2A4:
	movs r0, #6
	b _0805C2AA
_0805C2A8:
	movs r0, #0
_0805C2AA:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_805C2B0
sub_805C2B0: @ 0x0805C2B0
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_805C76C
	movs r2, #2
	ldrsh r1, [r4, r2]
	adds r5, r0, r1
	adds r0, r4, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _0805C2CE
	cmp r5, #0x58
	bgt _0805C2D6
	b _0805C2D2
_0805C2CE:
	cmp r5, #0x97
	ble _0805C2D6
_0805C2D2:
	movs r0, #1
	b _0805C2D8
_0805C2D6:
	movs r0, #0
_0805C2D8:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_805C2E0
sub_805C2E0: @ 0x0805C2E0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r2, r0, #0
	movs r1, #0
	cmp r0, #4
	bls _0805C302
	cmp r0, #8
	bhi _0805C2F4
	movs r1, #1
	b _0805C302
_0805C2F4:
	cmp r0, #0xb
	bhi _0805C2FC
	movs r1, #2
	b _0805C302
_0805C2FC:
	cmp r2, #0xf
	bhi _0805C302
	movs r1, #3
_0805C302:
	adds r0, r1, #0
	bx lr
	.align 2, 0

	thumb_func_start sub_805C308
sub_805C308: @ 0x0805C308
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r4, _0805C348 @ =0x0203CD46
	bl sub_804B6C4
	lsls r0, r0, #1
	adds r0, r0, r4
	movs r1, #0
	ldrsh r6, [r0, r1]
	adds r0, r5, #0
	bl sub_804B6C4
	lsls r1, r6, #1
	adds r6, r1, r0
	adds r0, r6, #0
	bl sub_804A5A8
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r0, r6, #2
	bl sub_804A5A8
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r4, r0
	beq _0805C350
	cmp r0, #0
	beq _0805C34C
	movs r0, #0
	b _0805C352
	.align 2, 0
_0805C348: .4byte 0x0203CD46
_0805C34C:
	movs r0, #1
	b _0805C352
_0805C350:
	movs r0, #2
_0805C352:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_805C358
sub_805C358: @ 0x0805C358
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _0805C37C @ =0x0000FFFF
	bl sub_805C3B8
	adds r0, r5, #0
	bl sub_805C308
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	beq _0805C38A
	cmp r0, #1
	bgt _0805C380
	cmp r0, #0
	beq _0805C386
	b _0805C390
	.align 2, 0
_0805C37C: .4byte 0x0000FFFF
_0805C380:
	cmp r0, #2
	beq _0805C38E
	b _0805C390
_0805C386:
	movs r4, #0xd4
	b _0805C390
_0805C38A:
	movs r4, #0xd5
	b _0805C390
_0805C38E:
	movs r4, #0xec
_0805C390:
	lsls r0, r4, #0x10
	asrs r4, r0, #0x10
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	beq _0805C3B2
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r4, #0
	bl sub_805BCA8
	movs r0, #2
	ldrsh r1, [r5, r0]
	adds r0, r4, #0
	movs r2, #1
	bl sub_805BDC0
_0805C3B2:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_805C3B8
sub_805C3B8: @ 0x0805C3B8
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_804B80C
	adds r5, r0, #0
	adds r0, r4, #0
	bl sub_805C308
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bgt _0805C3F4
	cmp r0, #0
	blt _0805C3F4
	adds r0, r5, #0
	bl sub_804B7B0
	cmp r0, #1
	bne _0805C3F4
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0xd8
	bl sub_805BCA8
	movs r0, #2
	ldrsh r1, [r4, r0]
	movs r0, #0xd8
	movs r2, #1
	bl sub_805BDC0
_0805C3F4:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805C3FC
sub_805C3FC: @ 0x0805C3FC
	ldr r2, _0805C414 @ =gBattleHits
	movs r1, #8
	ldrb r2, [r2, #2]
	ands r1, r2
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	rsbs r1, r1, #0
	lsrs r1, r1, #0x1f
	cmp r0, r1
	beq _0805C418
	movs r0, #0
	b _0805C41A
	.align 2, 0
_0805C414: .4byte gBattleHits
_0805C418:
	movs r0, #1
_0805C41A:
	bx lr

	thumb_func_start sub_805C41C
sub_805C41C: @ 0x0805C41C
	push {lr}
	cmp r0, #0
	beq _0805C518
	bl GetItemIid
	subs r0, #0x43
	cmp r0, #0x34
	bhi _0805C518
	lsls r0, r0, #2
	ldr r1, _0805C438 @ =_0805C43C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0805C438: .4byte _0805C43C
_0805C43C: @ jump table
	.4byte _0805C510 @ case 0
	.4byte _0805C510 @ case 1
	.4byte _0805C510 @ case 2
	.4byte _0805C510 @ case 3
	.4byte _0805C510 @ case 4
	.4byte _0805C518 @ case 5
	.4byte _0805C518 @ case 6
	.4byte _0805C510 @ case 7
	.4byte _0805C514 @ case 8
	.4byte _0805C514 @ case 9
	.4byte _0805C518 @ case 10
	.4byte _0805C510 @ case 11
	.4byte _0805C518 @ case 12
	.4byte _0805C514 @ case 13
	.4byte _0805C518 @ case 14
	.4byte _0805C510 @ case 15
	.4byte _0805C518 @ case 16
	.4byte _0805C518 @ case 17
	.4byte _0805C518 @ case 18
	.4byte _0805C518 @ case 19
	.4byte _0805C518 @ case 20
	.4byte _0805C518 @ case 21
	.4byte _0805C518 @ case 22
	.4byte _0805C518 @ case 23
	.4byte _0805C518 @ case 24
	.4byte _0805C518 @ case 25
	.4byte _0805C518 @ case 26
	.4byte _0805C518 @ case 27
	.4byte _0805C518 @ case 28
	.4byte _0805C518 @ case 29
	.4byte _0805C518 @ case 30
	.4byte _0805C518 @ case 31
	.4byte _0805C518 @ case 32
	.4byte _0805C518 @ case 33
	.4byte _0805C518 @ case 34
	.4byte _0805C518 @ case 35
	.4byte _0805C518 @ case 36
	.4byte _0805C518 @ case 37
	.4byte _0805C518 @ case 38
	.4byte _0805C518 @ case 39
	.4byte _0805C518 @ case 40
	.4byte _0805C518 @ case 41
	.4byte _0805C518 @ case 42
	.4byte _0805C518 @ case 43
	.4byte _0805C518 @ case 44
	.4byte _0805C518 @ case 45
	.4byte _0805C518 @ case 46
	.4byte _0805C518 @ case 47
	.4byte _0805C518 @ case 48
	.4byte _0805C518 @ case 49
	.4byte _0805C518 @ case 50
	.4byte _0805C510 @ case 51
	.4byte _0805C510 @ case 52
_0805C510:
	movs r0, #2
	b _0805C51A
_0805C514:
	movs r0, #1
	b _0805C51A
_0805C518:
	movs r0, #0
_0805C51A:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_805C520
sub_805C520: @ 0x0805C520
	push {r4, r5, r6, lr}
	ldr r0, _0805C570 @ =0x0203CD7C
	ldr r1, _0805C574 @ =0x0203CD80
	ldr r4, [r0]
	ldr r6, [r1]
	ldr r1, _0805C578 @ =gBmSt
	movs r0, #0x20
	ldrb r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _0805C538
	b _0805C728
_0805C538:
	ldr r1, _0805C57C @ =0x0201F04C
	movs r0, #1
	str r0, [r1]
	ldr r1, _0805C580 @ =0x0203CD08
	ldr r0, _0805C584 @ =0x0203CCF4
	movs r2, #0
	ldrsh r0, [r0, r2]
	lsls r0, r0, #1
	adds r0, r0, r1
	movs r5, #0x49
	ldrh r0, [r0]
	cmp r0, #1
	beq _0805C554
	movs r5, #0x48
_0805C554:
	bl sub_804C500
	cmp r0, #1
	beq _0805C564
	bl sub_8042578
	cmp r0, #1
	bne _0805C588
_0805C564:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x3a
	bl sub_805BD64
	b _0805C72E
	.align 2, 0
_0805C570: .4byte 0x0203CD7C
_0805C574: .4byte 0x0203CD80
_0805C578: .4byte gBmSt
_0805C57C: .4byte 0x0201F04C
_0805C580: .4byte 0x0203CD08
_0805C584: .4byte 0x0203CCF4
_0805C588:
	ldr r0, _0805C59C @ =0x0203CD14
	ldrh r0, [r0]
	cmp r0, #4
	bne _0805C5A0
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x1c
	bl sub_805BD64
	b _0805C72E
	.align 2, 0
_0805C59C: .4byte 0x0203CD14
_0805C5A0:
	movs r2, #0
	ldr r0, [r4]
	ldrb r1, [r0, #4]
	adds r3, r0, #0
	cmp r1, #0x65
	bne _0805C5AE
	movs r2, #1
_0805C5AE:
	cmp r1, #0x66
	bne _0805C5B4
	movs r2, #1
_0805C5B4:
	cmp r2, #1
	bne _0805C5C4
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x19
	bl sub_805BD64
	b _0805C72E
_0805C5C4:
	movs r2, #0
	cmp r1, #0x62
	bne _0805C5CC
	movs r2, #1
_0805C5CC:
	ldr r0, [r6]
	ldrb r0, [r0, #4]
	cmp r0, #0x62
	bne _0805C5D6
	movs r2, #1
_0805C5D6:
	cmp r1, #0x63
	bne _0805C5DC
	movs r2, #1
_0805C5DC:
	cmp r0, #0x63
	bne _0805C5E2
	movs r2, #1
_0805C5E2:
	cmp r1, #0x59
	bne _0805C5E8
	movs r2, #1
_0805C5E8:
	cmp r0, #0x59
	bne _0805C5EE
	movs r2, #1
_0805C5EE:
	cmp r2, #1
	bne _0805C5FE
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x17
	bl sub_805BD64
	b _0805C72E
_0805C5FE:
	movs r2, #0
	ldrb r1, [r3, #4]
	cmp r1, #0x64
	bne _0805C608
	movs r2, #1
_0805C608:
	cmp r0, #0x64
	bne _0805C60E
	movs r2, #1
_0805C60E:
	cmp r2, #1
	bne _0805C61E
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x18
	bl sub_805BD64
	b _0805C72E
_0805C61E:
	movs r2, #0
	cmp r1, #0x67
	bne _0805C626
	movs r2, #1
_0805C626:
	cmp r2, #1
	bne _0805C636
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x15
	bl sub_805BD64
	b _0805C72E
_0805C636:
	movs r2, #0
	ldr r1, [r4, #4]
	ldr r0, [r3, #0x28]
	ldr r1, [r1, #0x24]
	orrs r0, r1
	movs r1, #0x80
	lsls r1, r1, #8
	ands r0, r1
	cmp r0, #0
	beq _0805C656
	movs r0, #0xc0
	ldrb r4, [r4, #0xb]
	ands r0, r4
	cmp r0, #0x80
	bne _0805C656
	movs r2, #1
_0805C656:
	cmp r2, #1
	bne _0805C666
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x16
	bl sub_805BD64
	b _0805C72E
_0805C666:
	movs r2, #0
	ldr r0, [r6, #4]
	adds r3, r0, #0
	ldrb r0, [r3, #4]
	cmp r0, #0x37
	bne _0805C682
	ldr r1, _0805C694 @ =gBattleSt
	movs r0, #0x40
	ldrb r1, [r1, #1]
	ands r0, r1
	movs r2, #1
	cmp r0, #0
	beq _0805C682
	movs r2, #2
_0805C682:
	cmp r2, #1
	bne _0805C698
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x40
	bl sub_805BD64
	b _0805C72E
	.align 2, 0
_0805C694: .4byte gBattleSt
_0805C698:
	cmp r2, #2
	bne _0805C6A8
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x41
	bl sub_805BD64
	b _0805C72E
_0805C6A8:
	movs r2, #0
	ldrb r3, [r3, #4]
	cmp r3, #0x36
	bne _0805C6C0
	ldr r1, _0805C6D0 @ =gBattleSt
	movs r0, #0x40
	ldrb r1, [r1, #1]
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	rsbs r0, r0, #0
	lsrs r2, r0, #0x1f
_0805C6C0:
	cmp r2, #1
	bne _0805C6D4
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x14
	bl sub_805BD64
	b _0805C72E
	.align 2, 0
_0805C6D0: .4byte gBattleSt
_0805C6D4:
	movs r0, #0
	bl sub_805C3FC
	cmp r0, #1
	bne _0805C6E8
	ldr r0, _0805C6E4 @ =gBattleUnitA
	b _0805C6F4
	.align 2, 0
_0805C6E4: .4byte gBattleUnitA
_0805C6E8:
	movs r0, #1
	bl sub_805C3FC
	cmp r0, #1
	bne _0805C704
	ldr r0, _0805C700 @ =gBattleUnitB
_0805C6F4:
	adds r0, #0x4a
	ldrh r0, [r0]
	bl sub_805C41C
	b _0805C706
	.align 2, 0
_0805C700: .4byte gBattleUnitB
_0805C704:
	movs r0, #0
_0805C706:
	cmp r0, #1
	beq _0805C712
	cmp r0, #2
	bne _0805C714
	movs r5, #0x1b
	b _0805C714
_0805C712:
	movs r5, #0x1a
_0805C714:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r5, r0
	beq _0805C728
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r5, #0
	bl sub_805BD64
	b _0805C72E
_0805C728:
	ldr r1, _0805C734 @ =0x0201F04C
	movs r0, #0
	str r0, [r1]
_0805C72E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805C734: .4byte 0x0201F04C

	thumb_func_start sub_805C738
sub_805C738: @ 0x0805C738
	push {lr}
	bl sub_8058F38
	cmp r0, #0
	bne _0805C756
	ldr r1, _0805C75C @ =gBmSt
	movs r0, #0x20
	ldrb r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	bne _0805C756
	ldr r0, _0805C760 @ =0x0201F04C
	ldr r0, [r0]
	cmp r0, #0
	bne _0805C764
_0805C756:
	bl MakeBgmOverridePersist
	b _0805C768
	.align 2, 0
_0805C75C: .4byte gBmSt
_0805C760: .4byte 0x0201F04C
_0805C764:
	bl RestoreBgm
_0805C768:
	pop {r0}
	bx r0

	thumb_func_start sub_805C76C
sub_805C76C: @ 0x0805C76C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r2, [r0, #0x3c]
	ldr r3, [r2]
	ldr r1, _0805C79C @ =0xFFFF0000
	adds r0, r3, #0
	ands r0, r1
	cmp r0, r1
	bne _0805C790
	ldr r7, _0805C7A0 @ =0x0000FFFF
	ands r7, r3
	cmp r7, #0
	beq _0805C790
_0805C788:
	subs r7, #1
	adds r2, #0xc
	cmp r7, #0
	bne _0805C788
_0805C790:
	adds r6, r2, #0
	movs r7, #0
	movs r0, #0
	mov r8, r0
	b _0805C7D8
	.align 2, 0
_0805C79C: .4byte 0xFFFF0000
_0805C7A0: .4byte 0x0000FFFF
_0805C7A4:
	movs r0, #6
	ldrsh r5, [r6, r0]
	ldr r0, [r6]
	bl sub_805BAEC
	lsls r0, r0, #0x10
	asrs r0, r0, #0x11
	adds r5, r5, r0
	ldr r0, [r6]
	bl sub_805BAEC
	adds r4, r0, #0
	ldr r0, [r6]
	bl sub_805BB08
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r1, r4, #0
	muls r1, r0, r1
	adds r0, r1, #0
	muls r0, r5, r0
	add r8, r0
	adds r7, r7, r1
	adds r6, #0xc
_0805C7D8:
	ldr r0, [r6]
	cmp r0, #1
	bne _0805C7A4
	cmp r7, #0
	bne _0805C7EC
	ldr r0, _0805C7E8 @ =0x7FFFFFFF
	b _0805C7F4
	.align 2, 0
_0805C7E8: .4byte 0x7FFFFFFF
_0805C7EC:
	mov r0, r8
	adds r1, r7, #0
	bl Div
_0805C7F4:
	mov r8, r0
	mov r0, r8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_805C804
sub_805C804: @ 0x0805C804
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r2, #0
	adds r6, r3, #0
	bl sub_805BCA8
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl sub_805BDC0
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_805C820
sub_805C820: @ 0x0805C820
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r2, #0
	bl sub_805BCA8
	adds r0, r4, #0
	bl sub_805C76C
	adds r1, r0, #0
	adds r0, r5, #0
	movs r2, #1
	bl sub_805BDC0
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_805C840
sub_805C840: @ 0x0805C840
	ldr r0, _0805C850 @ =0x0201F054
	ldr r0, [r0]
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	beq _0805C854
	movs r0, #0
	b _0805C856
	.align 2, 0
_0805C850: .4byte 0x0201F054
_0805C854:
	movs r0, #1
_0805C856:
	bx lr

	thumb_func_start sub_805C858
sub_805C858: @ 0x0805C858
	push {lr}
	ldr r0, _0805C868 @ =0x0201F054
	ldr r0, [r0]
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_0805C868: .4byte 0x0201F054

	thumb_func_start sub_805C86C
sub_805C86C: @ 0x0805C86C
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_8047300
	ldr r4, _0805C894 @ =0x0201F054
	ldr r0, _0805C898 @ =0x08605F88
	movs r1, #3
	bl SpawnProc
	str r0, [r4]
	str r5, [r0, #0x5c]
	movs r2, #0
	movs r1, #0
	strh r1, [r0, #0x2c]
	adds r0, #0x29
	strb r2, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805C894: .4byte 0x0201F054
_0805C898: .4byte 0x08605F88

	thumb_func_start sub_805C89C
sub_805C89C: @ 0x0805C89C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r7, #0
	movs r1, #0
	mov r8, r1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r1, r0, #0x10
	cmp r1, #1
	bne _0805C8F8
	ldr r0, [r4, #0x5c]
	bl sub_8046ED8
	adds r0, r5, #0
	bl sub_8046ED8
	adds r0, r5, #0
	bl sub_805CB6C
	adds r0, r5, #0
	bl sub_805CC64
	ldr r2, _0805C8F4 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r3, [r2, #1]
	ands r0, r3
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	b _0805CB56
	.align 2, 0
_0805C8F4: .4byte gDispIo
_0805C8F8:
	cmp r1, #0x5f
	bne _0805C928
	ldr r0, [r4, #0x5c]
	movs r1, #0xa
	bl sub_8046794
	ldr r0, _0805C924 @ =0x0000013B
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl sub_805C804
	movs r0, #1
	movs r1, #0
	movs r2, #8
	bl SetBgOffset
	b _0805CB56
	.align 2, 0
_0805C924: .4byte 0x0000013B
_0805C928:
	cmp r1, #0x6a
	bne _0805C94C
	ldr r1, [r4, #0x5c]
	ldr r0, _0805C948 @ =0x0000F3FF
	ldrh r2, [r1, #8]
	ands r0, r2
	strh r0, [r1, #8]
	ldr r1, [r4, #0x5c]
	movs r3, #0x80
	lsls r3, r3, #3
	adds r0, r3, #0
	ldrh r2, [r1, #8]
	orrs r0, r2
	strh r0, [r1, #8]
	b _0805CB56
	.align 2, 0
_0805C948: .4byte 0x0000F3FF
_0805C94C:
	cmp r1, #0x74
	bne _0805C95C
	ldr r0, [r4, #0x5c]
	movs r1, #0xc
	movs r2, #0
	bl sub_805CFC0
	b _0805CB56
_0805C95C:
	cmp r1, #0x78
	bne _0805C968
	ldr r0, [r4, #0x5c]
	bl sub_805CD68
	b _0805CB56
_0805C968:
	cmp r1, #0x80
	bne _0805C974
	movs r0, #1
	bl sub_804B8B0
	b _0805CB56
_0805C974:
	cmp r1, #0x7e
	bne _0805C9BC
	ldr r0, [r4, #0x5c]
	movs r1, #2
	str r1, [sp]
	movs r1, #0x38
	movs r2, #7
	movs r3, #0
	bl sub_804C8D4
	adds r2, r0, #0
	ldr r0, [r4, #0x5c]
	movs r1, #0x40
	str r1, [sp]
	adds r1, r2, #0
	movs r2, #0x38
	movs r3, #0
	bl sub_805D09C
	ldr r0, [r4, #0x5c]
	ldr r2, _0805C9B8 @ =sub_804CD4C
	movs r1, #0x38
	bl sub_804CC68
	ldr r0, [r4, #0x5c]
	mov r3, r8
	str r3, [sp]
	str r3, [sp, #4]
	movs r1, #0
	movs r2, #0x38
	movs r3, #0x10
	bl sub_804CD88
	b _0805CB56
	.align 2, 0
_0805C9B8: .4byte sub_804CD4C
_0805C9BC:
	cmp r1, #0xf2
	bne _0805CA58
	ldr r0, [r4, #0x5c]
	bl sub_805CBB0
	ldr r0, [r4, #0x5c]
	bl sub_805CCE8
	ldr r6, _0805CA50 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r6, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r6, #1]
	ldr r0, [r4, #0x5c]
	movs r1, #2
	str r1, [sp]
	movs r1, #0x38
	movs r2, #7
	movs r3, #0x40
	bl sub_804C8D4
	adds r2, r0, #0
	ldr r0, [r4, #0x5c]
	mov r3, r8
	str r3, [sp]
	adds r1, r2, #0
	movs r2, #0x38
	movs r3, #0x40
	bl sub_805D09C
	ldr r0, [r4, #0x5c]
	ldr r2, _0805CA54 @ =sub_804CD4C
	movs r1, #0x38
	bl sub_804CC68
	adds r2, r6, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r6, #0
	adds r0, #0x44
	strb r7, [r0]
	adds r0, #1
	movs r1, #0x10
	strb r1, [r0]
	adds r0, #1
	strb r7, [r0]
	ldr r0, [r4, #0x5c]
	str r1, [sp]
	mov r2, r8
	str r2, [sp, #4]
	movs r1, #0
	movs r2, #0x38
	movs r3, #0
	bl sub_804CD88
	movs r0, #0x9e
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	movs r3, #2
	ldrsh r2, [r5, r3]
	b _0805CB36
	.align 2, 0
_0805CA50: .4byte gDispIo
_0805CA54: .4byte sub_804CD4C
_0805CA58:
	movs r0, #0x9c
	lsls r0, r0, #1
	cmp r1, r0
	bne _0805CA88
	movs r0, #0
	bl sub_804B8E8
	ldr r0, _0805CA84 @ =0x0000F3FF
	ldrh r1, [r5, #8]
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5, #8]
	adds r0, r5, #0
	movs r1, #0xc
	movs r2, #1
	bl sub_805CFC0
	b _0805CB56
	.align 2, 0
_0805CA84: .4byte 0x0000F3FF
_0805CA88:
	movs r0, #0x9f
	lsls r0, r0, #1
	cmp r1, r0
	bne _0805CAAA
	adds r0, r5, #0
	bl sub_805CD68
	ldr r0, [r4, #0x5c]
	movs r1, #0xa
	bl sub_8046794
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	b _0805CB56
_0805CAAA:
	movs r3, #0x2c
	ldrsh r1, [r4, r3]
	movs r0, #0xa5
	lsls r0, r0, #1
	cmp r1, r0
	bne _0805CACC
	ldr r0, _0805CAC8 @ =0x0000F3FF
	ldrh r1, [r5, #8]
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5, #8]
	b _0805CB56
	.align 2, 0
_0805CAC8: .4byte 0x0000F3FF
_0805CACC:
	movs r0, #0xad
	lsls r0, r0, #1
	cmp r1, r0
	bne _0805CAE4
	bl sub_8047358
	adds r0, r5, #0
	movs r1, #0xa
	movs r2, #0x46
	bl sub_804685C
	b _0805CB56
_0805CAE4:
	movs r0, #0xb2
	lsls r0, r0, #1
	cmp r1, r0
	bne _0805CB48
	adds r0, r5, #0
	movs r1, #0x82
	bl sub_805CDCC
	adds r0, r5, #0
	movs r1, #0x82
	bl sub_805CF38
	movs r0, #0
	str r0, [sp]
	movs r0, #2
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x5a
	movs r2, #0x28
	movs r3, #0xe
	bl sub_804CD88
	movs r4, #0x80
	lsls r4, r4, #1
	movs r0, #1
	str r0, [sp]
	adds r0, r5, #0
	movs r1, #0x82
	movs r2, #0xa
	adds r3, r4, #0
	bl sub_804C8D4
	ldr r2, _0805CB40 @ =sub_804CD4C
	adds r0, r5, #0
	movs r1, #0x82
	bl sub_804CC68
	ldr r0, _0805CB44 @ =0x0000013D
	movs r3, #2
	ldrsh r2, [r5, r3]
	adds r1, r4, #0
_0805CB36:
	movs r3, #1
	bl sub_805C804
	b _0805CB56
	.align 2, 0
_0805CB40: .4byte sub_804CD4C
_0805CB44: .4byte 0x0000013D
_0805CB48:
	movs r0, #0x94
	lsls r0, r0, #2
	cmp r1, r0
	bne _0805CB56
	adds r0, r4, #0
	bl Proc_Break
_0805CB56:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805CB64
sub_805CB64: @ 0x0805CB64
	adds r0, #0x29
	movs r1, #1
	strb r1, [r0]
	bx lr

	thumb_func_start sub_805CB6C
sub_805CB6C: @ 0x0805CB6C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0805CB9C @ =0x08605FA8
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0805CBA0 @ =0x081C9F34
	str r1, [r0, #0x48]
	ldr r1, _0805CBA4 @ =0x08605FC0
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _0805CBA8 @ =0x0860601C
	str r1, [r0, #0x54]
	ldr r1, _0805CBAC @ =0x08606078
	str r1, [r0, #0x58]
	bl sub_8047500
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805CB9C: .4byte 0x08605FA8
_0805CBA0: .4byte 0x081C9F34
_0805CBA4: .4byte 0x08605FC0
_0805CBA8: .4byte 0x0860601C
_0805CBAC: .4byte 0x08606078

	thumb_func_start sub_805CBB0
sub_805CBB0: @ 0x0805CBB0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0805CBE0 @ =0x08605FA8
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r1, [r0, #0x44]
	ldr r1, _0805CBE4 @ =0x081C9FA6
	str r1, [r0, #0x48]
	ldr r1, _0805CBE8 @ =0x08605FC0
	str r1, [r0, #0x4c]
	str r1, [r0, #0x50]
	ldr r1, _0805CBEC @ =0x0860601C
	str r1, [r0, #0x54]
	ldr r1, _0805CBF0 @ =0x08606078
	str r1, [r0, #0x58]
	bl sub_8047500
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805CBE0: .4byte 0x08605FA8
_0805CBE4: .4byte 0x081C9FA6
_0805CBE8: .4byte 0x08605FC0
_0805CBEC: .4byte 0x0860601C
_0805CBF0: .4byte 0x08606078

	thumb_func_start sub_805CBF4
sub_805CBF4: @ 0x0805CBF4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	adds r0, #0x2c
	adds r1, r7, #0
	adds r1, #0x44
	ldr r2, [r7, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r5, r0, #0x10
	cmp r5, #0
	blt _0805CC42
	ldr r6, [r7, #0x4c]
	ldr r0, [r7, #0x50]
	mov r8, r0
	ldr r0, [r7, #0x54]
	ldr r4, [r7, #0x58]
	lsls r5, r5, #2
	adds r0, r5, r0
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	adds r4, r5, r4
	ldr r0, [r4]
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, [r7, #0x5c]
	adds r6, r5, r6
	ldr r1, [r6]
	add r5, r8
	ldr r2, [r5]
	bl sub_804799C
	b _0805CC58
_0805CC42:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r5, r0
	bne _0805CC58
	bl sub_80474D8
	bl sub_80475D8
	adds r0, r7, #0
	bl Proc_End
_0805CC58:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805CC64
sub_805CC64: @ 0x0805CC64
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0805CC7C @ =0x086060D4
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805CC7C: .4byte 0x086060D4

	thumb_func_start sub_805CC80
sub_805CC80: @ 0x0805CC80
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	beq _0805CCC2
	cmp r0, #0x11
	beq _0805CCC2
	cmp r0, #0x22
	beq _0805CCC2
	cmp r0, #0x28
	beq _0805CCC2
	cmp r0, #0x2e
	beq _0805CCC2
	cmp r0, #0x34
	beq _0805CCC2
	cmp r0, #0x3a
	beq _0805CCC2
	cmp r0, #0x3e
	beq _0805CCC2
	cmp r0, #0x42
	beq _0805CCC2
	cmp r0, #0x44
	beq _0805CCC2
	movs r1, #0x2c
	ldrsh r0, [r2, r1]
	cmp r0, #0x46
	beq _0805CCC2
	cmp r0, #0x48
	bne _0805CCD8
_0805CCC2:
	movs r0, #0x9f
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r2, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl sub_805C804
	b _0805CCE2
_0805CCD8:
	cmp r0, #0x50
	bne _0805CCE2
	adds r0, r2, #0
	bl Proc_Break
_0805CCE2:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805CCE8
sub_805CCE8: @ 0x0805CCE8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0805CD00 @ =0x086060EC
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805CD00: .4byte 0x086060EC

	thumb_func_start sub_805CD04
sub_805CD04: @ 0x0805CD04
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x56
	beq _0805CD42
	cmp r0, #0x58
	beq _0805CD42
	cmp r0, #0x5a
	beq _0805CD42
	cmp r0, #0x5c
	beq _0805CD42
	cmp r0, #0x5e
	beq _0805CD42
	cmp r0, #0x60
	beq _0805CD42
	cmp r0, #0x62
	beq _0805CD42
	cmp r0, #0x64
	beq _0805CD42
	cmp r0, #0x66
	beq _0805CD42
	cmp r0, #0x68
	beq _0805CD42
	movs r1, #0x2c
	ldrsh r0, [r2, r1]
	cmp r0, #0x6a
	bne _0805CD58
_0805CD42:
	movs r0, #0x9f
	lsls r0, r0, #1
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r2, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl sub_805C804
	b _0805CD62
_0805CD58:
	cmp r0, #0x6e
	bne _0805CD62
	adds r0, r2, #0
	bl Proc_Break
_0805CD62:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805CD68
sub_805CD68: @ 0x0805CD68
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _0805CDA4 @ =0x08606104
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r4, [r5, #0x5c]
	ldr r3, _0805CDA8 @ =0x085E5858
	str r3, [sp]
	adds r0, r4, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r5, #0x60]
	ldr r0, _0805CDAC @ =0x0812D80C
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0805CDB0 @ =0x0812D374
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805CDA4: .4byte 0x08606104
_0805CDA8: .4byte 0x085E5858
_0805CDAC: .4byte 0x0812D80C
_0805CDB0: .4byte 0x0812D374

	thumb_func_start sub_805CDB4
sub_805CDB4: @ 0x0805CDB4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x60]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805CDCC
sub_805CDCC: @ 0x0805CDCC
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, _0805CEBC @ =0x08606124
	movs r1, #3
	bl SpawnProc
	str r5, [r0, #0x5c]
	movs r6, #0
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r4, [r0, #0x2e]
	ldr r0, _0805CEC0 @ =0x08127778
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, _0805CEC4 @ =0x081B4E9C
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	ldr r0, _0805CEC8 @ =0x081B4F9C
	ldr r1, _0805CECC @ =gBg1Tm
	movs r2, #1
	str r2, [sp]
	adds r2, #0xff
	str r2, [sp, #4]
	movs r2, #0x20
	movs r3, #0x20
	bl sub_805B1AC
	movs r0, #2
	bl EnableBgSync
	bl sub_8047500
	ldr r0, _0805CED0 @ =gDispIo
	mov ip, r0
	mov r2, ip
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	mov r1, ip
	adds r1, #0x44
	movs r0, #0xe
	strb r0, [r1]
	adds r1, #1
	movs r4, #8
	movs r0, #8
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r6, [r0]
	mov r6, ip
	adds r6, #0x37
	movs r3, #0x20
	ldrb r1, [r6]
	orrs r1, r3
	movs r0, #0x21
	rsbs r0, r0, #0
	mov r2, ip
	ldrb r2, [r2, #1]
	ands r0, r2
	movs r2, #0x41
	rsbs r2, r2, #0
	ands r0, r2
	movs r2, #0x80
	orrs r0, r2
	mov r7, ip
	strb r0, [r7, #1]
	movs r0, #2
	rsbs r0, r0, #0
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	movs r0, #4
	orrs r1, r0
	orrs r1, r4
	movs r0, #0x10
	orrs r1, r0
	strb r1, [r6]
	ldr r0, _0805CED4 @ =0x0000FFE0
	ldrh r1, [r7, #0x3c]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	ldr r1, _0805CED8 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xe0
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r7, #0x3c]
	mov r0, ip
	adds r0, #0x3d
	ldrb r7, [r0]
	orrs r3, r7
	strb r3, [r0]
	ldr r0, [r5, #0x1c]
	movs r1, #0x80
	lsls r1, r1, #4
	orrs r0, r1
	str r0, [r5, #0x1c]
	ldr r0, _0805CEDC @ =0x0000F3FF
	ldrh r1, [r5, #8]
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5, #8]
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805CEBC: .4byte 0x08606124
_0805CEC0: .4byte 0x08127778
_0805CEC4: .4byte 0x081B4E9C
_0805CEC8: .4byte 0x081B4F9C
_0805CECC: .4byte gBg1Tm
_0805CED0: .4byte gDispIo
_0805CED4: .4byte 0x0000FFE0
_0805CED8: .4byte 0x0000E0FF
_0805CEDC: .4byte 0x0000F3FF

	thumb_func_start sub_805CEE0
sub_805CEE0: @ 0x0805CEE0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, [r4, #0x5c]
	ldr r1, _0805CF2C @ =gDispIo
	ldrh r0, [r1, #0x22]
	subs r0, #1
	strh r0, [r1, #0x22]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _0805CF24
	bl sub_80474D8
	bl sub_80475D8
	ldr r0, [r5, #0x1c]
	ldr r1, _0805CF30 @ =0xFFFFF7FF
	ands r0, r1
	str r0, [r5, #0x1c]
	ldr r0, _0805CF34 @ =0x0000F3FF
	ldrh r1, [r5, #8]
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5, #8]
	adds r0, r4, #0
	bl Proc_Break
_0805CF24:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805CF2C: .4byte gDispIo
_0805CF30: .4byte 0xFFFFF7FF
_0805CF34: .4byte 0x0000F3FF

	thumb_func_start sub_805CF38
sub_805CF38: @ 0x0805CF38
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _0805CF54 @ =0x0860613C
	movs r1, #4
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805CF54: .4byte 0x0860613C

	thumb_func_start sub_805CF58
sub_805CF58: @ 0x0805CF58
	push {r4, lr}
	sub sp, #0x48
	adds r4, r0, #0
	ldr r2, [r4, #0x5c]
	mov r1, sp
	ldrh r0, [r2, #2]
	strh r0, [r1, #2]
	ldrh r0, [r2, #4]
	strh r0, [r1, #4]
	ldr r0, [r2, #0x3c]
	str r0, [sp, #0x3c]
	ldr r0, [r2, #0x1c]
	ldr r1, _0805CFB4 @ =0xFFFFF7FF
	ands r0, r1
	str r0, [sp, #0x1c]
	mov r0, sp
	ldrh r1, [r2, #8]
	strh r1, [r0, #8]
	mov r2, sp
	ldr r0, _0805CFB8 @ =0x0000F3FF
	ands r0, r1
	strh r0, [r2, #8]
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2, #8]
	mov r0, sp
	bl BasPutOam
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	bne _0805CFAA
	adds r0, r4, #0
	bl Proc_Break
_0805CFAA:
	add sp, #0x48
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805CFB4: .4byte 0xFFFFF7FF
_0805CFB8: .4byte 0x0000F3FF

	thumb_func_start nullsub_24
nullsub_24: @ 0x0805CFBC
	bx lr
	.align 2, 0

	thumb_func_start sub_805CFC0
sub_805CFC0: @ 0x0805CFC0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	ldr r0, _0805CFE8 @ =0x0860615C
	movs r1, #4
	bl SpawnProc
	adds r1, r0, #0
	str r4, [r1, #0x5c]
	movs r2, #0
	strh r2, [r1, #0x2c]
	strh r5, [r1, #0x2e]
	cmp r6, #0
	bne _0805CFEC
	strh r2, [r1, #0x32]
	movs r0, #0x10
	strh r0, [r1, #0x34]
	b _0805CFF2
	.align 2, 0
_0805CFE8: .4byte 0x0860615C
_0805CFEC:
	movs r0, #0x10
	strh r0, [r1, #0x32]
	strh r2, [r1, #0x34]
_0805CFF2:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_805CFF8
sub_805CFF8: @ 0x0805CFF8
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r0, #0x32
	ldrsh r1, [r5, r0]
	movs r4, #0x34
	ldrsh r2, [r5, r4]
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r4, #0x2e
	ldrsh r0, [r5, r4]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	adds r6, r0, #0
	ldr r0, [r5, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _0805D050
	ldr r0, _0805D044 @ =0x0200004C
	ldr r0, [r0]
	ldr r4, _0805D048 @ =0x020219E8
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r0, _0805D04C @ =0xFFFFFD20
	adds r4, r4, r0
	adds r0, r4, #0
	movs r1, #0x17
	movs r2, #1
	adds r3, r6, #0
	bl sub_805B5C8
	b _0805D06E
	.align 2, 0
_0805D044: .4byte 0x0200004C
_0805D048: .4byte 0x020219E8
_0805D04C: .4byte 0xFFFFFD20
_0805D050:
	ldr r0, _0805D090 @ =0x0200004C
	ldr r0, [r0, #4]
	ldr r4, _0805D094 @ =0x02021A28
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r2, _0805D098 @ =0xFFFFFCE0
	adds r4, r4, r2
	adds r0, r4, #0
	movs r1, #0x19
	movs r2, #1
	adds r3, r6, #0
	bl sub_805B5C8
_0805D06E:
	bl EnablePalSync
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	ldrh r4, [r5, #0x2e]
	lsls r1, r4, #0x10
	cmp r0, r1
	ble _0805D088
	adds r0, r5, #0
	bl Proc_Break
_0805D088:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805D090: .4byte 0x0200004C
_0805D094: .4byte 0x02021A28
_0805D098: .4byte 0xFFFFFCE0

	thumb_func_start sub_805D09C
sub_805D09C: @ 0x0805D09C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	mov r8, r1
	adds r5, r2, #0
	adds r6, r3, #0
	ldr r7, [sp, #0x18]
	ldr r1, _0805D0D8 @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805D0DC @ =0x08606174
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r5, [r0, #0x2e]
	str r6, [r0, #0x44]
	str r7, [r0, #0x48]
	mov r1, r8
	str r1, [r0, #0x64]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805D0D8: .4byte 0x02017744
_0805D0DC: .4byte 0x08606174

	thumb_func_start sub_805D0E0
sub_805D0E0: @ 0x0805D0E0
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r4, [r5, #0x64]
	ldr r1, [r5, #0x44]
	ldr r2, [r5, #0x48]
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r6, #0x2e
	ldrsh r0, [r5, r6]
	str r0, [sp]
	movs r0, #4
	bl Interpolate
	str r0, [r4, #0x4c]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r5, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805D11C
	ldr r1, _0805D124 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	adds r0, r5, #0
	bl Proc_Break
_0805D11C:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805D124: .4byte 0x02017744

	thumb_func_start sub_805D128
sub_805D128: @ 0x0805D128
	ldr r0, _0805D138 @ =0x0201F058
	ldr r0, [r0]
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	beq _0805D13C
	movs r0, #0
	b _0805D13E
	.align 2, 0
_0805D138: .4byte 0x0201F058
_0805D13C:
	movs r0, #1
_0805D13E:
	bx lr

	thumb_func_start sub_805D140
sub_805D140: @ 0x0805D140
	push {lr}
	ldr r0, _0805D150 @ =0x0201F058
	ldr r0, [r0]
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_0805D150: .4byte 0x0201F058

	thumb_func_start sub_805D154
sub_805D154: @ 0x0805D154
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r2, r0, #0
	ldr r0, [r2, #0x5c]
	cmp r0, #0
	bne _0805D17C
	ldr r0, _0805D170 @ =0x0203CD7C
	ldr r4, [r0]
	ldr r0, _0805D174 @ =0x0201F0AC
	adds r6, r4, #0
	str r6, [r0]
	ldr r0, _0805D178 @ =0x0203CD80
	b _0805D188
	.align 2, 0
_0805D170: .4byte 0x0203CD7C
_0805D174: .4byte 0x0201F0AC
_0805D178: .4byte 0x0203CD80
_0805D17C:
	ldr r0, _0805D298 @ =0x0203CD80
	ldr r4, [r0]
	ldr r0, _0805D29C @ =0x0201F0AC
	adds r6, r4, #0
	str r6, [r0]
	ldr r0, _0805D2A0 @ =0x0203CD7C
_0805D188:
	ldr r1, _0805D2A4 @ =0x0201F0B0
	ldr r3, [r0]
	str r3, [r1]
	adds r0, r2, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	beq _0805D19A
	b _0805D2B8
_0805D19A:
	movs r0, #0xb
	ldrsb r0, [r6, r0]
	bl GetUnit
	adds r6, r0, #0
	ldr r1, _0805D2A8 @ =0x0201F0B4
	adds r3, r4, #0
	adds r3, #0x6c
	movs r0, #0
	ldrsb r0, [r3, r0]
	strh r0, [r1]
	ldr r2, _0805D2AC @ =0x0201F0B8
	movs r0, #0x10
	ldrsb r0, [r6, r0]
	strh r0, [r2]
	movs r0, #0x12
	ldrsb r0, [r6, r0]
	strh r0, [r2, #2]
	movs r0, #0x13
	ldrsb r0, [r6, r0]
	strh r0, [r2, #4]
	movs r0, #0x17
	ldrsb r0, [r6, r0]
	strh r0, [r2, #8]
	movs r0, #0x14
	ldrsb r0, [r6, r0]
	strh r0, [r2, #6]
	movs r0, #0x15
	ldrsb r0, [r6, r0]
	strh r0, [r2, #0xa]
	movs r0, #0x16
	ldrsb r0, [r6, r0]
	strh r0, [r2, #0xc]
	ldr r0, [r6, #4]
	ldrb r0, [r0, #0x11]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r1, [r6]
	ldrb r1, [r1, #0x13]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	strh r0, [r2, #0xe]
	ldr r1, _0805D2B0 @ =0x0201F0B6
	movs r0, #0
	ldrsb r0, [r3, r0]
	adds r0, #1
	strh r0, [r1]
	ldr r2, _0805D2B4 @ =0x0201F0C8
	movs r0, #0x10
	ldrsb r0, [r6, r0]
	adds r1, r4, #0
	adds r1, #0x6f
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	strh r0, [r2]
	movs r0, #0x12
	ldrsb r0, [r6, r0]
	adds r1, r4, #0
	adds r1, #0x70
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	strh r0, [r2, #2]
	movs r0, #0x13
	ldrsb r0, [r6, r0]
	adds r1, r4, #0
	adds r1, #0x71
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	strh r0, [r2, #4]
	movs r0, #0x17
	ldrsb r0, [r6, r0]
	adds r1, r4, #0
	adds r1, #0x75
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	strh r0, [r2, #8]
	movs r0, #0x14
	ldrsb r0, [r6, r0]
	adds r1, r4, #0
	adds r1, #0x72
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	strh r0, [r2, #6]
	movs r0, #0x15
	ldrsb r0, [r6, r0]
	adds r1, r4, #0
	adds r1, #0x73
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	strh r0, [r2, #0xa]
	movs r0, #0x16
	ldrsb r0, [r6, r0]
	adds r1, r4, #0
	adds r1, #0x74
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	strh r0, [r2, #0xc]
	ldr r0, [r6, #4]
	movs r1, #0x11
	ldrsb r1, [r0, r1]
	ldr r0, [r6]
	ldrb r0, [r0, #0x13]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r1, r0
	adds r0, r4, #0
	adds r0, #0x76
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _0805D342
	.align 2, 0
_0805D298: .4byte 0x0203CD80
_0805D29C: .4byte 0x0201F0AC
_0805D2A0: .4byte 0x0203CD7C
_0805D2A4: .4byte 0x0201F0B0
_0805D2A8: .4byte 0x0201F0B4
_0805D2AC: .4byte 0x0201F0B8
_0805D2B0: .4byte 0x0201F0B6
_0805D2B4: .4byte 0x0201F0C8
_0805D2B8:
	ldr r1, _0805D36C @ =0x0201F0B4
	movs r0, #8
	ldrsb r0, [r6, r0]
	strh r0, [r1]
	ldr r2, _0805D370 @ =0x0201F0B8
	movs r0, #0x10
	ldrsb r0, [r6, r0]
	strh r0, [r2]
	movs r0, #0x12
	ldrsb r0, [r6, r0]
	strh r0, [r2, #2]
	movs r0, #0x13
	ldrsb r0, [r6, r0]
	strh r0, [r2, #4]
	movs r0, #0x17
	ldrsb r0, [r6, r0]
	strh r0, [r2, #8]
	movs r0, #0x14
	ldrsb r0, [r6, r0]
	strh r0, [r2, #6]
	movs r0, #0x15
	ldrsb r0, [r6, r0]
	strh r0, [r2, #0xa]
	movs r0, #0x16
	ldrsb r0, [r6, r0]
	strh r0, [r2, #0xc]
	ldr r0, [r6, #4]
	ldrb r0, [r0, #0x11]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r1, [r6]
	ldrb r1, [r1, #0x13]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	strh r0, [r2, #0xe]
	ldr r1, _0805D374 @ =0x0201F0B6
	movs r0, #1
	strh r0, [r1]
	ldr r2, _0805D378 @ =0x0201F0C8
	movs r0, #0x10
	ldrsb r0, [r3, r0]
	strh r0, [r2]
	movs r0, #0x12
	ldrsb r0, [r3, r0]
	strh r0, [r2, #2]
	movs r0, #0x13
	ldrsb r0, [r3, r0]
	strh r0, [r2, #4]
	movs r0, #0x17
	ldrsb r0, [r3, r0]
	strh r0, [r2, #8]
	movs r0, #0x14
	ldrsb r0, [r3, r0]
	strh r0, [r2, #6]
	movs r0, #0x15
	ldrsb r0, [r3, r0]
	strh r0, [r2, #0xa]
	movs r0, #0x16
	ldrsb r0, [r3, r0]
	strh r0, [r2, #0xc]
	ldr r0, [r3, #4]
	ldrb r0, [r0, #0x11]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r1, [r3]
	ldrb r1, [r1, #0x13]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
_0805D342:
	adds r0, r0, r1
	strh r0, [r2, #0xe]
	ldr r0, _0805D37C @ =0x02017640
	ldr r1, _0805D380 @ =0x06002400
	movs r2, #0x90
	lsls r2, r2, #1
	movs r3, #0
	bl InitTextFont
	movs r7, #0
	movs r0, #0
	mov r8, r0
_0805D35A:
	adds r0, r6, #0
	bl UnitKnowsMagic
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0805D388
	ldr r0, _0805D384 @ =0x081C9FEC
	b _0805D38A
	.align 2, 0
_0805D36C: .4byte 0x0201F0B4
_0805D370: .4byte 0x0201F0B8
_0805D374: .4byte 0x0201F0B6
_0805D378: .4byte 0x0201F0C8
_0805D37C: .4byte 0x02017640
_0805D380: .4byte 0x06002400
_0805D384: .4byte 0x081C9FEC
_0805D388:
	ldr r0, _0805D4B8 @ =0x081CA014
_0805D38A:
	mov r1, r8
	adds r5, r1, r0
	lsls r1, r7, #3
	ldr r0, _0805D4BC @ =0x02017658
	adds r4, r1, r0
	adds r0, r4, #0
	movs r1, #3
	bl InitText
	adds r0, r5, #0
	bl GetStringTextLen
	adds r1, r0, #0
	movs r0, #0x10
	subs r0, r0, r1
	asrs r1, r0, #1
	cmp r1, #0
	bge _0805D3B0
	movs r1, #0
_0805D3B0:
	adds r0, r4, #0
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #3
	bl Text_SetColor
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_DrawString
	ldr r1, _0805D4C0 @ =0x081CA03C
	lsls r0, r7, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	lsls r1, r0, #1
	ldr r0, _0805D4C4 @ =gBg2Tm
	adds r1, r1, r0
	adds r0, r4, #0
	bl PutText
	movs r0, #5
	add r8, r0
	adds r7, #1
	cmp r7, #7
	ble _0805D35A
	movs r7, #0
_0805D3E6:
	lsls r5, r7, #3
	ldr r1, _0805D4C8 @ =0x02017698
	mov r8, r1
	add r5, r8
	adds r0, r5, #0
	movs r1, #2
	bl InitText
	adds r0, r5, #0
	movs r1, #8
	bl Text_SetCursor
	adds r0, r5, #0
	movs r1, #2
	bl Text_SetColor
	ldr r0, _0805D4CC @ =0x0201F0B8
	lsls r4, r7, #1
	adds r0, r4, r0
	ldrh r1, [r0]
	adds r0, r5, #0
	bl Text_DrawNumber
	ldr r0, _0805D4C0 @ =0x081CA03C
	adds r4, r4, r0
	ldrh r4, [r4]
	lsls r1, r4, #1
	ldr r6, _0805D4D0 @ =0x02022B0E
	adds r1, r1, r6
	adds r0, r5, #0
	bl PutText
	adds r7, #1
	cmp r7, #7
	ble _0805D3E6
	mov r4, r8
	adds r4, #0x40
	adds r0, r4, #0
	movs r1, #8
	bl InitText
	ldr r0, _0805D4D4 @ =0x0201F0AC
	ldr r0, [r0]
	ldr r0, [r0, #4]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	movs r0, #0xdf
	lsls r0, r0, #1
	adds r1, r6, r0
	adds r0, r4, #0
	bl PutText
	adds r4, #8
	adds r0, r4, #0
	movs r1, #3
	bl InitText
	adds r0, r4, #0
	movs r1, #3
	bl Text_SetColor
	ldr r1, _0805D4D8 @ =0x081CA04C
	adds r0, r4, #0
	bl Text_DrawString
	movs r0, #0xe7
	lsls r0, r0, #1
	adds r1, r6, r0
	adds r0, r4, #0
	bl PutText
	adds r4, #8
	adds r0, r4, #0
	movs r1, #2
	bl InitText
	adds r0, r4, #0
	movs r1, #8
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #2
	bl Text_SetColor
	ldr r0, _0805D4DC @ =0x0201F0B4
	ldrh r1, [r0]
	adds r0, r4, #0
	bl Text_DrawNumber
	movs r0, #0xea
	lsls r0, r0, #1
	adds r1, r6, r0
	adds r0, r4, #0
	bl PutText
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805D4B8: .4byte 0x081CA014
_0805D4BC: .4byte 0x02017658
_0805D4C0: .4byte 0x081CA03C
_0805D4C4: .4byte gBg2Tm
_0805D4C8: .4byte 0x02017698
_0805D4CC: .4byte 0x0201F0B8
_0805D4D0: .4byte 0x02022B0E
_0805D4D4: .4byte 0x0201F0AC
_0805D4D8: .4byte 0x081CA04C
_0805D4DC: .4byte 0x0201F0B4

	thumb_func_start sub_805D4E0
sub_805D4E0: @ 0x0805D4E0
	push {r4, r5, lr}
	adds r4, r1, #0
	lsls r5, r4, #3
	ldr r0, _0805D528 @ =0x02017698
	adds r5, r5, r0
	adds r0, r5, #0
	bl ClearText
	adds r0, r5, #0
	movs r1, #8
	bl Text_SetCursor
	adds r0, r5, #0
	movs r1, #2
	bl Text_SetColor
	ldr r0, _0805D52C @ =0x0201F0B8
	lsls r4, r4, #1
	adds r0, r4, r0
	ldrh r1, [r0]
	adds r0, r5, #0
	bl Text_DrawNumber
	ldr r0, _0805D530 @ =0x081CA03C
	adds r4, r4, r0
	ldrh r4, [r4]
	lsls r1, r4, #1
	ldr r0, _0805D534 @ =0x02022B0E
	adds r1, r1, r0
	adds r0, r5, #0
	bl PutText
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805D528: .4byte 0x02017698
_0805D52C: .4byte 0x0201F0B8
_0805D530: .4byte 0x081CA03C
_0805D534: .4byte 0x02022B0E

	thumb_func_start sub_805D538
sub_805D538: @ 0x0805D538
	push {r4, lr}
	ldr r4, _0805D564 @ =0x020176D8
	adds r0, r4, #0
	bl ClearText
	ldr r0, _0805D568 @ =0x0201F0AC
	ldr r0, [r0]
	ldr r0, [r0, #4]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	ldr r1, _0805D56C @ =0x02022CCC
	adds r0, r4, #0
	bl PutText
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805D564: .4byte 0x020176D8
_0805D568: .4byte 0x0201F0AC
_0805D56C: .4byte 0x02022CCC

	thumb_func_start sub_805D570
sub_805D570: @ 0x0805D570
	push {r4, lr}
	ldr r4, _0805D5A4 @ =0x020176E8
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	movs r1, #8
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #2
	bl Text_SetColor
	ldr r0, _0805D5A8 @ =0x0201F0B4
	ldrh r1, [r0]
	adds r0, r4, #0
	bl Text_DrawNumber
	ldr r1, _0805D5AC @ =0x02022CE2
	adds r0, r4, #0
	bl PutText
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805D5A4: .4byte 0x020176E8
_0805D5A8: .4byte 0x0201F0B4
_0805D5AC: .4byte 0x02022CE2

	thumb_func_start sub_805D5B0
sub_805D5B0: @ 0x0805D5B0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r5, _0805D5E8 @ =0x0201F058
	ldr r0, _0805D5EC @ =0x086061AC
	movs r1, #3
	bl SpawnProc
	adds r6, r0, #0
	str r6, [r5]
	str r4, [r6, #0x5c]
	adds r0, r4, #0
	bl sub_804B80C
	str r0, [r6, #0x60]
	movs r1, #0
	movs r0, #0
	strh r0, [r6, #0x2c]
	adds r0, r6, #0
	adds r0, #0x29
	strb r1, [r0]
	ldr r0, _0805D5F0 @ =0x0203CD14
	ldrh r0, [r0]
	cmp r0, #4
	beq _0805D5F4
	adds r0, r6, #0
	adds r0, #0x2a
	strb r1, [r0]
	b _0805D5FC
	.align 2, 0
_0805D5E8: .4byte 0x0201F058
_0805D5EC: .4byte 0x086061AC
_0805D5F0: .4byte 0x0203CD14
_0805D5F4:
	adds r1, r6, #0
	adds r1, #0x2a
	movs r0, #1
	strb r0, [r1]
_0805D5FC:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805D604
sub_805D604: @ 0x0805D604
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov sb, r0
	ldr r7, _0805D6B4 @ =0x0201F084
	movs r4, #0
	str r4, [sp]
	ldr r5, _0805D6B8 @ =gBg1Tm
	ldr r0, _0805D6BC @ =0x01000200
	mov r8, r0
	mov r0, sp
	adds r1, r5, #0
	mov r2, r8
	bl CpuFastSet
	str r4, [sp, #4]
	add r0, sp, #4
	ldr r6, _0805D6C0 @ =gBg2Tm
	adds r1, r6, #0
	mov r2, r8
	bl CpuFastSet
	ldr r1, _0805D6C4 @ =0x06006800
	movs r4, #0x80
	lsls r4, r4, #4
	adds r0, r5, #0
	adds r2, r4, #0
	bl RegisterDataMove
	ldr r1, _0805D6C8 @ =0x06007000
	adds r0, r5, #0
	adds r2, r4, #0
	bl RegisterDataMove
	ldr r1, _0805D6CC @ =0x06005000
	adds r0, r6, #0
	adds r2, r4, #0
	bl RegisterDataMove
	ldr r1, _0805D6D0 @ =0x06005800
	adds r0, r6, #0
	adds r2, r4, #0
	bl RegisterDataMove
	ldr r1, _0805D6D4 @ =0x0203CD10
	ldrh r4, [r1]
	strh r4, [r7]
	movs r0, #3
	strh r0, [r7, #2]
	adds r0, #0xfd
	strh r0, [r7, #4]
	ldrh r3, [r1, #2]
	strh r3, [r7, #6]
	movs r0, #4
	strh r0, [r7, #8]
	movs r0, #0xa0
	lsls r0, r0, #1
	strh r0, [r7, #0xa]
	ldr r0, _0805D6D8 @ =0x0203CD14
	ldrh r1, [r0]
	strh r1, [r7, #0xc]
	ldr r0, _0805D6DC @ =0x0000FFFF
	adds r2, r0, #0
	ldrh r0, [r7, #0xe]
	orrs r0, r2
	strh r0, [r7, #0xe]
	ldr r0, _0805D6E0 @ =0x06010000
	str r0, [r7, #0x1c]
	ldr r0, _0805D6E4 @ =0x020145C0
	str r0, [r7, #0x20]
	ldr r0, _0805D6E8 @ =0x0203CCF6
	ldrh r0, [r0]
	strh r0, [r7, #0x10]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #2
	bne _0805D6F6
	ldr r0, _0805D6EC @ =0x0201773C
	ldr r0, [r0]
	cmp r0, #0
	bne _0805D6F0
	adds r0, r3, #0
	orrs r0, r2
	strh r0, [r7, #6]
	b _0805D6F6
	.align 2, 0
_0805D6B4: .4byte 0x0201F084
_0805D6B8: .4byte gBg1Tm
_0805D6BC: .4byte 0x01000200
_0805D6C0: .4byte gBg2Tm
_0805D6C4: .4byte 0x06006800
_0805D6C8: .4byte 0x06007000
_0805D6CC: .4byte 0x06005000
_0805D6D0: .4byte 0x06005800
_0805D6D4: .4byte 0x0203CD10
_0805D6D8: .4byte 0x0203CD14
_0805D6DC: .4byte 0x0000FFFF
_0805D6E0: .4byte 0x06010000
_0805D6E4: .4byte 0x020145C0
_0805D6E8: .4byte 0x0203CCF6
_0805D6EC: .4byte 0x0201773C
_0805D6F0:
	adds r0, r4, #0
	orrs r0, r2
	strh r0, [r7]
_0805D6F6:
	bl sub_804C500
	cmp r0, #0
	bne _0805D71E
	adds r0, r7, #0
	bl sub_804BF40
	ldr r3, [r7, #0x14]
	ldr r0, [r3, #0x4c]
	ldr r2, _0805D89C @ =0x0000F3FF
	ands r0, r2
	movs r1, #0xc0
	lsls r1, r1, #4
	orrs r0, r1
	str r0, [r3, #0x4c]
	ldr r3, [r7, #0x18]
	ldr r0, [r3, #0x4c]
	ands r0, r2
	orrs r0, r1
	str r0, [r3, #0x4c]
_0805D71E:
	mov r2, sb
	ldr r1, [r2, #0x5c]
	ldr r7, _0805D89C @ =0x0000F3FF
	adds r0, r7, #0
	ldrh r3, [r1, #8]
	ands r0, r3
	strh r0, [r1, #8]
	ldr r1, [r2, #0x5c]
	movs r0, #0xc0
	lsls r0, r0, #4
	adds r2, r0, #0
	ldrh r0, [r1, #8]
	orrs r0, r2
	strh r0, [r1, #8]
	mov r3, sb
	ldr r1, [r3, #0x60]
	adds r0, r7, #0
	ldrh r3, [r1, #8]
	ands r0, r3
	strh r0, [r1, #8]
	mov r0, sb
	ldr r1, [r0, #0x60]
	movs r3, #0
	mov sl, r3
	ldrh r0, [r1, #8]
	orrs r0, r2
	strh r0, [r1, #8]
	ldr r4, _0805D8A0 @ =gDispIo
	movs r5, #4
	rsbs r5, r5, #0
	adds r0, r5, #0
	ldrb r1, [r4, #0x14]
	ands r0, r1
	strb r0, [r4, #0x14]
	adds r0, r5, #0
	ldrb r2, [r4, #0x10]
	ands r0, r2
	movs r3, #1
	mov r8, r3
	mov r1, r8
	orrs r0, r1
	strb r0, [r4, #0x10]
	adds r0, r5, #0
	ldrb r2, [r4, #0xc]
	ands r0, r2
	movs r6, #2
	orrs r0, r6
	strb r0, [r4, #0xc]
	movs r0, #3
	ldrb r3, [r4, #0x18]
	orrs r0, r3
	strb r0, [r4, #0x18]
	movs r0, #0
	bl sub_80589FC
	ldrh r0, [r0]
	cmp r0, #0x53
	bne _0805D7D6
	mov r0, sb
	ldr r1, [r0, #0x60]
	adds r0, r7, #0
	ldrh r2, [r1, #8]
	ands r0, r2
	strh r0, [r1, #8]
	mov r3, sb
	ldr r1, [r3, #0x60]
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r2, #0
	ldrh r3, [r1, #8]
	orrs r0, r3
	strh r0, [r1, #8]
	adds r0, r5, #0
	ldrb r1, [r4, #0xc]
	ands r0, r1
	orrs r0, r6
	strb r0, [r4, #0xc]
	adds r0, r5, #0
	ldrb r2, [r4, #0x10]
	ands r0, r2
	mov r3, r8
	orrs r0, r3
	strb r0, [r4, #0x10]
	adds r0, r5, #0
	ldrb r1, [r4, #0x14]
	ands r0, r1
	strb r0, [r4, #0x14]
	adds r0, r5, #0
	ldrb r2, [r4, #0x18]
	ands r0, r2
	orrs r0, r6
	strb r0, [r4, #0x18]
_0805D7D6:
	ldr r0, _0805D8A4 @ =0x0201F0D8
	movs r1, #0x90
	strh r1, [r0]
	ldr r0, _0805D8A8 @ =0x0201F0DA
	strh r1, [r0]
	movs r0, #2
	movs r1, #0
	movs r2, #8
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #8
	bl SetBgOffset
	movs r1, #0xc0
	lsls r1, r1, #7
	movs r0, #0
	bl SetBgTilemapOffset
	movs r1, #0xd0
	lsls r1, r1, #7
	movs r0, #1
	bl SetBgTilemapOffset
	movs r1, #0xa0
	lsls r1, r1, #7
	movs r0, #2
	bl SetBgTilemapOffset
	movs r0, #1
	movs r1, #1
	bl SetBgScreenSize
	movs r0, #2
	movs r1, #1
	bl SetBgScreenSize
	bl sub_805E230
	ldr r1, _0805D8AC @ =0x0201F07C
	str r0, [r1]
	bl sub_805E370
	ldr r1, _0805D8B0 @ =0x0201F080
	str r0, [r1]
	bl sub_805E248
	movs r0, #2
	bl sub_8043908
	mov r3, sb
	ldr r0, [r3, #0x5c]
	bl sub_8046ED8
	mov r1, sb
	ldr r0, [r1, #0x60]
	bl sub_8046ED8
	bl sub_8047248
	bl sub_8046B5C
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r2, [r4, #1]
	ands r0, r2
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r4, #1]
	adds r1, r4, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x45
	mov r1, sl
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	mov r0, sb
	bl Proc_Break
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805D89C: .4byte 0x0000F3FF
_0805D8A0: .4byte gDispIo
_0805D8A4: .4byte 0x0201F0D8
_0805D8A8: .4byte 0x0201F0DA
_0805D8AC: .4byte 0x0201F07C
_0805D8B0: .4byte 0x0201F080

	thumb_func_start sub_805D8B4
sub_805D8B4: @ 0x0805D8B4
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	adds r6, r0, #0
	ldr r0, _0805D95C @ =0x0203CD7C
	ldr r0, [r0]
	mov sb, r0
	ldr r0, _0805D960 @ =0x0203CD80
	ldr r0, [r0]
	mov r8, r0
	ldr r7, [r6, #0x5c]
	ldr r0, _0805D964 @ =0x08114D80
	ldr r5, _0805D968 @ =0x0201777C
	adds r1, r5, #0
	bl LZ77UnCompWram
	ldr r0, _0805D96C @ =0x08114FCC
	ldr r4, _0805D970 @ =0x0201977C
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r1, _0805D974 @ =0x02022488
	movs r0, #1
	str r0, [sp]
	adds r0, #0xff
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0x20
	movs r3, #0x14
	bl sub_805B1AC
	ldr r1, _0805D978 @ =0x06002000
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r5, #0
	bl RegisterDataMove
	ldr r0, _0805D97C @ =0x081150C8
	ldr r4, _0805D980 @ =0x02021728
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r0, _0805D984 @ =0x081150E8
	ldr r5, _0805D988 @ =0x0201A77C
	adds r1, r5, #0
	bl LZ77UnCompWram
	ldr r1, _0805D98C @ =0x06011400
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r0, r5, #0
	bl RegisterDataMove
	ldr r0, _0805D990 @ =0x081152FC
	movs r1, #0x80
	lsls r1, r1, #2
	adds r4, r4, r1
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	bl EnablePalSync
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r4, [r0]
	cmp r4, #0
	bne _0805D998
	movs r1, #2
	ldrsh r0, [r7, r1]
	ldr r2, _0805D994 @ =0x085CCC40
	movs r1, #0x30
	movs r3, #0
	bl sub_805E140
	movs r1, #0x85
	lsls r1, r1, #5
	str r1, [r0, #0x4c]
	strh r4, [r6, #0x2c]
	b _0805D99C
	.align 2, 0
_0805D95C: .4byte 0x0203CD7C
_0805D960: .4byte 0x0203CD80
_0805D964: .4byte 0x08114D80
_0805D968: .4byte 0x0201777C
_0805D96C: .4byte 0x08114FCC
_0805D970: .4byte 0x0201977C
_0805D974: .4byte 0x02022488
_0805D978: .4byte 0x06002000
_0805D97C: .4byte 0x081150C8
_0805D980: .4byte 0x02021728
_0805D984: .4byte 0x081150E8
_0805D988: .4byte 0x0201A77C
_0805D98C: .4byte 0x06011400
_0805D990: .4byte 0x081152FC
_0805D994: .4byte 0x085CCC40
_0805D998:
	movs r0, #0x50
	strh r0, [r6, #0x2c]
_0805D99C:
	adds r0, r7, #0
	bl sub_804B6C4
	cmp r0, #0
	bne _0805D9AA
	mov r1, sb
	b _0805D9AC
_0805D9AA:
	mov r1, r8
_0805D9AC:
	ldr r0, [r1]
	ldrh r4, [r0, #6]
	ldr r0, _0805D9F8 @ =0x0860618C
	bl SetFaceConfig
	movs r0, #0x42
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0xbc
	movs r3, #0x50
	bl StartFace
	ldr r0, _0805D9FC @ =gFaces
	ldr r1, [r0]
	movs r2, #0
	movs r0, #0xa0
	strh r0, [r1, #0x30]
	str r2, [sp, #8]
	ldr r1, _0805DA00 @ =gBg2Tm
	ldr r2, _0805DA04 @ =0x01000200
	add r0, sp, #8
	bl CpuFastSet
	adds r0, r6, #0
	bl sub_805D154
	adds r0, r6, #0
	bl Proc_Break
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805D9F8: .4byte 0x0860618C
_0805D9FC: .4byte gFaces
_0805DA00: .4byte gBg2Tm
_0805DA04: .4byte 0x01000200

	thumb_func_start sub_805DA08
sub_805DA08: @ 0x0805DA08
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0805DA34 @ =sub_805E4D4
	bl SetOnHBlankA
	movs r0, #1
	bl EnableBgSync
	movs r0, #4
	bl EnableBgSync
	movs r0, #2
	bl EnableBgSync
	bl EnablePalSync
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805DA34: .4byte sub_805E4D4

	thumb_func_start sub_805DA38
sub_805DA38: @ 0x0805DA38
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	movs r1, #0
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x50
	ble _0805DA6E
	strh r1, [r4, #0x2c]
	str r1, [r4, #0x44]
	str r1, [r4, #0x48]
	movs r0, #2
	rsbs r0, r0, #0
	str r0, [r4, #0x4c]
	subs r0, #2
	str r0, [r4, #0x50]
	ldr r0, _0805DA74 @ =gPal
	ldr r1, _0805DA78 @ =0x020165C0
	movs r2, #0x80
	lsls r2, r2, #1
	bl CpuFastSet
	adds r0, r4, #0
	bl Proc_Break
_0805DA6E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805DA74: .4byte gPal
_0805DA78: .4byte 0x020165C0

	thumb_func_start sub_805DA7C
sub_805DA7C: @ 0x0805DA7C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r3, [r7, #0x44]
	ldr r5, [r7, #0x48]
	ldr r6, [r7, #0x4c]
	ldr r0, [r7, #0x50]
	mov sb, r0
	cmp r3, #0
	bge _0805DA9C
	movs r3, #0
	b _0805DAA2
_0805DA9C:
	cmp r3, #8
	ble _0805DAA2
	movs r3, #8
_0805DAA2:
	cmp r5, #0
	bge _0805DAAA
	movs r5, #0
	b _0805DAB0
_0805DAAA:
	cmp r5, #8
	ble _0805DAB0
	movs r5, #8
_0805DAB0:
	cmp r6, #0
	bge _0805DAB8
	movs r6, #0
	b _0805DABE
_0805DAB8:
	cmp r6, #8
	ble _0805DABE
	movs r6, #8
_0805DABE:
	mov r2, sb
	cmp r2, #0
	bge _0805DAC8
	movs r0, #0
	b _0805DAD0
_0805DAC8:
	mov r2, sb
	cmp r2, #8
	ble _0805DAD2
	movs r0, #8
_0805DAD0:
	mov sb, r0
_0805DAD2:
	ldr r0, [r7, #0x44]
	adds r0, #1
	str r0, [r7, #0x44]
	ldr r0, [r7, #0x48]
	adds r0, #1
	str r0, [r7, #0x48]
	ldr r0, [r7, #0x4c]
	adds r0, #1
	str r0, [r7, #0x4c]
	ldr r0, [r7, #0x50]
	adds r0, #1
	str r0, [r7, #0x50]
	movs r1, #0x50
	rsbs r1, r1, #0
	movs r4, #8
	str r4, [sp]
	movs r0, #0
	movs r2, #0
	bl Interpolate
	mov r8, r0
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #8
	adds r3, r5, #0
	bl Interpolate
	mov sl, r0
	ldr r5, _0805DB90 @ =0x0201F0D8
	str r4, [sp]
	movs r0, #0
	movs r1, #0x90
	movs r2, #0
	adds r3, r6, #0
	bl Interpolate
	strh r0, [r5]
	ldr r5, _0805DB94 @ =0x0201F0DA
	str r4, [sp]
	movs r0, #0
	movs r1, #0x90
	movs r2, #0
	mov r3, sb
	bl Interpolate
	strh r0, [r5]
	ldr r0, _0805DB98 @ =gFaces
	ldr r1, [r0]
	movs r0, #0x50
	mov r2, r8
	subs r0, r0, r2
	strh r0, [r1, #0x30]
	ldr r0, _0805DB9C @ =0x020165C0
	ldr r4, _0805DBA0 @ =gPal
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r4, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #2
	movs r2, #4
	mov r3, sl
	bl sub_805B5C8
	adds r0, r4, #0
	movs r1, #0x13
	movs r2, #0xc
	mov r3, sl
	bl sub_805B5C8
	bl EnablePalSync
	ldrh r0, [r7, #0x2c]
	adds r0, #1
	strh r0, [r7, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x14
	ble _0805DB7E
	movs r0, #0
	strh r0, [r7, #0x2c]
	adds r0, r7, #0
	bl Proc_Break
_0805DB7E:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805DB90: .4byte 0x0201F0D8
_0805DB94: .4byte 0x0201F0DA
_0805DB98: .4byte gFaces
_0805DB9C: .4byte 0x020165C0
_0805DBA0: .4byte gPal

	thumb_func_start sub_805DBA4
sub_805DBA4: @ 0x0805DBA4
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0xa0
	movs r1, #1
	movs r2, #1
	movs r3, #3
	bl sub_8067A28
	adds r0, r4, #0
	bl Proc_Break
	ldr r1, _0805DBD0 @ =0x0201F05C
	movs r2, #0
	adds r0, r1, #0
	adds r0, #0x1c
_0805DBC2:
	str r2, [r0]
	subs r0, #4
	cmp r0, r1
	bge _0805DBC2
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805DBD0: .4byte 0x0201F05C

	thumb_func_start sub_805DBD4
sub_805DBD4: @ 0x0805DBD4
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	bne _0805DBE8
	adds r0, r5, #0
	bl Proc_Break
	b _0805DC1E
_0805DBE8:
	ldr r0, _0805DC24 @ =sub_805E510
	bl SetOnHBlankA
	ldr r4, _0805DC28 @ =0x0201F07C
	ldr r0, [r4]
	bl Proc_End
	bl sub_805E2CC
	str r0, [r4]
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x76
	bl sub_805BCA8
	movs r0, #0x76
	movs r1, #0x38
	movs r2, #0
	bl sub_805BDC0
	movs r0, #0
	strh r0, [r5, #0x2c]
	movs r0, #8
	strh r0, [r5, #0x2e]
	adds r0, r5, #0
	bl Proc_Break
_0805DC1E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805DC24: .4byte sub_805E510
_0805DC28: .4byte 0x0201F07C

	thumb_func_start sub_805DC2C
sub_805DC2C: @ 0x0805DC2C
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	bne _0805DC42
	adds r0, r5, #0
	bl Proc_Break
	b _0805DC96
_0805DC42:
	ldr r4, _0805DCA0 @ =0x0201F0D8
	movs r2, #0x80
	lsls r2, r2, #5
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r1, #0x2e
	ldrsh r0, [r5, r1]
	str r0, [sp]
	movs r0, #1
	movs r1, #0
	bl Interpolate
	strh r0, [r4]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r5, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805DC96
	ldr r1, _0805DCA4 @ =0x0201F0AC
	ldr r0, _0805DCA8 @ =0x0201F0B0
	ldr r0, [r0]
	str r0, [r1]
	adds r0, r5, #0
	bl sub_805D538
	ldr r1, _0805DCAC @ =0x0201F0B4
	ldr r0, _0805DCB0 @ =0x0201F0B6
	ldrh r0, [r0]
	strh r0, [r1]
	adds r0, r5, #0
	bl sub_805D570
	movs r0, #0
	strh r0, [r5, #0x2c]
	movs r0, #8
	strh r0, [r5, #0x2e]
	adds r0, r5, #0
	bl Proc_Break
_0805DC96:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805DCA0: .4byte 0x0201F0D8
_0805DCA4: .4byte 0x0201F0AC
_0805DCA8: .4byte 0x0201F0B0
_0805DCAC: .4byte 0x0201F0B4
_0805DCB0: .4byte 0x0201F0B6

	thumb_func_start sub_805DCB4
sub_805DCB4: @ 0x0805DCB4
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	bne _0805DCCA
	adds r0, r5, #0
	bl Proc_Break
	b _0805DCFA
_0805DCCA:
	ldr r4, _0805DD04 @ =0x0201F0D8
	movs r1, #0x80
	lsls r1, r1, #5
	movs r0, #0x2c
	ldrsh r3, [r5, r0]
	movs r2, #0x2e
	ldrsh r0, [r5, r2]
	str r0, [sp]
	movs r0, #4
	movs r2, #0
	bl Interpolate
	strh r0, [r4]
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r5, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805DCFA
	adds r0, r5, #0
	bl Proc_Break
_0805DCFA:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805DD04: .4byte 0x0201F0D8

	thumb_func_start sub_805DD08
sub_805DD08: @ 0x0805DD08
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	bne _0805DD54
	strh r0, [r5, #0x2c]
	movs r0, #0x84
	movs r1, #0x3c
	movs r2, #0
	movs r3, #0
	bl sub_8067B08
	ldr r1, _0805DD4C @ =0x0201F0B4
	ldr r0, _0805DD50 @ =0x0201F0B6
	ldrh r0, [r0]
	strh r0, [r1]
	adds r0, r5, #0
	bl sub_805D570
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x76
	bl sub_805BCA8
	movs r0, #0x76
	movs r1, #0x38
	movs r2, #0
	bl sub_805BDC0
	adds r0, r5, #0
	bl Proc_Break
	b _0805DD6E
	.align 2, 0
_0805DD4C: .4byte 0x0201F0B4
_0805DD50: .4byte 0x0201F0B6
_0805DD54:
	ldr r4, _0805DD74 @ =0x0201F07C
	ldr r0, [r4]
	bl Proc_End
	bl sub_805E230
	str r0, [r4]
	movs r0, #0
	strh r0, [r5, #0x2c]
	strh r0, [r5, #0x2e]
	adds r0, r5, #0
	bl Proc_Break
_0805DD6E:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805DD74: .4byte 0x0201F07C

	thumb_func_start sub_805DD78
sub_805DD78: @ 0x0805DD78
	push {lr}
	adds r1, r0, #0
	adds r0, #0x2a
	ldrb r2, [r0]
	cmp r2, #0
	beq _0805DD8C
	adds r0, r1, #0
	bl Proc_Break
	b _0805DDA4
_0805DD8C:
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x1d
	bgt _0805DDA4
	strh r2, [r1, #0x2c]
	strh r2, [r1, #0x2e]
	adds r0, r1, #0
	bl Proc_Break
_0805DDA4:
	pop {r0}
	bx r0

	thumb_func_start sub_805DDA8
sub_805DDA8: @ 0x0805DDA8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x14
	bne _0805DE72
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldrh r0, [r4, #0x2e]
	cmp r0, #8
	beq _0805DE78
	ldr r6, _0805DE4C @ =0x0201F0B8
_0805DDCA:
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	lsls r0, r0, #1
	adds r2, r0, r6
	ldr r1, _0805DE50 @ =0x0201F0C8
	adds r0, r0, r1
	ldrh r0, [r0]
	ldrh r7, [r2]
	subs r5, r0, r7
	cmp r5, #0
	beq _0805DE64
	movs r1, #0
	mov r8, r1
	strh r0, [r2]
	movs r2, #0x2e
	ldrsh r1, [r4, r2]
	adds r0, r4, #0
	bl sub_805D4E0
	movs r0, #0x76
	movs r1, #0x80
	lsls r1, r1, #1
	bl sub_805BCA8
	movs r0, #0x76
	movs r1, #0x38
	movs r2, #0
	bl sub_805BDC0
	ldr r1, _0805DE54 @ =0x081CA03C
	movs r7, #0x2e
	ldrsh r2, [r4, r7]
	lsls r0, r2, #1
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r0, #0x1f
	ands r0, r1
	lsls r0, r0, #3
	adds r0, #0x35
	movs r7, #0xfc
	lsls r7, r7, #3
	adds r3, r7, #0
	ands r1, r3
	lsrs r1, r1, #2
	adds r1, #6
	adds r2, #1
	adds r3, r5, #0
	bl sub_8067B08
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bne _0805DE44
	ldr r1, _0805DE58 @ =0x0203CDA4
	lsls r0, r0, #1
	adds r0, r0, r6
	ldrh r0, [r0]
	strh r0, [r1, #2]
	ldr r1, _0805DE5C @ =0x0203CDA8
	ldr r0, _0805DE60 @ =0x0000FFFF
	strh r0, [r1, #2]
_0805DE44:
	mov r7, r8
	strh r7, [r4, #0x2c]
	b _0805DE72
	.align 2, 0
_0805DE4C: .4byte 0x0201F0B8
_0805DE50: .4byte 0x0201F0C8
_0805DE54: .4byte 0x081CA03C
_0805DE58: .4byte 0x0203CDA4
_0805DE5C: .4byte 0x0203CDA8
_0805DE60: .4byte 0x0000FFFF
_0805DE64:
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #8
	bne _0805DDCA
_0805DE72:
	ldrh r0, [r4, #0x2e]
	cmp r0, #8
	bne _0805DE82
_0805DE78:
	movs r0, #0
	strh r0, [r4, #0x2c]
	adds r0, r4, #0
	bl Proc_Break
_0805DE82:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_805DE8C
sub_805DE8C: @ 0x0805DE8C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x3b
	ble _0805DEB2
	movs r0, #0
	strh r0, [r4, #0x2c]
	bl sub_8067AF0
	ldr r0, _0805DEB8 @ =sub_805E4D4
	bl SetOnHBlankA
	adds r0, r4, #0
	bl Proc_Break
_0805DEB2:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805DEB8: .4byte sub_805E4D4

	thumb_func_start sub_805DEBC
sub_805DEBC: @ 0x0805DEBC
	push {lr}
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805DEC8
sub_805DEC8: @ 0x0805DEC8
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldr r5, _0805DF7C @ =0x0201F0D8
	movs r0, #0x2c
	ldrsh r3, [r7, r0]
	movs r4, #8
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x90
	bl Interpolate
	strh r0, [r5]
	ldr r5, _0805DF80 @ =0x0201F0DA
	movs r0, #0x2c
	ldrsh r3, [r7, r0]
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x90
	bl Interpolate
	strh r0, [r5]
	movs r2, #0x50
	rsbs r2, r2, #0
	movs r0, #0x2c
	ldrsh r3, [r7, r0]
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	adds r5, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r7, r0]
	str r4, [sp]
	movs r0, #0
	movs r1, #8
	movs r2, #0
	bl Interpolate
	adds r6, r0, #0
	ldr r0, _0805DF84 @ =gFaces
	ldr r1, [r0]
	movs r0, #0x50
	subs r0, r0, r5
	strh r0, [r1, #0x30]
	ldr r0, _0805DF88 @ =0x020165C0
	ldr r4, _0805DF8C @ =gPal
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r4, #0
	bl CpuFastSet
	adds r0, r4, #0
	movs r1, #2
	movs r2, #4
	adds r3, r6, #0
	bl sub_805B5C8
	adds r0, r4, #0
	movs r1, #0x13
	movs r2, #0xc
	adds r3, r6, #0
	bl sub_805B5C8
	bl EnablePalSync
	movs r0, #7
_0805DF54:
	subs r0, #1
	cmp r0, #0
	bge _0805DF54
	ldrh r0, [r7, #0x2c]
	adds r0, #1
	strh r0, [r7, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #8
	ble _0805DF72
	movs r0, #0
	strh r0, [r7, #0x2c]
	adds r0, r7, #0
	bl Proc_Break
_0805DF72:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805DF7C: .4byte 0x0201F0D8
_0805DF80: .4byte 0x0201F0DA
_0805DF84: .4byte gFaces
_0805DF88: .4byte 0x020165C0
_0805DF8C: .4byte gPal

	thumb_func_start sub_805DF90
sub_805DF90: @ 0x0805DF90
	push {r4, r5, r6, lr}
	sub sp, #0x2c
	adds r5, r0, #0
	ldr r4, _0805E09C @ =0x0201F084
	bl sub_804C500
	cmp r0, #0
	bne _0805DFA6
	adds r0, r4, #0
	bl sub_804C2EC
_0805DFA6:
	movs r1, #0xc0
	lsls r1, r1, #7
	movs r0, #0
	bl SetBgTilemapOffset
	movs r1, #0xd0
	lsls r1, r1, #7
	movs r0, #1
	bl SetBgTilemapOffset
	movs r1, #0xe0
	lsls r1, r1, #7
	movs r0, #2
	bl SetBgTilemapOffset
	movs r0, #1
	movs r1, #0
	bl SetBgScreenSize
	movs r0, #2
	movs r1, #0
	bl SetBgScreenSize
	mov r4, sp
	ldr r2, _0805E0A0 @ =0x0203CD10
	ldrh r0, [r2]
	movs r6, #0
	strh r0, [r4]
	movs r0, #4
	strh r0, [r4, #2]
	movs r1, #0xa0
	lsls r1, r1, #2
	strh r1, [r4, #4]
	ldrh r0, [r2, #2]
	strh r0, [r4, #6]
	movs r0, #5
	strh r0, [r4, #8]
	strh r1, [r4, #0xa]
	ldr r0, _0805E0A4 @ =0x0203CD14
	ldrh r0, [r0]
	strh r0, [r4, #0xc]
	movs r0, #2
	strh r0, [r4, #0xe]
	str r6, [sp, #0x1c]
	ldr r0, _0805E0A8 @ =0x020145C0
	str r0, [sp, #0x20]
	ldr r0, _0805E0AC @ =0x0203CCF6
	ldrh r0, [r0]
	strh r0, [r4, #0x10]
	bl sub_804C500
	cmp r0, #0
	bne _0805E020
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	mov r0, sp
	bl sub_804BF40
_0805E020:
	ldr r2, [r5, #0x5c]
	ldr r1, _0805E0B0 @ =0x0000F3FF
	adds r0, r1, #0
	ldrh r3, [r2, #8]
	ands r0, r3
	strh r0, [r2, #8]
	ldr r3, [r5, #0x5c]
	movs r0, #0x80
	lsls r0, r0, #4
	adds r2, r0, #0
	ldrh r0, [r3, #8]
	orrs r0, r2
	strh r0, [r3, #8]
	ldr r0, [r5, #0x60]
	ldrh r3, [r0, #8]
	ands r1, r3
	strh r1, [r0, #8]
	ldr r0, [r5, #0x60]
	ldrh r1, [r0, #8]
	orrs r2, r1
	strh r2, [r0, #8]
	str r6, [sp, #0x28]
	add r0, sp, #0x28
	ldr r1, _0805E0B4 @ =gBg1Tm
	ldr r2, _0805E0B8 @ =0x01000200
	bl CpuFastSet
	movs r0, #2
	bl EnableBgSync
	movs r0, #0
	bl sub_8043908
	movs r0, #0
	bl sub_80589FC
	ldrh r0, [r0]
	cmp r0, #0x53
	bne _0805E0C0
	ldr r3, _0805E0BC @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x18]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x18]
	movs r0, #3
	ldrb r1, [r3, #0x14]
	orrs r0, r1
	strb r0, [r3, #0x14]
	b _0805E0EC
	.align 2, 0
_0805E09C: .4byte 0x0201F084
_0805E0A0: .4byte 0x0203CD10
_0805E0A4: .4byte 0x0203CD14
_0805E0A8: .4byte 0x020145C0
_0805E0AC: .4byte 0x0203CCF6
_0805E0B0: .4byte 0x0000F3FF
_0805E0B4: .4byte gBg1Tm
_0805E0B8: .4byte 0x01000200
_0805E0BC: .4byte gDispIo
_0805E0C0:
	ldr r3, _0805E100 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
_0805E0EC:
	movs r0, #0
	bl EndFaceById
	adds r0, r5, #0
	bl Proc_Break
	add sp, #0x2c
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805E100: .4byte gDispIo

	thumb_func_start sub_805E104
sub_805E104: @ 0x0805E104
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0805E138 @ =0x0201F07C
	ldr r0, [r0]
	bl Proc_End
	ldr r0, _0805E13C @ =0x0201F080
	ldr r0, [r0]
	bl Proc_End
	ldr r0, [r4, #0x5c]
	bl sub_8046EF8
	ldr r0, [r4, #0x60]
	bl sub_8046EF8
	bl sub_8047258
	bl sub_8046B6C
	adds r4, #0x29
	movs r0, #1
	strb r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805E138: .4byte 0x0201F07C
_0805E13C: .4byte 0x0201F080

	thumb_func_start sub_805E140
sub_805E140: @ 0x0805E140
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	adds r4, r3, #0
	ldr r0, _0805E17C @ =0x08606254
	movs r1, #3
	bl SpawnProc
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	adds r2, r0, #0
	adds r2, #0x29
	strb r4, [r2]
	strh r5, [r0, #0x32]
	strh r6, [r0, #0x3a]
	strh r1, [r0, #0x34]
	strh r1, [r0, #0x3c]
	mov r2, r8
	str r2, [r0, #0x44]
	str r1, [r0, #0x4c]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0805E17C: .4byte 0x08606254

	thumb_func_start sub_805E180
sub_805E180: @ 0x0805E180
	push {r4, r5, lr}
	sub sp, #0x48
	adds r3, r0, #0
	ldr r1, [r3, #0x44]
	movs r2, #0x2c
	ldrsh r0, [r3, r2]
	cmp r0, #0
	bne _0805E1F8
	movs r4, #0x2e
	ldrsh r0, [r3, r4]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r2, [r0]
	movs r1, #0x3f
	ldrb r0, [r0, #3]
	ands r1, r0
	cmp r1, #0
	bne _0805E1D6
	adds r0, r3, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #1
	beq _0805E1C6
	cmp r0, #1
	bgt _0805E1B8
	cmp r0, #0
	beq _0805E1BE
	b _0805E1F8
_0805E1B8:
	cmp r0, #2
	beq _0805E1CC
	b _0805E1F8
_0805E1BE:
	adds r0, r3, #0
	bl Proc_Break
	b _0805E224
_0805E1C6:
	strh r0, [r3, #0x2c]
	strh r1, [r3, #0x2e]
	b _0805E1F8
_0805E1CC:
	movs r0, #1
	strh r0, [r3, #0x2c]
	ldrh r0, [r3, #0x2e]
	subs r0, #1
	b _0805E1F6
_0805E1D6:
	cmp r1, #4
	bne _0805E1DE
	strh r2, [r3, #0x2c]
	b _0805E1F2
_0805E1DE:
	ldr r0, _0805E22C @ =0x0FFFFFFC
	ands r0, r2
	str r0, [r3, #0x48]
	lsrs r0, r2, #0x1a
	movs r1, #0x1c
	ands r0, r1
	movs r1, #3
	ands r2, r1
	adds r0, r0, r2
	strh r0, [r3, #0x2c]
_0805E1F2:
	ldrh r0, [r3, #0x2e]
	adds r0, #1
_0805E1F6:
	strh r0, [r3, #0x2e]
_0805E1F8:
	ldrh r0, [r3, #0x2c]
	subs r0, #1
	movs r2, #0
	strh r0, [r3, #0x2c]
	str r2, [sp, #0x1c]
	ldr r0, [r3, #0x48]
	str r0, [sp, #0x3c]
	mov r1, sp
	ldr r0, [r3, #0x4c]
	strh r0, [r1, #8]
	ldrh r5, [r3, #0x32]
	ldrh r4, [r3, #0x34]
	adds r0, r5, r4
	strh r0, [r1, #2]
	ldrh r5, [r3, #0x3a]
	ldrh r4, [r3, #0x3c]
	adds r0, r5, r4
	strh r0, [r1, #4]
	mov r0, sp
	strh r2, [r0, #0xc]
	bl BasPutOam
_0805E224:
	add sp, #0x48
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805E22C: .4byte 0x0FFFFFFC

	thumb_func_start sub_805E230
sub_805E230: @ 0x0805E230
	push {lr}
	ldr r0, _0805E244 @ =0x0860626C
	movs r1, #3
	bl SpawnProc
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	pop {r1}
	bx r1
	.align 2, 0
_0805E244: .4byte 0x0860626C

	thumb_func_start sub_805E248
sub_805E248: @ 0x0805E248
	push {r4, r5, r6, lr}
	ldr r0, _0805E274 @ =0x0201E3D8
	ldr r0, [r0]
	ldr r2, _0805E278 @ =0x0201E158
	cmp r0, #0
	bne _0805E256
	ldr r2, _0805E27C @ =0x0201E298
_0805E256:
	ldr r1, _0805E280 @ =0x0201E3E4
	cmp r0, #0
	bne _0805E25E
	ldr r1, _0805E284 @ =0x0201E524
_0805E25E:
	movs r3, #0
	movs r6, #0
	ldr r5, _0805E288 @ =0x0201F0D8
	ldr r4, _0805E28C @ =0x0201F0DA
_0805E266:
	cmp r3, #0x27
	bhi _0805E290
	strh r6, [r2]
	adds r2, #2
	strh r6, [r1]
	b _0805E2AC
	.align 2, 0
_0805E274: .4byte 0x0201E3D8
_0805E278: .4byte 0x0201E158
_0805E27C: .4byte 0x0201E298
_0805E280: .4byte 0x0201E3E4
_0805E284: .4byte 0x0201E524
_0805E288: .4byte 0x0201F0D8
_0805E28C: .4byte 0x0201F0DA
_0805E290:
	cmp r3, #0x47
	bhi _0805E29E
	ldrh r0, [r5]
	strh r0, [r2]
	adds r2, #2
	ldrh r0, [r5]
	b _0805E2AA
_0805E29E:
	cmp r3, #0x9f
	bhi _0805E2AE
	ldrh r0, [r4]
	strh r0, [r2]
	adds r2, #2
	ldrh r0, [r4]
_0805E2AA:
	strh r0, [r1]
_0805E2AC:
	adds r1, #2
_0805E2AE:
	adds r3, #1
	cmp r3, #0x9f
	bls _0805E266
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start nullsub_25
nullsub_25: @ 0x0805E2BC
	bx lr
	.align 2, 0

	thumb_func_start sub_805E2C0
sub_805E2C0: @ 0x0805E2C0
	push {lr}
	bl sub_805E248
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805E2CC
sub_805E2CC: @ 0x0805E2CC
	push {lr}
	ldr r0, _0805E2E0 @ =0x0860628C
	movs r1, #3
	bl SpawnProc
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	pop {r1}
	bx r1
	.align 2, 0
_0805E2E0: .4byte 0x0860628C

	thumb_func_start nullsub_26
nullsub_26: @ 0x0805E2E4
	bx lr
	.align 2, 0

	thumb_func_start sub_805E2E8
sub_805E2E8: @ 0x0805E2E8
	push {r4, r5, r6, lr}
	ldr r0, _0805E334 @ =0x0201E3D8
	ldr r0, [r0]
	ldr r3, _0805E338 @ =0x0201E158
	cmp r0, #0
	bne _0805E2F6
	ldr r3, _0805E33C @ =0x0201E298
_0805E2F6:
	ldr r2, _0805E340 @ =0x0201E3E4
	cmp r0, #0
	bne _0805E2FE
	ldr r2, _0805E344 @ =0x0201E524
_0805E2FE:
	movs r4, #0
	movs r5, #0
	ldr r0, _0805E348 @ =0x086062AC
	adds r6, r0, #0
	subs r6, #0x50
_0805E308:
	cmp r4, #0x27
	bls _0805E358
	cmp r4, #0x47
	bhi _0805E354
	movs r0, #0
	ldrsh r1, [r6, r0]
	ldr r0, _0805E34C @ =0x0201F0D8
	ldrh r0, [r0]
	muls r0, r1, r0
	lsls r0, r0, #4
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	adds r0, r4, r0
	cmp r0, #0x2e
	bls _0805E32A
	cmp r0, #0x51
	bls _0805E32C
_0805E32A:
	ldr r1, _0805E350 @ =0x0000FFE0
_0805E32C:
	strh r1, [r3]
	adds r3, #2
	strh r1, [r2]
	b _0805E35E
	.align 2, 0
_0805E334: .4byte 0x0201E3D8
_0805E338: .4byte 0x0201E158
_0805E33C: .4byte 0x0201E298
_0805E340: .4byte 0x0201E3E4
_0805E344: .4byte 0x0201E524
_0805E348: .4byte 0x086062AC
_0805E34C: .4byte 0x0201F0D8
_0805E350: .4byte 0x0000FFE0
_0805E354:
	cmp r4, #0x9f
	bhi _0805E360
_0805E358:
	strh r5, [r3]
	adds r3, #2
	strh r5, [r2]
_0805E35E:
	adds r2, #2
_0805E360:
	adds r6, #2
	adds r4, #1
	cmp r4, #0x9f
	bls _0805E308
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805E370
sub_805E370: @ 0x0805E370
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r1, _0805E40C @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r2, _0805E410 @ =0x0201E158
	movs r1, #0
	adds r6, r2, #0
	ldr r4, _0805E414 @ =0x0201E298
	ldr r0, _0805E418 @ =0x0201E3E4
	ldr r5, _0805E41C @ =0x0201E524
	ldr r7, _0805E420 @ =0x0201E14C
	ldr r3, _0805E424 @ =0x0201E3D8
	mov ip, r3
	ldr r3, _0805E428 @ =0x0201E150
	mov r8, r3
	ldr r3, _0805E42C @ =0x0201E3DC
	mov sb, r3
	ldr r3, _0805E430 @ =0x0201E154
	mov sl, r3
	movs r3, #0
_0805E3A2:
	strh r3, [r2]
	adds r2, #2
	adds r1, #1
	cmp r1, #0x9f
	bls _0805E3A2
	adds r2, r4, #0
	movs r1, #0
	movs r3, #0
_0805E3B2:
	strh r3, [r2]
	adds r2, #2
	adds r1, #1
	cmp r1, #0x9f
	bls _0805E3B2
	adds r2, r0, #0
	movs r1, #0
	movs r3, #0
_0805E3C2:
	strh r3, [r2]
	adds r2, #2
	adds r1, #1
	cmp r1, #0x9f
	bls _0805E3C2
	adds r2, r5, #0
	movs r1, #0
	movs r3, #0
_0805E3D2:
	strh r3, [r2]
	adds r2, #2
	adds r1, #1
	cmp r1, #0x9f
	bls _0805E3D2
	movs r4, #0
	str r4, [r7]
	mov r1, ip
	str r4, [r1]
	mov r3, r8
	str r6, [r3]
	mov r1, sb
	str r0, [r1]
	mov r3, sl
	str r6, [r3]
	ldr r1, _0805E434 @ =0x0201E3E0
	str r0, [r1]
	ldr r0, _0805E438 @ =0x086062EC
	movs r1, #0
	bl SpawnProc
	strh r4, [r0, #0x2c]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0805E40C: .4byte 0x02017744
_0805E410: .4byte 0x0201E158
_0805E414: .4byte 0x0201E298
_0805E418: .4byte 0x0201E3E4
_0805E41C: .4byte 0x0201E524
_0805E420: .4byte 0x0201E14C
_0805E424: .4byte 0x0201E3D8
_0805E428: .4byte 0x0201E150
_0805E42C: .4byte 0x0201E3DC
_0805E430: .4byte 0x0201E154
_0805E434: .4byte 0x0201E3E0
_0805E438: .4byte 0x086062EC

	thumb_func_start sub_805E43C
sub_805E43C: @ 0x0805E43C
	push {lr}
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0

	thumb_func_start sub_805E448
sub_805E448: @ 0x0805E448
	push {lr}
	bl Proc_Break
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805E454
sub_805E454: @ 0x0805E454
	ldr r1, _0805E468 @ =0x0201E14C
	ldr r0, [r1]
	cmp r0, #1
	bne _0805E474
	movs r0, #0
	str r0, [r1]
	ldr r1, _0805E46C @ =0x0201E150
	ldr r0, _0805E470 @ =0x0201E158
	b _0805E47C
	.align 2, 0
_0805E468: .4byte 0x0201E14C
_0805E46C: .4byte 0x0201E150
_0805E470: .4byte 0x0201E158
_0805E474:
	movs r0, #1
	str r0, [r1]
	ldr r1, _0805E494 @ =0x0201E150
	ldr r0, _0805E498 @ =0x0201E298
_0805E47C:
	str r0, [r1]
	adds r3, r1, #0
	ldr r1, _0805E49C @ =0x0201E3D8
	ldr r0, [r1]
	cmp r0, #1
	bne _0805E4A8
	movs r0, #0
	str r0, [r1]
	ldr r1, _0805E4A0 @ =0x0201E3DC
	ldr r0, _0805E4A4 @ =0x0201E3E4
	b _0805E4B0
	.align 2, 0
_0805E494: .4byte 0x0201E150
_0805E498: .4byte 0x0201E298
_0805E49C: .4byte 0x0201E3D8
_0805E4A0: .4byte 0x0201E3DC
_0805E4A4: .4byte 0x0201E3E4
_0805E4A8:
	movs r0, #1
	str r0, [r1]
	ldr r1, _0805E4C4 @ =0x0201E3DC
	ldr r0, _0805E4C8 @ =0x0201E524
_0805E4B0:
	str r0, [r1]
	adds r2, r1, #0
	ldr r1, _0805E4CC @ =0x0201E154
	ldr r0, [r3]
	str r0, [r1]
	ldr r1, _0805E4D0 @ =0x0201E3E0
	ldr r0, [r2]
	str r0, [r1]
	bx lr
	.align 2, 0
_0805E4C4: .4byte 0x0201E3DC
_0805E4C8: .4byte 0x0201E524
_0805E4CC: .4byte 0x0201E154
_0805E4D0: .4byte 0x0201E3E0

	thumb_func_start sub_805E4D4
sub_805E4D4: @ 0x0805E4D4
	ldr r0, _0805E500 @ =0x04000004
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0805E4FC
	ldr r3, _0805E504 @ =0x04000018
	ldr r2, _0805E508 @ =0x0201E154
	ldr r0, [r2]
	ldrh r1, [r0]
	strh r1, [r3]
	adds r0, #2
	str r0, [r2]
	subs r3, #4
	ldr r2, _0805E50C @ =0x0201E3E0
	ldr r0, [r2]
	ldrh r1, [r0]
	strh r1, [r3]
	adds r0, #2
	str r0, [r2]
_0805E4FC:
	bx lr
	.align 2, 0
_0805E500: .4byte 0x04000004
_0805E504: .4byte 0x04000018
_0805E508: .4byte 0x0201E154
_0805E50C: .4byte 0x0201E3E0

	thumb_func_start sub_805E510
sub_805E510: @ 0x0805E510
	push {r4, r5, r6, lr}
	ldr r0, _0805E54C @ =0x04000004
	ldrh r1, [r0]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0805E544
	ldr r3, _0805E550 @ =0x0400001A
	ldr r4, _0805E554 @ =gDispIo
	ldr r2, _0805E558 @ =0x0201E154
	ldr r0, [r2]
	ldrh r5, [r4, #0x26]
	ldrh r6, [r0]
	adds r1, r5, r6
	strh r1, [r3]
	adds r0, #2
	str r0, [r2]
	subs r3, #4
	ldr r2, _0805E55C @ =0x0201E3E0
	ldr r0, [r2]
	ldrh r4, [r4, #0x22]
	ldrh r5, [r0]
	adds r1, r4, r5
	strh r1, [r3]
	adds r0, #2
	str r0, [r2]
_0805E544:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805E54C: .4byte 0x04000004
_0805E550: .4byte 0x0400001A
_0805E554: .4byte gDispIo
_0805E558: .4byte 0x0201E154
_0805E55C: .4byte 0x0201E3E0

	thumb_func_start sub_805E560
sub_805E560: @ 0x0805E560
	ldr r0, _0805E56C @ =0x0201F0DC
	ldr r0, [r0]
	cmp r0, #1
	beq _0805E570
	movs r0, #0
	b _0805E572
	.align 2, 0
_0805E56C: .4byte 0x0201F0DC
_0805E570:
	movs r0, #1
_0805E572:
	bx lr

	thumb_func_start nullsub_5
nullsub_5: @ 0x0805E574
	bx lr
	.align 2, 0

	thumb_func_start sub_805E578
sub_805E578: @ 0x0805E578
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0805E594 @ =0x08606314
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	ldr r1, _0805E598 @ =0x0201F0DC
	movs r0, #0
	str r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805E594: .4byte 0x08606314
_0805E598: .4byte 0x0201F0DC

	thumb_func_start sub_805E59C
sub_805E59C: @ 0x0805E59C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0
	mov sb, r0
	mov sl, r0
	mov r8, r0
	movs r7, #0
	ldr r0, [r6, #0x5c]
	bl sub_804B6C4
	cmp r0, #0
	bne _0805E5C8
	ldr r0, _0805E5C4 @ =0x0203CD7C
	b _0805E5CA
	.align 2, 0
_0805E5C4: .4byte 0x0203CD7C
_0805E5C8:
	ldr r0, _0805E618 @ =0x0203CD80
_0805E5CA:
	ldr r0, [r0]
	ldr r0, [r0, #4]
	ldrb r5, [r0, #4]
	cmp r5, #0xc
	bge _0805E5D6
	b _0805E6D8
_0805E5D6:
	cmp r5, #0xf
	ble _0805E5DC
	b _0805E6D8
_0805E5DC:
	ldr r0, _0805E61C @ =0x0203CD88
	ldr r1, [r0]
	ldr r0, [r1, #4]
	ldrb r0, [r0, #4]
	cmp r0, #0xc
	bne _0805E5EC
	movs r2, #0
	mov sb, r2
_0805E5EC:
	cmp r0, #0xd
	bne _0805E5F4
	movs r2, #0
	mov sb, r2
_0805E5F4:
	cmp r0, #0xe
	bne _0805E5FC
	movs r2, #1
	mov sb, r2
_0805E5FC:
	cmp r0, #0xf
	bne _0805E604
	movs r0, #1
	mov sb, r0
_0805E604:
	adds r0, r1, #0
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	bne _0805E620
	movs r0, #1
	b _0805E626
	.align 2, 0
_0805E618: .4byte 0x0203CD80
_0805E61C: .4byte 0x0203CD88
_0805E620:
	adds r0, r4, #0
	bl GetItemKind
_0805E626:
	cmp r0, #1
	beq _0805E630
	cmp r0, #2
	beq _0805E636
	b _0805E648
_0805E630:
	movs r1, #0
	mov r8, r1
	b _0805E648
_0805E636:
	adds r0, r4, #0
	bl GetItemIid
	movs r2, #1
	mov r8, r2
	cmp r0, #0x20
	bne _0805E648
	movs r0, #2
	mov r8, r0
_0805E648:
	ldr r0, _0805E684 @ =0x0203CD88
	ldr r1, [r0, #4]
	ldr r0, [r1, #4]
	ldrb r0, [r0, #4]
	cmp r0, #0xc
	bne _0805E658
	movs r2, #0
	mov sl, r2
_0805E658:
	cmp r0, #0xd
	bne _0805E660
	movs r2, #0
	mov sl, r2
_0805E660:
	cmp r0, #0xe
	bne _0805E668
	movs r2, #1
	mov sl, r2
_0805E668:
	cmp r0, #0xf
	bne _0805E670
	movs r0, #1
	mov sl, r0
_0805E670:
	adds r0, r1, #0
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	bne _0805E688
	movs r0, #1
	b _0805E68E
	.align 2, 0
_0805E684: .4byte 0x0203CD88
_0805E688:
	adds r0, r4, #0
	bl GetItemKind
_0805E68E:
	cmp r0, #1
	beq _0805E698
	cmp r0, #2
	beq _0805E69C
	b _0805E6AA
_0805E698:
	movs r7, #0
	b _0805E6AA
_0805E69C:
	adds r0, r4, #0
	bl GetItemIid
	movs r7, #1
	cmp r0, #0x20
	bne _0805E6AA
	movs r7, #2
_0805E6AA:
	ldr r0, [r6, #0x5c]
	str r7, [sp]
	mov r1, sb
	mov r2, sl
	mov r3, r8
	bl sub_805EA38
	ldr r0, _0805E6D0 @ =0x0203CD80
	ldr r0, [r0]
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemIid
	cmp r0, #0x20
	bne _0805E780
	ldr r1, _0805E6D4 @ =0x0201F0DC
	movs r0, #0
	b _0805E784
	.align 2, 0
_0805E6D0: .4byte 0x0203CD80
_0805E6D4: .4byte 0x0201F0DC
_0805E6D8:
	ldr r0, _0805E704 @ =0x0203CD88
	ldr r1, [r0]
	ldr r0, [r1, #4]
	ldrb r0, [r0, #4]
	cmp r0, #0x2a
	bne _0805E6E8
	movs r2, #0
	mov sb, r2
_0805E6E8:
	cmp r0, #0x2b
	bne _0805E6F0
	movs r0, #1
	mov sb, r0
_0805E6F0:
	adds r0, r1, #0
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	bne _0805E708
	movs r0, #1
	b _0805E712
	.align 2, 0
_0805E704: .4byte 0x0203CD88
_0805E708:
	adds r0, r4, #0
	bl GetItemKind
	cmp r0, #0
	beq _0805E71C
_0805E712:
	cmp r0, #1
	bne _0805E720
	movs r1, #0
	mov r8, r1
	b _0805E720
_0805E71C:
	movs r2, #1
	mov r8, r2
_0805E720:
	ldr r0, _0805E74C @ =0x0203CD88
	ldr r1, [r0, #4]
	ldr r0, [r1, #4]
	ldrb r0, [r0, #4]
	cmp r0, #0x2a
	bne _0805E730
	movs r2, #0
	mov sl, r2
_0805E730:
	cmp r0, #0x2b
	bne _0805E738
	movs r0, #1
	mov sl, r0
_0805E738:
	adds r0, r1, #0
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	bne _0805E750
	movs r0, #1
	b _0805E75A
	.align 2, 0
_0805E74C: .4byte 0x0203CD88
_0805E750:
	adds r0, r4, #0
	bl GetItemKind
	cmp r0, #0
	beq _0805E762
_0805E75A:
	cmp r0, #1
	bne _0805E764
	movs r7, #0
	b _0805E764
_0805E762:
	movs r7, #1
_0805E764:
	ldr r0, [r6, #0x5c]
	str r7, [sp]
	mov r1, sb
	mov r2, sl
	mov r3, r8
	bl sub_805E7A0
	cmp r5, #0x2a
	bne _0805E780
	ldr r1, _0805E77C @ =0x0201F0DC
	movs r0, #0
	b _0805E784
	.align 2, 0
_0805E77C: .4byte 0x0201F0DC
_0805E780:
	ldr r1, _0805E79C @ =0x0201F0DC
	movs r0, #1
_0805E784:
	str r0, [r1]
	adds r0, r6, #0
	bl Proc_Break
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805E79C: .4byte 0x0201F0DC

	thumb_func_start sub_805E7A0
sub_805E7A0: @ 0x0805E7A0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r7, [sp, #0x18]
	ldr r0, _0805E7D4 @ =0x0860632C
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r5, [r0, #0x44]
	str r6, [r0, #0x48]
	mov r1, r8
	str r1, [r0, #0x4c]
	str r7, [r0, #0x50]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0805E7D4: .4byte 0x0860632C

	thumb_func_start sub_805E7D8
sub_805E7D8: @ 0x0805E7D8
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	bl sub_804B80C
	adds r5, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xa
	bne _0805E7FE
	ldr r0, [r4, #0x5c]
	ldr r2, [r4, #0x44]
	ldr r3, [r4, #0x4c]
	movs r1, #0
	bl sub_805E964
_0805E7FE:
	ldrh r0, [r4, #0x2c]
	cmp r0, #0x1c
	bne _0805E80C
	adds r0, r5, #0
	movs r1, #6
	bl sub_8046794
_0805E80C:
	ldrh r3, [r4, #0x2c]
	cmp r3, #0x22
	bne _0805E83E
	ldr r2, [r4, #0x44]
	ldr r3, [r4, #0x4c]
	adds r0, r5, #0
	movs r1, #0
	bl sub_805E890
	ldr r0, [r4, #0x5c]
	ldr r2, [r4, #0x48]
	ldr r3, [r4, #0x50]
	movs r1, #1
	bl sub_805E964
	movs r0, #0x9a
	lsls r0, r0, #2
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl sub_805C804
_0805E83E:
	ldrh r0, [r4, #0x2c]
	cmp r0, #0x33
	bne _0805E84C
	adds r0, r5, #0
	movs r1, #6
	bl sub_8046794
_0805E84C:
	ldrh r3, [r4, #0x2c]
	cmp r3, #0x39
	bne _0805E872
	ldr r2, [r4, #0x48]
	ldr r3, [r4, #0x50]
	adds r0, r5, #0
	movs r1, #1
	bl sub_805E890
	movs r0, #0x9a
	lsls r0, r0, #2
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r2, [r4, #0x5c]
	movs r3, #2
	ldrsh r2, [r2, r3]
	movs r3, #1
	bl sub_805C804
_0805E872:
	ldrh r0, [r4, #0x2c]
	cmp r0, #0x43
	bne _0805E884
	ldr r1, _0805E88C @ =0x0201F0DC
	movs r0, #1
	str r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0805E884:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805E88C: .4byte 0x0201F0DC

	thumb_func_start sub_805E890
sub_805E890: @ 0x0805E890
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r7, r3, #0
	ldr r0, _0805E8B8 @ =0x08606344
	movs r1, #3
	bl SpawnProc
	adds r1, r0, #0
	str r4, [r1, #0x5c]
	movs r0, #0
	strh r0, [r1, #0x2c]
	str r0, [r1, #0x44]
	cmp r5, #0
	bne _0805E8C4
	ldr r0, _0805E8BC @ =0x0203CD90
	ldr r2, [r0]
	ldr r0, _0805E8C0 @ =0x081CA054
	b _0805E8CA
	.align 2, 0
_0805E8B8: .4byte 0x08606344
_0805E8BC: .4byte 0x0203CD90
_0805E8C0: .4byte 0x081CA054
_0805E8C4:
	ldr r0, _0805E900 @ =0x0203CD90
	ldr r2, [r0, #4]
	ldr r0, _0805E904 @ =0x081CA062
_0805E8CA:
	str r0, [r1, #0x48]
	ldr r0, _0805E908 @ =0x0860635C
	str r0, [r1, #0x4c]
	str r0, [r1, #0x50]
	ldr r4, _0805E90C @ =0x0201777C
	adds r0, r2, #0
	adds r1, r4, #0
	bl LZ77UnCompWram
	adds r0, r4, #0
	movs r1, #0x20
	bl sub_8047AF4
	ldr r0, _0805E910 @ =0x081CA070
	cmp r6, #0
	beq _0805E8F2
	ldr r0, _0805E914 @ =0x081CB404
	cmp r7, #0
	bne _0805E8F2
	ldr r0, _0805E918 @ =0x081CAA14
_0805E8F2:
	movs r1, #0x80
	lsls r1, r1, #6
	bl sub_8047ACC
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805E900: .4byte 0x0203CD90
_0805E904: .4byte 0x081CA062
_0805E908: .4byte 0x0860635C
_0805E90C: .4byte 0x0201777C
_0805E910: .4byte 0x081CA070
_0805E914: .4byte 0x081CB404
_0805E918: .4byte 0x081CAA14

	thumb_func_start sub_805E91C
sub_805E91C: @ 0x0805E91C
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	adds r1, r4, #0
	adds r1, #0x44
	ldr r2, [r4, #0x48]
	bl sub_8047BA4
	lsls r0, r0, #0x10
	asrs r2, r0, #0x10
	cmp r2, #0
	blt _0805E94A
	ldr r1, [r4, #0x4c]
	ldr r3, [r4, #0x50]
	ldr r0, [r4, #0x5c]
	lsls r2, r2, #2
	adds r1, r2, r1
	ldr r1, [r1]
	adds r2, r2, r3
	ldr r2, [r2]
	bl sub_804799C
	b _0805E95C
_0805E94A:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r2, r0
	bne _0805E95C
	bl sub_80474D8
	adds r0, r4, #0
	bl Proc_Break
_0805E95C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805E964
sub_805E964: @ 0x0805E964
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r7, r0, #0
	adds r4, r1, #0
	mov r8, r2
	mov sb, r3
	ldr r0, _0805E998 @ =0x08606374
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r7, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	cmp r4, #0
	bne _0805E9A4
	movs r0, #0x12
	strh r0, [r5, #0x2e]
	ldr r0, _0805E99C @ =0x0203CD90
	ldr r6, [r0]
	ldr r3, _0805E9A0 @ =0x086068A4
	b _0805E9AE
	.align 2, 0
_0805E998: .4byte 0x08606374
_0805E99C: .4byte 0x0203CD90
_0805E9A0: .4byte 0x086068A4
_0805E9A4:
	movs r0, #0x11
	strh r0, [r5, #0x2e]
	ldr r0, _0805E9F8 @ =0x0203CD90
	ldr r6, [r0, #4]
	ldr r3, _0805E9FC @ =0x08606BD8
_0805E9AE:
	str r3, [sp]
	adds r0, r7, #0
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	str r0, [r5, #0x60]
	ldr r4, _0805EA00 @ =0x0201A77C
	adds r0, r6, #0
	adds r1, r4, #0
	bl LZ77UnCompWram
	adds r0, r4, #0
	movs r1, #0x20
	bl sub_8047AB0
	ldr r0, _0805EA04 @ =0x081CC428
	mov r1, r8
	cmp r1, #0
	beq _0805E9E0
	ldr r0, _0805EA08 @ =0x081CD7AC
	mov r1, sb
	cmp r1, #0
	bne _0805E9E0
	ldr r0, _0805EA0C @ =0x081CCDE0
_0805E9E0:
	movs r1, #0x80
	lsls r1, r1, #5
	bl sub_8047A88
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805E9F8: .4byte 0x0203CD90
_0805E9FC: .4byte 0x08606BD8
_0805EA00: .4byte 0x0201A77C
_0805EA04: .4byte 0x081CC428
_0805EA08: .4byte 0x081CD7AC
_0805EA0C: .4byte 0x081CCDE0

	thumb_func_start sub_805EA10
sub_805EA10: @ 0x0805EA10
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805EA30
	ldr r0, [r4, #0x60]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
_0805EA30:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805EA38
sub_805EA38: @ 0x0805EA38
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	ldr r7, [sp, #0x18]
	ldr r0, _0805EA6C @ =0x0860638C
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	movs r1, #0
	strh r1, [r0, #0x2c]
	str r5, [r0, #0x44]
	str r6, [r0, #0x48]
	mov r1, r8
	str r1, [r0, #0x4c]
	str r7, [r0, #0x50]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0805EA6C: .4byte 0x0860638C

	thumb_func_start sub_805EA70
sub_805EA70: @ 0x0805EA70
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldrh r0, [r5, #0x2c]
	adds r0, #1
	strh r0, [r5, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #1
	bne _0805EAA6
	ldr r0, [r5, #0x5c]
	ldr r1, [r5, #0x44]
	ldr r2, [r5, #0x48]
	ldr r3, [r5, #0x4c]
	ldr r4, [r5, #0x50]
	str r4, [sp]
	bl sub_805EB40
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r5, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xe2
	movs r3, #1
	bl sub_805C804
_0805EAA6:
	ldrh r0, [r5, #0x2c]
	cmp r0, #0x30
	bne _0805EACA
	ldr r0, [r5, #0x5c]
	ldr r2, [r5, #0x44]
	ldr r3, [r5, #0x4c]
	movs r1, #0
	bl sub_805ED1C
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r5, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xe2
	movs r3, #1
	bl sub_805C804
_0805EACA:
	ldrh r0, [r5, #0x2c]
	cmp r0, #0x3c
	bne _0805EAE0
	ldr r0, [r5, #0x5c]
	movs r1, #4
	bl sub_8046794
	ldr r0, [r5, #0x5c]
	movs r1, #0xa
	bl sub_805EE9C
_0805EAE0:
	ldrh r3, [r5, #0x2c]
	cmp r3, #0x4f
	bne _0805EB04
	ldr r0, [r5, #0x5c]
	ldr r2, [r5, #0x48]
	ldr r3, [r5, #0x50]
	movs r1, #1
	bl sub_805ED1C
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, [r5, #0x5c]
	movs r3, #2
	ldrsh r2, [r0, r3]
	movs r0, #0xe2
	movs r3, #1
	bl sub_805C804
_0805EB04:
	ldrh r0, [r5, #0x2c]
	cmp r0, #0x5b
	bne _0805EB10
	ldr r1, _0805EB3C @ =0x0201F0DC
	movs r0, #1
	str r0, [r1]
_0805EB10:
	ldrh r3, [r5, #0x2c]
	cmp r3, #0x60
	bne _0805EB26
	ldr r0, [r5, #0x5c]
	movs r1, #4
	bl sub_8046794
	ldr r0, [r5, #0x5c]
	movs r1, #0xa
	bl sub_805EE9C
_0805EB26:
	ldrh r0, [r5, #0x2c]
	cmp r0, #0x78
	bne _0805EB32
	adds r0, r5, #0
	bl Proc_Break
_0805EB32:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805EB3C: .4byte 0x0201F0DC

	thumb_func_start sub_805EB40
sub_805EB40: @ 0x0805EB40
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov r8, r0
	adds r4, r1, #0
	mov sb, r2
	adds r6, r3, #0
	ldr r0, _0805EB78 @ =0x086063A4
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	mov r0, r8
	str r0, [r5, #0x5c]
	movs r0, #0
	strh r0, [r5, #0x2c]
	movs r0, #0x14
	strh r0, [r5, #0x2e]
	ldr r0, _0805EB7C @ =0x0203CD90
	ldr r7, [r0]
	cmp r4, #0
	bne _0805EB88
	ldr r3, _0805EB80 @ =0x08606C70
	ldr r6, _0805EB84 @ =0x081CE154
	b _0805EBB4
	.align 2, 0
_0805EB78: .4byte 0x086063A4
_0805EB7C: .4byte 0x0203CD90
_0805EB80: .4byte 0x08606C70
_0805EB84: .4byte 0x081CE154
_0805EB88:
	cmp r6, #1
	beq _0805EBA0
	cmp r6, #1
	bhs _0805EBB0
	ldr r3, _0805EB98 @ =0x08606D00
	ldr r6, _0805EB9C @ =0x081CE474
	b _0805EBB4
	.align 2, 0
_0805EB98: .4byte 0x08606D00
_0805EB9C: .4byte 0x081CE474
_0805EBA0:
	ldr r3, _0805EBA8 @ =0x08606D90
	ldr r6, _0805EBAC @ =0x081CE848
	b _0805EBB4
	.align 2, 0
_0805EBA8: .4byte 0x08606D90
_0805EBAC: .4byte 0x081CE848
_0805EBB0:
	ldr r3, _0805EBF4 @ =0x08606E1C
	ldr r6, _0805EBF8 @ =0x081CEC7C
_0805EBB4:
	str r3, [sp]
	mov r0, r8
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	adds r1, r0, #0
	str r1, [r5, #0x60]
	ldr r0, _0805EBFC @ =0x00008840
	strh r0, [r1, #8]
	ldr r4, _0805EC00 @ =0x0201A77C
	adds r0, r7, #0
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r1, _0805EC04 @ =0x02021A08
	adds r0, r4, #0
	movs r2, #8
	bl CpuFastSet
	adds r0, r6, #0
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r0, _0805EC08 @ =0x0203CD90
	ldr r7, [r0, #4]
	mov r0, sb
	cmp r0, #0
	bne _0805EC14
	ldr r3, _0805EC0C @ =0x08606C70
	ldr r6, _0805EC10 @ =0x081CE154
	b _0805EC40
	.align 2, 0
_0805EBF4: .4byte 0x08606E1C
_0805EBF8: .4byte 0x081CEC7C
_0805EBFC: .4byte 0x00008840
_0805EC00: .4byte 0x0201A77C
_0805EC04: .4byte 0x02021A08
_0805EC08: .4byte 0x0203CD90
_0805EC0C: .4byte 0x08606C70
_0805EC10: .4byte 0x081CE154
_0805EC14:
	ldr r0, [sp, #0x20]
	cmp r0, #1
	beq _0805EC2C
	cmp r0, #1
	bhs _0805EC3C
	ldr r3, _0805EC24 @ =0x08606D00
	ldr r6, _0805EC28 @ =0x081CE474
	b _0805EC40
	.align 2, 0
_0805EC24: .4byte 0x08606D00
_0805EC28: .4byte 0x081CE474
_0805EC2C:
	ldr r3, _0805EC34 @ =0x08606D90
	ldr r6, _0805EC38 @ =0x081CE848
	b _0805EC40
	.align 2, 0
_0805EC34: .4byte 0x08606D90
_0805EC38: .4byte 0x081CE848
_0805EC3C:
	ldr r3, _0805ECA8 @ =0x08606E1C
	ldr r6, _0805ECAC @ =0x081CEC7C
_0805EC40:
	str r3, [sp]
	mov r0, r8
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	adds r1, r0, #0
	str r1, [r5, #0x64]
	ldr r0, _0805ECB0 @ =0x0000A880
	strh r0, [r1, #8]
	ldr r4, _0805ECB4 @ =0x0201AF7C
	adds r0, r7, #0
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r1, _0805ECB8 @ =0x02021A48
	adds r0, r4, #0
	movs r2, #8
	bl CpuFastSet
	adds r0, r6, #0
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r1, _0805ECBC @ =0x06010800
	ldr r0, _0805ECC0 @ =0xFFFFF800
	adds r4, r4, r0
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r4, #0
	bl RegisterDataMove
	bl EnablePalSync
	ldr r1, [r5, #0x60]
	ldr r0, [r5, #0x5c]
	ldrh r0, [r0, #2]
	adds r0, #0x20
	strh r0, [r1, #2]
	ldr r1, [r5, #0x64]
	ldr r0, [r5, #0x5c]
	ldrh r0, [r0, #2]
	subs r0, #0x20
	strh r0, [r1, #2]
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805ECA8: .4byte 0x08606E1C
_0805ECAC: .4byte 0x081CEC7C
_0805ECB0: .4byte 0x0000A880
_0805ECB4: .4byte 0x0201AF7C
_0805ECB8: .4byte 0x02021A48
_0805ECBC: .4byte 0x06010800
_0805ECC0: .4byte 0xFFFFF800

	thumb_func_start sub_805ECC4
sub_805ECC4: @ 0x0805ECC4
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x20
	movs r2, #0
	bl Interpolate
	ldr r2, [r4, #0x60]
	ldr r1, [r4, #0x5c]
	ldrh r1, [r1, #2]
	adds r1, r1, r0
	strh r1, [r2, #2]
	ldr r2, [r4, #0x64]
	ldr r1, [r4, #0x5c]
	ldrh r1, [r1, #2]
	subs r0, r1, r0
	strh r0, [r2, #2]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805ED14
	ldr r0, [r4, #0x60]
	bl BasRemove
	ldr r0, [r4, #0x64]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
_0805ED14:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_805ED1C
sub_805ED1C: @ 0x0805ED1C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	mov r8, r0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r7, r3, #0
	ldr r0, _0805ED58 @ =0x086063BC
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	mov r0, r8
	str r0, [r4, #0x5c]
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #5
	strh r0, [r4, #0x2e]
	adds r0, r4, #0
	adds r0, #0x29
	strb r5, [r0]
	adds r0, #1
	strb r6, [r0]
	cmp r5, #0
	bne _0805ED60
	ldr r0, _0805ED5C @ =0x0203CD90
	ldr r0, [r0]
	b _0805ED64
	.align 2, 0
_0805ED58: .4byte 0x086063BC
_0805ED5C: .4byte 0x0203CD90
_0805ED60:
	ldr r0, _0805ED70 @ =0x0203CD90
	ldr r0, [r0, #4]
_0805ED64:
	mov sb, r0
	cmp r6, #0
	bne _0805ED7C
	ldr r3, _0805ED74 @ =0x08606F0C
	ldr r6, _0805ED78 @ =0x081CF03C
	b _0805EDA8
	.align 2, 0
_0805ED70: .4byte 0x0203CD90
_0805ED74: .4byte 0x08606F0C
_0805ED78: .4byte 0x081CF03C
_0805ED7C:
	cmp r7, #1
	beq _0805ED94
	cmp r7, #1
	bhs _0805EDA4
	ldr r3, _0805ED8C @ =0x08607084
	ldr r6, _0805ED90 @ =0x081CF574
	b _0805EDA8
	.align 2, 0
_0805ED8C: .4byte 0x08607084
_0805ED90: .4byte 0x081CF574
_0805ED94:
	ldr r3, _0805ED9C @ =0x086071D8
	ldr r6, _0805EDA0 @ =0x081CFCB0
	b _0805EDA8
	.align 2, 0
_0805ED9C: .4byte 0x086071D8
_0805EDA0: .4byte 0x081CFCB0
_0805EDA4:
	ldr r3, _0805EDD4 @ =0x086074A0
	ldr r6, _0805EDD8 @ =0x081D043C
_0805EDA8:
	str r3, [sp]
	mov r0, r8
	adds r1, r3, #0
	adds r2, r3, #0
	bl sub_80478DC
	adds r1, r0, #0
	str r1, [r4, #0x60]
	cmp r5, #0
	bne _0805EDDC
	ldrh r0, [r1, #4]
	adds r0, #0xa
	strh r0, [r1, #4]
	ldr r1, [r4, #0x60]
	movs r0, #0x78
	strh r0, [r1, #0xa]
	bl BasSort
	ldr r0, [r4, #0x5c]
	ldrh r1, [r0, #2]
	adds r1, #0x10
	b _0805EDF2
	.align 2, 0
_0805EDD4: .4byte 0x086074A0
_0805EDD8: .4byte 0x081D043C
_0805EDDC:
	ldrh r0, [r1, #4]
	adds r0, #2
	strh r0, [r1, #4]
	ldr r1, [r4, #0x60]
	movs r0, #0x14
	strh r0, [r1, #0xa]
	bl BasSort
	ldr r0, [r4, #0x5c]
	ldrh r1, [r0, #2]
	subs r1, #0xc
_0805EDF2:
	strh r1, [r4, #0x32]
	ldrh r0, [r0, #2]
	subs r0, #0x10
	strh r0, [r4, #0x34]
	ldr r0, [r4, #0x60]
	strh r1, [r0, #2]
	ldr r4, _0805EE28 @ =0x0201A77C
	mov r0, sb
	adds r1, r4, #0
	bl LZ77UnCompWram
	adds r0, r4, #0
	movs r1, #0x20
	bl sub_8047AB0
	movs r1, #0x80
	lsls r1, r1, #5
	adds r0, r6, #0
	bl sub_8047A88
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805EE28: .4byte 0x0201A77C

	thumb_func_start sub_805EE2C
sub_805EE2C: @ 0x0805EE2C
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0x32
	ldrsh r1, [r4, r0]
	movs r5, #0x34
	ldrsh r2, [r4, r5]
	movs r0, #0x2c
	ldrsh r3, [r4, r0]
	movs r5, #0x2e
	ldrsh r0, [r4, r5]
	str r0, [sp]
	movs r0, #1
	bl Interpolate
	ldr r1, [r4, #0x60]
	strh r0, [r1, #2]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805EE6C
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x14
	strh r0, [r4, #0x2e]
	adds r0, r4, #0
	bl Proc_Break
_0805EE6C:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_805EE74
sub_805EE74: @ 0x0805EE74
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805EE94
	ldr r0, [r4, #0x60]
	bl BasRemove
	adds r0, r4, #0
	bl Proc_Break
_0805EE94:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805EE9C
sub_805EE9C: @ 0x0805EE9C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r1, _0805EECC @ =0x02017744
	ldr r0, [r1]
	adds r0, #1
	str r0, [r1]
	ldr r0, _0805EED0 @ =0x086063DC
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x5c]
	movs r0, #0
	movs r1, #0
	bl sub_8045F48
	str r0, [r4, #0x60]
	movs r0, #0
	strh r0, [r4, #0x2c]
	strh r6, [r4, #0x2e]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0805EECC: .4byte 0x02017744
_0805EED0: .4byte 0x086063DC

	thumb_func_start sub_805EED4
sub_805EED4: @ 0x0805EED4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r0, #0
	ldr r5, _0805F060 @ =0x02017758
	ldrh r1, [r5]
	ldrh r2, [r5, #2]
	movs r0, #2
	bl SetBgOffset
	ldr r6, _0805F064 @ =0x02000030
	ldrh r0, [r5]
	ldrh r2, [r6]
	adds r1, r0, r2
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldrh r3, [r5, #2]
	ldrh r0, [r6, #2]
	adds r2, r3, r0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0
	bl SetBgOffset
	ldrh r1, [r5]
	ldrh r2, [r6]
	adds r0, r1, r2
	rsbs r0, r0, #0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldrh r3, [r5, #2]
	ldrh r2, [r6, #2]
	adds r1, r3, r2
	rsbs r1, r1, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_804392C
	ldrh r3, [r5]
	ldrh r1, [r6]
	adds r0, r3, r1
	rsbs r0, r0, #0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r2, [r5, #2]
	ldrh r3, [r6, #2]
	adds r1, r2, r3
	rsbs r1, r1, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	bl sub_8044230
	bl sub_805894C
	cmp r0, #0
	beq _0805EF58
	ldrh r1, [r5]
	ldrh r2, [r5, #2]
	adds r2, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #3
	bl SetBgOffset
_0805EF58:
	ldr r0, _0805F068 @ =0x02000020
	mov sb, r0
	ldrh r0, [r5]
	mov r2, sb
	ldrh r2, [r2]
	adds r1, r0, r2
	ldr r3, _0805F06C @ =0x0201E12C
	mov sl, r3
	ldr r4, [r3]
	subs r1, r1, r4
	ldr r2, _0805F070 @ =0x02000024
	mov r8, r2
	ldrh r3, [r5, #2]
	ldrh r5, [r2]
	subs r5, r5, r3
	mov ip, r5
	mov r2, sb
	ldrh r2, [r2, #2]
	adds r0, r0, r2
	subs r0, r0, r4
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	mov r0, r8
	ldrh r0, [r0, #2]
	subs r3, r0, r3
	lsls r3, r3, #0x10
	lsrs r4, r3, #0x10
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	mov r3, ip
	lsls r2, r3, #0x10
	asrs r2, r2, #0x10
	movs r0, #0
	bl sub_8047C88
	lsls r1, r5, #0x10
	asrs r1, r1, #0x10
	lsls r2, r4, #0x10
	asrs r2, r2, #0x10
	movs r0, #1
	bl sub_8047C88
	ldrh r0, [r7, #0x2c]
	adds r0, #1
	strh r0, [r7, #0x2c]
	lsls r0, r0, #0x10
	ldrh r5, [r7, #0x2e]
	lsls r1, r5, #0x10
	cmp r0, r1
	ble _0805F052
	ldr r1, _0805F074 @ =0x02017744
	ldr r0, [r1]
	subs r0, #1
	str r0, [r1]
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldrh r1, [r6]
	ldrh r2, [r6, #2]
	movs r0, #0
	bl SetBgOffset
	ldrh r1, [r6]
	rsbs r0, r1, #0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldrh r2, [r6, #2]
	rsbs r1, r2, #0
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	bl sub_804392C
	ldrh r3, [r6]
	rsbs r0, r3, #0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r6, [r6, #2]
	rsbs r1, r6, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	bl sub_8044230
	bl sub_805894C
	cmp r0, #0
	beq _0805F012
	movs r0, #3
	movs r1, #0
	movs r2, #0x10
	bl SetBgOffset
_0805F012:
	mov r5, sl
	ldr r0, [r5]
	mov r2, sb
	ldrh r2, [r2]
	subs r1, r2, r0
	mov r3, sb
	ldrh r3, [r3, #2]
	subs r0, r3, r0
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	mov r0, r8
	ldrh r4, [r0, #2]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r3, #0
	ldrsh r2, [r0, r3]
	movs r0, #0
	bl sub_8047C88
	lsls r1, r5, #0x10
	asrs r1, r1, #0x10
	lsls r2, r4, #0x10
	asrs r2, r2, #0x10
	movs r0, #1
	bl sub_8047C88
	ldr r0, [r7, #0x60]
	bl Proc_End
	adds r0, r7, #0
	bl Proc_Break
_0805F052:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805F060: .4byte 0x02017758
_0805F064: .4byte 0x02000030
_0805F068: .4byte 0x02000020
_0805F06C: .4byte 0x0201E12C
_0805F070: .4byte 0x02000024
_0805F074: .4byte 0x02017744

	thumb_func_start sub_805F078
sub_805F078: @ 0x0805F078
	push {lr}
	lsls r1, r0, #1
	adds r1, r1, r0
	ldr r0, _0805F090 @ =0x08607504
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	ldr r1, _0805F094 @ =0x06008000
	bl LZ77UnCompVram
	pop {r0}
	bx r0
	.align 2, 0
_0805F090: .4byte 0x08607504
_0805F094: .4byte 0x06008000

	thumb_func_start sub_805F098
sub_805F098: @ 0x0805F098
	push {r4, lr}
	sub sp, #8
	lsls r1, r0, #1
	adds r1, r1, r0
	adds r1, #1
	ldr r0, _0805F0D0 @ =0x08607504
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	ldr r4, _0805F0D4 @ =0x0201977C
	adds r1, r4, #0
	bl LZ77UnCompWram
	ldr r1, _0805F0D8 @ =gBg3Tm
	movs r0, #6
	str r0, [sp]
	movs r0, #0
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #0x1e
	movs r3, #0x14
	bl sub_805B1AC
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805F0D0: .4byte 0x08607504
_0805F0D4: .4byte 0x0201977C
_0805F0D8: .4byte gBg3Tm

	thumb_func_start sub_805F0DC
sub_805F0DC: @ 0x0805F0DC
	push {lr}
	lsls r1, r0, #1
	adds r1, r1, r0
	adds r1, #2
	ldr r0, _0805F0F8 @ =0x08607504
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	ldr r1, _0805F0FC @ =0x020217C8
	bl LZ77UnCompWram
	pop {r0}
	bx r0
	.align 2, 0
_0805F0F8: .4byte 0x08607504
_0805F0FC: .4byte 0x020217C8

	thumb_func_start sub_805F100
sub_805F100: @ 0x0805F100
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	bl sub_805F078
	movs r5, #0
	str r5, [sp]
	ldr r1, _0805F13C @ =0x0600FFE0
	ldr r2, _0805F140 @ =0x01000008
	mov r0, sp
	bl CpuFastSet
	adds r0, r4, #0
	bl sub_805F098
	adds r0, r4, #0
	bl sub_805F0DC
	ldr r0, _0805F144 @ =gPal
	strh r5, [r0]
	movs r0, #8
	bl EnableBgSync
	bl EnablePalSync
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0805F13C: .4byte 0x0600FFE0
_0805F140: .4byte 0x01000008
_0805F144: .4byte gPal

	thumb_func_start sub_805F148
sub_805F148: @ 0x0805F148
	ldr r0, _0805F154 @ =0x0201F0E4
	ldr r0, [r0]
	cmp r0, #1
	beq _0805F158
	movs r0, #0
	b _0805F15A
	.align 2, 0
_0805F154: .4byte 0x0201F0E4
_0805F158:
	movs r0, #1
_0805F15A:
	bx lr

	thumb_func_start sub_805F15C
sub_805F15C: @ 0x0805F15C
	push {r4, lr}
	ldr r4, _0805F174 @ =0x0201F0E0
	ldr r0, [r4]
	cmp r0, #0
	beq _0805F16E
	bl Proc_End
	movs r0, #0
	str r0, [r4]
_0805F16E:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805F174: .4byte 0x0201F0E0

	thumb_func_start sub_805F178
sub_805F178: @ 0x0805F178
	push {lr}
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x5a
	bl sub_805BCA8
	pop {r0}
	bx r0

	thumb_func_start sub_805F188
sub_805F188: @ 0x0805F188
	push {lr}
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x5c
	bl sub_805BCA8
	pop {r0}
	bx r0

	thumb_func_start sub_805F198
sub_805F198: @ 0x0805F198
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov ip, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov sb, r1
	ldr r6, _0805F278 @ =0x0201977C
	ldrh r1, [r6]
	movs r2, #0x88
	lsls r2, r2, #5
	adds r0, r1, r2
	mov r3, ip
	strh r0, [r3]
	mov r1, ip
	adds r1, #0x40
	ldrh r7, [r6, #0x30]
	adds r0, r7, r2
	strh r0, [r1]
	adds r1, #0x40
	adds r0, r6, #0
	adds r0, #0x60
	ldrh r0, [r0]
	adds r0, r0, r2
	strh r0, [r1]
	adds r1, #0x40
	adds r0, r6, #0
	adds r0, #0x90
	ldrh r0, [r0]
	adds r0, r0, r2
	strh r0, [r1]
	movs r0, #0
	mov r8, r0
	cmp r8, sb
	bhs _0805F22C
	adds r3, #0xc2
	str r3, [sp]
	mov r5, ip
	adds r5, #0x82
	adds r4, r6, #0
	adds r4, #0x62
	subs r3, #0x80
	mov r2, ip
	adds r2, #2
	adds r1, r6, #2
_0805F1F8:
	ldrh r7, [r1]
	movs r0, #0x88
	lsls r0, r0, #5
	adds r7, r7, r0
	strh r7, [r2]
	ldrh r7, [r1, #0x30]
	adds r7, r7, r0
	strh r7, [r3]
	ldrh r7, [r4]
	adds r7, r7, r0
	strh r7, [r5]
	ldrh r7, [r4, #0x30]
	adds r7, r7, r0
	ldr r0, [sp]
	strh r7, [r0]
	adds r0, #2
	str r0, [sp]
	adds r5, #2
	adds r4, #2
	adds r3, #2
	adds r2, #2
	adds r1, #2
	movs r7, #1
	add r8, r7
	cmp r8, sb
	blo _0805F1F8
_0805F22C:
	mov r1, r8
	lsls r0, r1, #1
	mov r2, ip
	adds r1, r0, r2
	ldrh r3, [r6, #0x2e]
	movs r7, #0x88
	lsls r7, r7, #5
	adds r0, r3, r7
	strh r0, [r1, #2]
	adds r2, r1, #0
	adds r2, #0x42
	adds r0, r6, #0
	adds r0, #0x5e
	ldrh r0, [r0]
	adds r3, r7, #0
	adds r0, r0, r3
	strh r0, [r2]
	adds r2, #0x40
	adds r0, r6, #0
	adds r0, #0x8e
	ldrh r0, [r0]
	adds r0, r0, r3
	strh r0, [r2]
	adds r1, #0xc2
	adds r0, r6, #0
	adds r0, #0xbe
	ldrh r0, [r0]
	adds r0, r0, r3
	strh r0, [r1]
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805F278: .4byte 0x0201977C

	thumb_func_start sub_805F27C
sub_805F27C: @ 0x0805F27C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	str r0, [sp]
	mov sb, r1
	adds r7, r2, #0
	ldr r0, _0805F2D8 @ =0x0811531C
	ldr r1, _0805F2DC @ =0x06002000
	bl LZ77UnCompVram
	ldr r0, _0805F2E0 @ =0x08115498
	ldr r1, _0805F2E4 @ =0x0201977C
	bl LZ77UnCompWram
	ldr r0, _0805F2E8 @ =0x02017640
	ldr r1, _0805F2EC @ =0x060020C0
	movs r2, #0x83
	lsls r2, r2, #1
	movs r3, #1
	bl InitTextFont
	bl SetTextDrawNoClear
	ldr r0, _0805F2F0 @ =0x08115478
	ldr r1, _0805F2F4 @ =0x02021728
	movs r2, #8
	bl CpuFastSet
	mov r0, sb
	cmp r0, #0
	bne _0805F2FC
	movs r0, #0xc7
	lsls r0, r0, #4
	bl DecodeMsg
	adds r4, r0, #0
	bl GetStringTextLen
	mov r8, r0
	mov r5, r8
	adds r5, #0x10
	ldr r0, _0805F2F8 @ =0x00000C71
	b _0805F312
	.align 2, 0
_0805F2D8: .4byte 0x0811531C
_0805F2DC: .4byte 0x06002000
_0805F2E0: .4byte 0x08115498
_0805F2E4: .4byte 0x0201977C
_0805F2E8: .4byte 0x02017640
_0805F2EC: .4byte 0x060020C0
_0805F2F0: .4byte 0x08115478
_0805F2F4: .4byte 0x02021728
_0805F2F8: .4byte 0x00000C71
_0805F2FC:
	movs r1, #0
	mov r8, r1
	adds r0, r7, #0
	bl GetItemName
	adds r4, r0, #0
	bl GetStringTextLen
	adds r5, r0, #0
	adds r5, #0x10
	ldr r0, _0805F390 @ =0x00000C72
_0805F312:
	bl DecodeMsg
	adds r4, r0, #0
	bl GetStringTextLen
	adds r4, r0, r5
	adds r0, r4, #7
	asrs r6, r0, #3
	ldr r0, _0805F394 @ =gBg1Tm
	lsls r1, r6, #0x10
	lsrs r1, r1, #0x10
	bl sub_805F198
	ldr r5, _0805F398 @ =0x02017658
	adds r0, r5, #0
	adds r1, r6, #0
	bl InitText
	lsls r0, r6, #3
	subs r0, r0, r4
	asrs r0, r0, #1
	mov sl, r0
	adds r0, r5, #0
	mov r1, sl
	bl Text_SetCursor
	ldr r0, _0805F39C @ =0x08115378
	ldr r1, _0805F3A0 @ =0x060020C0
	bl LZ77UnCompVram
	mov r3, sb
	cmp r3, #0
	bne _0805F3A8
	movs r0, #0xc7
	lsls r0, r0, #4
	bl DecodeMsg
	adds r4, r0, #0
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetColor
	adds r0, r5, #0
	adds r1, r4, #0
	bl Text_DrawString
	adds r0, r5, #0
	movs r1, #0x10
	bl Text_Skip
	ldr r0, _0805F3A4 @ =0x00000C71
	bl DecodeMsg
	adds r4, r0, #0
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetColor
	adds r0, r5, #0
	adds r1, r4, #0
	bl Text_DrawString
	b _0805F3E0
	.align 2, 0
_0805F390: .4byte 0x00000C72
_0805F394: .4byte gBg1Tm
_0805F398: .4byte 0x02017658
_0805F39C: .4byte 0x08115378
_0805F3A0: .4byte 0x060020C0
_0805F3A4: .4byte 0x00000C71
_0805F3A8:
	adds r0, r5, #0
	movs r1, #0x10
	bl Text_Skip
	adds r0, r7, #0
	bl GetItemName
	adds r4, r0, #0
	adds r0, r5, #0
	movs r1, #1
	bl Text_SetColor
	adds r0, r5, #0
	adds r1, r4, #0
	bl Text_DrawString
	ldr r0, _0805F420 @ =0x00000C72
	bl DecodeMsg
	adds r4, r0, #0
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetColor
	adds r0, r5, #0
	adds r1, r4, #0
	bl Text_DrawString
_0805F3E0:
	adds r1, r6, #2
	lsls r1, r1, #3
	movs r0, #0xf0
	subs r0, r0, r1
	asrs r5, r0, #1
	rsbs r1, r5, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldr r2, _0805F424 @ =0x0000FFD0
	movs r0, #1
	bl SetBgOffset
	movs r0, #2
	bl EnableBgSync
	bl InitIcons
	mov r0, sb
	cmp r0, #0
	bne _0805F428
	movs r0, #1
	movs r1, #0x12
	bl ApplyIconPalette
	adds r0, r7, #0
	bl GetItemKind
	adds r0, #0x70
	movs r1, #0x40
	bl PutIconObjImg
	b _0805F43C
	.align 2, 0
_0805F420: .4byte 0x00000C72
_0805F424: .4byte 0x0000FFD0
_0805F428:
	movs r0, #0
	movs r1, #0x12
	bl ApplyIconPalette
	adds r0, r7, #0
	bl GetItemIcon
	movs r1, #0x40
	bl PutIconObjImg
_0805F43C:
	ldr r0, _0805F490 @ =0x08607660
	movs r1, #0x96
	bl BasCreate
	ldr r1, [sp]
	str r0, [r1, #0x60]
	movs r4, #0
	movs r1, #0x91
	lsls r1, r1, #6
	strh r1, [r0, #8]
	mov r1, sl
	adds r1, #8
	adds r1, r5, r1
	add r1, r8
	strh r1, [r0, #2]
	movs r1, #0x38
	strh r1, [r0, #4]
	bl EnablePalSync
	ldr r2, _0805F494 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x45
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0805F490: .4byte 0x08607660
_0805F494: .4byte gDispIo

	thumb_func_start sub_805F498
sub_805F498: @ 0x0805F498
	push {r4, r5, lr}
	ldr r4, _0805F554 @ =0x0201F0E0
	ldr r0, _0805F558 @ =0x08607668
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	str r5, [r4]
	ldr r1, _0805F55C @ =0x0201F0E4
	movs r0, #0
	str r0, [r1]
	strh r0, [r5, #0x2c]
	str r0, [r5, #0x48]
	str r0, [r5, #0x44]
	str r0, [r5, #0x50]
	str r0, [r5, #0x4c]
	bl sub_8058F38
	cmp r0, #0
	bne _0805F576
	ldr r0, _0805F560 @ =0x0203CD14
	ldrh r0, [r0]
	cmp r0, #4
	beq _0805F576
	ldr r0, _0805F564 @ =0x0203CD08
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _0805F500
	ldr r4, _0805F568 @ =0x0203CD7C
	ldr r0, [r4]
	bl HasBattleUnitGainedWeaponLevel
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0805F4EA
	ldr r0, [r4]
	adds r0, #0x4a
	ldrh r0, [r0]
	str r0, [r5, #0x44]
_0805F4EA:
	ldr r0, [r4]
	bl DidBattleUnitBreakWeapon
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0805F500
	ldr r0, [r4]
	adds r0, #0x4a
	ldrh r0, [r0]
	str r0, [r5, #0x48]
_0805F500:
	ldr r0, _0805F564 @ =0x0203CD08
	movs r1, #2
	ldrsh r0, [r0, r1]
	cmp r0, #0
	bne _0805F538
	ldr r4, _0805F56C @ =0x0203CD80
	ldr r0, [r4]
	bl HasBattleUnitGainedWeaponLevel
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0805F522
	ldr r0, [r4]
	adds r0, #0x4a
	ldrh r0, [r0]
	str r0, [r5, #0x4c]
_0805F522:
	ldr r0, [r4]
	bl DidBattleUnitBreakWeapon
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _0805F538
	ldr r0, [r4]
	adds r0, #0x4a
	ldrh r0, [r0]
	str r0, [r5, #0x50]
_0805F538:
	ldr r0, [r5, #0x44]
	ldr r1, [r5, #0x48]
	adds r0, r0, r1
	ldr r1, [r5, #0x4c]
	adds r0, r0, r1
	ldr r1, [r5, #0x50]
	cmn r0, r1
	bne _0805F570
	ldr r1, _0805F55C @ =0x0201F0E4
	movs r0, #1
	str r0, [r1]
	bl sub_805F15C
	b _0805F576
	.align 2, 0
_0805F554: .4byte 0x0201F0E0
_0805F558: .4byte 0x08607668
_0805F55C: .4byte 0x0201F0E4
_0805F560: .4byte 0x0203CD14
_0805F564: .4byte 0x0203CD08
_0805F568: .4byte 0x0203CD7C
_0805F56C: .4byte 0x0203CD80
_0805F570:
	movs r0, #0x80
	bl SetBgmVolume
_0805F576:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_805F57C
sub_805F57C: @ 0x0805F57C
	push {lr}
	adds r1, r0, #0
	ldrh r0, [r1, #0x2c]
	adds r0, #1
	strh r0, [r1, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x10
	ble _0805F594
	adds r0, r1, #0
	bl Proc_Break
_0805F594:
	pop {r0}
	bx r0

	thumb_func_start sub_805F598
sub_805F598: @ 0x0805F598
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, [r4, #0x44]
	cmp r2, #0
	beq _0805F5B4
	movs r1, #0
	bl sub_805F27C
	bl sub_805F178
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x60
	strh r0, [r4, #0x2e]
_0805F5B4:
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_805F5C0
sub_805F5C0: @ 0x0805F5C0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x44]
	cmp r0, #0
	bne _0805F5D2
	adds r0, r4, #0
	bl Proc_Break
	b _0805F5F2
_0805F5D2:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805F5F2
	ldr r0, [r4, #0x60]
	bl BasRemove
	bl sub_80474D8
	adds r0, r4, #0
	bl Proc_Break
_0805F5F2:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_805F5F8
sub_805F5F8: @ 0x0805F5F8
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, [r4, #0x4c]
	cmp r2, #0
	beq _0805F614
	movs r1, #0
	bl sub_805F27C
	bl sub_805F178
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x60
	strh r0, [r4, #0x2e]
_0805F614:
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_805F620
sub_805F620: @ 0x0805F620
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x4c]
	cmp r0, #0
	bne _0805F632
	adds r0, r4, #0
	bl Proc_Break
	b _0805F652
_0805F632:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805F652
	ldr r0, [r4, #0x60]
	bl BasRemove
	bl sub_80474D8
	adds r0, r4, #0
	bl Proc_Break
_0805F652:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_805F658
sub_805F658: @ 0x0805F658
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, [r4, #0x48]
	cmp r2, #0
	beq _0805F674
	movs r1, #1
	bl sub_805F27C
	bl sub_805F188
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x6c
	strh r0, [r4, #0x2e]
_0805F674:
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_805F680
sub_805F680: @ 0x0805F680
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x48]
	cmp r0, #0
	bne _0805F692
	adds r0, r4, #0
	bl Proc_Break
	b _0805F6B2
_0805F692:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805F6B2
	ldr r0, [r4, #0x60]
	bl BasRemove
	bl sub_80474D8
	adds r0, r4, #0
	bl Proc_Break
_0805F6B2:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_805F6B8
sub_805F6B8: @ 0x0805F6B8
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, [r4, #0x50]
	cmp r2, #0
	beq _0805F6D4
	movs r1, #1
	bl sub_805F27C
	bl sub_805F188
	movs r0, #0
	strh r0, [r4, #0x2c]
	movs r0, #0x6c
	strh r0, [r4, #0x2e]
_0805F6D4:
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_805F6E0
sub_805F6E0: @ 0x0805F6E0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x50]
	cmp r0, #0
	bne _0805F6F2
	adds r0, r4, #0
	bl Proc_Break
	b _0805F716
_0805F6F2:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	ldrh r2, [r4, #0x2e]
	lsls r1, r2, #0x10
	cmp r0, r1
	ble _0805F716
	movs r0, #0
	strh r0, [r4, #0x2c]
	ldr r0, [r4, #0x60]
	bl BasRemove
	bl sub_80474D8
	adds r0, r4, #0
	bl Proc_Break
_0805F716:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_805F71C
sub_805F71C: @ 0x0805F71C
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x10
	ble _0805F742
	ldr r0, _0805F748 @ =0x0201F0E4
	movs r1, #1
	str r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	bl SetBgmVolume
	adds r0, r4, #0
	bl Proc_Break
_0805F742:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0805F748: .4byte 0x0201F0E4

	thumb_func_start nullsub_10
nullsub_10: @ 0x0805F74C
	bx lr
	.align 2, 0

	thumb_func_start sub_805F750
sub_805F750: @ 0x0805F750
	push {r4, lr}
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r4, _0805F77C @ =0x08662E4C
	bl GetItemIid
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r1, [r4]
	ldr r2, _0805F780 @ =0x0000FFFF
	cmp r1, r2
	beq _0805F774
_0805F768:
	cmp r1, r0
	beq _0805F774
	adds r4, #0x10
	ldrh r1, [r4]
	cmp r1, r2
	bne _0805F768
_0805F774:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0805F77C: .4byte 0x08662E4C
_0805F780: .4byte 0x0000FFFF

	thumb_func_start sub_805F784
sub_805F784: @ 0x0805F784
	push {lr}
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_805F750
	ldrb r0, [r0, #2]
	pop {r1}
	bx r1

	thumb_func_start sub_805F794
sub_805F794: @ 0x0805F794
	push {lr}
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_805F750
	ldrh r0, [r0, #4]
	pop {r1}
	bx r1

	thumb_func_start sub_805F7A4
sub_805F7A4: @ 0x0805F7A4
	push {lr}
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_805F750
	ldr r0, [r0, #8]
	pop {r1}
	bx r1

	thumb_func_start sub_805F7B4
sub_805F7B4: @ 0x0805F7B4
	push {lr}
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_805F750
	ldrb r0, [r0, #0xc]
	pop {r1}
	bx r1

	thumb_func_start GetItemMaFacing
GetItemMaFacing: @ 0x0805F7C4
	push {lr}
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_805F750
	ldrb r0, [r0, #0xd]
	pop {r1}
	bx r1

	thumb_func_start sub_805F7D4
sub_805F7D4: @ 0x0805F7D4
	push {lr}
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl sub_805F750
	ldrb r0, [r0, #0xe]
	pop {r1}
	bx r1

	thumb_func_start sub_805F7E4
sub_805F7E4: @ 0x0805F7E4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	movs r0, #0
	str r0, [r7]
_0805F7EE:
	ldr r0, [r7]
	cmp r0, #3
	ble _0805F7F6
	b _0805F818
_0805F7F6:
	ldr r0, _0805F814 @ =0x03001440
	ldr r1, [r7]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, r0, r1
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #1
	str r1, [r7]
	b _0805F7EE
	.align 2, 0
_0805F814: .4byte 0x03001440
_0805F818:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_805F820
sub_805F820: @ 0x0805F820
	push {r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r1, [r7]
	adds r0, r1, #0
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	ldr r2, [r7, #4]
	adds r1, r2, #0
	lsls r2, r1, #0x10
	lsrs r1, r2, #0x10
	ldr r3, [r7, #8]
	adds r2, r3, #0
	lsls r3, r2, #0x10
	lsrs r2, r3, #0x10
	ldr r3, [r7, #0xc]
	bl MU_StartExt
	str r0, [r7, #0x10]
	ldr r0, [r7, #0x10]
	adds r1, r0, #0
	adds r0, #0x38
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7, #0x10]
	adds r0, r1, #0
	b _0805F86C
_0805F86C:
	add sp, #0x14
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start MU_Start
MU_Start: @ 0x0805F874
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	movs r1, #0xe
	ldrsb r1, [r0, r1]
	adds r0, r1, #0
	lsls r1, r0, #0x10
	lsrs r4, r1, #0x10
	ldr r0, [r7]
	movs r1, #0xf
	ldrsb r1, [r0, r1]
	adds r0, r1, #0
	lsls r1, r0, #0x10
	lsrs r5, r1, #0x10
	ldr r0, [r7]
	ldr r1, [r0, #4]
	ldrb r6, [r1, #4]
	ldr r0, [r7]
	bl GetUnitSpritePalette
	adds r3, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl MU_StartExt
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #4]
	adds r1, r0, #0
	adds r0, #0x38
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7, #4]
	adds r0, r1, #0
	b _0805F8D2
_0805F8D2:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_805F8DC
sub_805F8DC: @ 0x0805F8DC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl MU_OnLoop
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805F8F4
sub_805F8F4: @ 0x0805F8F4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x38
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_805F91C
sub_805F91C: @ 0x0805F91C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x38
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_805F93C
sub_805F93C: @ 0x0805F93C
	push {r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, [r7]
	bl MU_Start
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bne _0805F95A
	movs r0, #0
	b _0805F9B0
_0805F95A:
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r0, #0
	adds r0, #0x44
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #8]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r0, #0
	adds r0, #0x46
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	adds r0, #0x39
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #6
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7, #0xc]
	adds r0, r1, #0
	b _0805F9B0
_0805F9B0:
	add sp, #0x10
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start MU_StartExt
MU_StartExt: @ 0x0805F9B8
	push {r4, r7, lr}
	sub sp, #0x1c
	mov r7, sp
	adds r4, r0, #0
	adds r0, r2, #0
	str r3, [r7, #8]
	adds r2, r7, #0
	adds r3, r4, #0
	strh r3, [r2]
	adds r2, r7, #2
	strh r1, [r2]
	adds r1, r7, #4
	strh r0, [r1]
	adds r0, r7, #0
	adds r0, #0x18
	movs r1, #0
	strh r1, [r0]
	bl MU_GenerateConfigDefault
	str r0, [r7, #0x14]
	ldr r0, [r7, #0x14]
	cmp r0, #0
	bne _0805F9EA
	movs r0, #0
	b _0805FBD4
_0805F9EA:
	ldr r1, _0805FA14 @ =ProcScr_Mu
	adds r0, r1, #0
	bl Proc_Find
	cmp r0, #0
	beq _0805F9FE
	adds r0, r7, #0
	adds r0, #0x18
	movs r1, #0xfe
	strh r1, [r0]
_0805F9FE:
	ldr r1, _0805FA14 @ =ProcScr_Mu
	adds r0, r1, #0
	movs r1, #5
	bl SpawnProc
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bne _0805FA18
	movs r0, #0
	b _0805FBD4
	.align 2, 0
_0805FA14: .4byte ProcScr_Mu
_0805FA18:
	ldr r0, [r7, #0xc]
	movs r1, #0
	str r1, [r0, #0x2c]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	adds r0, #0x39
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7, #0xc]
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r1, r2, #0
	lsls r2, r1, #4
	adds r3, r2, #0
	lsls r1, r3, #4
	adds r2, r0, #0
	adds r0, #0x44
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7, #0xc]
	adds r1, r7, #2
	ldrh r2, [r1]
	adds r1, r2, #0
	lsls r2, r1, #4
	adds r3, r2, #0
	lsls r1, r3, #4
	adds r2, r0, #0
	adds r0, #0x46
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	adds r0, #0x48
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	adds r0, #0x4a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xb
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	adds r0, #0x40
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r1, [r7, #0xc]
	adds r0, r7, #0
	adds r0, #0x18
	ldrh r2, [r0]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x3d
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r1, [r7, #0xc]
	adds r0, r7, #4
	ldrh r2, [r0]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x3b
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	adds r0, #0x3a
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	adds r0, #0x42
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	adds r0, #0x3e
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7, #0x14]
	ldr r2, [r7, #8]
	adds r1, r2, #0
	ldrb r2, [r0, #1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #1]
	adds r0, r7, #4
	ldrh r1, [r0]
	adds r0, r1, #0
	bl MU_GetAnimationByClassId
	adds r1, r0, #0
	adds r0, r1, #0
	movs r1, #0xa
	bl StartAnim
	str r0, [r7, #0x10]
	ldr r1, [r7, #0x10]
	adds r0, r1, #0
	movs r1, #4
	bl Anim_SetAnimId
	ldr r1, [r7, #0xc]
	adds r0, r1, #0
	bl MU_GetSheetGfx
	adds r4, r0, #0
	ldr r0, [r7, #0x14]
	ldrb r1, [r0]
	adds r0, r1, #0
	bl MU_GetGfxBufferById
	adds r1, r0, #0
	adds r0, r4, #0
	bl Decompress
	ldr r0, [r7, #0x14]
	ldrb r1, [r0]
	adds r0, r1, #0
	bl MU_GetGfxBufferById
	ldr r1, [r7, #0x10]
	str r0, [r1, #0x24]
	ldr r0, [r7, #0x10]
	ldr r1, [r7, #0x14]
	ldr r2, [r7, #0x14]
	ldrb r3, [r2, #1]
	movs r4, #0xf
	adds r2, r3, #0
	ands r2, r4
	adds r4, r2, #0
	lsls r3, r4, #0x18
	lsrs r2, r3, #0x18
	adds r3, r2, #0
	lsls r2, r3, #0xc
	ldrh r1, [r1, #2]
	adds r1, r1, r2
	adds r2, r1, #0
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r2, r3
	ldrh r2, [r0, #0x22]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x22]
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0x10]
	str r1, [r0, #0x30]
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0x14]
	str r1, [r0, #0x34]
	ldr r0, [r7, #0xc]
	ldr r1, [r0, #0x34]
	ldr r0, [r7, #0xc]
	str r0, [r1, #0x48]
	ldr r1, [r7, #0xc]
	adds r0, r1, #0
	b _0805FBD4
_0805FBD4:
	add sp, #0x1c
	pop {r4, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_805FBDC
sub_805FBDC: @ 0x0805FBDC
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, [r7]
	ldr r2, [r7, #4]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x3c
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x3c
	movs r1, #0
	ldrsb r1, [r2, r1]
	bl Anim_SetAnimId
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start MU_SetDefaultFacing
MU_SetDefaultFacing: @ 0x0805FC18
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x3b
	ldrb r2, [r1]
	adds r0, r2, #0
	bl GetJobInfo
	ldr r1, [r0, #0x24]
	movs r2, #1
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	beq _0805FC44
	ldr r0, [r7]
	movs r1, #1
	bl sub_805FBDC
	b _0805FC4C
_0805FC44:
	ldr r0, [r7]
	movs r1, #2
	bl sub_805FBDC
_0805FC4C:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start MU_SetDefaultFacing_Auto
MU_SetDefaultFacing_Auto: @ 0x0805FC54
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	ldr r1, _0805FC6C @ =ProcScr_Mu
	adds r0, r1, #0
	bl Proc_Find
	str r0, [r7]
	ldr r0, [r7]
	cmp r0, #0
	bne _0805FC70
	b _0805FC76
	.align 2, 0
_0805FC6C: .4byte ProcScr_Mu
_0805FC70:
	ldr r0, [r7]
	bl MU_SetDefaultFacing
_0805FC76:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805FC80
sub_805FC80: @ 0x0805FC80
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _0805FC9C @ =ProcScr_Mu
	adds r0, r1, #0
	bl Proc_Find
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	cmp r0, #0
	bne _0805FCA0
	b _0805FCAA
	.align 2, 0
_0805FC9C: .4byte ProcScr_Mu
_0805FCA0:
	ldr r1, [r7, #4]
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_805FD78
_0805FCAA:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start MU_Exists
MU_Exists: @ 0x0805FCB4
	push {r7, lr}
	mov r7, sp
	ldr r1, _0805FCCC @ =ProcScr_Mu
	adds r0, r1, #0
	bl Proc_Find
	adds r1, r0, #0
	adds r0, r1, #0
	cmp r0, #0
	beq _0805FCCA
	movs r0, #1
_0805FCCA:
	b _0805FCD0
	.align 2, 0
_0805FCCC: .4byte ProcScr_Mu
_0805FCD0:
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start MU_IsAnyActive
MU_IsAnyActive: @ 0x0805FCD8
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	movs r0, #0
	str r0, [r7, #4]
_0805FCE2:
	ldr r0, [r7, #4]
	cmp r0, #3
	ble _0805FCEA
	b _0805FD2A
_0805FCEA:
	ldr r0, _0805FD18 @ =0x03001440
	ldr r1, [r7, #4]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0
	beq _0805FD22
	ldr r0, _0805FD18 @ =0x03001440
	ldr r1, [r7, #4]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, #0x48
	adds r1, r0, r1
	ldr r0, [r1]
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x39
	ldrb r0, [r1]
	cmp r0, #1
	beq _0805FD1C
	b _0805FD1E
	.align 2, 0
_0805FD18: .4byte 0x03001440
_0805FD1C:
	b _0805FD22
_0805FD1E:
	movs r0, #1
	b _0805FD38
_0805FD22:
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _0805FCE2
_0805FD2A:
	ldr r0, [r7, #4]
	cmp r0, #3
	ble _0805FD34
	movs r0, #0
	b _0805FD38
_0805FD34:
	movs r0, #1
	b _0805FD38
_0805FD38:
	add sp, #8
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_805FD40
sub_805FD40: @ 0x0805FD40
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x34]
	ldrb r0, [r1]
	cmp r0, #0
	bne _0805FD56
	movs r0, #0
	b _0805FD70
_0805FD56:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x39
	ldrb r0, [r1]
	cmp r0, #1
	beq _0805FD64
	b _0805FD68
_0805FD64:
	movs r0, #0
	b _0805FD70
_0805FD68:
	movs r0, #1
	b _0805FD70
_0805FD6C:
	.byte 0x00, 0x20, 0xFF, 0xE7
_0805FD70:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_805FD78
sub_805FD78: @ 0x0805FD78
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	movs r0, #0
	str r0, [r7, #8]
_0805FD86:
	ldr r0, [r7, #8]
	cmp r0, #0x3f
	ble _0805FD8E
	b _0805FDB8
_0805FD8E:
	ldr r0, [r7]
	ldr r1, [r0, #0x34]
	adds r0, r1, #5
	ldr r1, [r7, #8]
	adds r0, r0, r1
	ldr r1, [r7, #4]
	ldr r2, [r7, #8]
	adds r1, r1, r2
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, [r7, #8]
	adds r1, r0, #1
	str r1, [r7, #8]
	b _0805FD86
_0805FDB8:
	ldr r1, [r7]
	ldr r0, [r1, #0x34]
	ldrb r1, [r0, #4]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #4]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x39
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	bl sub_805FF50
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_805FDEC
sub_805FDEC: @ 0x0805FDEC
	push {r4, r7, lr}
	sub sp, #0x10
	mov r7, sp
	adds r4, r0, #0
	adds r0, r2, #0
	str r3, [r7, #8]
	adds r2, r7, #0
	adds r3, r4, #0
	strh r3, [r2]
	adds r2, r7, #2
	strh r1, [r2]
	adds r1, r7, #4
	strh r0, [r1]
	adds r1, r7, #0
	ldrh r0, [r1]
	adds r2, r7, #2
	ldrh r1, [r2]
	adds r3, r7, #4
	ldrh r2, [r3]
	ldr r3, [r7, #8]
	bl MU_StartExt
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bne _0805FE24
	movs r0, #0
	b _0805FE34
_0805FE24:
	ldr r1, [r7, #0xc]
	adds r0, r1, #0
	ldr r1, [r7, #0x1c]
	bl sub_805FD78
	ldr r1, [r7, #0xc]
	adds r0, r1, #0
	b _0805FE34
_0805FE34:
	add sp, #0x10
	pop {r4, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_805FE3C
sub_805FE3C: @ 0x0805FE3C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	movs r1, #0
	str r1, [r0, #0x58]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	movs r1, #0
	str r1, [r0, #0x5c]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x66
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_805FE78
sub_805FE78: @ 0x0805FE78
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	ldr r0, [r1, #0x58]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x64
	movs r3, #0
	ldrsh r1, [r2, r3]
	bl PlaySeSpacial
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805FE9C
sub_805FE9C: @ 0x0805FE9C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x5c]
	cmp r1, #0
	beq _0805FEBE
	ldr r1, [r7]
	ldr r0, [r1, #0x5c]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r3, #0
	ldrsh r1, [r2, r3]
	bl PlaySeSpacial
_0805FEBE:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805FEC8
sub_805FEC8: @ 0x0805FEC8
	push {r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r1, _0805FF18 @ =0x08664744
	adds r0, r1, #0
	bl Proc_Find
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bne _0805FEF0
	ldr r1, _0805FF18 @ =0x08664744
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #0xc]
_0805FEF0:
	ldr r0, [r7, #0xc]
	ldr r1, [r0, #0x58]
	cmp r1, #0
	bne _0805FF1C
	ldr r0, [r7, #0xc]
	ldr r1, [r7]
	str r1, [r0, #0x58]
	ldr r1, [r7, #0xc]
	ldr r2, [r7, #8]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x64
	ldrh r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strh r2, [r1]
	b _0805FF46
	.align 2, 0
_0805FF18: .4byte 0x08664744
_0805FF1C:
	ldr r0, [r7, #0xc]
	ldr r1, [r0, #0x60]
	cmp r1, #0
	bne _0805FF46
	ldr r0, [r7, #0xc]
	ldr r1, [r7]
	ldr r2, [r7, #4]
	adds r1, r1, r2
	str r1, [r0, #0x5c]
	ldr r1, [r7, #0xc]
	ldr r2, [r7, #8]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x66
	ldrh r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strh r2, [r1]
_0805FF46:
	add sp, #0x10
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805FF50
sub_805FF50: @ 0x0805FF50
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl sub_8060748
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_805FF68
sub_805FF68: @ 0x0805FF68
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_805FF78
sub_805FF78: @ 0x0805FF78
	push {r4, r5, r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
_0805FF80:
	b _0805FF84
_0805FF82:
	.byte 0x0E, 0xE1
_0805FF84:
	adds r0, r7, #4
	ldr r2, [r7]
	ldr r1, [r2, #0x34]
	ldr r3, [r7]
	ldr r2, [r3, #0x34]
	ldrb r3, [r2, #4]
	adds r4, r3, #1
	adds r5, r4, #0
	strb r5, [r2, #4]
	lsls r3, r3, #0x18
	lsrs r2, r3, #0x18
	adds r1, #5
	adds r2, r1, r2
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r2, r1, #0
	strh r2, [r0]
	adds r0, r7, #4
	ldrh r1, [r0]
	adds r0, r1, #1
	adds r2, r0, #0
	lsls r1, r2, #0x10
	asrs r0, r1, #0x10
	cmp r0, #0xf
	bls _0805FFB8
	b _0806019E
_0805FFB8:
	lsls r1, r0, #2
	ldr r2, _0805FFC4 @ =_0805FFC8
	adds r0, r1, r2
	ldr r1, [r0]
	mov pc, r1
	.align 2, 0
_0805FFC4: .4byte _0805FFC8
_0805FFC8: @ jump table
	.4byte _080600B8 @ case 0
	.4byte _080600C6 @ case 1
	.4byte _080600C6 @ case 2
	.4byte _080600C6 @ case 3
	.4byte _080600C6 @ case 4
	.4byte _080600B0 @ case 5
	.4byte _08060116 @ case 6
	.4byte _08060116 @ case 7
	.4byte _08060116 @ case 8
	.4byte _08060116 @ case 9
	.4byte _08060008 @ case 10
	.4byte _08060054 @ case 11
	.4byte _0806019E @ case 12
	.4byte _0806015A @ case 13
	.4byte _0806018E @ case 14
	.4byte _08060196 @ case 15
_08060008:
	ldr r0, [r7]
	ldr r2, [r7]
	ldr r1, [r2, #0x34]
	ldr r3, [r7]
	ldr r2, [r3, #0x34]
	ldrb r3, [r2, #4]
	adds r4, r3, #1
	adds r5, r4, #0
	strb r5, [r2, #4]
	lsls r3, r3, #0x18
	lsrs r2, r3, #0x18
	adds r1, #5
	adds r2, r1, r2
	movs r3, #0
	ldrsb r3, [r2, r3]
	adds r1, r3, #0
	adds r2, r0, #0
	adds r0, #0x40
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x39
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #3
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	b _080601A2
_08060054:
	ldr r0, [r7]
	bl sub_805FF68
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x39
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #5
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x44
	movs r2, #0
	ldrsh r0, [r1, r2]
	asrs r1, r0, #4
	adds r0, r1, #0
	lsls r1, r0, #0x10
	asrs r0, r1, #0x10
	ldr r1, _080600AC @ =gBmSt
	movs r3, #0xc
	ldrsh r2, [r1, r3]
	subs r0, r0, r2
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x46
	movs r4, #0
	ldrsh r1, [r2, r4]
	asrs r2, r1, #4
	adds r1, r2, #0
	lsls r2, r1, #0x10
	asrs r1, r2, #0x10
	ldr r2, _080600AC @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	subs r1, r1, r3
	bl sub_80601AC
	b _080601A2
	.align 2, 0
_080600AC: .4byte gBmSt
_080600B0:
	ldr r0, [r7]
	bl sub_806091C
	b _080601A2
_080600B8:
	ldr r0, [r7]
	bl sub_805FF68
	ldr r0, [r7]
	bl sub_80608EC
	b _080601A2
_080600C6:
	adds r0, r7, #4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x3c
	movs r3, #0
	ldrsb r3, [r2, r3]
	adds r1, r3, #0
	movs r2, #0
	ldrsh r0, [r0, r2]
	lsls r2, r1, #0x10
	asrs r1, r2, #0x10
	cmp r0, r1
	beq _08060114
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x3b
	ldrb r2, [r1]
	adds r0, r2, #0
	bl MU_GetAnimationByClassId
	str r0, [r7, #8]
	adds r0, r7, #4
	movs r3, #0
	ldrsh r1, [r0, r3]
	ldr r0, [r7]
	bl sub_805FBDC
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x39
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
_08060114:
	b _080601A2
_08060116:
	adds r0, r7, #4
	adds r1, r7, #4
	ldrh r2, [r1]
	subs r1, r2, #5
	adds r2, r1, #0
	strh r2, [r0]
	adds r0, r7, #4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x3c
	movs r3, #0
	ldrsb r3, [r2, r3]
	adds r1, r3, #0
	movs r4, #0
	ldrsh r0, [r0, r4]
	lsls r2, r1, #0x10
	asrs r1, r2, #0x10
	cmp r0, r1
	beq _08060158
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x3b
	ldrb r2, [r1]
	adds r0, r2, #0
	bl MU_GetAnimationByClassId
	str r0, [r7, #8]
	adds r0, r7, #4
	movs r2, #0
	ldrsh r1, [r0, r2]
	ldr r0, [r7]
	bl sub_805FBDC
_08060158:
	b _0805FF80
_0806015A:
	ldr r0, [r7]
	ldr r2, [r7]
	ldr r1, [r2, #0x34]
	ldr r3, [r7]
	ldr r2, [r3, #0x34]
	ldrb r3, [r2, #4]
	adds r4, r3, #1
	adds r5, r4, #0
	strb r5, [r2, #4]
	lsls r3, r3, #0x18
	lsrs r2, r3, #0x18
	adds r1, #5
	adds r2, r1, r2
	movs r3, #0
	ldrsb r3, [r2, r3]
	adds r1, r3, #0
	adds r2, r0, #0
	adds r0, #0x42
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	b _0805FF80
_0806018E:
	ldr r0, [r7]
	bl sub_805F8F4
	b _0805FF80
_08060196:
	ldr r0, [r7]
	bl sub_805F91C
	b _0805FF80
_0806019E:
	b _080601A0
_080601A0:
	b _0805FF80
_080601A2:
	add sp, #0xc
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80601AC
sub_80601AC: @ 0x080601AC
	push {r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, _08060218 @ =0x082DCD90
	ldr r1, _0806021C @ =0x06013000
	bl Decompress
	ldr r1, _08060220 @ =0x082AA324
	adds r0, r1, #0
	movs r1, #2
	bl StartAnim
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	ldrh r1, [r0, #0x22]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x8c
	lsls r3, r3, #5
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x22]
	ldr r1, [r7, #0xc]
	adds r0, r1, #0
	movs r1, #0
	bl Anim_SetAnimId
	ldr r1, _08060224 @ =0x08664774
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	ldr r1, [r7, #0xc]
	str r1, [r0, #0x50]
	ldr r0, [r7, #8]
	ldr r1, [r7]
	adds r2, r1, #0
	adds r2, #8
	str r2, [r0, #0x2c]
	ldr r0, [r7, #8]
	ldr r1, [r7, #4]
	subs r2, r1, #4
	str r2, [r0, #0x30]
	add sp, #0x10
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08060218: .4byte 0x082DCD90
_0806021C: .4byte 0x06013000
_08060220: .4byte 0x082AA324
_08060224: .4byte 0x08664774

	thumb_func_start sub_8060228
sub_8060228: @ 0x08060228
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	add r7, sp, #4
	str r0, [r7]
	ldr r0, _080602D8 @ =gPlaySt
	ldrb r1, [r0, #0x1d]
	lsls r2, r1, #0x1e
	lsrs r0, r2, #0x1f
	cmp r0, #0
	bne _08060242
	movs r0, #0x77
	bl m4aSongNumStart
_08060242:
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r1, _080602DC @ =gSinLut
	adds r0, r1, #0
	adds r1, #0x80
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r1, r0, #4
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r1, #0
	adds r1, r2, #0
	bl Div
	adds r1, r0, #0
	lsls r0, r1, #0x10
	asrs r4, r0, #0x10
	ldr r0, _080602DC @ =gSinLut
	movs r2, #0
	ldrsh r1, [r0, r2]
	rsbs r0, r1, #0
	lsls r1, r0, #4
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r1, #0
	adds r1, r2, #0
	bl Div
	adds r1, r0, #0
	lsls r0, r1, #0x10
	asrs r5, r0, #0x10
	ldr r0, _080602DC @ =gSinLut
	movs r2, #0
	ldrsh r1, [r0, r2]
	lsls r0, r1, #4
	movs r1, #0x80
	lsls r1, r1, #2
	bl Div
	adds r1, r0, #0
	lsls r0, r1, #0x10
	asrs r6, r0, #0x10
	ldr r1, _080602DC @ =gSinLut
	adds r0, r1, #0
	adds r1, #0x80
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r1, r0, #4
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r1, #0
	adds r1, r2, #0
	bl Div
	adds r2, r0, #0
	lsls r1, r2, #0x10
	asrs r0, r1, #0x10
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	adds r2, r5, #0
	adds r3, r6, #0
	bl SetObjAffine
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080602D8: .4byte gPlaySt
_080602DC: .4byte gSinLut

	thumb_func_start sub_80602E0
sub_80602E0: @ 0x080602E0
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r7, sp, #4
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	adds r2, r1, #1
	adds r3, r2, #0
	strh r3, [r0]
	lsls r1, r1, #0x10
	asrs r0, r1, #0x10
	cmp r0, #7
	ble _08060304
	ldr r0, [r7]
	bl Proc_Break
_08060304:
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, [r7]
	adds r0, r3, #0
	adds r4, r3, #0
	adds r4, #0x64
	movs r0, #0
	ldrsh r3, [r4, r0]
	movs r0, #8
	str r0, [sp]
	movs r0, #5
	bl Interpolate
	str r0, [r7, #4]
	ldr r1, _080603C0 @ =gSinLut
	adds r0, r1, #0
	adds r1, #0x80
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r1, r0, #4
	ldr r2, [r7, #4]
	adds r0, r1, #0
	adds r1, r2, #0
	bl Div
	adds r1, r0, #0
	lsls r0, r1, #0x10
	asrs r4, r0, #0x10
	ldr r0, _080603C0 @ =gSinLut
	movs r2, #0
	ldrsh r1, [r0, r2]
	rsbs r0, r1, #0
	lsls r1, r0, #4
	ldr r2, [r7, #4]
	adds r0, r1, #0
	adds r1, r2, #0
	bl Div
	adds r1, r0, #0
	lsls r0, r1, #0x10
	asrs r5, r0, #0x10
	ldr r0, _080603C0 @ =gSinLut
	movs r2, #0
	ldrsh r1, [r0, r2]
	lsls r0, r1, #4
	ldr r1, [r7, #4]
	bl Div
	adds r1, r0, #0
	lsls r0, r1, #0x10
	asrs r6, r0, #0x10
	ldr r1, _080603C0 @ =gSinLut
	adds r0, r1, #0
	adds r1, #0x80
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r1, r0, #4
	ldr r2, [r7, #4]
	adds r0, r1, #0
	adds r1, r2, #0
	bl Div
	adds r2, r0, #0
	lsls r1, r2, #0x10
	asrs r0, r1, #0x10
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	adds r2, r5, #0
	adds r3, r6, #0
	bl SetObjAffine
	ldr r1, [r7]
	ldr r0, [r1, #0x50]
	ldr r1, [r7]
	ldr r2, [r1, #0x2c]
	adds r1, r2, #0
	subs r1, #8
	ldr r2, [r7]
	ldr r3, [r2, #0x30]
	adds r2, r3, #0
	subs r2, #8
	movs r3, #0xc0
	lsls r3, r3, #2
	orrs r2, r3
	bl Anim_Display
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080603C0: .4byte gSinLut

	thumb_func_start sub_80603C4
sub_80603C4: @ 0x080603C4
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	adds r2, r1, #1
	adds r3, r2, #0
	strh r3, [r0]
	lsls r1, r1, #0x10
	asrs r0, r1, #0x10
	cmp r0, #0x27
	ble _080603E8
	ldr r0, [r7]
	bl Proc_Break
_080603E8:
	ldr r1, [r7]
	ldr r0, [r1, #0x50]
	ldr r2, [r7]
	ldr r1, [r2, #0x2c]
	ldr r2, [r7]
	ldr r3, [r2, #0x30]
	movs r4, #0x80
	lsls r4, r4, #1
	adds r2, r3, #0
	orrs r2, r4
	bl Anim_Display
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8060408
sub_8060408: @ 0x08060408
	push {r7, lr}
	mov r7, sp
	ldr r1, _08060420 @ =0x08664774
	adds r0, r1, #0
	bl Proc_Find
	adds r1, r0, #0
	adds r0, r1, #0
	cmp r0, #0
	beq _0806041E
	movs r0, #1
_0806041E:
	b _08060424
	.align 2, 0
_08060420: .4byte 0x08664774
_08060424:
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806042C
sub_806042C: @ 0x0806042C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_8060408
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	bne _08060458
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x39
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #3
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
_08060458:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8060460
sub_8060460: @ 0x08060460
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x39
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8060488
sub_8060488: @ 0x08060488
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldrh r0, [r1]
	cmp r0, #0
	bne _080604B6
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x39
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	b _080604DC
_080604B6:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r3, [r2]
	subs r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x40
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
_080604DC:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start MU_State_None
MU_State_None: @ 0x080604E4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start MU_State_NoOp
MU_State_NoOp: @ 0x080604F4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start MU_State_DuringMovement
MU_State_DuringMovement: @ 0x08060504
	push {r4, r5, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl MU_GetMovementSpeed
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	str r0, [r7, #4]
	ldr r0, [r7]
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x40
	ldr r3, [r7, #4]
	adds r2, r3, #0
	ldrh r3, [r1]
	adds r1, r2, r3
	adds r2, r0, #0
	adds r0, #0x40
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x44
	ldr r2, _0806073C @ =0x08664794
	ldr r4, [r7]
	adds r3, r4, #0
	adds r4, #0x3c
	movs r3, #0
	ldrsb r3, [r4, r3]
	adds r4, r3, #0
	lsls r3, r4, #2
	adds r2, r2, r3
	movs r4, #0
	ldrsh r3, [r2, r4]
	ldr r4, [r7, #4]
	adds r2, r3, #0
	muls r2, r4, r2
	ldrh r1, [r1]
	adds r1, r1, r2
	adds r2, r0, #0
	adds r0, #0x44
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x46
	ldr r2, _0806073C @ =0x08664794
	ldr r4, [r7]
	adds r3, r4, #0
	adds r4, #0x3c
	movs r3, #0
	ldrsb r3, [r4, r3]
	adds r4, r3, #0
	lsls r3, r4, #1
	adds r4, r3, #1
	adds r3, r4, #0
	lsls r4, r3, #1
	adds r2, r2, r4
	movs r5, #0
	ldrsh r3, [r2, r5]
	ldr r4, [r7, #4]
	adds r2, r3, #0
	muls r2, r4, r2
	ldrh r1, [r1]
	adds r1, r1, r2
	adds r2, r0, #0
	adds r0, #0x46
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldrh r0, [r1]
	lsrs r1, r0, #4
	adds r0, r1, #0
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0xf
	bhi _080605D0
	b _080606CC
_080605D0:
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r3, [r2]
	ldr r2, _08060740 @ =0xFFFFFF00
	adds r1, r3, r2
	adds r2, r0, #0
	adds r0, #0x40
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x44
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x40
	ldrh r2, [r3]
	ldr r3, _0806073C @ =0x08664794
	ldr r5, [r7]
	adds r4, r5, #0
	adds r5, #0x3c
	movs r4, #0
	ldrsb r4, [r5, r4]
	adds r5, r4, #0
	lsls r4, r5, #2
	adds r3, r3, r4
	movs r5, #0
	ldrsh r4, [r3, r5]
	muls r2, r4, r2
	ldrh r1, [r1]
	subs r1, r1, r2
	adds r2, r0, #0
	adds r0, #0x44
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x46
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x40
	ldrh r2, [r3]
	ldr r3, _0806073C @ =0x08664794
	ldr r5, [r7]
	adds r4, r5, #0
	adds r5, #0x3c
	movs r4, #0
	ldrsb r4, [r5, r4]
	adds r5, r4, #0
	lsls r4, r5, #1
	adds r5, r4, #1
	adds r4, r5, #0
	lsls r5, r4, #1
	adds r3, r3, r5
	movs r5, #0
	ldrsh r4, [r3, r5]
	muls r2, r4, r2
	ldrh r1, [r1]
	subs r1, r1, r2
	adds r2, r0, #0
	adds r0, #0x46
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x40
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x44
	ldrh r1, [r2]
	movs r2, #0xf
	bics r1, r2
	adds r2, r0, #0
	adds r0, #0x44
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x46
	ldrh r1, [r2]
	movs r2, #0xf
	bics r1, r2
	adds r2, r0, #0
	adds r0, #0x46
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
_080606CC:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x38
	ldrb r0, [r1]
	cmp r0, #0
	beq _0806072C
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x44
	movs r2, #0
	ldrsh r0, [r1, r2]
	asrs r1, r0, #4
	adds r2, r1, #0
	lsls r0, r2, #0x10
	asrs r1, r0, #0x10
	adds r0, r1, #0
	bl GetCameraAdjustedX
	adds r1, r0, #0
	ldr r0, _08060744 @ =gBmSt
	ldrh r2, [r0, #0xc]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0xc]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x46
	movs r4, #0
	ldrsh r0, [r1, r4]
	asrs r1, r0, #4
	adds r2, r1, #0
	lsls r0, r2, #0x10
	asrs r1, r0, #0x10
	adds r0, r1, #0
	bl GetCameraAdjustedY
	adds r1, r0, #0
	ldr r0, _08060744 @ =gBmSt
	ldrh r2, [r0, #0xe]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0xe]
_0806072C:
	ldr r0, [r7]
	bl sub_8060748
	add sp, #8
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806073C: .4byte 0x08664794
_08060740: .4byte 0xFFFFFF00
_08060744: .4byte gBmSt

	thumb_func_start sub_8060748
sub_8060748: @ 0x08060748
	push {r4, r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x3b
	ldrb r2, [r1]
	adds r0, r2, #0
	bl GetJobInfo
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r0, #0x24]
	movs r2, #1
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	beq _080607AA
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x3b
	ldrb r0, [r1]
	cmp r0, #0x2a
	blt _0806079C
	cmp r0, #0x2b
	ble _08060784
	cmp r0, #0x2f
	bgt _0806079C
	b _08060790
_08060784:
	ldr r0, _0806078C @ =0x08664866
	str r0, [r7, #8]
	b _080607A8
	.align 2, 0
_0806078C: .4byte 0x08664866
_08060790:
	ldr r0, _08060798 @ =0x0866483A
	str r0, [r7, #8]
	b _080607A8
	.align 2, 0
_08060798: .4byte 0x0866483A
_0806079C:
	ldr r0, _080607A4 @ =0x0866480C
	str r0, [r7, #8]
	b _080607A8
	.align 2, 0
_080607A4: .4byte 0x0866480C
_080607A8:
	b _080607DC
_080607AA:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x3b
	ldrb r0, [r1]
	cmp r0, #0xc
	blt _080607D0
	cmp r0, #0xf
	ble _080607C4
	cmp r0, #0x3d
	bgt _080607D0
	cmp r0, #0x3c
	blt _080607D0
	b _080607C4
_080607C4:
	ldr r0, _080607CC @ =0x086647C8
	str r0, [r7, #8]
	b _080607DC
	.align 2, 0
_080607CC: .4byte 0x086647C8
_080607D0:
	ldr r0, _080607D8 @ =0x086647A4
	str r0, [r7, #8]
	b _080607DC
	.align 2, 0
_080607D8: .4byte 0x086647A4
_080607DC:
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x3d
	ldrb r1, [r0]
	adds r2, r1, #1
	adds r3, r2, #0
	strb r3, [r0]
	lsls r1, r1, #0x18
	lsrs r0, r1, #0x18
	ldr r1, [r7, #8]
	ldrh r2, [r1]
	adds r1, r2, #0
	bl DivRem
	str r0, [r7, #0xc]
	adds r1, r7, #0
	adds r1, #0x10
	ldr r0, [r7]
	bl MU_ComputeDisplayPosition
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, [r7, #8]
	adds r0, r0, r1
	adds r1, r0, #4
	ldrh r0, [r1]
	cmp r0, #0
	beq _08060836
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, [r7, #8]
	adds r0, r0, r1
	adds r1, r0, #4
	ldrh r0, [r1]
	ldr r1, [r7, #8]
	adds r2, r1, #2
	ldrh r1, [r2]
	adds r3, r7, #0
	adds r3, #0x10
	movs r4, #0
	ldrsh r2, [r3, r4]
	bl sub_805FEC8
_08060836:
	add sp, #0x14
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start MU_OnLoop
MU_OnLoop: @ 0x08060840
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x39
	ldrb r0, [r1]
	cmp r0, #0
	beq _08060898
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldrh r0, [r1]
	cmp r0, #0
	bne _08060880
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x39
	ldrb r0, [r1]
	cmp r0, #3
	beq _0806087A
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x39
	ldrb r0, [r1]
	cmp r0, #2
	beq _0806087A
	b _08060880
_0806087A:
	ldr r0, [r7]
	bl sub_805FF78
_08060880:
	ldr r0, _080608A8 @ =0x08664894
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x39
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, [r7]
	bl _call_via_r1
_08060898:
	ldr r0, [r7]
	bl MU_DisplayAsMMS
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080608A8: .4byte 0x08664894

	thumb_func_start MU_OnEnd
MU_OnEnd: @ 0x080608AC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	ldr r0, [r1, #0x34]
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	adds r0, r1, #0
	bl Anim_End
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start MU_EndAll
MU_EndAll: @ 0x080608D4
	push {r7, lr}
	mov r7, sp
	ldr r1, _080608E8 @ =ProcScr_Mu
	adds r0, r1, #0
	bl Proc_EndEach
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080608E8: .4byte ProcScr_Mu

	thumb_func_start sub_80608EC
sub_80608EC: @ 0x080608EC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl sub_8060904
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8060904
sub_8060904: @ 0x08060904
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl Proc_End
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806091C
sub_806091C: @ 0x0806091C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl sub_805FF68
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x39
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start BlockAllProcsMarked4
BlockAllProcsMarked4: @ 0x0806094C
	push {r7, lr}
	mov r7, sp
	movs r0, #4
	bl Proc_LockEachMarked
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_806095C
sub_806095C: @ 0x0806095C
	push {r7, lr}
	mov r7, sp
	movs r0, #4
	bl Proc_ReleaseEachMarked
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start ApplyMoveScriptToCoordinates
ApplyMoveScriptToCoordinates: @ 0x0806096C
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
_08060978:
	b _0806097C
_0806097A:
	.byte 0x4A, 0xE0
_0806097C:
	adds r0, r7, #0
	adds r0, #8
	ldr r2, [r0]
	ldrb r3, [r2]
	adds r1, r3, #1
	adds r2, #1
	str r2, [r0]
	cmp r1, #0xa
	bhi _08060A0E
	adds r0, r1, #0
	lsls r1, r0, #2
	ldr r2, _0806099C @ =_080609A0
	adds r0, r1, r2
	ldr r1, [r0]
	mov pc, r1
	.align 2, 0
_0806099C: .4byte _080609A0
_080609A0: @ jump table
	.4byte _080609CC @ case 0
	.4byte _080609CE @ case 1
	.4byte _080609DC @ case 2
	.4byte _080609F8 @ case 3
	.4byte _080609EA @ case 4
	.4byte _080609CC @ case 5
	.4byte _08060A0E @ case 6
	.4byte _08060A0E @ case 7
	.4byte _08060A0E @ case 8
	.4byte _08060A0E @ case 9
	.4byte _08060A06 @ case 10
_080609CC:
	b _08060A12
_080609CE:
	ldr r1, [r7]
	ldr r0, [r7]
	ldr r1, [r7]
	ldr r2, [r1]
	subs r1, r2, #1
	str r1, [r0]
	b _08060A10
_080609DC:
	ldr r1, [r7]
	ldr r0, [r7]
	ldr r1, [r7]
	ldr r2, [r1]
	adds r1, r2, #1
	str r1, [r0]
	b _08060A10
_080609EA:
	ldr r1, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7, #4]
	ldr r2, [r1]
	subs r1, r2, #1
	str r1, [r0]
	b _08060A10
_080609F8:
	ldr r1, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7, #4]
	ldr r2, [r1]
	adds r1, r2, #1
	str r1, [r0]
	b _08060A10
_08060A06:
	ldr r0, [r7, #8]
	adds r1, r0, #1
	str r1, [r7, #8]
	b _08060A10
_08060A0E:
	b _08060A10
_08060A10:
	b _08060978
_08060A12:
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start MU_CanStart
MU_CanStart: @ 0x08060A1C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	movs r0, #0
	str r0, [r7]
_08060A26:
	ldr r0, [r7]
	cmp r0, #3
	ble _08060A2E
	b _08060A50
_08060A2E:
	ldr r0, _08060A44 @ =0x03001440
	ldr r1, [r7]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0
	bne _08060A48
	movs r0, #1
	b _08060A54
	.align 2, 0
_08060A44: .4byte 0x03001440
_08060A48:
	ldr r0, [r7]
	adds r1, r0, #1
	str r1, [r7]
	b _08060A26
_08060A50:
	movs r0, #0
	b _08060A54
_08060A54:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start MU_AllRestartAnimations
MU_AllRestartAnimations: @ 0x08060A5C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	movs r0, #0
	str r0, [r7]
_08060A66:
	ldr r0, [r7]
	cmp r0, #3
	ble _08060A6E
	b _08060AC8
_08060A6E:
	ldr r0, _08060AC4 @ =0x03001440
	ldr r1, [r7]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0
	beq _08060ABC
	ldr r0, _08060AC4 @ =0x03001440
	ldr r1, [r7]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, #0x48
	adds r1, r0, r1
	ldr r2, [r1]
	ldr r0, [r2, #0x30]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r0, _08060AC4 @ =0x03001440
	ldr r1, [r7]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, #0x48
	adds r1, r0, r1
	ldr r2, [r1]
	ldr r0, [r2, #0x30]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
_08060ABC:
	ldr r0, [r7]
	adds r1, r0, #1
	str r1, [r7]
	b _08060A66
	.align 2, 0
_08060AC4: .4byte 0x03001440
_08060AC8:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start MU_GenerateConfigDefault
MU_GenerateConfigDefault: @ 0x08060AD0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	movs r0, #0
	str r0, [r7]
_08060ADA:
	ldr r0, [r7]
	cmp r0, #3
	ble _08060AE2
	b _08060B5C
_08060AE2:
	ldr r0, _08060B4C @ =0x03001440
	ldr r1, [r7]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0
	bne _08060B54
	ldr r0, _08060B4C @ =0x03001440
	ldr r1, [r7]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, r0, r1
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, r2, #1
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, _08060B4C @ =0x03001440
	ldr r1, [r7]
	movs r2, #0x4c
	muls r1, r2, r1
	adds r0, r0, r1
	ldr r1, _08060B50 @ =0x086648D4
	ldr r2, [r7]
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r1, r1, r2
	ldrh r2, [r1]
	movs r3, #0xe0
	lsls r3, r3, #2
	adds r1, r2, r3
	ldrh r2, [r0, #2]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #2]
	ldr r0, [r7]
	movs r1, #0x4c
	muls r0, r1, r0
	ldr r2, _08060B4C @ =0x03001440
	adds r1, r0, r2
	adds r0, r1, #0
	b _08060B60
	.align 2, 0
_08060B4C: .4byte 0x03001440
_08060B50: .4byte 0x086648D4
_08060B54:
	ldr r0, [r7]
	adds r1, r0, #1
	str r1, [r7]
	b _08060ADA
_08060B5C:
	movs r0, #0
	b _08060B60
_08060B60:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start MU_ComputeDisplayPosition
MU_ComputeDisplayPosition: @ 0x08060B68
	push {r4, r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x39
	ldrb r0, [r1]
	cmp r0, #6
	beq _08060B80
	b _08060BD8
_08060B80:
	ldr r0, [r7, #4]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x44
	movs r3, #0
	ldrsh r1, [r2, r3]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x48
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r3, r1, r2
	asrs r1, r3, #4
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x46
	movs r3, #0
	ldrsh r1, [r2, r3]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x4a
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r3, r1, r2
	asrs r1, r3, #4
	ldrh r2, [r0, #2]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #2]
	movs r0, #1
	b _08060CAC
_08060BD8:
	adds r0, r7, #0
	adds r0, #8
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x44
	movs r3, #0
	ldrsh r1, [r2, r3]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x48
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r1, r1, r2
	asrs r2, r1, #4
	ldr r1, _08060CA0 @ =gBmSt
	ldrh r1, [r1, #0xc]
	subs r2, r2, r1
	adds r1, r2, #0
	adds r2, r1, #0
	adds r2, #8
	adds r1, r2, #0
	strh r1, [r0]
	adds r0, r7, #0
	adds r0, #0xa
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x46
	movs r3, #0
	ldrsh r1, [r2, r3]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x4a
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r1, r1, r2
	asrs r2, r1, #4
	ldr r1, _08060CA0 @ =gBmSt
	ldrh r1, [r1, #0xe]
	subs r2, r2, r1
	adds r1, r2, #0
	adds r2, r1, #0
	adds r2, #8
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7, #4]
	adds r1, r7, #0
	adds r1, #8
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrh r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7, #4]
	adds r1, r7, #0
	adds r1, #0xa
	ldrh r2, [r1]
	adds r1, r2, #0
	adds r1, #8
	ldrh r2, [r0, #2]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #2]
	adds r0, r7, #0
	adds r0, #8
	movs r2, #0
	ldrsh r1, [r0, r2]
	movs r0, #0x10
	cmn r1, r0
	blt _08060CA4
	adds r0, r7, #0
	adds r0, #8
	movs r3, #0
	ldrsh r1, [r0, r3]
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	bgt _08060CA4
	adds r0, r7, #0
	adds r0, #0xa
	movs r4, #0
	ldrsh r1, [r0, r4]
	movs r0, #0x10
	cmn r1, r0
	blt _08060CA4
	adds r0, r7, #0
	adds r0, #0xa
	movs r2, #0
	ldrsh r1, [r0, r2]
	cmp r1, #0xb0
	bgt _08060CA4
	b _08060CA8
	.align 2, 0
_08060CA0: .4byte gBmSt
_08060CA4:
	movs r0, #0
	b _08060CAC
_08060CA8:
	movs r0, #1
	b _08060CAC
_08060CAC:
	add sp, #0xc
	pop {r4, r7}
	pop {r1}
	bx r1

	thumb_func_start MU_DisplayAsMMS
MU_DisplayAsMMS: @ 0x08060CB4
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x3a
	ldrb r0, [r1]
	cmp r0, #0
	beq _08060CCA
	b _08060DDC
_08060CCA:
	adds r1, r7, #4
	ldr r0, [r7]
	bl MU_ComputeDisplayPosition
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	bne _08060CDC
	b _08060DDC
_08060CDC:
	adds r0, r7, #4
	ldrh r1, [r0]
	lsls r0, r1, #0x17
	lsrs r1, r0, #0x17
	adds r0, r7, #4
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	adds r0, r7, #6
	ldrh r1, [r0]
	movs r0, #0xff
	ands r1, r0
	adds r0, r7, #6
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x39
	ldrb r0, [r1]
	cmp r0, #6
	beq _08060D1E
	b _08060D20
_08060D1E:
	b _08060DA0
_08060D20:
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	cmp r1, #0
	beq _08060D3A
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	movs r0, #0xb
	ldrsb r0, [r1, r0]
	movs r1, #0xc0
	ands r0, r1
	cmp r0, #0
	bne _08060D3C
	b _08060D3A
_08060D3A:
	b _08060DA0
_08060D3C:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x46
	movs r2, #0
	ldrsh r0, [r1, r2]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x4a
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r0, r0, r1
	asrs r1, r0, #4
	adds r2, r1, #0
	adds r2, #8
	adds r0, r2, #0
	movs r1, #0x10
	bl Div
	adds r4, r0, #0
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x44
	movs r2, #0
	ldrsh r0, [r1, r2]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x48
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r0, r0, r1
	asrs r1, r0, #4
	adds r2, r1, #0
	adds r2, #8
	adds r0, r2, #0
	movs r1, #0x10
	bl Div
	adds r2, r4, #0
	lsls r1, r2, #2
	ldr r3, _08060D9C @ =gMapFog
	ldr r2, [r3]
	adds r1, r1, r2
	ldr r2, [r1]
	adds r0, r0, r2
	ldrb r1, [r0]
	cmp r1, #0
	bne _08060DA0
	b _08060DDC
	.align 2, 0
_08060D9C: .4byte gMapFog
_08060DA0:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x39
	ldrb r0, [r1]
	cmp r0, #7
	bne _08060DC8
	adds r0, r7, #6
	ldrh r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #3
	orrs r1, r0
	adds r0, r7, #6
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
_08060DC8:
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	adds r2, r7, #4
	movs r4, #0
	ldrsh r1, [r2, r4]
	adds r3, r7, #6
	movs r4, #0
	ldrsh r2, [r3, r4]
	bl Anim_Display
_08060DDC:
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start MU_GetMovementSpeed
MU_GetMovementSpeed: @ 0x08060DE4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x42
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0
	beq _08060E08
	ldr r1, [r7]
	adds r0, r1, #0
	adds r2, r1, #0
	adds r2, #0x42
	ldrh r1, [r2]
	adds r0, r1, #0
	b _08060E7E
_08060E08:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x3e
	ldrb r0, [r1]
	cmp r0, #0
	beq _08060E1A
	movs r0, #0x80
	lsls r0, r0, #1
	b _08060E7E
_08060E1A:
	bl IsFirstPlaythrough
	cmp r0, #0
	bne _08060E40
	ldr r1, _08060E3C @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #4]
	movs r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _08060E40
	movs r0, #0x80
	b _08060E7E
	.align 2, 0
_08060E3C: .4byte gKeySt
_08060E40:
	ldr r0, _08060E70 @ =gPlaySt
	ldrb r1, [r0, #0x1c]
	lsls r2, r1, #0x18
	lsrs r0, r2, #0x1f
	cmp r0, #0
	bne _08060E7A
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x3b
	ldrb r2, [r1]
	adds r0, r2, #0
	bl GetJobInfo
	ldr r1, _08060E74 @ =0x086648DC
	ldrb r0, [r0, #7]
	adds r1, r1, r0
	ldrb r2, [r1]
	adds r0, r2, #0
	lsls r1, r0, #4
	adds r2, r1, #0
	lsls r0, r2, #0x10
	lsrs r1, r0, #0x10
	adds r0, r1, #0
	b _08060E7E
	.align 2, 0
_08060E70: .4byte gPlaySt
_08060E74: .4byte 0x086648DC
_08060E78:
	.byte 0x01, 0xE0
_08060E7A:
	movs r0, #0x40
	b _08060E7E
_08060E7E:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start MU_GetGfxBufferById
MU_GetGfxBufferById: @ 0x08060E88
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08060EA8 @ =0x086648DE
	ldr r1, [r7]
	adds r2, r0, r1
	ldrb r0, [r2]
	adds r2, r0, #0
	lsls r1, r2, #4
	adds r1, r1, r0
	lsls r0, r1, #9
	ldr r2, _08060EAC @ =0x02004138
	adds r1, r0, r2
	adds r0, r1, #0
	b _08060EB0
	.align 2, 0
_08060EA8: .4byte 0x086648DE
_08060EAC: .4byte 0x02004138
_08060EB0:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start MU_GetSheetGfx
MU_GetSheetGfx: @ 0x08060EB8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08060ED8 @ =0x086649B4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x3b
	ldrb r1, [r2]
	subs r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r0, r0, r2
	ldr r1, [r0]
	adds r0, r1, #0
	b _08060EDC
	.align 2, 0
_08060ED8: .4byte 0x086649B4
_08060EDC:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start MU_GetAnimationByClassId
MU_GetAnimationByClassId: @ 0x08060EE4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r1, r7, #0
	strh r0, [r1]
	ldr r0, _08060F04 @ =0x086649B4
	adds r1, r7, #0
	ldrh r2, [r1]
	subs r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	b _08060F08
	.align 2, 0
_08060F04: .4byte 0x086649B4
_08060F08:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start MU_StartDeathFade
MU_StartDeathFade: @ 0x08060F10
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x39
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #7
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _08061008 @ =0x086648E4
	adds r0, r1, #0
	ldr r1, [r7]
	bl SpawnProc
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7]
	str r1, [r0, #0x54]
	ldr r0, [r7, #4]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x20
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _0806100C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806100C @ =gDispIo
	ldr r2, [r7, #4]
	adds r1, r2, #0
	adds r2, #0x64
	movs r3, #0
	ldrsh r1, [r2, r3]
	asrs r2, r1, #1
	adds r1, r2, #0
	adds r2, r0, #0
	adds r0, #0x44
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806100C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806100C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	ldr r0, [r7]
	movs r1, #0
	bl sub_8061624
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x1e]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xd
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x1e]
	ldr r0, _08061010 @ =gPlaySt
	ldrb r1, [r0, #0x1d]
	lsls r2, r1, #0x1e
	lsrs r0, r2, #0x1f
	cmp r0, #0
	bne _08061000
	movs r0, #0xd6
	bl m4aSongNumStart
_08061000:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08061008: .4byte 0x086648E4
_0806100C: .4byte gDispIo
_08061010: .4byte gPlaySt

	thumb_func_start sub_8061014
sub_8061014: @ 0x08061014
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _080610A4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080610A4 @ =gDispIo
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x64
	ldrh r2, [r1]
	subs r3, r2, #1
	adds r4, r3, #0
	strh r4, [r1]
	lsls r2, r2, #0x10
	asrs r1, r2, #0x10
	asrs r2, r1, #1
	adds r1, r2, #0
	adds r2, r0, #0
	adds r0, #0x44
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080610A4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080610A4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0
	bne _0806109C
	ldr r0, [r7]
	ldr r1, [r0, #0x54]
	adds r0, r1, #0
	bl sub_80608EC
	ldr r0, [r7]
	bl Proc_Break
_0806109C:
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080610A4: .4byte gDispIo

	thumb_func_start MU_Hide
MU_Hide: @ 0x080610A8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x3a
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80610D0
sub_80610D0: @ 0x080610D0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x3a
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80610F0
sub_80610F0: @ 0x080610F0
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, [r7]
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r0, #0
	adds r0, #0x44
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	ldr r1, [r7, #8]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r0, #0
	adds r0, #0x46
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_806113C
sub_806113C: @ 0x0806113C
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, [r7]
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r0, #0
	adds r0, #0x48
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	ldr r1, [r7, #8]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r0, #0
	adds r0, #0x4a
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8061188
sub_8061188: @ 0x08061188
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldr r1, [r7]
	ldr r2, [r1, #0x34]
	ldrh r3, [r2, #2]
	movs r2, #0xb0
	lsls r2, r2, #7
	adds r1, r3, r2
	ldrh r2, [r0, #0x22]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x22]
	ldr r0, [r7]
	ldr r1, [r0, #0x34]
	ldrb r0, [r1, #1]
	adds r1, r0, #0
	adds r1, #0x10
	adds r0, r1, #0
	lsls r1, r0, #5
	asrs r0, r1, #1
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, _080611F4 @ =gPal
	adds r0, r0, r1
	movs r1, #0xa8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080611F8 @ =0x0866472C
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	movs r1, #0x15
	movs r2, #8
	ldr r3, [r7]
	bl StartPalFade
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080611F4: .4byte gPal
_080611F8: .4byte 0x0866472C

	thumb_func_start sub_80611FC
sub_80611FC: @ 0x080611FC
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x34]
	ldrb r0, [r1, #1]
	adds r1, r0, #0
	adds r1, #0x10
	adds r0, r1, #0
	lsls r1, r0, #5
	asrs r0, r1, #1
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r2, _08061244 @ =gPal
	adds r1, r0, r2
	adds r0, r1, #0
	movs r1, #0x15
	movs r2, #8
	ldr r3, [r7]
	bl StartPalFade
	ldr r1, _08061248 @ =0x086648FC
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7]
	str r1, [r0, #0x54]
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08061244: .4byte gPal
_08061248: .4byte 0x086648FC

	thumb_func_start sub_806124C
sub_806124C: @ 0x0806124C
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x54]
	str r1, [r7, #4]
	ldr r1, [r7, #4]
	ldr r0, [r1, #0x30]
	ldr r2, [r7, #4]
	ldr r1, [r2, #0x34]
	ldr r2, [r7, #4]
	ldr r3, [r2, #0x34]
	ldrb r2, [r3, #1]
	movs r3, #0xf
	ands r2, r3
	adds r4, r2, #0
	lsls r3, r4, #0x18
	lsrs r2, r3, #0x18
	adds r3, r2, #0
	lsls r2, r3, #0xc
	ldrh r1, [r1, #2]
	adds r1, r1, r2
	adds r2, r1, #0
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r2, r3
	ldrh r2, [r0, #0x22]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x22]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806129C
sub_806129C: @ 0x0806129C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	adds r0, r1, #0
	movs r1, #4
	bl Anim_SetAnimId
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	ldr r0, _080612EC @ =sub_80612F0
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #0
	movs r2, #0x1e
	bl CallDelayedArg
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080612EC: .4byte sub_80612F0

	thumb_func_start sub_80612F0
sub_80612F0: @ 0x080612F0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r0, [r7]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8061318
sub_8061318: @ 0x08061318
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	ldr r0, _0806135C @ =sub_8061360
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #0
	movs r2, #0x1e
	bl CallDelayedArg
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806135C: .4byte sub_8061360

	thumb_func_start sub_8061360
sub_8061360: @ 0x08061360
	push {r4, r5, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _080613B8 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x58
	ldrb r4, [r1]
	ldr r1, _080613B8 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x58
	ldrb r0, [r1]
	movs r1, #1
	subs r5, r1, r0
	ldr r0, _080613B8 @ =0x0203CDE4
	ldr r1, [r0, #4]
	adds r0, r1, #0
	adds r1, #0x4a
	ldrh r2, [r1]
	adds r0, r2, #0
	bl GetItemMaFacing
	lsls r1, r0, #0x18
	lsrs r2, r1, #0x18
	adds r0, r4, #0
	adds r1, r5, #0
	bl MA_SetActorFacing
	ldr r0, [r7]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r0, [r7]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	add sp, #4
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080613B8: .4byte 0x0203CDE4

	thumb_func_start sub_80613BC
sub_80613BC: @ 0x080613BC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	ldr r0, _08061400 @ =sub_8061404
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #0
	movs r2, #0x14
	bl CallDelayedArg
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08061400: .4byte sub_8061404

	thumb_func_start sub_8061404
sub_8061404: @ 0x08061404
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r0, [r7]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_806142C
sub_806142C: @ 0x0806142C
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, _0806146C @ =0x0866472C
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r2, #0xa8
	lsls r2, r2, #2
	adds r0, r1, #0
	adds r1, r2, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r1, _08061470 @ =0x08664914
	adds r0, r1, #0
	ldr r1, [r7]
	bl SpawnProc
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806146C: .4byte 0x0866472C
_08061470: .4byte 0x08664914

	thumb_func_start sub_8061474
sub_8061474: @ 0x08061474
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x30
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8061494
sub_8061494: @ 0x08061494
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	ldr r0, [r1, #0x30]
	ldr r1, [r7]
	ldr r2, [r1, #0x2c]
	ldr r1, [r2, #0x34]
	ldrh r2, [r1, #2]
	movs r3, #0xb0
	lsls r3, r3, #7
	adds r1, r2, r3
	ldrh r2, [r0, #0x22]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x22]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80614C8
sub_80614C8: @ 0x080614C8
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	ldr r0, [r1, #0x30]
	ldr r1, [r7]
	ldr r2, [r1, #0x2c]
	ldr r1, [r2, #0x34]
	ldr r2, [r7]
	ldr r3, [r2, #0x2c]
	ldr r2, [r3, #0x34]
	ldrb r3, [r2, #1]
	movs r4, #0xf
	adds r2, r3, #0
	ands r2, r4
	adds r4, r2, #0
	lsls r3, r4, #0x18
	lsrs r2, r3, #0x18
	adds r3, r2, #0
	lsls r2, r3, #0xc
	ldrh r1, [r1, #2]
	adds r1, r1, r2
	adds r2, r1, #0
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r2, r3
	ldrh r2, [r0, #0x22]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x22]
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8061518
sub_8061518: @ 0x08061518
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	ldr r0, [r1, #0x34]
	ldrb r1, [r0, #1]
	adds r0, r1, #0
	adds r0, #0x10
	adds r1, r0, #0
	lsls r0, r1, #5
	asrs r1, r0, #1
	adds r0, r1, #0
	lsls r1, r0, #1
	ldr r0, _08061550 @ =gPal
	adds r1, r1, r0
	adds r0, r1, #0
	movs r1, #0x15
	movs r2, #0x14
	ldr r3, [r7]
	bl StartPalFade
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08061550: .4byte gPal

	thumb_func_start sub_8061554
sub_8061554: @ 0x08061554
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x30
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x30
	ldrb r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x30
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r1, [r7]
	ldr r0, [r1, #0x2c]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x30
	ldrb r1, [r2]
	movs r2, #1
	ands r1, r2
	adds r3, r1, #0
	lsls r2, r3, #0x18
	lsrs r1, r2, #0x18
	cmp r1, #0
	beq _080615A0
	movs r1, #2
	b _080615A4
_080615A0:
	movs r1, #2
	rsbs r1, r1, #0
_080615A4:
	movs r2, #0
	bl sub_806113C
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, #0xb
	bls _080615CA
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	adds r0, r1, #0
	movs r1, #0
	movs r2, #0
	bl sub_806113C
	ldr r0, [r7]
	bl Proc_Break
_080615CA:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80615D4
sub_80615D4: @ 0x080615D4
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	ldr r0, [r1, #0x30]
	ldr r1, [r7]
	ldr r2, [r1, #0x2c]
	ldr r1, [r2, #0x34]
	ldr r2, [r7]
	ldr r3, [r2, #0x2c]
	ldr r2, [r3, #0x34]
	ldrb r3, [r2, #1]
	movs r4, #0xf
	adds r2, r3, #0
	ands r2, r4
	adds r4, r2, #0
	lsls r3, r4, #0x18
	lsrs r2, r3, #0x18
	adds r3, r2, #0
	lsls r2, r3, #0xc
	ldrh r1, [r1, #2]
	adds r1, r1, r2
	adds r2, r1, #0
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r2, r3
	ldrh r2, [r0, #0x22]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x22]
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8061624
sub_8061624: @ 0x08061624
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, _080616A8 @ =0x0866472C
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r2, #0xa8
	lsls r2, r2, #2
	adds r0, r1, #0
	adds r1, r2, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldr r1, [r7]
	ldr r2, [r1, #0x34]
	ldrh r3, [r2, #2]
	movs r2, #0xb0
	lsls r2, r2, #7
	adds r1, r3, r2
	ldrh r2, [r0, #0x22]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x22]
	ldr r0, [r7]
	ldr r1, [r0, #0x34]
	ldrb r0, [r1, #1]
	adds r1, r0, #0
	adds r1, #0x10
	adds r0, r1, #0
	lsls r1, r0, #5
	asrs r0, r1, #1
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r2, _080616AC @ =gPal
	adds r1, r0, r2
	adds r0, r1, #0
	movs r1, #0x15
	movs r2, #0x14
	ldr r3, [r7]
	bl StartPalFade
	ldr r1, _080616B0 @ =0x0866499C
	adds r0, r1, #0
	ldr r1, [r7]
	bl SpawnProc
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080616A8: .4byte 0x0866472C
_080616AC: .4byte gPal
_080616B0: .4byte 0x0866499C

	thumb_func_start sub_80616B4
sub_80616B4: @ 0x080616B4
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	ldr r0, [r1, #0x30]
	ldr r1, [r7]
	ldr r2, [r1, #0x2c]
	ldr r1, [r2, #0x34]
	ldr r2, [r7]
	ldr r3, [r2, #0x2c]
	ldr r2, [r3, #0x34]
	ldrb r3, [r2, #1]
	movs r4, #0xf
	adds r2, r3, #0
	ands r2, r4
	adds r4, r2, #0
	lsls r3, r4, #0x18
	lsrs r2, r3, #0x18
	adds r3, r2, #0
	lsls r2, r3, #0xc
	ldrh r1, [r1, #2]
	adds r1, r1, r2
	adds r2, r1, #0
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r2, r3
	ldrh r2, [r0, #0x22]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x22]
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8061704
sub_8061704: @ 0x08061704
	push {r7, lr}
	mov r7, sp
	ldr r0, _08061718 @ =ProcScr_Mu
	ldr r1, _0806171C @ =sub_8061720
	bl Proc_ForEach
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08061718: .4byte ProcScr_Mu
_0806171C: .4byte sub_8061720

	thumb_func_start sub_8061720
sub_8061720: @ 0x08061720
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x3e
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8061748
sub_8061748: @ 0x08061748
	push {r4, r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	ldr r1, [r7]
	ldr r2, [r7, #4]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x3b
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, [r7]
	ldr r4, [r0, #0x30]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x3b
	ldrb r2, [r1]
	adds r0, r2, #0
	bl MU_GetAnimationByClassId
	adds r1, r0, #0
	adds r0, r4, #0
	bl Anim_SetInfo
	ldr r0, [r7]
	bl MU_GetSheetGfx
	adds r4, r0, #0
	ldr r0, [r7]
	ldr r1, [r0, #0x34]
	ldrb r2, [r1]
	adds r0, r2, #0
	bl MU_GetGfxBufferById
	adds r1, r0, #0
	adds r0, r4, #0
	bl Decompress
	ldr r0, [r7, #8]
	ldr r1, [r7]
	ldr r2, [r1, #0x34]
	ldrb r1, [r2, #1]
	adds r2, r1, #0
	adds r2, #0x10
	adds r1, r2, #0
	lsls r2, r1, #5
	adds r1, r2, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80617E0
sub_80617E0: @ 0x080617E0
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, [r7]
	ldr r0, [r1, #0x34]
	ldr r2, [r7, #4]
	adds r1, r2, #0
	ldrb r2, [r0, #1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldr r2, [r7]
	ldr r1, [r2, #0x34]
	ldr r2, [r7, #4]
	movs r3, #0xf
	ands r2, r3
	adds r3, r2, #0
	lsls r2, r3, #0xc
	ldrh r1, [r1, #2]
	adds r1, r1, r2
	adds r2, r1, #0
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r2, r3
	ldrh r2, [r0, #0x22]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x22]
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8061838
sub_8061838: @ 0x08061838
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _08061850 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x62
	ldrb r0, [r1]
	cmp r0, #1
	beq _08061854
	b _08061856
	.align 2, 0
_08061850: .4byte 0x0203CDE4
_08061854:
	b _08061858
_08061856:
	b _0806186A
_08061858:
	ldr r0, _08061874 @ =0x0203CDE4
	ldr r1, [r0, #0x18]
	adds r0, r1, #0
	adds r1, #0x48
	ldrh r2, [r1]
	adds r0, r2, #0
	ldr r1, [r7]
	bl StartPopup_08012178
_0806186A:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08061874: .4byte 0x0203CDE4

	thumb_func_start sub_8061878
sub_8061878: @ 0x08061878
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	str r0, [r7, #4]
	ldr r1, _080618CC @ =gBattleUnitA
	adds r0, r1, #0
	bl sub_80618D4
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _08061898
	ldr r0, _080618CC @ =gBattleUnitA
	str r0, [r7, #4]
_08061898:
	ldr r1, _080618D0 @ =gBattleUnitB
	adds r0, r1, #0
	bl sub_80618D4
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _080618AC
	ldr r0, _080618D0 @ =gBattleUnitB
	str r0, [r7, #4]
_080618AC:
	ldr r0, [r7, #4]
	cmp r0, #0
	beq _080618C2
	ldr r1, [r7, #4]
	adds r0, r1, #0
	adds r1, #0x4a
	ldrh r2, [r1]
	adds r0, r2, #0
	ldr r1, [r7]
	bl StartPopup_08012040
_080618C2:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080618CC: .4byte gBattleUnitA
_080618D0: .4byte gBattleUnitB

	thumb_func_start sub_80618D4
sub_80618D4: @ 0x080618D4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	movs r1, #0xb
	ldrsb r1, [r0, r1]
	movs r2, #0xc0
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	bne _080618FA
	ldr r0, [r7]
	bl DidBattleUnitBreakWeapon
	lsls r2, r0, #0x18
	asrs r1, r2, #0x18
	adds r0, r1, #0
	b _080618FE
_080618FA:
	movs r0, #0
	b _080618FE
_080618FE:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8061908
sub_8061908: @ 0x08061908
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	str r0, [r7, #4]
	ldr r1, _0806195C @ =gBattleUnitA
	adds r0, r1, #0
	bl sub_8061964
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _08061928
	ldr r0, _0806195C @ =gBattleUnitA
	str r0, [r7, #4]
_08061928:
	ldr r1, _08061960 @ =gBattleUnitB
	adds r0, r1, #0
	bl sub_8061964
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _0806193C
	ldr r0, _08061960 @ =gBattleUnitB
	str r0, [r7, #4]
_0806193C:
	ldr r0, [r7, #4]
	cmp r0, #0
	beq _08061952
	ldr r1, [r7, #4]
	adds r0, r1, #0
	adds r1, #0x4e
	ldrb r2, [r1]
	adds r0, r2, #0
	ldr r1, [r7]
	bl StartPopup_080120A0
_08061952:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806195C: .4byte gBattleUnitA
_08061960: .4byte gBattleUnitB

	thumb_func_start sub_8061964
sub_8061964: @ 0x08061964
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	movs r1, #0xb
	ldrsb r1, [r0, r1]
	movs r2, #0xc0
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	bne _0806198E
	ldr r0, [r7]
	bl HasBattleUnitGainedWeaponLevel
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _0806198E
	movs r0, #1
	b _08061992
_0806198E:
	movs r0, #0
	b _08061992
_08061992:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806199C
sub_806199C: @ 0x0806199C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl ResetText
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80619B0
sub_80619B0: @ 0x080619B0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl MU_AllRestartAnimations
	bl ResetTextFont
	bl sub_8062CF0
	bl InitBmBgLayers
	bl LoadUiFrameGraphics
	bl ApplySystemObjectsGraphics
	bl IsEventRunning
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _080619E0
	bl MU_EndAll
_080619E0:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80619E8
sub_80619E8: @ 0x080619E8
	push {r7, lr}
	mov r7, sp
	ldr r0, _08061AC4 @ =0x0203CDE4
	ldr r1, _08061AC4 @ =0x0203CDE4
	ldr r2, [r1, #0x50]
	ldrb r1, [r2, #2]
	lsrs r2, r1, #3
	adds r1, r2, #0
	movs r2, #1
	ands r1, r2
	adds r2, r0, #0
	adds r0, #0x58
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, _08061AC4 @ =0x0203CDE4
	ldr r2, _08061AC4 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	movs r2, #1
	subs r1, r2, r1
	adds r2, r0, #0
	adds r0, #0x59
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, _08061AC4 @ =0x0203CDE4
	ldr r2, _08061AC4 @ =0x0203CDE4
	ldr r1, [r2, #0x50]
	adds r2, r0, #0
	adds r0, #0x5a
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrh r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, _08061AC4 @ =0x0203CDE4
	ldr r2, _08061AC4 @ =0x0203CDE4
	ldr r1, [r2, #0x50]
	adds r2, r0, #0
	adds r0, #0x5c
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1, #2]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, _08061AC4 @ =0x0203CDE4
	ldr r2, _08061AC4 @ =0x0203CDE4
	ldr r1, [r2, #0x50]
	adds r2, r0, #0
	adds r0, #0x5d
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1, #3]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r1, _08061AC4 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #1
	bne _08061AB2
	ldr r0, _08061AC4 @ =0x0203CDE4
	adds r1, r0, #0
	adds r0, #0x58
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08061AC4 @ =0x0203CDE4
	adds r1, r0, #0
	adds r0, #0x59
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
_08061AB2:
	ldr r1, _08061AC4 @ =0x0203CDE4
	ldr r0, _08061AC4 @ =0x0203CDE4
	ldr r1, _08061AC4 @ =0x0203CDE4
	ldr r2, [r1, #0x50]
	adds r1, r2, #4
	str r1, [r0, #0x50]
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08061AC4: .4byte 0x0203CDE4

	thumb_func_start sub_8061AC8
sub_8061AC8: @ 0x08061AC8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08061AF4 @ =0x0203CDE4
	ldr r1, [r0, #0x50]
	ldrb r0, [r1, #2]
	movs r1, #0x80
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x18
	lsrs r0, r1, #0x18
	cmp r0, #0
	beq _08061AFC
	ldr r0, [r7]
	bl Proc_Break
	ldr r1, _08061AF8 @ =0x08664E4C
	ldr r0, [r7]
	bl Proc_GotoScript
	b _08061B06
	.align 2, 0
_08061AF4: .4byte 0x0203CDE4
_08061AF8: .4byte 0x08664E4C
_08061AFC:
	bl sub_80619E8
	ldr r0, [r7]
	bl Proc_Break
_08061B06:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8061B10
sub_8061B10: @ 0x08061B10
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_8068A48
	adds r1, r0, #0
	adds r0, r1, #0
	ldr r1, [r7]
	bl SpawnProcLocking
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8061B30
sub_8061B30: @ 0x08061B30
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _08061B7C @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5a
	ldrh r0, [r1]
	movs r1, #0x40
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _08061B72
	ldr r0, _08061B7C @ =0x0203CDE4
	ldr r2, _08061B7C @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_8064B7C
	ldr r0, [r7]
	movs r1, #0x64
	bl StartTemporaryLock
_08061B72:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08061B7C: .4byte 0x0203CDE4

	thumb_func_start MA_MoveCameraOntoActor
MA_MoveCameraOntoActor: @ 0x08061B80
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08061BA8 @ =0x0203CDE4
	ldr r2, [r0]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r0, _08061BA8 @ =0x0203CDE4
	ldr r3, [r0]
	movs r2, #0xf
	ldrsb r2, [r3, r2]
	ldr r0, [r7]
	bl CameraMoveWatchPosition
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08061BA8: .4byte 0x0203CDE4

	thumb_func_start MA_MoveCamOntoTarget
MA_MoveCamOntoTarget: @ 0x08061BAC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _08061BC4 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #1
	bne _08061BC8
	b _08061BDE
	.align 2, 0
_08061BC4: .4byte 0x0203CDE4
_08061BC8:
	ldr r0, _08061BE8 @ =0x0203CDE4
	ldr r2, [r0, #0x14]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r0, _08061BE8 @ =0x0203CDE4
	ldr r3, [r0, #0x14]
	movs r2, #0xf
	ldrsb r2, [r3, r2]
	ldr r0, [r7]
	bl CameraMoveWatchPosition
_08061BDE:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08061BE8: .4byte 0x0203CDE4

	thumb_func_start MA_DisplayDeathQuote
MA_DisplayDeathQuote: @ 0x08061BEC
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r7, #4]
	ldr r1, _08061C0C @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #1
	beq _08061C20
	cmp r0, #2
	beq _08061C10
	b _08061C34
	.align 2, 0
_08061C0C: .4byte 0x0203CDE4
_08061C10:
	ldr r1, _08061C30 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x21
	ldrb r0, [r1]
	cmp r0, #0
	bne _08061C20
	movs r0, #1
	str r0, [r7, #4]
_08061C20:
	ldr r0, _08061C30 @ =0x0203CDE4
	ldrb r1, [r0, #0xd]
	cmp r1, #0
	bne _08061C2C
	movs r0, #0
	str r0, [r7, #4]
_08061C2C:
	b _08061C34
	.align 2, 0
_08061C30: .4byte 0x0203CDE4
_08061C34:
	ldr r0, [r7, #4]
	movs r1, #1
	cmn r0, r1
	beq _08061C7E
	ldr r0, _08061C88 @ =0x0203CDE4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, [r1]
	ldrb r1, [r0, #4]
	str r1, [r7, #8]
	ldr r1, [r7, #8]
	adds r0, r1, #0
	lsls r2, r0, #0x18
	lsrs r1, r2, #0x18
	adds r0, r1, #0
	bl ShouldDisplayDeathQuote
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _08061C7E
	bl sub_8062CF0
	ldr r1, [r7, #8]
	adds r0, r1, #0
	lsls r2, r0, #0x18
	lsrs r1, r2, #0x18
	adds r0, r1, #0
	bl sub_806B808
	bl DisableEventSkip
_08061C7E:
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08061C88: .4byte 0x0203CDE4

	thumb_func_start MapAnimProc_DisplayDeathFade
MapAnimProc_DisplayDeathFade: @ 0x08061C8C
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r7, #4]
	ldr r1, _08061CAC @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #1
	beq _08061CC0
	cmp r0, #2
	beq _08061CB0
	b _08061CD4
	.align 2, 0
_08061CAC: .4byte 0x0203CDE4
_08061CB0:
	ldr r1, _08061CD0 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x21
	ldrb r0, [r1]
	cmp r0, #0
	bne _08061CC0
	movs r0, #1
	str r0, [r7, #4]
_08061CC0:
	ldr r0, _08061CD0 @ =0x0203CDE4
	ldrb r1, [r0, #0xd]
	cmp r1, #0
	bne _08061CCC
	movs r0, #0
	str r0, [r7, #4]
_08061CCC:
	b _08061CD4
	.align 2, 0
_08061CD0: .4byte 0x0203CDE4
_08061CD4:
	ldr r0, [r7, #4]
	movs r1, #1
	cmn r0, r1
	beq _08061CF4
	ldr r0, _08061CFC @ =0x0203CDE4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	bl MU_StartDeathFade
_08061CF4:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08061CFC: .4byte 0x0203CDE4

	thumb_func_start MapAnimProc_DisplayExpBar
MapAnimProc_DisplayExpBar: @ 0x08061D00
	push {r4, r5, r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	movs r0, #1
	rsbs r0, r0, #0
	str r0, [r7, #8]
	ldr r1, _08061D20 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #1
	beq _08061D38
	cmp r0, #2
	beq _08061D24
	b _08061D54
	.align 2, 0
_08061D20: .4byte 0x0203CDE4
_08061D24:
	ldr r0, _08061D50 @ =0x0203CDE4
	ldr r1, [r0, #0x18]
	adds r0, r1, #0
	adds r1, #0x6a
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq _08061D38
	movs r0, #1
	str r0, [r7, #8]
_08061D38:
	ldr r0, _08061D50 @ =0x0203CDE4
	ldr r1, [r0, #4]
	adds r0, r1, #0
	adds r1, #0x6a
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq _08061D4C
	movs r0, #0
	str r0, [r7, #8]
_08061D4C:
	b _08061D54
	.align 2, 0
_08061D50: .4byte 0x0203CDE4
_08061D54:
	ldr r0, [r7, #8]
	cmp r0, #0
	blt _08061E04
	ldr r1, _08061E0C @ =0x08664F90
	adds r0, r1, #0
	ldr r1, [r7]
	bl SpawnProcLocking
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, _08061E10 @ =0x0203CDE4
	ldr r2, [r7, #8]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, #4
	adds r2, r1, r2
	ldr r3, [r2]
	adds r1, r3, #0
	adds r2, r3, #0
	adds r2, #0x6d
	movs r3, #0
	ldrsb r3, [r2, r3]
	adds r1, r3, #0
	adds r2, r0, #0
	adds r0, #0x64
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7, #4]
	ldr r1, _08061E10 @ =0x0203CDE4
	ldr r2, [r7, #8]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, #4
	adds r2, r1, r2
	ldr r3, [r2]
	adds r1, r3, #0
	adds r2, r3, #0
	adds r2, #0x6d
	movs r3, #0
	ldrsb r3, [r2, r3]
	adds r1, r3, #0
	ldr r2, _08061E10 @ =0x0203CDE4
	ldr r3, [r7, #8]
	adds r5, r3, #0
	lsls r4, r5, #2
	adds r4, r4, r3
	lsls r3, r4, #2
	adds r2, #4
	adds r3, r2, r3
	ldr r4, [r3]
	adds r2, r4, #0
	adds r3, r4, #0
	adds r3, #0x6a
	movs r4, #0
	ldrsb r4, [r3, r4]
	adds r2, r4, #0
	adds r1, r1, r2
	adds r2, r0, #0
	adds r0, #0x66
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7, #4]
	ldr r2, [r7, #8]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x68
	ldrh r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strh r2, [r1]
_08061E04:
	add sp, #0xc
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08061E0C: .4byte 0x08664F90
_08061E10: .4byte 0x0203CDE4

	thumb_func_start sub_8061E14
sub_8061E14: @ 0x08061E14
	push {r4, r7, lr}
	sub sp, #0x18
	mov r7, sp
	str r0, [r7]
	ldr r0, _08061E78 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08061E78 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08061E78 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08061E78 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _08061E7C @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x62
	ldrb r0, [r1]
	cmp r0, #2
	bgt _08061E82
	cmp r0, #1
	blt _08061E82
	b _08061E80
	.align 2, 0
_08061E78: .4byte gDispIo
_08061E7C: .4byte 0x0203CDE4
_08061E80:
	b _08061FC6
_08061E82:
	b _08061E84
_08061E84:
	ldr r0, _08061EA0 @ =0x0203CDE4
	ldr r1, [r0, #4]
	adds r0, r1, #0
	adds r1, #0x4a
	ldrh r2, [r1]
	adds r0, r2, #0
	bl sub_805F7B4
	lsls r1, r0, #0x18
	lsrs r0, r1, #0x18
	cmp r0, #0
	bne _08061EA4
	b _08061FC6
	.align 2, 0
_08061EA0: .4byte 0x0203CDE4
_08061EA4:
	ldr r1, _08061ED4 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #1
	bne _08061EE6
	ldr r0, _08061ED4 @ =0x0203CDE4
	ldr r1, [r0]
	movs r2, #0xf
	ldrsb r2, [r1, r2]
	lsls r0, r2, #4
	ldr r1, _08061ED8 @ =gBmSt
	movs r3, #0xe
	ldrsh r2, [r1, r3]
	subs r0, r0, r2
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	cmp r0, #0x6f
	ble _08061EDC
	ldr r0, [r7, #4]
	adds r1, r0, #0
	subs r1, #0x28
	str r1, [r7, #4]
	b _08061EE4
	.align 2, 0
_08061ED4: .4byte 0x0203CDE4
_08061ED8: .4byte gBmSt
_08061EDC:
	ldr r0, [r7, #4]
	adds r1, r0, #0
	adds r1, #0x18
	str r1, [r7, #4]
_08061EE4:
	b _08061FB2
_08061EE6:
	movs r0, #0
	str r0, [r7, #0x10]
_08061EEA:
	ldr r1, _08061EFC @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	ldr r1, [r7, #0x10]
	cmp r1, r0
	blt _08061F00
	b _08061F3C
	.align 2, 0
_08061EFC: .4byte 0x0203CDE4
_08061F00:
	ldr r0, [r7, #0x10]
	adds r1, r0, #0
	lsls r0, r1, #2
	adds r1, r7, #0
	adds r1, #8
	adds r0, r1, r0
	ldr r1, _08061F34 @ =0x0203CDE4
	ldr r2, [r7, #0x10]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r3, #0xf
	ldrsb r3, [r2, r3]
	lsls r1, r3, #4
	ldr r2, _08061F38 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	subs r1, r1, r3
	str r1, [r0]
	ldr r0, [r7, #0x10]
	adds r1, r0, #1
	str r1, [r7, #0x10]
	b _08061EEA
	.align 2, 0
_08061F34: .4byte 0x0203CDE4
_08061F38: .4byte gBmSt
_08061F3C:
	ldr r0, [r7, #8]
	ldr r1, [r7, #0xc]
	subs r0, r0, r1
	cmp r0, #0
	blt _08061F52
	ldr r0, [r7, #8]
	ldr r1, [r7, #0xc]
	subs r0, r0, r1
	cmp r0, #0x4f
	bgt _08061F5E
	b _08061F64
_08061F52:
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #8]
	subs r0, r0, r1
	cmp r0, #0x4f
	bgt _08061F5E
	b _08061F64
_08061F5E:
	movs r0, #0x40
	str r0, [r7, #4]
	b _08061FB2
_08061F64:
	movs r0, #0
	ldr r1, [r7, #8]
	ldr r2, [r7, #0xc]
	cmp r1, r2
	bgt _08061F70
	movs r0, #1
_08061F70:
	str r0, [r7, #0x14]
	ldr r0, [r7, #0x14]
	adds r1, r0, #0
	lsls r0, r1, #2
	adds r1, r7, #0
	adds r1, #8
	adds r0, r1, r0
	ldr r1, [r0]
	cmp r1, #0x6f
	ble _08061F9E
	movs r0, #1
	ldr r1, [r7, #0x14]
	subs r0, r0, r1
	adds r1, r0, #0
	lsls r0, r1, #2
	adds r1, r7, #0
	adds r1, #8
	adds r0, r1, r0
	ldr r1, [r0]
	adds r0, r1, #0
	subs r0, #0x28
	str r0, [r7, #4]
	b _08061FB2
_08061F9E:
	ldr r0, [r7, #0x14]
	adds r1, r0, #0
	lsls r0, r1, #2
	adds r1, r7, #0
	adds r1, #8
	adds r0, r1, r0
	ldr r1, [r0]
	adds r0, r1, #0
	adds r0, #0x18
	str r0, [r7, #4]
_08061FB2:
	ldr r1, [r7, #4]
	adds r0, r1, #0
	cmp r0, #0
	bge _08061FBC
	adds r0, #7
_08061FBC:
	asrs r1, r0, #3
	movs r0, #0xf
	ldr r2, [r7]
	bl MA_StartBattleInfoBox
_08061FC6:
	add sp, #0x18
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8061FD0
sub_8061FD0: @ 0x08061FD0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _08061FE8 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #2
	beq _08061FEC
	b _08062008
	.align 2, 0
_08061FE8: .4byte 0x0203CDE4
_08061FEC:
	ldr r0, _08062004 @ =0x0203CDE4
	ldr r1, [r0]
	ldr r2, [r1]
	ldrb r0, [r2, #4]
	ldr r1, _08062004 @ =0x0203CDE4
	ldr r2, [r1, #0x14]
	ldr r1, [r2]
	ldrb r2, [r1, #4]
	adds r1, r2, #0
	bl sub_806B754
	b _0806200A
	.align 2, 0
_08062004: .4byte 0x0203CDE4
_08062008:
	b _0806200A
_0806200A:
	bl DisableEventSkip
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8062018
sub_8062018: @ 0x08062018
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _0806204C @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r1, r2, #0
	adds r1, #0x4a
	ldrh r2, [r1]
	adds r0, r2, #0
	bl GetItemIid
	cmp r0, #0x53
	beq _08062050
	cmp r0, #0x54
	beq _08062090
	b _080620D0
	.align 2, 0
_0806204C: .4byte 0x0203CDE4
_08062050:
	ldr r0, _08062088 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r1, #8
	bl sub_80617E0
	ldr r0, _08062088 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r0, [r1]
	ldr r2, _0806208C @ =0x082AA968
	movs r1, #0x3a
	bl sub_8061748
	b _080620D0
	.align 2, 0
_08062088: .4byte 0x0203CDE4
_0806208C: .4byte 0x082AA968
_08062090:
	ldr r0, _080620C8 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r1, #8
	bl sub_80617E0
	ldr r0, _080620C8 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r0, [r1]
	ldr r2, _080620CC @ =0x082AA988
	movs r1, #0x3b
	bl sub_8061748
	b _080620D0
	.align 2, 0
_080620C8: .4byte 0x0203CDE4
_080620CC: .4byte 0x082AA988
_080620D0:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80620D8
sub_80620D8: @ 0x080620D8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _080620F4 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #1
	beq _080620FE
	cmp r0, #2
	beq _080620F8
	b _08062104
	.align 2, 0
_080620F4: .4byte 0x0203CDE4
_080620F8:
	movs r0, #1
	bl sub_8062018
_080620FE:
	movs r0, #0
	bl sub_8062018
_08062104:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_806210C
sub_806210C: @ 0x0806210C
	push {r7, lr}
	mov r7, sp
	ldr r0, _08062128 @ =gPlaySt
	ldrb r1, [r0, #0x1d]
	lsls r2, r1, #0x1e
	lsrs r0, r2, #0x1f
	cmp r0, #0
	bne _08062122
	movs r0, #0xa0
	bl m4aSongNumStart
_08062122:
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08062128: .4byte gPlaySt

	thumb_func_start MA_InitActor
MA_InitActor: @ 0x0806212C
	push {r4, r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, [r7, #4]
	cmp r0, #0
	bne _08062140
	b _080621E0
_08062140:
	ldr r0, _080621E8 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r7, #8]
	str r1, [r0]
	ldr r0, _080621E8 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r0, [r7, #4]
	str r0, [r1]
	ldr r1, [r7, #8]
	adds r0, r1, #0
	bl MU_Start
	ldr r1, _080621E8 @ =0x0203CDE4
	ldr r2, [r7]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, #8
	adds r2, r1, r2
	str r0, [r2]
	ldr r0, _080621E8 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	ldr r0, [r2, #0x30]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r0, _080621E8 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	ldr r0, [r2, #0x30]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	ldr r1, [r7, #4]
	adds r0, r1, #0
	adds r1, #0x53
	ldrb r0, [r1]
	cmp r0, #0x1b
	bne _080621E0
	ldr r0, _080621E8 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	bl MU_Hide
_080621E0:
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080621E8: .4byte 0x0203CDE4

	thumb_func_start MA_SetActorFacing
MA_SetActorFacing: @ 0x080621EC
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, [r7, #8]
	cmp r0, #1
	beq _08062284
	cmp r0, #1
	bgt _08062208
	cmp r0, #0
	beq _0806220E
	b _080622EE
_08062208:
	cmp r0, #2
	beq _080622A4
	b _080622EE
_0806220E:
	ldr r0, _08062280 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	ldr r1, _08062280 @ =0x0203CDE4
	ldr r2, [r7]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r2, _08062280 @ =0x0203CDE4
	ldr r3, [r7, #4]
	adds r5, r3, #0
	lsls r4, r5, #2
	adds r4, r4, r3
	lsls r3, r4, #2
	adds r2, r2, r3
	ldr r3, [r2]
	movs r2, #0xe
	ldrsb r2, [r3, r2]
	ldr r3, _08062280 @ =0x0203CDE4
	ldr r4, [r7, #4]
	adds r6, r4, #0
	lsls r5, r6, #2
	adds r5, r5, r4
	lsls r4, r5, #2
	adds r3, r3, r4
	ldr r4, [r3]
	movs r3, #0xf
	ldrsb r3, [r4, r3]
	bl sub_80629FC
	str r0, [r7, #0xc]
	ldr r0, _08062280 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r0, [r1]
	ldr r1, [r7, #0xc]
	bl sub_805FBDC
	b _080622EE
	.align 2, 0
_08062280: .4byte 0x0203CDE4
_08062284:
	ldr r0, _080622A0 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	bl MU_SetDefaultFacing
	b _080622EE
	.align 2, 0
_080622A0: .4byte 0x0203CDE4
_080622A4:
	ldr r0, _080622F8 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	ldr r1, _080622F8 @ =0x0203CDE4
	ldr r2, [r7]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	movs r2, #0
	movs r3, #0
	bl sub_80629FC
	str r0, [r7, #0xc]
	ldr r0, _080622F8 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r0, [r1]
	ldr r1, [r7, #0xc]
	bl sub_805FBDC
_080622EE:
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080622F8: .4byte 0x0203CDE4

	thumb_func_start sub_80622FC
sub_80622FC: @ 0x080622FC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	ldr r0, _08062330 @ =0x0203CDE4
	ldr r1, [r0, #4]
	adds r0, r1, #0
	adds r1, #0x4a
	ldrh r2, [r1]
	adds r0, r2, #0
	bl GetItemMaFacing
	lsls r1, r0, #0x18
	lsrs r0, r1, #0x18
	str r0, [r7]
	bl MA_SortMuLayers
	ldr r1, _08062330 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #1
	beq _08062368
	cmp r0, #2
	beq _08062334
	b _08062378
	.align 2, 0
_08062330: .4byte 0x0203CDE4
_08062334:
	ldr r0, _08062374 @ =gBattleHits
	ldrh r1, [r0]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _0806235E
	movs r0, #2
	movs r1, #1
	ldr r2, [r7]
	bl MA_SetActorFacing
	movs r0, #3
	movs r1, #1
	ldr r2, [r7]
	bl MA_SetActorFacing
_0806235E:
	movs r0, #1
	movs r1, #0
	ldr r2, [r7]
	bl MA_SetActorFacing
_08062368:
	movs r0, #0
	movs r1, #1
	ldr r2, [r7]
	bl MA_SetActorFacing
	b _08062378
	.align 2, 0
_08062374: .4byte gBattleHits
_08062378:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start MA_SortMuLayers
MA_SortMuLayers: @ 0x08062380
	push {r4, r7, lr}
	sub sp, #0x18
	mov r7, sp
	ldr r1, _080623A4 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	str r0, [r7, #0x14]
	ldr r1, _080623A4 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #1
	beq _080623CC
	cmp r0, #2
	beq _080623A8
	b _080623CE
	.align 2, 0
_080623A4: .4byte 0x0203CDE4
_080623A8:
	ldr r0, _080623C8 @ =gBattleHits
	ldrh r1, [r0]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080623C4
	ldr r0, [r7, #0x14]
	adds r1, r0, #2
	str r1, [r7, #0x14]
_080623C4:
	b _080623CE
	.align 2, 0
_080623C8: .4byte gBattleHits
_080623CC:
	b _080623CE
_080623CE:
	movs r0, #0
	str r0, [r7, #8]
_080623D2:
	ldr r0, [r7, #8]
	ldr r1, [r7, #0x14]
	cmp r0, r1
	blt _080623DC
	b _080623FC
_080623DC:
	adds r0, r7, #0
	ldr r1, [r7, #8]
	adds r0, r0, r1
	ldr r2, [r7, #8]
	adds r1, r2, #0
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7, #8]
	adds r1, r0, #1
	str r1, [r7, #8]
	b _080623D2
_080623FC:
	movs r0, #0
	str r0, [r7, #8]
_08062400:
	ldr r1, [r7, #0x14]
	subs r0, r1, #1
	ldr r1, [r7, #8]
	cmp r1, r0
	blt _0806240C
	b _08062540
_0806240C:
	ldr r0, [r7, #8]
	adds r1, r0, #1
	str r1, [r7, #0xc]
_08062412:
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0x14]
	cmp r0, r1
	blt _0806241C
	b _08062538
_0806241C:
	movs r0, #0
	str r0, [r7, #0x10]
	ldr r0, _0806249C @ =0x0203CDE4
	adds r1, r7, #0
	ldr r2, [r7, #8]
	adds r3, r1, r2
	ldrb r1, [r3]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r1, _0806249C @ =0x0203CDE4
	adds r2, r7, #0
	ldr r3, [r7, #0xc]
	adds r4, r2, r3
	ldrb r2, [r4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	ldrb r0, [r0, #0xf]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	cmp r0, r1
	bne _080624A0
	ldr r0, _0806249C @ =0x0203CDE4
	adds r1, r7, #0
	ldr r2, [r7, #8]
	adds r3, r1, r2
	ldrb r1, [r3]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r1, _0806249C @ =0x0203CDE4
	adds r2, r7, #0
	ldr r3, [r7, #0xc]
	adds r4, r2, r3
	ldrb r2, [r4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	cmp r0, r1
	blt _0806249A
	ldr r0, [r7, #0x10]
	adds r1, r0, #1
	str r1, [r7, #0x10]
_0806249A:
	b _080624E0
	.align 2, 0
_0806249C: .4byte 0x0203CDE4
_080624A0:
	ldr r0, _08062534 @ =0x0203CDE4
	adds r1, r7, #0
	ldr r2, [r7, #8]
	adds r3, r1, r2
	ldrb r1, [r3]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r1, _08062534 @ =0x0203CDE4
	adds r2, r7, #0
	ldr r3, [r7, #0xc]
	adds r4, r2, r3
	ldrb r2, [r4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	ldrb r0, [r0, #0xf]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	cmp r0, r1
	blt _080624E0
	ldr r0, [r7, #0x10]
	adds r1, r0, #1
	str r1, [r7, #0x10]
_080624E0:
	ldr r0, [r7, #0x10]
	cmp r0, #0
	beq _0806252A
	adds r0, r7, #4
	adds r1, r7, #0
	ldr r2, [r7, #8]
	adds r1, r1, r2
	ldrb r2, [r1]
	strb r2, [r0]
	adds r0, r7, #0
	ldr r1, [r7, #8]
	adds r0, r0, r1
	adds r1, r7, #0
	ldr r2, [r7, #0xc]
	adds r1, r1, r2
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	adds r0, r7, #0
	ldr r1, [r7, #0xc]
	adds r0, r0, r1
	adds r1, r7, #4
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
_0806252A:
	ldr r0, [r7, #0xc]
	adds r1, r0, #1
	str r1, [r7, #0xc]
	b _08062412
	.align 2, 0
_08062534: .4byte 0x0203CDE4
_08062538:
	ldr r0, [r7, #8]
	adds r1, r0, #1
	str r1, [r7, #8]
	b _08062400
_08062540:
	movs r0, #0
	str r0, [r7, #8]
_08062544:
	ldr r0, [r7, #8]
	ldr r1, [r7, #0x14]
	cmp r0, r1
	blt _0806254E
	b _08062590
_0806254E:
	ldr r0, _08062588 @ =0x0203CDE4
	adds r1, r7, #0
	ldr r2, [r7, #8]
	adds r3, r1, r2
	ldrb r1, [r3]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	ldr r0, [r2, #0x30]
	ldr r1, _0806258C @ =0x083075B4
	ldr r2, [r7, #8]
	adds r1, r1, r2
	ldrb r2, [r1]
	adds r1, r2, #0
	ldrh r2, [r0, #0x1e]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x1e]
	ldr r0, [r7, #8]
	adds r1, r0, #1
	str r1, [r7, #8]
	b _08062544
	.align 2, 0
_08062588: .4byte 0x0203CDE4
_0806258C: .4byte 0x083075B4
_08062590:
	add sp, #0x18
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8062598
sub_8062598: @ 0x08062598
	push {r7, lr}
	mov r7, sp
	ldr r0, _08062600 @ =gBattleUnitA
	adds r1, r0, #0
	adds r0, #0x4a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x68
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08062604 @ =0x0203CDE4
	adds r1, r0, #0
	adds r0, #0x62
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08062604 @ =0x0203CDE4
	adds r1, r0, #0
	adds r0, #0x5e
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08062604 @ =0x0203CDE4
	ldr r1, _08062608 @ =gBattleHits
	str r1, [r0, #0x50]
	bl sub_80619E8
	ldr r0, _08062600 @ =gBattleUnitA
	ldr r1, _0806260C @ =gBattleUnitB
	ldr r2, _08062608 @ =gBattleHits
	bl sub_8062890
	ldr r1, _08062610 @ =0x08664C0C
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08062600: .4byte gBattleUnitA
_08062604: .4byte 0x0203CDE4
_08062608: .4byte gBattleHits
_0806260C: .4byte gBattleUnitB
_08062610: .4byte 0x08664C0C

	thumb_func_start sub_8062614
sub_8062614: @ 0x08062614
	push {r7, lr}
	mov r7, sp
	ldr r0, _0806267C @ =gBattleUnitA
	adds r1, r0, #0
	adds r0, #0x4a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x68
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08062680 @ =0x0203CDE4
	adds r1, r0, #0
	adds r0, #0x62
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08062680 @ =0x0203CDE4
	adds r1, r0, #0
	adds r0, #0x5e
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08062680 @ =0x0203CDE4
	ldr r1, _08062684 @ =gBattleHits
	str r1, [r0, #0x50]
	bl sub_80619E8
	ldr r0, _0806267C @ =gBattleUnitA
	ldr r1, _08062688 @ =gBattleUnitB
	ldr r2, _08062684 @ =gBattleHits
	bl sub_8062890
	ldr r1, _0806268C @ =0x08664C4C
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806267C: .4byte gBattleUnitA
_08062680: .4byte 0x0203CDE4
_08062684: .4byte gBattleHits
_08062688: .4byte gBattleUnitB
_0806268C: .4byte 0x08664C4C

	thumb_func_start sub_8062690
sub_8062690: @ 0x08062690
	push {r7, lr}
	mov r7, sp
	ldr r0, _08062720 @ =gBattleUnitA
	adds r1, r0, #0
	adds r0, #0x4a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08062724 @ =0x0203CDE4
	adds r1, r0, #0
	adds r0, #0x62
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08062724 @ =0x0203CDE4
	adds r1, r0, #0
	adds r0, #0x5e
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08062724 @ =0x0203CDE4
	adds r1, r0, #0
	adds r0, #0x58
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08062724 @ =0x0203CDE4
	adds r1, r0, #0
	adds r0, #0x59
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08062720 @ =gBattleUnitA
	ldr r1, _08062728 @ =gBattleUnitB
	ldr r2, _0806272C @ =gBattleHits
	bl sub_8062890
	ldr r1, _08062730 @ =0x08664C8C
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08062720: .4byte gBattleUnitA
_08062724: .4byte 0x0203CDE4
_08062728: .4byte gBattleUnitB
_0806272C: .4byte gBattleHits
_08062730: .4byte 0x08664C8C

	thumb_func_start sub_8062734
sub_8062734: @ 0x08062734
	push {r7, lr}
	mov r7, sp
	ldr r0, _080627BC @ =gBattleUnitA
	adds r1, r0, #0
	adds r0, #0x4a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x47
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _080627C0 @ =0x0203CDE4
	adds r1, r0, #0
	adds r0, #0x62
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080627C0 @ =0x0203CDE4
	adds r1, r0, #0
	adds r0, #0x5e
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080627C0 @ =0x0203CDE4
	adds r1, r0, #0
	adds r0, #0x58
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080627C0 @ =0x0203CDE4
	adds r1, r0, #0
	adds r0, #0x59
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080627BC @ =gBattleUnitA
	ldr r1, _080627C4 @ =gBattleUnitB
	ldr r2, _080627C8 @ =gBattleHits
	bl sub_8062890
	ldr r1, _080627CC @ =0x08664D5C
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080627BC: .4byte gBattleUnitA
_080627C0: .4byte 0x0203CDE4
_080627C4: .4byte gBattleUnitB
_080627C8: .4byte gBattleHits
_080627CC: .4byte 0x08664D5C

	thumb_func_start sub_80627D0
sub_80627D0: @ 0x080627D0
	push {r7, lr}
	mov r7, sp
	ldr r0, _080627F0 @ =gBattleSt
	ldrb r1, [r0, #1]
	movs r2, #0x40
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x18
	lsrs r0, r1, #0x18
	cmp r0, #0
	beq _080627F4
	bl sub_8062734
	b _08062822
	.align 2, 0
_080627F0: .4byte gBattleSt
_080627F4:
	ldr r0, _08062828 @ =0x0203CDE4
	adds r1, r0, #0
	adds r0, #0x62
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806282C @ =gBattleUnitA
	ldr r1, _08062830 @ =gBattleUnitB
	ldr r2, _08062834 @ =gBattleHits
	bl sub_806283C
	ldr r0, _0806282C @ =gBattleUnitA
	ldr r1, _08062830 @ =gBattleUnitB
	ldr r2, _08062834 @ =gBattleHits
	bl sub_8062890
	ldr r1, _08062838 @ =0x08664DA4
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
_08062822:
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08062828: .4byte 0x0203CDE4
_0806282C: .4byte gBattleUnitA
_08062830: .4byte gBattleUnitB
_08062834: .4byte gBattleHits
_08062838: .4byte 0x08664DA4

	thumb_func_start sub_806283C
sub_806283C: @ 0x0806283C
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x4a
	ldrh r2, [r1]
	adds r0, r2, #0
	bl sub_805F784
	ldr r1, _0806288C @ =0x0203CDE4
	adds r2, r1, #0
	adds r1, #0x5e
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, _0806288C @ =0x0203CDE4
	ldr r1, [r7, #8]
	str r1, [r0, #0x50]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x4a
	ldrh r2, [r1]
	adds r0, r2, #0
	bl sub_805F7A4
	ldr r1, _0806288C @ =0x0203CDE4
	str r0, [r1, #0x54]
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806288C: .4byte 0x0203CDE4

	thumb_func_start sub_8062890
sub_8062890: @ 0x08062890
	push {r4, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	movs r0, #0
	ldr r1, [r7]
	ldr r2, [r7]
	bl MA_InitActor
	ldr r1, _08062920 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #1
	bls _080628C4
	ldr r1, _08062924 @ =gBattleUnitB
	adds r0, r1, #0
	bl HideUnitSprite
	ldr r1, [r7, #4]
	ldr r2, [r7, #4]
	movs r0, #1
	bl MA_InitActor
_080628C4:
	ldr r0, _08062928 @ =gBattleHits
	ldrh r1, [r0]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _08062906
	ldr r0, _0806292C @ =gBattleSt
	ldr r2, [r0, #0xc]
	movs r0, #2
	ldr r1, [r7]
	bl MA_InitActor
	ldr r0, _0806292C @ =gBattleSt
	ldr r2, [r0, #0x10]
	movs r0, #3
	ldr r1, [r7]
	bl MA_InitActor
	ldr r0, _0806292C @ =gBattleSt
	ldr r1, [r0, #0xc]
	adds r0, r1, #0
	bl HideUnitSprite
	ldr r0, _0806292C @ =gBattleSt
	ldr r1, [r0, #0x10]
	adds r0, r1, #0
	bl HideUnitSprite
_08062906:
	bl sub_80622FC
	movs r0, #0
	str r0, [r7, #0xc]
_0806290E:
	ldr r1, _08062920 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	ldr r1, [r7, #0xc]
	cmp r1, r0
	blt _08062930
	b _080629A8
	.align 2, 0
_08062920: .4byte 0x0203CDE4
_08062924: .4byte gBattleUnitB
_08062928: .4byte gBattleHits
_0806292C: .4byte gBattleSt
_08062930:
	ldr r0, _080629A4 @ =0x0203CDE4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, _080629A4 @ =0x0203CDE4
	ldr r2, [r7, #0xc]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, #4
	adds r2, r1, r2
	ldr r1, [r2]
	adds r2, r1, #0
	adds r1, #0x6e
	ldrb r2, [r0, #0xd]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0, #0xd]
	ldr r0, _080629A4 @ =0x0203CDE4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl GetUnitMaxHp
	ldr r1, _080629A4 @ =0x0203CDE4
	ldr r2, [r7, #0xc]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r2, [r1, #0xc]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r0
	adds r0, r2, #0
	strb r0, [r1, #0xc]
	ldr r0, [r7, #0xc]
	adds r1, r0, #1
	str r1, [r7, #0xc]
	b _0806290E
	.align 2, 0
_080629A4: .4byte 0x0203CDE4
_080629A8:
	ldr r0, _080629F8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080629F8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080629F8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080629F8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #0x10
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080629F8: .4byte gDispIo

	thumb_func_start sub_80629FC
sub_80629FC: @ 0x080629FC
	push {r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, [r7, #8]
	ldr r2, [r7]
	subs r0, r0, r2
	cmp r0, #0
	blt _08062A22
	ldr r0, [r7, #8]
	ldr r2, [r7]
	subs r1, r0, r2
	adds r0, r1, #0
	lsls r2, r0, #1
	adds r1, r2, #0
	b _08062A2E
_08062A22:
	ldr r0, [r7]
	ldr r2, [r7, #8]
	subs r1, r0, r2
	adds r0, r1, #0
	lsls r2, r0, #1
	adds r1, r2, #0
_08062A2E:
	ldr r0, [r7, #0xc]
	ldr r2, [r7, #4]
	subs r0, r0, r2
	cmp r0, #0
	blt _08062A44
	ldr r0, [r7, #0xc]
	ldr r2, [r7, #4]
	subs r0, r0, r2
	cmp r1, r0
	blt _08062A50
	b _08062A64
_08062A44:
	ldr r0, [r7, #4]
	ldr r2, [r7, #0xc]
	subs r0, r0, r2
	cmp r1, r0
	blt _08062A50
	b _08062A64
_08062A50:
	ldr r0, [r7, #4]
	ldr r2, [r7, #0xc]
	cmp r0, r2
	bge _08062A5E
	movs r0, #2
	b _08062A76
_08062A5C:
	.byte 0x01, 0xE0
_08062A5E:
	movs r0, #3
	b _08062A76
_08062A62:
	.byte 0x08, 0xE0
_08062A64:
	ldr r0, [r7]
	ldr r2, [r7, #8]
	cmp r0, r2
	bge _08062A72
	movs r0, #1
	b _08062A76
_08062A70:
	.byte 0x01, 0xE0
_08062A72:
	movs r0, #0
	b _08062A76
_08062A76:
	add sp, #0x10
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8062A80
sub_8062A80: @ 0x08062A80
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r4, _08062AB0 @ =0x082DC618
	movs r0, #0
	bl GetBgChrOffset
	ldr r1, [r7]
	lsls r2, r1, #0x16
	lsrs r1, r2, #0x16
	lsls r2, r1, #5
	movs r3, #0xc0
	lsls r3, r3, #0x13
	adds r1, r2, r3
	adds r2, r0, r1
	adds r0, r4, #0
	adds r1, r2, #0
	bl Decompress
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08062AB0: .4byte 0x082DC618

	thumb_func_start sub_8062AB4
sub_8062AB4: @ 0x08062AB4
	push {r4, r7, lr}
	sub sp, #0x24
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, [r7, #0x30]
	adds r1, r7, #0
	adds r1, #0x10
	strh r0, [r1]
	movs r0, #7
	str r0, [r7, #0x1c]
_08062ACE:
	ldr r0, [r7, #0x1c]
	cmp r0, #0
	bge _08062AD6
	b _08062B4A
_08062AD6:
	adds r0, r7, #0
	adds r0, #0x14
	ldr r1, [r7, #0x1c]
	adds r4, r0, r1
	ldr r1, [r7, #4]
	adds r0, r1, #0
	movs r1, #0xa
	bl __modsi3
	adds r1, r0, #0
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r1, [r4]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	adds r1, r2, #0
	orrs r1, r0
	adds r0, r1, #0
	strb r0, [r4]
	ldr r1, [r7, #4]
	adds r0, r1, #0
	movs r1, #0xa
	bl __divsi3
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	cmp r0, #0
	bne _08062B42
	ldr r0, [r7, #0x1c]
	subs r1, r0, #1
	str r1, [r7, #0x20]
_08062B16:
	ldr r0, [r7, #0x20]
	cmp r0, #0
	bge _08062B1E
	b _08062B40
_08062B1E:
	adds r0, r7, #0
	adds r0, #0x14
	ldr r1, [r7, #0x20]
	adds r0, r0, r1
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x20
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7, #0x20]
	subs r1, r0, #1
	str r1, [r7, #0x20]
	b _08062B16
_08062B40:
	b _08062B4A
_08062B42:
	ldr r0, [r7, #0x1c]
	subs r1, r0, #1
	str r1, [r7, #0x1c]
	b _08062ACE
_08062B4A:
	adds r0, r7, #0
	adds r0, #0x14
	adds r1, r0, #7
	ldr r2, [r7, #8]
	ldr r3, [r7, #0xc]
	ldr r0, [r7]
	bl sub_8013E8C
	ldr r0, [r7, #0xc]
	subs r1, r0, #1
	str r1, [r7, #0x1c]
_08062B60:
	ldr r0, [r7, #0x1c]
	cmp r0, #0
	bgt _08062B68
	b _08062B96
_08062B68:
	adds r0, r7, #0
	adds r0, #0x14
	movs r1, #7
	ldr r2, [r7, #0x1c]
	subs r1, r1, r2
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0x20
	beq _08062B7C
	b _08062B96
_08062B7C:
	ldr r0, [r7, #0x1c]
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, [r7]
	subs r0, r1, r0
	adds r1, r7, #0
	adds r1, #0x10
	ldrh r2, [r1]
	strh r2, [r0]
	ldr r0, [r7, #0x1c]
	subs r1, r0, #1
	str r1, [r7, #0x1c]
	b _08062B60
_08062B96:
	add sp, #0x24
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8062BA0
sub_8062BA0: @ 0x08062BA0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0x20
	bl sub_8062A80
	ldr r1, _08062BCC @ =0x06000540
	ldr r0, [r7]
	bl Decompress
	ldr r1, _08062BD0 @ =0x082E278C
	adds r0, r1, #0
	movs r1, #0xa0
	movs r2, #0x20
	bl ApplyPaletteExt
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08062BCC: .4byte 0x06000540
_08062BD0: .4byte 0x082E278C

	thumb_func_start sub_8062BD4
sub_8062BD4: @ 0x08062BD4
	push {r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, [r7, #4]
	ldr r1, [r0]
	ldr r0, [r7, #0xc]
	cmp r1, r0
	ble _08062BF2
	ldr r0, [r7, #0xc]
	str r0, [r7, #0x10]
	b _08062BF8
_08062BF2:
	ldr r0, [r7, #4]
	ldr r1, [r0]
	str r1, [r7, #0x10]
_08062BF8:
	ldr r0, [r7]
	ldr r2, [r7, #0x1c]
	adds r1, r2, #0
	ldr r3, [r7, #0x10]
	adds r2, r3, #0
	adds r1, r1, r2
	ldr r3, [r7, #8]
	adds r2, r3, #0
	lsls r3, r2, #0xc
	adds r2, r3, #0
	adds r1, r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7, #4]
	ldr r1, [r7, #4]
	ldr r2, [r1]
	adds r1, r2, #1
	ldr r2, [r7, #0xc]
	subs r1, r1, r2
	str r1, [r0]
	ldr r0, [r7, #4]
	ldr r1, [r0]
	cmp r1, #0
	bge _08062C2E
	ldr r0, [r7, #4]
	movs r1, #0
	str r1, [r0]
_08062C2E:
	add sp, #0x14
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8062C38
sub_8062C38: @ 0x08062C38
	push {r4, r7, lr}
	sub sp, #0x20
	add r7, sp, #4
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	movs r0, #0
	str r0, [r7, #0x14]
	ldr r0, [r7, #0x28]
	str r0, [r7, #0x18]
_08062C4E:
	ldr r0, [r7, #0x18]
	ldrh r1, [r0]
	cmp r1, #0
	bne _08062C58
	b _08062C6C
_08062C58:
	ldr r1, [r7, #0x14]
	subs r0, r1, #1
	ldr r1, [r7, #0x18]
	ldrh r2, [r1]
	adds r0, r0, r2
	str r0, [r7, #0x14]
	ldr r0, [r7, #0x18]
	adds r1, r0, #4
	str r1, [r7, #0x18]
	b _08062C4E
_08062C6C:
	ldr r0, [r7, #0x14]
	adds r1, r0, #1
	str r1, [r7, #0x14]
	ldr r0, [r7, #4]
	ldr r1, [r7, #8]
	cmp r0, r1
	bne _08062C80
	ldr r0, [r7, #0x14]
	str r0, [r7, #0x10]
	b _08062C94
_08062C80:
	ldr r0, [r7, #0x14]
	lsls r1, r0, #8
	adds r0, r1, #0
	ldr r1, [r7, #4]
	bl __divsi3
	ldr r1, [r7, #8]
	muls r0, r1, r0
	asrs r1, r0, #8
	str r1, [r7, #0x10]
_08062C94:
	ldr r0, [r7, #0x10]
	cmp r0, #0
	bne _08062CA6
	ldr r0, [r7, #8]
	cmp r0, #0
	ble _08062CA6
	ldr r0, [r7, #0x10]
	adds r1, r0, #1
	str r1, [r7, #0x10]
_08062CA6:
	ldr r0, [r7, #0x28]
	str r0, [r7, #0x18]
_08062CAA:
	ldr r0, [r7, #0x18]
	ldrh r1, [r0]
	cmp r1, #0
	bne _08062CB4
	b _08062CE8
_08062CB4:
	adds r1, r7, #0
	adds r1, #0x10
	ldr r0, _08062CE4 @ =0x08664F00
	ldr r2, [r7, #0xc]
	adds r3, r2, #0
	lsls r2, r3, #2
	adds r0, r0, r2
	ldr r2, [r0]
	ldr r0, [r7, #0x18]
	ldrh r3, [r0]
	ldr r4, [r7, #0x18]
	adds r0, r4, #2
	ldrh r4, [r0]
	str r4, [sp]
	ldr r0, [r7]
	bl sub_8062BD4
	ldr r0, [r7]
	adds r1, r0, #2
	str r1, [r7]
	ldr r0, [r7, #0x18]
	adds r1, r0, #4
	str r1, [r7, #0x18]
	b _08062CAA
	.align 2, 0
_08062CE4: .4byte 0x08664F00
_08062CE8:
	add sp, #0x20
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8062CF0
sub_8062CF0: @ 0x08062CF0
	push {r7, lr}
	mov r7, sp
	ldr r1, _08062D04 @ =0x08664F20
	adds r0, r1, #0
	bl Proc_EndEach
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08062D04: .4byte 0x08664F20

	thumb_func_start MA_StartBattleInfoBox
MA_StartBattleInfoBox: @ 0x08062D08
	push {r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r1, _08062D60 @ =0x08664F20
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #0xc]
	ldr r1, [r7, #0xc]
	ldr r2, [r7]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x2e
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r1, [r7, #0xc]
	ldr r2, [r7, #4]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x2f
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #8]
	str r1, [r0, #0x30]
	add sp, #0x10
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08062D60: .4byte 0x08664F20

	thumb_func_start sub_8062D64
sub_8062D64: @ 0x08062D64
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	bl SetOnHBlankA
	bl ClearBg0Bg1
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8062D80
sub_8062D80: @ 0x08062D80
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r4, _08062DC8 @ =0x082DC6DC
	movs r0, #1
	bl GetBgChrOffset
	ldr r2, _08062DCC @ =0x06000020
	adds r1, r0, r2
	adds r0, r4, #0
	bl Decompress
	ldr r1, _08062DD0 @ =0x082E25D4
	adds r0, r1, #0
	bl sub_8062BA0
	ldr r1, _08062DD4 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	cmp r0, #1
	beq _08062DD8
	cmp r0, #2
	beq _08062DE6
	b _08062E4C
	.align 2, 0
_08062DC8: .4byte 0x082DC6DC
_08062DCC: .4byte 0x06000020
_08062DD0: .4byte 0x082E25D4
_08062DD4: .4byte 0x0203CDE4
_08062DD8:
	movs r2, #5
	rsbs r2, r2, #0
	ldr r0, [r7]
	movs r1, #0
	bl sub_8063120
	b _08062E4C
_08062DE6:
	movs r0, #0
	str r0, [r7, #4]
	ldr r1, _08062E08 @ =0x0203CDE4
	ldr r0, [r1]
	ldr r1, _08062E08 @ =0x0203CDE4
	ldr r2, [r1, #0x14]
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	cmp r0, r1
	ble _08062E0C
	movs r0, #1
	str r0, [r7, #4]
	b _08062E2C
	.align 2, 0
_08062E08: .4byte 0x0203CDE4
_08062E0C:
	ldr r0, _08062E48 @ =0x0203CDE4
	ldr r1, [r0]
	movs r0, #0xb
	ldrsb r0, [r1, r0]
	movs r1, #0xc0
	ands r0, r1
	ldr r1, _08062E48 @ =0x0203CDE4
	ldr r2, [r1, #0x14]
	movs r1, #0xb
	ldrsb r1, [r2, r1]
	movs r2, #0xc0
	ands r1, r2
	cmp r0, r1
	ble _08062E2C
	movs r0, #1
	str r0, [r7, #4]
_08062E2C:
	ldr r1, [r7, #4]
	movs r2, #0xa
	rsbs r2, r2, #0
	ldr r0, [r7]
	bl sub_8063120
	movs r0, #1
	ldr r2, [r7, #4]
	subs r1, r0, r2
	ldr r0, [r7]
	movs r2, #0
	bl sub_8063120
	b _08062E4C
	.align 2, 0
_08062E48: .4byte 0x0203CDE4
_08062E4C:
	bl sub_8069C34
	ldr r0, _08062E8C @ =0x0203CDE4
	ldrb r1, [r0, #0x11]
	adds r0, r1, #0
	lsls r1, r0, #3
	adds r0, r1, #0
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	ldr r1, _08062E8C @ =0x0203CDE4
	ldrb r2, [r1, #0x11]
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	adds r2, r1, #0
	adds r2, #0x20
	adds r1, r2, #0
	lsls r2, r1, #0x10
	lsrs r1, r2, #0x10
	ldr r3, _08062E90 @ =gPal
	ldrh r2, [r3, #0x22]
	ldr r4, _08062E90 @ =gPal
	adds r3, r4, #0
	adds r4, #0x42
	ldrh r3, [r4]
	bl sub_806A0DC
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08062E8C: .4byte 0x0203CDE4
_08062E90: .4byte gPal

	thumb_func_start sub_8062E94
sub_8062E94: @ 0x08062E94
	push {r4, r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	adds r0, r7, #0
	adds r0, #0xa
	movs r1, #0
	strb r1, [r0]
	movs r0, #0
	str r0, [r7, #4]
_08062EA8:
	ldr r1, _08062EB8 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	ldr r1, [r7, #4]
	cmp r1, r0
	blt _08062EBC
	b _08062FB4
	.align 2, 0
_08062EB8: .4byte 0x0203CDE4
_08062EBC:
	adds r0, r7, #0
	adds r0, #8
	ldr r1, _08062FAC @ =0x0203CDE4
	ldr r2, [r7, #4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrh r2, [r1, #0xe]
	strh r2, [r0]
	adds r1, r7, #0
	adds r1, #8
	ldrh r0, [r1]
	ldr r1, _08062FAC @ =0x0203CDE4
	ldr r2, [r7, #4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r2, [r1, #0xd]
	lsls r1, r2, #4
	cmp r0, r1
	ble _08062F00
	adds r0, r7, #0
	adds r0, #8
	adds r1, r7, #0
	adds r1, #8
	ldrh r2, [r1]
	adds r1, r2, #0
	subs r1, #0x10
	adds r2, r1, #0
	strh r2, [r0]
_08062F00:
	adds r1, r7, #0
	adds r1, #8
	ldrh r0, [r1]
	ldr r1, _08062FAC @ =0x0203CDE4
	ldr r2, [r7, #4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r2, [r1, #0xd]
	lsls r1, r2, #4
	cmp r0, r1
	bge _08062F54
	adds r0, r7, #0
	adds r0, #8
	adds r1, r7, #0
	adds r1, #8
	ldrh r2, [r1]
	adds r1, r2, #4
	adds r2, r1, #0
	strh r2, [r0]
	adds r0, r7, #0
	adds r0, #8
	ldrh r1, [r0]
	movs r2, #0xf
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	bne _08062F54
	ldr r0, _08062FB0 @ =gPlaySt
	ldrb r1, [r0, #0x1d]
	lsls r2, r1, #0x1e
	lsrs r0, r2, #0x1f
	cmp r0, #0
	bne _08062F54
	movs r0, #0x75
	bl m4aSongNumStart
_08062F54:
	adds r0, r7, #0
	adds r0, #8
	ldr r1, _08062FAC @ =0x0203CDE4
	ldr r2, [r7, #4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrh r0, [r0]
	ldrh r1, [r1, #0xe]
	cmp r0, r1
	beq _08062FA2
	ldr r0, _08062FAC @ =0x0203CDE4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	adds r1, r7, #0
	adds r1, #8
	ldrh r2, [r0, #0xe]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrh r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0xe]
	ldr r1, [r7, #4]
	ldr r0, [r7]
	bl sub_8062FE8
	adds r0, r7, #0
	adds r0, #0xa
	movs r1, #1
	strb r1, [r0]
_08062FA2:
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _08062EA8
	.align 2, 0
_08062FAC: .4byte 0x0203CDE4
_08062FB0: .4byte gPlaySt
_08062FB4:
	adds r0, r7, #0
	adds r0, #0xa
	movs r1, #0
	ldrsb r1, [r0, r1]
	cmp r1, #0
	bne _08062FDC
	ldr r1, _08062FE4 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	cmp r0, #0
	beq _08062FDC
	ldr r0, _08062FE4 @ =0x0203CDE4
	adds r1, r0, #0
	adds r0, #0x5f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
_08062FDC:
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08062FE4: .4byte 0x0203CDE4

	thumb_func_start sub_8062FE8
sub_8062FE8: @ 0x08062FE8
	push {r4, r5, r7, lr}
	sub sp, #0xc
	add r7, sp, #4
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, _080630B8 @ =0x0203CDE4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0, #0x11]
	adds r0, r1, #2
	lsls r1, r0, #5
	adds r0, r1, #2
	ldr r1, _080630B8 @ =0x0203CDE4
	ldr r2, [r7, #4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r2, [r1, #0x10]
	adds r0, r0, r2
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, _080630BC @ =gBg0Tm
	adds r0, r0, r1
	ldr r1, _080630B8 @ =0x0203CDE4
	ldr r2, [r7, #4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrh r2, [r1, #0xe]
	lsrs r1, r2, #4
	adds r3, r1, #0
	lsls r2, r3, #0x10
	lsrs r1, r2, #0x10
	ldr r2, _080630C0 @ =0x00005020
	movs r3, #0
	str r3, [sp]
	movs r3, #3
	bl sub_8062AB4
	ldr r0, _080630B8 @ =0x0203CDE4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0, #0x11]
	adds r0, r1, #2
	lsls r1, r0, #5
	adds r0, r1, #3
	ldr r1, _080630B8 @ =0x0203CDE4
	ldr r2, [r7, #4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r2, [r1, #0x10]
	adds r0, r0, r2
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, _080630BC @ =gBg0Tm
	adds r0, r0, r1
	ldr r1, _080630B8 @ =0x0203CDE4
	ldr r2, [r7, #4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r3, r1, r2
	ldrb r1, [r3, #0xc]
	ldr r2, _080630B8 @ =0x0203CDE4
	ldr r3, [r7, #4]
	adds r5, r3, #0
	lsls r4, r5, #2
	adds r4, r4, r3
	lsls r3, r4, #2
	adds r2, r2, r3
	ldrh r3, [r2, #0xe]
	lsrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	lsrs r2, r3, #0x10
	ldr r3, _080630C4 @ =0x08664EE4
	str r3, [sp]
	movs r3, #0
	bl sub_8062C38
	movs r0, #1
	bl EnableBgSync
	add sp, #0xc
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080630B8: .4byte 0x0203CDE4
_080630BC: .4byte gBg0Tm
_080630C0: .4byte 0x00005020
_080630C4: .4byte 0x08664EE4

	thumb_func_start sub_80630C8
sub_80630C8: @ 0x080630C8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	movs r1, #0xb
	ldrsb r1, [r0, r1]
	movs r2, #0xc0
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0x40
	beq _08063104
	cmp r0, #0x40
	bgt _080630EA
	cmp r0, #0
	beq _080630F4
	b _08063114
_080630EA:
	cmp r0, #0x80
	beq _080630FC
	cmp r0, #0xc0
	beq _0806310C
	b _08063114
_080630F4:
	ldr r0, _080630F8 @ =0x082DC840
	b _08063118
	.align 2, 0
_080630F8: .4byte 0x082DC840
_080630FC:
	ldr r0, _08063100 @ =0x082DC860
	b _08063118
	.align 2, 0
_08063100: .4byte 0x082DC860
_08063104:
	ldr r0, _08063108 @ =0x082DC880
	b _08063118
	.align 2, 0
_08063108: .4byte 0x082DC880
_0806310C:
	ldr r0, _08063110 @ =0x082DC8A0
	b _08063118
	.align 2, 0
_08063110: .4byte 0x082DC8A0
_08063114:
	movs r0, #0
	b _08063118
_08063118:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8063120
sub_8063120: @ 0x08063120
	push {r4, r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, _080632B0 @ =0x0203CDE4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x2e
	ldr r3, [r7, #8]
	adds r2, r3, #0
	ldrb r3, [r1]
	adds r1, r2, r3
	ldrb r2, [r0, #0x10]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0, #0x10]
	ldr r0, _080632B0 @ =0x0203CDE4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x2f
	ldrb r2, [r0, #0x11]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0, #0x11]
	ldr r0, _080632B0 @ =0x0203CDE4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_80630C8
	ldr r2, [r7, #4]
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080632B4 @ =0x08664F08
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #2
	ldr r3, _080632B0 @ =0x0203CDE4
	adds r2, r3, #0
	adds r3, #0x5e
	ldrb r2, [r3]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r2, _080632B8 @ =gBuf
	adds r0, r1, #0
	adds r1, r2, #0
	bl Decompress
	ldr r0, _080632B0 @ =0x0203CDE4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0, #0x11]
	lsls r0, r1, #5
	ldr r1, _080632B0 @ =0x0203CDE4
	ldr r2, [r7, #4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r2, [r1, #0x10]
	adds r0, r0, r2
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, _080632BC @ =gBg1Tm
	adds r0, r0, r1
	ldr r1, _080632B8 @ =gBuf
	ldr r3, [r7, #4]
	adds r2, r3, #0
	adds r3, r2, #1
	adds r2, r3, #0
	lsls r3, r2, #0xc
	adds r2, r3, #0
	movs r3, #1
	orrs r2, r3
	adds r4, r2, #0
	lsls r3, r4, #0x10
	lsrs r2, r3, #0x10
	bl TmApplyTsa_t
	movs r0, #2
	bl EnableBgSync
	ldr r0, _080632B0 @ =0x0203CDE4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0, #0x11]
	lsls r2, r1, #5
	adds r0, r2, #1
	ldr r1, _080632B0 @ =0x0203CDE4
	ldr r2, [r7, #4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r2, [r1, #0x10]
	adds r0, r0, r2
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, _080632C0 @ =gBg0Tm
	adds r4, r0, r1
	ldr r0, _080632B0 @ =0x0203CDE4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, [r1]
	ldrh r1, [r0]
	adds r0, r1, #0
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0
	movs r2, #8
	bl PutStringCentered
	movs r0, #1
	bl EnableBgSync
	ldr r0, _080632B0 @ =0x0203CDE4
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, _080632B0 @ =0x0203CDE4
	ldr r2, [r7, #4]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r3, [r1, #0xd]
	adds r2, r3, #0
	lsls r1, r2, #4
	ldrh r2, [r0, #0xe]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0xe]
	ldr r1, [r7, #4]
	ldr r0, [r7]
	bl sub_8062FE8
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080632B0: .4byte 0x0203CDE4
_080632B4: .4byte 0x08664F08
_080632B8: .4byte gBuf
_080632BC: .4byte gBg1Tm
_080632C0: .4byte gBg0Tm

	thumb_func_start sub_80632C4
sub_80632C4: @ 0x080632C4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldrh r1, [r0, #0x2a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x2a]
	ldr r0, [r7]
	bl sub_80633B0
	ldr r0, _080633AC @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080633AC @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080633AC @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _080633AC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080633AC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080633AC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #4
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080633AC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080633AC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080633AC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0xfe
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080633AC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0xfd
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080633AC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #4
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080633AC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080633AC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080633AC: .4byte gDispIo

	thumb_func_start sub_80633B0
sub_80633B0: @ 0x080633B0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08063490 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2d
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08063490 @ =gDispIo
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x2f
	ldrb r1, [r2]
	adds r2, r1, #2
	adds r3, r2, #0
	lsls r1, r3, #3
	ldr r2, [r7]
	ldrh r3, [r2, #0x2a]
	adds r2, r3, #0
	adds r3, r1, #0
	subs r1, r3, r2
	adds r2, r0, #0
	adds r0, #0x31
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, _08063490 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xf0
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08063490 @ =gDispIo
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x2f
	ldrb r1, [r2]
	adds r2, r1, #2
	adds r3, r2, #0
	lsls r1, r3, #3
	ldr r2, [r7]
	ldrh r3, [r2, #0x2a]
	adds r2, r3, #0
	adds r3, r1, #0
	adds r1, r2, r3
	adds r2, r0, #0
	adds r0, #0x30
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, [r7]
	ldr r1, [r7]
	ldrh r2, [r1, #0x2a]
	adds r1, r2, #2
	ldrh r2, [r0, #0x2a]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x2a]
	ldr r0, [r7]
	movs r2, #0x2a
	ldrsh r1, [r0, r2]
	cmp r1, #0x10
	ble _08063488
	ldr r0, _08063490 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08063490 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08063490 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, [r7]
	bl Proc_Break
_08063488:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08063490: .4byte gDispIo

	thumb_func_start sub_8063494
sub_8063494: @ 0x08063494
	push {r7, lr}
	sub sp, #0x10
	add r7, sp, #4
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r1, [r7, #4]
	adds r0, r1, #1
	lsls r1, r0, #5
	adds r0, r1, #2
	ldr r1, [r7]
	adds r0, r0, r1
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, _080634F4 @ =gBg0Tm
	adds r0, r0, r1
	ldr r1, [r7, #8]
	ldr r2, _080634F8 @ =0x0000521F
	ldr r3, _080634FC @ =0x00005229
	str r3, [sp]
	movs r3, #2
	bl sub_8062AB4
	ldr r1, [r7, #4]
	adds r0, r1, #1
	lsls r1, r0, #5
	adds r0, r1, #3
	ldr r1, [r7]
	adds r0, r0, r1
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, _080634F4 @ =gBg0Tm
	adds r0, r0, r1
	ldr r2, [r7, #8]
	ldr r1, _08063500 @ =0x08664F58
	str r1, [sp]
	movs r1, #0x63
	movs r3, #0
	bl sub_8062C38
	movs r0, #1
	bl EnableBgSync
	add sp, #0x10
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080634F4: .4byte gBg0Tm
_080634F8: .4byte 0x0000521F
_080634FC: .4byte 0x00005229
_08063500: .4byte 0x08664F58

	thumb_func_start sub_8063504
sub_8063504: @ 0x08063504
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r4, _08063594 @ =0x08113584
	movs r0, #0
	bl GetBgChrOffset
	ldr r2, _08063598 @ =0x06004000
	adds r1, r0, r2
	adds r0, r4, #0
	movs r2, #0xe0
	bl RegisterDataMove
	ldr r4, _0806359C @ =0x08113884
	movs r0, #0
	bl GetBgChrOffset
	ldr r2, _080635A0 @ =0x060040E0
	adds r1, r0, r2
	movs r2, #0xc0
	lsls r2, r2, #2
	adds r0, r4, #0
	bl RegisterDataMove
	ldr r4, _080635A4 @ =0x08113B84
	movs r0, #0
	bl GetBgChrOffset
	ldr r2, _080635A8 @ =0x060043E0
	adds r1, r0, r2
	movs r2, #0xb0
	lsls r2, r2, #1
	adds r0, r4, #0
	bl RegisterDataMove
	ldr r1, _080635AC @ =0x08113D50
	adds r0, r1, #0
	movs r1, #0xa0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080635B0 @ =0x02021D14
	ldr r1, _080635B4 @ =0x082DC5B0
	movs r2, #0xa4
	lsls r2, r2, #7
	bl TmApplyTsa_t
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r0, #0
	ldrsh r2, [r1, r0]
	movs r0, #6
	movs r1, #8
	bl sub_8063494
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08063594: .4byte 0x08113584
_08063598: .4byte 0x06004000
_0806359C: .4byte 0x08113884
_080635A0: .4byte 0x060040E0
_080635A4: .4byte 0x08113B84
_080635A8: .4byte 0x060043E0
_080635AC: .4byte 0x08113D50
_080635B0: .4byte 0x02021D14
_080635B4: .4byte 0x082DC5B0

	thumb_func_start sub_80635B8
sub_80635B8: @ 0x080635B8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _080635DC @ =gPlaySt
	ldrb r1, [r0, #0x1d]
	lsls r2, r1, #0x1e
	lsrs r0, r2, #0x1f
	cmp r0, #0
	bne _080635D2
	movs r0, #0x74
	bl m4aSongNumStart
_080635D2:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080635DC: .4byte gPlaySt

	thumb_func_start sub_80635E0
sub_80635E0: @ 0x080635E0
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x64
	ldrh r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x64
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0x63
	ble _0806362C
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
_0806362C:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r0, #0
	ldrsh r2, [r1, r0]
	movs r0, #6
	movs r1, #8
	bl sub_8063494
	ldr r1, [r7]
	adds r0, r1, #0
	adds r4, r1, #0
	adds r4, #0x64
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x66
	movs r0, #0
	ldrsh r2, [r1, r0]
	adds r0, r2, #0
	movs r1, #0x64
	bl __modsi3
	adds r1, r0, #0
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r2, r1, #0x10
	asrs r1, r2, #0x10
	cmp r0, r1
	bne _08063672
	ldr r0, [r7]
	bl Proc_Break
	movs r0, #0x74
	bl m4aSongNumStop
_08063672:
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806367C
sub_806367C: @ 0x0806367C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x6a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	bl sub_806376C
	ldr r0, _08063768 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08063768 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08063768 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08063768 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08063768 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08063768 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #4
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08063768 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08063768 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08063768 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0xfe
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08063768 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0xfd
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08063768 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #4
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08063768 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08063768 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08063768: .4byte gDispIo

	thumb_func_start sub_806376C
sub_806376C: @ 0x0806376C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08063844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2d
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08063844 @ =gDispIo
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x6a
	ldrh r3, [r2]
	adds r1, r3, #0
	movs r2, #0x4c
	subs r1, r2, r1
	adds r2, r0, #0
	adds r0, #0x31
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, _08063844 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xf0
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08063844 @ =gDispIo
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x6a
	ldrh r1, [r2]
	adds r2, r1, #0
	adds r1, r2, #0
	adds r1, #0x4c
	adds r2, r0, #0
	adds r0, #0x30
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x6a
	ldrh r3, [r2]
	adds r1, r3, #2
	adds r2, r0, #0
	adds r0, #0x6a
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x6a
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0xc
	ble _0806383C
	ldr r0, _08063844 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08063844 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08063844 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, [r7]
	bl Proc_Break
_0806383C:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08063844: .4byte gDispIo

	thumb_func_start sub_8063848
sub_8063848: @ 0x08063848
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x66
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0x63
	bgt _08063860
	b _08063872
_08063860:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x68
	movs r0, #0
	ldrsh r2, [r1, r0]
	adds r0, r2, #0
	ldr r1, [r7]
	bl sub_8067CF8
_08063872:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806387C
sub_806387C: @ 0x0806387C
	push {r7, lr}
	mov r7, sp
	ldr r1, _08063890 @ =0x086650AC
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08063890: .4byte 0x086650AC

	thumb_func_start sub_8063894
sub_8063894: @ 0x08063894
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x30
	add r7, sp, #8
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r1, _08063920 @ =0x086650A8
	ldr r0, [r1]
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r0, r0, r1
	movs r2, #8
	ldrsh r1, [r0, r2]
	adds r0, r1, #0
	bl GetPersonInfo
	str r0, [r7, #0xc]
	ldr r1, _08063920 @ =0x086650A8
	ldr r0, [r1]
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r0, r0, r1
	movs r4, #0xe
	ldrsh r1, [r0, r4]
	adds r0, r1, #0
	bl GetJobInfo
	str r0, [r7, #0x10]
	ldr r1, _08063920 @ =0x086650A8
	ldr r0, [r1]
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r0, r0, r1
	movs r5, #8
	ldrsh r1, [r0, r5]
	str r1, [r7, #0x14]
	ldr r1, _08063920 @ =0x086650A8
	ldr r0, [r1]
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r0, r0, r1
	movs r6, #0xe
	ldrsh r1, [r0, r6]
	str r1, [r7, #0x18]
	ldr r1, _08063920 @ =0x086650A8
	ldr r0, [r1]
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r0, r0, r1
	movs r2, #0x10
	ldrsh r1, [r0, r2]
	str r1, [r7, #0x1c]
	ldr r0, [r7, #4]
	cmp r0, #9
	bls _08063912
	b _08063CE8
_08063912:
	ldr r0, [r7, #4]
	adds r1, r0, #0
	lsls r0, r1, #2
	ldr r1, _08063924 @ =_08063928
	adds r0, r0, r1
	ldr r1, [r0]
	mov pc, r1
	.align 2, 0
_08063920: .4byte 0x086650A8
_08063924: .4byte _08063928
_08063928: @ jump table
	.4byte _08063950 @ case 0
	.4byte _080639D8 @ case 1
	.4byte _08063A54 @ case 2
	.4byte _08063AD0 @ case 3
	.4byte _08063B58 @ case 4
	.4byte _08063BEC @ case 5
	.4byte _08063BEC @ case 6
	.4byte _08063BEC @ case 7
	.4byte _08063BEC @ case 8
	.4byte _08063BEC @ case 9
_08063950:
	ldr r0, _080639D0 @ =0x086650A8
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r1, [r0]
	adds r0, r2, r1
	adds r1, r0, #0
	adds r1, #0x14
	adds r0, r1, #0
	bl ClearText
	ldr r0, _080639D0 @ =0x086650A8
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r0, [r0]
	adds r1, r2, r0
	adds r0, r1, #0
	adds r0, #0x14
	ldr r2, [r7, #8]
	ldr r3, [r7, #0x14]
	movs r1, #0x10
	bl Text_InsertDrawNumberOrBlank
	ldr r0, [r7, #0xc]
	ldrh r1, [r0]
	adds r0, r1, #0
	bl DecodeMsg
	ldr r1, _080639D0 @ =0x086650A8
	ldr r2, [r7]
	movs r3, #0x64
	muls r2, r3, r2
	adds r3, r2, #0
	adds r3, #8
	ldr r1, [r1]
	adds r2, r3, r1
	adds r1, r2, #0
	adds r1, #0x14
	ldr r2, [r7]
	adds r4, r2, #0
	lsls r3, r4, #1
	adds r3, r3, r2
	lsls r2, r3, #3
	ldr r3, _080639D4 @ =0x02021B14
	adds r2, r2, r3
	ldr r3, [r7, #8]
	movs r4, #0
	str r4, [sp]
	str r0, [sp, #4]
	adds r0, r1, #0
	adds r1, r2, #0
	adds r2, r3, #0
	movs r3, #0x18
	bl PutDrawText
	movs r0, #1
	bl EnableBgSync
	b _08063CE8
	.align 2, 0
_080639D0: .4byte 0x086650A8
_080639D4: .4byte 0x02021B14
_080639D8:
	ldr r0, _08063A4C @ =0x086650A8
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r1, [r0]
	adds r0, r2, r1
	adds r1, r0, #0
	adds r1, #0x1c
	adds r0, r1, #0
	bl ClearText
	ldr r0, _08063A4C @ =0x086650A8
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r0, [r0]
	adds r1, r2, r0
	adds r0, r1, #0
	adds r0, #0x1c
	ldr r2, [r7, #8]
	ldr r3, _08063A4C @ =0x086650A8
	ldr r1, [r3]
	ldr r3, [r7]
	movs r4, #0x64
	muls r3, r4, r3
	adds r1, r1, r3
	movs r4, #0xa
	ldrsh r3, [r1, r4]
	movs r1, #8
	bl Text_InsertDrawNumberOrBlank
	ldr r0, _08063A4C @ =0x086650A8
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r0, [r0]
	adds r1, r2, r0
	adds r0, r1, #0
	adds r0, #0x1c
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #1
	adds r2, r2, r1
	lsls r1, r2, #3
	ldr r2, _08063A50 @ =0x02021B96
	adds r1, r1, r2
	bl PutText
	movs r0, #1
	bl EnableBgSync
	b _08063CE8
	.align 2, 0
_08063A4C: .4byte 0x086650A8
_08063A50: .4byte 0x02021B96
_08063A54:
	ldr r0, _08063AC8 @ =0x086650A8
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r1, [r0]
	adds r0, r2, r1
	adds r1, r0, #0
	adds r1, #0x24
	adds r0, r1, #0
	bl ClearText
	ldr r0, _08063AC8 @ =0x086650A8
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r0, [r0]
	adds r1, r2, r0
	adds r0, r1, #0
	adds r0, #0x24
	ldr r2, [r7, #8]
	ldr r3, _08063AC8 @ =0x086650A8
	ldr r1, [r3]
	ldr r3, [r7]
	movs r4, #0x64
	muls r3, r4, r3
	adds r1, r1, r3
	movs r5, #0xc
	ldrsh r3, [r1, r5]
	movs r1, #8
	bl Text_InsertDrawNumberOrBlank
	ldr r0, _08063AC8 @ =0x086650A8
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r0, [r0]
	adds r1, r2, r0
	adds r0, r1, #0
	adds r0, #0x24
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #1
	adds r2, r2, r1
	lsls r1, r2, #3
	ldr r2, _08063ACC @ =0x02021B9C
	adds r1, r1, r2
	bl PutText
	movs r0, #1
	bl EnableBgSync
	b _08063CE8
	.align 2, 0
_08063AC8: .4byte 0x086650A8
_08063ACC: .4byte 0x02021B9C
_08063AD0:
	ldr r0, _08063B50 @ =0x086650A8
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r1, [r0]
	adds r0, r2, r1
	adds r1, r0, #0
	adds r1, #0x2c
	adds r0, r1, #0
	bl ClearText
	ldr r0, _08063B50 @ =0x086650A8
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r0, [r0]
	adds r1, r2, r0
	adds r0, r1, #0
	adds r0, #0x2c
	ldr r2, [r7, #8]
	ldr r3, [r7, #0x18]
	movs r1, #0x10
	bl Text_InsertDrawNumberOrBlank
	ldr r0, [r7, #0x10]
	ldrh r1, [r0]
	adds r0, r1, #0
	bl DecodeMsg
	ldr r1, _08063B50 @ =0x086650A8
	ldr r2, [r7]
	movs r3, #0x64
	muls r2, r3, r2
	adds r3, r2, #0
	adds r3, #8
	ldr r1, [r1]
	adds r2, r3, r1
	adds r1, r2, #0
	adds r1, #0x2c
	ldr r2, [r7]
	adds r4, r2, #0
	lsls r3, r4, #1
	adds r3, r3, r2
	lsls r2, r3, #3
	ldr r3, _08063B54 @ =0x02021C14
	adds r2, r2, r3
	ldr r3, [r7, #8]
	movs r4, #0
	str r4, [sp]
	str r0, [sp, #4]
	adds r0, r1, #0
	adds r1, r2, #0
	adds r2, r3, #0
	movs r3, #0x18
	bl PutDrawText
	movs r0, #1
	bl EnableBgSync
	b _08063CE8
	.align 2, 0
_08063B50: .4byte 0x086650A8
_08063B54: .4byte 0x02021C14
_08063B58:
	ldr r0, _08063BE4 @ =0x086650A8
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r1, [r0]
	adds r0, r2, r1
	adds r1, r0, #0
	adds r1, #0x34
	adds r0, r1, #0
	bl ClearText
	ldr r0, _08063BE4 @ =0x086650A8
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r0, [r0]
	adds r1, r2, r0
	adds r0, r1, #0
	adds r0, #0x34
	ldr r2, [r7, #8]
	ldr r3, [r7, #0x1c]
	movs r1, #0x10
	bl Text_InsertDrawNumberOrBlank
	ldr r1, _08063BE4 @ =0x086650A8
	ldr r0, [r1]
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r0, r0, r1
	movs r6, #0x10
	ldrsh r1, [r0, r6]
	adds r0, r1, #0
	bl GetItemName
	ldr r1, _08063BE4 @ =0x086650A8
	ldr r2, [r7]
	movs r3, #0x64
	muls r2, r3, r2
	adds r3, r2, #0
	adds r3, #8
	ldr r1, [r1]
	adds r2, r3, r1
	adds r1, r2, #0
	adds r1, #0x34
	ldr r2, [r7]
	adds r4, r2, #0
	lsls r3, r4, #1
	adds r3, r3, r2
	lsls r2, r3, #3
	ldr r3, _08063BE8 @ =0x02021C94
	adds r2, r2, r3
	ldr r3, [r7, #8]
	movs r4, #0
	str r4, [sp]
	str r0, [sp, #4]
	adds r0, r1, #0
	adds r1, r2, #0
	adds r2, r3, #0
	movs r3, #0x18
	bl PutDrawText
	movs r0, #1
	bl EnableBgSync
	b _08063CE8
	.align 2, 0
_08063BE4: .4byte 0x086650A8
_08063BE8: .4byte 0x02021C94
_08063BEC:
	ldr r0, _08063CDC @ =0x086650A8
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r1, [r0]
	adds r0, r2, r1
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #3
	adds r2, r1, #0
	adds r2, #0x14
	adds r1, r0, r2
	adds r0, r1, #0
	bl ClearText
	ldr r0, _08063CDC @ =0x086650A8
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r1, [r0]
	adds r0, r2, r1
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #3
	adds r2, r1, #0
	adds r2, #0x14
	adds r0, r0, r2
	ldr r2, [r7, #8]
	ldr r3, _08063CDC @ =0x086650A8
	ldr r1, [r3]
	ldr r3, [r7, #4]
	adds r4, r3, #0
	lsls r3, r4, #1
	ldr r4, [r7]
	movs r5, #0x64
	muls r4, r5, r4
	adds r3, r3, r4
	adds r1, #8
	adds r4, r1, r3
	movs r1, #0
	ldrsh r3, [r4, r1]
	movs r1, #8
	bl Text_InsertDrawNumberOrBlank
	ldr r0, _08063CDC @ =0x086650A8
	ldr r1, [r7]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r1, [r0]
	adds r0, r2, r1
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #3
	adds r2, r1, #0
	adds r2, #0x14
	adds r0, r0, r2
	ldr r2, [r7, #4]
	subs r1, r2, #5
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r2, r1, #0
	adds r2, #8
	lsls r3, r2, #5
	adds r1, r3, #7
	ldr r2, [r7]
	adds r4, r2, #0
	lsls r3, r4, #1
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r2, _08063CE0 @ =gBg0Tm
	adds r1, r1, r2
	ldr r2, [r7, #8]
	movs r3, #0
	str r3, [sp]
	ldr r3, _08063CE4 @ =0x08665008
	ldr r5, _08063CDC @ =0x086650A8
	ldr r4, [r5]
	ldr r5, [r7, #4]
	adds r6, r5, #0
	lsls r5, r6, #1
	str r5, [r7, #0x20]
	ldr r6, [r7]
	str r6, [r7, #0x24]
	movs r5, #0x64
	mov r8, r5
	ldr r5, [r7, #0x24]
	mov r6, r8
	muls r6, r5, r6
	str r6, [r7, #0x24]
	ldr r6, [r7, #0x20]
	ldr r5, [r7, #0x24]
	adds r6, r6, r5
	str r6, [r7, #0x20]
	adds r4, #8
	ldr r6, [r7, #0x20]
	adds r5, r4, r6
	movs r6, #0
	ldrsh r4, [r5, r6]
	adds r5, r4, #0
	lsls r4, r5, #2
	adds r3, r3, r4
	ldr r4, [r3]
	str r4, [sp, #4]
	movs r3, #0x10
	bl PutDrawText
	movs r0, #1
	bl EnableBgSync
	b _08063CE8
	.align 2, 0
_08063CDC: .4byte 0x086650A8
_08063CE0: .4byte gBg0Tm
_08063CE4: .4byte 0x08665008
_08063CE8:
	add sp, #0x30
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8063CF4
sub_8063CF4: @ 0x08063CF4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _08063EE8 @ =ProcScr_DebugMonitor
	adds r0, r1, #0
	bl Proc_EndEach
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x66
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r1, _08063EEC @ =0x086650A8
	ldr r0, [r1]
	ldrh r1, [r0, #0xe]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0xe]
	ldr r1, _08063EEC @ =0x086650A8
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #8]
	ldr r1, _08063EEC @ =0x086650A8
	ldr r0, [r1]
	ldrh r1, [r0, #0x10]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x10]
	ldr r1, _08063EEC @ =0x086650A8
	ldr r0, [r1]
	ldrh r1, [r0, #0xa]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #4
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0xa]
	ldr r1, _08063EEC @ =0x086650A8
	ldr r0, [r1]
	ldrh r1, [r0, #0xc]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #8
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0xc]
	ldr r0, _08063EEC @ =0x086650A8
	ldr r2, [r0]
	adds r1, r2, #0
	adds r0, r2, #0
	adds r0, #0x72
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08063EEC @ =0x086650A8
	ldr r2, [r0]
	adds r1, r2, #0
	adds r0, r2, #0
	adds r0, #0x6c
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x26
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08063EEC @ =0x086650A8
	ldr r2, [r0]
	adds r1, r2, #0
	adds r0, r2, #0
	adds r0, #0x74
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xf
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08063EEC @ =0x086650A8
	ldr r2, [r0]
	adds r1, r2, #0
	adds r0, r2, #0
	adds r0, #0x6e
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #5
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08063EEC @ =0x086650A8
	ldr r2, [r0]
	adds r1, r2, #0
	adds r0, r2, #0
	adds r0, #0x70
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #8
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r1, _08063EEC @ =0x086650A8
	ldr r0, [r1]
	ldrh r1, [r0, #0x12]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x12]
	ldr r1, _08063EEC @ =0x086650A8
	ldr r0, [r1]
	ldrh r1, [r0, #0x14]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #5
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x14]
	ldr r1, _08063EEC @ =0x086650A8
	ldr r0, [r1]
	ldrh r1, [r0, #0x16]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x16]
	ldr r1, _08063EEC @ =0x086650A8
	ldr r0, [r1]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r1, _08063EEC @ =0x086650A8
	ldr r0, [r1]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	ldr r0, _08063EEC @ =0x086650A8
	ldr r2, [r0]
	adds r1, r2, #0
	adds r0, r2, #0
	adds r0, #0x76
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08063EEC @ =0x086650A8
	ldr r2, [r0]
	adds r1, r2, #0
	adds r0, r2, #0
	adds r0, #0x78
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08063EEC @ =0x086650A8
	ldr r2, [r0]
	adds r1, r2, #0
	adds r0, r2, #0
	adds r0, #0x7a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08063EEC @ =0x086650A8
	ldr r2, [r0]
	adds r1, r2, #0
	adds r0, r2, #0
	adds r0, #0x7c
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08063EEC @ =0x086650A8
	ldr r2, [r0]
	adds r1, r2, #0
	adds r0, r2, #0
	adds r0, #0x7e
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08063EE8: .4byte ProcScr_DebugMonitor
_08063EEC: .4byte 0x086650A8

	thumb_func_start sub_8063EF0
sub_8063EF0: @ 0x08063EF0
	push {r7, lr}
	sub sp, #0x10
	add r7, sp, #4
	str r0, [r7]
	bl MU_EndAll
	bl ResetText
	ldr r0, _08063FE4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x80
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08063FE4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #8
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08063FE4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #8
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08063FE4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08063FE8 @ =gDispIo+0x3C
	ldr r1, _08063FE8 @ =gDispIo+0x3C
	ldrh r2, [r1]
	ldr r3, _08063FEC @ =0x0000FFE0
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08063FE8 @ =gDispIo+0x3C
	ldr r1, _08063FE8 @ =gDispIo+0x3C
	ldrh r2, [r1]
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08063FE8 @ =gDispIo+0x3C
	ldr r1, _08063FE8 @ =gDispIo+0x3C
	ldrh r2, [r1]
	ldr r3, _08063FF0 @ =0x0000E0FF
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08063FE8 @ =gDispIo+0x3C
	ldr r1, _08063FE8 @ =gDispIo+0x3C
	ldrh r2, [r1]
	movs r3, #0xe0
	lsls r3, r3, #5
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08063FE4 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08063FE4 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08063FE4 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x1d
	movs r3, #0x13
	bl sub_8041358
	movs r0, #0
	str r0, [r7, #4]
_08063FD2:
	ldr r0, _08063FF4 @ =0x08665080
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	cmp r1, #0
	bne _08063FF8
	b _0806402C
	.align 2, 0
_08063FE4: .4byte gDispIo
_08063FE8: .4byte gDispIo+0x3C
_08063FEC: .4byte 0x0000FFE0
_08063FF0: .4byte 0x0000E0FF
_08063FF4: .4byte 0x08665080
_08063FF8:
	ldr r0, [r7, #4]
	adds r1, r0, #0
	lsls r0, r1, #1
	lsls r1, r0, #5
	adds r0, r1, #0
	lsls r1, r0, #1
	ldr r2, _08064024 @ =0x02021B0A
	adds r0, r1, r2
	ldr r1, _08064028 @ =0x08665080
	ldr r2, [r7, #4]
	adds r3, r2, #0
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0
	bl PutString
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _08063FD2
	.align 2, 0
_08064024: .4byte 0x02021B0A
_08064028: .4byte 0x08665080
_0806402C:
	movs r0, #0
	str r0, [r7, #4]
_08064030:
	ldr r0, [r7, #4]
	cmp r0, #9
	ble _08064038
	b _080640C2
_08064038:
	movs r0, #0
	str r0, [r7, #8]
_0806403C:
	ldr r0, [r7, #8]
	cmp r0, #1
	ble _08064044
	b _080640BA
_08064044:
	ldr r0, _080640A0 @ =0x086650A8
	ldr r1, [r7, #8]
	movs r2, #0x64
	muls r1, r2, r1
	adds r2, r1, #0
	adds r2, #8
	ldr r1, [r0]
	adds r0, r2, r1
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #3
	adds r2, r1, #0
	adds r2, #0x14
	adds r0, r0, r2
	ldr r1, _080640A4 @ =0x08665030
	ldr r2, [r7, #4]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	ldrb r2, [r1]
	adds r1, r2, #0
	bl InitTextDb
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r2, #0
	ldrsh r0, [r1, r2]
	ldr r1, [r7, #8]
	cmp r1, r0
	bne _080640A8
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x66
	movs r2, #0
	ldrsh r0, [r1, r2]
	ldr r1, [r7, #4]
	cmp r1, r0
	bne _080640A8
	ldr r0, [r7, #8]
	ldr r1, [r7, #4]
	movs r2, #0
	bl sub_8063894
	b _080640B2
	.align 2, 0
_080640A0: .4byte 0x086650A8
_080640A4: .4byte 0x08665030
_080640A8:
	ldr r0, [r7, #8]
	ldr r1, [r7, #4]
	movs r2, #1
	bl sub_8063894
_080640B2:
	ldr r0, [r7, #8]
	adds r1, r0, #1
	str r1, [r7, #8]
	b _0806403C
_080640BA:
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _08064030
_080640C2:
	movs r0, #1
	bl EnableBgSync
	add sp, #0x10
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80640D0
sub_80640D0: @ 0x080640D0
	push {r4, r5, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r2, #0
	ldrsh r0, [r1, r2]
	str r0, [r7, #4]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x66
	movs r3, #0
	ldrsh r0, [r1, r3]
	str r0, [r7, #8]
	ldr r1, _08064114 @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #8
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _0806411E
	bl sub_80646E4
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	bne _08064118
	b _080645E4
	.align 2, 0
_08064114: .4byte gKeySt
_08064118:
	ldr r0, [r7]
	bl Proc_Break
_0806411E:
	ldr r1, _0806413C @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #4]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _08064140
	movs r0, #0xa
	str r0, [r7, #0xc]
	b _08064144
	.align 2, 0
_0806413C: .4byte gKeySt
_08064140:
	movs r0, #1
	str r0, [r7, #0xc]
_08064144:
	ldr r1, _0806425C @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	bne _0806415C
	b _080642B8
_0806415C:
	ldr r1, _08064260 @ =0x086650A8
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r4, #0
	ldrsh r1, [r2, r4]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x64
	movs r5, #0
	ldrsh r2, [r3, r5]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	adds r2, r0, #0
	adds r2, #8
	adds r0, r2, r1
	ldr r2, _08064260 @ =0x086650A8
	ldr r1, [r2]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r3, r2, #0
	lsls r2, r3, #1
	ldr r4, [r7]
	adds r3, r4, #0
	adds r4, #0x64
	movs r5, #0
	ldrsh r3, [r4, r5]
	movs r4, #0x64
	muls r3, r4, r3
	adds r2, r2, r3
	adds r3, r1, #0
	adds r3, #8
	adds r1, r3, r2
	ldr r3, [r7, #0xc]
	adds r2, r3, #0
	ldrh r3, [r1]
	adds r1, r2, r3
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, _08064260 @ =0x086650A8
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x64
	movs r4, #0
	ldrsh r2, [r3, r4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	adds r0, #8
	adds r1, r0, r1
	movs r5, #0
	ldrsh r0, [r1, r5]
	ldr r1, _08064264 @ =0x08665030
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	ldrb r2, [r1, #6]
	cmp r0, r2
	blt _080642B8
	ldr r0, [r7, #0xc]
	cmp r0, #1
	bne _08064268
	ldr r1, _08064260 @ =0x086650A8
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r5, #0
	ldrsh r1, [r2, r5]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x64
	movs r4, #0
	ldrsh r2, [r3, r4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	adds r2, r0, #0
	adds r2, #8
	adds r0, r2, r1
	ldr r1, _08064264 @ =0x08665030
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r5, #0
	ldrsh r2, [r3, r5]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	ldrb r2, [r1, #5]
	adds r1, r2, #0
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	b _080642B8
	.align 2, 0
_0806425C: .4byte gKeySt
_08064260: .4byte 0x086650A8
_08064264: .4byte 0x08665030
_08064268:
	ldr r1, _080643D4 @ =0x086650A8
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x64
	movs r4, #0
	ldrsh r2, [r3, r4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	adds r2, r0, #0
	adds r2, #8
	adds r0, r2, r1
	ldr r1, _080643D8 @ =0x08665030
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r5, #0
	ldrsh r2, [r3, r5]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	ldrb r3, [r1, #6]
	adds r2, r3, #0
	subs r1, r2, #1
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
_080642B8:
	ldr r1, _080643DC @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r2, #2
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	bne _080642D0
	b _0806442C
_080642D0:
	ldr r1, _080643D4 @ =0x086650A8
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x64
	movs r4, #0
	ldrsh r2, [r3, r4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	adds r2, r0, #0
	adds r2, #8
	adds r0, r2, r1
	ldr r2, _080643D4 @ =0x086650A8
	ldr r1, [r2]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r5, #0
	ldrsh r2, [r3, r5]
	adds r3, r2, #0
	lsls r2, r3, #1
	ldr r4, [r7]
	adds r3, r4, #0
	adds r4, #0x64
	movs r5, #0
	ldrsh r3, [r4, r5]
	movs r4, #0x64
	muls r3, r4, r3
	adds r2, r2, r3
	adds r3, r1, #0
	adds r3, #8
	adds r1, r3, r2
	ldr r3, [r7, #0xc]
	adds r2, r3, #0
	ldrh r3, [r1]
	subs r1, r3, r2
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, _080643D4 @ =0x086650A8
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x64
	movs r4, #0
	ldrsh r2, [r3, r4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	adds r0, #8
	adds r1, r0, r1
	movs r5, #0
	ldrsh r0, [r1, r5]
	ldr r1, _080643D8 @ =0x08665030
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	ldrb r2, [r1, #5]
	cmp r0, r2
	bge _0806442C
	ldr r0, [r7, #0xc]
	cmp r0, #1
	bne _080643E0
	ldr r1, _080643D4 @ =0x086650A8
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r5, #0
	ldrsh r1, [r2, r5]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x64
	movs r4, #0
	ldrsh r2, [r3, r4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	adds r2, r0, #0
	adds r2, #8
	adds r0, r2, r1
	ldr r1, _080643D8 @ =0x08665030
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r5, #0
	ldrsh r2, [r3, r5]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	ldrb r3, [r1, #6]
	adds r2, r3, #0
	subs r1, r2, #1
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	b _0806442C
	.align 2, 0
_080643D4: .4byte 0x086650A8
_080643D8: .4byte 0x08665030
_080643DC: .4byte gKeySt
_080643E0:
	ldr r1, _080645EC @ =0x086650A8
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x64
	movs r4, #0
	ldrsh r2, [r3, r4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	adds r2, r0, #0
	adds r2, #8
	adds r0, r2, r1
	ldr r1, _080645F0 @ =0x08665030
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r5, #0
	ldrsh r2, [r3, r5]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	ldrb r2, [r1, #5]
	adds r1, r2, #0
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
_0806442C:
	ldr r1, _080645F4 @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r2, #0x20
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _0806449E
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x66
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #2
	beq _08064472
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x64
	ldrh r1, [r2]
	movs r2, #1
	subs r1, r2, r1
	adds r2, r0, #0
	adds r0, #0x64
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
_08064472:
	ldr r0, [r7]
	ldr r1, _080645F0 @ =0x08665030
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	movs r2, #3
	ldrsb r2, [r1, r2]
	adds r1, r2, #0
	adds r2, r0, #0
	adds r0, #0x66
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
_0806449E:
	ldr r1, _080645F4 @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r2, #0x10
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _08064510
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x66
	movs r5, #0
	ldrsh r0, [r1, r5]
	cmp r0, #1
	beq _080644E4
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x64
	ldrh r1, [r2]
	movs r2, #1
	subs r1, r2, r1
	adds r2, r0, #0
	adds r0, #0x64
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
_080644E4:
	ldr r0, [r7]
	ldr r1, _080645F0 @ =0x08665030
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	movs r2, #4
	ldrsb r2, [r1, r2]
	adds r1, r2, #0
	adds r2, r0, #0
	adds r0, #0x66
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
_08064510:
	ldr r1, _080645F4 @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r2, #0x40
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _08064552
	ldr r0, [r7]
	ldr r1, _080645F0 @ =0x08665030
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r5, #0
	ldrsh r2, [r3, r5]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	movs r2, #1
	ldrsb r2, [r1, r2]
	adds r1, r2, #0
	adds r2, r0, #0
	adds r0, #0x66
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
_08064552:
	ldr r1, _080645F4 @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r2, #0x80
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _08064594
	ldr r0, [r7]
	ldr r1, _080645F0 @ =0x08665030
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r3, r2, #0
	lsls r2, r3, #3
	adds r1, r1, r2
	movs r2, #2
	ldrsb r2, [r1, r2]
	adds r1, r2, #0
	adds r2, r0, #0
	adds r0, #0x66
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
_08064594:
	ldr r1, _080645F4 @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r2, #0xf0
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080645B4
	ldr r0, [r7, #4]
	ldr r1, [r7, #8]
	movs r2, #1
	bl sub_8063894
_080645B4:
	ldr r1, _080645F4 @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r2, #0xf3
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080645E4
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r5, #0
	ldrsh r0, [r1, r5]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r3, #0
	ldrsh r1, [r2, r3]
	movs r2, #0
	bl sub_8063894
_080645E4:
	add sp, #0x10
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080645EC: .4byte 0x086650A8
_080645F0: .4byte 0x08665030
_080645F4: .4byte gKeySt

	thumb_func_start sub_80645F8
sub_80645F8: @ 0x080645F8
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x6e
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x1e
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	ldrb r1, [r0, #0x10]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x3c
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x10]
	ldr r1, _080646E0 @ =0x086650A8
	ldr r0, [r1]
	ldr r1, [r7, #4]
	movs r2, #0x64
	muls r1, r2, r1
	adds r0, r0, r1
	movs r2, #8
	ldrsh r1, [r0, r2]
	adds r0, r1, #0
	bl GetPersonInfo
	ldr r1, [r7]
	str r0, [r1]
	ldr r1, _080646E0 @ =0x086650A8
	ldr r0, [r1]
	ldr r1, [r7, #4]
	movs r2, #0x64
	muls r1, r2, r1
	adds r0, r0, r1
	movs r2, #0xe
	ldrsh r1, [r0, r2]
	adds r0, r1, #0
	bl GetJobInfo
	ldr r1, [r7]
	str r0, [r1, #4]
	ldr r0, [r7]
	ldr r2, _080646E0 @ =0x086650A8
	ldr r1, [r2]
	ldr r2, [r7, #4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	ldrh r2, [r1, #0xa]
	adds r1, r2, #0
	ldrb r2, [r0, #0xe]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0xe]
	ldr r0, [r7]
	ldr r2, _080646E0 @ =0x086650A8
	ldr r1, [r2]
	ldr r2, [r7, #4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	ldrh r2, [r1, #0xc]
	adds r1, r2, #0
	ldrb r2, [r0, #0xf]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0xf]
	ldr r0, [r7]
	ldr r2, _080646E0 @ =0x086650A8
	ldr r1, [r2]
	ldr r2, [r7, #4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	adds r2, r0, #0
	adds r0, #0x4a
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrh r1, [r1, #0x10]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x6a
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080646E0: .4byte 0x086650A8

	thumb_func_start sub_80646E4
sub_80646E4: @ 0x080646E4
	push {r7, lr}
	sub sp, #0x14
	mov r7, sp
	ldr r0, _08064718 @ =gBattleHits
	str r0, [r7, #0xc]
	ldr r1, _0806471C @ =gBattleUnitA
	adds r0, r1, #0
	movs r1, #0
	bl sub_80645F8
	ldr r1, _08064720 @ =gBattleUnitB
	adds r0, r1, #0
	movs r1, #1
	bl sub_80645F8
	bl ClearBattleHits
	movs r0, #0
	str r0, [r7, #0x10]
	movs r0, #0
	str r0, [r7]
_0806470E:
	ldr r0, [r7]
	cmp r0, #4
	ble _08064724
	b _08064774
	.align 2, 0
_08064718: .4byte gBattleHits
_0806471C: .4byte gBattleUnitA
_08064720: .4byte gBattleUnitB
_08064724:
	movs r0, #0
	str r0, [r7, #4]
_08064728:
	ldr r0, [r7, #4]
	cmp r0, #1
	ble _08064730
	b _08064764
_08064730:
	ldr r1, _08064758 @ =0x086650A8
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #5
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r2, [r7, #4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	adds r0, #8
	adds r1, r0, r1
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0
	beq _0806475C
	movs r0, #1
	str r0, [r7, #0x10]
	b _08064764
	.align 2, 0
_08064758: .4byte 0x086650A8
_0806475C:
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _08064728
_08064764:
	ldr r0, [r7, #0x10]
	cmp r0, #0
	beq _0806476C
	b _08064774
_0806476C:
	ldr r0, [r7]
	adds r1, r0, #1
	str r1, [r7]
	b _0806470E
_08064774:
	ldr r0, [r7]
	cmp r0, #5
	bne _08064784
	ldr r0, [r7, #4]
	cmp r0, #2
	bne _08064784
	movs r0, #0
	b _08064952
_08064784:
	ldr r0, [r7]
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, [r7, #4]
	adds r0, r0, r1
	str r0, [r7, #8]
_08064790:
	ldr r0, [r7, #8]
	cmp r0, #9
	ble _08064798
	b _08064932
_08064798:
	ldr r0, [r7, #8]
	asrs r1, r0, #0x1f
	lsrs r2, r1, #0x1f
	adds r1, r0, r2
	asrs r0, r1, #1
	str r0, [r7]
	ldr r0, [r7, #8]
	movs r1, #1
	ands r0, r1
	str r0, [r7, #4]
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #3
	ldrb r2, [r0, #2]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0, #2]
	ldr r1, _080647F4 @ =0x086650A8
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #5
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r2, [r7, #4]
	movs r3, #0x64
	muls r2, r3, r2
	adds r1, r1, r2
	adds r0, #8
	adds r1, r0, r1
	movs r2, #0
	ldrsh r0, [r1, r2]
	str r0, [r7, #0x10]
	ldr r1, [r7, #0x10]
	subs r0, r1, #1
	cmp r0, #8
	bhi _08064886
	lsls r1, r0, #2
	ldr r2, _080647F8 @ =_080647FC
	adds r0, r1, r2
	ldr r1, [r0]
	mov pc, r1
	.align 2, 0
_080647F4: .4byte 0x086650A8
_080647F8: .4byte _080647FC
_080647FC: @ jump table
	.4byte _08064852 @ case 0
	.4byte _08064852 @ case 1
	.4byte _08064852 @ case 2
	.4byte _08064852 @ case 3
	.4byte _08064820 @ case 4
	.4byte _08064820 @ case 5
	.4byte _08064820 @ case 6
	.4byte _08064820 @ case 7
	.4byte _08064868 @ case 8
_08064820:
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0xc]
	ldrh r2, [r1]
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7, #0xc]
	ldrb r1, [r0, #3]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x14
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #3]
	b _08064886
_08064852:
	ldr r0, [r7, #0xc]
	ldrb r1, [r0, #3]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xa
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #3]
	b _08064886
_08064868:
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0xc]
	ldrh r2, [r1]
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	b _08064886
_08064886:
	ldr r1, [r7, #0x10]
	subs r0, r1, #2
	cmp r0, #6
	bhi _0806491A
	lsls r1, r0, #2
	ldr r2, _08064898 @ =_0806489C
	adds r0, r1, r2
	ldr r1, [r0]
	mov pc, r1
	.align 2, 0
_08064898: .4byte _0806489C
_0806489C: @ jump table
	.4byte _080648B8 @ case 0
	.4byte _080648D8 @ case 1
	.4byte _080648FA @ case 2
	.4byte _0806491A @ case 3
	.4byte _080648B8 @ case 4
	.4byte _080648D8 @ case 5
	.4byte _080648FA @ case 6
_080648B8:
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0xc]
	ldrh r2, [r1]
	movs r3, #0x80
	adds r1, r2, #0
	orrs r1, r3
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	b _0806491A
_080648D6:
	.byte 0x20, 0xE0
_080648D8:
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0xc]
	ldrh r2, [r1]
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r2, #0
	orrs r1, r3
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	b _0806491A
_080648F8:
	.byte 0x0F, 0xE0
_080648FA:
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0xc]
	ldrh r2, [r1]
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	b _0806491A
_08064918:
	.byte 0xFF, 0xE7
_0806491A:
	ldr r0, [r7, #0x10]
	cmp r0, #0
	beq _08064922
	b _08064924
_08064922:
	b _0806492A
_08064924:
	ldr r0, [r7, #0xc]
	adds r1, r0, #4
	str r1, [r7, #0xc]
_0806492A:
	ldr r0, [r7, #8]
	adds r1, r0, #1
	str r1, [r7, #8]
	b _08064790
_08064932:
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0xc]
	ldrb r2, [r1, #2]
	movs r3, #0x80
	adds r1, r2, #0
	orrs r1, r3
	ldrb r2, [r0, #2]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0, #2]
	movs r0, #1
	b _08064952
_08064952:
	add sp, #0x14
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806495C
sub_806495C: @ 0x0806495C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _0806498C @ =gBg0Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	ldr r1, _08064990 @ =gBg1Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	movs r0, #3
	bl EnableBgSync
	bl sub_80627D0
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806498C: .4byte gBg0Tm
_08064990: .4byte gBg1Tm

	thumb_func_start sub_8064994
sub_8064994: @ 0x08064994
	push {r4, r5, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, _08064A00 @ =0x082DB1C0
	ldr r1, _08064A04 @ =0x06013000
	bl Decompress
	ldr r0, _08064A08 @ =0x082DB2B0
	ldr r2, [r7]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r2, _08064A0C @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	adds r1, #8
	ldr r3, [r7]
	movs r2, #0xf
	ldrsb r2, [r3, r2]
	ldr r3, _08064A0C @ =gBmSt
	movs r5, #0xe
	ldrsh r4, [r3, r5]
	asrs r3, r4, #4
	adds r5, r3, #0
	lsls r4, r5, #0x10
	asrs r3, r4, #0x10
	subs r2, r2, r3
	lsls r3, r2, #1
	adds r2, r3, #0
	lsls r3, r2, #3
	adds r2, r3, #0
	adds r2, #0x10
	movs r3, #0xc0
	lsls r3, r3, #1
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl StartAnimProc
	add sp, #0xc
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08064A00: .4byte 0x082DB1C0
_08064A04: .4byte 0x06013000
_08064A08: .4byte 0x082DB2B0
_08064A0C: .4byte gBmSt

	thumb_func_start sub_8064A10
sub_8064A10: @ 0x08064A10
	push {r4, r5, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, _08064A7C @ =0x082DB418
	ldr r1, _08064A80 @ =0x06013000
	bl Decompress
	ldr r0, _08064A84 @ =0x082DB55C
	ldr r2, [r7]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r2, _08064A88 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	adds r1, #8
	ldr r3, [r7]
	movs r2, #0xf
	ldrsb r2, [r3, r2]
	ldr r3, _08064A88 @ =gBmSt
	movs r5, #0xe
	ldrsh r4, [r3, r5]
	asrs r3, r4, #4
	adds r5, r3, #0
	lsls r4, r5, #0x10
	asrs r3, r4, #0x10
	subs r2, r2, r3
	lsls r3, r2, #1
	adds r2, r3, #0
	lsls r3, r2, #3
	adds r2, r3, #0
	adds r2, #0x10
	movs r3, #0xc0
	lsls r3, r3, #1
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl StartAnimProc
	add sp, #0xc
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08064A7C: .4byte 0x082DB418
_08064A80: .4byte 0x06013000
_08064A84: .4byte 0x082DB55C
_08064A88: .4byte gBmSt

	thumb_func_start sub_8064A8C
sub_8064A8C: @ 0x08064A8C
	push {r4, r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, _08064B18 @ =0x0866510C
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #8]
	ldr r2, [r7]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r2, _08064B1C @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	adds r1, #8
	str r1, [r0, #0x30]
	ldr r0, [r7, #8]
	ldr r2, [r7]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r2, _08064B1C @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	subs r1, #8
	str r1, [r0, #0x34]
	ldr r0, [r7, #8]
	ldr r2, [r7, #4]
	adds r1, r2, #0
	movs r2, #1
	eors r1, r2
	adds r2, r0, #0
	adds r0, #0x48
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08064B18: .4byte 0x0866510C
_08064B1C: .4byte gBmSt

	thumb_func_start sub_8064B20
sub_8064B20: @ 0x08064B20
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, _08064B6C @ =0x082DCAE4
	ldr r1, _08064B70 @ =0x06013000
	bl Decompress
	ldr r0, _08064B74 @ =0x082DCD70
	movs r1, #0x98
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08064B78 @ =0x082A9228
	ldr r2, [r7]
	ldr r1, [r2, #0x30]
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	adds r2, r3, #0
	adds r2, #0x10
	movs r3, #0xc6
	lsls r3, r3, #6
	ldr r5, [r7]
	adds r4, r5, #0
	adds r5, #0x48
	movs r6, #0
	ldrsh r4, [r5, r6]
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl StartAnimProc
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08064B6C: .4byte 0x082DCAE4
_08064B70: .4byte 0x06013000
_08064B74: .4byte 0x082DCD70
_08064B78: .4byte 0x082A9228

	thumb_func_start sub_8064B7C
sub_8064B7C: @ 0x08064B7C
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _08064BE4 @ =0x0866512C
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r2, _08064BE8 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x30]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r2, _08064BE8 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x34]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08064BE4: .4byte 0x0866512C
_08064BE8: .4byte gBmSt

	thumb_func_start sub_8064BEC
sub_8064BEC: @ 0x08064BEC
	push {r4, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0xb7
	bl PlaySeSpacial
	ldr r0, _08064C3C @ =0x082DCEF4
	ldr r1, _08064C40 @ =0x06013800
	bl Decompress
	ldr r0, _08064C44 @ =0x082DD248
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08064C48 @ =0x082A9190
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #0
	subs r1, #8
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	adds r2, r3, #0
	adds r2, #8
	ldr r3, _08064C4C @ =0x000041C0
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl StartAnimProc
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08064C3C: .4byte 0x082DCEF4
_08064C40: .4byte 0x06013800
_08064C44: .4byte 0x082DD248
_08064C48: .4byte 0x082A9190
_08064C4C: .4byte 0x000041C0

	thumb_func_start sub_8064C50
sub_8064C50: @ 0x08064C50
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _08064CB8 @ =0x0866514C
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r2, _08064CBC @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x30]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r2, _08064CBC @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x34]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08064CB8: .4byte 0x0866514C
_08064CBC: .4byte gBmSt

	thumb_func_start sub_8064CC0
sub_8064CC0: @ 0x08064CC0
	push {r4, r7, lr}
	sub sp, #8
	add r7, sp, #4
	str r0, [r7]
	bl sub_8067324
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r4, _08064DDC @ =0x082DE994
	movs r0, #2
	bl GetBgChrOffset
	ldr r2, _08064DE0 @ =0x06002800
	adds r1, r0, r2
	adds r0, r4, #0
	bl Decompress
	ldr r0, _08064DE4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08064DE4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08064DE4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08064DE4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08064DE8 @ =gDispIo+0x3C
	ldr r1, _08064DE8 @ =gDispIo+0x3C
	ldrh r2, [r1]
	ldr r3, _08064DEC @ =0x0000FFE0
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08064DE8 @ =gDispIo+0x3C
	ldr r1, _08064DE8 @ =gDispIo+0x3C
	ldrh r2, [r1]
	movs r3, #4
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08064DE4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08064DE8 @ =gDispIo+0x3C
	ldr r1, _08064DE8 @ =gDispIo+0x3C
	ldrh r2, [r1]
	ldr r3, _08064DF0 @ =0x0000E0FF
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08064DE8 @ =gDispIo+0x3C
	ldr r1, _08064DE8 @ =gDispIo+0x3C
	ldrh r2, [r1]
	movs r3, #0xc0
	lsls r3, r3, #5
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08064DE4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3d
	ldrb r1, [r0]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x40
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x42
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08064DF4 @ =0x082DEFBC
	ldr r1, [r7]
	str r1, [sp]
	movs r1, #0x80
	movs r2, #0x20
	movs r3, #2
	bl sub_8014D9C
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08064DDC: .4byte 0x082DE994
_08064DE0: .4byte 0x06002800
_08064DE4: .4byte gDispIo
_08064DE8: .4byte gDispIo+0x3C
_08064DEC: .4byte 0x0000FFE0
_08064DF0: .4byte 0x0000E0FF
_08064DF4: .4byte 0x082DEFBC

	thumb_func_start sub_8064DF8
sub_8064DF8: @ 0x08064DF8
	push {r4, r7, lr}
	sub sp, #0x14
	add r7, sp, #8
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x42
	ldrh r0, [r1]
	cmp r0, #2
	bls _08064E80
	bl sub_8014D50
	ldr r0, _08064E74 @ =0x082DEFBC
	ldr r1, [r7]
	str r1, [sp]
	movs r1, #0x80
	movs r2, #0x20
	movs r3, #4
	bl sub_8014DB4
	ldr r4, _08064E78 @ =0x082DEFFC
	movs r0, #2
	bl GetBgChrOffset
	ldr r2, _08064E7C @ =0x06002800
	adds r1, r0, r2
	adds r0, r4, #0
	bl Decompress
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	adds r0, r1, #0
	cmp r0, #0
	bge _08064E3E
	adds r0, #7
_08064E3E:
	asrs r1, r0, #3
	subs r0, r1, #4
	ldr r1, [r7]
	ldr r2, [r1, #0x34]
	adds r1, r2, #0
	cmp r1, #0
	bge _08064E4E
	adds r1, #7
_08064E4E:
	asrs r2, r1, #3
	subs r1, r2, #4
	movs r2, #0
	str r2, [sp]
	ldr r2, [r7]
	str r2, [sp, #4]
	movs r2, #8
	movs r3, #0x3c
	bl sub_80650A4
	ldr r0, [r7]
	bl Proc_Break
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x8c
	bl PlaySeSpacial
	b _08064F1A
	.align 2, 0
_08064E74: .4byte 0x082DEFBC
_08064E78: .4byte 0x082DEFFC
_08064E7C: .4byte 0x06002800
_08064E80:
	ldr r0, _08064F24 @ =0x08665184
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x42
	ldrh r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #2
	adds r0, r0, r1
	movs r2, #0
	ldrsh r1, [r0, r2]
	str r1, [r7, #4]
	ldr r0, _08064F24 @ =0x08665184
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x42
	ldrh r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #1
	adds r0, r0, r2
	movs r2, #0
	ldrsh r1, [r0, r2]
	str r1, [r7, #8]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	adds r0, r1, #0
	cmp r0, #0
	bge _08064EBE
	adds r0, #7
_08064EBE:
	asrs r0, r0, #3
	ldr r2, [r7, #4]
	adds r1, r0, r2
	subs r0, r1, #3
	ldr r1, [r7]
	ldr r2, [r1, #0x34]
	adds r1, r2, #0
	cmp r1, #0
	bge _08064ED2
	adds r1, #7
_08064ED2:
	asrs r1, r1, #3
	ldr r3, [r7, #8]
	adds r2, r1, r3
	subs r1, r2, #3
	movs r2, #8
	str r2, [sp]
	ldr r2, [r7]
	str r2, [sp, #4]
	movs r2, #6
	movs r3, #0xa
	bl sub_80650A4
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x89
	bl PlaySeSpacial
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x42
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x42
	ldrh r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x42
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
_08064F1A:
	add sp, #0x14
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08064F24: .4byte 0x08665184

	thumb_func_start sub_8064F28
sub_8064F28: @ 0x08064F28
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _08064F48 @ =gBg2Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08064F48: .4byte gBg2Tm

	thumb_func_start sub_8064F4C
sub_8064F4C: @ 0x08064F4C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_8014D50
	ldr r1, _08064FC0 @ =gBg2Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	ldr r0, _08064FC4 @ =gDispIo+0x3C
	ldr r1, _08064FC4 @ =gDispIo+0x3C
	ldrh r2, [r1]
	ldr r3, _08064FC8 @ =0x0000FFE0
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08064FC4 @ =gDispIo+0x3C
	ldr r1, _08064FC4 @ =gDispIo+0x3C
	ldrh r2, [r1]
	movs r3, #0x1f
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08064FCC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	bl sub_8064FD0
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08064FC0: .4byte gBg2Tm
_08064FC4: .4byte gDispIo+0x3C
_08064FC8: .4byte 0x0000FFE0
_08064FCC: .4byte gDispIo

	thumb_func_start sub_8064FD0
sub_8064FD0: @ 0x08064FD0
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _080650A0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x80
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080650A0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080650A0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080650A0 @ =gDispIo
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x64
	ldrh r2, [r1]
	subs r3, r2, #1
	adds r4, r3, #0
	strh r4, [r1]
	lsls r2, r2, #0x10
	asrs r1, r2, #0x10
	asrs r2, r1, #2
	adds r1, r2, #0
	adds r2, r0, #0
	adds r0, #0x46
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0
	bne _08065096
	ldr r0, _080650A0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080650A0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080650A0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080650A0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	bl Proc_Break
_08065096:
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080650A0: .4byte gDispIo

	thumb_func_start sub_80650A4
sub_80650A4: @ 0x080650A4
	push {r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, _080650F4 @ =0x086651AC
	ldr r1, [r7, #0x20]
	bl SpawnProcLocking
	str r0, [r7, #0x10]
	ldr r0, [r7, #0x10]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #0x10]
	ldr r1, [r7, #4]
	str r1, [r0, #0x30]
	ldr r0, [r7, #0x10]
	ldr r1, [r7, #8]
	str r1, [r0, #0x54]
	ldr r0, [r7, #0x10]
	ldr r1, [r7, #0x1c]
	str r1, [r0, #0x58]
	ldr r1, [r7, #0x10]
	ldr r2, [r7, #0xc]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x44
	ldrh r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strh r2, [r1]
	add sp, #0x14
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080650F4: .4byte 0x086651AC

	thumb_func_start sub_80650F8
sub_80650F8: @ 0x080650F8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _08065118 @ =gBg2Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08065118: .4byte gBg2Tm

	thumb_func_start sub_806511C
sub_806511C: @ 0x0806511C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _0806513C @ =gBg2Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806513C: .4byte gBg2Tm

	thumb_func_start sub_8065140
sub_8065140: @ 0x08065140
	push {r4, r5, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, _080651D4 @ =gBg2Tm
	ldr r2, [r7]
	ldr r1, [r2, #0x2c]
	ldr r3, [r7]
	ldr r2, [r3, #0x30]
	ldr r3, _080651D8 @ =0x00004140
	ldr r4, [r7]
	ldr r5, [r4, #0x54]
	str r5, [sp]
	ldr r4, [r7]
	ldr r5, [r4, #0x54]
	str r5, [sp, #4]
	bl sub_8014E30
	movs r0, #4
	bl EnableBgSync
	ldr r0, _080651DC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080651DC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080651DC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080651DC @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #0xc
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080651D4: .4byte gBg2Tm
_080651D8: .4byte 0x00004140
_080651DC: .4byte gDispIo

	thumb_func_start sub_80651E0
sub_80651E0: @ 0x080651E0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x64
	ldrh r3, [r2]
	adds r1, r3, #2
	adds r2, r0, #0
	adds r0, #0x64
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, _08065294 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _08065294 @ =gDispIo
	ldr r2, [r7]
	adds r0, r2, #0
	adds r2, #0x64
	ldrh r3, [r2]
	adds r0, r3, #0
	adds r2, r1, #0
	adds r1, #0x44
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, _08065294 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08065294 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #7
	ble _0806528A
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	bl Proc_Break
_0806528A:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08065294: .4byte gDispIo

	thumb_func_start sub_8065298
sub_8065298: @ 0x08065298
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r2, r1, #0
	adds r2, #0x44
	ldr r1, [r7]
	ldr r2, [r7]
	adds r0, r2, #0
	adds r2, #0x44
	ldrh r3, [r2]
	subs r0, r3, #1
	adds r2, r1, #0
	adds r1, #0x44
	ldrh r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r0, #0
	orrs r3, r2
	adds r2, r3, #0
	strh r2, [r1]
	lsls r1, r0, #0x10
	asrs r0, r1, #0x10
	movs r1, #1
	cmn r0, r1
	bne _080652D8
	ldr r0, [r7]
	bl Proc_Break
_080652D8:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80652E0
sub_80652E0: @ 0x080652E0
	push {r7, lr}
	sub sp, #0xc
	add r7, sp, #4
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x58]
	cmp r1, #0
	bne _080652F8
	ldr r0, [r7]
	bl Proc_Break
	b _080653AC
_080652F8:
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	adds r2, r1, #1
	adds r3, r2, #0
	strh r3, [r0]
	lsls r0, r1, #0x10
	asrs r3, r0, #0x10
	ldr r0, [r7]
	ldr r1, [r0, #0x58]
	str r1, [sp]
	movs r0, #0
	movs r1, #8
	movs r2, #0
	bl Interpolate
	str r0, [r7, #4]
	ldr r0, _080653B4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _080653B4 @ =gDispIo
	ldr r2, [r7, #4]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x44
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, _080653B4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080653B4 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r2, #0
	ldrsh r0, [r1, r2]
	ldr r1, [r7]
	ldr r2, [r1, #0x58]
	cmp r0, r2
	blt _080653AC
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r1, _080653B8 @ =gBg2Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	ldr r0, [r7]
	bl Proc_Break
_080653AC:
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080653B4: .4byte gDispIo
_080653B8: .4byte gBg2Tm

	thumb_func_start sub_80653BC
sub_80653BC: @ 0x080653BC
	push {r4, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r1, _08065434 @ =0x086651EC
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #0xc]
	ldr r2, [r7]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r2, _08065438 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x30]
	ldr r0, [r7, #0xc]
	ldr r2, [r7]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r2, _08065438 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x34]
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #4]
	str r1, [r0, #0x50]
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #8]
	str r1, [r0, #0x54]
	add sp, #0x10
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08065434: .4byte 0x086651EC
_08065438: .4byte gBmSt

	thumb_func_start sub_806543C
sub_806543C: @ 0x0806543C
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0xb6
	bl PlaySeSpacial
	ldr r0, _08065538 @ =gDispIo
	ldrb r1, [r0, #0xc]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0xc]
	ldr r0, _08065538 @ =gDispIo
	ldrb r1, [r0, #0x10]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x10]
	ldr r0, _08065538 @ =gDispIo
	ldrb r1, [r0, #0x14]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x14]
	ldr r0, _08065538 @ =gDispIo
	ldrb r1, [r0, #0x18]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x18]
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, [r7]
	ldr r4, [r0, #0x50]
	movs r0, #2
	bl GetBgChrOffset
	ldr r2, _0806553C @ =0x06002800
	adds r1, r0, r2
	adds r0, r4, #0
	bl Decompress
	ldr r0, [r7]
	ldr r1, [r0, #0x54]
	adds r0, r1, #0
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	bl sub_8067324
	ldr r0, _08065538 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08065538 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08065538 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08065538 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x40
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08065538: .4byte gDispIo
_0806553C: .4byte 0x06002800

	thumb_func_start sub_8065540
sub_8065540: @ 0x08065540
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x14
	add r7, sp, #0x10
	str r0, [r7]
	ldr r0, _080655F8 @ =gBg2Tm
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #0
	cmp r1, #0
	bge _0806555A
	adds r1, #7
_0806555A:
	asrs r2, r1, #3
	subs r1, r2, #3
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	adds r2, r3, #0
	cmp r2, #0
	bge _0806556A
	adds r2, #7
_0806556A:
	asrs r3, r2, #3
	subs r2, r3, #3
	ldr r3, _080655FC @ =0x00004140
	movs r4, #6
	str r4, [sp]
	movs r4, #6
	str r4, [sp, #4]
	ldr r4, _08065600 @ =0x082DE354
	str r4, [sp, #8]
	ldr r4, _08065604 @ =0x0866521C
	ldr r6, [r7]
	adds r5, r6, #0
	adds r6, #0x40
	ldrh r5, [r6]
	mov r8, r5
	mov r6, r8
	lsrs r5, r6, #1
	mov r8, r5
	mov r5, r8
	lsls r6, r5, #0x10
	lsrs r5, r6, #0x10
	adds r4, r4, r5
	ldrb r5, [r4]
	str r5, [sp, #0xc]
	bl sub_8014F70
	movs r0, #4
	bl EnableBgSync
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x40
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, _08065604 @ =0x0866521C
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r3, [r2]
	lsrs r1, r3, #1
	adds r3, r1, #0
	lsls r2, r3, #0x10
	lsrs r1, r2, #0x10
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0xff
	bne _080655EA
	ldr r0, [r7]
	bl Proc_Break
_080655EA:
	add sp, #0x14
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080655F8: .4byte gBg2Tm
_080655FC: .4byte 0x00004140
_08065600: .4byte 0x082DE354
_08065604: .4byte 0x0866521C

	thumb_func_start sub_8065608
sub_8065608: @ 0x08065608
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _0806566C @ =0x08665234
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r2, _08065670 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	adds r1, #8
	str r1, [r0, #0x30]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r2, _08065670 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	adds r1, #8
	str r1, [r0, #0x34]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806566C: .4byte 0x08665234
_08065670: .4byte gBmSt

	thumb_func_start sub_8065674
sub_8065674: @ 0x08065674
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08065690 @ =0x0000010F
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #0
	bl PlaySeSpacial
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08065690: .4byte 0x0000010F

	thumb_func_start sub_8065694
sub_8065694: @ 0x08065694
	push {r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	adds r0, r3, #0
	adds r1, r7, #0
	adds r1, #0xc
	strh r0, [r1]
	ldr r1, _080656EC @ =0x08665254
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #0x10]
	ldr r0, [r7, #0x10]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #0x10]
	ldr r1, [r7, #4]
	str r1, [r0, #0x50]
	ldr r0, [r7, #0x10]
	ldr r1, [r7, #8]
	str r1, [r0, #0x54]
	ldr r0, [r7, #0x10]
	adds r1, r7, #0
	adds r1, #0xc
	adds r2, r0, #0
	adds r0, #0x58
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrh r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	add sp, #0x14
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080656EC: .4byte 0x08665254

	thumb_func_start sub_80656F0
sub_80656F0: @ 0x080656F0
	push {r4, r5, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, _0806581C @ =gDispIo
	ldrb r1, [r0, #0xc]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0xc]
	ldr r0, _0806581C @ =gDispIo
	ldrb r1, [r0, #0x10]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x10]
	ldr r0, _0806581C @ =gDispIo
	ldrb r1, [r0, #0x14]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x14]
	ldr r0, _0806581C @ =gDispIo
	ldrb r1, [r0, #0x18]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x18]
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, [r7]
	ldr r4, [r0, #0x50]
	movs r0, #2
	bl GetBgChrOffset
	ldr r2, _08065820 @ =0x06002800
	adds r1, r0, r2
	adds r0, r4, #0
	bl Decompress
	ldr r0, _08065824 @ =gBg2Tm
	ldr r1, [r7]
	ldr r2, [r1, #0x2c]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r2, _08065828 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	subs r1, r2, #2
	ldr r2, [r7]
	ldr r3, [r2, #0x2c]
	movs r2, #0xf
	ldrsb r2, [r3, r2]
	ldr r3, _08065828 @ =gBmSt
	movs r5, #0xe
	ldrsh r4, [r3, r5]
	asrs r3, r4, #4
	adds r5, r3, #0
	lsls r4, r5, #0x10
	asrs r3, r4, #0x10
	subs r2, r2, r3
	lsls r3, r2, #1
	subs r2, r3, #2
	ldr r3, _0806582C @ =0x00004140
	movs r4, #6
	str r4, [sp]
	movs r4, #6
	str r4, [sp, #4]
	bl sub_8014E30
	movs r0, #4
	bl EnableBgSync
	ldr r1, [r7]
	ldr r0, [r1, #0x54]
	ldr r1, [r7]
	str r1, [sp]
	movs r1, #0x80
	movs r2, #0x20
	movs r3, #4
	bl sub_8014DB4
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x40
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x42
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x58
	ldrh r0, [r1]
	ldr r1, [r7]
	ldr r2, [r1, #0x2c]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r2, _08065828 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	bl PlaySeSpacial
	add sp, #0xc
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806581C: .4byte gDispIo
_08065820: .4byte 0x06002800
_08065824: .4byte gBg2Tm
_08065828: .4byte gBmSt
_0806582C: .4byte 0x00004140

	thumb_func_start sub_8065830
sub_8065830: @ 0x08065830
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x40
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldrh r0, [r1]
	cmp r0, #0x10
	bne _08065870
	ldr r0, [r7]
	bl Proc_Break
_08065870:
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r1, [r2]
	movs r2, #0x16
	subs r1, r2, r1
	adds r2, r0, #0
	adds r0, #0x42
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x42
	ldrh r0, [r1]
	cmp r0, #0x10
	bls _080658B6
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x42
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
_080658B6:
	ldr r0, _08065984 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _08065984 @ =gDispIo
	ldr r2, [r7]
	adds r0, r2, #0
	adds r2, #0x40
	ldrh r3, [r2]
	adds r0, r3, #0
	adds r2, r1, #0
	adds r1, #0x44
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r1, _08065984 @ =gDispIo
	ldr r2, [r7]
	adds r0, r2, #0
	adds r2, #0x42
	ldrh r3, [r2]
	adds r0, r3, #0
	adds r2, r1, #0
	adds r1, #0x45
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, _08065984 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08065988 @ =gDispIo+0x3C
	ldr r1, _08065988 @ =gDispIo+0x3C
	ldrh r2, [r1]
	ldr r3, _0806598C @ =0x0000FFE0
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08065988 @ =gDispIo+0x3C
	ldr r1, _08065988 @ =gDispIo+0x3C
	ldrh r2, [r1]
	movs r3, #4
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08065984 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08065988 @ =gDispIo+0x3C
	ldr r1, _08065988 @ =gDispIo+0x3C
	ldrh r2, [r1]
	ldr r3, _08065990 @ =0x0000E0FF
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08065988 @ =gDispIo+0x3C
	ldr r1, _08065988 @ =gDispIo+0x3C
	ldrh r2, [r1]
	movs r3, #0xc0
	lsls r3, r3, #5
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08065984 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3d
	ldrb r1, [r0]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08065984: .4byte gDispIo
_08065988: .4byte gDispIo+0x3C
_0806598C: .4byte 0x0000FFE0
_08065990: .4byte 0x0000E0FF

	thumb_func_start sub_8065994
sub_8065994: @ 0x08065994
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r3, [r2]
	subs r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x40
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldrh r0, [r1]
	cmp r0, #0
	bne _080659D4
	ldr r0, [r7]
	bl Proc_Break
_080659D4:
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r1, [r2]
	movs r2, #0x16
	subs r1, r2, r1
	adds r2, r0, #0
	adds r0, #0x42
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x42
	ldrh r0, [r1]
	cmp r0, #0x10
	bls _08065A1A
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x42
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
_08065A1A:
	ldr r0, _08065AE8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _08065AE8 @ =gDispIo
	ldr r2, [r7]
	adds r0, r2, #0
	adds r2, #0x40
	ldrh r3, [r2]
	adds r0, r3, #0
	adds r2, r1, #0
	adds r1, #0x44
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r1, _08065AE8 @ =gDispIo
	ldr r2, [r7]
	adds r0, r2, #0
	adds r2, #0x42
	ldrh r3, [r2]
	adds r0, r3, #0
	adds r2, r1, #0
	adds r1, #0x45
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, _08065AE8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08065AEC @ =gDispIo+0x3C
	ldr r1, _08065AEC @ =gDispIo+0x3C
	ldrh r2, [r1]
	ldr r3, _08065AF0 @ =0x0000FFE0
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08065AEC @ =gDispIo+0x3C
	ldr r1, _08065AEC @ =gDispIo+0x3C
	ldrh r2, [r1]
	movs r3, #4
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08065AE8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08065AEC @ =gDispIo+0x3C
	ldr r1, _08065AEC @ =gDispIo+0x3C
	ldrh r2, [r1]
	ldr r3, _08065AF4 @ =0x0000E0FF
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08065AEC @ =gDispIo+0x3C
	ldr r1, _08065AEC @ =gDispIo+0x3C
	ldrh r2, [r1]
	movs r3, #0xc0
	lsls r3, r3, #5
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08065AE8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3d
	ldrb r1, [r0]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08065AE8: .4byte gDispIo
_08065AEC: .4byte gDispIo+0x3C
_08065AF0: .4byte 0x0000FFE0
_08065AF4: .4byte 0x0000E0FF

	thumb_func_start sub_8065AF8
sub_8065AF8: @ 0x08065AF8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_8014D50
	ldr r1, _08065B88 @ =gBg2Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	ldr r0, _08065B8C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08065B8C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08065B8C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08065B8C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08065B8C @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08065B8C @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08065B8C @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08065B88: .4byte gBg2Tm
_08065B8C: .4byte gDispIo

	thumb_func_start sub_8065B90
sub_8065B90: @ 0x08065B90
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	bl SetOnHBlankA
	bl sub_8014D50
	ldr r1, _08065C28 @ =gBg2Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	ldr r0, _08065C2C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08065C2C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08065C2C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08065C2C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08065C2C @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08065C2C @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08065C2C @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08065C28: .4byte gBg2Tm
_08065C2C: .4byte gDispIo

	thumb_func_start sub_8065C30
sub_8065C30: @ 0x08065C30
	push {r4, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r1, _08065C94 @ =0x0866528C
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0xc]
	ldr r2, [r1, #0x2c]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r2, _08065C98 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	str r2, [r0, #0x30]
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0xc]
	ldr r2, [r1, #0x2c]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r2, _08065C98 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	str r2, [r0, #0x34]
	add sp, #0x10
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08065C94: .4byte 0x0866528C
_08065C98: .4byte gBmSt

	thumb_func_start sub_8065C9C
sub_8065C9C: @ 0x08065C9C
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r4, _08065CE8 @ =0x082DD268
	movs r0, #2
	bl GetBgChrOffset
	ldr r2, _08065CEC @ =0x06002800
	adds r1, r0, r2
	adds r0, r4, #0
	bl Decompress
	ldr r1, _08065CF0 @ =0x082DD4C8
	adds r0, r1, #0
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	bl sub_80686D8
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x40
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08065CE8: .4byte 0x082DD268
_08065CEC: .4byte 0x06002800
_08065CF0: .4byte 0x082DD4C8

	thumb_func_start sub_8065CF4
sub_8065CF4: @ 0x08065CF4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x14
	add r7, sp, #0x10
	str r0, [r7]
	ldr r0, _08065DF4 @ =gBg2Tm
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	subs r1, r2, #1
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	subs r2, r3, #3
	ldr r3, _08065DF8 @ =0x00004140
	movs r4, #4
	str r4, [sp]
	movs r4, #6
	str r4, [sp, #4]
	ldr r4, _08065DFC @ =0x082DD4E8
	str r4, [sp, #8]
	ldr r4, _08065E00 @ =0x086652BC
	ldr r6, [r7]
	adds r5, r6, #0
	adds r6, #0x40
	ldrh r5, [r6]
	mov r8, r5
	mov r6, r8
	lsrs r5, r6, #1
	mov r8, r5
	mov r5, r8
	lsls r6, r5, #0x10
	lsrs r5, r6, #0x10
	adds r4, r4, r5
	ldrb r5, [r4]
	str r5, [sp, #0xc]
	bl sub_8014F70
	movs r0, #4
	bl EnableBgSync
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x40
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, _08065E00 @ =0x086652BC
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r3, [r2]
	lsrs r1, r3, #1
	adds r3, r1, #0
	lsls r2, r3, #0x10
	lsrs r1, r2, #0x10
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0xff
	bne _08065D8A
	ldr r0, [r7]
	bl Proc_Break
_08065D8A:
	bl sub_8067324
	ldr r0, _08065E04 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08065E04 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xc
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08065E04 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xc
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08065E04 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #0x14
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08065DF4: .4byte gBg2Tm
_08065DF8: .4byte 0x00004140
_08065DFC: .4byte 0x082DD4E8
_08065E00: .4byte 0x086652BC
_08065E04: .4byte gDispIo

	thumb_func_start sub_8065E08
sub_8065E08: @ 0x08065E08
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _08065E70 @ =0x086652D4
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #4]
	ldr r1, [r7, #4]
	ldr r2, [r1, #0x2c]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r2, _08065E74 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	str r2, [r0, #0x30]
	ldr r0, [r7, #4]
	ldr r1, [r7, #4]
	ldr r2, [r1, #0x2c]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r2, _08065E74 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	str r2, [r0, #0x34]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08065E70: .4byte 0x086652D4
_08065E74: .4byte gBmSt

	thumb_func_start sub_8065E78
sub_8065E78: @ 0x08065E78
	push {r4, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, _08065F70 @ =gPlaySt
	ldrb r1, [r0, #0x1d]
	lsls r2, r1, #0x1e
	lsrs r0, r2, #0x1f
	cmp r0, #0
	bne _08065E92
	movs r0, #0xb3
	bl m4aSongNumStart
_08065E92:
	ldr r0, _08065F74 @ =0x082DF3D8
	ldr r1, _08065F78 @ =0x06013800
	bl Decompress
	ldr r0, _08065F7C @ =0x082DF690
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #4
	bl SetWhitePal
	movs r0, #2
	bl GetBgChrOffset
	ldr r2, _08065F80 @ =0x06002800
	adds r1, r0, r2
	ldr r2, _08065F84 @ =0x0000FFFF
	adds r0, r1, #0
	movs r1, #0x10
	bl sub_8015208
	ldr r0, _08065F88 @ =gBg2Tm
	movs r1, #0x80
	lsls r1, r1, #3
	ldr r2, _08065F8C @ =0x00004140
	bl sub_8015208
	movs r0, #4
	bl EnableBgSync
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x40
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x42
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08065F90 @ =0x082A8448
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #4
	ldr r3, [r7]
	ldr r2, [r3, #0x34]
	ldr r3, _08065F94 @ =0x000041C0
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl StartAnimProc
	bl sub_8069C34
	bl sub_8069C74
	bl sub_8067324
	ldr r0, _08065F98 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08065F98 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08065F98 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08065F98 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08065F70: .4byte gPlaySt
_08065F74: .4byte 0x082DF3D8
_08065F78: .4byte 0x06013800
_08065F7C: .4byte 0x082DF690
_08065F80: .4byte 0x06002800
_08065F84: .4byte 0x0000FFFF
_08065F88: .4byte gBg2Tm
_08065F8C: .4byte 0x00004140
_08065F90: .4byte 0x082A8448
_08065F94: .4byte 0x000041C0
_08065F98: .4byte gDispIo

	thumb_func_start sub_8065F9C
sub_8065F9C: @ 0x08065F9C
	push {r7, lr}
	sub sp, #0x10
	add r7, sp, #4
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldrh r3, [r1]
	movs r0, #0x50
	str r0, [sp]
	movs r0, #5
	movs r1, #1
	movs r2, #0xa0
	bl Interpolate
	str r0, [r7, #4]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	adds r0, r1, #0
	adds r0, #8
	ldr r1, [r7]
	ldr r2, [r1, #0x34]
	adds r1, r2, #0
	adds r1, #8
	ldr r2, [r7, #4]
	bl sub_8069DA4
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x40
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldrh r0, [r1]
	adds r1, r0, #0
	lsls r2, r1, #4
	adds r0, r2, #0
	movs r1, #0x28
	bl __divsi3
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	cmp r0, #0xf
	ble _08066018
	movs r0, #0x10
	str r0, [r7, #8]
_08066018:
	ldr r0, _08066090 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _08066090 @ =gDispIo
	ldr r2, [r7, #8]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x44
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, _08066090 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08066090 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldrh r0, [r1]
	cmp r0, #0x27
	bls _08066086
	ldr r0, [r7]
	bl Proc_Break
	bl EndEachAnimProc
_08066086:
	add sp, #0x10
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08066090: .4byte gDispIo

	thumb_func_start sub_8066094
sub_8066094: @ 0x08066094
	push {r7, lr}
	sub sp, #0x10
	add r7, sp, #4
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldrh r3, [r1]
	movs r0, #0x50
	str r0, [sp]
	movs r0, #5
	movs r1, #1
	movs r2, #0xa0
	bl Interpolate
	str r0, [r7, #4]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	adds r0, r1, #0
	adds r0, #8
	ldr r1, [r7]
	ldr r2, [r1, #0x34]
	adds r1, r2, #0
	adds r1, #8
	ldr r2, [r7, #4]
	bl sub_8069DA4
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x40
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldrh r0, [r1]
	adds r1, r0, #0
	subs r1, #0x28
	adds r0, r1, #0
	lsls r1, r0, #4
	adds r0, r1, #0
	movs r1, #0x1e
	bl __divsi3
	movs r1, #0x10
	subs r0, r1, r0
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	cmp r0, #0
	bgt _08066118
	movs r0, #0
	str r0, [r7, #8]
_08066118:
	ldr r0, _0806618C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _0806618C @ =gDispIo
	ldr r2, [r7, #8]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x44
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, _0806618C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806618C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x40
	ldrh r0, [r1]
	cmp r0, #0x45
	bls _08066182
	ldr r0, [r7]
	bl Proc_Break
_08066182:
	add sp, #0x10
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806618C: .4byte gDispIo

	thumb_func_start sub_8066190
sub_8066190: @ 0x08066190
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_8069DD8
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80661A4
sub_80661A4: @ 0x080661A4
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _0806620C @ =0x0866531C
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r2, _08066210 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x30]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r2, _08066210 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x34]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806620C: .4byte 0x0866531C
_08066210: .4byte gBmSt

	thumb_func_start sub_8066214
sub_8066214: @ 0x08066214
	push {r4, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x87
	bl PlaySeSpacial
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl sub_8067324
	ldr r0, _08066280 @ =0x082E0E14
	ldr r1, _08066284 @ =0x06013800
	bl Decompress
	ldr r0, _08066288 @ =0x082E10EC
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0806628C @ =0x082E110C
	ldr r2, [r7]
	ldr r1, [r2, #0x30]
	ldr r3, [r7]
	ldr r2, [r3, #0x34]
	ldr r3, _08066290 @ =0x000041C0
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl StartAnimProc
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x48
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08066280: .4byte 0x082E0E14
_08066284: .4byte 0x06013800
_08066288: .4byte 0x082E10EC
_0806628C: .4byte 0x082E110C
_08066290: .4byte 0x000041C0

	thumb_func_start sub_8066294
sub_8066294: @ 0x08066294
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _080662F8 @ =0x08665344
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r2, _080662FC @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	adds r1, #8
	str r1, [r0, #0x30]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r2, _080662FC @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	adds r1, #8
	str r1, [r0, #0x34]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080662F8: .4byte 0x08665344
_080662FC: .4byte gBmSt

	thumb_func_start sub_8066300
sub_8066300: @ 0x08066300
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x86
	bl PlaySeSpacial
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806631C
sub_806631C: @ 0x0806631C
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl sub_8067324
	ldr r0, _080663D0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080663D0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080663D0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080663D0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r4, _080663D4 @ =0x082DFAD4
	movs r0, #2
	bl GetBgChrOffset
	ldr r2, _080663D8 @ =0x06002800
	adds r1, r0, r2
	adds r0, r4, #0
	bl Decompress
	ldr r1, _080663DC @ =0x081B4274
	adds r0, r1, #0
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x48
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x4a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080663D0: .4byte gDispIo
_080663D4: .4byte 0x082DFAD4
_080663D8: .4byte 0x06002800
_080663DC: .4byte 0x081B4274

	thumb_func_start sub_80663E0
sub_80663E0: @ 0x080663E0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0x18
	add r7, sp, #0x10
	str r0, [r7]
	ldr r0, _08066474 @ =gBg2Tm
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #0
	cmp r1, #0
	bge _080663FC
	adds r1, #7
_080663FC:
	asrs r2, r1, #3
	subs r1, r2, #2
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	adds r2, r3, #0
	cmp r2, #0
	bge _0806640C
	adds r2, #7
_0806640C:
	asrs r3, r2, #3
	adds r2, r3, #0
	subs r2, #9
	ldr r3, _08066478 @ =0x00004140
	movs r4, #4
	str r4, [sp]
	movs r4, #0xb
	str r4, [sp, #4]
	ldr r4, _0806647C @ =0x082E07A8
	str r4, [sp, #8]
	ldr r4, _08066480 @ =0x08307928
	str r4, [r7, #4]
	ldr r5, [r7]
	adds r6, r5, #0
	adds r5, #0x48
	ldrh r6, [r5]
	adds r4, r6, #1
	mov r8, r4
	mov sb, r8
	mov r4, sb
	strh r4, [r5]
	lsls r6, r6, #0x10
	asrs r5, r6, #0x10
	ldr r6, [r7, #4]
	adds r4, r6, r5
	ldrb r5, [r4]
	str r5, [sp, #0xc]
	bl sub_801501C
	movs r0, #4
	bl EnableBgSync
	ldr r0, _08066480 @ =0x08307928
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x48
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0xff
	bne _08066466
	ldr r0, [r7]
	bl Proc_Break
_08066466:
	add sp, #0x18
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08066474: .4byte gBg2Tm
_08066478: .4byte 0x00004140
_0806647C: .4byte 0x082E07A8
_08066480: .4byte 0x08307928

	thumb_func_start sub_8066484
sub_8066484: @ 0x08066484
	push {r4, r5, r7, lr}
	sub sp, #0x18
	mov r7, sp
	str r0, [r7]
	adds r0, r7, #4
	adds r1, r7, #4
	ldr r2, _0806653C @ =0x08307944
	adds r0, r1, #0
	adds r1, r2, #0
	movs r2, #0x13
	bl memcpy
	ldr r0, _08066540 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08066540 @ =gDispIo
	adds r1, r7, #4
	ldr r2, [r7]
	adds r3, r2, #0
	adds r2, #0x4a
	ldrh r3, [r2]
	adds r4, r3, #1
	adds r5, r4, #0
	strh r5, [r2]
	lsls r3, r3, #0x10
	asrs r2, r3, #0x10
	adds r1, r1, r2
	adds r2, r0, #0
	adds r0, #0x44
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, _08066540 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08066540 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	adds r0, r7, #4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x4a
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0xff
	bne _08066534
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x4a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	bl Proc_Break
_08066534:
	add sp, #0x18
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806653C: .4byte 0x08307944
_08066540: .4byte gDispIo

	thumb_func_start sub_8066544
sub_8066544: @ 0x08066544
	push {r7, lr}
	sub sp, #8
	add r7, sp, #4
	str r0, [r7]
	ldr r0, _080665E0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x4a
	ldrh r1, [r0]
	adds r2, r1, #1
	adds r3, r2, #0
	strh r3, [r0]
	lsls r0, r1, #0x10
	asrs r3, r0, #0x10
	movs r0, #0x1e
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	ldr r1, _080665E0 @ =gDispIo
	adds r2, r1, #0
	adds r1, #0x44
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r0
	adds r0, r2, #0
	strb r0, [r1]
	ldr r0, _080665E0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080665E0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x4a
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0x1e
	ble _080665D6
	ldr r0, [r7]
	bl Proc_Break
_080665D6:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080665E0: .4byte gDispIo

	thumb_func_start sub_80665E4
sub_80665E4: @ 0x080665E4
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _08066644 @ =0x08665384
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r2, _08066648 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x30]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r2, _08066648 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x34]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08066644: .4byte 0x08665384
_08066648: .4byte gBmSt

	thumb_func_start sub_806664C
sub_806664C: @ 0x0806664C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x82
	bl PlaySeSpacial
	ldr r1, _08066674 @ =0x081B1710
	adds r0, r1, #0
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08066674: .4byte 0x081B1710

	thumb_func_start sub_8066678
sub_8066678: @ 0x08066678
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0x18
	add r7, sp, #0x10
	str r0, [r7]
	ldr r0, _0806670C @ =gBg2Tm
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #0
	cmp r1, #0
	bge _08066694
	adds r1, #7
_08066694:
	asrs r2, r1, #3
	subs r1, r2, #2
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	adds r2, r3, #0
	cmp r2, #0
	bge _080666A4
	adds r2, #7
_080666A4:
	asrs r3, r2, #3
	adds r2, r3, #0
	subs r2, #9
	ldr r3, _08066710 @ =0x00004140
	movs r4, #4
	str r4, [sp]
	movs r4, #0xb
	str r4, [sp, #4]
	ldr r4, _08066714 @ =0x082DF868
	str r4, [sp, #8]
	ldr r4, _08066718 @ =0x08307970
	str r4, [r7, #4]
	ldr r5, [r7]
	adds r6, r5, #0
	adds r5, #0x48
	ldrh r6, [r5]
	adds r4, r6, #1
	mov r8, r4
	mov sb, r8
	mov r4, sb
	strh r4, [r5]
	lsls r6, r6, #0x10
	asrs r5, r6, #0x10
	ldr r6, [r7, #4]
	adds r4, r6, r5
	ldrb r5, [r4]
	str r5, [sp, #0xc]
	bl sub_801501C
	movs r0, #4
	bl EnableBgSync
	ldr r0, _08066718 @ =0x08307970
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x48
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0xff
	bne _080666FE
	ldr r0, [r7]
	bl Proc_Break
_080666FE:
	add sp, #0x18
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806670C: .4byte gBg2Tm
_08066710: .4byte 0x00004140
_08066714: .4byte 0x082DF868
_08066718: .4byte 0x08307970

	thumb_func_start sub_806671C
sub_806671C: @ 0x0806671C
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _0806677C @ =0x086653C4
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r2, _08066780 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x30]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r2, _08066780 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x34]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806677C: .4byte 0x086653C4
_08066780: .4byte gBmSt

	thumb_func_start sub_8066784
sub_8066784: @ 0x08066784
	push {r4, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x85
	bl PlaySeSpacial
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl sub_8067324
	ldr r0, _080667DC @ =0x081B7468
	ldr r1, _080667E0 @ =0x06013800
	bl Decompress
	ldr r0, _080667E4 @ =0x081B7650
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080667E8 @ =0x082E0A14
	ldr r2, [r7]
	ldr r1, [r2, #0x30]
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	adds r2, r3, #0
	subs r2, #0x10
	ldr r3, _080667EC @ =0x000041C0
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl StartAnimProc
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080667DC: .4byte 0x081B7468
_080667E0: .4byte 0x06013800
_080667E4: .4byte 0x081B7650
_080667E8: .4byte 0x082E0A14
_080667EC: .4byte 0x000041C0

	thumb_func_start sub_80667F0
sub_80667F0: @ 0x080667F0
	push {r4, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x85
	bl PlaySeSpacial
	ldr r0, _08066828 @ =0x082E0A14
	ldr r2, [r7]
	ldr r1, [r2, #0x30]
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	adds r2, r3, #0
	subs r2, #8
	ldr r3, _0806682C @ =0x000041C0
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl StartAnimProc
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08066828: .4byte 0x082E0A14
_0806682C: .4byte 0x000041C0

	thumb_func_start sub_8066830
sub_8066830: @ 0x08066830
	push {r4, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x85
	bl PlaySeSpacial
	ldr r0, _08066864 @ =0x082E0A14
	ldr r2, [r7]
	ldr r1, [r2, #0x30]
	ldr r3, [r7]
	ldr r2, [r3, #0x34]
	ldr r3, _08066868 @ =0x000041C0
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl StartAnimProc
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08066864: .4byte 0x082E0A14
_08066868: .4byte 0x000041C0

	thumb_func_start sub_806686C
sub_806686C: @ 0x0806686C
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _080668D0 @ =0x08665404
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r2, _080668D4 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x30]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r2, _080668D4 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	adds r1, #0x12
	str r1, [r0, #0x34]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080668D0: .4byte 0x08665404
_080668D4: .4byte gBmSt

	thumb_func_start sub_80668D8
sub_80668D8: @ 0x080668D8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0xfd
	bl PlaySeSpacial
	bl sub_8069C34
	bl sub_8069C74
	ldr r1, _080669A4 @ =sub_8069E50
	adds r0, r1, #0
	bl SetOnHBlankA
	bl sub_8067324
	ldr r0, _080669A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080669A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080669A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080669A8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080669AC @ =gBg2Tm
	ldr r1, _080669B0 @ =gBuf
	ldr r2, _080669B4 @ =0x00004140
	bl TmApplyTsa_t
	movs r0, #4
	bl EnableBgSync
	movs r0, #2
	movs r1, #0
	movs r2, #1
	ldr r3, [r7]
	bl sub_8067498
	ldr r1, _080669B8 @ =0x086660FC
	adds r0, r1, #0
	ldr r1, [r7]
	bl SpawnProc
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x48
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x4a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080669A4: .4byte sub_8069E50
_080669A8: .4byte gDispIo
_080669AC: .4byte gBg2Tm
_080669B0: .4byte gBuf
_080669B4: .4byte 0x00004140
_080669B8: .4byte 0x086660FC

	thumb_func_start sub_80669BC
sub_80669BC: @ 0x080669BC
	push {r4, r5, r7, lr}
	sub sp, #8
	add r7, sp, #4
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0xb
	ble _080669FE
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x48
	ldrh r3, [r2]
	subs r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x48
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	bl Proc_Break
_080669FE:
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldr r2, [r7]
	ldr r1, [r2, #0x34]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r4, r3, #0
	adds r4, #0x48
	ldr r3, [r7]
	ldr r4, [r7]
	adds r2, r4, #0
	adds r4, #0x48
	ldrh r5, [r4]
	adds r2, r5, #1
	adds r4, r3, #0
	adds r3, #0x48
	ldrh r4, [r3]
	movs r5, #0
	ands r4, r5
	adds r5, r4, #0
	adds r4, r2, #0
	orrs r5, r4
	adds r4, r5, #0
	strh r4, [r3]
	lsls r3, r2, #0x10
	asrs r2, r3, #0x10
	ldr r3, _08066A44 @ =0x0866544C
	str r3, [sp]
	movs r3, #0xc
	bl sub_806A270
	add sp, #8
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08066A44: .4byte 0x0866544C

	thumb_func_start sub_8066A48
sub_8066A48: @ 0x08066A48
	push {r4, r5, r7, lr}
	sub sp, #8
	add r7, sp, #4
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0
	bgt _08066A8A
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x48
	ldrh r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x48
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	bl Proc_Break
_08066A8A:
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldr r2, [r7]
	ldr r1, [r2, #0x34]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r4, r3, #0
	adds r4, #0x48
	ldr r3, [r7]
	ldr r4, [r7]
	adds r2, r4, #0
	adds r4, #0x48
	ldrh r5, [r4]
	subs r2, r5, #1
	adds r4, r3, #0
	adds r3, #0x48
	ldrh r4, [r3]
	movs r5, #0
	ands r4, r5
	adds r5, r4, #0
	adds r4, r2, #0
	orrs r5, r4
	adds r4, r5, #0
	strh r4, [r3]
	lsls r3, r2, #0x10
	asrs r2, r3, #0x10
	ldr r3, _08066AD0 @ =0x0866544C
	str r3, [sp]
	movs r3, #0xc
	bl sub_806A270
	add sp, #8
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08066AD0: .4byte 0x0866544C

	thumb_func_start sub_8066AD4
sub_8066AD4: @ 0x08066AD4
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _08066B34 @ =0x08665454
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r2, _08066B38 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x30]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r2, _08066B38 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x34]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08066B34: .4byte 0x08665454
_08066B38: .4byte gBmSt

	thumb_func_start sub_8066B3C
sub_8066B3C: @ 0x08066B3C
	push {r4, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x83
	bl PlaySeSpacial
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl sub_8067324
	ldr r4, _08066C48 @ =0x082E161C
	movs r0, #2
	bl GetBgChrOffset
	ldr r2, _08066C4C @ =0x06002800
	adds r1, r0, r2
	adds r0, r4, #0
	bl Decompress
	ldr r0, _08066C50 @ =0x082E11DC
	ldr r1, _08066C54 @ =0x06013800
	bl Decompress
	ldr r1, _08066C58 @ =0x082E172C
	adds r0, r1, #0
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08066C58 @ =0x082E172C
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08066C5C @ =0x082E174C
	ldr r2, [r7]
	ldr r1, [r2, #0x30]
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	movs r4, #0x80
	lsls r4, r4, #3
	adds r2, r3, #0
	orrs r2, r4
	ldr r3, _08066C60 @ =0x000041C0
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl StartAnimProc
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x48
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08066C64 @ =gDispIo+0x3C
	ldr r1, _08066C64 @ =gDispIo+0x3C
	ldrh r2, [r1]
	ldr r3, _08066C68 @ =0x0000FFE0
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08066C64 @ =gDispIo+0x3C
	ldr r1, _08066C64 @ =gDispIo+0x3C
	ldrh r2, [r1]
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08066C6C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08066C6C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08066C6C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08066C6C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08066C6C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08066C48: .4byte 0x082E161C
_08066C4C: .4byte 0x06002800
_08066C50: .4byte 0x082E11DC
_08066C54: .4byte 0x06013800
_08066C58: .4byte 0x082E172C
_08066C5C: .4byte 0x082E174C
_08066C60: .4byte 0x000041C0
_08066C64: .4byte gDispIo+0x3C
_08066C68: .4byte 0x0000FFE0
_08066C6C: .4byte gDispIo

	thumb_func_start sub_8066C70
sub_8066C70: @ 0x08066C70
	push {r4, r7, lr}
	sub sp, #0xc
	add r7, sp, #8
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x84
	bl PlaySeSpacial
	ldr r0, _08066D48 @ =gBg2Tm
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #0
	cmp r1, #0
	bge _08066C90
	adds r1, #7
_08066C90:
	asrs r2, r1, #3
	subs r1, r2, #2
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	adds r2, r3, #0
	cmp r2, #0
	bge _08066CA0
	adds r2, #7
_08066CA0:
	asrs r3, r2, #3
	subs r2, r3, #2
	ldr r3, _08066D4C @ =0x00004140
	movs r4, #4
	str r4, [sp]
	movs r4, #4
	str r4, [sp, #4]
	bl sub_8014E30
	movs r0, #4
	bl EnableBgSync
	ldr r0, _08066D50 @ =gDispIo+0x3C
	ldr r1, _08066D50 @ =gDispIo+0x3C
	ldrh r2, [r1]
	ldr r3, _08066D54 @ =0x0000FFE0
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08066D50 @ =gDispIo+0x3C
	ldr r1, _08066D50 @ =gDispIo+0x3C
	ldrh r2, [r1]
	movs r3, #4
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08066D58 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08066D58 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08066D58 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08066D58 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08066D58 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08066D48: .4byte gBg2Tm
_08066D4C: .4byte 0x00004140
_08066D50: .4byte gDispIo+0x3C
_08066D54: .4byte 0x0000FFE0
_08066D58: .4byte gDispIo

	thumb_func_start sub_8066D5C
sub_8066D5C: @ 0x08066D5C
	push {r7, lr}
	sub sp, #8
	add r7, sp, #4
	str r0, [r7]
	ldr r0, _08066DF8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x48
	ldrh r1, [r0]
	adds r2, r1, #1
	adds r3, r2, #0
	strh r3, [r0]
	lsls r0, r1, #0x10
	asrs r3, r0, #0x10
	movs r0, #0x1e
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	ldr r1, _08066DF8 @ =gDispIo
	adds r2, r1, #0
	adds r1, #0x44
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r0
	adds r0, r2, #0
	strb r0, [r1]
	ldr r0, _08066DF8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08066DF8 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0x1d
	ble _08066DEE
	ldr r0, [r7]
	bl Proc_Break
_08066DEE:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08066DF8: .4byte gDispIo

	thumb_func_start sub_8066DFC
sub_8066DFC: @ 0x08066DFC
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r1, _08066E5C @ =0x08665494
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r2, _08066E60 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x30]
	ldr r0, [r7, #4]
	ldr r2, [r7]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	ldr r2, _08066E60 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	asrs r2, r3, #4
	adds r4, r2, #0
	lsls r3, r4, #0x10
	asrs r2, r3, #0x10
	subs r1, r1, r2
	lsls r2, r1, #1
	adds r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #3
	str r1, [r0, #0x34]
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08066E5C: .4byte 0x08665494
_08066E60: .4byte gBmSt

	thumb_func_start sub_8066E64
sub_8066E64: @ 0x08066E64
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x88
	bl PlaySeSpacial
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl sub_8067324
	ldr r0, _08066F24 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08066F24 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08066F24 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08066F24 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r4, _08066F28 @ =0x082E1884
	movs r0, #2
	bl GetBgChrOffset
	ldr r2, _08066F2C @ =0x06002800
	adds r1, r0, r2
	adds r0, r4, #0
	bl Decompress
	ldr r1, _08066F30 @ =0x081B8934
	adds r0, r1, #0
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x48
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x4a
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08066F24: .4byte gDispIo
_08066F28: .4byte 0x082E1884
_08066F2C: .4byte 0x06002800
_08066F30: .4byte 0x081B8934

	thumb_func_start sub_8066F34
sub_8066F34: @ 0x08066F34
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0x18
	add r7, sp, #0x10
	str r0, [r7]
	ldr r0, _08066FC8 @ =gBg2Tm
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #0
	cmp r1, #0
	bge _08066F50
	adds r1, #7
_08066F50:
	asrs r2, r1, #3
	subs r1, r2, #2
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	adds r2, r3, #0
	cmp r2, #0
	bge _08066F60
	adds r2, #7
_08066F60:
	asrs r3, r2, #3
	adds r2, r3, #0
	subs r2, #8
	ldr r3, _08066FCC @ =0x00004140
	movs r4, #4
	str r4, [sp]
	movs r4, #0xa
	str r4, [sp, #4]
	ldr r4, _08066FD0 @ =0x082E2440
	str r4, [sp, #8]
	ldr r4, _08066FD4 @ =0x08307A10
	str r4, [r7, #4]
	ldr r5, [r7]
	adds r6, r5, #0
	adds r5, #0x48
	ldrh r6, [r5]
	adds r4, r6, #1
	mov r8, r4
	mov sb, r8
	mov r4, sb
	strh r4, [r5]
	lsls r6, r6, #0x10
	asrs r5, r6, #0x10
	ldr r6, [r7, #4]
	adds r4, r6, r5
	ldrb r5, [r4]
	str r5, [sp, #0xc]
	bl sub_801501C
	movs r0, #4
	bl EnableBgSync
	ldr r0, _08066FD4 @ =0x08307A10
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x48
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0xff
	bne _08066FBA
	ldr r0, [r7]
	bl Proc_Break
_08066FBA:
	add sp, #0x18
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08066FC8: .4byte gBg2Tm
_08066FCC: .4byte 0x00004140
_08066FD0: .4byte 0x082E2440
_08066FD4: .4byte 0x08307A10

	thumb_func_start sub_8066FD8
sub_8066FD8: @ 0x08066FD8
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, _08067038 @ =0x086654BC
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	ldr r1, _0806703C @ =gBmSt
	movs r3, #0xc
	ldrsh r2, [r1, r3]
	asrs r1, r2, #4
	adds r3, r1, #0
	lsls r2, r3, #0x10
	asrs r1, r2, #0x10
	ldr r2, [r7]
	subs r1, r2, r1
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	adds r1, #8
	str r1, [r0, #0x30]
	ldr r0, [r7, #8]
	ldr r1, _0806703C @ =gBmSt
	movs r3, #0xe
	ldrsh r2, [r1, r3]
	asrs r1, r2, #4
	adds r3, r1, #0
	lsls r2, r3, #0x10
	asrs r1, r2, #0x10
	ldr r2, [r7, #4]
	subs r1, r2, r1
	lsls r2, r1, #1
	adds r1, r2, #0
	lsls r2, r1, #3
	adds r1, r2, #0
	adds r1, #8
	str r1, [r0, #0x34]
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08067038: .4byte 0x086654BC
_0806703C: .4byte gBmSt

	thumb_func_start sub_8067040
sub_8067040: @ 0x08067040
	push {r4, r7, lr}
	mov r7, sp
	ldr r0, _08067080 @ =gAction
	ldrb r1, [r0, #0xc]
	adds r0, r1, #0
	bl GetUnit
	adds r4, r0, #0
	ldrh r0, [r4, #0xc]
	movs r1, #1
	orrs r0, r1
	ldrh r1, [r4, #0xc]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	adds r1, r2, #0
	orrs r1, r0
	adds r0, r1, #0
	strh r0, [r4, #0xc]
	ldr r1, _08067080 @ =gAction
	movs r0, #0x13
	ldrsb r0, [r1, r0]
	ldr r1, _08067080 @ =gAction
	movs r2, #0x14
	ldrsb r2, [r1, r2]
	adds r1, r2, #0
	bl sub_806B398
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08067080: .4byte gAction

	thumb_func_start sub_8067084
sub_8067084: @ 0x08067084
	push {r4, r7, lr}
	mov r7, sp
	ldr r0, _080670B0 @ =gAction
	ldrb r1, [r0, #0xc]
	adds r0, r1, #0
	bl GetUnit
	adds r4, r0, #0
	ldrh r0, [r4, #0xc]
	ldr r1, _080670B4 @ =0x0000FFFE
	ands r0, r1
	ldrh r1, [r4, #0xc]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	adds r1, r2, #0
	orrs r1, r0
	adds r0, r1, #0
	strh r0, [r4, #0xc]
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080670B0: .4byte gAction
_080670B4: .4byte 0x0000FFFE

	thumb_func_start sub_80670B8
sub_80670B8: @ 0x080670B8
	push {r4, r7, lr}
	sub sp, #0x14
	add r7, sp, #0x10
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x30]
	movs r0, #0x8d
	bl PlaySeSpacial
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r4, _080671CC @ =0x082DF724
	movs r0, #2
	bl GetBgChrOffset
	ldr r2, _080671D0 @ =0x06002800
	adds r1, r0, r2
	adds r0, r4, #0
	bl Decompress
	ldr r0, _080671D4 @ =gBg2Tm
	ldr r1, [r7]
	ldr r2, [r1, #0x30]
	adds r1, r2, #0
	cmp r1, #0
	bge _080670F4
	adds r1, #7
_080670F4:
	asrs r2, r1, #3
	subs r1, r2, #2
	ldr r2, [r7]
	ldr r3, [r2, #0x34]
	adds r2, r3, #0
	cmp r2, #0
	bge _08067104
	adds r2, #7
_08067104:
	asrs r3, r2, #3
	subs r2, r3, #2
	ldr r3, _080671D8 @ =0x00004140
	movs r4, #4
	str r4, [sp]
	movs r4, #4
	str r4, [sp, #4]
	ldr r4, _080671DC @ =0x082DF844
	str r4, [sp, #8]
	movs r4, #0
	str r4, [sp, #0xc]
	bl sub_801501C
	movs r0, #4
	bl EnableBgSync
	ldr r0, _080671E0 @ =0x082DF6B0
	ldr r1, _080671E4 @ =0x06013800
	bl Decompress
	ldr r0, _080671E8 @ =0x082DF704
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080671EC @ =0x082DF824
	ldr r1, [r7]
	str r1, [sp]
	movs r1, #0x80
	movs r2, #0x20
	movs r3, #4
	bl sub_8014D9C
	bl sub_8069C34
	bl sub_8069C74
	bl sub_8067324
	ldr r0, _080671F0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080671F0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080671F0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _080671F0 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x48
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #0x14
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080671CC: .4byte 0x082DF724
_080671D0: .4byte 0x06002800
_080671D4: .4byte gBg2Tm
_080671D8: .4byte 0x00004140
_080671DC: .4byte 0x082DF844
_080671E0: .4byte 0x082DF6B0
_080671E4: .4byte 0x06013800
_080671E8: .4byte 0x082DF704
_080671EC: .4byte 0x082DF824
_080671F0: .4byte gDispIo

	thumb_func_start sub_80671F4
sub_80671F4: @ 0x080671F4
	push {r4, r7, lr}
	sub sp, #0x10
	add r7, sp, #8
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	movs r0, #0
	ldrsh r3, [r1, r0]
	movs r0, #0x1e
	str r0, [sp]
	movs r0, #5
	movs r1, #1
	movs r2, #0x10
	bl Interpolate
	str r0, [r7, #4]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x48
	ldrh r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x48
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldr r2, [r7]
	ldr r1, [r2, #0x34]
	ldr r2, [r7, #4]
	bl sub_8069DA4
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0x1d
	ble _0806729E
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x48
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	bl Proc_Break
	ldr r0, _080672A8 @ =0x082A84A4
	ldr r2, [r7]
	ldr r1, [r2, #0x30]
	ldr r3, [r7]
	ldr r2, [r3, #0x34]
	ldr r3, _080672AC @ =0x000041C0
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl StartAnimProc
	ldr r0, _080672A8 @ =0x082A84A4
	ldr r2, [r7]
	ldr r1, [r2, #0x30]
	ldr r3, [r7]
	ldr r2, [r3, #0x34]
	ldr r3, _080672AC @ =0x000041C0
	movs r4, #1
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl StartAnimProc
_0806729E:
	add sp, #0x10
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080672A8: .4byte 0x082A84A4
_080672AC: .4byte 0x000041C0

	thumb_func_start sub_80672B0
sub_80672B0: @ 0x080672B0
	push {r7, lr}
	sub sp, #0xc
	add r7, sp, #4
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	movs r0, #0
	ldrsh r3, [r1, r0]
	movs r0, #0x1e
	str r0, [sp]
	movs r0, #5
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	str r0, [r7, #4]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x48
	ldrh r3, [r2]
	adds r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x48
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, [r7]
	ldr r0, [r1, #0x30]
	ldr r2, [r7]
	ldr r1, [r2, #0x34]
	ldr r2, [r7, #4]
	bl sub_8069DA4
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x48
	movs r2, #0
	ldrsh r0, [r1, r2]
	cmp r0, #0x1d
	ble _0806731A
	ldr r0, [r7]
	bl Proc_Break
_0806731A:
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8067324
sub_8067324: @ 0x08067324
	push {r7, lr}
	mov r7, sp
	ldr r0, _08067488 @ =gDispIo
	ldrb r1, [r0, #0xc]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0xc]
	ldr r0, _08067488 @ =gDispIo
	ldrb r1, [r0, #0x10]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0x10]
	ldr r0, _08067488 @ =gDispIo
	ldrb r1, [r0, #0x14]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0x14]
	ldr r0, _08067488 @ =gDispIo
	ldrb r1, [r0, #0x18]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x18]
	ldr r0, _0806748C @ =gDispIo+0x3C
	ldr r1, _0806748C @ =gDispIo+0x3C
	ldrh r2, [r1]
	ldr r3, _08067490 @ =0x0000FFE0
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _0806748C @ =gDispIo+0x3C
	ldr r1, _0806748C @ =gDispIo+0x3C
	ldrh r2, [r1]
	movs r3, #4
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08067488 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806748C @ =gDispIo+0x3C
	ldr r1, _0806748C @ =gDispIo+0x3C
	ldrh r2, [r1]
	ldr r3, _08067494 @ =0x0000E0FF
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _0806748C @ =gDispIo+0x3C
	ldr r1, _0806748C @ =gDispIo+0x3C
	ldrh r2, [r1]
	movs r3, #0xc0
	lsls r3, r3, #5
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08067488 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3d
	ldrb r1, [r0]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067488 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067488 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067488 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067488 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067488 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #4
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067488 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067488 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067488 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067488 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067488 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0xfb
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067488 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067488 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08067488: .4byte gDispIo
_0806748C: .4byte gDispIo+0x3C
_08067490: .4byte 0x0000FFE0
_08067494: .4byte 0x0000E0FF

	thumb_func_start sub_8067498
sub_8067498: @ 0x08067498
	push {r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, _08067510 @ =0x08665514
	ldr r1, [r7, #0xc]
	bl SpawnProc
	str r0, [r7, #0x10]
	ldr r0, [r7, #0x10]
	ldr r1, [r7]
	str r1, [r0, #0x58]
	ldr r0, [r7, #0x10]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r1, [r7, #0x10]
	ldr r2, [r7, #4]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x66
	ldrh r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strh r2, [r1]
	ldr r0, [r7, #0x10]
	adds r1, r0, #0
	adds r0, #0x68
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r1, [r7, #0x10]
	ldr r2, [r7, #8]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x6a
	ldrh r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strh r2, [r1]
	add sp, #0x14
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08067510: .4byte 0x08665514

	thumb_func_start sub_8067514
sub_8067514: @ 0x08067514
	push {r7, lr}
	mov r7, sp
	ldr r1, _08067528 @ =0x08665514
	adds r0, r1, #0
	bl Proc_EndEach
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08067528: .4byte 0x08665514

	thumb_func_start sub_806752C
sub_806752C: @ 0x0806752C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x58]
	adds r0, r1, #0
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x64
	ldrh r1, [r2]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x68
	ldrh r2, [r3]
	bl SetBgOffset
	ldr r0, [r7]
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x64
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x66
	ldrh r1, [r1]
	ldrh r2, [r3]
	adds r1, r1, r2
	adds r2, r0, #0
	adds r0, #0x64
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x68
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x6a
	ldrh r1, [r1]
	ldrh r2, [r3]
	adds r1, r1, r2
	adds r2, r0, #0
	adds r0, #0x68
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80675AC
sub_80675AC: @ 0x080675AC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r1, _0806764C @ =gBg1Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	ldr r5, _08067650 @ =0x08114D80
	movs r0, #1
	bl GetBgChrOffset
	ldr r2, _08067654 @ =0x06004000
	adds r1, r0, r2
	adds r0, r5, #0
	bl Decompress
	ldr r0, _08067658 @ =0x08114FCC
	ldr r1, _0806765C @ =gBuf
	bl Decompress
	ldr r0, _0806765C @ =gBuf
	ldr r1, _0806764C @ =gBg1Tm
	movs r2, #0xe0
	lsls r2, r2, #2
	movs r3, #0xa4
	lsls r3, r3, #7
	bl sub_80152C4
	ldr r1, _08067660 @ =0x081150C8
	adds r0, r1, #0
	movs r1, #0xa0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r1, [r7, #8]
	lsls r0, r1, #5
	adds r1, r0, #1
	ldr r2, [r7, #4]
	adds r0, r1, r2
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, _08067664 @ =gBg0Tm
	adds r5, r0, r1
	ldr r0, _08067668 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, [r1, #4]
	ldrh r1, [r0]
	adds r0, r1, #0
	bl DecodeMsg
	adds r2, r0, #0
	adds r0, r5, #0
	movs r1, #0
	bl PutString
	movs r0, #0
	str r0, [r7, #0xc]
_08067636:
	ldr r0, _0806766C @ =0x08665524
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #1
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0]
	cmp r1, #0xff
	bne _08067670
	b _0806770C
	.align 2, 0
_0806764C: .4byte gBg1Tm
_08067650: .4byte 0x08114D80
_08067654: .4byte 0x06004000
_08067658: .4byte 0x08114FCC
_0806765C: .4byte gBuf
_08067660: .4byte 0x081150C8
_08067664: .4byte gBg0Tm
_08067668: .4byte 0x0203CDE4
_0806766C: .4byte 0x08665524
_08067670:
	ldr r0, _080676E0 @ =0x08665524
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #1
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0, #1]
	ldr r0, [r7, #8]
	adds r1, r1, r0
	lsls r0, r1, #5
	ldr r1, _080676E0 @ =0x08665524
	ldr r2, [r7, #0xc]
	adds r5, r2, #0
	lsls r3, r5, #1
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r2, [r1]
	ldr r3, [r7, #4]
	adds r1, r2, r3
	adds r0, r0, r1
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, _080676E4 @ =gBg0Tm
	adds r5, r0, r1
	ldr r0, _080676E8 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl UnitKnowsMagic
	strb r0, [r7, #0x10]
	bl GetLang
	ldr r1, _080676E0 @ =0x08665524
	ldr r2, [r7, #0xc]
	mov r8, r2
	mov r6, r8
	lsls r3, r6, #1
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r4, r2, #0
	ldrb r2, [r7, #0x10]
	lsls r3, r2, #0x18
	asrs r2, r3, #0x18
	cmp r2, #1
	bne _080676EC
	adds r2, r4, #4
	b _080676EE
	.align 2, 0
_080676E0: .4byte 0x08665524
_080676E4: .4byte gBg0Tm
_080676E8: .4byte 0x0203CDE4
_080676EC:
	adds r2, r4, #0
_080676EE:
	adds r3, r1, #4
	adds r1, r3, r2
	lsls r2, r0, #2
	ldr r1, [r1]
	adds r0, r2, r1
	ldr r3, [r0]
	adds r0, r5, #0
	movs r1, #3
	movs r2, #3
	bl PutStringCentered
	ldr r0, [r7, #0xc]
	adds r1, r0, #1
	str r1, [r7, #0xc]
	b _08067636
_0806770C:
	movs r0, #3
	bl EnableBgSync
	add sp, #0x14
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start MALevelUp_DrawActorStat
MALevelUp_DrawActorStat: @ 0x08067720
	push {r4, r5, r6, r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, [r7, #0x28]
	adds r1, r7, #0
	adds r1, #0x10
	strb r0, [r1]
	ldr r0, _080677A0 @ =0x08665524
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #1
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0, #1]
	ldr r2, [r7, #8]
	adds r0, r1, r2
	lsls r1, r0, #5
	adds r0, r1, #4
	ldr r1, _080677A0 @ =0x08665524
	ldr r2, [r7, #0xc]
	adds r5, r2, #0
	lsls r3, r5, #1
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r2, [r1]
	ldr r3, [r7, #4]
	adds r1, r2, r3
	adds r0, r0, r1
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, _080677A4 @ =gBg0Tm
	adds r5, r0, r1
	ldr r1, [r7, #0xc]
	ldr r0, [r7]
	bl sub_8067920
	adds r4, r0, #0
	adds r6, r4, #0
	adds r0, r7, #0
	adds r0, #0x10
	movs r1, #0
	ldrsb r1, [r0, r1]
	cmp r1, #0
	beq _0806778E
	ldr r1, [r7, #0xc]
	ldr r0, [r7]
	bl MALevelUp_GetActorStatUp
	adds r6, r6, r0
_0806778E:
	adds r0, r5, #0
	movs r1, #2
	adds r2, r6, #0
	bl PutNumberOrBlank
	add sp, #0x14
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080677A0: .4byte 0x08665524
_080677A4: .4byte gBg0Tm

	thumb_func_start MALevelUp_GetActorStatUp
MALevelUp_GetActorStatUp: @ 0x080677A8
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, [r7, #4]
	cmp r0, #8
	bls _080677BA
	b _08067914
_080677BA:
	ldr r0, [r7, #4]
	adds r1, r0, #0
	lsls r0, r1, #2
	ldr r1, _080677C8 @ =_080677CC
	adds r0, r0, r1
	ldr r1, [r0]
	mov pc, r1
	.align 2, 0
_080677C8: .4byte _080677CC
_080677CC: @ jump table
	.4byte _080677F0 @ case 0
	.4byte _080677F4 @ case 1
	.4byte _08067818 @ case 2
	.4byte _0806783C @ case 3
	.4byte _08067860 @ case 4
	.4byte _08067884 @ case 5
	.4byte _080678A8 @ case 6
	.4byte _080678CC @ case 7
	.4byte _080678F0 @ case 8
_080677F0:
	movs r0, #1
	b _08067918
_080677F4:
	ldr r0, _08067814 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r2, #0x6f
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r0, r1, #0
	b _08067918
	.align 2, 0
_08067814: .4byte 0x0203CDE4
_08067818:
	ldr r0, _08067838 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r2, #0x70
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r0, r1, #0
	b _08067918
	.align 2, 0
_08067838: .4byte 0x0203CDE4
_0806783C:
	ldr r0, _0806785C @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r2, #0x71
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r0, r1, #0
	b _08067918
	.align 2, 0
_0806785C: .4byte 0x0203CDE4
_08067860:
	ldr r0, _08067880 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r2, #0x72
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r0, r1, #0
	b _08067918
	.align 2, 0
_08067880: .4byte 0x0203CDE4
_08067884:
	ldr r0, _080678A4 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r2, #0x75
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r0, r1, #0
	b _08067918
	.align 2, 0
_080678A4: .4byte 0x0203CDE4
_080678A8:
	ldr r0, _080678C8 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r2, #0x73
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r0, r1, #0
	b _08067918
	.align 2, 0
_080678C8: .4byte 0x0203CDE4
_080678CC:
	ldr r0, _080678EC @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r2, #0x74
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r0, r1, #0
	b _08067918
	.align 2, 0
_080678EC: .4byte 0x0203CDE4
_080678F0:
	ldr r0, _08067910 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r2, #0x76
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r0, r1, #0
	b _08067918
	.align 2, 0
_08067910: .4byte 0x0203CDE4
_08067914:
	movs r0, #0
	b _08067918
_08067918:
	add sp, #8
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8067920
sub_8067920: @ 0x08067920
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, _0806795C @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r2, #0xb
	ldrsb r2, [r1, r2]
	adds r0, r2, #0
	bl GetUnit
	str r0, [r7, #8]
	ldr r0, [r7, #4]
	cmp r0, #8
	bhi _08067A08
	ldr r0, [r7, #4]
	adds r1, r0, #0
	lsls r0, r1, #2
	ldr r1, _08067960 @ =_08067964
	adds r0, r0, r1
	ldr r1, [r0]
	mov pc, r1
	.align 2, 0
_0806795C: .4byte 0x0203CDE4
_08067960: .4byte _08067964
_08067964: @ jump table
	.4byte _08067988 @ case 0
	.4byte _080679AC @ case 1
	.4byte _080679B6 @ case 2
	.4byte _080679C0 @ case 3
	.4byte _080679CA @ case 4
	.4byte _080679D4 @ case 5
	.4byte _080679DE @ case 6
	.4byte _080679E8 @ case 7
	.4byte _080679F2 @ case 8
_08067988:
	ldr r0, _080679A8 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r2, #0x6c
	movs r1, #0
	ldrsb r1, [r2, r1]
	adds r0, r1, #0
	b _08067A0C
	.align 2, 0
_080679A8: .4byte 0x0203CDE4
_080679AC:
	ldr r0, [r7, #8]
	movs r1, #0x10
	ldrsb r1, [r0, r1]
	adds r0, r1, #0
	b _08067A0C
_080679B6:
	ldr r0, [r7, #8]
	movs r1, #0x12
	ldrsb r1, [r0, r1]
	adds r0, r1, #0
	b _08067A0C
_080679C0:
	ldr r0, [r7, #8]
	movs r1, #0x13
	ldrsb r1, [r0, r1]
	adds r0, r1, #0
	b _08067A0C
_080679CA:
	ldr r0, [r7, #8]
	movs r1, #0x14
	ldrsb r1, [r0, r1]
	adds r0, r1, #0
	b _08067A0C
_080679D4:
	ldr r0, [r7, #8]
	movs r1, #0x17
	ldrsb r1, [r0, r1]
	adds r0, r1, #0
	b _08067A0C
_080679DE:
	ldr r0, [r7, #8]
	movs r1, #0x15
	ldrsb r1, [r0, r1]
	adds r0, r1, #0
	b _08067A0C
_080679E8:
	ldr r0, [r7, #8]
	movs r1, #0x16
	ldrsb r1, [r0, r1]
	adds r0, r1, #0
	b _08067A0C
_080679F2:
	ldr r0, [r7, #8]
	ldr r2, [r0, #4]
	movs r1, #0x11
	ldrsb r1, [r2, r1]
	ldr r0, [r7, #8]
	ldr r2, [r0]
	movs r0, #0x13
	ldrsb r0, [r2, r0]
	adds r1, r1, r0
	adds r0, r1, #0
	b _08067A0C
_08067A08:
	movs r0, #0
	b _08067A0C
_08067A0C:
	add sp, #0xc
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8067A14
sub_8067A14: @ 0x08067A14
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl EndEachAnimProc
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8067A28
sub_8067A28: @ 0x08067A28
	push {r7, lr}
	sub sp, #0x18
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, _08067ADC @ =0x0866559C
	ldr r1, [r7, #0xc]
	bl SpawnProc
	str r0, [r7, #0x10]
	ldr r0, [r7, #0x10]
	ldr r2, [r7]
	adds r1, r2, #0
	ldrh r2, [r0, #0x2a]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x2a]
	ldr r0, [r7, #0x10]
	ldr r2, [r7, #4]
	adds r1, r2, #0
	ldrh r2, [r0, #0x2c]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x2c]
	ldr r0, [r7, #0x10]
	ldr r2, [r7, #8]
	adds r1, r2, #0
	ldrh r2, [r0, #0x2e]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x2e]
	ldr r0, _08067AE0 @ =0x082DBB24
	ldr r1, [r7]
	lsls r2, r1, #0x16
	lsrs r1, r2, #0x16
	lsls r2, r1, #5
	ldr r3, _08067AE4 @ =0x06010000
	adds r1, r2, r3
	bl Decompress
	ldr r0, _08067AE8 @ =0x082DBAC4
	ldr r2, [r7, #4]
	adds r1, r2, #0
	adds r1, #0x10
	adds r2, r1, #0
	lsls r1, r2, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08067AE8 @ =0x082DBAC4
	ldr r2, [r7, #4]
	adds r1, r2, #0
	adds r1, #0x11
	adds r2, r1, #0
	lsls r1, r2, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08067AEC @ =0x086655AC
	ldr r1, [r7, #0x10]
	bl SpawnProc
	str r0, [r7, #0x14]
	ldr r1, [r7, #0x14]
	ldr r2, [r7, #4]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x64
	ldrh r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strh r2, [r1]
	add sp, #0x18
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08067ADC: .4byte 0x0866559C
_08067AE0: .4byte 0x082DBB24
_08067AE4: .4byte 0x06010000
_08067AE8: .4byte 0x082DBAC4
_08067AEC: .4byte 0x086655AC

	thumb_func_start sub_8067AF0
sub_8067AF0: @ 0x08067AF0
	push {r7, lr}
	mov r7, sp
	ldr r1, _08067B04 @ =0x0866559C
	adds r0, r1, #0
	bl Proc_EndEach
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08067B04: .4byte 0x0866559C

	thumb_func_start sub_8067B08
sub_8067B08: @ 0x08067B08
	push {r4, r5, r6, r7, lr}
	sub sp, #0x2c
	add r7, sp, #8
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, _08067B88 @ =0x082DBDB0
	str r0, [r7, #0x20]
	ldr r1, _08067B8C @ =0x0866559C
	adds r0, r1, #0
	bl Proc_Find
	str r0, [r7, #0x1c]
	ldr r0, [r7, #0x1c]
	ldrh r1, [r0, #0x2a]
	str r1, [r7, #0x14]
	ldr r1, [r7, #0x1c]
	ldrh r0, [r1, #0x2a]
	ldr r2, [r7, #8]
	subs r1, r2, #1
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, r0, r1
	str r0, [r7, #0x18]
	ldr r0, [r7, #8]
	cmp r0, #0
	bne _08067B94
	ldr r0, _08067B90 @ =0x082A75FC
	ldr r2, [r7]
	adds r1, r2, #0
	subs r1, #0x12
	ldr r3, [r7, #4]
	subs r2, r3, #4
	ldr r3, [r7, #0x1c]
	ldrh r4, [r3, #0x2c]
	movs r5, #0xf
	adds r3, r4, #0
	ands r3, r5
	adds r5, r3, #0
	lsls r4, r5, #0x10
	lsrs r3, r4, #0x10
	adds r4, r3, #0
	lsls r3, r4, #0xc
	ldr r4, [r7, #0x14]
	adds r3, r3, r4
	ldr r4, [r7, #0x1c]
	ldrh r5, [r4, #0x2e]
	movs r6, #3
	adds r4, r5, #0
	ands r4, r6
	adds r6, r4, #0
	lsls r5, r6, #0x10
	lsrs r4, r5, #0x10
	adds r5, r4, #0
	lsls r4, r5, #0xa
	adds r3, r3, r4
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl StartAnimProc
	b _08067CE8
	.align 2, 0
_08067B88: .4byte 0x082DBDB0
_08067B8C: .4byte 0x0866559C
_08067B90: .4byte 0x082A75FC
_08067B94:
	ldr r0, [r7, #0xc]
	cmp r0, #0
	ble _08067BA0
	movs r0, #0
	str r0, [r7, #0x10]
	b _08067BA4
_08067BA0:
	movs r0, #1
	str r0, [r7, #0x10]
_08067BA4:
	ldr r0, _08067CF0 @ =0x082A75FC
	ldr r2, [r7, #4]
	ldr r1, [r7, #0x1c]
	ldrh r3, [r1, #0x2c]
	ldr r4, [r7, #0x10]
	adds r1, r3, r4
	movs r3, #0xf
	ands r1, r3
	adds r3, r1, #0
	lsls r1, r3, #0xc
	ldr r3, [r7, #0x14]
	adds r1, r1, r3
	ldr r3, [r7, #0x1c]
	ldrh r4, [r3, #0x2e]
	movs r5, #3
	adds r3, r4, #0
	ands r3, r5
	adds r5, r3, #0
	lsls r4, r5, #0x10
	lsrs r3, r4, #0x10
	adds r4, r3, #0
	lsls r5, r4, #0xa
	adds r3, r1, r5
	ldr r1, [r7, #0x10]
	adds r4, r1, #1
	str r4, [sp]
	movs r1, #2
	str r1, [sp, #4]
	ldr r1, [r7]
	bl StartAnimProc
	ldr r0, _08067CF0 @ =0x082A75FC
	ldr r2, [r7]
	subs r1, r2, #3
	ldr r2, [r7, #4]
	ldr r3, [r7, #0x1c]
	ldrh r4, [r3, #0x2c]
	movs r5, #0xf
	adds r3, r4, #0
	ands r3, r5
	adds r5, r3, #0
	lsls r4, r5, #0x10
	lsrs r3, r4, #0x10
	adds r4, r3, #0
	lsls r3, r4, #0xc
	ldr r4, [r7, #0x18]
	adds r3, r3, r4
	ldr r4, [r7, #0x1c]
	ldrh r5, [r4, #0x2e]
	movs r6, #3
	adds r4, r5, #0
	ands r4, r6
	adds r6, r4, #0
	lsls r5, r6, #0x10
	lsrs r4, r5, #0x10
	adds r5, r4, #0
	lsls r4, r5, #0xa
	adds r3, r3, r4
	ldr r4, [r7, #0x10]
	adds r5, r4, #3
	str r5, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl StartAnimProc
	ldr r0, [r7, #0xc]
	cmp r0, #0
	ble _08067C72
	ldr r0, _08067CF0 @ =0x082A75FC
	ldr r2, [r7]
	adds r1, r2, #0
	subs r1, #0x12
	ldr r3, [r7, #4]
	subs r2, r3, #4
	ldr r3, [r7, #0x1c]
	ldrh r4, [r3, #0x2c]
	movs r5, #0xf
	adds r3, r4, #0
	ands r3, r5
	adds r5, r3, #0
	lsls r4, r5, #0x10
	lsrs r3, r4, #0x10
	adds r4, r3, #0
	lsls r3, r4, #0xc
	ldr r4, [r7, #0x14]
	adds r3, r3, r4
	ldr r4, [r7, #0x1c]
	ldrh r5, [r4, #0x2e]
	movs r6, #3
	adds r4, r5, #0
	ands r4, r6
	adds r6, r4, #0
	lsls r5, r6, #0x10
	lsrs r4, r5, #0x10
	adds r5, r4, #0
	lsls r4, r5, #0xa
	adds r3, r3, r4
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl StartAnimProc
_08067C72:
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bge _08067C96
	ldr r1, [r7, #0x20]
	movs r2, #0x80
	lsls r2, r2, #3
	adds r0, r1, r2
	ldr r2, [r7, #0x18]
	adds r1, r2, #0
	adds r1, #0x4c
	lsls r2, r1, #0x16
	lsrs r1, r2, #0x16
	lsls r2, r1, #5
	ldr r3, _08067CF4 @ =0x06010000
	adds r1, r2, r3
	movs r2, #0x20
	bl sub_8015260
_08067C96:
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bge _08067C9E
	rsbs r0, r0, #0
_08067C9E:
	lsls r1, r0, #0x16
	lsrs r0, r1, #0x16
	lsls r1, r0, #5
	ldr r2, [r7, #0x20]
	adds r0, r1, r2
	ldr r2, [r7, #0x18]
	adds r1, r2, #0
	adds r1, #0x2d
	lsls r2, r1, #0x16
	lsrs r1, r2, #0x16
	lsls r2, r1, #5
	ldr r3, _08067CF4 @ =0x06010000
	adds r1, r2, r3
	movs r2, #0x20
	bl sub_8015260
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bge _08067CC6
	rsbs r0, r0, #0
_08067CC6:
	adds r0, #0x20
	lsls r1, r0, #0x16
	lsrs r0, r1, #0x16
	lsls r1, r0, #5
	ldr r2, [r7, #0x20]
	adds r0, r1, r2
	ldr r2, [r7, #0x18]
	adds r1, r2, #0
	adds r1, #0x4d
	lsls r2, r1, #0x16
	lsrs r1, r2, #0x16
	lsls r2, r1, #5
	ldr r3, _08067CF4 @ =0x06010000
	adds r1, r2, r3
	movs r2, #0x20
	bl sub_8015260
_08067CE8:
	add sp, #0x2c
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08067CF0: .4byte 0x082A75FC
_08067CF4: .4byte 0x06010000

	thumb_func_start sub_8067CF8
sub_8067CF8: @ 0x08067CF8
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, _08067D28 @ =0x086655C4
	ldr r1, [r7, #4]
	bl SpawnProcLocking
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	ldr r2, [r7]
	adds r1, r2, #0
	ldrh r2, [r0, #0x2e]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x2e]
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08067D28: .4byte 0x086655C4

	thumb_func_start sub_8067D2C
sub_8067D2C: @ 0x08067D2C
	push {r7, lr}
	mov r7, sp
	ldr r0, _08067E4C @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08067E4C @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08067E4C @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08067E4C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2d
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067E4C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x31
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067E4C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xf0
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067E4C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x30
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x30
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067E4C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0xfe
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067E4C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0xfd
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067E4C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #4
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067E4C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067E4C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067E4C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067E4C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067E4C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #4
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067E4C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08067E4C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08067E4C: .4byte gDispIo

	thumb_func_start sub_8067E50
sub_8067E50: @ 0x08067E50
	push {r7, lr}
	mov r7, sp
	ldr r0, _08067E80 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08067E80 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08067E80 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08067E80: .4byte gDispIo

	thumb_func_start sub_8067E84
sub_8067E84: @ 0x08067E84
	push {r7, lr}
	sub sp, #0xc
	add r7, sp, #4
	str r0, [r7]
	bl ResetTextFont
	ldr r1, _08067EB8 @ =gBg0Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	ldr r0, [r7]
	movs r2, #0x2e
	ldrsh r1, [r0, r2]
	adds r0, r1, #0
	movs r1, #1
	movs r2, #1
	bl sub_80675AC
	movs r0, #0
	str r0, [r7, #4]
_08067EAE:
	ldr r0, [r7, #4]
	cmp r0, #8
	ble _08067EBC
	b _08067ED8
	.align 2, 0
_08067EB8: .4byte gBg0Tm
_08067EBC:
	ldr r1, [r7]
	movs r3, #0x2e
	ldrsh r0, [r1, r3]
	ldr r3, [r7, #4]
	movs r1, #0
	str r1, [sp]
	movs r1, #1
	movs r2, #1
	bl MALevelUp_DrawActorStat
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _08067EAE
_08067ED8:
	movs r0, #1
	bl EnableBgSync
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x30
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x31
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	ldrh r1, [r0, #0x32]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	ldr r3, _08068038 @ =0x0000FF70
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x32]
	ldr r0, _0806803C @ =gDispIo
	ldrb r1, [r0, #0xc]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0xc]
	ldr r0, _0806803C @ =gDispIo
	ldrb r1, [r0, #0x10]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x10]
	ldr r0, _0806803C @ =gDispIo
	ldrb r1, [r0, #0x14]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x14]
	ldr r0, _0806803C @ =gDispIo
	ldrb r1, [r0, #0x18]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x18]
	ldr r0, _0806803C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0x3f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806803C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806803C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806803C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0806803C @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _0806803C @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _0806803C @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, [r7]
	ldrh r2, [r0, #0x32]
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	ldr r0, [r7]
	ldrh r2, [r0, #0x32]
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	ldr r0, _08068040 @ =0x0203CDE4
	ldr r2, [r7]
	movs r3, #0x2e
	ldrsh r1, [r2, r3]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r0, #0x42
	str r0, [sp]
	movs r0, #0
	movs r2, #0xb8
	movs r3, #0x50
	bl StartFace
	ldr r1, _08068044 @ =gFaces
	ldr r0, [r1]
	ldr r1, [r7]
	ldrh r2, [r1, #0x32]
	rsbs r1, r2, #0
	ldrh r2, [r0, #0x30]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x30]
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r1, #0
	movs r1, #3
	movs r2, #1
	ldr r3, [r7]
	bl sub_8067A28
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08068038: .4byte 0x0000FF70
_0806803C: .4byte gDispIo
_08068040: .4byte 0x0203CDE4
_08068044: .4byte gFaces

	thumb_func_start sub_8068048
sub_8068048: @ 0x08068048
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	movs r1, #0
	str r1, [r0, #0x54]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8068060
sub_8068060: @ 0x08068060
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	ldr r0, _08068088 @ =0x082DB6E8
	str r0, [r7, #8]
	ldr r1, [r7]
	ldr r0, [r7]
	ldr r1, [r7]
	ldr r2, [r1, #0x54]
	adds r1, r2, #1
	str r1, [r0, #0x54]
	ldr r0, [r7]
	ldr r1, [r0, #0x54]
	movs r2, #3
	adds r0, r1, #0
	ands r0, r2
	cmp r0, #0
	beq _0806808C
	b _080680E8
	.align 2, 0
_08068088: .4byte 0x082DB6E8
_0806808C:
	ldr r0, [r7]
	ldr r1, [r0, #0x54]
	asrs r0, r1, #2
	movs r1, #0xf
	ands r0, r1
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, [r7, #8]
	adds r0, r0, r1
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x64
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r2, r1, #0
	adds r2, #0x10
	adds r1, r2, #0
	lsls r2, r1, #5
	adds r1, r2, #0
	adds r1, #0x12
	movs r2, #0xe
	bl ApplyPaletteExt
	ldr r0, [r7, #4]
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r2, [r7, #8]
	adds r1, r0, r2
	adds r0, r1, #0
	adds r0, #0x40
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x64
	movs r3, #0
	ldrsh r1, [r2, r3]
	adds r2, r1, #0
	adds r2, #0x11
	adds r1, r2, #0
	lsls r2, r1, #5
	adds r1, r2, #0
	adds r1, #0x12
	movs r2, #0xe
	bl ApplyPaletteExt
_080680E8:
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80680F0
sub_80680F0: @ 0x080680F0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r7]
	ldrh r2, [r1, #0x32]
	adds r1, r2, #0
	adds r1, #8
	ldrh r2, [r0, #0x32]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x32]
	ldr r0, [r7]
	ldrh r2, [r0, #0x32]
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	ldr r0, [r7]
	ldrh r2, [r0, #0x32]
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	ldr r1, _08068160 @ =gFaces
	ldr r0, [r1]
	ldr r1, [r7]
	ldrh r2, [r1, #0x32]
	movs r3, #0x20
	subs r1, r3, r2
	ldrh r2, [r0, #0x30]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x30]
	ldr r0, [r7]
	movs r2, #0x32
	ldrsh r1, [r0, r2]
	movs r0, #0x30
	cmn r1, r0
	blt _08068158
	ldr r0, [r7]
	bl Proc_Break
_08068158:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08068160: .4byte gFaces

	thumb_func_start sub_8068164
sub_8068164: @ 0x08068164
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r7]
	ldrh r2, [r1, #0x32]
	adds r1, r2, #0
	subs r1, #8
	ldrh r2, [r0, #0x32]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x32]
	ldr r0, [r7]
	ldrh r2, [r0, #0x32]
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	ldr r0, [r7]
	ldrh r2, [r0, #0x32]
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	ldr r1, _080681D4 @ =gFaces
	ldr r0, [r1]
	ldr r1, [r7]
	ldrh r2, [r1, #0x32]
	movs r3, #0x20
	subs r1, r3, r2
	ldrh r2, [r0, #0x30]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x30]
	ldr r0, [r7]
	movs r2, #0x32
	ldrsh r1, [r0, r2]
	movs r0, #0x90
	cmn r1, r0
	bgt _080681CC
	ldr r0, [r7]
	bl Proc_Break
_080681CC:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080681D4: .4byte gFaces

	thumb_func_start sub_80681D8
sub_80681D8: @ 0x080681D8
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	add r7, sp, #4
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x31
	ldrb r0, [r1]
	cmp r0, #0
	beq _08068214
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x31
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x31
	ldrb r3, [r2]
	subs r1, r3, #1
	adds r2, r0, #0
	adds r0, #0x31
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	b _08068308
_08068214:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x30
	ldrb r0, [r1]
	str r0, [r7, #4]
_0806821E:
	ldr r0, [r7, #4]
	cmp r0, #8
	ble _08068226
	b _08068244
_08068226:
	ldr r0, [r7]
	movs r2, #0x2e
	ldrsh r1, [r0, r2]
	ldr r2, [r7, #4]
	adds r0, r1, #0
	adds r1, r2, #0
	bl MALevelUp_GetActorStatUp
	cmp r0, #0
	beq _0806823C
	b _08068244
_0806823C:
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _0806821E
_08068244:
	ldr r0, [r7, #4]
	cmp r0, #8
	ble _08068252
	ldr r0, [r7]
	bl Proc_Break
	b _08068308
_08068252:
	ldr r1, [r7]
	movs r3, #0x2e
	ldrsh r0, [r1, r3]
	ldr r3, [r7, #4]
	movs r1, #1
	str r1, [sp]
	movs r1, #1
	movs r2, #1
	bl MALevelUp_DrawActorStat
	movs r0, #1
	bl EnableBgSync
	ldr r0, _08068310 @ =0x08665524
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #1
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0]
	adds r0, r1, #0
	lsls r1, r0, #3
	adds r4, r1, #0
	adds r4, #0x3e
	ldr r0, _08068310 @ =0x08665524
	ldr r1, [r7, #4]
	adds r3, r1, #0
	lsls r2, r3, #1
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0, #1]
	adds r2, r1, #0
	lsls r0, r2, #3
	ldr r1, [r7]
	movs r3, #0x32
	ldrsh r2, [r1, r3]
	adds r1, r2, #0
	subs r1, #0x17
	subs r5, r0, r1
	ldr r6, [r7, #4]
	ldr r0, [r7]
	movs r2, #0x2e
	ldrsh r1, [r0, r2]
	ldr r2, [r7, #4]
	adds r0, r1, #0
	adds r1, r2, #0
	bl MALevelUp_GetActorStatUp
	adds r3, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	adds r2, r6, #0
	bl sub_8067B08
	ldr r0, _08068314 @ =gPlaySt
	ldrb r1, [r0, #0x1d]
	lsls r2, r1, #0x1e
	lsrs r0, r2, #0x1f
	cmp r0, #0
	bne _080682D4
	movs r0, #0x76
	bl m4aSongNumStart
_080682D4:
	ldr r0, [r7]
	ldr r1, [r7, #4]
	adds r2, r1, #0
	adds r1, r2, #1
	adds r2, r0, #0
	adds r0, #0x30
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x31
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x14
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
_08068308:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08068310: .4byte 0x08665524
_08068314: .4byte gPlaySt

	thumb_func_start sub_8068318
sub_8068318: @ 0x08068318
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r1, #0
	movs r1, #0x80
	movs r2, #0x10
	ldr r3, [r7]
	bl StartBgmVolumeChange
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8068338
sub_8068338: @ 0x08068338
	push {r4, r7, lr}
	sub sp, #0x14
	add r7, sp, #8
	str r0, [r7]
	ldr r0, _08068488 @ =0x082DB8B0
	ldr r1, _0806848C @ =0x06013800
	bl Decompress
	ldr r0, _08068490 @ =0x082DBAC4
	movs r1, #0x98
	lsls r1, r1, #2
	movs r2, #0x60
	bl ApplyPaletteExt
	ldr r0, _08068494 @ =0x0203CDE4
	ldr r2, [r7]
	movs r3, #0x2e
	ldrsh r1, [r2, r3]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	ldr r1, _08068498 @ =gBmSt
	movs r3, #0xc
	ldrsh r2, [r1, r3]
	asrs r1, r2, #4
	adds r3, r1, #0
	lsls r2, r3, #0x10
	asrs r1, r2, #0x10
	subs r0, r0, r1
	lsls r1, r0, #1
	adds r0, r1, #0
	lsls r1, r0, #3
	adds r0, r1, #0
	adds r0, #0x10
	str r0, [r7, #4]
	ldr r0, _08068494 @ =0x0203CDE4
	ldr r2, [r7]
	movs r3, #0x2e
	ldrsh r1, [r2, r3]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0xf
	ldrsb r0, [r1, r0]
	ldr r1, _08068498 @ =gBmSt
	movs r3, #0xe
	ldrsh r2, [r1, r3]
	asrs r1, r2, #4
	adds r3, r1, #0
	lsls r2, r3, #0x10
	asrs r1, r2, #0x10
	subs r0, r0, r1
	lsls r1, r0, #1
	adds r0, r1, #0
	lsls r1, r0, #3
	adds r0, r1, #0
	subs r0, #8
	str r0, [r7, #8]
	ldr r0, _08068494 @ =0x0203CDE4
	ldr r2, [r7]
	movs r3, #0x2e
	ldrsh r1, [r2, r3]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0xf
	ldrsb r0, [r1, r0]
	ldr r1, _08068498 @ =gBmSt
	movs r3, #0xe
	ldrsh r2, [r1, r3]
	asrs r1, r2, #4
	adds r3, r1, #0
	lsls r2, r3, #0x10
	asrs r1, r2, #0x10
	subs r0, r0, r1
	lsls r1, r0, #1
	cmp r1, #3
	bgt _080683F2
	ldr r0, [r7, #8]
	adds r1, r0, #0
	adds r1, #0x20
	str r1, [r7, #8]
_080683F2:
	ldr r0, _08068494 @ =0x0203CDE4
	ldr r2, [r7]
	movs r3, #0x2e
	ldrsh r1, [r2, r3]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	ldr r1, _08068498 @ =gBmSt
	movs r3, #0xc
	ldrsh r2, [r1, r3]
	asrs r1, r2, #4
	adds r3, r1, #0
	lsls r2, r3, #0x10
	asrs r1, r2, #0x10
	subs r0, r0, r1
	lsls r1, r0, #1
	cmp r1, #3
	bgt _08068424
	movs r0, #0x30
	str r0, [r7, #4]
_08068424:
	ldr r0, _08068494 @ =0x0203CDE4
	ldr r2, [r7]
	movs r3, #0x2e
	ldrsh r1, [r2, r3]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	ldr r1, _08068498 @ =gBmSt
	movs r3, #0xc
	ldrsh r2, [r1, r3]
	asrs r1, r2, #4
	adds r3, r1, #0
	lsls r2, r3, #0x10
	asrs r1, r2, #0x10
	subs r0, r0, r1
	lsls r1, r0, #1
	cmp r1, #0x19
	ble _08068456
	movs r0, #0xd0
	str r0, [r7, #4]
_08068456:
	ldr r0, _0806849C @ =0x082A7CBC
	ldr r1, [r7, #4]
	ldr r2, [r7, #8]
	movs r3, #0xc7
	lsls r3, r3, #6
	movs r4, #0
	str r4, [sp]
	movs r4, #2
	str r4, [sp, #4]
	bl StartAnimProc
	ldr r0, _080684A0 @ =gPlaySt
	ldrb r1, [r0, #0x1d]
	lsls r2, r1, #0x1e
	lsrs r0, r2, #0x1f
	cmp r0, #0
	bne _0806847E
	movs r0, #0x5b
	bl m4aSongNumStart
_0806847E:
	add sp, #0x14
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08068488: .4byte 0x082DB8B0
_0806848C: .4byte 0x06013800
_08068490: .4byte 0x082DBAC4
_08068494: .4byte 0x0203CDE4
_08068498: .4byte gBmSt
_0806849C: .4byte 0x082A7CBC
_080684A0: .4byte gPlaySt

	thumb_func_start sub_80684A4
sub_80684A4: @ 0x080684A4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl EndEachAnimProc
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80684B8
sub_80684B8: @ 0x080684B8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x80
	movs r2, #0x10
	ldr r3, [r7]
	bl StartBgmVolumeChange
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80684D8
sub_80684D8: @ 0x080684D8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl ClearTalk
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80684EC
sub_80684EC: @ 0x080684EC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	cmp r0, #0
	beq _0806850C
	ldr r1, _08068508 @ =0x08665684
	adds r0, r1, #0
	ldr r1, [r7]
	bl SpawnProcLocking
	b _08068516
	.align 2, 0
_08068508: .4byte 0x08665684
_0806850C:
	ldr r1, _08068520 @ =0x08665684
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
_08068516:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08068520: .4byte 0x08665684

	thumb_func_start sub_8068524
sub_8068524: @ 0x08068524
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r0, _08068544 @ =0x020217C8
	ldr r1, _08068548 @ =0x03004750
	movs r2, #0x50
	bl CpuFastSet
	movs r0, #0
	str r0, [r7, #4]
_0806853A:
	ldr r0, [r7, #4]
	cmp r0, #9
	ble _0806854C
	b _08068570
	.align 2, 0
_08068544: .4byte 0x020217C8
_08068548: .4byte 0x03004750
_0806854C:
	ldr r0, _0806856C @ =Pal_AllBlack
	ldr r2, [r7, #4]
	adds r1, r2, #6
	movs r2, #0x3c
	ldr r3, [r7]
	bl StartPalFade
	adds r1, r0, #0
	adds r0, r1, #0
	movs r1, #0xf
	bl SetPalFadeStop
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _0806853A
	.align 2, 0
_0806856C: .4byte Pal_AllBlack
_08068570:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8068578
sub_8068578: @ 0x08068578
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	cmp r0, #0
	beq _08068598
	ldr r1, _08068594 @ =0x0866569C
	adds r0, r1, #0
	ldr r1, [r7]
	bl SpawnProcLocking
	b _080685A2
	.align 2, 0
_08068594: .4byte 0x0866569C
_08068598:
	ldr r1, _080685AC @ =0x0866569C
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
_080685A2:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080685AC: .4byte 0x0866569C

	thumb_func_start sub_80685B0
sub_80685B0: @ 0x080685B0
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	str r0, [r7, #4]
_080685BC:
	ldr r0, [r7, #4]
	cmp r0, #9
	ble _080685C4
	b _080685E8
_080685C4:
	ldr r0, [r7, #4]
	adds r1, r0, #0
	lsls r0, r1, #5
	ldr r1, _080685E4 @ =0x03004750
	adds r0, r0, r1
	ldr r2, [r7, #4]
	adds r1, r2, #6
	movs r2, #0xf
	ldr r3, [r7]
	bl StartPalFade
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _080685BC
	.align 2, 0
_080685E4: .4byte 0x03004750
_080685E8:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80685F0
sub_80685F0: @ 0x080685F0
	push {r7, lr}
	mov r7, sp
	ldr r1, _08068604 @ =0x086656B4
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08068604: .4byte 0x086656B4

	thumb_func_start sub_8068608
sub_8068608: @ 0x08068608
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8068628
sub_8068628: @ 0x08068628
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl RandNextB
	adds r1, r0, #0
	adds r0, r1, #0
	movs r1, #9
	bl DivRem
	adds r1, r0, #0
	subs r0, r1, #4
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r4, r0, #0x10
	bl RandNextB
	adds r1, r0, #0
	adds r0, r1, #0
	movs r1, #9
	bl DivRem
	adds r1, r0, #0
	subs r0, r1, #4
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r2, r0, #0x10
	movs r0, #0
	adds r1, r4, #0
	bl SetBgOffset
	bl RandNextB
	adds r1, r0, #0
	adds r0, r1, #0
	movs r1, #9
	bl DivRem
	adds r1, r0, #0
	subs r0, r1, #4
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r4, r0, #0x10
	bl RandNextB
	adds r1, r0, #0
	adds r0, r1, #0
	movs r1, #9
	bl DivRem
	adds r1, r0, #0
	subs r0, r1, #4
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r2, r0, #0x10
	movs r0, #1
	adds r1, r4, #0
	bl SetBgOffset
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	adds r2, r1, #1
	adds r3, r2, #0
	strh r3, [r0]
	lsls r1, r1, #0x10
	asrs r0, r1, #0x10
	cmp r0, #0xf
	ble _080686D0
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, [r7]
	bl Proc_Break
_080686D0:
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80686D8
sub_80686D8: @ 0x080686D8
	push {r7, lr}
	mov r7, sp
	ldr r0, _080686F8 @ =0x082DD7E8
	ldr r1, _080686FC @ =0x06013800
	bl Decompress
	ldr r0, _08068700 @ =0x082DD808
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080686F8: .4byte 0x082DD7E8
_080686FC: .4byte 0x06013800
_08068700: .4byte 0x082DD808

	thumb_func_start sub_8068704
sub_8068704: @ 0x08068704
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, [r7]
	movs r1, #4
	cmn r0, r1
	bge _08068718
	b _0806874A
_08068718:
	ldr r0, [r7]
	cmp r0, #0xeb
	ble _08068720
	b _0806874A
_08068720:
	ldr r0, [r7, #4]
	movs r1, #4
	cmn r0, r1
	bge _0806872A
	b _0806874A
_0806872A:
	ldr r0, [r7, #4]
	cmp r0, #0x9b
	ble _08068732
	b _0806874A
_08068732:
	ldr r1, [r7]
	subs r0, r1, #4
	lsls r1, r0, #0x17
	lsrs r0, r1, #0x17
	ldr r2, [r7, #4]
	subs r1, r2, #4
	movs r2, #0xff
	ands r1, r2
	ldr r2, _08068754 @ =Sprite_8x8
	ldr r3, _08068758 @ =0x000041C0
	bl PutOamHiRam
_0806874A:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08068754: .4byte Sprite_8x8
_08068758: .4byte 0x000041C0

	thumb_func_start sub_806875C
sub_806875C: @ 0x0806875C
	push {r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, _080687B8 @ =gSinLut
	ldr r1, [r7, #0xc]
	movs r2, #0xff
	ands r1, r2
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, r0, r1
	movs r2, #0
	ldrsh r1, [r0, r2]
	ldr r2, [r7, #8]
	adds r0, r1, #0
	muls r0, r2, r0
	asrs r1, r0, #0xc
	ldr r2, [r7]
	adds r0, r1, r2
	ldr r1, _080687B8 @ =gSinLut
	ldr r2, [r7, #0xc]
	movs r3, #0xff
	ands r2, r3
	adds r3, r2, #0
	adds r3, #0x40
	adds r2, r3, #0
	lsls r3, r2, #1
	adds r1, r1, r3
	movs r3, #0
	ldrsh r2, [r1, r3]
	ldr r3, [r7, #8]
	adds r1, r2, #0
	muls r1, r3, r1
	asrs r2, r1, #0xc
	ldr r3, [r7, #4]
	adds r1, r2, r3
	bl sub_8068704
	add sp, #0x10
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080687B8: .4byte gSinLut

	thumb_func_start sub_80687BC
sub_80687BC: @ 0x080687BC
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	bl sub_80686D8
	movs r0, #0
	str r0, [r7, #4]
_080687CC:
	ldr r0, [r7, #4]
	cmp r0, #0xf
	ble _080687D4
	b _08068820
_080687D4:
	ldr r0, _0806881C @ =0x030046D0
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #3
	adds r0, r0, r1
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _0806881C @ =0x030046D0
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #3
	adds r0, r0, r1
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r1, #0
	lsls r1, r2, #4
	ldrh r2, [r0, #2]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #2]
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _080687CC
	.align 2, 0
_0806881C: .4byte 0x030046D0
_08068820:
	ldr r0, [r7]
	ldrh r1, [r0, #0x36]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x36]
	ldr r0, [r7]
	ldrh r1, [r0, #0x38]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x38]
	ldr r0, [r7]
	ldr r1, [r7]
	ldrh r2, [r0, #0x3a]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrh r1, [r1, #0x3c]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x3a]
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8068858
sub_8068858: @ 0x08068858
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	add r7, sp, #4
	str r0, [r7]
	ldr r0, [r7]
	movs r2, #0x2e
	ldrsh r1, [r0, r2]
	ldr r0, [r7]
	movs r3, #0x30
	ldrsh r2, [r0, r3]
	ldr r0, [r7]
	ldrh r3, [r0, #0x3a]
	ldr r0, [r7]
	ldrh r4, [r0, #0x3e]
	str r4, [sp]
	movs r0, #5
	bl Interpolate
	lsls r1, r0, #4
	str r1, [r7, #8]
	ldr r0, [r7]
	ldr r2, [r7, #8]
	adds r1, r2, #0
	ldrh r2, [r0, #0x36]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x36]
	ldr r0, [r7]
	ldr r1, [r7, #8]
	asrs r2, r1, #0x1f
	lsrs r3, r2, #0x1f
	adds r2, r1, r3
	asrs r1, r2, #1
	ldrh r2, [r0, #0x38]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x38]
	movs r0, #0
	str r0, [r7, #4]
_080688B4:
	ldr r0, [r7, #4]
	cmp r0, #0xf
	ble _080688BC
	b _08068900
_080688BC:
	ldr r1, [r7]
	movs r2, #0x2a
	ldrsh r0, [r1, r2]
	ldr r2, [r7]
	movs r3, #0x2c
	ldrsh r1, [r2, r3]
	ldr r3, [r7]
	ldrh r2, [r3, #0x36]
	ldr r3, _080688FC @ =0x030046D0
	ldr r4, [r7, #4]
	adds r5, r4, #0
	lsls r4, r5, #3
	adds r3, r3, r4
	ldrh r4, [r3]
	adds r3, r2, r4
	asrs r2, r3, #4
	ldr r4, [r7]
	ldrh r3, [r4, #0x38]
	ldr r4, _080688FC @ =0x030046D0
	ldr r5, [r7, #4]
	adds r6, r5, #0
	lsls r5, r6, #3
	adds r4, r4, r5
	ldrh r5, [r4, #2]
	adds r4, r3, r5
	asrs r3, r4, #4
	bl sub_806875C
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _080688B4
	.align 2, 0
_080688FC: .4byte 0x030046D0
_08068900:
	ldr r1, [r7]
	ldr r0, [r7]
	ldr r1, [r7]
	ldrh r2, [r1, #0x3a]
	adds r1, r2, #1
	ldrh r2, [r0, #0x3a]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0x3a]
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x40
	ldrh r0, [r0, #0x3a]
	ldrh r1, [r2]
	cmp r0, r1
	bls _08068930
	ldr r0, [r7]
	bl Proc_Break
_08068930:
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8068938
sub_8068938: @ 0x08068938
	push {r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r1, _080689EC @ =0x086656CC
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #0x10]
	ldr r0, [r7, #0x10]
	ldr r2, [r7]
	adds r1, r2, #0
	ldrh r2, [r0, #0x2a]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x2a]
	ldr r0, [r7, #0x10]
	ldr r2, [r7, #4]
	adds r1, r2, #0
	ldrh r2, [r0, #0x2c]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x2c]
	ldr r0, [r7, #0x10]
	ldr r2, [r7, #8]
	adds r1, r2, #0
	ldrh r2, [r0, #0x2e]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x2e]
	ldr r0, [r7, #0x10]
	ldr r2, [r7, #0xc]
	adds r1, r2, #0
	ldrh r2, [r0, #0x30]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x30]
	ldr r0, [r7, #0x10]
	ldr r2, [r7, #0x1c]
	adds r1, r2, #0
	ldrh r2, [r0, #0x3c]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x3c]
	ldr r0, [r7, #0x10]
	ldr r2, [r7, #0x20]
	adds r1, r2, #0
	ldrh r2, [r0, #0x3e]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x3e]
	ldr r1, [r7, #0x10]
	ldr r2, [r7, #0x24]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x40
	ldrh r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strh r2, [r1]
	add sp, #0x14
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080689EC: .4byte 0x086656CC

	thumb_func_start sub_80689F0
sub_80689F0: @ 0x080689F0
	push {r7, lr}
	sub sp, #0x14
	add r7, sp, #0xc
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, [r7, #4]
	movs r0, #0
	str r0, [sp]
	movs r0, #0x50
	str r0, [sp, #4]
	movs r0, #0x28
	str r0, [sp, #8]
	ldr r0, [r7]
	movs r2, #1
	movs r3, #0xc8
	bl sub_8068938
	add sp, #0x14
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8068A1C
sub_8068A1C: @ 0x08068A1C
	push {r7, lr}
	sub sp, #0x14
	add r7, sp, #0xc
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, [r7, #4]
	movs r0, #0
	str r0, [sp]
	movs r0, #0x3c
	str r0, [sp, #4]
	movs r0, #0x37
	str r0, [sp, #8]
	ldr r0, [r7]
	movs r2, #0xc8
	movs r3, #1
	bl sub_8068938
	add sp, #0x14
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8068A48
sub_8068A48: @ 0x08068A48
	push {r7, lr}
	mov r7, sp
	ldr r0, _08068A58 @ =0x0203CDE4
	ldr r1, [r0, #0x54]
	cmp r1, #0
	bne _08068A60
	ldr r0, _08068A5C @ =0x086656FC
	b _08068A6C
	.align 2, 0
_08068A58: .4byte 0x0203CDE4
_08068A5C: .4byte 0x086656FC
_08068A60:
	ldr r0, _08068A68 @ =0x0203CDE4
	ldr r1, [r0, #0x54]
	adds r0, r1, #0
	b _08068A6C
	.align 2, 0
_08068A68: .4byte 0x0203CDE4
_08068A6C:
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8068A74
sub_8068A74: @ 0x08068A74
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08068AA4 @ =0x0203CDE4
	ldr r2, _08068AA4 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	bl sub_806129C
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08068AA4: .4byte 0x0203CDE4

	thumb_func_start sub_8068AA8
sub_8068AA8: @ 0x08068AA8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08068AD8 @ =0x0203CDE4
	ldr r2, _08068AD8 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	bl sub_8061318
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08068AD8: .4byte 0x0203CDE4

	thumb_func_start sub_8068ADC
sub_8068ADC: @ 0x08068ADC
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r0, _08068B10 @ =0x0203CDE4
	ldr r2, _08068B10 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	ldr r0, [r1, #4]
	ldrb r1, [r0, #4]
	cmp r1, #0x37
	bne _08068B18
	ldr r1, _08068B14 @ =sub_8068BA8
	adds r0, r1, #0
	movs r1, #9
	bl CallDelayed
	b _08068B22
	.align 2, 0
_08068B10: .4byte 0x0203CDE4
_08068B14: .4byte sub_8068BA8
_08068B18:
	ldr r1, _08068BA0 @ =sub_8068BE8
	adds r0, r1, #0
	movs r1, #0xc
	bl CallDelayed
_08068B22:
	ldr r0, _08068BA4 @ =0x0203CDE4
	ldr r2, _08068BA4 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	ldr r0, [r2, #0x30]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r0, _08068BA4 @ =0x0203CDE4
	ldr r2, _08068BA4 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	ldr r0, [r2, #0x30]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x80
	lsls r3, r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	ldr r0, _08068BA4 @ =0x0203CDE4
	ldr r2, _08068BA4 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r0, [r1]
	ldr r1, [r0, #0x30]
	adds r0, r1, #0
	movs r1, #5
	bl Anim_SetAnimId
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08068BA0: .4byte sub_8068BE8
_08068BA4: .4byte 0x0203CDE4

	thumb_func_start sub_8068BA8
sub_8068BA8: @ 0x08068BA8
	push {r7, lr}
	mov r7, sp
	ldr r0, _08068BE0 @ =0x0203CDE4
	ldr r2, _08068BE0 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r1, _08068BE4 @ =gBmSt
	movs r3, #0xc
	ldrsh r2, [r1, r3]
	subs r1, r0, r2
	movs r0, #0xa8
	bl PlaySeSpacial
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08068BE0: .4byte 0x0203CDE4
_08068BE4: .4byte gBmSt

	thumb_func_start sub_8068BE8
sub_8068BE8: @ 0x08068BE8
	push {r7, lr}
	mov r7, sp
	ldr r0, _08068C20 @ =0x0203CDE4
	ldr r2, _08068C20 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r1, _08068C24 @ =gBmSt
	movs r3, #0xc
	ldrsh r2, [r1, r3]
	subs r1, r0, r2
	movs r0, #0xa9
	bl PlaySeSpacial
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08068C20: .4byte 0x0203CDE4
_08068C24: .4byte gBmSt

	thumb_func_start sub_8068C28
sub_8068C28: @ 0x08068C28
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08068C80 @ =0x0203CDE4
	ldr r2, _08068C80 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	ldr r0, [r2, #0x30]
	ldrh r1, [r0, #0x18]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x18]
	ldr r0, _08068C80 @ =0x0203CDE4
	ldr r2, _08068C80 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	ldr r0, [r2, #0x30]
	ldrh r1, [r0, #0x1a]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0, #0x1a]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08068C80: .4byte 0x0203CDE4

	thumb_func_start sub_8068C84
sub_8068C84: @ 0x08068C84
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08068CB4 @ =0x0203CDE4
	ldr r2, _08068CB4 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	bl sub_80613BC
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08068CB4: .4byte 0x0203CDE4

	thumb_func_start sub_8068CB8
sub_8068CB8: @ 0x08068CB8
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r2, [r7]
	ldr r4, [r7]
	adds r3, r4, #0
	adds r4, #0x44
	movs r3, #0
	ldrsh r0, [r4, r3]
	ldr r4, [r7, #4]
	adds r3, r4, #0
	adds r4, #0x44
	movs r5, #0
	ldrsh r3, [r4, r5]
	ldr r5, [r7]
	adds r4, r5, #0
	adds r5, #0x44
	movs r6, #0
	ldrsh r4, [r5, r6]
	subs r3, r3, r4
	cmp r3, #0
	bgt _08068D12
	adds r3, r0, #0
	ldr r5, [r7, #4]
	adds r4, r5, #0
	adds r5, #0x44
	movs r6, #0
	ldrsh r4, [r5, r6]
	ldr r6, [r7]
	adds r5, r6, #0
	adds r5, r6, #0
	adds r5, #0x44
	str r5, [r7, #8]
	ldr r6, [r7, #8]
	movs r5, #0
	ldrsh r6, [r6, r5]
	str r6, [r7, #0xc]
	ldr r6, [r7, #0xc]
	subs r4, r4, r6
	cmp r4, #0
	bge _08068D10
	subs r3, #0x10
_08068D10:
	b _08068D18
_08068D12:
	adds r4, r0, #0
	adds r4, #0x10
	adds r3, r4, #0
_08068D18:
	adds r4, r2, #0
	adds r2, #0x44
	ldrh r4, [r2]
	movs r5, #0
	ands r4, r5
	adds r5, r4, #0
	orrs r3, r5
	adds r4, r3, #0
	strh r4, [r2]
	ldr r2, [r7]
	ldr r4, [r7]
	adds r3, r4, #0
	adds r4, #0x46
	movs r3, #0
	ldrsh r1, [r4, r3]
	ldr r4, [r7, #4]
	adds r3, r4, #0
	adds r4, #0x46
	movs r5, #0
	ldrsh r3, [r4, r5]
	ldr r5, [r7]
	adds r4, r5, #0
	adds r5, #0x46
	movs r6, #0
	ldrsh r4, [r5, r6]
	subs r3, r3, r4
	cmp r3, #0
	bgt _08068D7A
	adds r3, r1, #0
	ldr r5, [r7, #4]
	adds r4, r5, #0
	adds r5, #0x46
	movs r6, #0
	ldrsh r4, [r5, r6]
	ldr r6, [r7]
	adds r5, r6, #0
	adds r5, r6, #0
	adds r5, #0x46
	str r5, [r7, #8]
	ldr r6, [r7, #8]
	movs r5, #0
	ldrsh r6, [r6, r5]
	str r6, [r7, #0xc]
	ldr r6, [r7, #0xc]
	subs r4, r4, r6
	cmp r4, #0
	bge _08068D78
	subs r3, #0x10
_08068D78:
	b _08068D80
_08068D7A:
	adds r4, r1, #0
	adds r4, #0x10
	adds r3, r4, #0
_08068D80:
	adds r4, r2, #0
	adds r2, #0x46
	ldrh r4, [r2]
	movs r5, #0
	ands r4, r5
	adds r5, r4, #0
	orrs r3, r5
	adds r4, r3, #0
	strh r4, [r2]
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8068D9C
sub_8068D9C: @ 0x08068D9C
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r2, [r7]
	ldr r4, [r7]
	adds r3, r4, #0
	adds r4, #0x44
	movs r3, #0
	ldrsh r0, [r4, r3]
	ldr r4, [r7]
	adds r3, r4, #0
	adds r4, #0x44
	movs r5, #0
	ldrsh r3, [r4, r5]
	ldr r5, [r7, #4]
	adds r4, r5, #0
	adds r5, #0x44
	movs r6, #0
	ldrsh r4, [r5, r6]
	subs r3, r3, r4
	cmp r3, #0
	bgt _08068DF6
	adds r3, r0, #0
	ldr r5, [r7]
	adds r4, r5, #0
	adds r5, #0x44
	movs r6, #0
	ldrsh r4, [r5, r6]
	ldr r6, [r7, #4]
	adds r5, r6, #0
	adds r5, r6, #0
	adds r5, #0x44
	str r5, [r7, #8]
	ldr r6, [r7, #8]
	movs r5, #0
	ldrsh r6, [r6, r5]
	str r6, [r7, #0xc]
	ldr r6, [r7, #0xc]
	subs r4, r4, r6
	cmp r4, #0
	bge _08068DF4
	subs r3, #0x10
_08068DF4:
	b _08068DFC
_08068DF6:
	adds r4, r0, #0
	adds r4, #0x10
	adds r3, r4, #0
_08068DFC:
	adds r4, r2, #0
	adds r2, #0x44
	ldrh r4, [r2]
	movs r5, #0
	ands r4, r5
	adds r5, r4, #0
	orrs r3, r5
	adds r4, r3, #0
	strh r4, [r2]
	ldr r2, [r7]
	ldr r4, [r7]
	adds r3, r4, #0
	adds r4, #0x46
	movs r3, #0
	ldrsh r1, [r4, r3]
	ldr r4, [r7]
	adds r3, r4, #0
	adds r4, #0x46
	movs r5, #0
	ldrsh r3, [r4, r5]
	ldr r5, [r7, #4]
	adds r4, r5, #0
	adds r5, #0x46
	movs r6, #0
	ldrsh r4, [r5, r6]
	subs r3, r3, r4
	cmp r3, #0
	bgt _08068E5E
	adds r3, r1, #0
	ldr r5, [r7]
	adds r4, r5, #0
	adds r5, #0x46
	movs r6, #0
	ldrsh r4, [r5, r6]
	ldr r6, [r7, #4]
	adds r5, r6, #0
	adds r5, r6, #0
	adds r5, #0x46
	str r5, [r7, #8]
	ldr r6, [r7, #8]
	movs r5, #0
	ldrsh r6, [r6, r5]
	str r6, [r7, #0xc]
	ldr r6, [r7, #0xc]
	subs r4, r4, r6
	cmp r4, #0
	bge _08068E5C
	subs r3, #0x10
_08068E5C:
	b _08068E64
_08068E5E:
	adds r4, r1, #0
	adds r4, #0x10
	adds r3, r4, #0
_08068E64:
	adds r4, r2, #0
	adds r2, #0x46
	ldrh r4, [r2]
	movs r5, #0
	ands r4, r5
	adds r5, r4, #0
	orrs r3, r5
	adds r4, r3, #0
	strh r4, [r2]
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8068E80
sub_8068E80: @ 0x08068E80
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	ldr r0, _08068F00 @ =0x0203CDE4
	ldr r2, _08068F00 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r0, [r1]
	str r0, [r7, #4]
	ldr r0, _08068F00 @ =0x0203CDE4
	ldr r2, _08068F00 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r0, [r1]
	str r0, [r7, #8]
	ldr r0, [r7, #4]
	ldr r1, [r7, #8]
	bl sub_8068CB8
	ldr r1, _08068F00 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5a
	ldrh r0, [r1]
	movs r1, #0x80
	lsls r1, r1, #3
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _08068EF8
	ldr r0, _08068F00 @ =0x0203CDE4
	ldr r1, [r0, #0x30]
	str r1, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7, #8]
	bl sub_8068CB8
	ldr r0, _08068F00 @ =0x0203CDE4
	ldr r1, [r0, #0x44]
	str r1, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7, #8]
	bl sub_8068CB8
_08068EF8:
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08068F00: .4byte 0x0203CDE4

	thumb_func_start sub_8068F04
sub_8068F04: @ 0x08068F04
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	ldr r0, _08068F84 @ =0x0203CDE4
	ldr r2, _08068F84 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r0, [r1]
	str r0, [r7, #4]
	ldr r0, _08068F84 @ =0x0203CDE4
	ldr r2, _08068F84 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r0, [r1]
	str r0, [r7, #8]
	ldr r0, [r7, #4]
	ldr r1, [r7, #8]
	bl sub_8068D9C
	ldr r1, _08068F84 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5a
	ldrh r0, [r1]
	movs r1, #0x80
	lsls r1, r1, #3
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _08068F7C
	ldr r0, _08068F84 @ =0x0203CDE4
	ldr r1, [r0, #0x30]
	str r1, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7, #8]
	bl sub_8068D9C
	ldr r0, _08068F84 @ =0x0203CDE4
	ldr r1, [r0, #0x44]
	str r1, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r7, #8]
	bl sub_8068D9C
_08068F7C:
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08068F84: .4byte 0x0203CDE4

	thumb_func_start sub_8068F88
sub_8068F88: @ 0x08068F88
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08068FD4 @ =0x0203CDE4
	ldr r2, _08068FD4 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r2, [r0]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r0, _08068FD4 @ =0x0203CDE4
	ldr r3, _08068FD4 @ =0x0203CDE4
	adds r2, r3, #0
	adds r3, #0x58
	ldrb r2, [r3]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r0, r0, r2
	ldr r3, [r0]
	movs r2, #0xf
	ldrsb r2, [r3, r2]
	ldr r0, [r7]
	bl CameraMoveWatchPosition
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08068FD4: .4byte 0x0203CDE4

	thumb_func_start sub_8068FD8
sub_8068FD8: @ 0x08068FD8
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08069024 @ =0x0203CDE4
	ldr r2, _08069024 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r2, [r0]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r0, _08069024 @ =0x0203CDE4
	ldr r3, _08069024 @ =0x0203CDE4
	adds r2, r3, #0
	adds r3, #0x59
	ldrb r2, [r3]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r0, r0, r2
	ldr r3, [r0]
	movs r2, #0xf
	ldrsb r2, [r3, r2]
	ldr r0, [r7]
	bl CameraMoveWatchPosition
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069024: .4byte 0x0203CDE4

	thumb_func_start sub_8069028
sub_8069028: @ 0x08069028
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08069090 @ =0x0203CDE4
	ldr r1, _08069094 @ =gBattleUnitB
	adds r2, r1, #0
	adds r1, #0x6f
	adds r2, r0, #0
	adds r0, #0x60
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, _08069090 @ =0x0203CDE4
	ldr r1, _08069094 @ =gBattleUnitB
	adds r2, r1, #0
	adds r1, #0x70
	adds r2, r0, #0
	adds r0, #0x61
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r1, _08069090 @ =0x0203CDE4
	adds r0, r1, #0
	adds r2, r1, #0
	adds r2, #0x60
	ldrb r1, [r2]
	ldr r2, _08069090 @ =0x0203CDE4
	adds r0, r2, #0
	adds r3, r2, #0
	adds r3, #0x61
	ldrb r2, [r3]
	ldr r0, [r7]
	bl CameraMoveWatchPosition
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069090: .4byte 0x0203CDE4
_08069094: .4byte gBattleUnitB

	thumb_func_start sub_8069098
sub_8069098: @ 0x08069098
	push {r4, r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	ldr r1, _080690CC @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x58
	ldrb r0, [r1]
	str r0, [r7, #8]
	ldr r1, _080690CC @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5a
	ldrh r0, [r1]
	movs r1, #0x80
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080690D0
	ldr r1, _080690CC @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x58
	ldrb r0, [r1]
	str r0, [r7, #0xc]
	b _080690DA
	.align 2, 0
_080690CC: .4byte 0x0203CDE4
_080690D0:
	ldr r1, _08069130 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x59
	ldrb r0, [r1]
	str r0, [r7, #0xc]
_080690DA:
	ldr r0, _08069130 @ =0x0203CDE4
	ldr r1, [r7, #8]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r1, r2, #0
	adds r1, #0x4a
	ldrh r2, [r1]
	adds r0, r2, #0
	bl sub_805F7B4
	lsls r1, r0, #0x18
	lsrs r0, r1, #0x18
	cmp r0, #0
	bne _08069134
	ldr r1, _08069130 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5a
	ldrh r0, [r1]
	movs r1, #2
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _0806912E
	ldr r0, _08069130 @ =0x0203CDE4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_8064994
_0806912E:
	b _0806941E
	.align 2, 0
_08069130: .4byte 0x0203CDE4
_08069134:
	ldr r0, _08069198 @ =0x0203CDE4
	adds r1, r0, #0
	adds r0, #0x5f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7, #0xc]
	ldr r2, _08069198 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x5d
	movs r1, #0
	ldrsb r1, [r2, r1]
	bl sub_8069430
	ldr r1, _08069198 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5a
	ldrh r0, [r1]
	movs r1, #0x80
	lsls r1, r1, #1
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _08069188
	ldr r0, [r7, #8]
	ldr r2, _08069198 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x5d
	movs r1, #0
	ldrsb r1, [r2, r1]
	rsbs r2, r1, #0
	adds r1, r2, #0
	bl sub_8069430
_08069188:
	ldr r1, _08069198 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5d
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bge _0806919C
	b _0806941E
	.align 2, 0
_08069198: .4byte 0x0203CDE4
_0806919C:
	ldr r1, _080691F0 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5a
	ldrh r0, [r1]
	movs r1, #2
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080691F8
	ldr r0, _080691F0 @ =0x0203CDE4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r1, _080691F4 @ =gBmSt
	movs r3, #0xc
	ldrsh r2, [r1, r3]
	subs r1, r0, r2
	movs r0, #0xc8
	bl PlaySeSpacial
	ldr r0, _080691F0 @ =0x0203CDE4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_8064994
	b _0806941E
	.align 2, 0
_080691F0: .4byte 0x0203CDE4
_080691F4: .4byte gBmSt
_080691F8:
	ldr r1, _08069244 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5d
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bne _0806924C
	ldr r0, _08069244 @ =0x0203CDE4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r1, _08069248 @ =gBmSt
	movs r4, #0xc
	ldrsh r2, [r1, r4]
	subs r1, r0, r2
	movs r0, #0xec
	bl PlaySeSpacial
	ldr r0, _08069244 @ =0x0203CDE4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_8064A10
	b _0806941E
	.align 2, 0
_08069244: .4byte 0x0203CDE4
_08069248: .4byte gBmSt
_0806924C:
	movs r0, #0
	ldr r1, _080692AC @ =0x0203CDE4
	ldr r2, [r7, #0xc]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, #4
	adds r2, r1, r2
	ldr r3, [r2]
	adds r1, r3, #0
	adds r2, r3, #0
	adds r2, #0x53
	ldrb r1, [r2]
	cmp r1, #0x1b
	bne _0806926E
	movs r0, #1
_0806926E:
	str r0, [r7, #0x10]
	ldr r0, [r7, #0x10]
	cmp r0, #0
	beq _080692D4
	ldr r1, _080692AC @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	movs r1, #2
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x18
	lsrs r0, r1, #0x18
	cmp r0, #0
	beq _080692B0
	movs r0, #0xaf
	str r0, [r7, #4]
	ldr r0, _080692AC @ =0x0203CDE4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	movs r1, #1
	bl sub_8064A8C
	b _080692CC
	.align 2, 0
_080692AC: .4byte 0x0203CDE4
_080692B0:
	movs r0, #0xb0
	str r0, [r7, #4]
	ldr r0, _080692D0 @ =0x0203CDE4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	movs r1, #0
	bl sub_8064A8C
_080692CC:
	b _080692F8
	.align 2, 0
_080692D0: .4byte 0x0203CDE4
_080692D4:
	ldr r1, _080692F0 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	movs r1, #2
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x18
	lsrs r0, r1, #0x18
	cmp r0, #0
	beq _080692F4
	movs r0, #0xd5
	str r0, [r7, #4]
	b _080692F8
	.align 2, 0
_080692F0: .4byte 0x0203CDE4
_080692F4:
	movs r0, #0xd2
	str r0, [r7, #4]
_080692F8:
	ldr r1, _080693B4 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5a
	ldrh r0, [r1]
	movs r1, #1
	ands r0, r1
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080693BC
	ldr r0, [r7, #4]
	ldr r1, _080693B4 @ =0x0203CDE4
	ldr r2, [r7, #0xc]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	adds r2, r1, #0
	lsls r1, r2, #4
	ldr r2, _080693B8 @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	subs r1, r1, r3
	bl PlaySeSpacial
	ldr r0, _080693B4 @ =0x0203CDE4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r4, [r1]
	ldr r0, _080693B4 @ =0x0203CDE4
	ldr r1, [r7, #8]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r1, r2, #0
	adds r1, #0x4a
	ldrh r2, [r1]
	adds r0, r2, #0
	bl sub_805F7D4
	lsls r2, r0, #0x18
	lsrs r1, r2, #0x18
	adds r0, r4, #0
	bl sub_806142C
	bl sub_80685F0
	ldr r0, _080693B4 @ =0x0203CDE4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r1, _080693B8 @ =gBmSt
	movs r3, #0xc
	ldrsh r2, [r1, r3]
	subs r1, r0, r2
	movs r0, #0xd8
	bl PlaySeSpacial
	ldr r0, _080693B4 @ =0x0203CDE4
	ldr r1, [r7, #8]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	bl sub_80613BC
	b _0806941E
	.align 2, 0
_080693B4: .4byte 0x0203CDE4
_080693B8: .4byte gBmSt
_080693BC:
	ldr r0, [r7, #4]
	ldr r1, _08069428 @ =0x0203CDE4
	ldr r2, [r7, #0xc]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	adds r2, r1, #0
	lsls r1, r2, #4
	ldr r2, _0806942C @ =gBmSt
	movs r4, #0xc
	ldrsh r3, [r2, r4]
	subs r1, r1, r3
	bl PlaySeSpacial
	ldr r0, _08069428 @ =0x0203CDE4
	ldr r1, [r7, #0xc]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r4, [r1]
	ldr r0, _08069428 @ =0x0203CDE4
	ldr r1, [r7, #8]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #4
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	adds r1, r2, #0
	adds r1, #0x4a
	ldrh r2, [r1]
	adds r0, r2, #0
	bl sub_805F7D4
	lsls r2, r0, #0x18
	lsrs r1, r2, #0x18
	adds r0, r4, #0
	bl sub_8061624
_0806941E:
	add sp, #0x14
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069428: .4byte 0x0203CDE4
_0806942C: .4byte gBmSt

	thumb_func_start sub_8069430
sub_8069430: @ 0x08069430
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, _0806946C @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0, #0xd]
	ldr r0, [r7, #4]
	cmp r1, r0
	bgt _08069470
	ldr r0, _0806946C @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldrb r1, [r0, #0xd]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0xd]
	b _080694A4
	.align 2, 0
_0806946C: .4byte 0x0203CDE4
_08069470:
	ldr r0, _08069500 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, _08069500 @ =0x0203CDE4
	ldr r2, [r7]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r3, [r7, #4]
	adds r2, r3, #0
	ldrb r3, [r1, #0xd]
	subs r1, r3, r2
	ldrb r2, [r0, #0xd]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0, #0xd]
_080694A4:
	ldr r0, _08069500 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, _08069500 @ =0x0203CDE4
	ldr r2, [r7]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r0, [r0, #0xd]
	ldrb r1, [r1, #0xc]
	cmp r0, r1
	bls _080694F6
	ldr r0, _08069500 @ =0x0203CDE4
	ldr r1, [r7]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, _08069500 @ =0x0203CDE4
	ldr r2, [r7]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldrb r2, [r0, #0xd]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1, #0xc]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0, #0xd]
_080694F6:
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069500: .4byte 0x0203CDE4

	thumb_func_start sub_8069504
sub_8069504: @ 0x08069504
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _0806951C @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	cmp r0, #0
	beq _08069520
	b _08069526
	.align 2, 0
_0806951C: .4byte 0x0203CDE4
_08069520:
	ldr r0, [r7]
	bl Proc_Break
_08069526:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8069530
sub_8069530: @ 0x08069530
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _0806955C @ =0x0203CDE4
	ldr r2, _0806955C @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_8064B7C
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806955C: .4byte 0x0203CDE4

	thumb_func_start sub_8069560
sub_8069560: @ 0x08069560
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _0806958C @ =0x0203CDE4
	ldr r2, _0806958C @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_8066AD4
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806958C: .4byte 0x0203CDE4

	thumb_func_start sub_8069590
sub_8069590: @ 0x08069590
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _080695BC @ =0x0203CDE4
	ldr r2, _080695BC @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_8066DFC
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080695BC: .4byte 0x0203CDE4

	thumb_func_start sub_80695C0
sub_80695C0: @ 0x080695C0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _080695EC @ =0x0203CDE4
	ldr r2, _080695EC @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_8064C50
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080695EC: .4byte 0x0203CDE4

	thumb_func_start sub_80695F0
sub_80695F0: @ 0x080695F0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08069620 @ =0x0203CDE4
	ldr r2, _08069620 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r1, _08069624 @ =0x082DD848
	ldr r2, _08069628 @ =0x082DE974
	bl sub_80653BC
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069620: .4byte 0x0203CDE4
_08069624: .4byte 0x082DD848
_08069628: .4byte 0x082DE974

	thumb_func_start sub_806962C
sub_806962C: @ 0x0806962C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _0806965C @ =0x0203CDE4
	ldr r2, _0806965C @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r1, _08069660 @ =0x082DD848
	ldr r2, _08069664 @ =0x082DE954
	bl sub_80653BC
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806965C: .4byte 0x0203CDE4
_08069660: .4byte 0x082DD848
_08069664: .4byte 0x082DE954

	thumb_func_start sub_8069668
sub_8069668: @ 0x08069668
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08069698 @ =0x0203CDE4
	ldr r2, _08069698 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r1, _0806969C @ =0x082DED00
	ldr r2, _080696A0 @ =0x082DEFBC
	movs r3, #0x8b
	bl sub_8065694
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069698: .4byte 0x0203CDE4
_0806969C: .4byte 0x082DED00
_080696A0: .4byte 0x082DEFBC

	thumb_func_start sub_80696A4
sub_80696A4: @ 0x080696A4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _080696D4 @ =0x0203CDE4
	ldr r2, _080696D4 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r1, _080696D8 @ =0x082DE994
	ldr r2, _080696DC @ =0x082DEFBC
	movs r3, #0x89
	bl sub_8065694
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080696D4: .4byte 0x0203CDE4
_080696D8: .4byte 0x082DE994
_080696DC: .4byte 0x082DEFBC

	thumb_func_start sub_80696E0
sub_80696E0: @ 0x080696E0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08069710 @ =0x0203CDE4
	ldr r2, _08069710 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r1, _08069714 @ =0x082DEB08
	ldr r2, _08069718 @ =0x082DEFBC
	movs r3, #0x8a
	bl sub_8065694
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069710: .4byte 0x0203CDE4
_08069714: .4byte 0x082DEB08
_08069718: .4byte 0x082DEFBC

	thumb_func_start sub_806971C
sub_806971C: @ 0x0806971C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _0806974C @ =0x0203CDE4
	ldr r2, _0806974C @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r1, _08069750 @ =0x082DED00
	ldr r2, _08069754 @ =0x082DEFBC
	movs r3, #0x8b
	bl sub_8065694
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806974C: .4byte 0x0203CDE4
_08069750: .4byte 0x082DED00
_08069754: .4byte 0x082DEFBC

	thumb_func_start sub_8069758
sub_8069758: @ 0x08069758
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08069788 @ =0x0203CDE4
	ldr r2, _08069788 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r1, _0806978C @ =0x082DE994
	ldr r2, _08069790 @ =0x082DEFBC
	movs r3, #0x89
	bl sub_8065694
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069788: .4byte 0x0203CDE4
_0806978C: .4byte 0x082DE994
_08069790: .4byte 0x082DEFBC

	thumb_func_start sub_8069794
sub_8069794: @ 0x08069794
	push {r4, r5, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08069840 @ =gPlaySt
	ldrb r1, [r0, #0x1d]
	lsls r2, r1, #0x1e
	lsrs r0, r2, #0x1f
	cmp r0, #0
	bne _080697AE
	movs r0, #0xb4
	bl m4aSongNumStart
_080697AE:
	ldr r0, _08069844 @ =0x0203CDE4
	ldr r1, _08069848 @ =gBattleUnitB
	adds r2, r1, #0
	adds r1, #0x6f
	adds r2, r0, #0
	adds r0, #0x60
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, _08069844 @ =0x0203CDE4
	ldr r1, _08069848 @ =gBattleUnitB
	adds r2, r1, #0
	adds r1, #0x70
	adds r2, r0, #0
	adds r0, #0x61
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, _08069844 @ =0x0203CDE4
	ldr r2, _08069844 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r1, _08069844 @ =0x0203CDE4
	ldr r3, _08069844 @ =0x0203CDE4
	adds r2, r3, #0
	adds r3, #0x59
	ldrb r2, [r3]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	ldr r2, _08069844 @ =0x0203CDE4
	ldr r4, _08069844 @ =0x0203CDE4
	adds r3, r4, #0
	adds r4, #0x59
	ldrb r3, [r4]
	adds r5, r3, #0
	lsls r4, r5, #2
	adds r4, r4, r3
	lsls r3, r4, #2
	adds r2, r2, r3
	ldr r3, [r2]
	movs r2, #0xf
	ldrsb r2, [r3, r2]
	bl sub_8065C30
	add sp, #4
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069840: .4byte gPlaySt
_08069844: .4byte 0x0203CDE4
_08069848: .4byte gBattleUnitB

	thumb_func_start sub_806984C
sub_806984C: @ 0x0806984C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08069888 @ =0x0203CDE4
	ldr r2, _08069888 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r2, r0, r1
	ldr r0, [r2]
	ldr r2, _08069888 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x60
	ldrb r1, [r2]
	ldr r3, _08069888 @ =0x0203CDE4
	adds r2, r3, #0
	adds r3, #0x61
	ldrb r2, [r3]
	bl sub_8065C30
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069888: .4byte 0x0203CDE4

	thumb_func_start sub_806988C
sub_806988C: @ 0x0806988C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _080698B8 @ =0x0203CDE4
	ldr r2, _080698B8 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x58
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_8065E08
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080698B8: .4byte 0x0203CDE4

	thumb_func_start sub_80698BC
sub_80698BC: @ 0x080698BC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _080698E0 @ =0x0203CDE4
	adds r0, r1, #0
	adds r1, #0x60
	ldrb r0, [r1]
	ldr r2, _080698E0 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x61
	ldrb r1, [r2]
	bl sub_8066FD8
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080698E0: .4byte 0x0203CDE4

	thumb_func_start sub_80698E4
sub_80698E4: @ 0x080698E4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08069910 @ =0x0203CDE4
	ldr r2, _08069910 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_80661A4
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069910: .4byte 0x0203CDE4

	thumb_func_start sub_8069914
sub_8069914: @ 0x08069914
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08069940 @ =0x0203CDE4
	ldr r2, _08069940 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_80665E4
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069940: .4byte 0x0203CDE4

	thumb_func_start sub_8069944
sub_8069944: @ 0x08069944
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08069970 @ =0x0203CDE4
	ldr r2, _08069970 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_806671C
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069970: .4byte 0x0203CDE4

	thumb_func_start sub_8069974
sub_8069974: @ 0x08069974
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _080699A0 @ =0x0203CDE4
	ldr r2, _080699A0 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_8066294
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080699A0: .4byte 0x0203CDE4

	thumb_func_start sub_80699A4
sub_80699A4: @ 0x080699A4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _080699D4 @ =0x0203CDE4
	ldr r2, _080699D4 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	movs r1, #0
	bl sub_8061188
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080699D4: .4byte 0x0203CDE4

	thumb_func_start sub_80699D8
sub_80699D8: @ 0x080699D8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08069A08 @ =0x0203CDE4
	ldr r2, _08069A08 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	bl sub_80611FC
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069A08: .4byte 0x0203CDE4

	thumb_func_start sub_8069A0C
sub_8069A0C: @ 0x08069A0C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08069A3C @ =0x0203CDE4
	ldr r2, _08069A3C @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	bl MU_Hide
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069A3C: .4byte 0x0203CDE4

	thumb_func_start sub_8069A40
sub_8069A40: @ 0x08069A40
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08069AAC @ =0x0203CDE4
	ldr r2, _08069AAC @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r1, _08069AB0 @ =gBmSt
	movs r3, #0xc
	ldrsh r2, [r1, r3]
	subs r1, r0, r2
	adds r0, r1, #0
	adds r0, #8
	ldr r1, _08069AAC @ =0x0203CDE4
	ldr r3, _08069AAC @ =0x0203CDE4
	adds r2, r3, #0
	adds r3, #0x59
	ldrb r2, [r3]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	adds r2, r1, #0
	lsls r1, r2, #4
	ldr r2, _08069AB0 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	subs r1, r1, r3
	adds r2, r1, #0
	adds r2, #8
	adds r1, r2, #0
	bl sub_80689F0
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069AAC: .4byte 0x0203CDE4
_08069AB0: .4byte gBmSt

	thumb_func_start sub_8069AB4
sub_8069AB4: @ 0x08069AB4
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08069B30 @ =gPlaySt
	ldrb r1, [r0, #0x1d]
	lsls r2, r1, #0x1e
	lsrs r0, r2, #0x1f
	cmp r0, #0
	bne _08069ACE
	movs r0, #0xb5
	bl m4aSongNumStart
_08069ACE:
	ldr r0, _08069B34 @ =0x0203CDE4
	ldr r2, _08069B34 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r1, _08069B38 @ =gBmSt
	movs r3, #0xc
	ldrsh r2, [r1, r3]
	subs r1, r0, r2
	adds r0, r1, #0
	adds r0, #8
	ldr r1, _08069B34 @ =0x0203CDE4
	ldr r3, _08069B34 @ =0x0203CDE4
	adds r2, r3, #0
	adds r3, #0x59
	ldrb r2, [r3]
	adds r4, r2, #0
	lsls r3, r4, #2
	adds r3, r3, r2
	lsls r2, r3, #2
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	adds r2, r1, #0
	lsls r1, r2, #4
	ldr r2, _08069B38 @ =gBmSt
	movs r4, #0xe
	ldrsh r3, [r2, r4]
	subs r1, r1, r3
	adds r2, r1, #0
	adds r2, #8
	adds r1, r2, #0
	bl sub_8068A1C
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069B30: .4byte gPlaySt
_08069B34: .4byte 0x0203CDE4
_08069B38: .4byte gBmSt

	thumb_func_start sub_8069B3C
sub_8069B3C: @ 0x08069B3C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08069B6C @ =0x0203CDE4
	ldr r2, _08069B6C @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r2, [r1]
	adds r0, r2, #0
	bl sub_80610D0
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069B6C: .4byte 0x0203CDE4

	thumb_func_start sub_8069B70
sub_8069B70: @ 0x08069B70
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r0, _08069C00 @ =0x0203CDE4
	ldr r2, _08069C00 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	str r1, [r7, #4]
	ldr r0, _08069C00 @ =0x0203CDE4
	ldr r2, _08069C00 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x59
	ldrb r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #2
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, #8
	adds r1, r0, r1
	ldr r0, [r1]
	ldr r2, _08069C00 @ =0x0203CDE4
	adds r1, r2, #0
	adds r2, #0x60
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #4
	ldr r3, _08069C00 @ =0x0203CDE4
	adds r2, r3, #0
	adds r3, #0x61
	ldrb r2, [r3]
	adds r3, r2, #0
	lsls r2, r3, #4
	bl sub_80610F0
	ldr r0, [r7, #4]
	ldr r1, _08069C00 @ =0x0203CDE4
	adds r2, r1, #0
	adds r1, #0x60
	ldrb r2, [r0, #0xe]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0, #0xe]
	ldr r0, [r7, #4]
	ldr r1, _08069C00 @ =0x0203CDE4
	adds r2, r1, #0
	adds r1, #0x61
	ldrb r2, [r0, #0xf]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0, #0xf]
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069C00: .4byte 0x0203CDE4

	thumb_func_start sub_8069C04
sub_8069C04: @ 0x08069C04
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl sub_80684EC
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8069C1C
sub_8069C1C: @ 0x08069C1C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl sub_8068578
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8069C34
sub_8069C34: @ 0x08069C34
	push {r7, lr}
	mov r7, sp
	ldr r1, _08069C64 @ =0x0203CE48
	adds r0, r1, #0
	bl sub_806A44C
	ldr r1, _08069C68 @ =0x0203D0C8
	adds r0, r1, #0
	bl sub_806A44C
	ldr r0, _08069C6C @ =0x0203D348
	ldr r1, _08069C64 @ =0x0203CE48
	str r1, [r0]
	ldr r0, _08069C6C @ =0x0203D348
	ldr r1, _08069C68 @ =0x0203D0C8
	str r1, [r0, #4]
	ldr r0, _08069C70 @ =0x0203D350
	ldr r1, _08069C6C @ =0x0203D348
	ldr r2, [r1]
	str r2, [r0]
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069C64: .4byte 0x0203CE48
_08069C68: .4byte 0x0203D0C8
_08069C6C: .4byte 0x0203D348
_08069C70: .4byte 0x0203D350

	thumb_func_start sub_8069C74
sub_8069C74: @ 0x08069C74
	push {r7, lr}
	mov r7, sp
	ldr r0, _08069D9C @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08069D9C @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08069D9C @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08069D9C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2d
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08069D9C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x31
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08069D9C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xf0
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08069D9C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x30
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xa0
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08069D9C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0xfe
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08069D9C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0xfd
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08069D9C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0xfb
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08069D9C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0xf7
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08069D9C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0xef
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08069D9C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08069D9C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08069D9C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #4
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08069D9C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08069D9C @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _08069DA0 @ =sub_8069DE8
	adds r0, r1, #0
	bl SetOnHBlankA
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069D9C: .4byte gDispIo
_08069DA0: .4byte sub_8069DE8

	thumb_func_start sub_8069DA4
sub_8069DA4: @ 0x08069DA4
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, _08069DD4 @ =0x0203D348
	ldr r1, [r0, #4]
	adds r0, r1, #0
	bl sub_806A44C
	ldr r1, _08069DD4 @ =0x0203D348
	ldr r0, [r1, #4]
	ldr r2, [r7, #4]
	ldr r3, [r7, #8]
	ldr r1, [r7]
	bl sub_806A51C
	bl sub_806A424
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069DD4: .4byte 0x0203D348

	thumb_func_start sub_8069DD8
sub_8069DD8: @ 0x08069DD8
	push {r7, lr}
	mov r7, sp
	movs r0, #0
	bl SetOnHBlankA
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8069DE8
sub_8069DE8: @ 0x08069DE8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r0, r7, #0
	ldr r1, _08069E10 @ =0x04000006
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, r7, #0
	ldrh r1, [r0]
	cmp r1, #0x9f
	bls _08069E1C
	ldr r0, _08069E14 @ =0x0203D350
	ldr r1, _08069E18 @ =0x0203D348
	ldr r2, [r1]
	str r2, [r0]
	adds r0, r7, #0
	movs r1, #0
	strh r1, [r0]
	b _08069E2A
	.align 2, 0
_08069E10: .4byte 0x04000006
_08069E14: .4byte 0x0203D350
_08069E18: .4byte 0x0203D348
_08069E1C:
	adds r1, r7, #0
	adds r0, r7, #0
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r1, r2, #1
	adds r2, r1, #0
	strh r2, [r0]
_08069E2A:
	ldr r0, _08069E48 @ =0x04000040
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _08069E4C @ =0x0203D350
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069E48: .4byte 0x04000040
_08069E4C: .4byte 0x0203D350

	thumb_func_start sub_8069E50
sub_8069E50: @ 0x08069E50
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r0, r7, #0
	ldr r1, _08069E78 @ =0x04000006
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, r7, #0
	ldrh r1, [r0]
	cmp r1, #0x9f
	bls _08069E84
	ldr r0, _08069E7C @ =0x0203D350
	ldr r1, _08069E80 @ =0x0203D348
	ldr r2, [r1]
	str r2, [r0]
	adds r0, r7, #0
	movs r1, #0
	strh r1, [r0]
	b _08069E92
	.align 2, 0
_08069E78: .4byte 0x04000006
_08069E7C: .4byte 0x0203D350
_08069E80: .4byte 0x0203D348
_08069E84:
	adds r1, r7, #0
	adds r0, r7, #0
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r1, r2, #1
	adds r2, r1, #0
	strh r2, [r0]
_08069E92:
	ldr r0, _08069EC8 @ =0x04000040
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _08069ECC @ =0x0203D350
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
	ldr r0, _08069ED0 @ =0x04000018
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _08069ECC @ =0x0203D350
	ldr r2, [r3]
	adds r1, r1, r2
	movs r3, #0xa0
	lsls r3, r3, #1
	adds r2, r1, r3
	ldrh r1, [r2]
	strh r1, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069EC8: .4byte 0x04000040
_08069ECC: .4byte 0x0203D350
_08069ED0: .4byte 0x04000018

	thumb_func_start sub_8069ED4
sub_8069ED4: @ 0x08069ED4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r0, r7, #0
	ldr r1, _08069EFC @ =0x04000006
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, r7, #0
	ldrh r1, [r0]
	cmp r1, #0x9f
	bls _08069F08
	ldr r0, _08069F00 @ =0x0203D350
	ldr r1, _08069F04 @ =0x0203D348
	ldr r2, [r1]
	str r2, [r0]
	adds r0, r7, #0
	movs r1, #0
	strh r1, [r0]
	b _08069F16
	.align 2, 0
_08069EFC: .4byte 0x04000006
_08069F00: .4byte 0x0203D350
_08069F04: .4byte 0x0203D348
_08069F08:
	adds r1, r7, #0
	adds r0, r7, #0
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r1, r2, #1
	adds r2, r1, #0
	strh r2, [r0]
_08069F16:
	ldr r0, _08069F4C @ =0x05000022
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _08069F50 @ =0x0203D350
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
	ldr r0, _08069F54 @ =0x05000042
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _08069F50 @ =0x0203D350
	ldr r2, [r3]
	adds r1, r1, r2
	movs r3, #0xa0
	lsls r3, r3, #1
	adds r2, r1, r3
	ldrh r1, [r2]
	strh r1, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069F4C: .4byte 0x05000022
_08069F50: .4byte 0x0203D350
_08069F54: .4byte 0x05000042

	thumb_func_start sub_8069F58
sub_8069F58: @ 0x08069F58
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r0, r7, #0
	ldr r1, _08069F80 @ =0x04000006
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, r7, #0
	ldrh r1, [r0]
	cmp r1, #0x9f
	bls _08069F8C
	ldr r0, _08069F84 @ =0x0203D350
	ldr r1, _08069F88 @ =0x0203D348
	ldr r2, [r1]
	str r2, [r0]
	adds r0, r7, #0
	movs r1, #0
	strh r1, [r0]
	b _08069F9A
	.align 2, 0
_08069F80: .4byte 0x04000006
_08069F84: .4byte 0x0203D350
_08069F88: .4byte 0x0203D348
_08069F8C:
	adds r1, r7, #0
	adds r0, r7, #0
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r1, r2, #1
	adds r2, r1, #0
	strh r2, [r0]
_08069F9A:
	ldr r0, _08069FCC @ =0x05000328
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _08069FD0 @ =0x0203D350
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
	ldr r0, _08069FD4 @ =0x050003A8
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _08069FD0 @ =0x0203D350
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08069FCC: .4byte 0x05000328
_08069FD0: .4byte 0x0203D350
_08069FD4: .4byte 0x050003A8

	thumb_func_start sub_8069FD8
sub_8069FD8: @ 0x08069FD8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r0, r7, #0
	ldr r1, _0806A000 @ =0x04000006
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, r7, #0
	ldrh r1, [r0]
	cmp r1, #0x9f
	bls _0806A00C
	ldr r0, _0806A004 @ =0x0203D350
	ldr r1, _0806A008 @ =0x0203D348
	ldr r2, [r1]
	str r2, [r0]
	adds r0, r7, #0
	movs r1, #0
	strh r1, [r0]
	b _0806A01A
	.align 2, 0
_0806A000: .4byte 0x04000006
_0806A004: .4byte 0x0203D350
_0806A008: .4byte 0x0203D348
_0806A00C:
	adds r1, r7, #0
	adds r0, r7, #0
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r1, r2, #1
	adds r2, r1, #0
	strh r2, [r0]
_0806A01A:
	ldr r0, _0806A038 @ =0x04000052
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _0806A03C @ =0x0203D350
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806A038: .4byte 0x04000052
_0806A03C: .4byte 0x0203D350

	thumb_func_start sub_806A040
sub_806A040: @ 0x0806A040
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	adds r0, r7, #0
	ldr r1, _0806A068 @ =0x04000006
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, r7, #0
	ldrh r1, [r0]
	cmp r1, #0x9f
	bls _0806A074
	ldr r0, _0806A06C @ =0x0203D350
	ldr r1, _0806A070 @ =0x0203D348
	ldr r2, [r1]
	str r2, [r0]
	adds r0, r7, #0
	movs r1, #0
	strh r1, [r0]
	b _0806A082
	.align 2, 0
_0806A068: .4byte 0x04000006
_0806A06C: .4byte 0x0203D350
_0806A070: .4byte 0x0203D348
_0806A074:
	adds r1, r7, #0
	adds r0, r7, #0
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r1, r2, #1
	adds r2, r1, #0
	strh r2, [r0]
_0806A082:
	ldr r0, _0806A0CC @ =0x04000012
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _0806A0D0 @ =0x0203D350
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
	ldr r0, _0806A0D4 @ =0x04000010
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _0806A0D0 @ =0x0203D350
	ldr r2, [r3]
	adds r1, r1, r2
	ldrh r2, [r1]
	strh r2, [r0]
	ldr r0, _0806A0D8 @ =0x04000016
	adds r1, r7, #0
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #1
	ldr r3, _0806A0D0 @ =0x0203D350
	ldr r2, [r3]
	adds r1, r1, r2
	movs r3, #0xa0
	lsls r3, r3, #1
	adds r2, r1, r3
	ldrh r1, [r2]
	strh r1, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806A0CC: .4byte 0x04000012
_0806A0D0: .4byte 0x0203D350
_0806A0D4: .4byte 0x04000010
_0806A0D8: .4byte 0x04000016

	thumb_func_start sub_806A0DC
sub_806A0DC: @ 0x0806A0DC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	add r7, sp, #4
	adds r5, r0, #0
	adds r4, r1, #0
	adds r1, r2, #0
	adds r0, r3, #0
	adds r2, r7, #0
	adds r3, r5, #0
	strh r3, [r2]
	adds r2, r7, #2
	adds r3, r4, #0
	strh r3, [r2]
	adds r2, r7, #4
	strh r1, [r2]
	adds r1, r7, #6
	strh r0, [r1]
	ldr r1, _0806A210 @ =0x0203D348
	ldr r0, [r1, #4]
	adds r2, r7, #0
	ldrh r1, [r2]
	adds r3, r7, #2
	ldrh r2, [r3]
	adds r4, r7, #4
	ldrh r3, [r4]
	adds r4, r7, #4
	ldrh r5, [r4]
	movs r6, #0x1f
	adds r4, r5, #0
	ands r4, r6
	adds r6, r4, #0
	lsls r5, r6, #0x10
	lsrs r4, r5, #0x10
	lsrs r5, r4, #1
	adds r4, r5, #0
	movs r5, #0x1f
	ands r4, r5
	adds r5, r7, #4
	ldrh r6, [r5]
	movs r5, #0xf8
	lsls r5, r5, #2
	mov r8, r5
	mov r5, r8
	ands r5, r6
	mov r8, r5
	mov r5, r8
	lsls r6, r5, #0x10
	lsrs r5, r6, #0x10
	lsrs r6, r5, #1
	adds r5, r6, #0
	movs r6, #0xf8
	lsls r6, r6, #2
	ands r5, r6
	orrs r4, r5
	adds r5, r7, #4
	ldrh r6, [r5]
	movs r5, #0xf8
	lsls r5, r5, #7
	mov r8, r5
	mov r5, r8
	ands r5, r6
	mov r8, r5
	mov r5, r8
	lsls r6, r5, #0x10
	lsrs r5, r6, #0x10
	lsrs r6, r5, #1
	adds r5, r6, #0
	movs r6, #0xf8
	lsls r6, r6, #7
	ands r5, r6
	orrs r4, r5
	adds r6, r4, #0
	lsls r5, r6, #0x10
	lsrs r4, r5, #0x10
	str r4, [sp]
	bl sub_806A600
	ldr r0, _0806A210 @ =0x0203D348
	ldr r1, [r0, #4]
	movs r2, #0xa0
	lsls r2, r2, #1
	adds r0, r1, r2
	adds r2, r7, #0
	ldrh r1, [r2]
	adds r3, r7, #2
	ldrh r2, [r3]
	adds r4, r7, #6
	ldrh r3, [r4]
	adds r4, r7, #6
	ldrh r5, [r4]
	movs r6, #0x1f
	adds r4, r5, #0
	ands r4, r6
	adds r6, r4, #0
	lsls r5, r6, #0x10
	lsrs r4, r5, #0x10
	lsrs r5, r4, #1
	adds r4, r5, #0
	movs r5, #0x1f
	ands r4, r5
	adds r5, r7, #6
	ldrh r6, [r5]
	movs r5, #0xf8
	lsls r5, r5, #2
	mov r8, r5
	mov r5, r8
	ands r5, r6
	mov r8, r5
	mov r5, r8
	lsls r6, r5, #0x10
	lsrs r5, r6, #0x10
	lsrs r6, r5, #1
	adds r5, r6, #0
	movs r6, #0xf8
	lsls r6, r6, #2
	ands r5, r6
	orrs r4, r5
	adds r5, r7, #6
	ldrh r6, [r5]
	movs r5, #0xf8
	lsls r5, r5, #7
	mov r8, r5
	mov r5, r8
	ands r5, r6
	mov r8, r5
	mov r5, r8
	lsls r6, r5, #0x10
	lsrs r5, r6, #0x10
	lsrs r6, r5, #1
	adds r5, r6, #0
	movs r6, #0xf8
	lsls r6, r6, #7
	ands r5, r6
	orrs r4, r5
	adds r6, r4, #0
	lsls r5, r6, #0x10
	lsrs r4, r5, #0x10
	str r4, [sp]
	bl sub_806A600
	bl sub_806A424
	ldr r1, _0806A214 @ =sub_8069ED4
	adds r0, r1, #0
	bl SetOnHBlankA
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806A210: .4byte 0x0203D348
_0806A214: .4byte sub_8069ED4

	thumb_func_start sub_806A218
sub_806A218: @ 0x0806A218
	push {r4, r5, r7, lr}
	sub sp, #0xc
	add r7, sp, #4
	adds r5, r0, #0
	adds r4, r1, #0
	adds r1, r2, #0
	adds r0, r3, #0
	adds r2, r7, #0
	adds r3, r5, #0
	strh r3, [r2]
	adds r2, r7, #2
	adds r3, r4, #0
	strh r3, [r2]
	adds r2, r7, #4
	strh r1, [r2]
	adds r1, r7, #6
	strh r0, [r1]
	ldr r1, _0806A268 @ =0x0203D348
	ldr r0, [r1, #4]
	adds r2, r7, #0
	ldrh r1, [r2]
	adds r3, r7, #2
	ldrh r2, [r3]
	adds r4, r7, #4
	ldrh r3, [r4]
	adds r4, r7, #6
	ldrh r5, [r4]
	str r5, [sp]
	bl sub_806A600
	bl sub_806A424
	ldr r1, _0806A26C @ =sub_8069F58
	adds r0, r1, #0
	bl SetOnHBlankA
	add sp, #0xc
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806A268: .4byte 0x0203D348
_0806A26C: .4byte sub_8069F58

	thumb_func_start sub_806A270
sub_806A270: @ 0x0806A270
	push {r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, _0806A298 @ =0x0203D348
	ldr r1, [r0, #4]
	adds r0, r1, #0
	bl sub_806A44C
_0806A288:
	ldr r0, [r7, #0x1c]
	ldrb r1, [r0]
	cmp r1, #0xff
	beq _0806A29C
	ldr r0, [r7, #4]
	cmp r0, #0
	bge _0806A29E
	b _0806A29C
	.align 2, 0
_0806A298: .4byte 0x0203D348
_0806A29C:
	b _0806A2EC
_0806A29E:
	ldr r0, [r7, #0x1c]
	ldrb r1, [r0]
	ldr r2, [r7, #8]
	adds r0, r1, #0
	muls r0, r2, r0
	ldr r1, [r7, #0xc]
	bl Div
	str r0, [r7, #0x10]
	ldr r0, [r7, #0x1c]
	adds r1, r0, #1
	str r1, [r7, #0x1c]
	ldr r0, [r7, #0x10]
	cmp r0, #0
	ble _0806A2DE
	ldr r1, _0806A2E8 @ =0x0203D348
	ldr r0, [r1, #4]
	ldr r1, [r7]
	ldr r3, [r7, #0x10]
	adds r2, r1, r3
	subs r1, r2, #1
	ldr r2, [r7, #4]
	bl sub_806A4D4
	ldr r1, _0806A2E8 @ =0x0203D348
	ldr r0, [r1, #4]
	ldr r1, [r7]
	ldr r2, [r7, #0x10]
	subs r1, r1, r2
	ldr r2, [r7, #4]
	bl sub_806A488
_0806A2DE:
	ldr r0, [r7, #4]
	subs r1, r0, #1
	str r1, [r7, #4]
	b _0806A288
	.align 2, 0
_0806A2E8: .4byte 0x0203D348
_0806A2EC:
	ldr r0, [r7, #0x10]
	cmp r0, #0
	ble _0806A328
_0806A2F2:
	ldr r0, [r7, #4]
	cmp r0, #0
	bge _0806A2FA
	b _0806A328
_0806A2FA:
	ldr r1, _0806A324 @ =0x0203D348
	ldr r0, [r1, #4]
	ldr r1, [r7]
	ldr r3, [r7, #0x10]
	adds r2, r1, r3
	subs r1, r2, #1
	ldr r2, [r7, #4]
	bl sub_806A4D4
	ldr r1, _0806A324 @ =0x0203D348
	ldr r0, [r1, #4]
	ldr r1, [r7]
	ldr r2, [r7, #0x10]
	subs r1, r1, r2
	ldr r2, [r7, #4]
	bl sub_806A488
	ldr r0, [r7, #4]
	subs r1, r0, #1
	str r1, [r7, #4]
	b _0806A2F2
	.align 2, 0
_0806A324: .4byte 0x0203D348
_0806A328:
	add sp, #0x14
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_806A330
sub_806A330: @ 0x0806A330
	push {r4, r5, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	adds r4, r1, #0
	adds r1, r2, #0
	adds r0, r3, #0
	adds r2, r7, #4
	adds r3, r4, #0
	strh r3, [r2]
	adds r2, r7, #6
	strh r1, [r2]
	adds r1, r7, #0
	adds r1, #8
	strh r0, [r1]
	movs r0, #0
	str r0, [r7, #0xc]
_0806A352:
	ldr r0, [r7, #0xc]
	cmp r0, #0x9f
	ble _0806A35A
	b _0806A3A0
_0806A35A:
	ldr r0, [r7]
	ldr r1, _0806A39C @ =gSinLut
	adds r2, r7, #0
	adds r2, #8
	movs r4, #0
	ldrsh r3, [r2, r4]
	ldr r4, [r7, #0xc]
	adds r2, r3, #0
	muls r2, r4, r2
	adds r3, r7, #4
	movs r5, #0
	ldrsh r4, [r3, r5]
	adds r2, r2, r4
	movs r3, #0xff
	ands r2, r3
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r3, r1, r2
	movs r2, #0
	ldrsh r1, [r3, r2]
	adds r2, r7, #6
	movs r4, #0
	ldrsh r3, [r2, r4]
	muls r1, r3, r1
	asrs r2, r1, #0xc
	adds r1, r2, #0
	strh r1, [r0]
	adds r0, #2
	str r0, [r7]
	ldr r0, [r7, #0xc]
	adds r1, r0, #1
	str r1, [r7, #0xc]
	b _0806A352
	.align 2, 0
_0806A39C: .4byte gSinLut
_0806A3A0:
	add sp, #0x10
	pop {r4, r5, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_806A3A8
sub_806A3A8: @ 0x0806A3A8
	push {r4, r5, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	adds r4, r1, #0
	adds r1, r2, #0
	adds r0, r3, #0
	adds r2, r7, #4
	adds r3, r4, #0
	strh r3, [r2]
	adds r2, r7, #6
	strh r1, [r2]
	adds r1, r7, #0
	adds r1, #8
	strh r0, [r1]
	ldr r0, [r7, #0x20]
	str r0, [r7, #0xc]
_0806A3CA:
	ldr r0, [r7, #0xc]
	ldr r1, [r7, #0x24]
	cmp r0, r1
	blt _0806A3D4
	b _0806A41C
_0806A3D4:
	ldr r0, [r7]
	ldr r1, _0806A418 @ =gSinLut
	adds r2, r7, #0
	adds r2, #8
	movs r4, #0
	ldrsh r3, [r2, r4]
	ldr r4, [r7, #0xc]
	adds r2, r3, #0
	muls r2, r4, r2
	adds r3, r7, #4
	movs r5, #0
	ldrsh r4, [r3, r5]
	adds r2, r2, r4
	movs r3, #0xff
	ands r2, r3
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r3, r1, r2
	movs r2, #0
	ldrsh r1, [r3, r2]
	adds r2, r7, #6
	movs r4, #0
	ldrsh r3, [r2, r4]
	muls r1, r3, r1
	asrs r2, r1, #0xc
	adds r1, r2, #0
	strh r1, [r0]
	adds r0, #2
	str r0, [r7]
	ldr r0, [r7, #0xc]
	adds r1, r0, #1
	str r1, [r7, #0xc]
	b _0806A3CA
	.align 2, 0
_0806A418: .4byte gSinLut
_0806A41C:
	add sp, #0x10
	pop {r4, r5, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_806A424
sub_806A424: @ 0x0806A424
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	ldr r0, _0806A448 @ =0x0203D348
	ldr r1, [r0]
	str r1, [r7]
	ldr r0, _0806A448 @ =0x0203D348
	ldr r1, _0806A448 @ =0x0203D348
	ldr r2, [r1, #4]
	str r2, [r0]
	ldr r0, _0806A448 @ =0x0203D348
	ldr r1, [r7]
	str r1, [r0, #4]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806A448: .4byte 0x0203D348

	thumb_func_start sub_806A44C
sub_806A44C: @ 0x0806A44C
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	str r0, [r7, #8]
	movs r0, #0
	str r0, [r7, #4]
_0806A45C:
	ldr r0, [r7, #4]
	cmp r0, #0x9f
	ble _0806A464
	b _0806A480
_0806A464:
	adds r0, r7, #0
	adds r0, #8
	ldr r1, [r0]
	ldr r3, _0806A47C @ =0x0000F0F0
	adds r2, r3, #0
	strh r2, [r1]
	adds r1, #2
	str r1, [r0]
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _0806A45C
	.align 2, 0
_0806A47C: .4byte 0x0000F0F0
_0806A480:
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_806A488
sub_806A488: @ 0x0806A488
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, [r7, #4]
	cmp r0, #0
	bge _0806A49E
	movs r0, #0
	str r0, [r7, #4]
_0806A49E:
	ldr r0, [r7, #4]
	cmp r0, #0xef
	ble _0806A4A8
	movs r0, #0xef
	str r0, [r7, #4]
_0806A4A8:
	ldr r0, [r7, #8]
	cmp r0, #0
	blt _0806A4B6
	ldr r0, [r7, #8]
	cmp r0, #0x9f
	bgt _0806A4B6
	b _0806A4B8
_0806A4B6:
	b _0806A4CA
_0806A4B8:
	ldr r0, [r7, #8]
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r2, [r7]
	adds r1, r0, r2
	adds r0, r1, #1
	ldr r1, [r7, #4]
	adds r2, r1, #0
	strb r2, [r0]
_0806A4CA:
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806A4D4
sub_806A4D4: @ 0x0806A4D4
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, [r7, #4]
	cmp r0, #0
	bge _0806A4EA
	movs r0, #0
	str r0, [r7, #4]
_0806A4EA:
	ldr r0, [r7, #4]
	cmp r0, #0xef
	ble _0806A4F4
	movs r0, #0xef
	str r0, [r7, #4]
_0806A4F4:
	ldr r0, [r7, #8]
	cmp r0, #0
	blt _0806A502
	ldr r0, [r7, #8]
	cmp r0, #0x9f
	bgt _0806A502
	b _0806A504
_0806A502:
	b _0806A514
_0806A504:
	ldr r0, [r7, #8]
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, [r7]
	adds r0, r0, r1
	ldr r1, [r7, #4]
	adds r2, r1, #0
	strb r2, [r0]
_0806A514:
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_806A51C
sub_806A51C: @ 0x0806A51C
	push {r7, lr}
	sub sp, #0x18
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, [r7, #0xc]
	str r0, [r7, #0x10]
	movs r0, #0
	str r0, [r7, #0x14]
_0806A532:
	ldr r0, [r7, #0x10]
	ldr r1, [r7, #0x14]
	cmp r0, r1
	bge _0806A53C
	b _0806A5F8
_0806A53C:
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x10]
	adds r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x14]
	adds r2, r0, r3
	ldr r0, [r7]
	bl sub_806A4D4
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x10]
	adds r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x14]
	subs r2, r0, r3
	ldr r0, [r7]
	bl sub_806A4D4
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x14]
	adds r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x10]
	adds r2, r0, r3
	ldr r0, [r7]
	bl sub_806A4D4
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x14]
	adds r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x10]
	subs r2, r0, r3
	ldr r0, [r7]
	bl sub_806A4D4
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x10]
	subs r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x14]
	adds r2, r0, r3
	ldr r0, [r7]
	bl sub_806A488
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x10]
	subs r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x14]
	subs r2, r0, r3
	ldr r0, [r7]
	bl sub_806A488
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x14]
	subs r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x10]
	adds r2, r0, r3
	ldr r0, [r7]
	bl sub_806A488
	ldr r0, [r7, #4]
	ldr r2, [r7, #0x14]
	subs r1, r0, r2
	ldr r0, [r7, #8]
	ldr r3, [r7, #0x10]
	subs r2, r0, r3
	ldr r0, [r7]
	bl sub_806A488
	ldr r1, [r7, #0xc]
	adds r0, r1, #1
	ldr r2, [r7, #0x14]
	lsls r1, r2, #1
	subs r0, r0, r1
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bge _0806A5F0
	ldr r1, [r7, #0x10]
	subs r0, r1, #1
	lsls r1, r0, #1
	ldr r0, [r7, #0xc]
	adds r1, r0, r1
	str r1, [r7, #0xc]
	ldr r0, [r7, #0x10]
	subs r1, r0, #1
	str r1, [r7, #0x10]
_0806A5F0:
	ldr r0, [r7, #0x14]
	adds r1, r0, #1
	str r1, [r7, #0x14]
	b _0806A532
_0806A5F8:
	add sp, #0x18
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_806A600
sub_806A600: @ 0x0806A600
	push {r4, r7, lr}
	sub sp, #0x28
	add r7, sp, #4
	str r0, [r7]
	adds r4, r1, #0
	adds r1, r3, #0
	ldr r0, [r7, #0x30]
	adds r3, r7, #4
	strh r4, [r3]
	adds r3, r7, #6
	strh r2, [r3]
	adds r2, r7, #0
	adds r2, #8
	strh r1, [r2]
	adds r1, r7, #0
	adds r1, #0xa
	strh r0, [r1]
	adds r1, r7, #6
	ldrh r0, [r1]
	adds r1, r7, #4
	ldrh r2, [r1]
	subs r0, r0, r2
	str r0, [r7, #0x20]
	movs r0, #0
	str r0, [r7, #0x10]
	movs r0, #0
	str r0, [r7, #0xc]
_0806A636:
	ldr r0, [r7, #0xc]
	cmp r0, #0x9f
	ble _0806A63E
	b _0806A748
_0806A63E:
	adds r0, r7, #4
	ldrh r1, [r0]
	ldr r0, [r7, #0xc]
	cmp r0, r1
	bge _0806A658
	ldr r0, [r7]
	adds r1, r7, #0
	adds r1, #8
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, #2
	str r0, [r7]
	b _0806A740
_0806A658:
	adds r0, r7, #6
	ldrh r1, [r0]
	ldr r0, [r7, #0xc]
	cmp r0, r1
	ble _0806A672
	ldr r0, [r7]
	adds r1, r7, #0
	adds r1, #0xa
	ldrh r2, [r1]
	strh r2, [r0]
	adds r0, #2
	str r0, [r7]
	b _0806A740
_0806A672:
	adds r0, r7, #0
	adds r0, #8
	ldrh r1, [r0]
	movs r2, #0x1f
	adds r0, r1, #0
	ands r0, r2
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r1, r0, #0x10
	adds r0, r7, #0
	adds r0, #0xa
	ldrh r2, [r0]
	movs r3, #0x1f
	adds r0, r2, #0
	ands r0, r3
	adds r2, r0, #0
	lsls r0, r2, #0x10
	lsrs r2, r0, #0x10
	ldr r3, [r7, #0x10]
	ldr r0, [r7, #0x20]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	str r0, [r7, #0x14]
	adds r0, r7, #0
	adds r0, #8
	ldrh r1, [r0]
	movs r2, #0xf8
	lsls r2, r2, #2
	adds r0, r1, #0
	ands r0, r2
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r1, r0, #0x10
	adds r0, r7, #0
	adds r0, #0xa
	ldrh r2, [r0]
	movs r3, #0xf8
	lsls r3, r3, #2
	adds r0, r2, #0
	ands r0, r3
	adds r2, r0, #0
	lsls r0, r2, #0x10
	lsrs r2, r0, #0x10
	ldr r3, [r7, #0x10]
	ldr r0, [r7, #0x20]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	str r0, [r7, #0x18]
	adds r0, r7, #0
	adds r0, #8
	ldrh r1, [r0]
	movs r2, #0xf8
	lsls r2, r2, #7
	adds r0, r1, #0
	ands r0, r2
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r1, r0, #0x10
	adds r0, r7, #0
	adds r0, #0xa
	ldrh r2, [r0]
	movs r3, #0xf8
	lsls r3, r3, #7
	adds r0, r2, #0
	ands r0, r3
	adds r2, r0, #0
	lsls r0, r2, #0x10
	lsrs r2, r0, #0x10
	ldr r3, [r7, #0x10]
	ldr r0, [r7, #0x20]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	str r0, [r7, #0x1c]
	ldr r0, [r7]
	ldr r2, [r7, #0x14]
	adds r1, r2, #0
	movs r2, #0x1f
	ands r1, r2
	ldr r3, [r7, #0x18]
	adds r2, r3, #0
	movs r3, #0xf8
	lsls r3, r3, #2
	ands r2, r3
	orrs r1, r2
	ldr r3, [r7, #0x1c]
	adds r2, r3, #0
	movs r3, #0xf8
	lsls r3, r3, #7
	ands r2, r3
	orrs r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	adds r0, #2
	str r0, [r7]
	ldr r0, [r7, #0x10]
	adds r1, r0, #1
	str r1, [r7, #0x10]
_0806A740:
	ldr r0, [r7, #0xc]
	adds r1, r0, #1
	str r1, [r7, #0xc]
	b _0806A636
_0806A748:
	add sp, #0x28
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_806A750
sub_806A750: @ 0x0806A750
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_806A770
sub_806A770: @ 0x0806A770
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _0806A7A8 @ =0x0203D348
	ldr r1, [r0, #4]
	movs r2, #0xa0
	lsls r2, r2, #1
	adds r0, r1, r2
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x64
	ldrh r2, [r1]
	adds r3, r2, #1
	adds r4, r3, #0
	strh r4, [r1]
	lsls r2, r2, #0x10
	asrs r1, r2, #0x10
	movs r2, #0x10
	movs r3, #8
	bl sub_806A330
	bl sub_806A424
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806A7A8: .4byte 0x0203D348

	thumb_func_start sub_806A7AC
sub_806A7AC: @ 0x0806A7AC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	movs r0, #0
	str r0, [r7]
_0806A7B6:
	ldr r0, [r7]
	cmp r0, #0x9f
	ble _0806A7BE
	b _0806A7E0
_0806A7BE:
	ldr r0, _0806A7DC @ =0x0203D348
	ldr r1, [r7]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r2, [r0]
	adds r0, r1, r2
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, [r7]
	adds r1, r0, #1
	str r1, [r7]
	b _0806A7B6
	.align 2, 0
_0806A7DC: .4byte 0x0203D348
_0806A7E0:
	movs r0, #8
	str r0, [r7]
_0806A7E4:
	ldr r0, [r7]
	cmp r0, #0x97
	ble _0806A7EC
	b _0806A808
_0806A7EC:
	ldr r0, _0806A804 @ =0x0203D348
	ldr r1, [r7]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r2, [r0]
	adds r0, r1, r2
	movs r1, #0x10
	strh r1, [r0]
	ldr r0, [r7]
	adds r1, r0, #1
	str r1, [r7]
	b _0806A7E4
	.align 2, 0
_0806A804: .4byte 0x0203D348
_0806A808:
	movs r0, #0
	str r0, [r7]
_0806A80C:
	ldr r0, [r7]
	cmp r0, #0x20
	ble _0806A814
	b _0806A874
_0806A814:
	ldr r0, _0806A86C @ =0x0203D348
	ldr r1, [r7]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r0, [r0]
	adds r1, r1, r0
	adds r0, r1, #0
	adds r0, #0x10
	ldr r2, [r7]
	asrs r1, r2, #1
	adds r2, r1, #0
	movs r3, #0x10
	subs r1, r3, r2
	adds r2, r1, #0
	lsls r1, r2, #8
	ldr r3, [r7]
	asrs r2, r3, #1
	orrs r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _0806A86C @ =0x0203D348
	ldr r1, [r7]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r3, _0806A870 @ =0xFFFFFED0
	adds r2, r1, r3
	ldr r1, [r0]
	subs r0, r1, r2
	ldr r2, [r7]
	asrs r1, r2, #1
	adds r2, r1, #0
	movs r3, #0x10
	subs r1, r3, r2
	adds r2, r1, #0
	lsls r1, r2, #8
	ldr r3, [r7]
	asrs r2, r3, #1
	orrs r1, r2
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #1
	str r1, [r7]
	b _0806A80C
	.align 2, 0
_0806A86C: .4byte 0x0203D348
_0806A870: .4byte 0xFFFFFED0
_0806A874:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_806A87C
sub_806A87C: @ 0x0806A87C
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, _0806A8A0 @ =0x0203D348
	ldr r1, [r7]
	adds r2, r1, #0
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #1
	ldr r0, [r0]
	adds r1, r1, r0
	adds r0, r1, #0
	b _0806A8A4
	.align 2, 0
_0806A8A0: .4byte 0x0203D348
_0806A8A4:
	add sp, #8
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_806A8AC
sub_806A8AC: @ 0x0806A8AC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #4]
	cmp r0, #0
	beq _0806A8C6
	ldr r0, [r4, #8]
	bl SetEid
	ldr r0, [r4, #4]
	cmp r0, #1
	beq _0806A8C6
	bl StartEvent
_0806A8C6:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_806A8CC
sub_806A8CC: @ 0x0806A8CC
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	movs r0, #0
	str r0, [r4, #4]
	str r0, [r4, #8]
	ldr r6, _0806A8DC @ =0x08666114
	adds r7, r6, #4
	b _0806A8EE
	.align 2, 0
_0806A8DC: .4byte 0x08666114
_0806A8E0:
	lsls r0, r5, #3
	adds r0, r0, r7
	ldr r1, [r0]
	lsls r1, r1, #2
	ldr r0, [r4]
	adds r0, r0, r1
	str r0, [r4]
_0806A8EE:
	ldr r0, [r4]
	ldrh r5, [r0]
	ldrh r0, [r0, #2]
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806A8E0
	lsls r0, r5, #3
	adds r0, r0, r6
	ldr r1, [r0]
	adds r0, r4, #0
	bl _call_via_r1
	cmp r0, #1
	bne _0806A8E0
	ldr r0, [r4, #4]
	cmp r0, #0
	bne _0806A918
	movs r0, #0
	b _0806A91A
_0806A918:
	adds r0, r4, #0
_0806A91A:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_806A920
sub_806A920: @ 0x0806A920
	push {r4, lr}
	adds r3, r0, #0
	cmp r3, #0
	bne _0806A92C
	movs r0, #0
	b _0806A946
_0806A92C:
	ldr r2, [r3]
	ldr r0, _0806A94C @ =0x08666114
	ldrh r4, [r2]
	lsls r1, r4, #3
	adds r0, #4
	adds r1, r1, r0
	ldr r0, [r1]
	lsls r0, r0, #2
	adds r2, r2, r0
	str r2, [r3]
	adds r0, r3, #0
	bl sub_806A8CC
_0806A946:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0806A94C: .4byte 0x08666114

	thumb_func_start sub_806A950
sub_806A950: @ 0x0806A950
	movs r0, #1
	bx lr

	thumb_func_start sub_806A954
sub_806A954: @ 0x0806A954
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4]
	ldrh r0, [r0, #8]
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806A96A
	movs r0, #0
	b _0806A976
_0806A96A:
	ldr r0, [r4]
	ldr r1, [r0, #4]
	str r1, [r4, #4]
	ldrh r0, [r0, #2]
	str r0, [r4, #8]
	movs r0, #1
_0806A976:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_806A97C
sub_806A97C: @ 0x0806A97C
	push {r4, r5, r6, lr}
	adds r3, r0, #0
	ldr r2, [r3]
	ldr r0, [r2, #8]
	ldrb r5, [r2, #8]
	movs r1, #0xff
	lsls r1, r1, #8
	ands r1, r0
	lsrs r4, r1, #8
	movs r1, #0xff
	lsls r1, r1, #0x10
	ands r0, r1
	lsrs r6, r0, #0x10
	cmp r4, #0
	bne _0806A9B0
	ldr r1, _0806A9AC @ =gPlaySt
	ldrh r0, [r1, #0x10]
	cmp r0, r5
	bne _0806A9D4
	ldrb r1, [r1, #0xf]
	cmp r1, r6
	bne _0806A9D4
	b _0806A9C2
	.align 2, 0
_0806A9AC: .4byte gPlaySt
_0806A9B0:
	ldr r0, _0806A9D0 @ =gPlaySt
	ldrh r1, [r0, #0x10]
	cmp r1, r5
	blt _0806A9D4
	cmp r1, r4
	bgt _0806A9D4
	ldrb r0, [r0, #0xf]
	cmp r0, r6
	bne _0806A9D4
_0806A9C2:
	ldr r0, [r2, #4]
	str r0, [r3, #4]
	ldrh r0, [r2, #2]
	str r0, [r3, #8]
	movs r0, #1
	b _0806A9D6
	.align 2, 0
_0806A9D0: .4byte gPlaySt
_0806A9D4:
	movs r0, #0
_0806A9D6:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_806A9DC
sub_806A9DC: @ 0x0806A9DC
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0806AA00 @ =gPlaySt
	movs r0, #0x40
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	beq _0806AA04
	movs r0, #2
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806AA04
	adds r0, r4, #0
	bl sub_806A97C
	b _0806AA06
	.align 2, 0
_0806AA00: .4byte gPlaySt
_0806AA04:
	movs r0, #0
_0806AA06:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_806AA0C
sub_806AA0C: @ 0x0806AA0C
	push {r4, lr}
	adds r3, r0, #0
	ldr r2, [r3]
	ldr r0, [r2, #8]
	movs r1, #0xff
	lsls r1, r1, #8
	ands r0, r1
	lsrs r0, r0, #8
	ldrb r1, [r3, #0x1a]
	ldrb r4, [r2, #8]
	cmp r1, r4
	bne _0806AA36
	ldrb r1, [r3, #0x1b]
	cmp r1, r0
	bne _0806AA36
	ldr r0, [r2, #4]
	str r0, [r3, #4]
	ldrh r0, [r2, #2]
	str r0, [r3, #8]
	movs r0, #1
	b _0806AA38
_0806AA36:
	movs r0, #0
_0806AA38:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806AA40
sub_806AA40: @ 0x0806AA40
	push {r4, r5, r6, lr}
	adds r3, r0, #0
	ldr r4, [r3]
	ldr r1, [r4, #8]
	ldrb r2, [r4, #8]
	movs r0, #0xff
	lsls r0, r0, #8
	ands r0, r1
	lsrs r5, r0, #8
	movs r0, #0xff
	lsls r0, r0, #0x10
	ands r1, r0
	lsrs r1, r1, #0x10
	movs r6, #0
	str r6, [r3, #0x10]
	movs r0, #0x18
	ldrsb r0, [r3, r0]
	cmp r2, r0
	bne _0806AA82
	movs r0, #0x19
	ldrsb r0, [r3, r0]
	cmp r5, r0
	bne _0806AA82
	ldr r0, [r4, #4]
	str r0, [r3, #4]
	ldrh r0, [r4, #2]
	str r0, [r3, #8]
	str r1, [r3, #0xc]
	cmp r1, #0x12
	bne _0806AA7E
	str r6, [r3, #0x14]
_0806AA7E:
	movs r0, #1
	b _0806AA84
_0806AA82:
	movs r0, #0
_0806AA84:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806AA8C
sub_806AA8C: @ 0x0806AA8C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_806AA40
	movs r1, #3
	str r1, [r4, #0x10]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806AAA0
sub_806AAA0: @ 0x0806AAA0
	push {r4, r5, r6, lr}
	adds r2, r0, #0
	ldr r3, [r2]
	ldr r0, [r3, #8]
	movs r1, #0xff
	lsls r1, r1, #8
	ands r1, r0
	lsrs r4, r1, #8
	movs r1, #0xff
	lsls r1, r1, #0x10
	ands r1, r0
	lsrs r5, r1, #0x10
	lsrs r1, r0, #0x18
	ldrb r0, [r3, #8]
	ldrb r6, [r2, #0x18]
	cmp r0, r6
	bne _0806AAE2
	movs r0, #0x19
	ldrsb r0, [r2, r0]
	cmp r4, r0
	bne _0806AAE2
	movs r0, #1
	str r0, [r2, #4]
	ldrh r0, [r3, #2]
	str r0, [r2, #8]
	str r5, [r2, #0xc]
	str r1, [r2, #0x10]
	ldrh r0, [r3, #4]
	str r0, [r2, #0x14]
	ldrh r0, [r3, #6]
	str r0, [r2, #0x10]
	movs r0, #1
	b _0806AAE4
_0806AAE2:
	movs r0, #0
_0806AAE4:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806AAEC
sub_806AAEC: @ 0x0806AAEC
	push {r4, r5, r6, lr}
	adds r2, r0, #0
	ldr r3, [r2]
	ldr r0, [r3, #8]
	movs r1, #0xff
	lsls r1, r1, #8
	ands r1, r0
	lsrs r4, r1, #8
	movs r1, #0xff
	lsls r1, r1, #0x10
	ands r1, r0
	lsrs r5, r1, #0x10
	lsrs r1, r0, #0x18
	ldrb r0, [r3, #8]
	ldrb r6, [r2, #0x18]
	cmp r0, r6
	bne _0806AB28
	movs r0, #0x19
	ldrsb r0, [r2, r0]
	cmp r4, r0
	bne _0806AB28
	ldr r0, [r3, #4]
	str r0, [r2, #4]
	ldr r0, [r2]
	ldrh r0, [r0, #2]
	str r0, [r2, #8]
	str r5, [r2, #0xc]
	str r1, [r2, #0x10]
	movs r0, #1
	b _0806AB2A
_0806AB28:
	movs r0, #0
_0806AB2A:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_806AB30
sub_806AB30: @ 0x0806AB30
	push {r4, r5, r6, lr}
	adds r2, r0, #0
	ldr r3, [r2]
	ldr r0, [r3, #8]
	movs r1, #0xff
	lsls r1, r1, #8
	ands r1, r0
	lsrs r4, r1, #8
	movs r1, #0xff
	lsls r1, r1, #0x10
	ands r1, r0
	lsrs r5, r1, #0x10
	lsrs r1, r0, #0x18
	ldrb r0, [r3, #8]
	ldrb r6, [r2, #0x18]
	cmp r0, r6
	bne _0806AB6C
	movs r0, #0x19
	ldrsb r0, [r2, r0]
	cmp r4, r0
	bne _0806AB6C
	ldr r0, [r3, #4]
	str r0, [r2, #4]
	ldr r0, [r2]
	ldrh r0, [r0, #2]
	str r0, [r2, #8]
	str r5, [r2, #0xc]
	str r1, [r2, #0x10]
	movs r0, #1
	b _0806AB6E
_0806AB6C:
	movs r0, #0
_0806AB6E:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_806AB74
sub_806AB74: @ 0x0806AB74
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r2, [r4]
	ldr r1, [r2, #8]
	movs r0, #0xff
	lsls r0, r0, #8
	ands r0, r1
	lsrs r3, r0, #8
	movs r0, #0xff
	lsls r0, r0, #0x10
	ands r1, r0
	lsrs r5, r1, #0x10
	ldrb r2, [r2, #8]
	ldrb r0, [r4, #0x18]
	cmp r2, r0
	bne _0806ABC8
	movs r0, #0x19
	ldrsb r0, [r4, r0]
	cmp r3, r0
	bne _0806ABC8
	cmp r5, #0x15
	bne _0806ABB2
	ldr r0, _0806ABC4 @ =gActiveUnit
	ldr r0, [r0]
	movs r1, #0x6d
	bl FindUnitItemSlot
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, r1
	beq _0806ABC8
_0806ABB2:
	ldr r0, [r4]
	ldr r1, [r0, #4]
	str r1, [r4, #4]
	ldrh r0, [r0, #2]
	str r0, [r4, #8]
	str r5, [r4, #0xc]
	movs r0, #1
	b _0806ABCA
	.align 2, 0
_0806ABC4: .4byte gActiveUnit
_0806ABC8:
	movs r0, #0
_0806ABCA:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_806ABD0
sub_806ABD0: @ 0x0806ABD0
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r0, _0806AC28 @ =gActiveUnit
	ldr r2, [r0]
	ldrb r0, [r2, #0xf]
	mov ip, r0
	ldr r3, [r5]
	ldr r1, [r3, #8]
	movs r0, #0xff
	lsls r0, r0, #8
	ands r0, r1
	lsrs r4, r0, #8
	movs r0, #0xff
	lsls r0, r0, #0x10
	ands r0, r1
	lsrs r7, r0, #0x10
	lsrs r6, r1, #0x18
	movs r0, #8
	ldrsb r0, [r3, r0]
	ldrb r2, [r2, #0xe]
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	cmp r0, r2
	bgt _0806AC2C
	lsls r1, r4, #0x18
	mov r4, ip
	lsls r0, r4, #0x18
	asrs r4, r0, #0x18
	cmp r1, r0
	bgt _0806AC2C
	lsls r0, r7, #0x18
	asrs r0, r0, #0x18
	cmp r0, r2
	blt _0806AC2C
	lsls r0, r6, #0x18
	asrs r0, r0, #0x18
	cmp r0, r4
	blt _0806AC2C
	ldr r0, [r3, #4]
	str r0, [r5, #4]
	ldrh r0, [r3, #2]
	str r0, [r5, #8]
	movs r0, #1
	b _0806AC2E
	.align 2, 0
_0806AC28: .4byte gActiveUnit
_0806AC2C:
	movs r0, #0
_0806AC2E:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_806AC34
sub_806AC34: @ 0x0806AC34
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0806AC58 @ =gPlaySt
	movs r0, #0x40
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	beq _0806AC5C
	movs r0, #2
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806AC5C
	adds r0, r4, #0
	bl sub_806ABD0
	b _0806AC5E
	.align 2, 0
_0806AC58: .4byte gPlaySt
_0806AC5C:
	movs r0, #0
_0806AC5E:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_806AC64
sub_806AC64: @ 0x0806AC64
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4]
	ldr r1, [r0, #8]
	adds r0, r4, #0
	bl _call_via_r1
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806AC7C
	movs r0, #0
	b _0806AC88
_0806AC7C:
	ldr r0, [r4]
	ldr r1, [r0, #4]
	str r1, [r4, #4]
	ldrh r0, [r0, #2]
	str r0, [r4, #8]
	movs r0, #1
_0806AC88:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806AC90
sub_806AC90: @ 0x0806AC90
	adds r3, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	ldrb r0, [r3, #0x1a]
	cmp r0, r1
	bne _0806ACB4
	ldrb r0, [r3, #0x1b]
	cmp r0, r2
	bne _0806ACB4
	ldr r0, [r3]
	ldr r1, [r0, #4]
	str r1, [r3, #4]
	ldrh r0, [r0, #2]
	str r0, [r3, #8]
	movs r0, #1
	b _0806ACB6
_0806ACB4:
	movs r0, #0
_0806ACB6:
	bx lr

	thumb_func_start sub_806ACB8
sub_806ACB8: @ 0x0806ACB8
	push {r4, r5, lr}
	adds r5, r1, #0
	adds r4, r2, #0
	ldr r1, _0806ACE0 @ =gActiveUnit
	ldr r2, [r1]
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	cmp r1, r0
	blt _0806ACE4
	cmp r1, r4
	bgt _0806ACE4
	movs r1, #0xf
	ldrsb r1, [r2, r1]
	cmp r1, r5
	blt _0806ACE4
	cmp r1, r3
	bgt _0806ACE4
	movs r0, #1
	b _0806ACE6
	.align 2, 0
_0806ACE0: .4byte gActiveUnit
_0806ACE4:
	movs r0, #0
_0806ACE6:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_806ACEC
sub_806ACEC: @ 0x0806ACEC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	adds r7, r1, #0
	adds r6, r2, #0
	adds r5, r3, #0
	movs r4, #1
_0806ACFC:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0806AD34
	ldr r0, [r1]
	cmp r0, #0
	beq _0806AD34
	movs r0, #4
	ldrh r2, [r1, #0xc]
	ands r0, r2
	cmp r0, #0
	bne _0806AD34
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	cmp r0, r8
	blt _0806AD34
	cmp r0, r6
	bgt _0806AD34
	movs r0, #0xf
	ldrsb r0, [r1, r0]
	cmp r0, r7
	blt _0806AD34
	cmp r0, r5
	bgt _0806AD34
	movs r0, #1
	b _0806AD3C
_0806AD34:
	adds r4, #1
	cmp r4, #0x3f
	ble _0806ACFC
	movs r0, #0
_0806AD3C:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806AD48
sub_806AD48: @ 0x0806AD48
	push {lr}
	ldr r0, _0806AD68 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0x80
	bne _0806AD6C
	movs r0, #0
	movs r1, #0xf
	movs r2, #0x19
	movs r3, #0x17
	bl sub_806ACEC
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806AD6C
	movs r0, #1
	b _0806AD6E
	.align 2, 0
_0806AD68: .4byte gPlaySt
_0806AD6C:
	movs r0, #0
_0806AD6E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806AD74
sub_806AD74: @ 0x0806AD74
	push {lr}
	ldr r0, _0806ADB8 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0x80
	bne _0806ADB4
	movs r0, #0
	movs r1, #0x18
	movs r2, #0x10
	movs r3, #0x1b
	bl sub_806ACEC
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806ADBC
	movs r0, #0
	movs r1, #0x15
	movs r2, #2
	movs r3, #0x17
	bl sub_806ACEC
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806ADBC
	movs r0, #3
	movs r1, #0x14
	movs r2, #5
	movs r3, #0x16
	bl sub_806ACEC
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806ADBC
_0806ADB4:
	movs r0, #0
	b _0806ADBE
	.align 2, 0
_0806ADB8: .4byte gPlaySt
_0806ADBC:
	movs r0, #1
_0806ADBE:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806ADC4
sub_806ADC4: @ 0x0806ADC4
	push {lr}
	movs r0, #0xc
	movs r1, #0x15
	movs r2, #0x1f
	movs r3, #0x18
	bl sub_806ACEC
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806ADDC
sub_806ADDC: @ 0x0806ADDC
	push {lr}
	ldr r0, _0806ADF8 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0x80
	bne _0806ADFC
	movs r0, #0x11
	movs r1, #0x15
	movs r2, #0x1f
	movs r3, #0x23
	bl sub_806ACEC
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _0806ADFE
	.align 2, 0
_0806ADF8: .4byte gPlaySt
_0806ADFC:
	movs r0, #0
_0806ADFE:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806AE04
sub_806AE04: @ 0x0806AE04
	push {lr}
	ldr r0, _0806AE20 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0x80
	bne _0806AE24
	movs r0, #0
	movs r1, #0xf
	movs r2, #8
	movs r3, #0x12
	bl sub_806ACEC
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _0806AE26
	.align 2, 0
_0806AE20: .4byte gPlaySt
_0806AE24:
	movs r0, #0
_0806AE26:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806AE2C
sub_806AE2C: @ 0x0806AE2C
	push {lr}
	ldr r0, _0806AE48 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0x80
	bne _0806AE4C
	movs r0, #0
	movs r1, #0x18
	movs r2, #0xc
	movs r3, #0x1b
	bl sub_806ACEC
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _0806AE4E
	.align 2, 0
_0806AE48: .4byte gPlaySt
_0806AE4C:
	movs r0, #0
_0806AE4E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806AE54
sub_806AE54: @ 0x0806AE54
	push {lr}
	ldr r0, _0806AE70 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0x80
	bne _0806AE74
	movs r0, #0x15
	movs r1, #0
	movs r2, #0x1e
	movs r3, #6
	bl sub_806ACEC
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _0806AE76
	.align 2, 0
_0806AE70: .4byte gPlaySt
_0806AE74:
	movs r0, #0
_0806AE76:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806AE7C
sub_806AE7C: @ 0x0806AE7C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	adds r7, r1, #0
	adds r6, r2, #0
	adds r5, r3, #0
	movs r4, #0x81
_0806AE8C:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0806AEC4
	ldr r0, [r1]
	cmp r0, #0
	beq _0806AEC4
	movs r0, #4
	ldrh r2, [r1, #0xc]
	ands r0, r2
	cmp r0, #0
	bne _0806AEC4
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	cmp r0, r8
	blt _0806AEC4
	cmp r0, r6
	bgt _0806AEC4
	movs r0, #0xf
	ldrsb r0, [r1, r0]
	cmp r0, r7
	blt _0806AEC4
	cmp r0, r5
	bgt _0806AEC4
	movs r0, #1
	b _0806AECC
_0806AEC4:
	adds r4, #1
	cmp r4, #0xbf
	ble _0806AE8C
	movs r0, #0
_0806AECC:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806AED8
sub_806AED8: @ 0x0806AED8
	push {lr}
	sub sp, #0x1c
	ldr r0, _0806AEFC @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterEventInfo
	ldr r0, [r0]
	str r0, [sp]
	mov r0, sp
	bl sub_806A8CC
	cmp r0, #0
	bne _0806AF00
	movs r0, #0
	b _0806AF02
	.align 2, 0
_0806AEFC: .4byte gPlaySt
_0806AF00:
	movs r0, #1
_0806AF02:
	add sp, #0x1c
	pop {r1}
	bx r1

	thumb_func_start sub_806AF08
sub_806AF08: @ 0x0806AF08
	push {lr}
	sub sp, #0x1c
	ldr r0, _0806AF30 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterEventInfo
	ldr r0, [r0]
	str r0, [sp]
	mov r0, sp
	bl sub_806A8CC
	cmp r0, #0
	beq _0806AF44
	mov r0, sp
	bl sub_806A8AC
	b _0806AF3A
	.align 2, 0
_0806AF30: .4byte gPlaySt
_0806AF34:
	mov r0, sp
	bl sub_806A8AC
_0806AF3A:
	mov r0, sp
	bl sub_806A920
	cmp r0, #0
	bne _0806AF34
_0806AF44:
	add sp, #0x1c
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806AF4C
sub_806AF4C: @ 0x0806AF4C
	push {r4, r5, lr}
	sub sp, #0x1c
	adds r4, r0, #0
	adds r5, r1, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r0, _0806AF80 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterEventInfo
	ldr r0, [r0, #4]
	str r0, [sp]
	mov r0, sp
	strb r4, [r0, #0x1a]
	strb r5, [r0, #0x1b]
	bl sub_806A8CC
	cmp r0, #0
	bne _0806AF84
	movs r0, #0
	b _0806AF86
	.align 2, 0
_0806AF80: .4byte gPlaySt
_0806AF84:
	movs r0, #1
_0806AF86:
	add sp, #0x1c
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806AF90
sub_806AF90: @ 0x0806AF90
	push {r4, r5, lr}
	sub sp, #0x1c
	adds r4, r0, #0
	adds r5, r1, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r0, _0806AFCC @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterEventInfo
	ldr r0, [r0, #4]
	str r0, [sp]
	mov r0, sp
	strb r4, [r0, #0x1a]
	strb r5, [r0, #0x1b]
	bl sub_806A8CC
	cmp r0, #0
	beq _0806AFC4
	mov r0, sp
	bl sub_806A8AC
_0806AFC4:
	add sp, #0x1c
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806AFCC: .4byte gPlaySt

	thumb_func_start sub_806AFD0
sub_806AFD0: @ 0x0806AFD0
	push {r4, r5, r6, lr}
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r4, r1, #0x18
	movs r5, #0
	ldr r1, _0806AFE0 @ =0x08666CF8
	b _0806B00E
	.align 2, 0
_0806AFE0: .4byte 0x08666CF8
_0806AFE4:
	adds r0, r3, #0
	ldrb r3, [r1, #1]
	cmp r0, r6
	bne _0806AFF0
	cmp r3, r4
	beq _0806AFF8
_0806AFF0:
	cmp r3, r6
	bne _0806B00C
	cmp r0, r4
	bne _0806B00C
_0806AFF8:
	cmp r2, #1
	bne _0806AFFE
	ldr r5, [r1, #4]
_0806AFFE:
	cmp r2, #2
	bne _0806B004
	ldr r5, [r1, #8]
_0806B004:
	cmp r2, #3
	bne _0806B014
	ldr r5, [r1, #0xc]
	b _0806B014
_0806B00C:
	adds r1, #0x10
_0806B00E:
	ldrb r3, [r1]
	cmp r3, #0
	bne _0806AFE4
_0806B014:
	cmp r5, #0
	beq _0806B022
	adds r0, r5, #0
	bl StartTalkSupportEvent
	bl DisableEventSkip
_0806B022:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_806B028
sub_806B028: @ 0x0806B028
	push {r4, r5, lr}
	sub sp, #0x1c
	adds r4, r0, #0
	adds r5, r1, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r0, _0806B05C @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterEventInfo
	ldr r0, [r0, #8]
	str r0, [sp]
	mov r0, sp
	strb r4, [r0, #0x18]
	strb r5, [r0, #0x19]
	bl sub_806A8CC
	cmp r0, #0
	beq _0806B060
	ldr r0, [sp, #0xc]
	b _0806B062
	.align 2, 0
_0806B05C: .4byte gPlaySt
_0806B060:
	movs r0, #0
_0806B062:
	add sp, #0x1c
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806B06C
sub_806B06C: @ 0x0806B06C
	push {r4, r5, lr}
	sub sp, #0x1c
	adds r4, r0, #0
	adds r5, r1, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r0, _0806B0B0 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterEventInfo
	ldr r0, [r0, #8]
	str r0, [sp]
	mov r0, sp
	strb r4, [r0, #0x18]
	strb r5, [r0, #0x19]
	bl sub_806A8CC
	cmp r0, #0
	bne _0806B09C
	b _0806B24A
_0806B09C:
	ldr r0, [sp, #0xc]
	cmp r0, #0x1d
	bls _0806B0A4
	b _0806B24A
_0806B0A4:
	lsls r0, r0, #2
	ldr r1, _0806B0B4 @ =_0806B0B8
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0806B0B0: .4byte gPlaySt
_0806B0B4: .4byte _0806B0B8
_0806B0B8: @ jump table
	.4byte _0806B248 @ case 0
	.4byte _0806B24A @ case 1
	.4byte _0806B24A @ case 2
	.4byte _0806B24A @ case 3
	.4byte _0806B24A @ case 4
	.4byte _0806B24A @ case 5
	.4byte _0806B24A @ case 6
	.4byte _0806B24A @ case 7
	.4byte _0806B24A @ case 8
	.4byte _0806B24A @ case 9
	.4byte _0806B24A @ case 10
	.4byte _0806B24A @ case 11
	.4byte _0806B24A @ case 12
	.4byte _0806B24A @ case 13
	.4byte _0806B130 @ case 14
	.4byte _0806B130 @ case 15
	.4byte _0806B160 @ case 16
	.4byte _0806B160 @ case 17
	.4byte _0806B192 @ case 18
	.4byte _0806B214 @ case 19
	.4byte _0806B224 @ case 20
	.4byte _0806B234 @ case 21
	.4byte _0806B244 @ case 22
	.4byte _0806B24A @ case 23
	.4byte _0806B24A @ case 24
	.4byte _0806B24A @ case 25
	.4byte _0806B24A @ case 26
	.4byte _0806B24A @ case 27
	.4byte _0806B24A @ case 28
	.4byte _0806B13E @ case 29
_0806B130:
	mov r0, sp
	bl sub_806A8AC
	ldr r0, [sp, #0x10]
	cmp r0, #3
	beq _0806B13E
	b _0806B24A
_0806B13E:
	mov r0, sp
	ldrb r0, [r0, #0x18]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov r1, sp
	ldrb r1, [r1, #0x19]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl GetMapChangeIdAt
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl StartMapChangeEvent
_0806B15A:
	bl DisableEventSkip
	b _0806B24A
_0806B160:
	ldr r0, [sp, #4]
	cmp r0, #1
	bne _0806B18A
	mov r0, sp
	ldrb r0, [r0, #0x18]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov r1, sp
	ldrb r1, [r1, #0x19]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl GetMapChangeIdAt
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl StartMapChangeEvent
	ldr r0, [sp, #8]
	bl SetEid
	b _0806B15A
_0806B18A:
	mov r0, sp
	bl sub_806A8AC
	b _0806B15A
_0806B192:
	ldr r4, [sp, #0x14]
	cmp r4, #0
	bne _0806B1BC
	mov r0, sp
	ldrb r0, [r0, #0x18]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov r1, sp
	ldrb r1, [r1, #0x19]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl GetMapChangeIdAt
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl StartMapChangeEvent
	mov r0, sp
	bl sub_806A8AC
	b _0806B208
_0806B1BC:
	cmp r4, #0x6f
	beq _0806B1E6
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	mov r0, sp
	ldrb r0, [r0, #0x18]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov r1, sp
	ldrb r1, [r1, #0x19]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl GetMapChangeIdAt
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	adds r0, r4, #0
	bl StartChestItemEvent
	b _0806B208
_0806B1E6:
	ldr r4, [sp, #0x10]
	mov r0, sp
	ldrb r0, [r0, #0x18]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov r1, sp
	ldrb r1, [r1, #0x19]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl GetMapChangeIdAt
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	adds r0, r4, #0
	bl StartChestMoneyEvent
_0806B208:
	bl DisableEventSkip
	ldr r0, [sp, #8]
	bl SetEid
	b _0806B24A
_0806B214:
	ldr r0, _0806B220 @ =gActiveUnit
	ldr r0, [r0]
	ldr r1, [sp, #4]
	bl sub_8095E10
	b _0806B24A
	.align 2, 0
_0806B220: .4byte gActiveUnit
_0806B224:
	ldr r0, _0806B230 @ =gActiveUnit
	ldr r0, [r0]
	ldr r1, [sp, #4]
	bl sub_8095E30
	b _0806B24A
	.align 2, 0
_0806B230: .4byte gActiveUnit
_0806B234:
	ldr r0, _0806B240 @ =gActiveUnit
	ldr r0, [r0]
	ldr r1, [sp, #4]
	bl sub_8095E50
	b _0806B24A
	.align 2, 0
_0806B240: .4byte gActiveUnit
_0806B244:
	mov r8, r8
	b _0806B24A
_0806B248:
	mov r8, r8
_0806B24A:
	add sp, #0x1c
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806B254
sub_806B254: @ 0x0806B254
	push {lr}
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_806B06C
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806B268
sub_806B268: @ 0x0806B268
	push {lr}
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_806B028
	cmp r0, #0xe
	beq _0806B27E
	movs r0, #0
	b _0806B280
_0806B27E:
	movs r0, #1
_0806B280:
	pop {r1}
	bx r1

	thumb_func_start sub_806B284
sub_806B284: @ 0x0806B284
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	asrs r5, r0, #0x18
	lsls r1, r1, #0x18
	asrs r4, r1, #0x18
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_806B268
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806B2A4
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_806B06C
_0806B2A4:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806B2AC
sub_806B2AC: @ 0x0806B2AC
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r6, r0, #0x18
	asrs r5, r0, #0x18
	lsrs r7, r1, #0x18
	asrs r4, r1, #0x18
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_806B028
	cmp r0, #0x13
	beq _0806B308
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_806B028
	cmp r0, #0x14
	beq _0806B308
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_806B028
	cmp r0, #0x15
	bne _0806B2F0
	ldr r0, _0806B304 @ =gActiveUnit
	ldr r0, [r0]
	movs r1, #0x6d
	bl FindUnitItemSlot
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, r1
	bne _0806B308
_0806B2F0:
	lsls r0, r6, #0x18
	asrs r0, r0, #0x18
	lsls r1, r7, #0x18
	asrs r1, r1, #0x18
	bl sub_806B028
	cmp r0, #0x16
	beq _0806B308
	movs r0, #0
	b _0806B30A
	.align 2, 0
_0806B304: .4byte gActiveUnit
_0806B308:
	movs r0, #1
_0806B30A:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_806B310
sub_806B310: @ 0x0806B310
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	asrs r5, r0, #0x18
	lsls r1, r1, #0x18
	asrs r4, r1, #0x18
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_806B2AC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806B330
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_806B06C
_0806B330:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start IsThereClosedChestAt
IsThereClosedChestAt: @ 0x0806B338
	push {lr}
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_806B028
	cmp r0, #0x12
	beq _0806B34E
	movs r0, #0
	b _0806B350
_0806B34E:
	movs r0, #1
_0806B350:
	pop {r1}
	bx r1

	thumb_func_start sub_806B354
sub_806B354: @ 0x0806B354
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	asrs r5, r0, #0x18
	lsls r1, r1, #0x18
	asrs r4, r1, #0x18
	adds r0, r5, #0
	adds r1, r4, #0
	bl IsThereClosedChestAt
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806B374
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_806B06C
_0806B374:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806B37C
sub_806B37C: @ 0x0806B37C
	push {lr}
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_806B028
	cmp r0, #0x10
	beq _0806B392
	movs r0, #0
	b _0806B394
_0806B392:
	movs r0, #1
_0806B394:
	pop {r1}
	bx r1

	thumb_func_start sub_806B398
sub_806B398: @ 0x0806B398
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	asrs r5, r0, #0x18
	lsls r1, r1, #0x18
	asrs r4, r1, #0x18
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_806B37C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806B3B8
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_806B06C
_0806B3B8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806B3C0
sub_806B3C0: @ 0x0806B3C0
	push {lr}
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl sub_806B028
	cmp r0, #0x11
	beq _0806B3D6
	movs r0, #0
	b _0806B3D8
_0806B3D6:
	movs r0, #1
_0806B3D8:
	pop {r1}
	bx r1

	thumb_func_start sub_806B3DC
sub_806B3DC: @ 0x0806B3DC
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	asrs r5, r0, #0x18
	lsls r1, r1, #0x18
	asrs r4, r1, #0x18
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_806B3C0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806B3FC
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_806B06C
_0806B3FC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806B404
sub_806B404: @ 0x0806B404
	push {lr}
	bl sub_806B580
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806B414
sub_806B414: @ 0x0806B414
	push {lr}
	bl sub_806B5B0
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806B420
sub_806B420: @ 0x0806B420
	push {lr}
	ldr r0, _0806B438 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0806B432
	bl sub_806C6B0
_0806B432:
	movs r0, #0
	pop {r1}
	bx r1
	.align 2, 0
_0806B438: .4byte gPlaySt

	thumb_func_start sub_806B43C
sub_806B43C: @ 0x0806B43C
	push {lr}
	sub sp, #0x1c
	ldr r0, _0806B460 @ =0x086676E0
	str r0, [sp]
	ldr r0, _0806B464 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0806B468
	mov r0, sp
	bl sub_806A8CC
	cmp r0, #0
	beq _0806B468
	movs r0, #1
	b _0806B46A
	.align 2, 0
_0806B460: .4byte 0x086676E0
_0806B464: .4byte gPlaySt
_0806B468:
	movs r0, #0
_0806B46A:
	add sp, #0x1c
	pop {r1}
	bx r1

	thumb_func_start sub_806B470
sub_806B470: @ 0x0806B470
	push {lr}
	sub sp, #0x1c
	ldr r0, _0806B49C @ =0x086676E0
	str r0, [sp]
	ldr r0, _0806B4A0 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0806B494
	mov r0, sp
	bl sub_806A8CC
	cmp r0, #0
	beq _0806B494
	mov r0, sp
	bl sub_806A8AC
_0806B494:
	movs r0, #0
	add sp, #0x1c
	pop {r1}
	bx r1
	.align 2, 0
_0806B49C: .4byte 0x086676E0
_0806B4A0: .4byte gPlaySt

	thumb_func_start sub_806B4A4
sub_806B4A4: @ 0x0806B4A4
	movs r0, #0
	bx lr

	thumb_func_start sub_806B4A8
sub_806B4A8: @ 0x0806B4A8
	movs r0, #0
	bx lr

	thumb_func_start sub_806B4AC
sub_806B4AC: @ 0x0806B4AC
	push {lr}
	ldr r0, _0806B4C4 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0806B4BE
	bl sub_806C718
_0806B4BE:
	movs r0, #0
	pop {r1}
	bx r1
	.align 2, 0
_0806B4C4: .4byte gPlaySt

	thumb_func_start sub_806B4C8
sub_806B4C8: @ 0x0806B4C8
	push {lr}
	ldr r0, _0806B4E0 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0806B4DA
	bl sub_806C734
_0806B4DA:
	movs r0, #0
	pop {r1}
	bx r1
	.align 2, 0
_0806B4E0: .4byte gPlaySt

	thumb_func_start sub_806B4E4
sub_806B4E4: @ 0x0806B4E4
	push {lr}
	ldr r0, _0806B4FC @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0806B4F6
	bl sub_806C750
_0806B4F6:
	movs r0, #0
	pop {r1}
	bx r1
	.align 2, 0
_0806B4FC: .4byte gPlaySt

	thumb_func_start sub_806B500
sub_806B500: @ 0x0806B500
	push {lr}
	sub sp, #0x1c
	ldr r0, _0806B530 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterEventInfo
	ldr r0, [r0, #0xc]
	str r0, [sp]
	mov r1, sp
	ldr r0, _0806B534 @ =gActiveUnit
	ldr r2, [r0]
	ldrb r0, [r2, #0xe]
	strb r0, [r1, #0x18]
	ldrb r0, [r2, #0xf]
	strb r0, [r1, #0x19]
	mov r0, sp
	bl sub_806A8CC
	cmp r0, #0
	bne _0806B538
	movs r0, #0
	b _0806B53A
	.align 2, 0
_0806B530: .4byte gPlaySt
_0806B534: .4byte gActiveUnit
_0806B538:
	movs r0, #1
_0806B53A:
	add sp, #0x1c
	pop {r1}
	bx r1

	thumb_func_start sub_806B540
sub_806B540: @ 0x0806B540
	push {lr}
	sub sp, #0x1c
	ldr r0, _0806B578 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterEventInfo
	ldr r0, [r0, #0xc]
	str r0, [sp]
	mov r1, sp
	ldr r0, _0806B57C @ =gActiveUnit
	ldr r2, [r0]
	ldrb r0, [r2, #0xe]
	strb r0, [r1, #0x18]
	ldrb r0, [r2, #0xf]
	strb r0, [r1, #0x19]
	mov r0, sp
	bl sub_806A8CC
	cmp r0, #0
	beq _0806B572
	mov r0, sp
	bl sub_806A8AC
_0806B572:
	add sp, #0x1c
	pop {r0}
	bx r0
	.align 2, 0
_0806B578: .4byte gPlaySt
_0806B57C: .4byte gActiveUnit

	thumb_func_start sub_806B580
sub_806B580: @ 0x0806B580
	push {lr}
	ldr r0, _0806B5AC @ =gPlaySt
	ldrb r0, [r0, #0xe]
	cmp r0, #0x19
	bne _0806B59C
	movs r0, #0x72
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806B59C
	movs r0, #3
	bl SetEid
_0806B59C:
	movs r0, #3
	bl CheckFlag
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0
_0806B5AC: .4byte gPlaySt

	thumb_func_start sub_806B5B0
sub_806B5B0: @ 0x0806B5B0
	push {r4, lr}
	movs r0, #3
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806B5FC
	ldr r4, _0806B5E0 @ =gPlaySt
	ldrb r0, [r4, #0xe]
	cmp r0, #0x19
	bne _0806B5E4
	bl sub_806CD78
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806B5FC
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetChapterEventInfo
	ldr r0, [r0, #0x18]
	bl StartEvent
	b _0806B5FC
	.align 2, 0
_0806B5E0: .4byte gPlaySt
_0806B5E4:
	bl sub_806B404
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806B5FC
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetChapterEventInfo
	ldr r0, [r0, #0x18]
	bl StartEvent
_0806B5FC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806B604
sub_806B604: @ 0x0806B604
	push {lr}
	sub sp, #0x1c
	ldr r0, _0806B634 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterEventInfo
	ldr r0, [r0, #0x10]
	str r0, [sp, #4]
	movs r1, #0
	str r1, [sp, #8]
	bl BatchCreateUnits
	bl sub_806BAF0
	bl RefreshEntityMaps
	bl RefreshUnitSprites
	add sp, #0x1c
	pop {r0}
	bx r0
	.align 2, 0
_0806B634: .4byte gPlaySt

	thumb_func_start sub_806B638
sub_806B638: @ 0x0806B638
	push {lr}
	ldr r0, _0806B64C @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterEventInfo
	ldr r0, [r0, #0x14]
	pop {r1}
	bx r1
	.align 2, 0
_0806B64C: .4byte gPlaySt

	thumb_func_start sub_806B650
sub_806B650: @ 0x0806B650
	push {r4, r5, r6, lr}
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r5, r1, #0x18
	ldr r4, _0806B660 @ =0x086663CC
	b _0806B6A2
	.align 2, 0
_0806B660: .4byte 0x086663CC
_0806B664:
	ldr r0, [r4, #8]
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806B6A0
	ldrb r1, [r4]
	ldrb r0, [r4, #1]
	cmp r6, r1
	bne _0806B67C
	cmp r5, r0
	beq _0806B684
_0806B67C:
	cmp r6, r0
	bne _0806B6A0
	cmp r5, r1
	bne _0806B6A0
_0806B684:
	ldrb r0, [r4, #2]
	cmp r0, #0x2d
	beq _0806B698
	ldr r0, _0806B69C @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldrb r1, [r4, #2]
	cmp r0, r1
	bne _0806B6A0
_0806B698:
	adds r0, r4, #0
	b _0806B6AA
	.align 2, 0
_0806B69C: .4byte gPlaySt
_0806B6A0:
	adds r4, #0xc
_0806B6A2:
	ldrb r0, [r4, #1]
	cmp r0, #0
	bne _0806B664
	movs r0, #0
_0806B6AA:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_806B6B0
sub_806B6B0: @ 0x0806B6B0
	push {r4, r5, lr}
	adds r4, r1, #0
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	b _0806B6EA
_0806B6BA:
	ldr r0, [r4, #8]
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806B6E8
	ldrb r0, [r4]
	cmp r5, r0
	bne _0806B6E8
	ldrb r1, [r4, #1]
	cmp r1, #0x2d
	beq _0806B6E0
	ldr r0, _0806B6E4 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldrb r1, [r4, #1]
	cmp r0, r1
	bne _0806B6E8
_0806B6E0:
	adds r0, r4, #0
	b _0806B6F2
	.align 2, 0
_0806B6E4: .4byte gPlaySt
_0806B6E8:
	adds r4, #0x10
_0806B6EA:
	ldrb r0, [r4]
	cmp r0, #0
	bne _0806B6BA
	movs r0, #0
_0806B6F2:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_806B6F8
sub_806B6F8: @ 0x0806B6F8
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r7, r4, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	adds r5, r1, #0
	adds r0, r4, #0
	bl sub_806B650
	cmp r0, #0
	bne _0806B740
	ldr r6, _0806B744 @ =0x0866618C
	adds r0, r4, #0
	adds r1, r6, #0
	bl sub_806B6B0
	cmp r0, #0
	bne _0806B740
	adds r0, r5, #0
	adds r1, r6, #0
	bl sub_806B6B0
	cmp r0, #0
	bne _0806B740
	ldr r1, _0806B748 @ =0x08666528
	adds r0, r7, #0
	bl sub_806B6B0
	cmp r0, #0
	beq _0806B74C
	bl BattleIsTriangleAttack
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806B74C
_0806B740:
	movs r0, #1
	b _0806B74E
	.align 2, 0
_0806B744: .4byte 0x0866618C
_0806B748: .4byte 0x08666528
_0806B74C:
	movs r0, #0
_0806B74E:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_806B754
sub_806B754: @ 0x0806B754
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	mov r8, r5
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	adds r6, r1, #0
	adds r0, r5, #0
	bl sub_806B650
	adds r4, r0, #0
	cmp r4, #0
	bne _0806B790
	ldr r7, _0806B7A4 @ =0x0866618C
	adds r0, r5, #0
	adds r1, r7, #0
	bl sub_806B6B0
	adds r4, r0, #0
	cmp r4, #0
	bne _0806B790
	adds r0, r6, #0
	adds r1, r7, #0
	bl sub_806B6B0
	adds r4, r0, #0
	cmp r4, #0
	beq _0806B7A8
_0806B790:
	ldr r0, [r4, #4]
	bl StartTalkEvent
	bl DisableEventSkip
	ldr r0, [r4, #8]
	bl SetEid
	b _0806B7D0
	.align 2, 0
_0806B7A4: .4byte 0x0866618C
_0806B7A8:
	ldr r1, _0806B7DC @ =0x08666528
	mov r0, r8
	bl sub_806B6B0
	adds r4, r0, #0
	cmp r4, #0
	beq _0806B7D0
	bl BattleIsTriangleAttack
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806B7D0
	ldr r0, [r4, #4]
	bl StartTalkEvent
	bl DisableEventSkip
	ldr r0, [r4, #8]
	bl SetEid
_0806B7D0:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806B7DC: .4byte 0x08666528

	thumb_func_start ShouldDisplayDeathQuote
ShouldDisplayDeathQuote: @ 0x0806B7E0
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r1, _0806B7FC @ =0x08666598
	adds r0, r4, #0
	bl sub_806B6B0
	cmp r0, #0
	bne _0806B800
	cmp r4, #1
	beq _0806B800
	movs r0, #0
	b _0806B802
	.align 2, 0
_0806B7FC: .4byte 0x08666598
_0806B800:
	movs r0, #1
_0806B802:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_806B808
sub_806B808: @ 0x0806B808
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r1, _0806B88C @ =0x08666598
	adds r0, r5, #0
	bl sub_806B6B0
	adds r4, r0, #0
	cmp r4, #0
	beq _0806B848
	ldr r0, [r4, #4]
	cmp r0, #0
	beq _0806B826
	bl StartTalkEvent
_0806B826:
	bl DisableEventSkip
	ldr r0, [r4, #8]
	bl SetEid
	adds r0, r5, #0
	bl GetUnitByPid
	movs r1, #0xc0
	ldrb r0, [r0, #0xb]
	ands r1, r0
	cmp r1, #0
	bne _0806B848
	movs r0, #0x45
	movs r1, #0
	bl StartBgm
_0806B848:
	ldr r0, _0806B890 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	cmp r0, #0x19
	bne _0806B85A
	cmp r5, #0x66
	bne _0806B85A
	movs r0, #4
	bl FadeBgmOut
_0806B85A:
	cmp r5, #1
	bne _0806B884
	movs r0, #0x65
	bl SetEid
	ldr r4, _0806B890 @ =gPlaySt
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	cmp r0, #0
	beq _0806B87C
	ldr r0, _0806B894 @ =0x0866AAF8
	bl StartEvent
	movs r0, #0x37
	movs r1, #0
	bl StartBgm
_0806B87C:
	movs r0, #1
	ldrb r1, [r4, #0x1d]
	orrs r0, r1
	strb r0, [r4, #0x1d]
_0806B884:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806B88C: .4byte 0x08666598
_0806B890: .4byte gPlaySt
_0806B894: .4byte 0x0866AAF8

	thumb_func_start sub_806B898
sub_806B898: @ 0x0806B898
	movs r0, #0
	bx lr

	thumb_func_start nullsub_27
nullsub_27: @ 0x0806B89C
	bx lr
	.align 2, 0

	thumb_func_start nullsub_28
nullsub_28: @ 0x0806B8A0
	bx lr
	.align 2, 0

	thumb_func_start sub_806B8A4
sub_806B8A4: @ 0x0806B8A4
	movs r0, #0
	bx lr

	thumb_func_start nullsub_30
nullsub_30: @ 0x0806B8A8
	bx lr
	.align 2, 0

	thumb_func_start sub_806B8AC
sub_806B8AC: @ 0x0806B8AC
	movs r0, #0
	bx lr

	thumb_func_start sub_806B8B0
sub_806B8B0: @ 0x0806B8B0
	movs r0, #0
	bx lr

	thumb_func_start nullsub_31
nullsub_31: @ 0x0806B8B4
	bx lr
	.align 2, 0

	thumb_func_start nullsub_32
nullsub_32: @ 0x0806B8B8
	bx lr
	.align 2, 0

	thumb_func_start nullsub_33
nullsub_33: @ 0x0806B8BC
	bx lr
	.align 2, 0

	thumb_func_start nullsub_34
nullsub_34: @ 0x0806B8C0
	bx lr
	.align 2, 0

	thumb_func_start nullsub_35
nullsub_35: @ 0x0806B8C4
	bx lr
	.align 2, 0

	thumb_func_start sub_806B8C8
sub_806B8C8: @ 0x0806B8C8
	adds r3, r0, #0
	cmp r3, #0
	beq _0806B8F0
	subs r3, #1
	ldr r1, _0806B8F4 @ =0x03004898
	adds r0, r3, #0
	cmp r3, #0
	bge _0806B8DA
	adds r0, r3, #7
_0806B8DA:
	asrs r0, r0, #3
	adds r2, r0, r1
	ldr r1, _0806B8F8 @ =0x08666184
	lsls r0, r0, #3
	subs r0, r3, r0
	adds r0, r0, r1
	ldrb r1, [r2]
	ldrb r0, [r0]
	orrs r1, r0
	adds r0, r1, #0
	strb r0, [r2]
_0806B8F0:
	bx lr
	.align 2, 0
_0806B8F4: .4byte 0x03004898
_0806B8F8: .4byte 0x08666184

	thumb_func_start CheckChapterEid
CheckChapterEid: @ 0x0806B8FC
	adds r3, r0, #0
	cmp r3, #0
	beq _0806B926
	subs r3, #1
	ldr r1, _0806B92C @ =0x03004898
	adds r0, r3, #0
	cmp r3, #0
	bge _0806B90E
	adds r0, r3, #7
_0806B90E:
	asrs r0, r0, #3
	adds r2, r0, r1
	ldr r1, _0806B930 @ =0x08666184
	lsls r0, r0, #3
	subs r0, r3, r0
	adds r0, r0, r1
	ldrb r2, [r2]
	ldrb r0, [r0]
	ands r2, r0
	adds r0, r2, #0
	cmp r0, #0
	bne _0806B934
_0806B926:
	movs r0, #0
	b _0806B936
	.align 2, 0
_0806B92C: .4byte 0x03004898
_0806B930: .4byte 0x08666184
_0806B934:
	movs r0, #1
_0806B936:
	bx lr

	thumb_func_start sub_806B938
sub_806B938: @ 0x0806B938
	adds r2, r0, #0
	cmp r2, #0
	beq _0806B966
	subs r2, #1
	ldr r3, _0806B968 @ =0x08666184
	adds r1, r2, #0
	cmp r2, #0
	bge _0806B94A
	adds r1, r2, #7
_0806B94A:
	asrs r1, r1, #3
	lsls r0, r1, #3
	subs r0, r2, r0
	adds r0, r0, r3
	ldrb r0, [r0]
	mvns r0, r0
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	ldr r0, _0806B96C @ =0x03004898
	adds r1, r1, r0
	adds r0, r3, #0
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
_0806B966:
	bx lr
	.align 2, 0
_0806B968: .4byte 0x08666184
_0806B96C: .4byte 0x03004898

	thumb_func_start sub_806B970
sub_806B970: @ 0x0806B970
	ldr r1, _0806B980 @ =0x03004898
	movs r2, #0
	adds r0, r1, #3
_0806B976:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge _0806B976
	bx lr
	.align 2, 0
_0806B980: .4byte 0x03004898

	thumb_func_start sub_806B984
sub_806B984: @ 0x0806B984
	adds r3, r0, #0
	cmp r3, #0x63
	ble _0806B9B0
	cmp r3, #0x64
	beq _0806B9B0
	subs r3, #0x65
	ldr r1, _0806B9B4 @ =0x03004890
	adds r0, r3, #0
	cmp r3, #0
	bge _0806B99A
	adds r0, r3, #7
_0806B99A:
	asrs r0, r0, #3
	adds r2, r0, r1
	ldr r1, _0806B9B8 @ =0x08666184
	lsls r0, r0, #3
	subs r0, r3, r0
	adds r0, r0, r1
	ldrb r1, [r2]
	ldrb r0, [r0]
	orrs r1, r0
	adds r0, r1, #0
	strb r0, [r2]
_0806B9B0:
	bx lr
	.align 2, 0
_0806B9B4: .4byte 0x03004890
_0806B9B8: .4byte 0x08666184

	thumb_func_start CheckGlobalEid
CheckGlobalEid: @ 0x0806B9BC
	adds r3, r0, #0
	cmp r3, #0x64
	ble _0806B9E6
	subs r3, #0x65
	ldr r1, _0806B9EC @ =0x03004890
	adds r0, r3, #0
	cmp r3, #0
	bge _0806B9CE
	adds r0, r3, #7
_0806B9CE:
	asrs r0, r0, #3
	adds r2, r0, r1
	ldr r1, _0806B9F0 @ =0x08666184
	lsls r0, r0, #3
	subs r0, r3, r0
	adds r0, r0, r1
	ldrb r2, [r2]
	ldrb r0, [r0]
	ands r2, r0
	adds r0, r2, #0
	cmp r0, #0
	bne _0806B9F4
_0806B9E6:
	movs r0, #0
	b _0806B9F6
	.align 2, 0
_0806B9EC: .4byte 0x03004890
_0806B9F0: .4byte 0x08666184
_0806B9F4:
	movs r0, #1
_0806B9F6:
	bx lr

	thumb_func_start sub_806B9F8
sub_806B9F8: @ 0x0806B9F8
	adds r2, r0, #0
	cmp r2, #0x63
	ble _0806BA2A
	cmp r2, #0x64
	beq _0806BA2A
	subs r2, #0x65
	ldr r3, _0806BA2C @ =0x08666184
	adds r1, r2, #0
	cmp r2, #0
	bge _0806BA0E
	adds r1, r2, #7
_0806BA0E:
	asrs r1, r1, #3
	lsls r0, r1, #3
	subs r0, r2, r0
	adds r0, r0, r3
	ldrb r0, [r0]
	mvns r0, r0
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	ldr r0, _0806BA30 @ =0x03004890
	adds r1, r1, r0
	adds r0, r3, #0
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
_0806BA2A:
	bx lr
	.align 2, 0
_0806BA2C: .4byte 0x08666184
_0806BA30: .4byte 0x03004890

	thumb_func_start sub_806BA34
sub_806BA34: @ 0x0806BA34
	ldr r1, _0806BA44 @ =0x03004890
	movs r2, #0
	adds r0, r1, #4
_0806BA3A:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge _0806BA3A
	bx lr
	.align 2, 0
_0806BA44: .4byte 0x03004890

	thumb_func_start SetEid
SetEid: @ 0x0806BA48
	push {lr}
	cmp r0, #0x63
	bgt _0806BA54
	bl sub_806B8C8
	b _0806BA58
_0806BA54:
	bl sub_806B984
_0806BA58:
	pop {r0}
	bx r0

	thumb_func_start CheckFlag
CheckFlag: @ 0x0806BA5C
	push {lr}
	cmp r0, #0x63
	ble _0806BA68
	bl CheckGlobalEid
	b _0806BA6C
_0806BA68:
	bl CheckChapterEid
_0806BA6C:
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start ClearEid
ClearEid: @ 0x0806BA74
	push {lr}
	cmp r0, #0x63
	bgt _0806BA80
	bl sub_806B938
	b _0806BA84
_0806BA80:
	bl sub_806B9F8
_0806BA84:
	pop {r0}
	bx r0

	thumb_func_start GetGlobalEidData
GetGlobalEidData: @ 0x0806BA88
	ldr r0, _0806BA8C @ =0x03004890
	bx lr
	.align 2, 0
_0806BA8C: .4byte 0x03004890

	thumb_func_start sub_806BA90
sub_806BA90: @ 0x0806BA90
	movs r0, #5
	bx lr

	thumb_func_start GetChapterEidData
GetChapterEidData: @ 0x0806BA94
	ldr r0, _0806BA98 @ =0x03004898
	bx lr
	.align 2, 0
_0806BA98: .4byte 0x03004898

	thumb_func_start sub_806BA9C
sub_806BA9C: @ 0x0806BA9C
	movs r0, #4
	bx lr

	thumb_func_start sub_806BAA0
sub_806BAA0: @ 0x0806BAA0
	ldr r1, _0806BAB0 @ =gPlaySt
	movs r0, #0x40
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	bne _0806BAB4
	movs r0, #0
	b _0806BAB6
	.align 2, 0
_0806BAB0: .4byte gPlaySt
_0806BAB4:
	movs r0, #1
_0806BAB6:
	bx lr

	thumb_func_start sub_806BAB8
sub_806BAB8: @ 0x0806BAB8
	push {lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r2, _0806BAC4 @ =0x08666C78
	b _0806BAD2
	.align 2, 0
_0806BAC4: .4byte 0x08666C78
_0806BAC8:
	cmp r1, r0
	bne _0806BAD0
	ldr r0, [r2, #4]
	b _0806BAE6
_0806BAD0:
	adds r2, #8
_0806BAD2:
	ldrb r1, [r2]
	cmp r1, #0
	bne _0806BAC8
	ldr r0, _0806BAEC @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterInfo
	ldrb r0, [r0, #0x13]
_0806BAE6:
	pop {r1}
	bx r1
	.align 2, 0
_0806BAEC: .4byte gPlaySt

	thumb_func_start sub_806BAF0
sub_806BAF0: @ 0x0806BAF0
	push {r4, r5, lr}
	ldr r1, _0806BB30 @ =gPlaySt
	movs r0, #0x40
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	beq _0806BB2A
	movs r5, #0x81
_0806BB00:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	cmp r4, #0
	beq _0806BB24
	ldr r0, [r4]
	cmp r0, #0
	beq _0806BB24
	ldrb r0, [r0, #4]
	bl sub_806BAB8
	adds r1, r0, #0
	cmp r1, #0
	beq _0806BB24
	adds r0, r4, #0
	bl UnitApplyBonusLevels
_0806BB24:
	adds r5, #1
	cmp r5, #0xbf
	ble _0806BB00
_0806BB2A:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806BB30: .4byte gPlaySt

	thumb_func_start sub_806BB34
sub_806BB34: @ 0x0806BB34
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0xa
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806BB5E
	bl sub_806C36C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806BB5E
	adds r0, r4, #0
	movs r1, #0x31
	movs r2, #0x2e
	bl sub_806AC90
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _0806BB60
_0806BB5E:
	movs r0, #0
_0806BB60:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806BB68
sub_806BB68: @ 0x0806BB68
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #7
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806BB92
	bl sub_806C294
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806BB92
	adds r0, r4, #0
	movs r1, #0x31
	movs r2, #0x2e
	bl sub_806AC90
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _0806BB94
_0806BB92:
	movs r0, #0
_0806BB94:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806BB9C
sub_806BB9C: @ 0x0806BB9C
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #7
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806BBC6
	bl sub_806C294
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806BBC6
	adds r0, r4, #0
	movs r1, #0x31
	movs r2, #0x2e
	bl sub_806AC90
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _0806BBC8
_0806BBC6:
	movs r0, #0
_0806BBC8:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806BBD0
sub_806BBD0: @ 0x0806BBD0
	push {lr}
	ldr r0, _0806BBEC @ =gPlaySt
	ldrh r0, [r0, #0x10]
	cmp r0, #3
	bls _0806BBF0
	movs r0, #0x14
	movs r1, #0
	movs r2, #0x2d
	movs r3, #0x18
	bl sub_806ACEC
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _0806BBF2
	.align 2, 0
_0806BBEC: .4byte gPlaySt
_0806BBF0:
	movs r0, #0
_0806BBF2:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806BBF8
sub_806BBF8: @ 0x0806BBF8
	push {lr}
	ldr r0, _0806BC14 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0
	bne _0806BC10
	bl RandNextB
	movs r1, #0xb
	bl DivRem
	cmp r0, #0
	beq _0806BC18
_0806BC10:
	movs r0, #0
	b _0806BC1A
	.align 2, 0
_0806BC14: .4byte gPlaySt
_0806BC18:
	movs r0, #1
_0806BC1A:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806BC20
sub_806BC20: @ 0x0806BC20
	push {r4, lr}
	adds r4, r0, #0
	bl sub_806C158
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806BC4E
	adds r0, r4, #0
	movs r1, #1
	movs r2, #0x1d
	bl sub_806AC90
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806BC52
	adds r0, r4, #0
	movs r1, #0x1d
	movs r2, #1
	bl sub_806AC90
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806BC52
_0806BC4E:
	movs r0, #0
	b _0806BC54
_0806BC52:
	movs r0, #1
_0806BC54:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806BC5C
sub_806BC5C: @ 0x0806BC5C
	push {r4, lr}
	ldr r4, _0806BC98 @ =gPlaySt
	ldrb r0, [r4, #0xf]
	cmp r0, #0x80
	bne _0806BC9C
	movs r0, #4
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806BC9C
	movs r0, #5
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806BC9C
	movs r0, #1
	ldrh r4, [r4, #0x10]
	ands r0, r4
	cmp r0, #0
	bne _0806BC9C
	movs r0, #0x11
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806BC9C
	movs r0, #1
	b _0806BC9E
	.align 2, 0
_0806BC98: .4byte gPlaySt
_0806BC9C:
	movs r0, #0
_0806BC9E:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_806BCA4
sub_806BCA4: @ 0x0806BCA4
	push {r4, lr}
	ldr r4, _0806BCE0 @ =gPlaySt
	ldrb r0, [r4, #0xf]
	cmp r0, #0x80
	bne _0806BCE4
	movs r0, #5
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806BCE4
	movs r0, #6
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806BCE4
	movs r0, #1
	ldrh r4, [r4, #0x10]
	ands r0, r4
	cmp r0, #0
	beq _0806BCE4
	movs r0, #0x11
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806BCE4
	movs r0, #1
	b _0806BCE6
	.align 2, 0
_0806BCE0: .4byte gPlaySt
_0806BCE4:
	movs r0, #0
_0806BCE6:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_806BCEC
sub_806BCEC: @ 0x0806BCEC
	push {r4, lr}
	ldr r4, _0806BD28 @ =gPlaySt
	ldrb r0, [r4, #0xf]
	cmp r0, #0x80
	bne _0806BD2C
	movs r0, #6
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806BD2C
	movs r0, #7
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806BD2C
	movs r0, #1
	ldrh r4, [r4, #0x10]
	ands r0, r4
	cmp r0, #0
	bne _0806BD2C
	movs r0, #0x11
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806BD2C
	movs r0, #1
	b _0806BD2E
	.align 2, 0
_0806BD28: .4byte gPlaySt
_0806BD2C:
	movs r0, #0
_0806BD2E:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_806BD34
sub_806BD34: @ 0x0806BD34
	push {r4, lr}
	ldr r4, _0806BD70 @ =gPlaySt
	ldrb r0, [r4, #0xf]
	cmp r0, #0x80
	bne _0806BD74
	movs r0, #7
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806BD74
	movs r0, #8
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806BD74
	movs r0, #1
	ldrh r4, [r4, #0x10]
	ands r0, r4
	cmp r0, #0
	beq _0806BD74
	movs r0, #0x11
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806BD74
	movs r0, #1
	b _0806BD76
	.align 2, 0
_0806BD70: .4byte gPlaySt
_0806BD74:
	movs r0, #0
_0806BD76:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_806BD7C
sub_806BD7C: @ 0x0806BD7C
	push {r4, lr}
	ldr r4, _0806BDB8 @ =gPlaySt
	ldrb r0, [r4, #0xf]
	cmp r0, #0x80
	bne _0806BDBC
	movs r0, #8
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806BDBC
	movs r0, #9
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806BDBC
	movs r0, #1
	ldrh r4, [r4, #0x10]
	ands r0, r4
	cmp r0, #0
	bne _0806BDBC
	movs r0, #0x11
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806BDBC
	movs r0, #1
	b _0806BDBE
	.align 2, 0
_0806BDB8: .4byte gPlaySt
_0806BDBC:
	movs r0, #0
_0806BDBE:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_806BDC4
sub_806BDC4: @ 0x0806BDC4
	push {r4, lr}
	ldr r4, _0806BDF4 @ =gPlaySt
	ldrb r0, [r4, #0xf]
	cmp r0, #0x80
	bne _0806BDF8
	movs r0, #9
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806BDF8
	movs r0, #1
	ldrh r4, [r4, #0x10]
	ands r0, r4
	cmp r0, #0
	beq _0806BDF8
	movs r0, #0x11
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806BDF8
	movs r0, #1
	b _0806BDFA
	.align 2, 0
_0806BDF4: .4byte gPlaySt
_0806BDF8:
	movs r0, #0
_0806BDFA:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_806BE00
sub_806BE00: @ 0x0806BE00
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #8
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806BE28
	bl sub_806C36C
	cmp r0, #0
	beq _0806BE28
	adds r0, r4, #0
	movs r1, #0x31
	movs r2, #0x2e
	bl sub_806AC90
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _0806BE2A
_0806BE28:
	movs r0, #0
_0806BE2A:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_806BE30
sub_806BE30: @ 0x0806BE30
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #5
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806BE58
	bl sub_806C294
	cmp r0, #0
	beq _0806BE58
	adds r0, r4, #0
	movs r1, #0x31
	movs r2, #0x2e
	bl sub_806AC90
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _0806BE5A
_0806BE58:
	movs r0, #0
_0806BE5A:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_806BE60
sub_806BE60: @ 0x0806BE60
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #5
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806BE88
	bl sub_806C294
	cmp r0, #0
	beq _0806BE88
	adds r0, r4, #0
	movs r1, #0x31
	movs r2, #0x2e
	bl sub_806AC90
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _0806BE8A
_0806BE88:
	movs r0, #0
_0806BE8A:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_806BE90
sub_806BE90: @ 0x0806BE90
	push {r4, lr}
	adds r4, r0, #0
	bl sub_806C3CC
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806BEAE
	adds r0, r4, #0
	movs r1, #0x31
	movs r2, #0x2e
	bl sub_806AC90
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _0806BEB0
_0806BEAE:
	movs r0, #0
_0806BEB0:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806BEB8
sub_806BEB8: @ 0x0806BEB8
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #9
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806BEE2
	bl sub_806C3CC
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806BEE2
	adds r0, r4, #0
	movs r1, #0x31
	movs r2, #0x2e
	bl sub_806AC90
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _0806BEE4
_0806BEE2:
	movs r0, #0
_0806BEE4:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806BEEC
sub_806BEEC: @ 0x0806BEEC
	push {lr}
	ldr r0, _0806BF08 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0x80
	bne _0806BF0C
	movs r0, #0xa
	movs r1, #0xe
	movs r2, #0xa
	movs r3, #0xe
	bl sub_806AE7C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _0806BF0E
	.align 2, 0
_0806BF08: .4byte gPlaySt
_0806BF0C:
	movs r0, #0
_0806BF0E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806BF14
sub_806BF14: @ 0x0806BF14
	push {lr}
	movs r0, #4
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806BF32
	movs r0, #0xda
	bl sub_806C310
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806BF32
	movs r0, #1
	b _0806BF34
_0806BF32:
	movs r0, #0
_0806BF34:
	pop {r1}
	bx r1

	thumb_func_start sub_806BF38
sub_806BF38: @ 0x0806BF38
	ldr r0, _0806BF68 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0xc
	bgt _0806BF6C
	cmp r0, #2
	beq _0806BF6C
	cmp r0, #3
	beq _0806BF6C
	cmp r0, #4
	beq _0806BF6C
	cmp r0, #5
	beq _0806BF6C
	cmp r0, #6
	beq _0806BF6C
	cmp r0, #7
	beq _0806BF6C
	cmp r0, #8
	beq _0806BF6C
	cmp r0, #0x20
	beq _0806BF6C
	movs r0, #0
	b _0806BF6E
	.align 2, 0
_0806BF68: .4byte gPlaySt
_0806BF6C:
	movs r0, #1
_0806BF6E:
	bx lr

	thumb_func_start sub_806BF70
sub_806BF70: @ 0x0806BF70
	push {lr}
	movs r0, #0xfe
	bl SoftReset
	pop {r0}
	bx r0

	thumb_func_start sub_806BF7C
sub_806BF7C: @ 0x0806BF7C
	ldr r0, _0806BF90 @ =gKeySt
	ldr r1, [r0]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	bne _0806BF94
	movs r0, #1
	b _0806BF96
	.align 2, 0
_0806BF90: .4byte gKeySt
_0806BF94:
	movs r0, #0
_0806BF96:
	bx lr

	thumb_func_start sub_806BF98
sub_806BF98: @ 0x0806BF98
	push {lr}
	movs r0, #0xfe
	bl SoftReset
	pop {r0}
	bx r0

	thumb_func_start sub_806BFA4
sub_806BFA4: @ 0x0806BFA4
	ldr r0, _0806BFB8 @ =gKeySt
	ldr r1, [r0]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	bne _0806BFBC
	movs r0, #0
	b _0806BFBE
	.align 2, 0
_0806BFB8: .4byte gKeySt
_0806BFBC:
	movs r0, #1
_0806BFBE:
	bx lr

	thumb_func_start sub_806BFC0
sub_806BFC0: @ 0x0806BFC0
	push {lr}
	movs r0, #0
	bl SetFogVision
	pop {r0}
	bx r0

	thumb_func_start sub_806BFCC
sub_806BFCC: @ 0x0806BFCC
	push {lr}
	bl GetGold
	ldr r1, _0806BFE0 @ =0x00001388
	adds r0, r0, r1
	bl SetGold
	pop {r0}
	bx r0
	.align 2, 0
_0806BFE0: .4byte 0x00001388

	thumb_func_start sub_806BFE4
sub_806BFE4: @ 0x0806BFE4
	push {r4, lr}
	adds r4, r0, #0
	bl GetGold
	cmp r0, r4
	blt _0806BFFA
	bl GetGold
	subs r0, r0, r4
	bl SetGold
_0806BFFA:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_806C000
sub_806C000: @ 0x0806C000
	adds r1, r0, #0
	ldrb r2, [r1, #0x10]
	movs r0, #0x10
	ldrsb r0, [r1, r0]
	cmp r0, #0
	ble _0806C010
	subs r0, r2, #1
	strb r0, [r1, #0x10]
_0806C010:
	ldrb r2, [r1, #0x12]
	movs r0, #0x12
	ldrsb r0, [r1, r0]
	cmp r0, #0
	ble _0806C01E
	subs r0, r2, #1
	strb r0, [r1, #0x12]
_0806C01E:
	ldrb r2, [r1, #0x13]
	movs r0, #0x13
	ldrsb r0, [r1, r0]
	cmp r0, #0
	ble _0806C02C
	subs r0, r2, #1
	strb r0, [r1, #0x13]
_0806C02C:
	ldrb r2, [r1, #0x14]
	movs r0, #0x14
	ldrsb r0, [r1, r0]
	cmp r0, #0
	ble _0806C03A
	subs r0, r2, #1
	strb r0, [r1, #0x14]
_0806C03A:
	ldrb r2, [r1, #0x15]
	movs r0, #0x15
	ldrsb r0, [r1, r0]
	cmp r0, #0
	ble _0806C048
	subs r0, r2, #1
	strb r0, [r1, #0x15]
_0806C048:
	ldrb r2, [r1, #0x16]
	movs r0, #0x16
	ldrsb r0, [r1, r0]
	cmp r0, #0
	ble _0806C056
	subs r0, r2, #1
	strb r0, [r1, #0x16]
_0806C056:
	ldrb r2, [r1, #0x17]
	movs r0, #0x17
	ldrsb r0, [r1, r0]
	cmp r0, #0
	ble _0806C064
	subs r0, r2, #1
	strb r0, [r1, #0x17]
_0806C064:
	bx lr
	.align 2, 0

	thumb_func_start sub_806C068
sub_806C068: @ 0x0806C068
	push {lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl GetUnitByPid
	bl sub_806C000
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806C07C
sub_806C07C: @ 0x0806C07C
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	movs r4, #1
_0806C084:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0806C0AA
	ldr r2, [r1]
	cmp r2, #0
	beq _0806C0AA
	movs r0, #0xc
	ldrh r1, [r1, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _0806C0AA
	ldrb r2, [r2, #4]
	cmp r2, r5
	bne _0806C0AA
	movs r0, #1
	b _0806C0B2
_0806C0AA:
	adds r4, #1
	cmp r4, #0x3f
	ble _0806C084
	movs r0, #0
_0806C0B2:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_806C0B8
sub_806C0B8: @ 0x0806C0B8
	push {lr}
	movs r0, #0x26
	bl sub_806C07C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C0C8
sub_806C0C8: @ 0x0806C0C8
	push {lr}
	movs r0, #0x1f
	bl sub_806C07C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C0D8
sub_806C0D8: @ 0x0806C0D8
	push {lr}
	movs r0, #0x42
	bl sub_806C07C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C0E8
sub_806C0E8: @ 0x0806C0E8
	push {lr}
	movs r0, #0x2c
	bl sub_806C07C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C0F8
sub_806C0F8: @ 0x0806C0F8
	push {lr}
	movs r0, #0x3c
	bl sub_806C07C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C108
sub_806C108: @ 0x0806C108
	push {lr}
	movs r0, #4
	bl sub_806C07C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C118
sub_806C118: @ 0x0806C118
	push {lr}
	movs r0, #6
	bl sub_806C07C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C128
sub_806C128: @ 0x0806C128
	push {lr}
	movs r0, #5
	bl sub_806C07C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C138
sub_806C138: @ 0x0806C138
	push {lr}
	movs r0, #0x37
	bl sub_806C07C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C148
sub_806C148: @ 0x0806C148
	push {lr}
	movs r0, #0x32
	bl sub_806C07C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C158
sub_806C158: @ 0x0806C158
	push {lr}
	movs r0, #0x1d
	bl sub_806C07C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start IsCharacterInBlueTeam
IsCharacterInBlueTeam: @ 0x0806C168
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	movs r4, #1
_0806C170:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0806C196
	ldr r2, [r1]
	cmp r2, #0
	beq _0806C196
	movs r0, #4
	ldrh r1, [r1, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _0806C196
	ldrb r2, [r2, #4]
	cmp r2, r5
	bne _0806C196
	movs r0, #1
	b _0806C19E
_0806C196:
	adds r4, #1
	cmp r4, #0x3f
	ble _0806C170
	movs r0, #0
_0806C19E:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_806C1A4
sub_806C1A4: @ 0x0806C1A4
	push {lr}
	movs r0, #9
	bl IsCharacterInBlueTeam
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C1B4
sub_806C1B4: @ 0x0806C1B4
	push {lr}
	movs r0, #0x26
	bl IsCharacterInBlueTeam
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C1C4
sub_806C1C4: @ 0x0806C1C4
	push {lr}
	movs r0, #0x11
	bl IsCharacterInBlueTeam
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C1D4
sub_806C1D4: @ 0x0806C1D4
	push {lr}
	movs r0, #0x2a
	bl IsCharacterInBlueTeam
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C1E4
sub_806C1E4: @ 0x0806C1E4
	push {lr}
	movs r0, #5
	bl IsCharacterInBlueTeam
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C1F4
sub_806C1F4: @ 0x0806C1F4
	push {lr}
	movs r0, #0x35
	bl IsCharacterInBlueTeam
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C204
sub_806C204: @ 0x0806C204
	push {lr}
	movs r0, #0x37
	bl IsCharacterInBlueTeam
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C214
sub_806C214: @ 0x0806C214
	push {lr}
	movs r0, #0x32
	bl IsCharacterInBlueTeam
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C224
sub_806C224: @ 0x0806C224
	push {lr}
	movs r0, #0x36
	bl IsCharacterInBlueTeam
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C234
sub_806C234: @ 0x0806C234
	push {lr}
	movs r0, #0x2c
	bl IsCharacterInBlueTeam
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C244
sub_806C244: @ 0x0806C244
	push {lr}
	movs r0, #0x3c
	bl IsCharacterInBlueTeam
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C254
sub_806C254: @ 0x0806C254
	push {lr}
	movs r0, #0x34
	bl IsCharacterInBlueTeam
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start IsItTeamFae
IsItTeamFae: @ 0x0806C264
	push {lr}
	movs r0, #3
	bl IsCharacterInBlueTeam
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C274
sub_806C274: @ 0x0806C274
	push {lr}
	movs r0, #4
	bl IsCharacterInBlueTeam
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C284
sub_806C284: @ 0x0806C284
	push {lr}
	movs r0, #6
	bl IsCharacterInBlueTeam
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C294
sub_806C294: @ 0x0806C294
	push {lr}
	movs r0, #0xf
	bl IsCharacterInBlueTeam
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C2A4
sub_806C2A4: @ 0x0806C2A4
	push {lr}
	movs r0, #0x2e
	bl IsCharacterInBlueTeam
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C2B4
sub_806C2B4: @ 0x0806C2B4
	push {lr}
	movs r0, #0xb
	bl IsCharacterInBlueTeam
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C2C4
sub_806C2C4: @ 0x0806C2C4
	push {r4, lr}
	movs r4, #0x41
_0806C2C8:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0806C2E8
	ldr r0, [r1]
	cmp r0, #0
	beq _0806C2E8
	movs r0, #4
	ldrh r1, [r1, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _0806C2E8
	movs r0, #1
	b _0806C2F0
_0806C2E8:
	adds r4, #1
	cmp r4, #0xbf
	ble _0806C2C8
	movs r0, #0
_0806C2F0:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806C2F8
sub_806C2F8: @ 0x0806C2F8
	push {lr}
	bl sub_806C2C4
	movs r1, #0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806C308
	movs r1, #1
_0806C308:
	adds r0, r1, #0
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806C310
sub_806C310: @ 0x0806C310
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	movs r4, #0x41
_0806C318:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0806C33E
	ldr r2, [r1]
	cmp r2, #0
	beq _0806C33E
	movs r0, #4
	ldrh r1, [r1, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _0806C33E
	ldrb r2, [r2, #4]
	cmp r2, r5
	bne _0806C33E
	movs r0, #1
	b _0806C346
_0806C33E:
	adds r4, #1
	cmp r4, #0xbf
	ble _0806C318
	movs r0, #0
_0806C346:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_806C34C
sub_806C34C: @ 0x0806C34C
	push {lr}
	movs r0, #0x2e
	bl sub_806C310
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C35C
sub_806C35C: @ 0x0806C35C
	push {lr}
	movs r0, #0x5e
	bl sub_806C310
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C36C
sub_806C36C: @ 0x0806C36C
	push {lr}
	movs r0, #0xf
	bl sub_806C310
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C37C
sub_806C37C: @ 0x0806C37C
	push {lr}
	movs r0, #0x35
	bl sub_806C310
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C38C
sub_806C38C: @ 0x0806C38C
	push {lr}
	movs r0, #0x27
	bl sub_806C310
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C39C
sub_806C39C: @ 0x0806C39C
	push {lr}
	movs r0, #0x33
	bl sub_806C310
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C3AC
sub_806C3AC: @ 0x0806C3AC
	push {lr}
	movs r0, #0xc4
	bl sub_806C310
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C3BC
sub_806C3BC: @ 0x0806C3BC
	push {lr}
	movs r0, #0xc6
	bl sub_806C310
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C3CC
sub_806C3CC: @ 0x0806C3CC
	push {lr}
	movs r0, #0xb
	bl sub_806C310
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C3DC
sub_806C3DC: @ 0x0806C3DC
	push {lr}
	movs r0, #0x1d
	bl sub_806C310
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C3EC
sub_806C3EC: @ 0x0806C3EC
	push {lr}
	movs r0, #0xd5
	bl sub_806C310
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C3FC
sub_806C3FC: @ 0x0806C3FC
	push {lr}
	movs r0, #0xd6
	bl sub_806C310
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C40C
sub_806C40C: @ 0x0806C40C
	push {lr}
	movs r0, #0xd7
	bl sub_806C310
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1

	thumb_func_start sub_806C41C
sub_806C41C: @ 0x0806C41C
	push {r4, r5, r6, r7, lr}
	adds r5, r1, #0
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	movs r6, #0
	adds r4, r5, #1
	b _0806C450
_0806C42A:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0806C44E
	ldr r2, [r1]
	cmp r2, #0
	beq _0806C44E
	movs r0, #4
	ldrh r1, [r1, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _0806C44E
	ldrb r2, [r2, #4]
	cmp r2, r7
	bne _0806C44E
	adds r6, #1
_0806C44E:
	adds r4, #1
_0806C450:
	adds r0, r5, #0
	adds r0, #0x40
	cmp r4, r0
	blt _0806C42A
	adds r0, r6, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_806C460
sub_806C460: @ 0x0806C460
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r6, #0
	adds r4, r5, #1
	b _0806C48C
_0806C46A:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0806C488
	ldr r0, [r1]
	cmp r0, #0
	beq _0806C488
	movs r0, #4
	ldrh r1, [r1, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _0806C488
	adds r6, #1
_0806C488:
	adds r4, #1
	adds r0, r5, #0
_0806C48C:
	adds r0, #0x40
	cmp r4, r0
	blt _0806C46A
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806C49C
sub_806C49C: @ 0x0806C49C
	ldr r0, _0806C4A8 @ =gPlaySt
	ldrh r0, [r0, #0x10]
	cmp r0, #0x14
	bhi _0806C4AC
	movs r0, #0
	b _0806C4AE
	.align 2, 0
_0806C4A8: .4byte gPlaySt
_0806C4AC:
	movs r0, #1
_0806C4AE:
	bx lr

	thumb_func_start sub_806C4B0
sub_806C4B0: @ 0x0806C4B0
	ldr r0, _0806C4BC @ =gPlaySt
	ldrh r0, [r0, #0x10]
	cmp r0, #0x19
	bhi _0806C4C0
	movs r0, #0
	b _0806C4C2
	.align 2, 0
_0806C4BC: .4byte gPlaySt
_0806C4C0:
	movs r0, #1
_0806C4C2:
	bx lr

	thumb_func_start sub_806C4C4
sub_806C4C4: @ 0x0806C4C4
	ldr r0, _0806C4D0 @ =gPlaySt
	ldrh r0, [r0, #0x10]
	cmp r0, #0x1e
	bhi _0806C4D4
	movs r0, #0
	b _0806C4D6
	.align 2, 0
_0806C4D0: .4byte gPlaySt
_0806C4D4:
	movs r0, #1
_0806C4D6:
	bx lr

	thumb_func_start sub_806C4D8
sub_806C4D8: @ 0x0806C4D8
	ldr r0, _0806C4E4 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0
	bne _0806C4E8
	movs r0, #1
	b _0806C4EA
	.align 2, 0
_0806C4E4: .4byte gPlaySt
_0806C4E8:
	movs r0, #0
_0806C4EA:
	bx lr

	thumb_func_start sub_806C4EC
sub_806C4EC: @ 0x0806C4EC
	ldr r0, _0806C4F8 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0x80
	bne _0806C4FC
	movs r0, #1
	b _0806C4FE
	.align 2, 0
_0806C4F8: .4byte gPlaySt
_0806C4FC:
	movs r0, #0
_0806C4FE:
	bx lr

	thumb_func_start sub_806C500
sub_806C500: @ 0x0806C500
	ldr r0, _0806C51C @ =gActiveUnit
	ldr r0, [r0]
	ldr r1, [r0]
	ldr r2, [r0, #4]
	ldr r0, [r1, #0x28]
	ldr r1, [r2, #0x24]
	orrs r0, r1
	movs r1, #0x80
	lsls r1, r1, #7
	ands r0, r1
	cmp r0, #0
	bne _0806C520
	movs r0, #1
	b _0806C522
	.align 2, 0
_0806C51C: .4byte gActiveUnit
_0806C520:
	movs r0, #0
_0806C522:
	bx lr

	thumb_func_start sub_806C524
sub_806C524: @ 0x0806C524
	push {lr}
	bl GetGold
	ldr r1, _0806C534 @ =0x0000270F
	cmp r0, r1
	ble _0806C538
	movs r0, #1
	b _0806C53A
	.align 2, 0
_0806C534: .4byte 0x0000270F
_0806C538:
	movs r0, #0
_0806C53A:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806C540
sub_806C540: @ 0x0806C540
	push {lr}
	bl GetGold
	ldr r1, _0806C550 @ =0x00001F3F
	cmp r0, r1
	ble _0806C554
	movs r0, #1
	b _0806C556
	.align 2, 0
_0806C550: .4byte 0x00001F3F
_0806C554:
	movs r0, #0
_0806C556:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806C55C
sub_806C55C: @ 0x0806C55C
	push {lr}
	bl GetGold
	ldr r1, _0806C56C @ =0x0000176F
	cmp r0, r1
	ble _0806C570
	movs r0, #1
	b _0806C572
	.align 2, 0
_0806C56C: .4byte 0x0000176F
_0806C570:
	movs r0, #0
_0806C572:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806C578
sub_806C578: @ 0x0806C578
	push {lr}
	bl GetGold
	ldr r1, _0806C588 @ =0x00001387
	cmp r0, r1
	ble _0806C58C
	movs r0, #1
	b _0806C58E
	.align 2, 0
_0806C588: .4byte 0x00001387
_0806C58C:
	movs r0, #0
_0806C58E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806C594
sub_806C594: @ 0x0806C594
	push {lr}
	bl GetTalkChoiceResult
	cmp r0, #1
	beq _0806C5A2
	movs r0, #0
	b _0806C5A4
_0806C5A2:
	movs r0, #1
_0806C5A4:
	pop {r1}
	bx r1

	thumb_func_start sub_806C5A8
sub_806C5A8: @ 0x0806C5A8
	push {r4, r5, lr}
	movs r0, #5
	bl sub_8084F4C
	adds r2, r0, #0
	ldrb r1, [r2, #7]
	lsrs r0, r1, #4
	ldrb r2, [r2, #8]
	lsls r5, r2, #4
	orrs r5, r0
	movs r0, #4
	bl sub_8084F4C
	adds r2, r0, #0
	ldrb r0, [r2, #7]
	lsrs r1, r0, #4
	ldrb r2, [r2, #8]
	lsls r0, r2, #4
	orrs r0, r1
	adds r5, r5, r0
	movs r0, #0x2e
	bl sub_8084F4C
	adds r2, r0, #0
	ldrb r1, [r2, #7]
	lsrs r0, r1, #4
	ldrb r2, [r2, #8]
	lsls r4, r2, #4
	orrs r4, r0
	movs r0, #0x31
	bl sub_8084F4C
	adds r2, r0, #0
	ldrb r0, [r2, #7]
	lsrs r1, r0, #4
	ldrb r2, [r2, #8]
	lsls r0, r2, #4
	orrs r0, r1
	adds r4, r4, r0
	cmp r5, r4
	bhi _0806C5FE
	movs r0, #0
	b _0806C600
_0806C5FE:
	movs r0, #1
_0806C600:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806C608
sub_806C608: @ 0x0806C608
	push {lr}
	ldr r1, _0806C628 @ =gPlaySt
	movs r0, #8
	ldrb r2, [r1, #0x14]
	ands r0, r2
	cmp r0, #0
	bne _0806C61E
	ldrb r1, [r1, #0x1d]
	lsls r0, r1, #0x1f
	cmp r0, #0
	bne _0806C624
_0806C61E:
	movs r0, #4
	bl FadeBgmOut
_0806C624:
	pop {r0}
	bx r0
	.align 2, 0
_0806C628: .4byte gPlaySt

	thumb_func_start sub_806C62C
sub_806C62C: @ 0x0806C62C
	ldr r0, _0806C644 @ =gPlaySt
	ldrb r1, [r0, #0x14]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	bne _0806C648
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	bne _0806C648
	movs r0, #0
	b _0806C64A
	.align 2, 0
_0806C644: .4byte gPlaySt
_0806C648:
	movs r0, #1
_0806C64A:
	bx lr

	thumb_func_start sub_806C64C
sub_806C64C: @ 0x0806C64C
	push {lr}
	ldr r1, _0806C668 @ =0x030048A8
	movs r0, #0
	strb r0, [r1]
	movs r0, #0x16
	bl ClearEid
	bl sub_802BA08
	ldr r1, _0806C66C @ =0x0203D358
	str r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0806C668: .4byte 0x030048A8
_0806C66C: .4byte 0x0203D358

	thumb_func_start sub_806C670
sub_806C670: @ 0x0806C670
	push {lr}
	ldr r1, _0806C688 @ =0x030048A8
	ldrb r0, [r1]
	cmp r0, #0
	bne _0806C682
	adds r0, #1
	strb r0, [r1]
	bl sub_8041FD8
_0806C682:
	pop {r0}
	bx r0
	.align 2, 0
_0806C688: .4byte 0x030048A8

	thumb_func_start sub_806C68C
sub_806C68C: @ 0x0806C68C
	ldr r0, _0806C698 @ =0x030048A8
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bx lr
	.align 2, 0
_0806C698: .4byte 0x030048A8

	thumb_func_start sub_806C69C
sub_806C69C: @ 0x0806C69C
	push {lr}
	ldr r1, _0806C6AC @ =0x030048A8
	movs r0, #0
	strb r0, [r1]
	bl sub_8041FF8
	pop {r0}
	bx r0
	.align 2, 0
_0806C6AC: .4byte 0x030048A8

	thumb_func_start sub_806C6B0
sub_806C6B0: @ 0x0806C6B0
	push {lr}
	bl sub_802B9DC
	ldr r1, _0806C6D0 @ =0x0203D354
	str r0, [r1]
	ldr r0, _0806C6D4 @ =gActiveUnit
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	cmp r0, #0xd
	beq _0806C6F0
	cmp r0, #0xd
	bgt _0806C6D8
	cmp r0, #1
	beq _0806C6E2
	b _0806C70E
	.align 2, 0
_0806C6D0: .4byte 0x0203D354
_0806C6D4: .4byte gActiveUnit
_0806C6D8:
	cmp r0, #0x1b
	beq _0806C708
	cmp r0, #0x26
	beq _0806C6FC
	b _0806C70E
_0806C6E2:
	ldr r0, _0806C6EC @ =0x0866AF5C
	bl StartEvent
	b _0806C70E
	.align 2, 0
_0806C6EC: .4byte 0x0866AF5C
_0806C6F0:
	ldr r0, _0806C6F8 @ =0x0866AFEC
	bl StartEvent
	b _0806C70E
	.align 2, 0
_0806C6F8: .4byte 0x0866AFEC
_0806C6FC:
	ldr r0, _0806C704 @ =0x0866B07C
	bl StartEvent
	b _0806C70E
	.align 2, 0
_0806C704: .4byte 0x0866B07C
_0806C708:
	ldr r0, _0806C714 @ =0x0866B10C
	bl StartEvent
_0806C70E:
	pop {r0}
	bx r0
	.align 2, 0
_0806C714: .4byte 0x0866B10C

	thumb_func_start sub_806C718
sub_806C718: @ 0x0806C718
	push {lr}
	movs r0, #9
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806C72C
	ldr r0, _0806C730 @ =0x0866AEA8
	bl StartEvent
_0806C72C:
	pop {r0}
	bx r0
	.align 2, 0
_0806C730: .4byte 0x0866AEA8

	thumb_func_start sub_806C734
sub_806C734: @ 0x0806C734
	push {lr}
	movs r0, #0xa
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806C748
	ldr r0, _0806C74C @ =0x0866AEE0
	bl StartEvent
_0806C748:
	pop {r0}
	bx r0
	.align 2, 0
_0806C74C: .4byte 0x0866AEE0

	thumb_func_start sub_806C750
sub_806C750: @ 0x0806C750
	push {lr}
	movs r0, #0xb
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806C764
	ldr r0, _0806C768 @ =0x0866AF28
	bl StartEvent
_0806C764:
	pop {r0}
	bx r0
	.align 2, 0
_0806C768: .4byte 0x0866AF28

	thumb_func_start sub_806C76C
sub_806C76C: @ 0x0806C76C
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	adds r3, r2, #0
	movs r0, #8
	str r0, [sp]
	movs r0, #1
	adds r1, r4, #0
	adds r2, r5, #0
	bl Interpolate
	adds r5, r0, #0
	ldr r0, _0806C7B0 @ =0x08342A98
	ldr r4, _0806C7B4 @ =0x02021948
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	ldr r0, _0806C7B8 @ =0xFFFFFDC0
	adds r4, r4, r0
	adds r0, r4, #0
	movs r1, #0x12
	movs r2, #1
	adds r3, r5, #0
	bl sub_805B644
	bl EnablePalSync
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806C7B0: .4byte 0x08342A98
_0806C7B4: .4byte 0x02021948
_0806C7B8: .4byte 0xFFFFFDC0

	thumb_func_start sub_806C7BC
sub_806C7BC: @ 0x0806C7BC
	push {lr}
	adds r1, r0, #0
	adds r1, #0x64
	movs r2, #0
	strh r2, [r1]
	adds r0, #0x66
	strh r2, [r0]
	ldr r0, _0806C7DC @ =0x08342A98
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r0}
	bx r0
	.align 2, 0
_0806C7DC: .4byte 0x08342A98

	thumb_func_start sub_806C7E0
sub_806C7E0: @ 0x0806C7E0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov r8, r0
	ldr r0, _0806C7FC @ =0x0203D35D
	ldrb r0, [r0]
	cmp r0, #1
	beq _0806C86C
	cmp r0, #1
	bgt _0806C800
	cmp r0, #0
	beq _0806C806
	b _0806C8C6
	.align 2, 0
_0806C7FC: .4byte 0x0203D35D
_0806C800:
	cmp r0, #2
	beq _0806C8A0
	b _0806C8C6
_0806C806:
	movs r4, #0
	ldr r0, _0806C85C @ =0x0203D35C
	ldrb r0, [r0]
	cmp r4, r0
	bge _0806C8C6
	ldr r5, _0806C860 @ =gBmSt
_0806C812:
	adds r0, r4, #0
	bl GetTarget
	movs r1, #0
	ldrsb r1, [r0, r1]
	lsls r1, r1, #4
	movs r3, #0xc
	ldrsh r2, [r5, r3]
	subs r2, r1, r2
	ldrb r0, [r0, #1]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	lsls r0, r0, #4
	movs r3, #0xe
	ldrsh r1, [r5, r3]
	subs r3, r0, r1
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r2, r1
	subs r1, #1
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r3, r2
	movs r2, #0xff
	ands r1, r2
	ldr r2, _0806C864 @ =0x0866ACCC
	ldr r3, _0806C868 @ =0x00002822
	bl PutOamHiRam
	adds r4, #1
	ldr r0, _0806C85C @ =0x0203D35C
	ldrb r0, [r0]
	cmp r4, r0
	blt _0806C812
	b _0806C8C6
	.align 2, 0
_0806C85C: .4byte 0x0203D35C
_0806C860: .4byte gBmSt
_0806C864: .4byte 0x0866ACCC
_0806C868: .4byte 0x00002822
_0806C86C:
	ldr r1, _0806C894 @ =gBmSt
	movs r3, #0xc
	ldrsh r0, [r1, r3]
	movs r2, #0xb4
	lsls r2, r2, #2
	movs r3, #0xe
	ldrsh r1, [r1, r3]
	movs r3, #0xb8
	lsls r3, r3, #1
	subs r0, r2, r0
	subs r2, #0xd1
	ands r0, r2
	subs r1, r3, r1
	movs r2, #0xff
	ands r1, r2
	ldr r2, _0806C898 @ =0x0866ACCC
	ldr r3, _0806C89C @ =0x00002822
	bl PutOamHiRam
	b _0806C8C6
	.align 2, 0
_0806C894: .4byte gBmSt
_0806C898: .4byte 0x0866ACCC
_0806C89C: .4byte 0x00002822
_0806C8A0:
	ldr r1, _0806C908 @ =gBmSt
	movs r2, #0xc
	ldrsh r0, [r1, r2]
	movs r2, #0xd8
	lsls r2, r2, #2
	movs r3, #0xe
	ldrsh r1, [r1, r3]
	movs r3, #0xa0
	lsls r3, r3, #1
	subs r0, r2, r0
	ldr r2, _0806C90C @ =0x000001FF
	ands r0, r2
	subs r1, r3, r1
	movs r2, #0xff
	ands r1, r2
	ldr r2, _0806C910 @ =0x0866ACCC
	ldr r3, _0806C914 @ =0x00002822
	bl PutOamHiRam
_0806C8C6:
	bl GetGameTime
	adds r5, r0, #0
	movs r0, #1
	mov sb, r0
	ands r5, r0
	cmp r5, #0
	bne _0806C93C
	mov r6, r8
	adds r6, #0x66
	movs r1, #0
	ldrsh r7, [r6, r1]
	cmp r7, #0
	beq _0806C918
	mov r4, r8
	adds r4, #0x64
	movs r3, #0
	ldrsh r2, [r4, r3]
	movs r0, #0x10
	movs r1, #0
	bl sub_806C76C
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #8
	ble _0806C93C
	strh r5, [r4]
	strh r5, [r6]
	b _0806C93C
	.align 2, 0
_0806C908: .4byte gBmSt
_0806C90C: .4byte 0x000001FF
_0806C910: .4byte 0x0866ACCC
_0806C914: .4byte 0x00002822
_0806C918:
	mov r4, r8
	adds r4, #0x64
	movs r0, #0
	ldrsh r2, [r4, r0]
	movs r0, #0
	movs r1, #0x10
	bl sub_806C76C
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #8
	ble _0806C93C
	strh r7, [r4]
	mov r1, sb
	strh r1, [r6]
_0806C93C:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_806C948
sub_806C948: @ 0x0806C948
	adds r0, #0x64
	movs r1, #0x3c
	strh r1, [r0]
	bx lr

	thumb_func_start sub_806C950
sub_806C950: @ 0x0806C950
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x64
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0806C97E
	bl sub_80718E0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806C98A
	ldr r0, _0806C990 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0806C98A
_0806C97E:
	ldr r0, _0806C994 @ =0x0866ACE8
	bl Proc_EndEach
	adds r0, r4, #0
	bl Proc_Break
_0806C98A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806C990: .4byte gKeySt
_0806C994: .4byte 0x0866ACE8

	thumb_func_start sub_806C998
sub_806C998: @ 0x0806C998
	push {r4, r5, lr}
	ldr r1, _0806C9E8 @ =0x0203D35D
	strb r0, [r1]
	ldr r5, _0806C9EC @ =gActiveUnit
	ldr r0, [r5]
	bl sub_802BA44
	ldr r4, _0806C9F0 @ =0x0203D35C
	bl CountTargets
	strb r0, [r4]
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806C9E0
	ldr r0, _0806C9F4 @ =0x0866ACE8
	movs r1, #3
	bl SpawnProc
	movs r0, #0
	bl GetTarget
	movs r1, #0
	ldrsb r1, [r0, r1]
	movs r2, #1
	ldrsb r2, [r0, r2]
	movs r0, #0
	bl CameraMoveWatchPosition
	ldr r1, [r5]
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	ldrb r1, [r1, #0xf]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	bl SetMapCursorPosition
_0806C9E0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806C9E8: .4byte 0x0203D35D
_0806C9EC: .4byte gActiveUnit
_0806C9F0: .4byte 0x0203D35C
_0806C9F4: .4byte 0x0866ACE8

	thumb_func_start sub_806C9F8
sub_806C9F8: @ 0x0806C9F8
	push {r4, lr}
	bl sub_80718E0
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #0
	bne _0806CA0E
	ldr r0, _0806CA18 @ =0x0866AD00
	movs r1, #3
	bl SpawnProc
_0806CA0E:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0806CA18: .4byte 0x0866AD00

	thumb_func_start sub_806CA1C
sub_806CA1C: @ 0x0806CA1C
	push {lr}
	movs r0, #0x10
	movs r1, #0x68
	movs r2, #0x19
	movs r3, #0
	bl sub_8071B80
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806CA30
sub_806CA30: @ 0x0806CA30
	push {lr}
	movs r0, #0x10
	movs r1, #0x68
	movs r2, #0x1a
	movs r3, #0
	bl sub_8071B80
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806CA44
sub_806CA44: @ 0x0806CA44
	push {lr}
	movs r0, #0x10
	movs r1, #0x68
	movs r2, #0x1e
	movs r3, #0
	bl sub_8071B80
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806CA58
sub_806CA58: @ 0x0806CA58
	push {lr}
	movs r0, #0x10
	movs r1, #0x68
	movs r2, #0x1f
	movs r3, #0
	bl sub_8071B80
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806CA6C
sub_806CA6C: @ 0x0806CA6C
	push {lr}
	movs r0, #0x10
	movs r1, #0x68
	movs r2, #0x20
	movs r3, #0
	bl sub_8071B80
	movs r0, #0
	bl sub_806C998
	pop {r0}
	bx r0

	thumb_func_start sub_806CA84
sub_806CA84: @ 0x0806CA84
	push {lr}
	movs r0, #0x10
	movs r1, #0x68
	movs r2, #0x23
	movs r3, #0
	bl sub_8071B80
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806CA98
sub_806CA98: @ 0x0806CA98
	push {lr}
	movs r0, #0x10
	movs r1, #0x68
	movs r2, #0x24
	movs r3, #0
	bl sub_8071B80
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806CAAC
sub_806CAAC: @ 0x0806CAAC
	push {lr}
	movs r0, #0x10
	movs r1, #0x68
	movs r2, #0x25
	movs r3, #0
	bl sub_8071B80
	movs r0, #0
	bl sub_806C998
	pop {r0}
	bx r0

	thumb_func_start sub_806CAC4
sub_806CAC4: @ 0x0806CAC4
	push {lr}
	movs r0, #0x10
	movs r1, #0x68
	movs r2, #0x29
	movs r3, #0
	bl sub_8071B80
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806CAD8
sub_806CAD8: @ 0x0806CAD8
	push {lr}
	movs r0, #0x10
	movs r1, #0x68
	movs r2, #0x2a
	movs r3, #0
	bl sub_8071B80
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806CAEC
sub_806CAEC: @ 0x0806CAEC
	push {lr}
	movs r0, #0x28
	movs r1, #0x68
	movs r2, #0x2b
	movs r3, #0
	bl sub_8071B80
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806CB00
sub_806CB00: @ 0x0806CB00
	push {lr}
	movs r0, #0x10
	movs r1, #0x10
	movs r2, #0x2d
	movs r3, #0
	bl sub_8071B80
	movs r0, #1
	bl sub_806C998
	pop {r0}
	bx r0

	thumb_func_start sub_806CB18
sub_806CB18: @ 0x0806CB18
	push {lr}
	movs r0, #0x10
	movs r1, #0x38
	movs r2, #0x2e
	movs r3, #0
	bl sub_8071B80
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806CB2C
sub_806CB2C: @ 0x0806CB2C
	push {lr}
	movs r0, #0x10
	movs r1, #0x10
	movs r2, #0x30
	movs r3, #0
	bl sub_8071B80
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806CB40
sub_806CB40: @ 0x0806CB40
	push {lr}
	movs r0, #0x10
	movs r1, #0x68
	movs r2, #0x45
	movs r3, #0
	bl sub_8071B80
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806CB54
sub_806CB54: @ 0x0806CB54
	push {lr}
	movs r0, #0x10
	movs r1, #0x68
	movs r2, #0x1b
	movs r3, #0
	bl sub_8071B80
	movs r0, #0
	bl sub_806C998
	pop {r0}
	bx r0

	thumb_func_start sub_806CB6C
sub_806CB6C: @ 0x0806CB6C
	push {lr}
	movs r0, #0x10
	movs r1, #0x68
	movs r2, #0x40
	movs r3, #0
	bl sub_8071B80
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806CB80
sub_806CB80: @ 0x0806CB80
	push {lr}
	movs r0, #0x10
	movs r1, #0x68
	movs r2, #0x3f
	movs r3, #0
	bl sub_8071B80
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806CB94
sub_806CB94: @ 0x0806CB94
	push {lr}
	movs r0, #0x10
	movs r1, #0x68
	movs r2, #0x3e
	movs r3, #0
	bl sub_8071B80
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806CBA8
sub_806CBA8: @ 0x0806CBA8
	push {lr}
	movs r0, #0x10
	movs r1, #0x68
	movs r2, #0x42
	movs r3, #0
	bl sub_8071B80
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806CBBC
sub_806CBBC: @ 0x0806CBBC
	push {lr}
	ldr r0, _0806CBD4 @ =gActiveUnit
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	cmp r0, #0xd
	beq _0806CBEA
	cmp r0, #0xd
	bgt _0806CBD8
	cmp r0, #1
	beq _0806CBE2
	b _0806CC04
	.align 2, 0
_0806CBD4: .4byte gActiveUnit
_0806CBD8:
	cmp r0, #0x1b
	beq _0806CBE2
	cmp r0, #0x26
	beq _0806CBF8
	b _0806CC04
_0806CBE2:
	movs r0, #0x10
	movs r1, #0x68
	movs r2, #0x1c
	b _0806CBF0
_0806CBEA:
	movs r0, #0x10
	movs r1, #0x68
	movs r2, #0x21
_0806CBF0:
	movs r3, #0
	bl sub_8071B80
	b _0806CC04
_0806CBF8:
	movs r0, #0x10
	movs r1, #0x68
	movs r2, #0x26
	movs r3, #0
	bl sub_8071B80
_0806CC04:
	pop {r0}
	bx r0

	thumb_func_start sub_806CC08
sub_806CC08: @ 0x0806CC08
	movs r1, #0
	ldr r0, _0806CC1C @ =gActiveUnit
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	cmp r0, #1
	bne _0806CC18
	movs r1, #1
_0806CC18:
	adds r0, r1, #0
	bx lr
	.align 2, 0
_0806CC1C: .4byte gActiveUnit

	thumb_func_start sub_806CC20
sub_806CC20: @ 0x0806CC20
	movs r1, #0
	ldr r0, _0806CC34 @ =gActiveUnit
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	cmp r0, #0xd
	bne _0806CC30
	movs r1, #1
_0806CC30:
	adds r0, r1, #0
	bx lr
	.align 2, 0
_0806CC34: .4byte gActiveUnit

	thumb_func_start sub_806CC38
sub_806CC38: @ 0x0806CC38
	movs r1, #0
	ldr r0, _0806CC4C @ =gActiveUnit
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	cmp r0, #0x26
	bne _0806CC48
	movs r1, #1
_0806CC48:
	adds r0, r1, #0
	bx lr
	.align 2, 0
_0806CC4C: .4byte gActiveUnit

	thumb_func_start sub_806CC50
sub_806CC50: @ 0x0806CC50
	movs r1, #0
	ldr r0, _0806CC64 @ =gActiveUnit
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	cmp r0, #0x1b
	bne _0806CC60
	movs r1, #1
_0806CC60:
	adds r0, r1, #0
	bx lr
	.align 2, 0
_0806CC64: .4byte gActiveUnit

	thumb_func_start sub_806CC68
sub_806CC68: @ 0x0806CC68
	ldr r0, _0806CC78 @ =0x0203D354
	ldr r0, [r0]
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	bne _0806CC7C
	movs r0, #0
	b _0806CC7E
	.align 2, 0
_0806CC78: .4byte 0x0203D354
_0806CC7C:
	movs r0, #1
_0806CC7E:
	bx lr

	thumb_func_start sub_806CC80
sub_806CC80: @ 0x0806CC80
	movs r1, #0
	ldr r0, _0806CC90 @ =gAction
	ldrb r0, [r0, #0x11]
	cmp r0, #2
	bne _0806CC8C
	movs r1, #1
_0806CC8C:
	adds r0, r1, #0
	bx lr
	.align 2, 0
_0806CC90: .4byte gAction

	thumb_func_start sub_806CC94
sub_806CC94: @ 0x0806CC94
	push {lr}
	movs r0, #0x16
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806CCAA
	ldr r0, _0806CCB0 @ =gAction
	ldrb r0, [r0, #0x11]
	cmp r0, #0xe
	beq _0806CCB4
_0806CCAA:
	movs r0, #0
	b _0806CCBC
	.align 2, 0
_0806CCB0: .4byte gAction
_0806CCB4:
	movs r0, #0x16
	bl SetEid
	movs r0, #1
_0806CCBC:
	pop {r1}
	bx r1

	thumb_func_start sub_806CCC0
sub_806CCC0: @ 0x0806CCC0
	movs r0, #0
	bx lr

	thumb_func_start sub_806CCC4
sub_806CCC4: @ 0x0806CCC4
	push {lr}
	movs r0, #0x12
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806CCE4
	movs r0, #0x13
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806CCE4
	movs r0, #0x12
	bl SetEid
_0806CCE4:
	pop {r0}
	bx r0

	thumb_func_start sub_806CCE8
sub_806CCE8: @ 0x0806CCE8
	push {r4, r5, r6, lr}
	movs r6, #1
_0806CCEC:
	adds r0, r6, #0
	bl GetUnit
	adds r5, r0, #0
	cmp r5, #0
	beq _0806CD26
	ldr r0, [r5]
	cmp r0, #0
	beq _0806CD26
	ldrb r0, [r0, #4]
	cmp r0, #1
	beq _0806CD10
	cmp r0, #0xd
	beq _0806CD10
	cmp r0, #0x26
	beq _0806CD10
	cmp r0, #0x1b
	bne _0806CD26
_0806CD10:
	adds r0, r5, #0
	bl GetUnitCurrentHp
	adds r4, r0, #0
	adds r0, r5, #0
	bl GetUnitMaxHp
	cmp r4, r0
	bge _0806CD26
	movs r0, #1
	b _0806CD2E
_0806CD26:
	adds r6, #1
	cmp r6, #0x3f
	ble _0806CCEC
	movs r0, #0
_0806CD2E:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_806CD34
sub_806CD34: @ 0x0806CD34
	push {r4, lr}
	movs r4, #1
_0806CD38:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _0806CD68
	ldr r1, [r0]
	cmp r1, #0
	beq _0806CD68
	ldrb r1, [r1, #4]
	cmp r1, #1
	beq _0806CD5A
	cmp r1, #0xd
	beq _0806CD5A
	cmp r1, #0x26
	beq _0806CD5A
	cmp r1, #0x1b
	bne _0806CD68
_0806CD5A:
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0x10
	ble _0806CD68
	movs r0, #1
	b _0806CD70
_0806CD68:
	adds r4, #1
	cmp r4, #0x3f
	ble _0806CD38
	movs r0, #0
_0806CD70:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806CD78
sub_806CD78: @ 0x0806CD78
	push {r4, lr}
	movs r4, #0x41
_0806CD7C:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _0806CD9C
	ldr r0, [r0]
	cmp r0, #0
	beq _0806CD9C
	ldr r0, [r0, #0x28]
	movs r1, #0x80
	lsls r1, r1, #8
	ands r0, r1
	cmp r0, #0
	beq _0806CD9C
	movs r0, #0
	b _0806CDA4
_0806CD9C:
	adds r4, #1
	cmp r4, #0xbf
	ble _0806CD7C
	movs r0, #1
_0806CDA4:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806CDAC
sub_806CDAC: @ 0x0806CDAC
	ldr r0, _0806CDB8 @ =gPlaySt
	ldrh r0, [r0, #0x10]
	cmp r0, #1
	bhi _0806CDBC
	movs r0, #0
	b _0806CDBE
	.align 2, 0
_0806CDB8: .4byte gPlaySt
_0806CDBC:
	movs r0, #1
_0806CDBE:
	bx lr

	thumb_func_start sub_806CDC0
sub_806CDC0: @ 0x0806CDC0
	push {lr}
	ldr r0, _0806CDD8 @ =gActiveUnit
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	cmp r0, #0xd
	beq _0806CDEA
	cmp r0, #0xd
	bgt _0806CDDC
	cmp r0, #1
	beq _0806CDE6
	b _0806CDFA
	.align 2, 0
_0806CDD8: .4byte gActiveUnit
_0806CDDC:
	cmp r0, #0x1b
	beq _0806CDE6
	cmp r0, #0x26
	beq _0806CDEE
	b _0806CDFA
_0806CDE6:
	movs r0, #0xe
	b _0806CDF0
_0806CDEA:
	movs r0, #0xf
	b _0806CDF0
_0806CDEE:
	movs r0, #0x10
_0806CDF0:
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806CE06
_0806CDFA:
	ldr r0, _0806CE0C @ =0x0203D358
	ldr r0, [r0]
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	bne _0806CE10
_0806CE06:
	movs r0, #0
	b _0806CE12
	.align 2, 0
_0806CE0C: .4byte 0x0203D358
_0806CE10:
	movs r0, #1
_0806CE12:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806CE18
sub_806CE18: @ 0x0806CE18
	ldr r0, _0806CE2C @ =0x0203D358
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #8
	ands r0, r1
	cmp r0, #0
	bne _0806CE30
	movs r0, #0
	b _0806CE32
	.align 2, 0
_0806CE2C: .4byte 0x0203D358
_0806CE30:
	movs r0, #1
_0806CE32:
	bx lr

	thumb_func_start sub_806CE34
sub_806CE34: @ 0x0806CE34
	ldr r0, _0806CE48 @ =0x0203D358
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #9
	ands r0, r1
	cmp r0, #0
	bne _0806CE4C
	movs r0, #0
	b _0806CE4E
	.align 2, 0
_0806CE48: .4byte 0x0203D358
_0806CE4C:
	movs r0, #1
_0806CE4E:
	bx lr

	thumb_func_start sub_806CE50
sub_806CE50: @ 0x0806CE50
	push {lr}
	movs r0, #0x12
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806CE78
	ldr r0, _0806CE70 @ =0x0203D358
	ldr r0, [r0]
	ldr r1, _0806CE74 @ =0x00018002
	ands r0, r1
	cmp r0, #0
	bne _0806CE78
	movs r0, #1
	b _0806CE7A
	.align 2, 0
_0806CE70: .4byte 0x0203D358
_0806CE74: .4byte 0x00018002
_0806CE78:
	movs r0, #0
_0806CE7A:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806CE80
sub_806CE80: @ 0x0806CE80
	push {lr}
	movs r0, #0x14
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806CE9C
	ldr r0, _0806CEA0 @ =0x0203D358
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #1
	ands r0, r1
	cmp r0, #0
	bne _0806CEA4
_0806CE9C:
	movs r0, #0
	b _0806CEA6
	.align 2, 0
_0806CEA0: .4byte 0x0203D358
_0806CEA4:
	movs r0, #1
_0806CEA6:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806CEAC
sub_806CEAC: @ 0x0806CEAC
	push {lr}
	movs r0, #0x15
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806CEC8
	ldr r0, _0806CECC @ =0x0203D358
	ldr r0, [r0]
	movs r1, #0x80
	lsls r1, r1, #0x10
	ands r0, r1
	cmp r0, #0
	bne _0806CED0
_0806CEC8:
	movs r0, #0
	b _0806CED2
	.align 2, 0
_0806CECC: .4byte 0x0203D358
_0806CED0:
	movs r0, #1
_0806CED2:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806CED8
sub_806CED8: @ 0x0806CED8
	push {lr}
	movs r0, #2
	bl GetUnitByPid
	ldr r1, _0806CEEC @ =0x0000FFFD
	ldrh r2, [r0, #0xc]
	ands r1, r2
	strh r1, [r0, #0xc]
	pop {r0}
	bx r0
	.align 2, 0
_0806CEEC: .4byte 0x0000FFFD

	thumb_func_start sub_806CEF0
sub_806CEF0: @ 0x0806CEF0
	push {lr}
	ldr r0, _0806CF0C @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0x80
	bne _0806CF34
	movs r0, #6
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806CF10
	movs r0, #1
	b _0806CF36
	.align 2, 0
_0806CF0C: .4byte gPlaySt
_0806CF10:
	movs r0, #5
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806CF22
	movs r0, #6
	bl SetEid
_0806CF22:
	movs r0, #4
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806CF34
	movs r0, #5
	bl SetEid
_0806CF34:
	movs r0, #0
_0806CF36:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806CF3C
sub_806CF3C: @ 0x0806CF3C
	push {lr}
	ldr r0, _0806CF58 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0x80
	bne _0806CF80
	movs r0, #0xa
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806CF5C
	movs r0, #1
	b _0806CF82
	.align 2, 0
_0806CF58: .4byte gPlaySt
_0806CF5C:
	movs r0, #9
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806CF6E
	movs r0, #0xa
	bl SetEid
_0806CF6E:
	movs r0, #8
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806CF80
	movs r0, #9
	bl SetEid
_0806CF80:
	movs r0, #0
_0806CF82:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806CF88
sub_806CF88: @ 0x0806CF88
	push {lr}
	movs r0, #6
	movs r1, #1
	bl GetTrapAt
	adds r1, r0, #0
	cmp r1, #0
	beq _0806CF9C
	movs r0, #0xa
	strb r0, [r1, #3]
_0806CF9C:
	pop {r0}
	bx r0

	thumb_func_start sub_806CFA0
sub_806CFA0: @ 0x0806CFA0
	push {lr}
	ldr r0, _0806CFB0 @ =gMpi_MainBgm
	ldr r1, _0806CFB4 @ =0x0857B774
	bl MPlayStart
	pop {r0}
	bx r0
	.align 2, 0
_0806CFB0: .4byte gMpi_MainBgm
_0806CFB4: .4byte 0x0857B774

	thumb_func_start sub_806CFB8
sub_806CFB8: @ 0x0806CFB8
	push {lr}
	ldr r0, _0806CFC8 @ =gMpi_MainBgm
	ldr r1, _0806CFCC @ =0x0857C95C
	bl MPlayStart
	pop {r0}
	bx r0
	.align 2, 0
_0806CFC8: .4byte gMpi_MainBgm
_0806CFCC: .4byte 0x0857C95C

	thumb_func_start sub_806CFD0
sub_806CFD0: @ 0x0806CFD0
	push {lr}
	ldr r0, _0806CFE0 @ =gMpi_MainBgm
	ldr r1, _0806CFE4 @ =0x0857C1E4
	bl MPlayStart
	pop {r0}
	bx r0
	.align 2, 0
_0806CFE0: .4byte gMpi_MainBgm
_0806CFE4: .4byte 0x0857C1E4

	thumb_func_start sub_806CFE8
sub_806CFE8: @ 0x0806CFE8
	push {lr}
	ldr r0, _0806CFF8 @ =gMpi_MainBgm
	ldr r1, _0806CFFC @ =0x0857A61C
	bl MPlayStart
	pop {r0}
	bx r0
	.align 2, 0
_0806CFF8: .4byte gMpi_MainBgm
_0806CFFC: .4byte 0x0857A61C

	thumb_func_start sub_806D000
sub_806D000: @ 0x0806D000
	push {lr}
	ldr r0, _0806D018 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0806D012
	movs r0, #0xc4
	bl m4aSongNumStart
_0806D012:
	pop {r0}
	bx r0
	.align 2, 0
_0806D018: .4byte gPlaySt

	thumb_func_start sub_806D01C
sub_806D01C: @ 0x0806D01C
	push {lr}
	movs r0, #0
	bl sub_80030B4
	pop {r0}
	bx r0

	thumb_func_start sub_806D028
sub_806D028: @ 0x0806D028
	push {lr}
	ldr r0, _0806D054 @ =gPlaySt
	ldrb r0, [r0, #0xf]
	cmp r0, #0
	bne _0806D050
	ldr r0, _0806D058 @ =gActiveUnit
	ldr r0, [r0]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #4]
	cmp r0, #0x34
	beq _0806D05C
	cmp r0, #0x35
	beq _0806D05C
	bl RandNextB
	movs r1, #0xb
	bl DivRem
	cmp r0, #0
	beq _0806D05C
_0806D050:
	movs r0, #0
	b _0806D05E
	.align 2, 0
_0806D054: .4byte gPlaySt
_0806D058: .4byte gActiveUnit
_0806D05C:
	movs r0, #1
_0806D05E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806D064
sub_806D064: @ 0x0806D064
	push {lr}
	movs r0, #0xf
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806D078
	ldr r0, _0806D0D8 @ =0x00002710
	bl sub_806BFE4
_0806D078:
	movs r0, #0x10
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806D092
	movs r0, #0x27
	bl sub_806C068
	movs r0, #0xfa
	lsls r0, r0, #5
	bl sub_806BFE4
_0806D092:
	movs r0, #0x11
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806D0B0
	movs r0, #0x27
	bl sub_806C068
	movs r0, #0x27
	bl sub_806C068
	ldr r0, _0806D0DC @ =0x00001770
	bl sub_806BFE4
_0806D0B0:
	movs r0, #0x12
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806D0D4
	movs r0, #0x27
	bl sub_806C068
	movs r0, #0x27
	bl sub_806C068
	movs r0, #0x27
	bl sub_806C068
	ldr r0, _0806D0E0 @ =0x00001388
	bl sub_806BFE4
_0806D0D4:
	pop {r0}
	bx r0
	.align 2, 0
_0806D0D8: .4byte 0x00002710
_0806D0DC: .4byte 0x00001770
_0806D0E0: .4byte 0x00001388

	thumb_func_start sub_806D0E4
sub_806D0E4: @ 0x0806D0E4
	push {lr}
	bl sub_8073324
	movs r0, #1
	bl GetUnitByPid
	movs r1, #0xf
	bl sub_8027DB4
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806D0FC
sub_806D0FC: @ 0x0806D0FC
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	bl FindSupplyItem
	cmp r0, #0
	blt _0806D10C
_0806D108:
	movs r0, #1
	b _0806D14A
_0806D10C:
	movs r6, #1
_0806D10E:
	adds r0, r6, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0806D142
	ldr r0, [r1]
	cmp r0, #0
	beq _0806D142
	movs r0, #4
	ldrh r2, [r1, #0xc]
	ands r0, r2
	cmp r0, #0
	bne _0806D142
	movs r5, #0
	adds r4, r1, #0
	adds r4, #0x1c
_0806D130:
	ldrh r0, [r4]
	bl GetItemIid
	cmp r0, r7
	beq _0806D108
	adds r4, #2
	adds r5, #1
	cmp r5, #4
	ble _0806D130
_0806D142:
	adds r6, #1
	cmp r6, #0x3f
	ble _0806D10E
	movs r0, #0
_0806D14A:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_806D150
sub_806D150: @ 0x0806D150
	push {r4, lr}
	ldr r4, _0806D158 @ =0x08672458
	b _0806D16E
	.align 2, 0
_0806D158: .4byte 0x08672458
_0806D15C:
	ldrb r0, [r4]
	bl sub_806D0FC
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806D16C
	movs r0, #0
	b _0806D176
_0806D16C:
	adds r4, #1
_0806D16E:
	ldrb r0, [r4]
	cmp r0, #0
	bne _0806D15C
	movs r0, #1
_0806D176:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_806D17C
sub_806D17C: @ 0x0806D17C
	push {lr}
	movs r0, #0x16
	movs r1, #0x17
	bl GetMapChangeIdAt
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl StartMapChangeEvent
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806D194
sub_806D194: @ 0x0806D194
	push {r4, lr}
	movs r4, #0
_0806D198:
	adds r0, r4, #0
	adds r0, #0xd
	bl ClearEid
	adds r4, #1
	cmp r4, #4
	ble _0806D198
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_806D1AC
sub_806D1AC: @ 0x0806D1AC
	push {r4, r5, lr}
	movs r5, #0
_0806D1B0:
	adds r4, r5, #0
	adds r4, #0xd
	adds r0, r4, #0
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806D1C8
	adds r0, r4, #0
	bl SetEid
	b _0806D1CE
_0806D1C8:
	adds r5, #1
	cmp r5, #4
	ble _0806D1B0
_0806D1CE:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_806D1D4
sub_806D1D4: @ 0x0806D1D4
	ldr r0, _0806D1EC @ =0x0203D360
	movs r1, #0
	strb r1, [r0]
	ldr r0, _0806D1F0 @ =0x0203D361
	strb r1, [r0]
	ldr r0, _0806D1F4 @ =0x0203D362
	strb r1, [r0]
	ldr r1, _0806D1F8 @ =0x0203D364
	movs r0, #0
	strh r0, [r1]
	bx lr
	.align 2, 0
_0806D1EC: .4byte 0x0203D360
_0806D1F0: .4byte 0x0203D361
_0806D1F4: .4byte 0x0203D362
_0806D1F8: .4byte 0x0203D364

	thumb_func_start sub_806D1FC
sub_806D1FC: @ 0x0806D1FC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x46
	movs r0, #4
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0806D21A
	bl EndTalk
_0806D216:
	movs r0, #0
	b _0806D34C
_0806D21A:
	bl IsTalkActive
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #0
	beq _0806D228
	b _0806D34A
_0806D228:
	ldr r6, _0806D23C @ =0x0203D360
	ldrb r0, [r6]
	cmp r0, #1
	beq _0806D2C0
	cmp r0, #1
	bgt _0806D240
	cmp r0, #0
	beq _0806D246
	b _0806D34A
	.align 2, 0
_0806D23C: .4byte 0x0203D360
_0806D240:
	cmp r0, #2
	beq _0806D318
	b _0806D34A
_0806D246:
	movs r5, #1
	ldr r1, _0806D2B4 @ =0x0203D361
	ldrb r0, [r1]
	cmp r0, #0
	beq _0806D252
	adds r5, r0, #0
_0806D252:
	cmp r5, #0x3f
	bgt _0806D216
	ldr r0, _0806D2B8 @ =0x0203D362
	mov r8, r0
_0806D25A:
	adds r0, r5, #0
	bl GetUnit
	adds r4, r0, #0
	adds r6, r5, #1
	cmp r4, #0
	beq _0806D2AC
	ldr r1, [r4]
	cmp r1, #0
	beq _0806D2AC
	movs r0, #0xc
	ldrh r4, [r4, #0xc]
	ands r0, r4
	cmp r0, #0
	bne _0806D2AC
	ldrb r0, [r1, #4]
	mov r1, r8
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #1
	beq _0806D2AC
	ldr r0, _0806D2BC @ =0x08666598
	ldrb r1, [r0]
	adds r5, r0, #0
	cmp r1, #0
	beq _0806D2AC
	adds r4, r2, #0
	adds r2, r5, #0
	movs r3, #0
	adds r1, r5, #0
_0806D298:
	adds r0, r3, #0
	ldrb r7, [r1]
	cmp r4, r7
	beq _0806D2F0
	adds r2, #0x10
	adds r3, #0x10
	adds r1, #0x10
	ldrb r0, [r2]
	cmp r0, #0
	bne _0806D298
_0806D2AC:
	adds r5, r6, #0
	cmp r5, #0x3f
	ble _0806D25A
	b _0806D216
	.align 2, 0
_0806D2B4: .4byte 0x0203D361
_0806D2B8: .4byte 0x0203D362
_0806D2BC: .4byte 0x08666598
_0806D2C0:
	ldr r0, _0806D2EC @ =0x0203D362
	ldrb r0, [r0]
	bl GetUnitByPid
	adds r4, r0, #0
	movs r1, #0xe
	ldrsb r1, [r4, r1]
	movs r2, #0xf
	ldrsb r2, [r4, r2]
	adds r0, r5, #0
	bl CameraMoveWatchPosition
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	movs r1, #0xf
	ldrsb r1, [r4, r1]
	bl SetMapCursorPosition
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
	b _0806D34A
	.align 2, 0
_0806D2EC: .4byte 0x0203D362
_0806D2F0:
	ldr r1, _0806D30C @ =0x0203D364
	adds r0, r5, #0
	adds r0, #0xc
	adds r0, r3, r0
	ldr r0, [r0]
	strh r0, [r1]
	ldr r0, _0806D310 @ =0x0203D361
	strb r6, [r0]
	ldr r1, _0806D314 @ =0x0203D360
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	b _0806D34A
	.align 2, 0
_0806D30C: .4byte 0x0203D364
_0806D310: .4byte 0x0203D361
_0806D314: .4byte 0x0203D360
_0806D318:
	bl SetInitTalkTextFont
	bl ClearTalkText
	bl ClearPutTalkText
	bl ClearTalk
	ldr r0, _0806D358 @ =0x0203D364
	ldrh r0, [r0]
	bl DecodeMsg
	adds r2, r0, #0
	movs r0, #0xa
	movs r1, #0xe
	adds r3, r5, #0
	bl StartTalkExt
	movs r0, #1
	bl SetTalkPrintColor
	movs r0, #1
	bl SetActiveTalkFace
	strb r4, [r6]
_0806D34A:
	movs r0, #1
_0806D34C:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0806D358: .4byte 0x0203D364

	thumb_func_start sub_806D35C
sub_806D35C: @ 0x0806D35C
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #0x41
_0806D362:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0806D380
	ldr r0, [r1]
	cmp r0, #0
	beq _0806D380
	movs r0, #4
	ldrh r1, [r1, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _0806D380
	adds r5, #1
_0806D380:
	adds r4, #1
	cmp r4, #0xbf
	ble _0806D362
	cmp r5, #2
	ble _0806D38E
	movs r0, #1
	b _0806D390
_0806D38E:
	movs r0, #0
_0806D390:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806D398
sub_806D398: @ 0x0806D398
	push {lr}
	bl RandNextB
	movs r1, #5
	bl DivRem
	cmp r0, #0
	beq _0806D3AC
	movs r0, #0
	b _0806D3AE
_0806D3AC:
	movs r0, #1
_0806D3AE:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806D3B4
sub_806D3B4: @ 0x0806D3B4
	push {r4, lr}
	bl sub_806D398
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806D3D8
	ldr r0, _0806D3D4 @ =0x03004898
	ldrb r4, [r0, #3]
	adds r4, #4
	movs r0, #0x80
	bl sub_806C460
	cmp r4, r0
	beq _0806D3D8
	movs r0, #1
	b _0806D3DA
	.align 2, 0
_0806D3D4: .4byte 0x03004898
_0806D3D8:
	movs r0, #0
_0806D3DA:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_806D3E0
sub_806D3E0: @ 0x0806D3E0
	push {r4, lr}
	ldr r4, _0806D404 @ =0x03004898
	ldrb r0, [r4, #2]
	adds r0, #1
	strb r0, [r4, #2]
	movs r0, #0x80
	bl sub_806C460
	strb r0, [r4, #3]
	bl sub_806BAA0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806D408
	ldrb r4, [r4, #2]
	cmp r4, #0xa
	beq _0806D414
	b _0806D40E
	.align 2, 0
_0806D404: .4byte 0x03004898
_0806D408:
	ldrb r4, [r4, #2]
	cmp r4, #5
	beq _0806D414
_0806D40E:
	movs r0, #6
	bl ClearEid
_0806D414:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806D41C
sub_806D41C: @ 0x0806D41C
	push {lr}
	movs r0, #0xa
	movs r1, #0x16
	movs r2, #1
	movs r3, #4
	bl AddFireTrap
	movs r0, #0xe
	movs r1, #0x15
	movs r2, #2
	movs r3, #3
	bl AddFireTrap
	movs r0, #0xe
	movs r1, #0x17
	movs r2, #2
	movs r3, #5
	bl AddFireTrap
	movs r0, #0x11
	movs r1, #0x16
	movs r2, #4
	movs r3, #2
	bl AddFireTrap
	movs r0, #0x13
	movs r1, #0x15
	movs r2, #4
	movs r3, #6
	bl AddFireTrap
	movs r0, #0x17
	movs r1, #0x12
	movs r2, #6
	movs r3, #4
	bl AddFireTrap
	movs r0, #0x19
	movs r1, #0x12
	movs r2, #6
	movs r3, #3
	bl AddFireTrap
	movs r0, #0x17
	movs r1, #0x10
	movs r2, #5
	movs r3, #3
	bl AddFireTrap
	movs r0, #0x18
	movs r1, #9
	movs r2, #5
	movs r3, #2
	bl AddFireTrap
	movs r0, #0x17
	movs r1, #8
	movs r2, #6
	movs r3, #5
	bl AddFireTrap
	movs r0, #0x19
	movs r1, #8
	movs r2, #5
	movs r3, #4
	bl AddFireTrap
	movs r0, #0x14
	movs r1, #1
	movs r2, #7
	movs r3, #5
	bl AddFireTrap
	movs r0, #0x13
	movs r1, #3
	movs r2, #6
	movs r3, #6
	bl AddFireTrap
	movs r0, #0xe
	movs r1, #8
	movs r2, #9
	movs r3, #2
	bl AddFireTrap
	movs r0, #0xf
	movs r1, #9
	movs r2, #3
	movs r3, #3
	bl AddFireTrap
	movs r0, #0xd
	movs r1, #9
	movs r2, #9
	movs r3, #4
	bl AddFireTrap
	movs r0, #0xe
	movs r1, #0xa
	movs r2, #0xb
	movs r3, #3
	bl AddFireTrap
	movs r0, #0xc
	movs r1, #0xc
	movs r2, #1
	movs r3, #5
	bl AddFireTrap
	movs r0, #0xb
	movs r1, #0xb
	movs r2, #1
	movs r3, #3
	bl AddFireTrap
	movs r0, #0xb
	movs r1, #0xd
	movs r2, #7
	movs r3, #3
	bl AddFireTrap
	movs r0, #9
	movs r1, #0xd
	movs r2, #8
	movs r3, #4
	bl AddFireTrap
	movs r0, #9
	movs r1, #0xb
	movs r2, #2
	movs r3, #4
	bl AddFireTrap
	movs r0, #8
	movs r1, #0xc
	movs r2, #6
	movs r3, #2
	bl AddFireTrap
	movs r0, #7
	movs r1, #0xb
	movs r2, #5
	movs r3, #3
	bl AddFireTrap
	movs r0, #7
	movs r1, #0xd
	movs r2, #4
	movs r3, #5
	bl AddFireTrap
	movs r0, #3
	movs r1, #0xa
	movs r2, #1
	movs r3, #3
	bl AddFireTrap
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806D55C
sub_806D55C: @ 0x0806D55C
	ldr r1, _0806D564 @ =gPlaySt
	movs r0, #0x20
	strb r0, [r1, #0xe]
	bx lr
	.align 2, 0
_0806D564: .4byte gPlaySt

	thumb_func_start sub_806D568
sub_806D568: @ 0x0806D568
	push {r4, lr}
	sub sp, #4
	movs r4, #8
	str r4, [sp]
	movs r0, #1
	movs r1, #2
	movs r2, #2
	movs r3, #1
	bl AddGasTrap
	str r4, [sp]
	movs r0, #1
	movs r1, #0xe
	movs r2, #1
	movs r3, #7
	bl AddGasTrap
	str r4, [sp]
	movs r0, #0xa
	movs r1, #7
	movs r2, #0
	movs r3, #2
	bl AddGasTrap
	str r4, [sp]
	movs r0, #8
	movs r1, #0xd
	movs r2, #1
	movs r3, #3
	bl AddGasTrap
	str r4, [sp]
	movs r0, #0xb
	movs r1, #2
	movs r2, #2
	movs r3, #5
	bl AddGasTrap
	str r4, [sp]
	movs r0, #0xd
	movs r1, #0xd
	movs r2, #2
	movs r3, #4
	bl AddGasTrap
	str r4, [sp]
	movs r0, #0xe
	movs r1, #0x11
	movs r2, #3
	movs r3, #1
	bl AddGasTrap
	str r4, [sp]
	movs r0, #0xf
	movs r1, #1
	movs r2, #3
	movs r3, #5
	bl AddGasTrap
	str r4, [sp]
	movs r0, #0x14
	movs r1, #0x12
	movs r2, #0
	movs r3, #2
	bl AddGasTrap
	str r4, [sp]
	movs r0, #0x15
	movs r1, #9
	movs r2, #0
	movs r3, #6
	bl AddGasTrap
	str r4, [sp]
	movs r0, #0x17
	movs r1, #0xc
	movs r2, #1
	movs r3, #3
	bl AddGasTrap
	str r4, [sp]
	movs r0, #0x17
	movs r1, #0x14
	movs r2, #1
	movs r3, #7
	bl AddGasTrap
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806D620
sub_806D620: @ 0x0806D620
	push {r4, r5, lr}
	movs r4, #0
	ldr r5, _0806D644 @ =0x0867507C
_0806D626:
	adds r0, r4, #0
	adds r0, #0x1a
	ldr r2, [r5]
	ldr r3, [r5, #4]
	adds r1, r4, #0
	bl sub_8026BA4
	adds r5, #8
	adds r4, #1
	cmp r4, #0x19
	ble _0806D626
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806D644: .4byte 0x0867507C

	thumb_func_start sub_806D648
sub_806D648: @ 0x0806D648
	push {lr}
	movs r0, #0xe
	movs r1, #3
	movs r2, #5
	bl AddArrowTrap
	movs r0, #6
	movs r1, #1
	movs r2, #9
	bl AddArrowTrap
	movs r0, #8
	movs r1, #4
	movs r2, #9
	bl AddArrowTrap
	movs r0, #4
	movs r1, #7
	movs r2, #9
	bl AddArrowTrap
	movs r0, #0xd
	movs r1, #8
	movs r2, #9
	bl AddArrowTrap
	movs r0, #0x10
	movs r1, #3
	movs r2, #5
	bl AddArrowTrap
	movs r0, #0x18
	movs r1, #2
	movs r2, #9
	bl AddArrowTrap
	movs r0, #0x1a
	movs r1, #5
	movs r2, #9
	bl AddArrowTrap
	movs r0, #0x16
	movs r1, #9
	movs r2, #9
	bl AddArrowTrap
	movs r0, #0x11
	movs r1, #6
	movs r2, #9
	bl AddArrowTrap
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806D6B4
sub_806D6B4: @ 0x0806D6B4
	push {r4, lr}
	ldr r4, _0806D6D4 @ =0x08675750
	bl RandNextB
	movs r1, #6
	bl DivRem
	lsls r0, r0, #2
	adds r0, r0, r4
	ldr r0, [r0]
	bl SetEid
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806D6D4: .4byte 0x08675750

	thumb_func_start sub_806D6D8
sub_806D6D8: @ 0x0806D6D8
	push {lr}
	movs r0, #6
	movs r1, #6
	bl sub_8026BC0
	movs r0, #7
	movs r1, #8
	bl sub_8026BC0
	movs r0, #6
	movs r1, #0xa
	bl sub_8026BC0
	movs r0, #7
	movs r1, #0xd
	bl sub_8026BC0
	movs r0, #6
	movs r1, #0xf
	bl sub_8026BC0
	movs r0, #7
	movs r1, #0x11
	bl sub_8026BC0
	movs r0, #0x18
	movs r1, #6
	bl sub_8026BC0
	movs r0, #0x17
	movs r1, #8
	bl sub_8026BC0
	movs r0, #0x18
	movs r1, #0xa
	bl sub_8026BC0
	movs r0, #0x17
	movs r1, #0xd
	bl sub_8026BC0
	movs r0, #0x18
	movs r1, #0x10
	bl sub_8026BC0
	movs r0, #0x17
	movs r1, #0x11
	bl sub_8026BC0
	movs r0, #0xc
	movs r1, #0xe
	movs r2, #3
	bl sub_8026BD0
	movs r0, #0x12
	movs r1, #0xe
	movs r2, #3
	bl sub_8026BD0
	movs r0, #0xa
	movs r1, #7
	movs r2, #1
	bl sub_8026BD0
	movs r0, #0x14
	movs r1, #7
	movs r2, #0
	bl sub_8026BD0
	movs r0, #0xe
	movs r1, #7
	movs r2, #1
	bl sub_8026BD0
	movs r0, #0x10
	movs r1, #7
	movs r2, #0
	bl sub_8026BD0
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806D77C
sub_806D77C: @ 0x0806D77C
	push {r4, r5, r6, r7, lr}
	movs r6, #0
	movs r5, #0
	ldr r7, _0806D7BC @ =0x08675B90
_0806D784:
	adds r0, r6, #0
	movs r1, #6
	bl __modsi3
	lsls r0, r0, #2
	adds r4, r0, r7
	ldr r0, [r4]
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0806D7B6
	bl RandNextB
	movs r1, #0xb
	bl DivRem
	cmp r0, #0
	bne _0806D7B6
	ldr r0, [r4]
	bl SetEid
	adds r5, #1
	cmp r5, #3
	beq _0806D7C0
_0806D7B6:
	adds r6, #1
	b _0806D784
	.align 2, 0
_0806D7BC: .4byte 0x08675B90
_0806D7C0:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806D7C8
sub_806D7C8: @ 0x0806D7C8
	push {lr}
	bl sub_8013A64
	movs r0, #1
	bl SetNextGameAction
	ldr r0, _0806D7E0 @ =0x08676220
	movs r1, #4
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_0806D7E0: .4byte 0x08676220

	thumb_func_start sub_806D7E4
sub_806D7E4: @ 0x0806D7E4
	ldr r1, _0806D7F0 @ =gPlaySt
	movs r0, #3
	ldrb r2, [r1, #0x1e]
	orrs r0, r2
	strb r0, [r1, #0x1e]
	bx lr
	.align 2, 0
_0806D7F0: .4byte gPlaySt

	thumb_func_start sub_806D7F4
sub_806D7F4: @ 0x0806D7F4
	ldr r1, _0806D804 @ =gPlaySt
	movs r0, #4
	rsbs r0, r0, #0
	ldrb r2, [r1, #0x1e]
	ands r0, r2
	strb r0, [r1, #0x1e]
	bx lr
	.align 2, 0
_0806D804: .4byte gPlaySt

	thumb_func_start sub_806D808
sub_806D808: @ 0x0806D808
	push {lr}
	bl InitUnits
	bl ClearTalk
	movs r0, #1
	bl Proc_EndEachMarked
	pop {r0}
	bx r0

	thumb_func_start sub_806D81C
sub_806D81C: @ 0x0806D81C
	push {lr}
	ldr r0, _0806D828 @ =0x08676220
	bl Proc_EndEach
	pop {r0}
	bx r0
	.align 2, 0
_0806D828: .4byte 0x08676220

	thumb_func_start sub_806D82C
sub_806D82C: @ 0x0806D82C
	push {lr}
	adds r2, r0, #0
	ldr r0, _0806D848 @ =gKeySt
	ldr r1, [r0]
	ldr r0, _0806D84C @ =0x0000030B
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0806D844
	adds r0, r2, #0
	bl Proc_Break
_0806D844:
	pop {r0}
	bx r0
	.align 2, 0
_0806D848: .4byte gKeySt
_0806D84C: .4byte 0x0000030B

	thumb_func_start sub_806D850
sub_806D850: @ 0x0806D850
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	bl SetNextGameAction
	adds r4, #0x4c
	movs r0, #0x1f
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806D868
sub_806D868: @ 0x0806D868
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x4c
	movs r0, #0
	ldrsh r1, [r4, r0]
	movs r0, #0x20
	subs r0, r0, r1
	bl DarkenPals
	ldrh r0, [r4]
	subs r0, #1
	strh r0, [r4]
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _0806D88E
	adds r0, r5, #0
	bl Proc_Break
_0806D88E:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_806D894
sub_806D894: @ 0x0806D894
	push {lr}
	movs r0, #0
	bl CleanupGame
	bl SyncHiOam
	bl sub_806D808
	bl sub_806D81C
	bl KillTalkAndEvent
	pop {r0}
	bx r0

	thumb_func_start sub_806D8B0
sub_806D8B0: @ 0x0806D8B0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	ldr r2, _0806D994 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl ResetText
	bl ResetTextFont
	bl InitTalkTextFont
	ldr r0, _0806D998 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	movs r0, #0
	str r0, [sp]
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	ldr r2, _0806D99C @ =0x01000008
	mov r0, sp
	bl CpuFastSet
	ldr r0, _0806D9A0 @ =0x08677FE0
	movs r1, #3
	bl SpawnProc
	adds r6, r0, #0
	movs r5, #0
	ldr r1, _0806D9A4 @ =0x0867619C
	mov r8, r1
_0806D91C:
	lsls r4, r5, #3
	ldr r0, _0806D9A8 @ =0x0203D370
	adds r4, r4, r0
	adds r0, r4, #0
	movs r1, #0x18
	bl InitText
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	lsls r1, r5, #2
	adds r0, r6, #0
	adds r0, #0x34
	adds r0, r0, r1
	str r4, [r0]
	lsls r1, r5, #1
	ldr r7, _0806D9AC @ =0x0203D36C
	ldr r0, [r7]
	lsls r0, r0, #2
	add r0, r8
	ldrb r0, [r0, #2]
	adds r1, r0, r1
	lsls r1, r1, #6
	ldr r0, _0806D9B0 @ =0x02021B0E
	adds r1, r1, r0
	adds r0, r4, #0
	bl PutText
	adds r5, #1
	cmp r5, #5
	ble _0806D91C
	movs r1, #0
	str r1, [r6, #0x30]
	adds r0, r6, #0
	adds r0, #0x5c
	strh r1, [r0]
	ldr r1, _0806D9A4 @ =0x0867619C
	ldr r0, [r7]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r0, [r0]
	bl DecodeMsg
	str r0, [r6, #0x2c]
	ldr r0, [r7]
	adds r0, #1
	str r0, [r7]
	movs r0, #1
	bl EnableBgSync
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806D994: .4byte gDispIo
_0806D998: .4byte gBg0Tm
_0806D99C: .4byte 0x01000008
_0806D9A0: .4byte 0x08677FE0
_0806D9A4: .4byte 0x0867619C
_0806D9A8: .4byte 0x0203D370
_0806D9AC: .4byte 0x0203D36C
_0806D9B0: .4byte 0x02021B0E

	thumb_func_start sub_806D9B4
sub_806D9B4: @ 0x0806D9B4
	push {lr}
	sub sp, #4
	ldr r2, _0806D9E8 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	str r0, [sp]
	ldr r1, _0806D9EC @ =0x06006000
	ldr r2, _0806D9F0 @ =0x01000800
	mov r0, sp
	bl CpuFastSet
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_0806D9E8: .4byte gDispIo
_0806D9EC: .4byte 0x06006000
_0806D9F0: .4byte 0x01000800

	thumb_func_start sub_806D9F4
sub_806D9F4: @ 0x0806D9F4
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	mov r8, r0
	adds r5, r1, #0
	adds r6, r2, #0
	bl InitUnits
	ldr r4, _0806DA4C @ =gPlaySt
	mov r0, r8
	strb r0, [r4, #0xe]
	bl sub_8029084
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetChapterInfo
	ldrb r0, [r0, #0xc]
	strb r0, [r4, #0xd]
	lsls r5, r5, #4
	adds r5, #8
	adds r0, r5, #0
	bl GetCameraCenteredX
	ldr r4, _0806DA50 @ =gBmSt
	strh r0, [r4, #0xc]
	lsls r6, r6, #4
	adds r6, #8
	adds r0, r6, #0
	bl GetCameraCenteredY
	strh r0, [r4, #0xe]
	bl RefreshEntityMaps
	bl RenderMap
	bl RefreshUnitSprites
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806DA4C: .4byte gPlaySt
_0806DA50: .4byte gBmSt

	thumb_func_start sub_806DA54
sub_806DA54: @ 0x0806DA54
	push {r4, lr}
	movs r0, #4
	movs r1, #0xb
	movs r2, #0xb
	bl sub_806D9F4
	ldr r4, _0806DA88 @ =0x02021868
	adds r1, r4, #0
	subs r1, #0xa0
	adds r0, r4, #0
	movs r2, #0x28
	bl CpuFastSet
	ldr r0, _0806DA8C @ =0xFFFFFEA0
	adds r4, r4, r0
	adds r0, r4, #0
	movs r1, #0x1a
	movs r2, #6
	movs r3, #8
	bl sub_805B644
	bl EnablePalSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806DA88: .4byte 0x02021868
_0806DA8C: .4byte 0xFFFFFEA0

	thumb_func_start sub_806DA90
sub_806DA90: @ 0x0806DA90
	push {lr}
	movs r0, #1
	movs r1, #7
	movs r2, #5
	bl sub_806D9F4
	pop {r0}
	bx r0

	thumb_func_start sub_806DAA0
sub_806DAA0: @ 0x0806DAA0
	push {lr}
	movs r0, #0xa
	movs r1, #0
	movs r2, #0x14
	bl sub_806D9F4
	pop {r0}
	bx r0

	thumb_func_start sub_806DAB0
sub_806DAB0: @ 0x0806DAB0
	push {lr}
	movs r0, #2
	movs r1, #7
	movs r2, #0xa
	bl sub_806D9F4
	pop {r0}
	bx r0

	thumb_func_start sub_806DAC0
sub_806DAC0: @ 0x0806DAC0
	push {lr}
	movs r0, #0x16
	movs r1, #0xf
	movs r2, #9
	bl sub_806D9F4
	pop {r0}
	bx r0

	thumb_func_start sub_806DAD0
sub_806DAD0: @ 0x0806DAD0
	push {r4, lr}
	movs r0, #1
	bl GetUnitByPid
	adds r4, r0, #0
	bl GetUnitCurrentHp
	adds r1, r0, #0
	subs r1, #0xa
	adds r0, r4, #0
	bl SetUnitHp
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806DAF0
sub_806DAF0: @ 0x0806DAF0
	ldr r0, _0806DAFC @ =0x08676738
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	bx lr
	.align 2, 0
_0806DAFC: .4byte 0x08676738

	thumb_func_start sub_806DB00
sub_806DB00: @ 0x0806DB00
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, _0806DB20 @ =0x08676738
	lsls r0, r4, #2
	adds r0, r0, r2
	ldr r0, [r0]
	bl StartEventLocking
	ldr r0, _0806DB24 @ =0x0203D368
	str r4, [r0]
	ldr r1, _0806DB28 @ =0x0203D36C
	movs r0, #0
	str r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806DB20: .4byte 0x08676738
_0806DB24: .4byte 0x0203D368
_0806DB28: .4byte 0x0203D36C

	thumb_func_start sub_806DB2C
sub_806DB2C: @ 0x0806DB2C
	push {lr}
	movs r0, #1
	bl Proc_EndEachMarked
	pop {r0}
	bx r0

	thumb_func_start sub_806DB38
sub_806DB38: @ 0x0806DB38
	push {lr}
	bl GetGameTime
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0806DB50
	ldr r1, _0806DB54 @ =gBmSt
	movs r0, #2
	ldrh r2, [r1, #0xc]
	eors r0, r2
	strh r0, [r1, #0xc]
_0806DB50:
	pop {r0}
	bx r0
	.align 2, 0
_0806DB54: .4byte gBmSt

	thumb_func_start sub_806DB58
sub_806DB58: @ 0x0806DB58
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0806DB7C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0806DB6C
	ldr r0, _0806DB80 @ =0x0000026A
	bl m4aSongNumStart
_0806DB6C:
	ldr r0, _0806DB84 @ =0x08676844
	adds r1, r4, #0
	bl SpawnProc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806DB7C: .4byte gPlaySt
_0806DB80: .4byte 0x0000026A
_0806DB84: .4byte 0x08676844

	thumb_func_start sub_806DB88
sub_806DB88: @ 0x0806DB88
	push {lr}
	ldr r0, _0806DB9C @ =0x08676844
	bl Proc_EndEach
	movs r0, #4
	bl sub_80030B4
	pop {r0}
	bx r0
	.align 2, 0
_0806DB9C: .4byte 0x08676844

	thumb_func_start sub_806DBA0
sub_806DBA0: @ 0x0806DBA0
	adds r0, #0x64
	movs r1, #0
	strh r1, [r0]
	bx lr

	thumb_func_start sub_806DBA8
sub_806DBA8: @ 0x0806DBA8
	push {r4, lr}
	adds r4, r0, #0
	bl GetGameTime
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0806DBDA
	ldr r1, _0806DC20 @ =gBmSt
	movs r0, #2
	ldrh r2, [r1, #0xc]
	eors r0, r2
	strh r0, [r1, #0xc]
	adds r1, r4, #0
	adds r1, #0x64
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #5
	ble _0806DBDA
	adds r0, r4, #0
	bl Proc_Break
_0806DBDA:
	ldr r4, _0806DC20 @ =gBmSt
	ldrh r0, [r4, #0x24]
	lsls r1, r0, #4
	ldrh r2, [r4, #0xc]
	subs r1, r2, r1
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldrh r0, [r4, #0x26]
	lsls r2, r0, #4
	ldrh r0, [r4, #0xe]
	subs r2, r0, r2
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	bl SetBgOffset
	ldrh r2, [r4, #0x24]
	lsls r1, r2, #4
	ldrh r0, [r4, #0xc]
	subs r1, r0, r1
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldrh r0, [r4, #0x26]
	lsls r2, r0, #4
	ldrh r4, [r4, #0xe]
	subs r2, r4, r2
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #3
	bl SetBgOffset
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806DC20: .4byte gBmSt

	thumb_func_start sub_806DC24
sub_806DC24: @ 0x0806DC24
	push {lr}
	adds r1, r0, #0
	ldr r0, _0806DC34 @ =0x08676854
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_0806DC34: .4byte 0x08676854

	thumb_func_start sub_806DC38
sub_806DC38: @ 0x0806DC38
	push {lr}
	ldr r0, _0806DC44 @ =0x08676854
	bl Proc_EndEach
	pop {r0}
	bx r0
	.align 2, 0
_0806DC44: .4byte 0x08676854

	thumb_func_start sub_806DC48
sub_806DC48: @ 0x0806DC48
	adds r0, #0x64
	movs r1, #0
	strh r1, [r0]
	bx lr

	thumb_func_start sub_806DC50
sub_806DC50: @ 0x0806DC50
	push {r4, lr}
	adds r4, r0, #0
	bl GetGameTime
	movs r1, #7
	ands r1, r0
	cmp r1, #0
	bne _0806DC8A
	adds r0, r4, #0
	adds r0, #0x64
	ldrh r1, [r0]
	adds r2, r1, #1
	strh r2, [r0]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #0xb
	ble _0806DC78
	adds r0, r4, #0
	bl Proc_Break
_0806DC78:
	movs r3, #1
	rsbs r3, r3, #0
	movs r0, #0
	movs r1, #0x20
	movs r2, #0x20
	bl sub_8001E68
	bl sub_80024A4
_0806DC8A:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_806DC90
sub_806DC90: @ 0x0806DC90
	push {lr}
	adds r1, r0, #0
	ldr r0, _0806DCA0 @ =0x0867686C
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_0806DCA0: .4byte 0x0867686C

	thumb_func_start sub_806DCA4
sub_806DCA4: @ 0x0806DCA4
	push {r4, lr}
	sub sp, #8
	movs r0, #0
	bl InitBgs
	ldr r2, _0806DCF8 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r4, #0
	str r4, [sp]
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	ldr r2, _0806DCFC @ =0x01000008
	mov r0, sp
	bl CpuFastSet
	str r4, [sp, #4]
	add r0, sp, #4
	ldr r1, _0806DD00 @ =0x06006000
	ldr r2, _0806DD04 @ =0x01000800
	bl CpuFastSet
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806DCF8: .4byte gDispIo
_0806DCFC: .4byte 0x01000008
_0806DD00: .4byte 0x06006000
_0806DD04: .4byte 0x01000800

	thumb_func_start sub_806DD08
sub_806DD08: @ 0x0806DD08
	push {r4, r5, lr}
	sub sp, #8
	ldr r2, _0806DD74 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r4, _0806DD78 @ =gBg0Tm
	adds r0, r4, #0
	movs r1, #0
	bl TmFill
	bl ResetText
	bl InitTalkTextFont
	ldr r5, _0806DD7C @ =0x0203D3A0
	adds r0, r5, #0
	movs r1, #0xe
	bl InitText
	ldr r0, _0806DD80 @ =0x0000024A
	bl DecodeMsg
	movs r1, #0x94
	lsls r1, r1, #2
	adds r4, r4, r1
	movs r1, #0
	str r1, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806DD74: .4byte gDispIo
_0806DD78: .4byte gBg0Tm
_0806DD7C: .4byte 0x0203D3A0
_0806DD80: .4byte 0x0000024A

	thumb_func_start sub_806DD84
sub_806DD84: @ 0x0806DD84
	push {lr}
	adds r1, r0, #0
	ldr r0, _0806DD94 @ =0x0867688C
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_0806DD94: .4byte 0x0867688C

	thumb_func_start sub_806DD98
sub_806DD98: @ 0x0806DD98
	push {lr}
	ldr r0, _0806DDB4 @ =0x0867688C
	bl Proc_Find
	cmp r0, #0
	bne _0806DDBC
	ldr r0, _0806DDB8 @ =0x08677FE0
	bl Proc_EndEach
	bl sub_806DCA4
	movs r0, #0
	b _0806DDBE
	.align 2, 0
_0806DDB4: .4byte 0x0867688C
_0806DDB8: .4byte 0x08677FE0
_0806DDBC:
	movs r0, #1
_0806DDBE:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806DDC4
sub_806DDC4: @ 0x0806DDC4
	adds r0, #0x44
	movs r1, #0xff
	strb r1, [r0]
	bx lr

	thumb_func_start sub_806DDCC
sub_806DDCC: @ 0x0806DDCC
	adds r0, #0x45
	movs r1, #1
	strb r1, [r0]
	bx lr

	thumb_func_start sub_806DDD4
sub_806DDD4: @ 0x0806DDD4
	push {lr}
	movs r0, #0
	bl SetWeather
	pop {r0}
	bx r0

	thumb_func_start sub_806DDE0
sub_806DDE0: @ 0x0806DDE0
	push {lr}
	ldr r0, _0806DDFC @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0806DDF2
	movs r0, #0xc4
	bl m4aSongNumStart
_0806DDF2:
	movs r0, #6
	bl SetWeather
	pop {r0}
	bx r0
	.align 2, 0
_0806DDFC: .4byte gPlaySt

	thumb_func_start sub_806DE00
sub_806DE00: @ 0x0806DE00
	push {lr}
	ldr r0, _0806DE18 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0806DE12
	ldr r0, _0806DE1C @ =0x00000269
	bl m4aSongNumStart
_0806DE12:
	pop {r0}
	bx r0
	.align 2, 0
_0806DE18: .4byte gPlaySt
_0806DE1C: .4byte 0x00000269

	thumb_func_start sub_806DE20
sub_806DE20: @ 0x0806DE20
	push {lr}
	ldr r0, _0806DE38 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0806DE32
	ldr r0, _0806DE3C @ =0x00000269
	bl m4aSongNumStart
_0806DE32:
	pop {r0}
	bx r0
	.align 2, 0
_0806DE38: .4byte gPlaySt
_0806DE3C: .4byte 0x00000269

	thumb_func_start sub_806DE40
sub_806DE40: @ 0x0806DE40
	push {lr}
	ldr r0, _0806DE58 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0806DE52
	movs r0, #0x6a
	bl m4aSongNumStart
_0806DE52:
	pop {r0}
	bx r0
	.align 2, 0
_0806DE58: .4byte gPlaySt

	thumb_func_start sub_806DE5C
sub_806DE5C: @ 0x0806DE5C
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0x43
	movs r1, #0
	bl StartBgm
	adds r4, #0x64
	ldr r0, _0806DE74 @ =0x000044C0
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806DE74: .4byte 0x000044C0

	thumb_func_start sub_806DE78
sub_806DE78: @ 0x0806DE78
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x64
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0806DE9A
	movs r0, #0x34
	movs r1, #0
	bl StartBgm
	adds r0, r4, #0
	bl Proc_Break
_0806DE9A:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_806DEA0
sub_806DEA0: @ 0x0806DEA0
	push {lr}
	adds r1, r0, #0
	ldr r0, _0806DEB0 @ =0x086768C4
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_0806DEB0: .4byte 0x086768C4

	thumb_func_start sub_806DEB4
sub_806DEB4: @ 0x0806DEB4
	push {lr}
	ldr r0, _0806DEC0 @ =0x086768C4
	bl Proc_EndEach
	pop {r0}
	bx r0
	.align 2, 0
_0806DEC0: .4byte 0x086768C4

	thumb_func_start sub_806DEC4
sub_806DEC4: @ 0x0806DEC4
	push {r4, lr}
	ldr r0, _0806DEEC @ =sub_806C1B4
	cmp r0, #0
	beq _0806DEF0
	movs r0, #1
	bl GetUnitByPid
	adds r4, r0, #0
	movs r1, #0x26
	bl GetUnitSupportNumByPid
	adds r1, r0, #0
	adds r0, r4, #0
	bl GetUnitSupportLevel
	cmp r0, #2
	ble _0806DEF0
	movs r0, #1
	b _0806DEF2
	.align 2, 0
_0806DEEC: .4byte sub_806C1B4
_0806DEF0:
	movs r0, #0
_0806DEF2:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_806DEF8
sub_806DEF8: @ 0x0806DEF8
	push {lr}
	bl RenderMapForFade
	ldr r1, _0806DF14 @ =gPlaySt
	movs r0, #0
	strb r0, [r1, #0xd]
	bl RefreshEntityMaps
	bl RefreshUnitSprites
	bl RenderMap
	pop {r0}
	bx r0
	.align 2, 0
_0806DF14: .4byte gPlaySt

	thumb_func_start sub_806DF18
sub_806DF18: @ 0x0806DF18
	push {r4, lr}
	adds r4, r0, #0
	adds r4, #0x64
	movs r0, #1
	strh r0, [r4]
	movs r0, #0x7b
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806DF34
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
_0806DF34:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806DF3C
sub_806DF3C: @ 0x0806DF3C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
_0806DF40:
	bl MU_CanStart
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806DF8E
	adds r5, r6, #0
	adds r5, #0x64
	movs r1, #0
	ldrsh r0, [r5, r1]
	bl GetNextAvailableBlueUnitId
	strh r0, [r5]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0806DF88
	ldr r4, [r6, #0x4c]
	movs r1, #0
	ldrsh r0, [r5, r1]
	bl GetUnit
	adds r1, r0, #0
	ldr r0, _0806DF84 @ =gBmSt
	ldrh r0, [r0, #0xc]
	lsls r3, r0, #0x10
	asrs r3, r3, #0x14
	adds r3, #0xd
	adds r0, r4, #0
	movs r2, #8
	bl TryMoveUnitDisplayed
	ldrh r0, [r5]
	adds r0, #1
	strh r0, [r5]
	b _0806DF40
	.align 2, 0
_0806DF84: .4byte gBmSt
_0806DF88:
	adds r0, r6, #0
	bl Proc_Break
_0806DF8E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_806DF94
sub_806DF94: @ 0x0806DF94
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0806DFA8 @ =0x086768DC
	adds r1, r4, #0
	bl SpawnProc
	str r4, [r0, #0x4c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806DFA8: .4byte 0x086768DC

	thumb_func_start sub_806DFAC
sub_806DFAC: @ 0x0806DFAC
	push {lr}
	ldr r0, _0806DFC0 @ =0x086768DC
	bl Proc_Find
	cmp r0, #0
	beq _0806DFBA
	movs r0, #1
_0806DFBA:
	pop {r1}
	bx r1
	.align 2, 0
_0806DFC0: .4byte 0x086768DC

	thumb_func_start sub_806DFC4
sub_806DFC4: @ 0x0806DFC4
	adds r0, #0x64
	movs r1, #0x80
	lsls r1, r1, #1
	strh r1, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_806DFD0
sub_806DFD0: @ 0x0806DFD0
	adds r0, #0x64
	movs r1, #0
	strh r1, [r0]
	bx lr

	thumb_func_start sub_806DFD8
sub_806DFD8: @ 0x0806DFD8
	push {r4, lr}
	adds r1, r0, #0
	adds r4, r1, #0
	adds r4, #0x64
	ldrh r0, [r4]
	subs r0, #3
	strh r0, [r4]
	lsls r0, r0, #0x10
	cmp r0, #0
	bgt _0806DFF6
	movs r0, #0
	strh r0, [r4]
	adds r0, r1, #0
	bl Proc_Break
_0806DFF6:
	movs r1, #0
	ldrsh r0, [r4, r1]
	bl SetBgmVolume
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_806E004
sub_806E004: @ 0x0806E004
	push {r4, lr}
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x66
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _0806E03A
	adds r4, r2, #0
	adds r4, #0x64
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xff
	ble _0806E032
	adds r0, r2, #0
	bl Proc_Break
_0806E032:
	movs r1, #0
	ldrsh r0, [r4, r1]
	bl SetBgmVolume
_0806E03A:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_806E040
sub_806E040: @ 0x0806E040
	push {lr}
	movs r0, #0
	bl sub_80030B4
	pop {r0}
	bx r0

	thumb_func_start sub_806E04C
sub_806E04C: @ 0x0806E04C
	push {lr}
	adds r1, r0, #0
	ldr r0, _0806E05C @ =0x086768FC
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_0806E05C: .4byte 0x086768FC

	thumb_func_start sub_806E060
sub_806E060: @ 0x0806E060
	push {lr}
	adds r1, r0, #0
	ldr r0, _0806E070 @ =0x08676914
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
_0806E070: .4byte 0x08676914

	thumb_func_start sub_806E074
sub_806E074: @ 0x0806E074
	push {r4, r5, lr}
	movs r4, #0
	ldr r0, _0806E0B4 @ =0x0000FFF4
	adds r5, r0, #0
_0806E07C:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0806E09E
	ldr r0, [r1]
	cmp r0, #0
	beq _0806E09E
	ldrh r2, [r1, #0xc]
	movs r0, #4
	ands r0, r2
	cmp r0, #0
	bne _0806E09E
	adds r0, r2, #0
	ands r0, r5
	strh r0, [r1, #0xc]
_0806E09E:
	adds r4, #1
	cmp r4, #0x3f
	ble _0806E07C
	bl RefreshEntityMaps
	bl RefreshUnitSprites
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806E0B4: .4byte 0x0000FFF4

	thumb_func_start sub_806E0B8
sub_806E0B8: @ 0x0806E0B8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	movs r6, #1
	movs r4, #1
	movs r0, #1
	rsbs r0, r0, #0
	mov sb, r0
	ldr r1, _0806E10C @ =0x0867692C
	mov r8, r1
_0806E0D0:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	adds r7, r4, #1
	mov ip, r7
	cmp r2, #0
	beq _0806E154
	ldr r1, [r2]
	cmp r1, #0
	beq _0806E154
	ldrh r3, [r2, #0xc]
	movs r0, #4
	ands r0, r3
	cmp r0, #0
	bne _0806E154
	ldrb r1, [r1, #4]
	cmp r1, #1
	bne _0806E114
	ldr r1, _0806E110 @ =0x0000FFF6
	adds r0, r1, #0
	ands r0, r3
	strh r0, [r2, #0xc]
	mov r7, r8
	ldrb r0, [r7]
	strb r0, [r2, #0xe]
	ldrb r0, [r7, #1]
	strb r0, [r2, #0xf]
	b _0806E154
	.align 2, 0
_0806E10C: .4byte 0x0867692C
_0806E110: .4byte 0x0000FFF6
_0806E114:
	ldr r1, _0806E170 @ =0x0203DCA7
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, sb
	beq _0806E154
	ldr r0, _0806E174 @ =0x0000FFF6
	mov sl, r0
	movs r5, #1
	rsbs r5, r5, #0
	adds r3, r1, #0
	lsls r0, r6, #2
	mov r7, r8
	adds r1, r0, r7
_0806E12E:
	movs r0, #0
	ldrsb r0, [r3, r0]
	cmp r0, r4
	bne _0806E14A
	mov r0, sl
	ldrh r7, [r2, #0xc]
	ands r0, r7
	strh r0, [r2, #0xc]
	ldrb r0, [r1]
	strb r0, [r2, #0xe]
	ldrb r0, [r1, #1]
	strb r0, [r2, #0xf]
	adds r1, #4
	adds r6, #1
_0806E14A:
	adds r3, #1
	movs r0, #0
	ldrsb r0, [r3, r0]
	cmp r0, r5
	bne _0806E12E
_0806E154:
	mov r4, ip
	cmp r4, #0x3f
	ble _0806E0D0
	bl RefreshEntityMaps
	bl RefreshUnitSprites
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806E170: .4byte 0x0203DCA7
_0806E174: .4byte 0x0000FFF6

	thumb_func_start sub_806E178
sub_806E178: @ 0x0806E178
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	movs r5, #1
	movs r0, #1
	rsbs r0, r0, #0
	mov sb, r0
	ldr r7, _0806E1CC @ =0x0867695C
	adds r6, r7, #0
	adds r6, #8
	ldr r1, _0806E1D0 @ =0x0000FFF6
	mov r8, r1
_0806E192:
	adds r0, r5, #0
	bl GetUnit
	adds r2, r0, #0
	adds r0, r5, #1
	mov ip, r0
	cmp r2, #0
	beq _0806E224
	ldr r3, [r2]
	cmp r3, #0
	beq _0806E224
	ldrh r1, [r2, #0xc]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	bne _0806E224
	ldrb r0, [r3, #4]
	cmp r0, #1
	beq _0806E1D8
	cmp r0, #0x42
	beq _0806E1E8
	movs r3, #0
	ldr r0, _0806E1D4 @ =0x0203DCA7
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r4, r0, #0
	cmp r1, sb
	beq _0806E224
	b _0806E1F8
	.align 2, 0
_0806E1CC: .4byte 0x0867695C
_0806E1D0: .4byte 0x0000FFF6
_0806E1D4: .4byte 0x0203DCA7
_0806E1D8:
	movs r0, #1
	orrs r0, r1
	strh r0, [r2, #0xc]
	ldrb r0, [r7]
	strb r0, [r2, #0xe]
	ldrb r0, [r7, #1]
	strb r0, [r2, #0xf]
	b _0806E224
_0806E1E8:
	mov r0, r8
	ands r0, r1
	strh r0, [r2, #0xc]
	ldrb r0, [r7, #4]
	strb r0, [r2, #0xe]
	ldrb r0, [r7, #5]
	strb r0, [r2, #0xf]
	b _0806E224
_0806E1F8:
	adds r0, r3, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, r5
	bne _0806E216
	mov r0, r8
	ldrh r1, [r2, #0xc]
	ands r0, r1
	strh r0, [r2, #0xc]
	ldrb r0, [r6]
	strb r0, [r2, #0xe]
	ldrb r0, [r6, #1]
	strb r0, [r2, #0xf]
	adds r6, #4
_0806E216:
	adds r3, #1
	adds r0, r3, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, sb
	bne _0806E1F8
_0806E224:
	mov r5, ip
	cmp r5, #0x3f
	ble _0806E192
	bl RefreshEntityMaps
	bl RefreshUnitSprites
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806E240
sub_806E240: @ 0x0806E240
	push {r4, r5, lr}
	movs r4, #1
	ldr r0, _0806E268 @ =0x0000FFF6
	adds r5, r0, #0
_0806E248:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0806E26C
	ldr r0, [r1]
	cmp r0, #0
	beq _0806E26C
	ldrb r0, [r0, #4]
	cmp r0, #1
	bne _0806E26C
	ldrh r0, [r1, #0xc]
	ands r0, r5
	strh r0, [r1, #0xc]
	b _0806E272
	.align 2, 0
_0806E268: .4byte 0x0000FFF6
_0806E26C:
	adds r4, #1
	cmp r4, #0x3f
	ble _0806E248
_0806E272:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_806E278
sub_806E278: @ 0x0806E278
	push {lr}
	ldr r0, _0806E2A0 @ =gBattleUnitA
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemIid
	cmp r0, #0xf
	beq _0806E296
	ldr r0, _0806E2A4 @ =gBattleUnitB
	adds r0, #0x4a
	ldrh r0, [r0]
	bl GetItemIid
	cmp r0, #0xf
	bne _0806E29C
_0806E296:
	movs r0, #0x7b
	bl SetEid
_0806E29C:
	pop {r0}
	bx r0
	.align 2, 0
_0806E2A0: .4byte gBattleUnitA
_0806E2A4: .4byte gBattleUnitB

	thumb_func_start UpdateEndingId
UpdateEndingId: @ 0x0806E2A8
	push {lr}
	ldr r0, _0806E2D0 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	cmp r0, #0x19
	bne _0806E2E4
	movs r0, #0x7b
	bl CheckFlag
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806E2D8
	bl IsItTeamFae
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806E2D8
	ldr r1, _0806E2D4 @ =0x0203D3D9
	movs r0, #0
	b _0806E2E8
	.align 2, 0
_0806E2D0: .4byte gPlaySt
_0806E2D4: .4byte 0x0203D3D9
_0806E2D8:
	ldr r1, _0806E2E0 @ =0x0203D3D9
	movs r0, #1
	b _0806E2E8
	.align 2, 0
_0806E2E0: .4byte 0x0203D3D9
_0806E2E4:
	ldr r1, _0806E2F0 @ =0x0203D3D9
	movs r0, #2
_0806E2E8:
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0806E2F0: .4byte 0x0203D3D9

	thumb_func_start GetEndingId
GetEndingId: @ 0x0806E2F4
	push {lr}
	bl UpdateEndingId
	ldr r0, _0806E304 @ =0x0203D3D9
	ldrb r0, [r0]
	pop {r1}
	bx r1
	.align 2, 0
_0806E304: .4byte 0x0203D3D9

	thumb_func_start StartGameEndingScene
StartGameEndingScene: @ 0x0806E308
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _0806E328 @ =0x086770D4
	bl GetEndingId
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x16
	adds r0, r0, r4
	ldr r0, [r0]
	adds r1, r5, #0
	bl StartEventLocking
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806E328: .4byte 0x086770D4

	thumb_func_start sub_806E32C
sub_806E32C: @ 0x0806E32C
	push {lr}
	bl GetEndingId
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #1
	beq _0806E34A
	cmp r1, #1
	bgt _0806E344
	cmp r1, #0
	beq _0806E34A
	b _0806E362
_0806E344:
	cmp r1, #2
	beq _0806E358
	b _0806E362
_0806E34A:
	ldr r0, _0806E354 @ =0x0203D3D8
	strb r1, [r0]
	bl sub_80914DC
	b _0806E362
	.align 2, 0
_0806E354: .4byte 0x0203D3D8
_0806E358:
	ldr r1, _0806E368 @ =0x0203D3D8
	movs r0, #0x80
	strb r0, [r1]
	bl sub_809154C
_0806E362:
	pop {r0}
	bx r0
	.align 2, 0
_0806E368: .4byte 0x0203D3D8

	thumb_func_start sub_806E36C
sub_806E36C: @ 0x0806E36C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0806E38C @ =0x030048A4
	ldrb r0, [r0]
	cmp r0, #0
	bne _0806E39C
	ldr r0, _0806E390 @ =0x0834B69C
	ldr r1, _0806E394 @ =0x06000020
	bl Decompress
	ldr r0, _0806E398 @ =0x086772FC
	str r0, [r4, #0x3c]
	movs r0, #0x1c
	rsbs r0, r0, #0
	b _0806E3F8
	.align 2, 0
_0806E38C: .4byte 0x030048A4
_0806E390: .4byte 0x0834B69C
_0806E394: .4byte 0x06000020
_0806E398: .4byte 0x086772FC
_0806E39C:
	cmp r0, #1
	bne _0806E3C0
	ldr r0, _0806E3B4 @ =0x0834B69C
	ldr r1, _0806E3B8 @ =0x06000020
	bl Decompress
	ldr r0, _0806E3BC @ =0x0867730C
	str r0, [r4, #0x3c]
	movs r0, #0x1c
	rsbs r0, r0, #0
	b _0806E3F8
	.align 2, 0
_0806E3B4: .4byte 0x0834B69C
_0806E3B8: .4byte 0x06000020
_0806E3BC: .4byte 0x0867730C
_0806E3C0:
	cmp r0, #2
	bne _0806E3E4
	ldr r0, _0806E3D8 @ =0x08349A98
	ldr r1, _0806E3DC @ =0x06000020
	bl Decompress
	ldr r0, _0806E3E0 @ =0x0867731C
	str r0, [r4, #0x3c]
	movs r0, #0x30
	rsbs r0, r0, #0
	b _0806E3F8
	.align 2, 0
_0806E3D8: .4byte 0x08349A98
_0806E3DC: .4byte 0x06000020
_0806E3E0: .4byte 0x0867731C
_0806E3E4:
	cmp r0, #3
	bne _0806E3FA
	ldr r0, _0806E424 @ =0x0834E1D4
	ldr r1, _0806E428 @ =0x06000020
	bl Decompress
	ldr r0, _0806E42C @ =0x08677327
	str r0, [r4, #0x3c]
	movs r0, #0x18
	rsbs r0, r0, #0
_0806E3F8:
	str r0, [r4, #0x38]
_0806E3FA:
	movs r1, #0
	str r1, [r4, #0x30]
	movs r0, #0x90
	rsbs r0, r0, #0
	str r0, [r4, #0x2c]
	str r1, [r4, #0x34]
	str r1, [r4, #0x40]
	ldr r0, [r4, #0x3c]
	movs r1, #0
	ldrsb r1, [r0, r1]
	movs r0, #0
	bl sub_806E684
	ldrh r1, [r4, #0x38]
	ldrh r2, [r4, #0x2c]
	movs r0, #0
	bl SetBgOffset
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806E424: .4byte 0x0834E1D4
_0806E428: .4byte 0x06000020
_0806E42C: .4byte 0x08677327

	thumb_func_start sub_806E430
sub_806E430: @ 0x0806E430
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x30]
	adds r0, #1
	str r0, [r5, #0x30]
	cmp r0, #6
	ble _0806E4F6
	movs r0, #0
	str r0, [r5, #0x30]
	ldr r2, [r5, #0x2c]
	adds r2, #1
	str r2, [r5, #0x2c]
	ldrh r1, [r5, #0x38]
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	bl SetBgOffset
	ldr r6, [r5, #0x34]
	adds r4, r6, #1
	str r4, [r5, #0x34]
	adds r0, r4, #0
	movs r1, #0x18
	bl __modsi3
	cmp r0, #0
	bne _0806E4F6
	ldr r0, [r5, #0x40]
	cmp r0, #0
	beq _0806E480
	adds r0, r4, #0
	cmp r0, #0
	bge _0806E474
	adds r0, r6, #0
	adds r0, #8
_0806E474:
	asrs r0, r0, #3
	movs r1, #3
	rsbs r1, r1, #0
	bl sub_806E684
	b _0806E4C8
_0806E480:
	adds r0, r4, #0
	movs r1, #0x18
	bl __divsi3
	ldr r2, [r5, #0x3c]
	adds r0, r2, r0
	movs r1, #0
	ldrsb r1, [r0, r1]
	movs r0, #2
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0806E4A6
	ldr r0, _0806E4FC @ =0x08677327
	cmp r2, r0
	bne _0806E4A6
	ldr r0, _0806E500 @ =0x08352160
	ldr r1, _0806E504 @ =0x06000020
	bl Decompress
_0806E4A6:
	ldr r0, [r5, #0x34]
	adds r4, r0, #0
	cmp r0, #0
	bge _0806E4B0
	adds r4, r0, #7
_0806E4B0:
	asrs r4, r4, #3
	movs r1, #0x18
	bl __divsi3
	ldr r1, [r5, #0x3c]
	adds r1, r1, r0
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r4, #0
	bl sub_806E684
_0806E4C8:
	ldr r4, [r5, #0x40]
	cmp r4, #0
	bne _0806E4E8
	ldr r0, [r5, #0x34]
	movs r1, #0x18
	bl __divsi3
	ldr r1, [r5, #0x3c]
	adds r1, r1, r0
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	movs r0, #3
	rsbs r0, r0, #0
	cmp r1, r0
	bne _0806E4F6
_0806E4E8:
	adds r0, r4, #1
	str r0, [r5, #0x40]
	cmp r0, #4
	bne _0806E4F6
	ldr r1, _0806E508 @ =0x030048B8
	movs r0, #1
	strb r0, [r1]
_0806E4F6:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806E4FC: .4byte 0x08677327
_0806E500: .4byte 0x08352160
_0806E504: .4byte 0x06000020
_0806E508: .4byte 0x030048B8

	thumb_func_start sub_806E50C
sub_806E50C: @ 0x0806E50C
	push {lr}
	adds r1, r0, #0
	ldr r0, _0806E51C @ =0x08677348
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_0806E51C: .4byte 0x08677348

	thumb_func_start sub_806E520
sub_806E520: @ 0x0806E520
	push {r4, lr}
	sub sp, #4
	ldr r0, _0806E648 @ =0x08677360
	bl InitBgs
	movs r0, #0xf
	bl DisableBgSync
	ldr r3, _0806E64C @ =gDispIo
	movs r0, #8
	rsbs r0, r0, #0
	ldrb r1, [r3]
	ands r0, r1
	strb r0, [r3]
	movs r0, #1
	ldrb r2, [r3, #1]
	orrs r0, r2
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #8
	ands r0, r1
	subs r1, #0x10
	ands r0, r1
	subs r1, #0x20
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r2, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r2, [r0]
	ldr r0, _0806E650 @ =0x0000FFE0
	ldrh r2, [r3, #0x3c]
	ands r0, r2
	movs r1, #1
	orrs r0, r1
	ldr r1, _0806E654 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	bl LoadUiFrameGraphics
	ldr r0, _0806E658 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0806E65C @ =gBg1Tm
	movs r1, #0
	bl TmFill
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r4, _0806E660 @ =0x0836F6D4
	movs r0, #2
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, _0806E664 @ =0x08373F80
	ldr r1, _0806E668 @ =gBg2Tm
	bl Decompress
	ldr r0, _0806E66C @ =0x08374670
	ldr r1, _0806E670 @ =gBuf
	bl Decompress
	movs r4, #0
_0806E5E6:
	ldr r0, _0806E670 @ =gBuf
	adds r1, r4, #0
	movs r2, #1
	movs r3, #2
	bl sub_805B5C8
	adds r4, #1
	cmp r4, #7
	ble _0806E5E6
	ldr r0, _0806E670 @ =gBuf
	movs r2, #0x80
	lsls r2, r2, #2
	movs r1, #0
	bl ApplyPaletteExt
	ldr r1, _0806E674 @ =gPal
	movs r4, #0
	movs r0, #0
	strh r0, [r1]
	ldr r0, _0806E678 @ =0x08353308
	movs r1, #0xf0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #1
	str r0, [sp]
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_809892C
	bl sub_8069C34
	ldr r0, _0806E67C @ =sub_8069FD8
	bl SetOnHBlankA
	bl sub_806A7AC
	ldr r0, _0806E680 @ =0x030048B8
	strb r4, [r0]
	movs r0, #0xf
	bl EnableBgSync
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806E648: .4byte 0x08677360
_0806E64C: .4byte gDispIo
_0806E650: .4byte 0x0000FFE0
_0806E654: .4byte 0x0000E0FF
_0806E658: .4byte gBg0Tm
_0806E65C: .4byte gBg1Tm
_0806E660: .4byte 0x0836F6D4
_0806E664: .4byte 0x08373F80
_0806E668: .4byte gBg2Tm
_0806E66C: .4byte 0x08374670
_0806E670: .4byte gBuf
_0806E674: .4byte gPal
_0806E678: .4byte 0x08353308
_0806E67C: .4byte sub_8069FD8
_0806E680: .4byte 0x030048B8

	thumb_func_start sub_806E684
sub_806E684: @ 0x0806E684
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r5, r1, #0
	movs r0, #2
	rsbs r0, r0, #0
	cmp r5, r0
	bne _0806E694
	movs r5, #0
_0806E694:
	movs r4, #1
	rsbs r4, r4, #0
	ldr r0, _0806E6C4 @ =gBg0Tm
	mov ip, r0
	adds r6, r4, #0
_0806E69E:
	adds r0, r7, r4
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #6
	mov r1, ip
	adds r3, r0, r1
	cmp r4, r6
	beq _0806E6B2
	cmp r4, #2
	bne _0806E6C8
_0806E6B2:
	adds r4, #1
	movs r0, #0
	movs r2, #0x1f
_0806E6B8:
	strh r0, [r3]
	adds r3, #2
	subs r2, #1
	cmp r2, #0
	bge _0806E6B8
	b _0806E700
	.align 2, 0
_0806E6C4: .4byte gBg0Tm
_0806E6C8:
	cmp r5, r6
	beq _0806E6D4
	movs r0, #3
	rsbs r0, r0, #0
	cmp r5, r0
	bne _0806E6E6
_0806E6D4:
	adds r4, #1
	movs r0, #0
	movs r2, #0x1f
_0806E6DA:
	strh r0, [r3]
	adds r3, #2
	subs r2, #1
	cmp r2, #0
	bge _0806E6DA
	b _0806E700
_0806E6E6:
	lsls r0, r5, #6
	lsls r1, r4, #5
	adds r0, r0, r1
	ldr r2, _0806E710 @ =0x0000F001
	adds r1, r0, r2
	movs r2, #0
	adds r4, #1
_0806E6F4:
	adds r0, r1, r2
	strh r0, [r3]
	adds r3, #2
	adds r2, #1
	cmp r2, #0x1f
	ble _0806E6F4
_0806E700:
	cmp r4, #2
	ble _0806E69E
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806E710: .4byte 0x0000F001

	thumb_func_start sub_806E714
sub_806E714: @ 0x0806E714
	push {lr}
	adds r1, r0, #0
	ldr r0, _0806E72C @ =0x030048B8
	ldrb r0, [r0]
	cmp r0, #0
	beq _0806E726
	adds r0, r1, #0
	bl Proc_Break
_0806E726:
	pop {r0}
	bx r0
	.align 2, 0
_0806E72C: .4byte 0x030048B8

	thumb_func_start sub_806E730
sub_806E730: @ 0x0806E730
	push {lr}
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0

	thumb_func_start sub_806E73C
sub_806E73C: @ 0x0806E73C
	push {r4, lr}
	sub sp, #8
	movs r0, #0
	bl InitBgs
	ldr r2, _0806E790 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r4, #0
	str r4, [sp]
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	ldr r2, _0806E794 @ =0x01000008
	mov r0, sp
	bl CpuFastSet
	str r4, [sp, #4]
	add r0, sp, #4
	ldr r1, _0806E798 @ =0x06006000
	ldr r2, _0806E79C @ =0x01000800
	bl CpuFastSet
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806E790: .4byte gDispIo
_0806E794: .4byte 0x01000008
_0806E798: .4byte 0x06006000
_0806E79C: .4byte 0x01000800

	thumb_func_start sub_806E7A0
sub_806E7A0: @ 0x0806E7A0
	push {lr}
	adds r1, r0, #0
	ldr r2, _0806E7B4 @ =0x030048A4
	movs r0, #0
	strb r0, [r2]
	ldr r0, _0806E7B8 @ =0x08677378
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_0806E7B4: .4byte 0x030048A4
_0806E7B8: .4byte 0x08677378

	thumb_func_start sub_806E7BC
sub_806E7BC: @ 0x0806E7BC
	push {lr}
	adds r1, r0, #0
	ldr r2, _0806E7D0 @ =0x030048A4
	movs r0, #1
	strb r0, [r2]
	ldr r0, _0806E7D4 @ =0x08677378
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_0806E7D0: .4byte 0x030048A4
_0806E7D4: .4byte 0x08677378

	thumb_func_start sub_806E7D8
sub_806E7D8: @ 0x0806E7D8
	push {lr}
	adds r1, r0, #0
	ldr r2, _0806E7EC @ =0x030048A4
	movs r0, #2
	strb r0, [r2]
	ldr r0, _0806E7F0 @ =0x08677378
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_0806E7EC: .4byte 0x030048A4
_0806E7F0: .4byte 0x08677378

	thumb_func_start sub_806E7F4
sub_806E7F4: @ 0x0806E7F4
	push {lr}
	adds r1, r0, #0
	ldr r2, _0806E808 @ =0x030048A4
	movs r0, #3
	strb r0, [r2]
	ldr r0, _0806E80C @ =0x08677378
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_0806E808: .4byte 0x030048A4
_0806E80C: .4byte 0x08677378

	thumb_func_start sub_806E810
sub_806E810: @ 0x0806E810
	push {lr}
	ldr r0, _0806E82C @ =0x08677378
	bl Proc_Find
	cmp r0, #0
	bne _0806E834
	ldr r0, _0806E830 @ =0x08677348
	bl Proc_EndEach
	bl sub_806DCA4
	movs r0, #0
	b _0806E836
	.align 2, 0
_0806E82C: .4byte 0x08677378
_0806E830: .4byte 0x08677348
_0806E834:
	movs r0, #1
_0806E836:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_806E83C
sub_806E83C: @ 0x0806E83C
	push {r4, r5, lr}
	adds r3, r1, r2
	adds r3, r0, r3
	movs r4, #4
	strb r4, [r3]
	lsls r4, r1, #1
	adds r3, r4, r2
	adds r3, r0, r3
	movs r5, #0xe
	strb r5, [r3]
	adds r4, r4, r1
	adds r4, r4, r2
	adds r0, r0, r4
	movs r1, #3
	strb r1, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_806E860
sub_806E860: @ 0x0806E860
	push {r4, r5, lr}
	adds r4, r0, r2
	movs r3, #4
	strb r3, [r4]
	adds r3, r1, r2
	adds r3, r0, r3
	movs r5, #0xe
	strb r5, [r3]
	lsls r4, r1, #1
	adds r3, r4, r2
	adds r3, r0, r3
	strb r5, [r3]
	adds r4, r4, r1
	adds r4, r4, r2
	adds r4, r0, r4
	strb r5, [r4]
	lsls r1, r1, #2
	adds r1, r1, r2
	adds r0, r0, r1
	movs r1, #3
	strb r1, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_806E890
sub_806E890: @ 0x0806E890
	push {r4, lr}
	adds r3, r1, r2
	adds r3, r0, r3
	movs r4, #1
	strb r4, [r3]
	lsls r1, r1, #1
	adds r1, r1, r2
	adds r0, r0, r1
	movs r1, #5
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806E8AC
sub_806E8AC: @ 0x0806E8AC
	push {r4, lr}
	adds r3, r1, r2
	adds r3, r0, r3
	movs r4, #0xd
	strb r4, [r3]
	lsls r1, r1, #1
	adds r1, r1, r2
	adds r0, r0, r1
	movs r1, #0xc
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806E8C8
sub_806E8C8: @ 0x0806E8C8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	str r0, [sp, #4]
	mov sb, r1
	adds r6, r2, #0
	adds r5, r3, #0
	ldr r0, [sp, #0x28]
	mov sl, r0
	ldr r1, _0806E990 @ =gBuf
	mov r8, r1
	movs r0, #0
	str r0, [sp]
	lsls r2, r6, #4
	ldr r0, _0806E994 @ =0x001FFFFF
	ands r2, r0
	movs r0, #0x80
	lsls r0, r0, #0x11
	orrs r2, r0
	mov r0, sp
	bl CpuFastSet
	lsls r4, r6, #3
	mov r0, r8
	adds r1, r4, #0
	mov r2, sb
	bl sub_806E83C
	mov r0, sb
	adds r2, r0, r5
	adds r2, #3
	mov r0, r8
	adds r1, r4, #0
	bl sub_806E83C
	movs r4, #0
	adds r5, #2
	cmp r4, r5
	bge _0806E930
	mov r7, sb
	adds r7, #1
_0806E920:
	adds r2, r4, r7
	mov r0, r8
	lsls r1, r6, #3
	bl sub_806E860
	adds r4, #1
	cmp r4, r5
	blt _0806E920
_0806E930:
	movs r4, #0
	ldr r1, [sp, #4]
	lsls r7, r1, #5
	cmp r4, sl
	bge _0806E94E
	mov r5, sb
	adds r5, #2
_0806E93E:
	adds r2, r4, r5
	mov r0, r8
	lsls r1, r6, #3
	bl sub_806E890
	adds r4, #1
	cmp r4, sl
	blt _0806E93E
_0806E94E:
	ldr r0, [sp, #0x2c]
	cmp r0, #0
	ble _0806E970
	mov r0, sb
	adds r0, #2
	mov r1, sl
	adds r5, r1, r0
	ldr r4, [sp, #0x2c]
_0806E95E:
	mov r0, r8
	lsls r1, r6, #3
	adds r2, r5, #0
	bl sub_806E8AC
	adds r5, #1
	subs r4, #1
	cmp r4, #0
	bne _0806E95E
_0806E970:
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r7, r0
	mov r0, r8
	adds r2, r6, #0
	movs r3, #1
	bl sub_8013DAC
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806E990: .4byte gBuf
_0806E994: .4byte 0x001FFFFF

	thumb_func_start sub_806E998
sub_806E998: @ 0x0806E998
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #8
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	adds r4, r3, #0
	ldr r3, [sp, #0x1c]
	ldr r0, [sp, #0x20]
	ldr r1, [sp, #0x24]
	str r0, [sp]
	str r1, [sp, #4]
	adds r0, r5, #0
	movs r1, #2
	adds r2, r6, #0
	bl sub_806E8C8
	ldr r0, _0806E9DC @ =0x000003FF
	ands r0, r5
	adds r4, r4, r0
	mov r0, r8
	adds r1, r4, #0
	adds r2, r6, #0
	movs r3, #1
	bl PutIncrTileref
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806E9DC: .4byte 0x000003FF

	thumb_func_start sub_806E9E0
sub_806E9E0: @ 0x0806E9E0
	adds r0, #0x4c
	movs r1, #0
	strh r1, [r0]
	bx lr

	thumb_func_start sub_806E9E8
sub_806E9E8: @ 0x0806E9E8
	push {r4, lr}
	adds r4, r0, #0
	adds r4, #0x4c
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	movs r0, #0
	ldrsh r1, [r4, r0]
	cmp r1, #0
	bge _0806E9FE
	adds r1, #3
_0806E9FE:
	lsls r1, r1, #0xe
	lsrs r1, r1, #0x10
	movs r0, #3
	movs r2, #0
	bl SetBgOffset
	movs r1, #0
	ldrsh r0, [r4, r1]
	cmp r0, #0
	bge _0806EA14
	adds r0, #3
_0806EA14:
	asrs r1, r0, #2
	ldr r0, _0806EA20 @ =0x0400001C
	strh r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806EA20: .4byte 0x0400001C

	thumb_func_start sub_806EA24
sub_806EA24: @ 0x0806EA24
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	ldr r6, _0806EA5C @ =gBg3Tm
	cmp r4, #0
	bne _0806EA3E
	movs r0, #3
	bl GetBgChrOffset
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r4, r0, r1
_0806EA3E:
	cmp r5, #0
	bge _0806EA44
	movs r5, #0xe
_0806EA44:
	ldr r1, _0806EA60 @ =gBmSt
	movs r0, #0x40
	ldrb r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _0806EA68
	ldr r0, _0806EA64 @ =0x08109C80
	lsls r1, r5, #5
	movs r2, #0x40
	bl ApplyPaletteExt
	b _0806EA72
	.align 2, 0
_0806EA5C: .4byte gBg3Tm
_0806EA60: .4byte gBmSt
_0806EA64: .4byte 0x08109C80
_0806EA68:
	ldr r0, _0806EAAC @ =0x0833BFDC
	lsls r1, r5, #5
	movs r2, #0x40
	bl ApplyPaletteExt
_0806EA72:
	ldr r0, _0806EAB0 @ =0x08336D5C
	adds r1, r4, #0
	bl Decompress
	movs r0, #3
	bl GetBgChrOffset
	subs r0, r4, r0
	lsls r0, r0, #0xf
	lsrs r0, r0, #0x14
	movs r1, #0xf
	ands r1, r5
	lsls r1, r1, #0xc
	adds r1, r0, r1
	movs r2, #0
	ldr r3, _0806EAB4 @ =0x0000027F
_0806EA92:
	adds r0, r2, r1
	strh r0, [r6]
	adds r6, #2
	adds r2, #1
	cmp r2, r3
	ble _0806EA92
	ldr r0, _0806EAB8 @ =0x086773D8
	adds r1, r7, #0
	bl SpawnProc
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0806EAAC: .4byte 0x0833BFDC
_0806EAB0: .4byte 0x08336D5C
_0806EAB4: .4byte 0x0000027F
_0806EAB8: .4byte 0x086773D8

	thumb_func_start sub_806EABC
sub_806EABC: @ 0x0806EABC
	push {lr}
	ldr r0, _0806EAC8 @ =0x086773D8
	bl Proc_EndEach
	pop {r0}
	bx r0
	.align 2, 0
_0806EAC8: .4byte 0x086773D8

	thumb_func_start sub_806EACC
sub_806EACC: @ 0x0806EACC
	ldr r0, _0806EAD4 @ =0x0203D3DC
	ldrb r0, [r0, #1]
	bx lr
	.align 2, 0
_0806EAD4: .4byte 0x0203D3DC

	thumb_func_start sub_806EAD8
sub_806EAD8: @ 0x0806EAD8
	ldr r1, _0806EAE0 @ =0x0203D3DC
	strb r0, [r1, #1]
	bx lr
	.align 2, 0
_0806EAE0: .4byte 0x0203D3DC

	thumb_func_start sub_806EAE4
sub_806EAE4: @ 0x0806EAE4
	ldr r1, _0806EAEC @ =0x0203D3DC
	strh r0, [r1, #2]
	bx lr
	.align 2, 0
_0806EAEC: .4byte 0x0203D3DC

	thumb_func_start sub_806EAF0
sub_806EAF0: @ 0x0806EAF0
	push {lr}
	ldr r0, _0806EAFC @ =0x086773F0
	bl InitTextList
	pop {r0}
	bx r0
	.align 2, 0
_0806EAFC: .4byte 0x086773F0

	thumb_func_start sub_806EB00
sub_806EB00: @ 0x0806EB00
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r6, r0, #0
	b _0806EB3A
_0806EB08:
	ldr r0, [r6, #0xc]
	cmp r0, #0
	beq _0806EB30
	bl GetLang
	ldr r1, [r6, #0xc]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r5, [r6]
	ldr r1, [r6, #4]
	ldrb r2, [r6, #8]
	ldrb r3, [r6, #9]
	movs r4, #0
	str r4, [sp]
	ldr r0, [r0]
	str r0, [sp, #4]
	adds r0, r5, #0
	bl PutDrawText
	b _0806EB38
_0806EB30:
	ldr r0, [r6]
	ldr r1, [r6, #4]
	bl PutText
_0806EB38:
	adds r6, #0x10
_0806EB3A:
	ldr r0, [r6]
	cmp r0, #0
	bne _0806EB08
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_806EB48
sub_806EB48: @ 0x0806EB48
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	ldr r7, _0806EC48 @ =0x02003108
	ldr r0, [r7, #0xc]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r6, r0, #0
	movs r0, #0x38
	adds r1, r6, #0
	bl GetStringTextCenteredPos
	mov r8, r0
	ldr r5, _0806EC4C @ =gBg0Tm
	adds r0, r5, #0
	movs r1, #0
	bl TmFill
	ldr r4, [r7, #0xc]
	adds r0, r4, #0
	bl GetUnitEquippedWeaponSlot
	adds r1, r0, #0
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r4, #0
	bl BattleGenerateDisplayStats
	adds r0, r7, #0
	adds r0, #0x18
	movs r2, #0xa2
	lsls r2, r2, #2
	adds r1, r5, r2
	movs r4, #0
	str r4, [sp]
	str r6, [sp, #4]
	movs r2, #0
	mov r3, r8
	bl PutDrawText
	ldr r0, [r7, #0xc]
	ldr r0, [r0, #4]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r2, r7, #0
	adds r2, #0x20
	ldr r3, _0806EC50 @ =0x00000342
	adds r1, r5, r3
	str r4, [sp]
	str r0, [sp, #4]
	adds r0, r2, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	ldr r1, _0806EC54 @ =0x000003C2
	adds r0, r5, r1
	movs r1, #3
	movs r2, #0x24
	movs r3, #0x25
	bl PutTwoSpecialChar
	ldr r2, _0806EC58 @ =0x000003CA
	adds r0, r5, r2
	movs r1, #3
	movs r2, #0x1f
	bl PutSpecialChar
	ldr r3, _0806EC5C @ =0x00000442
	adds r0, r5, r3
	movs r1, #3
	movs r2, #0x22
	movs r3, #0x23
	bl PutTwoSpecialChar
	ldr r1, _0806EC60 @ =0x0000044A
	adds r0, r5, r1
	movs r1, #3
	movs r2, #0x16
	bl PutSpecialChar
	movs r2, #0xf2
	lsls r2, r2, #2
	adds r0, r5, r2
	ldr r1, [r7, #0xc]
	movs r2, #8
	ldrsb r2, [r1, r2]
	movs r1, #2
	bl PutNumberOrBlank
	ldr r3, _0806EC64 @ =0x000003CE
	adds r0, r5, r3
	ldr r1, [r7, #0xc]
	ldrb r2, [r1, #9]
	movs r1, #2
	bl PutNumberOrBlank
	movs r0, #0x89
	lsls r0, r0, #3
	adds r4, r5, r0
	ldr r0, [r7, #0xc]
	bl GetUnitCurrentHp
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	bl PutNumberOrBlank
	ldr r1, _0806EC68 @ =0x0000044E
	adds r5, r5, r1
	ldr r0, [r7, #0xc]
	bl GetUnitMaxHp
	adds r2, r0, #0
	adds r0, r5, #0
	movs r1, #2
	bl PutNumberOrBlank
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806EC48: .4byte 0x02003108
_0806EC4C: .4byte gBg0Tm
_0806EC50: .4byte 0x00000342
_0806EC54: .4byte 0x000003C2
_0806EC58: .4byte 0x000003CA
_0806EC5C: .4byte 0x00000442
_0806EC60: .4byte 0x0000044A
_0806EC64: .4byte 0x000003CE
_0806EC68: .4byte 0x0000044E

	thumb_func_start sub_806EC6C
sub_806EC6C: @ 0x0806EC6C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	mov sl, r0
	mov r8, r1
	str r2, [sp, #0xc]
	adds r7, r3, #0
	ldr r5, [sp, #0x30]
	subs r0, r5, r7
	mov sb, r0
	lsls r6, r2, #5
	adds r0, r6, r1
	lsls r0, r0, #1
	ldr r4, _0806ED28 @ =0x02003238
	adds r0, r0, r4
	movs r1, #2
	ldr r2, [sp, #0x34]
	cmp r7, r2
	bne _0806EC9A
	movs r1, #4
_0806EC9A:
	adds r2, r7, #0
	bl PutNumberOrBlank
	adds r1, r6, #1
	add r1, r8
	lsls r1, r1, #1
	adds r1, r1, r4
	mov r0, sb
	bl PutNumberBonus
	cmp r5, #0x1e
	ble _0806ECB8
	movs r5, #0x1e
	subs r5, r5, r7
	mov sb, r5
_0806ECB8:
	mov r0, sl
	lsls r5, r0, #1
	add r5, sl
	lsls r5, r5, #1
	ldr r1, _0806ED2C @ =0x00000401
	adds r5, r5, r1
	ldr r4, [sp, #0xc]
	adds r4, #1
	lsls r4, r4, #5
	subs r4, #2
	add r4, r8
	lsls r4, r4, #1
	ldr r0, _0806ED30 @ =0x02003C38
	adds r4, r4, r0
	movs r6, #0xc0
	lsls r6, r6, #7
	ldr r2, [sp, #0x34]
	lsls r0, r2, #2
	adds r0, r0, r2
	lsls r0, r0, #3
	adds r0, r0, r2
	movs r1, #0x1e
	bl __divsi3
	str r0, [sp]
	lsls r0, r7, #2
	adds r0, r0, r7
	lsls r0, r0, #3
	adds r0, r0, r7
	movs r1, #0x1e
	bl __divsi3
	str r0, [sp, #4]
	mov r1, sb
	lsls r0, r1, #2
	add r0, sb
	lsls r0, r0, #3
	add r0, sb
	movs r1, #0x1e
	bl __divsi3
	str r0, [sp, #8]
	adds r0, r5, #0
	movs r1, #6
	adds r2, r4, #0
	adds r3, r6, #0
	bl sub_806E998
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806ED28: .4byte 0x02003238
_0806ED2C: .4byte 0x00000401
_0806ED30: .4byte 0x02003C38

	thumb_func_start sub_806ED34
sub_806ED34: @ 0x0806ED34
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	ldr r0, _0806ED80 @ =0x08307D58
	ldr r4, _0806ED84 @ =gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, _0806ED88 @ =0x02003738
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl TmApplyTsa_t
	ldr r0, _0806ED8C @ =0x083193EC
	bl sub_806EB00
	ldr r4, _0806ED90 @ =0x02003108
	ldr r0, [r4, #0xc]
	bl UnitKnowsMagic
	lsls r0, r0, #0x18
	asrs r2, r0, #0x18
	cmp r2, #0
	beq _0806ED9C
	adds r0, r4, #0
	adds r0, #0x30
	ldr r1, _0806ED94 @ =0x0200327A
	movs r2, #0
	str r2, [sp]
	ldr r2, _0806ED98 @ =0x083195AC
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #0
	bl PutDrawText
	b _0806EDB0
	.align 2, 0
_0806ED80: .4byte 0x08307D58
_0806ED84: .4byte gBuf
_0806ED88: .4byte 0x02003738
_0806ED8C: .4byte 0x083193EC
_0806ED90: .4byte 0x02003108
_0806ED94: .4byte 0x0200327A
_0806ED98: .4byte 0x083195AC
_0806ED9C:
	adds r0, r4, #0
	adds r0, #0x30
	ldr r1, _0806EFD0 @ =0x0200327A
	str r2, [sp]
	ldr r2, _0806EFD4 @ =0x083195B4
	str r2, [sp, #4]
	movs r2, #3
	movs r3, #4
	bl PutDrawText
_0806EDB0:
	ldr r6, _0806EFD8 @ =0x02003108
	ldr r0, [r6, #0xc]
	bl GetUnitPower
	ldr r1, [r6, #0xc]
	movs r3, #0x12
	ldrsb r3, [r1, r3]
	str r0, [sp]
	ldr r0, [r1, #4]
	ldrb r0, [r0, #0x14]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [sp, #4]
	movs r0, #0
	movs r1, #5
	movs r2, #1
	bl sub_806EC6C
	ldr r0, [r6, #0xc]
	bl GetUnitSkill
	adds r4, r0, #0
	ldr r2, [r6, #0xc]
	ldrb r1, [r2, #0x13]
	movs r5, #0x10
	adds r0, r5, #0
	ldrh r3, [r2, #0xc]
	ands r0, r3
	cmp r0, #0
	beq _0806EDF6
	lsls r0, r1, #0x18
	asrs r1, r0, #0x18
	lsrs r0, r0, #0x1f
	adds r1, r1, r0
	lsrs r1, r1, #1
_0806EDF6:
	lsls r0, r1, #0x18
	asrs r3, r0, #0x18
	str r4, [sp]
	ldr r0, [r2, #4]
	ldrb r1, [r0, #0x15]
	adds r0, r5, #0
	ldrh r2, [r2, #0xc]
	ands r0, r2
	cmp r0, #0
	beq _0806EE14
	lsls r0, r1, #0x18
	asrs r1, r0, #0x18
	lsrs r0, r0, #0x1f
	adds r1, r1, r0
	lsrs r1, r1, #1
_0806EE14:
	lsls r0, r1, #0x18
	asrs r0, r0, #0x18
	str r0, [sp, #4]
	movs r0, #1
	movs r1, #5
	movs r2, #3
	bl sub_806EC6C
	ldr r0, [r6, #0xc]
	bl GetUnitSpeed
	adds r4, r0, #0
	ldr r2, [r6, #0xc]
	ldrb r1, [r2, #0x14]
	adds r0, r5, #0
	ldrh r3, [r2, #0xc]
	ands r0, r3
	cmp r0, #0
	beq _0806EE44
	lsls r0, r1, #0x18
	asrs r1, r0, #0x18
	lsrs r0, r0, #0x1f
	adds r1, r1, r0
	lsrs r1, r1, #1
_0806EE44:
	lsls r0, r1, #0x18
	asrs r3, r0, #0x18
	str r4, [sp]
	ldr r0, [r2, #4]
	ldrb r1, [r0, #0x16]
	adds r0, r5, #0
	ldrh r2, [r2, #0xc]
	ands r0, r2
	cmp r0, #0
	beq _0806EE62
	lsls r0, r1, #0x18
	asrs r1, r0, #0x18
	lsrs r0, r0, #0x1f
	adds r1, r1, r0
	lsrs r1, r1, #1
_0806EE62:
	lsls r0, r1, #0x18
	asrs r0, r0, #0x18
	str r0, [sp, #4]
	movs r0, #2
	movs r1, #5
	movs r2, #5
	bl sub_806EC6C
	ldr r0, [r6, #0xc]
	bl GetUnitLuck
	ldr r1, [r6, #0xc]
	movs r3, #0x17
	ldrsb r3, [r1, r3]
	str r0, [sp]
	movs r0, #0x1e
	str r0, [sp, #4]
	movs r0, #3
	movs r1, #5
	movs r2, #7
	bl sub_806EC6C
	ldr r0, [r6, #0xc]
	bl GetUnitDefense
	ldr r1, [r6, #0xc]
	movs r3, #0x15
	ldrsb r3, [r1, r3]
	str r0, [sp]
	ldr r0, [r1, #4]
	ldrb r0, [r0, #0x17]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [sp, #4]
	movs r0, #4
	movs r1, #5
	movs r2, #9
	bl sub_806EC6C
	ldr r0, [r6, #0xc]
	bl GetUnitResistance
	ldr r1, [r6, #0xc]
	movs r3, #0x16
	ldrsb r3, [r1, r3]
	str r0, [sp]
	ldr r0, [r1, #4]
	ldrb r0, [r0, #0x18]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [sp, #4]
	movs r0, #5
	movs r1, #5
	movs r2, #0xb
	bl sub_806EC6C
	ldr r1, [r6, #0xc]
	ldr r0, [r1, #4]
	movs r3, #0x12
	ldrsb r3, [r0, r3]
	movs r0, #0x1a
	ldrsb r0, [r1, r0]
	adds r0, r0, r3
	str r0, [sp]
	movs r5, #0xf
	str r5, [sp, #4]
	movs r0, #6
	movs r1, #0xd
	movs r2, #1
	bl sub_806EC6C
	ldr r1, [r6, #0xc]
	ldr r0, [r1, #4]
	movs r3, #0x11
	ldrsb r3, [r0, r3]
	ldr r0, [r1]
	ldrb r0, [r0, #0x13]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r3, r3, r0
	movs r0, #0x18
	ldrsb r0, [r1, r0]
	adds r0, r3, r0
	str r0, [sp]
	ldr r0, [r1, #4]
	ldrb r0, [r0, #0x19]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	str r0, [sp, #4]
	movs r0, #7
	movs r1, #0xd
	movs r2, #3
	bl sub_806EC6C
	ldr r7, _0806EFDC @ =0x02003392
	ldr r0, [r6, #0xc]
	bl GetUnitAid
	adds r2, r0, #0
	adds r0, r7, #0
	movs r1, #2
	bl PutNumber
	adds r4, r7, #2
	ldr r0, [r6, #0xc]
	ldr r1, [r0]
	ldr r2, [r0, #4]
	ldr r0, [r1, #0x28]
	ldr r1, [r2, #0x24]
	orrs r0, r1
	bl GetAidIconFromAttributes
	adds r1, r0, #0
	movs r0, #0xa0
	lsls r0, r0, #7
	mov r8, r0
	adds r0, r4, #0
	mov r2, r8
	bl PutIcon
	adds r4, r6, #0
	adds r4, #0x78
	ldr r0, [r6, #0xc]
	bl GetUnitRescueName
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x18
	movs r2, #2
	bl Text_InsertDrawString
	adds r4, #0x10
	ldr r0, [r6, #0xc]
	bl GetUnitStatusName
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x18
	movs r2, #2
	bl Text_InsertDrawString
	ldr r0, [r6, #0xc]
	adds r0, #0x2e
	ldrb r2, [r0]
	ands r5, r2
	cmp r5, #0
	beq _0806EF96
	movs r1, #0xc3
	lsls r1, r1, #1
	adds r0, r7, r1
	lsrs r2, r2, #4
	movs r1, #0
	bl PutNumberSmall
_0806EF96:
	adds r4, r7, #0
	adds r4, #0xfe
	ldr r0, [r6, #0xc]
	bl GetUnitAffinityIcon
	adds r1, r0, #0
	adds r0, r4, #0
	mov r2, r8
	bl PutIcon
	adds r4, r6, #0
	adds r4, #0x80
	ldr r0, [r6, #0xc]
	ldr r0, [r0]
	ldrb r0, [r0, #9]
	bl GetAffinityName
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x28
	movs r2, #2
	bl Text_InsertDrawString
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806EFD0: .4byte 0x0200327A
_0806EFD4: .4byte 0x083195B4
_0806EFD8: .4byte 0x02003108
_0806EFDC: .4byte 0x02003392

	thumb_func_start sub_806EFE0
sub_806EFE0: @ 0x0806EFE0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	ldr r0, _0806F130 @ =0x08307DD4
	ldr r4, _0806F134 @ =gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, _0806F138 @ =0x02003738
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl TmApplyTsa_t
	ldr r0, _0806F13C @ =0x08308070
	adds r1, r4, #0
	bl Decompress
	ldr r0, _0806F140 @ =0x02003EFA
	ldr r2, _0806F144 @ =0x00007060
	adds r1, r4, #0
	bl TmApplyTsa_t
	ldr r0, _0806F148 @ =0x083194AC
	bl sub_806EB00
	movs r4, #0
	ldr r1, _0806F14C @ =0x02003108
	ldr r0, [r1, #0xc]
	ldrh r5, [r0, #0x1c]
	cmp r5, #0
	beq _0806F064
	mov sb, r1
	mov r8, r4
	movs r7, #0x40
	mov r6, sb
	adds r6, #0x90
_0806F02C:
	mov r1, sb
	ldr r0, [r1, #0xc]
	adds r1, r5, #0
	bl IsItemDisplayUseable
	adds r2, r0, #0
	lsls r2, r2, #0x18
	asrs r2, r2, #0x18
	ldr r3, _0806F150 @ =0x0200323A
	adds r3, r7, r3
	adds r0, r6, #0
	adds r1, r5, #0
	bl sub_8016860
	movs r3, #2
	add r8, r3
	adds r7, #0x80
	adds r6, #8
	adds r4, #1
	cmp r4, #4
	bgt _0806F064
	mov r1, sb
	ldr r0, [r1, #0xc]
	adds r0, #0x1c
	add r0, r8
	ldrh r5, [r0]
	cmp r5, #0
	bne _0806F02C
_0806F064:
	ldr r7, _0806F14C @ =0x02003108
	ldr r0, [r7, #0xc]
	bl GetUnitEquippedWeaponSlot
	adds r4, r0, #0
	movs r5, #0
	cmp r4, #0
	blt _0806F09E
	lsls r4, r4, #1
	adds r0, r4, #1
	lsls r0, r0, #6
	ldr r1, _0806F154 @ =0x02003258
	adds r0, r0, r1
	movs r1, #0
	movs r2, #0x1f
	bl PutSpecialChar
	adds r0, r4, #2
	lsls r0, r0, #6
	ldr r1, _0806F158 @ =0x02003C3A
	adds r0, r0, r1
	ldr r1, _0806F15C @ =0x083080AC
	ldr r2, _0806F144 @ =0x00007060
	bl TmApplyTsa_t
	ldr r0, [r7, #0xc]
	adds r0, #0x1c
	adds r0, r0, r4
	ldrh r5, [r0]
_0806F09E:
	ldr r6, _0806F160 @ =0x02003588
	ldr r4, _0806F164 @ =gBattleUnitA
	adds r0, r4, #0
	adds r0, #0x58
	movs r3, #0
	ldrsh r2, [r0, r3]
	adds r0, r6, #0
	movs r1, #2
	bl PutNumberOrBlank
	adds r0, r6, #0
	adds r0, #0x80
	adds r1, r4, #0
	adds r1, #0x5e
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #2
	bl PutNumberOrBlank
	adds r0, r6, #0
	adds r0, #0xe
	adds r1, r4, #0
	adds r1, #0x64
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #2
	bl PutNumberOrBlank
	adds r0, r6, #0
	adds r0, #0x8e
	adds r1, r4, #0
	adds r1, #0x60
	movs r3, #0
	ldrsh r2, [r1, r3]
	movs r1, #2
	bl PutNumberOrBlank
	adds r4, r7, #0
	adds r4, #0xb8
	adds r0, r5, #0
	bl GetItemRangeString
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x10
	movs r2, #2
	bl Text_InsertDrawString
	movs r4, #0
	ldr r0, _0806F168 @ =0x00005278
	adds r5, r0, #0
	adds r2, r6, #0
	subs r2, #0x8c
	ldr r1, _0806F16C @ =0x00005270
	adds r3, r1, #0
	adds r1, r6, #0
	subs r1, #0x4c
_0806F110:
	adds r0, r4, r5
	strh r0, [r2]
	adds r0, r4, r3
	strh r0, [r1]
	adds r2, #2
	adds r1, #2
	adds r4, #1
	cmp r4, #7
	ble _0806F110
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806F130: .4byte 0x08307DD4
_0806F134: .4byte gBuf
_0806F138: .4byte 0x02003738
_0806F13C: .4byte 0x08308070
_0806F140: .4byte 0x02003EFA
_0806F144: .4byte 0x00007060
_0806F148: .4byte 0x083194AC
_0806F14C: .4byte 0x02003108
_0806F150: .4byte 0x0200323A
_0806F154: .4byte 0x02003258
_0806F158: .4byte 0x02003C3A
_0806F15C: .4byte 0x083080AC
_0806F160: .4byte 0x02003588
_0806F164: .4byte gBattleUnitA
_0806F168: .4byte 0x00005278
_0806F16C: .4byte 0x00005270

	thumb_func_start sub_806F170
sub_806F170: @ 0x0806F170
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	movs r0, #6
	str r0, [sp, #8]
	ldr r4, _0806F258 @ =0x02003108
	ldr r0, [r4, #0xc]
	bl GetUnitTotalSupportLevel
	movs r1, #0
	str r1, [sp, #0xc]
	cmp r0, #5
	bne _0806F194
	movs r0, #4
	str r0, [sp, #0xc]
_0806F194:
	ldr r0, [r4, #0xc]
	bl GetUnitSupportCount
	mov sl, r0
	movs r1, #0
	mov sb, r1
	movs r0, #0
	cmp r0, sl
	bge _0806F248
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r0, _0806F258 @ =0x02003108
	adds r1, r0, r1
	str r1, [sp, #0x10]
_0806F1B0:
	ldr r1, _0806F258 @ =0x02003108
	ldr r0, [r1, #0xc]
	mov r1, sb
	bl GetUnitSupportLevel
	adds r7, r0, #0
	cmp r7, #0
	beq _0806F240
	ldr r1, _0806F258 @ =0x02003108
	ldr r0, [r1, #0xc]
	mov r1, sb
	bl GetUnitSupportPid
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, [sp, #8]
	lsls r6, r0, #6
	ldr r1, _0806F25C @ =0x02003240
	mov r8, r1
	adds r5, r6, r1
	adds r0, r4, #0
	bl GetAffinityIconByPid
	adds r1, r0, #0
	adds r0, r5, #0
	movs r2, #0xa0
	lsls r2, r2, #7
	bl PutIcon
	adds r0, r4, #0
	bl GetPersonInfo
	ldrh r0, [r0]
	bl DecodeMsg
	mov r1, r8
	adds r1, #6
	adds r1, r6, r1
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	ldr r0, [sp, #0x10]
	ldr r2, [sp, #0xc]
	movs r3, #0
	bl PutDrawText
	movs r5, #2
	cmp r7, #3
	bne _0806F216
	movs r5, #4
_0806F216:
	ldr r0, [sp, #0xc]
	cmp r0, #4
	bne _0806F21E
	movs r5, #4
_0806F21E:
	mov r4, r8
	adds r4, #0x12
	adds r4, r6, r4
	adds r0, r7, #0
	bl GetSupportLevelSpecialChar
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl PutSpecialChar
	ldr r1, [sp, #8]
	adds r1, #2
	str r1, [sp, #8]
	ldr r0, [sp, #0x10]
	adds r0, #8
	str r0, [sp, #0x10]
_0806F240:
	movs r1, #1
	add sb, r1
	cmp sb, sl
	blt _0806F1B0
_0806F248:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806F258: .4byte 0x02003108
_0806F25C: .4byte 0x02003240

	thumb_func_start sub_806F260
sub_806F260: @ 0x0806F260
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	mov sb, r0
	adds r6, r1, #0
	mov sl, r2
	adds r1, r3, #0
	ldr r0, _0806F314 @ =0x02003108
	ldr r0, [r0, #0xc]
	adds r0, #0x26
	adds r0, r0, r1
	ldrb r7, [r0]
	lsls r4, r2, #5
	adds r0, r4, r6
	lsls r0, r0, #1
	ldr r2, _0806F318 @ =0x02003238
	mov r8, r2
	add r0, r8
	adds r1, #0x70
	movs r2, #0xa0
	lsls r2, r2, #7
	bl PutIcon
	movs r5, #2
	cmp r7, #0xfa
	ble _0806F29C
	movs r5, #4
_0806F29C:
	adds r4, #5
	adds r4, r4, r6
	lsls r4, r4, #1
	add r4, r8
	adds r0, r7, #0
	bl GetWeaponLevelSpecialCharFromExp
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl PutSpecialChar
	cmp r7, #0
	beq _0806F2BA
	subs r7, #1
_0806F2BA:
	mov r0, sb
	lsls r5, r0, #1
	add r5, sb
	lsls r5, r5, #1
	ldr r2, _0806F31C @ =0x00000401
	adds r5, r5, r2
	mov r4, sl
	adds r4, #1
	lsls r4, r4, #5
	adds r4, #3
	adds r4, r4, r6
	lsls r4, r4, #1
	ldr r0, _0806F320 @ =0x02003C38
	adds r4, r4, r0
	movs r6, #0xc0
	lsls r6, r6, #7
	movs r0, #0x22
	str r0, [sp]
	adds r0, r7, #0
	movs r1, #0x32
	bl __modsi3
	adds r1, r0, #0
	lsls r0, r1, #5
	adds r0, r0, r1
	movs r1, #0x30
	bl __divsi3
	str r0, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	adds r0, r5, #0
	movs r1, #5
	adds r2, r4, #0
	adds r3, r6, #0
	bl sub_806E998
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806F314: .4byte 0x02003108
_0806F318: .4byte 0x02003238
_0806F31C: .4byte 0x00000401
_0806F320: .4byte 0x02003C38

	thumb_func_start sub_806F324
sub_806F324: @ 0x0806F324
	push {r4, lr}
	ldr r0, _0806F384 @ =0x08307E50
	ldr r4, _0806F388 @ =gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, _0806F38C @ =0x02003738
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl TmApplyTsa_t
	ldr r0, _0806F390 @ =0x02003108
	ldr r0, [r0, #0xc]
	bl UnitKnowsMagic
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0806F398
	ldr r0, _0806F394 @ =0x0831955C
	bl sub_806EB00
	movs r0, #0
	movs r1, #1
	movs r2, #1
	movs r3, #5
	bl sub_806F260
	movs r0, #1
	movs r1, #1
	movs r2, #3
	movs r3, #6
	bl sub_806F260
	movs r0, #2
	movs r1, #9
	movs r2, #1
	movs r3, #7
	bl sub_806F260
	movs r0, #3
	movs r1, #9
	movs r2, #3
	movs r3, #4
	bl sub_806F260
	b _0806F3CE
	.align 2, 0
_0806F384: .4byte 0x08307E50
_0806F388: .4byte gBuf
_0806F38C: .4byte 0x02003738
_0806F390: .4byte 0x02003108
_0806F394: .4byte 0x0831955C
_0806F398:
	ldr r0, _0806F3D8 @ =0x0831950C
	bl sub_806EB00
	movs r0, #0
	movs r1, #1
	movs r2, #1
	movs r3, #0
	bl sub_806F260
	movs r0, #1
	movs r1, #1
	movs r2, #3
	movs r3, #1
	bl sub_806F260
	movs r0, #2
	movs r1, #9
	movs r2, #1
	movs r3, #2
	bl sub_806F260
	movs r0, #3
	movs r1, #9
	movs r2, #3
	movs r3, #3
	bl sub_806F260
_0806F3CE:
	bl sub_806F170
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806F3D8: .4byte 0x0831950C

	thumb_func_start sub_806F3DC
sub_806F3DC: @ 0x0806F3DC
	push {r4, r5, lr}
	sub sp, #0x18
	adds r4, r0, #0
	mov r1, sp
	ldr r0, _0806F41C @ =0x083195B8
	ldm r0!, {r2, r3, r5}
	stm r1!, {r2, r3, r5}
	ldr r0, [r0]
	str r0, [r1]
	movs r5, #0
	str r5, [sp, #0x10]
	add r0, sp, #0x10
	ldr r1, _0806F420 @ =0x02003238
	ldr r2, _0806F424 @ =0x01000140
	bl CpuFastSet
	str r5, [sp, #0x14]
	add r0, sp, #0x14
	ldr r1, _0806F428 @ =0x02003C38
	ldr r2, _0806F42C @ =0x01000120
	bl CpuFastSet
	lsls r4, r4, #2
	mov r1, sp
	adds r0, r1, r4
	ldr r0, [r0]
	bl _call_via_r0
	add sp, #0x18
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806F41C: .4byte 0x083195B8
_0806F420: .4byte 0x02003238
_0806F424: .4byte 0x01000140
_0806F428: .4byte 0x02003C38
_0806F42C: .4byte 0x01000120

	thumb_func_start sub_806F430
sub_806F430: @ 0x0806F430
	push {r4, r5, r6, r7, lr}
	adds r6, r1, #0
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r5, #0xc0
	ands r5, r0
	adds r4, r0, #0
	ldr r7, _0806F46C @ =0x0203D3DC
_0806F442:
	adds r4, r4, r6
	movs r0, #0x3f
	ands r4, r0
	adds r0, r5, r4
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0806F442
	ldr r0, [r1]
	cmp r0, #0
	beq _0806F442
	ldrh r0, [r1, #0xc]
	ldrh r2, [r7, #2]
	ands r0, r2
	cmp r0, #0
	bne _0806F442
	adds r0, r1, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0806F46C: .4byte 0x0203D3DC

	thumb_func_start sub_806F470
sub_806F470: @ 0x0806F470
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldr r0, _0806F4F0 @ =0x02021BA0
	movs r1, #0x12
	movs r2, #0x12
	movs r3, #0
	bl TmFillRect_t
	ldr r0, _0806F4F4 @ =0x020223A0
	movs r1, #0x12
	movs r2, #0x12
	movs r3, #0
	bl TmFillRect_t
	ldr r0, _0806F4F8 @ =0x02022BA0
	movs r1, #0x12
	movs r2, #0x12
	movs r3, #0
	bl TmFillRect_t
	ldr r6, _0806F4FC @ =0x08677510
	adds r4, r7, #0
	adds r4, #0x4c
	movs r1, #0
	ldrsh r0, [r4, r1]
	adds r0, r0, r6
	movs r5, #0
	ldrsb r5, [r0, r5]
	cmp r5, #0x7f
	bne _0806F4C8
	adds r0, r7, #0
	adds r0, #0x4a
	movs r2, #0
	ldrsh r0, [r0, r2]
	bl sub_806F3DC
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	movs r1, #0
	ldrsh r0, [r4, r1]
	adds r0, r0, r6
	movs r5, #0
	ldrsb r5, [r0, r5]
_0806F4C8:
	adds r1, r7, #0
	adds r1, #0x52
	movs r0, #0x20
	ldrh r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0806F4D8
	rsbs r5, r5, #0
_0806F4D8:
	adds r2, r5, #0
	cmp r5, #0
	bge _0806F4E0
	rsbs r2, r5, #0
_0806F4E0:
	movs r0, #0x12
	subs r6, r0, r2
	cmp r5, #0
	bge _0806F500
	movs r4, #0
	rsbs r5, r5, #0
	b _0806F504
	.align 2, 0
_0806F4F0: .4byte 0x02021BA0
_0806F4F4: .4byte 0x020223A0
_0806F4F8: .4byte 0x02022BA0
_0806F4FC: .4byte 0x08677510
_0806F500:
	adds r4, r5, #0
	movs r5, #0
_0806F504:
	lsls r5, r5, #1
	ldr r0, _0806F56C @ =0x02003238
	adds r0, r5, r0
	lsls r4, r4, #1
	ldr r1, _0806F570 @ =0x02021BA0
	adds r1, r4, r1
	adds r2, r6, #0
	movs r3, #0x12
	bl TmCopyRect_t
	ldr r0, _0806F574 @ =0x02003738
	adds r0, r5, r0
	ldr r1, _0806F578 @ =0x020223A0
	adds r1, r4, r1
	adds r2, r6, #0
	movs r3, #0x12
	bl TmCopyRect_t
	ldr r0, _0806F57C @ =0x02003C38
	adds r5, r5, r0
	ldr r0, _0806F580 @ =0x02022BA0
	adds r4, r4, r0
	adds r0, r5, #0
	adds r1, r4, #0
	adds r2, r6, #0
	movs r3, #0x12
	bl TmCopyRect_t
	movs r0, #7
	bl EnableBgSync
	adds r0, r7, #0
	adds r0, #0x4c
	ldrh r1, [r0]
	adds r1, #1
	strh r1, [r0]
	ldr r1, _0806F584 @ =0x08677510
	movs r2, #0
	ldrsh r0, [r0, r2]
	adds r0, r0, r1
	movs r5, #0
	ldrsb r5, [r0, r5]
	movs r0, #0x80
	rsbs r0, r0, #0
	cmp r5, r0
	bne _0806F566
	adds r0, r7, #0
	bl Proc_Break
_0806F566:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806F56C: .4byte 0x02003238
_0806F570: .4byte 0x02021BA0
_0806F574: .4byte 0x02003738
_0806F578: .4byte 0x020223A0
_0806F57C: .4byte 0x02003C38
_0806F580: .4byte 0x02022BA0
_0806F584: .4byte 0x08677510

	thumb_func_start sub_806F588
sub_806F588: @ 0x0806F588
	ldr r1, _0806F590 @ =0x02003108
	movs r0, #0
	strb r0, [r1, #8]
	bx lr
	.align 2, 0
_0806F590: .4byte 0x02003108

	thumb_func_start sub_806F594
sub_806F594: @ 0x0806F594
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r1
	adds r6, r2, #0
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	ldr r7, _0806F5EC @ =0x08677520
	adds r0, r7, #0
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	bne _0806F5E2
	ldr r0, _0806F5F0 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0806F5C0
	movs r0, #0x6f
	bl m4aSongNumStart
_0806F5C0:
	adds r0, r7, #0
	adds r1, r6, #0
	bl SpawnProcLocking
	adds r1, r0, #0
	adds r0, #0x4c
	strh r4, [r0]
	subs r0, #2
	mov r2, r8
	strh r2, [r0]
	adds r0, #8
	strh r5, [r0]
	ldr r0, _0806F5F4 @ =0x02003108
	strh r5, [r0, #2]
	str r4, [r0, #0x14]
	movs r1, #1
	strb r1, [r0, #8]
_0806F5E2:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806F5EC: .4byte 0x08677520
_0806F5F0: .4byte gPlaySt
_0806F5F4: .4byte 0x02003108

	thumb_func_start sub_806F5F8
sub_806F5F8: @ 0x0806F5F8
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r1, _0806F66C @ =0x02003108
	movs r6, #0
	movs r4, #1
	movs r0, #1
	strb r0, [r1, #8]
	adds r1, r5, #0
	adds r1, #0x4c
	movs r0, #4
	strh r0, [r1]
	ldr r3, _0806F670 @ =gDispIo
	movs r2, #4
	rsbs r2, r2, #0
	adds r0, r2, #0
	ldrb r1, [r3, #0xc]
	ands r0, r1
	orrs r0, r4
	strb r0, [r3, #0xc]
	movs r0, #3
	ldrb r1, [r3, #0x10]
	orrs r0, r1
	strb r0, [r3, #0x10]
	adds r0, r2, #0
	ldrb r1, [r3, #0x14]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	ands r2, r0
	strb r2, [r3, #0x18]
	ldr r0, _0806F674 @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	ldr r1, _0806F678 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xb8
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	adds r3, #0x3d
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r3]
	ands r0, r1
	strb r0, [r3]
	ldr r0, [r5, #0x38]
	cmp r0, #0
	ble _0806F67C
	str r6, [r5, #0x3c]
	movs r0, #0x3c
	rsbs r0, r0, #0
	b _0806F680
	.align 2, 0
_0806F66C: .4byte 0x02003108
_0806F670: .4byte gDispIo
_0806F674: .4byte 0x0000FFE0
_0806F678: .4byte 0x0000E0FF
_0806F67C:
	str r6, [r5, #0x3c]
	movs r0, #0x3c
_0806F680:
	str r0, [r5, #0x40]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_806F688
sub_806F688: @ 0x0806F688
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r3, _0806F700 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r5, r6, #0
	adds r5, #0x4c
	ldrh r1, [r5]
	adds r0, r3, #0
	adds r0, #0x44
	movs r2, #0
	strb r1, [r0]
	movs r0, #0x10
	subs r0, r0, r1
	adds r1, r3, #0
	adds r1, #0x45
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r2, [r0]
	ldr r4, _0806F704 @ =0x02003108
	ldr r0, [r4, #0x10]
	movs r1, #6
	ldrsh r2, [r4, r1]
	adds r2, #0x8a
	movs r1, #0x50
	bl sub_80610F0
	ldr r1, [r6, #0x3c]
	ldr r2, [r6, #0x40]
	movs r0, #0
	ldrsh r3, [r5, r0]
	movs r0, #0x10
	str r0, [sp]
	movs r0, #2
	bl Interpolate
	strh r0, [r4, #6]
	ldrh r0, [r5]
	adds r0, #3
	strh r0, [r5]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x10
	ble _0806F6F6
	adds r0, r6, #0
	bl Proc_Break
_0806F6F6:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806F700: .4byte gDispIo
_0806F704: .4byte 0x02003108

	thumb_func_start sub_806F708
sub_806F708: @ 0x0806F708
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x4c
	movs r5, #0
	movs r0, #1
	strh r0, [r1]
	ldr r3, _0806F764 @ =gDispIo
	movs r2, #4
	rsbs r2, r2, #0
	adds r0, r2, #0
	ldrb r1, [r3, #0xc]
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strb r0, [r3, #0xc]
	movs r0, #3
	ldrb r1, [r3, #0x10]
	orrs r0, r1
	strb r0, [r3, #0x10]
	adds r0, r2, #0
	ldrb r1, [r3, #0x14]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strb r0, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	ands r2, r0
	strb r2, [r3, #0x18]
	ldr r0, _0806F768 @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	ldr r1, _0806F76C @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xb8
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	ldr r0, [r4, #0x38]
	cmp r0, #0
	ble _0806F770
	movs r0, #0x3c
	b _0806F774
	.align 2, 0
_0806F764: .4byte gDispIo
_0806F768: .4byte 0x0000FFE0
_0806F76C: .4byte 0x0000E0FF
_0806F770:
	movs r0, #0x3c
	rsbs r0, r0, #0
_0806F774:
	str r0, [r4, #0x3c]
	str r5, [r4, #0x40]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806F780
sub_806F780: @ 0x0806F780
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r4, _0806F7F4 @ =gDispIo
	adds r2, r4, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r5, r6, #0
	adds r5, #0x4c
	ldrh r2, [r5]
	movs r0, #0x10
	subs r0, r0, r2
	adds r1, r4, #0
	adds r1, #0x44
	movs r3, #0
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r3, [r0]
	ldr r4, _0806F7F8 @ =0x02003108
	ldr r0, [r4, #0x10]
	movs r1, #6
	ldrsh r2, [r4, r1]
	adds r2, #0x8a
	movs r1, #0x50
	bl sub_80610F0
	ldr r1, [r6, #0x3c]
	ldr r2, [r6, #0x40]
	movs r0, #0
	ldrsh r3, [r5, r0]
	movs r0, #0x10
	str r0, [sp]
	movs r0, #5
	bl Interpolate
	strh r0, [r4, #6]
	ldrh r0, [r5]
	adds r0, #3
	strh r0, [r5]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xf
	ble _0806F7EC
	adds r0, r6, #0
	bl Proc_Break
_0806F7EC:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806F7F4: .4byte gDispIo
_0806F7F8: .4byte 0x02003108

	thumb_func_start sub_806F7FC
sub_806F7FC: @ 0x0806F7FC
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x4a
	movs r1, #0
	ldrsh r0, [r0, r1]
	bl GetUnit
	ldr r1, _0806F820 @ =0x02003108
	str r0, [r1, #0xc]
	movs r0, #0
	bl sub_806FFDC
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806F820: .4byte 0x02003108

	thumb_func_start sub_806F824
sub_806F824: @ 0x0806F824
	push {r4, r5, lr}
	ldr r4, _0806F8A8 @ =0x02003108
	ldr r0, [r4, #0x10]
	cmp r0, #0
	beq _0806F836
	movs r1, #0x50
	movs r2, #0x8a
	bl sub_80610F0
_0806F836:
	ldr r3, _0806F8AC @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0xc]
	movs r2, #3
	ldrb r0, [r3, #0x10]
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r5, [r3, #0x14]
	ands r1, r5
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	orrs r2, r0
	strb r2, [r3, #0x18]
	adds r2, r3, #0
	adds r2, #0x3c
	ldr r0, _0806F8B0 @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	ldr r1, _0806F8B4 @ =0x0000E0FF
	ands r0, r1
	movs r5, #0x80
	lsls r5, r5, #4
	adds r1, r5, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r2, #0
	movs r0, #6
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r2, [r0]
	strb r2, [r4, #8]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806F8A8: .4byte 0x02003108
_0806F8AC: .4byte gDispIo
_0806F8B0: .4byte 0x0000FFE0
_0806F8B4: .4byte 0x0000E0FF

	thumb_func_start sub_806F8B8
sub_806F8B8: @ 0x0806F8B8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r1, r2, #0
	ldr r0, _0806F8E8 @ =0x08677538
	bl SpawnProcLocking
	movs r1, #0xb
	ldrsb r1, [r4, r1]
	adds r2, r0, #0
	adds r2, #0x4a
	strh r1, [r2]
	str r5, [r0, #0x38]
	ldr r0, _0806F8EC @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0806F8E2
	movs r0, #0xc8
	bl m4aSongNumStart
_0806F8E2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806F8E8: .4byte 0x08677538
_0806F8EC: .4byte gPlaySt

	thumb_func_start sub_806F8F0
sub_806F8F0: @ 0x0806F8F0
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, _0806F948 @ =0x02003108
	movs r2, #4
	ldrsh r1, [r0, r2]
	adds r1, #0x69
	movs r3, #6
	ldrsh r2, [r0, r3]
	adds r2, #5
	ldr r3, _0806F94C @ =0x08677578
	ldr r4, _0806F950 @ =0x0867758C
	lsls r0, r5, #1
	adds r0, r0, r4
	ldrh r0, [r0]
	movs r4, #0xf9
	lsls r4, r4, #6
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #4
	bl PutSprite
	bl GetGameTime
	lsrs r0, r0, #2
	movs r1, #0xf
	ands r0, r1
	lsls r5, r5, #6
	lsls r0, r0, #1
	ldr r1, _0806F954 @ =0x083087C8
	adds r0, r0, r1
	adds r5, r5, r0
	ldr r1, _0806F958 @ =0x02021970
	adds r0, r5, #0
	movs r2, #0xb
	bl CpuSet
	bl EnablePalSync
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806F948: .4byte 0x02003108
_0806F94C: .4byte 0x08677578
_0806F950: .4byte 0x0867758C
_0806F954: .4byte 0x083087C8
_0806F958: .4byte 0x02021970

	thumb_func_start sub_806F95C
sub_806F95C: @ 0x0806F95C
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, sb
	mov r4, r8
	push {r4, r5, r6}
	sub sp, #4
	mov sb, r0
	ldr r4, _0806F9EC @ =gSinLut
	movs r0, #0x80
	adds r0, r0, r4
	mov sl, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, sl
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #8
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	ldr r0, _0806F9F0 @ =0x02003108
	ldrb r0, [r0]
	movs r1, #0x36
	add sb, r1
	mov r2, sb
	strb r0, [r2]
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806F9EC: .4byte gSinLut
_0806F9F0: .4byte 0x02003108

	thumb_func_start sub_806F9F4
sub_806F9F4: @ 0x0806F9F4
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x36
	ldrb r0, [r5]
	bl sub_806F8F0
	ldr r1, _0806FA18 @ =0x02003108
	ldrh r0, [r1, #2]
	cmp r0, #0
	beq _0806FA1C
	movs r0, #5
	strh r0, [r4, #0x38]
	adds r0, r4, #0
	bl Proc_Break
	b _0806FA20
	.align 2, 0
_0806FA18: .4byte 0x02003108
_0806FA1C:
	ldrb r0, [r1]
	strb r0, [r5]
_0806FA20:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_806FA28
sub_806FA28: @ 0x0806FA28
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r5, _0806FAEC @ =gSinLut
	movs r0, #0x80
	adds r0, r0, r5
	mov sl, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov sb, r2
	mov r1, sb
	bl Div
	mov r8, r0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	mov r8, r0
	movs r1, #0
	ldrsh r4, [r5, r1]
	rsbs r4, r4, #0
	lsls r4, r4, #4
	movs r2, #0x38
	ldrsh r0, [r7, r2]
	lsls r0, r0, #8
	movs r1, #6
	bl __divsi3
	adds r1, r0, #0
	adds r0, r4, #0
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r5, r1]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	mov r2, sl
	movs r0, #0
	ldrsh r4, [r2, r0]
	lsls r4, r4, #4
	movs r1, #0x38
	ldrsh r0, [r7, r1]
	lsls r0, r0, #8
	movs r1, #6
	bl __divsi3
	adds r1, r0, #0
	adds r0, r4, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #8
	mov r1, r8
	adds r2, r6, #0
	adds r3, r5, #0
	bl SetObjAffine
	adds r0, r7, #0
	adds r0, #0x36
	ldrb r0, [r0]
	bl sub_806F8F0
	ldrh r0, [r7, #0x38]
	subs r0, #1
	strh r0, [r7, #0x38]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0806FADA
	movs r0, #1
	strh r0, [r7, #0x38]
	adds r0, r7, #0
	bl Proc_Break
_0806FADA:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806FAEC: .4byte gSinLut

	thumb_func_start sub_806FAF0
sub_806FAF0: @ 0x0806FAF0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r5, _0806FBB8 @ =gSinLut
	movs r0, #0x80
	adds r0, r0, r5
	mov sl, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov sb, r2
	mov r1, sb
	bl Div
	mov r8, r0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	mov r8, r0
	movs r1, #0
	ldrsh r4, [r5, r1]
	rsbs r4, r4, #0
	lsls r4, r4, #4
	movs r2, #0x38
	ldrsh r0, [r7, r2]
	lsls r0, r0, #8
	movs r1, #6
	bl __divsi3
	adds r1, r0, #0
	adds r0, r4, #0
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r5, r1]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	mov r2, sl
	movs r0, #0
	ldrsh r4, [r2, r0]
	lsls r4, r4, #4
	movs r1, #0x38
	ldrsh r0, [r7, r1]
	lsls r0, r0, #8
	movs r1, #6
	bl __divsi3
	adds r1, r0, #0
	adds r0, r4, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #8
	mov r1, r8
	adds r2, r6, #0
	adds r3, r5, #0
	bl SetObjAffine
	ldr r4, _0806FBBC @ =0x02003108
	ldrb r0, [r4]
	bl sub_806F8F0
	ldrh r0, [r7, #0x38]
	adds r0, #1
	strh r0, [r7, #0x38]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #6
	ble _0806FBA6
	ldrb r0, [r4]
	adds r1, r7, #0
	adds r1, #0x36
	strb r0, [r1]
	adds r0, r7, #0
	bl Proc_Break
_0806FBA6:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806FBB8: .4byte gSinLut
_0806FBBC: .4byte 0x02003108

	thumb_func_start sub_806FBC0
sub_806FBC0: @ 0x0806FBC0
	movs r2, #0
	movs r1, #0x65
	strh r1, [r0, #0x2a]
	movs r1, #0xc6
	strh r1, [r0, #0x2c]
	strh r2, [r0, #0x30]
	strh r2, [r0, #0x2e]
	movs r1, #4
	strh r1, [r0, #0x34]
	strh r1, [r0, #0x32]
	bx lr
	.align 2, 0

	thumb_func_start sub_806FBD8
sub_806FBD8: @ 0x0806FBD8
	adds r1, r0, #0
	ldr r2, _0806FC08 @ =0x02003108
	movs r0, #0x20
	ldrh r3, [r2, #2]
	ands r0, r3
	cmp r0, #0
	beq _0806FBEE
	movs r0, #0x1f
	strh r0, [r1, #0x32]
	movs r0, #0x5f
	strh r0, [r1, #0x2a]
_0806FBEE:
	movs r0, #0x10
	ldrh r3, [r2, #2]
	ands r0, r3
	cmp r0, #0
	beq _0806FC00
	movs r0, #0x1f
	strh r0, [r1, #0x34]
	movs r0, #0xcc
	strh r0, [r1, #0x2c]
_0806FC00:
	movs r0, #0
	strh r0, [r2, #2]
	bx lr
	.align 2, 0
_0806FC08: .4byte 0x02003108

	thumb_func_start sub_806FC0C
sub_806FC0C: @ 0x0806FC0C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r0, _0806FCE4 @ =0x00004E40
	mov sb, r0
	ldrh r1, [r7, #0x32]
	ldrh r2, [r7, #0x2e]
	adds r0, r1, r2
	strh r0, [r7, #0x2e]
	ldrh r3, [r7, #0x30]
	ldrh r2, [r7, #0x34]
	adds r0, r3, r2
	strh r0, [r7, #0x30]
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	cmp r0, #4
	ble _0806FC38
	subs r0, r1, #1
	strh r0, [r7, #0x32]
_0806FC38:
	ldrh r1, [r7, #0x34]
	movs r3, #0x34
	ldrsh r0, [r7, r3]
	cmp r0, #4
	ble _0806FC46
	subs r0, r1, #1
	strh r0, [r7, #0x34]
_0806FC46:
	bl GetGameTime
	movs r1, #3
	ands r1, r0
	cmp r1, #0
	bne _0806FC6E
	ldrh r1, [r7, #0x2a]
	movs r2, #0x2a
	ldrsh r0, [r7, r2]
	cmp r0, #0x64
	bgt _0806FC60
	adds r0, r1, #1
	strh r0, [r7, #0x2a]
_0806FC60:
	ldrh r1, [r7, #0x2c]
	movs r3, #0x2c
	ldrsh r0, [r7, r3]
	cmp r0, #0xc6
	ble _0806FC6E
	subs r0, r1, #1
	strh r0, [r7, #0x2c]
_0806FC6E:
	ldr r6, _0806FCE8 @ =0x02003108
	movs r0, #4
	ldrsh r5, [r6, r0]
	movs r1, #0x2a
	ldrsh r0, [r7, r1]
	adds r5, r5, r0
	movs r2, #6
	ldrsh r4, [r6, r2]
	adds r4, #6
	ldr r3, _0806FCEC @ =0x085C39C0
	mov r8, r3
	ldrh r1, [r7, #0x2e]
	lsrs r0, r1, #5
	movs r1, #6
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r0, #0x4a
	add r0, sb
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	adds r2, r4, #0
	mov r3, r8
	bl PutSprite
	movs r2, #4
	ldrsh r5, [r6, r2]
	movs r3, #0x2c
	ldrsh r0, [r7, r3]
	adds r5, r5, r0
	movs r0, #6
	ldrsh r4, [r6, r0]
	adds r4, #6
	ldr r6, _0806FCF0 @ =0x085C3A08
	ldrh r7, [r7, #0x30]
	lsrs r0, r7, #5
	movs r1, #6
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	adds r0, #0x4a
	add r0, sb
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	adds r2, r4, #0
	adds r3, r6, #0
	bl PutSprite
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0806FCE4: .4byte 0x00004E40
_0806FCE8: .4byte 0x02003108
_0806FCEC: .4byte 0x085C39C0
_0806FCF0: .4byte 0x085C3A08

	thumb_func_start sub_806FCF4
sub_806FCF4: @ 0x0806FCF4
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r4, _0806FD54 @ =0x02003108
	movs r0, #4
	ldrsh r1, [r4, r0]
	adds r1, #0xe3
	movs r3, #6
	ldrsh r2, [r4, r3]
	adds r2, #0xc
	ldr r5, _0806FD58 @ =Sprite_8x8
	ldrb r6, [r4, #1]
	ldr r3, _0806FD5C @ =0x00004EA4
	adds r0, r6, r3
	str r0, [sp]
	movs r0, #2
	adds r3, r5, #0
	bl PutSprite
	movs r6, #4
	ldrsh r1, [r4, r6]
	adds r1, #0xdd
	movs r0, #6
	ldrsh r2, [r4, r0]
	adds r2, #0xc
	ldr r0, _0806FD60 @ =0x00004E45
	str r0, [sp]
	movs r0, #2
	adds r3, r5, #0
	bl PutSprite
	movs r3, #4
	ldrsh r1, [r4, r3]
	adds r1, #0xd6
	movs r6, #6
	ldrsh r2, [r4, r6]
	adds r2, #0xc
	ldrb r4, [r4]
	ldr r3, _0806FD64 @ =0x00004EA5
	adds r0, r4, r3
	str r0, [sp]
	movs r0, #2
	adds r3, r5, #0
	bl PutSprite
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0806FD54: .4byte 0x02003108
_0806FD58: .4byte Sprite_8x8
_0806FD5C: .4byte 0x00004EA4
_0806FD60: .4byte 0x00004E45
_0806FD64: .4byte 0x00004EA5

	thumb_func_start sub_806FD68
sub_806FD68: @ 0x0806FD68
	push {r4, lr}
	sub sp, #4
	ldr r4, _0806FDA4 @ =0x02003108
	movs r0, #4
	ldrsh r1, [r4, r0]
	movs r0, #6
	ldrsh r2, [r4, r0]
	ldr r3, _0806FDA8 @ =0x086775D4
	movs r0, #0xb9
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #0xc
	bl PutSprite
	movs r0, #4
	ldrsh r1, [r4, r0]
	adds r1, #0x40
	movs r0, #6
	ldrsh r2, [r4, r0]
	adds r2, #0x83
	ldr r3, _0806FDAC @ =Sprite_32x16
	ldr r0, _0806FDB0 @ =0x00004E90
	str r0, [sp]
	movs r0, #0xb
	bl PutSprite
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806FDA4: .4byte 0x02003108
_0806FDA8: .4byte 0x086775D4
_0806FDAC: .4byte Sprite_32x16
_0806FDB0: .4byte 0x00004E90

	thumb_func_start sub_806FDB4
sub_806FDB4: @ 0x0806FDB4
	push {r4, r5, lr}
	sub sp, #0xc
	bl GetGameTime
	movs r2, #0
	movs r1, #0x1f
	ands r1, r0
	cmp r1, #0x13
	bhi _0806FDC8
	movs r2, #1
_0806FDC8:
	adds r5, r2, #0
	ldr r1, _0806FE70 @ =0x083195C8
	add r0, sp, #4
	movs r2, #6
	bl memcpy
	ldr r4, _0806FE74 @ =0x02003108
	movs r0, #8
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne _0806FE68
	ldrb r0, [r4]
	cmp r0, #0
	bne _0806FE30
	ldr r1, [r4, #0xc]
	movs r0, #0x10
	ldrh r1, [r1, #0xc]
	ands r0, r1
	cmp r0, #0
	beq _0806FE30
	movs r0, #0x78
	movs r1, #0x28
	movs r2, #1
	bl PutSysArrow
	movs r0, #0x78
	movs r1, #0x38
	movs r2, #1
	bl PutSysArrow
	cmp r5, #0
	beq _0806FE30
	ldr r3, _0806FE78 @ =Sprite_8x8
	ldr r0, [r4, #0xc]
	ldrb r0, [r0, #0x19]
	lsrs r0, r0, #6
	lsls r0, r0, #1
	mov r1, sp
	adds r1, r1, r0
	adds r1, #4
	movs r0, #0xf
	ldrh r1, [r1]
	ands r0, r1
	lsls r0, r0, #0xc
	ldr r1, _0806FE7C @ =0x00000803
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #4
	movs r1, #0xb8
	movs r2, #0x4e
	bl PutSprite
_0806FE30:
	ldr r0, _0806FE74 @ =0x02003108
	ldr r1, [r0, #0xc]
	movs r0, #0x20
	ldrh r2, [r1, #0xc]
	ands r0, r2
	cmp r0, #0
	beq _0806FE68
	cmp r5, #0
	beq _0806FE68
	ldr r3, _0806FE78 @ =Sprite_8x8
	ldrb r1, [r1, #0x19]
	lsrs r0, r1, #6
	lsls r0, r0, #1
	mov r1, sp
	adds r1, r1, r0
	adds r1, #4
	movs r0, #0xf
	ldrh r1, [r1]
	ands r0, r1
	lsls r0, r0, #0xc
	ldr r1, _0806FE7C @ =0x00000803
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #4
	movs r1, #0x20
	movs r2, #0x56
	bl PutSprite
_0806FE68:
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806FE70: .4byte 0x083195C8
_0806FE74: .4byte 0x02003108
_0806FE78: .4byte Sprite_8x8
_0806FE7C: .4byte 0x00000803

	thumb_func_start sub_806FE80
sub_806FE80: @ 0x0806FE80
	push {r4, lr}
	ldr r3, _0806FEDC @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r3, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r3, #1]
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x44
	movs r2, #0
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	movs r4, #0x46
	movs r0, #0x10
	strb r0, [r4, r3]
	ldr r0, _0806FEE0 @ =0x0000FFE0
	ldrh r4, [r3, #0x3c]
	ands r0, r4
	strh r0, [r3, #0x3c]
	movs r0, #0x20
	ldrb r3, [r1]
	orrs r0, r3
	strb r0, [r1]
	ldr r0, _0806FEE4 @ =gPal
	strh r2, [r0]
	bl EnablePalSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0806FEDC: .4byte gDispIo
_0806FEE0: .4byte 0x0000FFE0
_0806FEE4: .4byte gPal

	thumb_func_start sub_806FEE8
sub_806FEE8: @ 0x0806FEE8
	push {r4, r5, lr}
	sub sp, #0x18
	adds r5, r0, #0
	ldr r1, _0806FFA0 @ =0x083195CE
	mov r0, sp
	movs r2, #0x18
	bl memcpy
	mov r0, sp
	bl InitBgs
	movs r0, #0x80
	lsls r0, r0, #3
	bl SetBlankChr
	ldr r0, _0806FFA4 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #4
	bl EnableBgSync
	bl ApplySystemGraphics
	bl ApplyUnitSpritePalettes
	ldr r1, _0806FFA8 @ =0x0600B000
	movs r2, #1
	rsbs r2, r2, #0
	movs r0, #0
	bl sub_806EA24
	ldr r0, _0806FFAC @ =0x083080D0
	ldr r1, _0806FFB0 @ =0x06014800
	bl Decompress
	movs r0, #4
	bl ApplyIconPalettes
	movs r0, #6
	bl sub_80412DC
	movs r0, #1
	movs r1, #0x13
	bl ApplyIconPalette
	ldr r0, _0806FFB4 @ =0x08307CEC
	ldr r4, _0806FFB8 @ =gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, _0806FFBC @ =gBg1Tm
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r4, #0
	bl TmApplyTsa_t
	ldr r0, _0806FFC0 @ =0x08307ED4
	ldr r1, _0806FFC4 @ =0x06008C00
	bl Decompress
	ldr r0, _0806FFC8 @ =0x08308050
	movs r1, #0xe0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0806FFCC @ =0x02021728
	movs r2, #0x88
	lsls r2, r2, #2
	adds r1, r0, r2
	movs r2, #8
	bl CpuFastSet
	movs r0, #1
	movs r1, #0x14
	bl ApplyIconPalette
	ldr r0, _0806FFD0 @ =0x08308920
	ldr r1, _0806FFD4 @ =0x06004E00
	bl Decompress
	ldr r1, _0806FFD8 @ =0x02003108
	movs r0, #0
	str r0, [r1, #0x10]
	adds r0, r5, #0
	bl sub_806F824
	add sp, #0x18
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0806FFA0: .4byte 0x083195CE
_0806FFA4: .4byte gBg2Tm
_0806FFA8: .4byte 0x0600B000
_0806FFAC: .4byte 0x083080D0
_0806FFB0: .4byte 0x06014800
_0806FFB4: .4byte 0x08307CEC
_0806FFB8: .4byte gBuf
_0806FFBC: .4byte gBg1Tm
_0806FFC0: .4byte 0x08307ED4
_0806FFC4: .4byte 0x06008C00
_0806FFC8: .4byte 0x08308050
_0806FFCC: .4byte 0x02021728
_0806FFD0: .4byte 0x08308920
_0806FFD4: .4byte 0x06004E00
_0806FFD8: .4byte 0x02003108

	thumb_func_start sub_806FFDC
sub_806FFDC: @ 0x0806FFDC
	push {r4, r5, lr}
	ldr r2, _08070000 @ =0x02003108
	ldr r1, [r2, #0xc]
	movs r0, #0xc0
	ldrb r1, [r1, #0xb]
	ands r0, r1
	cmp r0, #0
	beq _0806FFF8
	ldr r1, _08070004 @ =gBmSt
	movs r0, #0x40
	ldrb r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _08070008
_0806FFF8:
	movs r0, #3
	strb r0, [r2, #1]
	b _08070016
	.align 2, 0
_08070000: .4byte 0x02003108
_08070004: .4byte gBmSt
_08070008:
	movs r0, #2
	strb r0, [r2, #1]
	ldrb r0, [r2]
	cmp r0, #2
	bne _08070016
	movs r0, #1
	strb r0, [r2]
_08070016:
	bl ResetText
	bl InitIcons
	bl sub_806EAF0
	ldr r5, _08070088 @ =0x02022B4A
	ldr r4, _0807008C @ =0x02003108
	ldr r0, [r4, #0xc]
	bl GetUnitFid
	adds r1, r0, #0
	movs r2, #0x9c
	lsls r2, r2, #3
	adds r0, r5, #0
	movs r3, #0xd
	bl PutFace80x72
	bl MU_EndAll
	ldr r0, [r4, #0xc]
	movs r1, #0x50
	movs r2, #0x8a
	bl sub_805F93C
	str r0, [r4, #0x10]
	bl sub_806EB48
	ldrb r0, [r4]
	bl sub_806F3DC
	ldr r0, _08070090 @ =0x02003238
	ldr r1, _08070094 @ =0x02021BA0
	movs r2, #0x12
	movs r3, #0x12
	bl TmCopyRect_t
	ldr r0, _08070098 @ =0x02003738
	ldr r1, _0807009C @ =0x020223A0
	movs r2, #0x12
	movs r3, #0x12
	bl TmCopyRect_t
	ldr r0, _080700A0 @ =0x02003C38
	adds r5, #0x56
	adds r1, r5, #0
	movs r2, #0x12
	movs r3, #0x12
	bl TmCopyRect_t
	movs r0, #7
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08070088: .4byte 0x02022B4A
_0807008C: .4byte 0x02003108
_08070090: .4byte 0x02003238
_08070094: .4byte 0x02021BA0
_08070098: .4byte 0x02003738
_0807009C: .4byte 0x020223A0
_080700A0: .4byte 0x02003C38

	thumb_func_start sub_80700A4
sub_80700A4: @ 0x080700A4
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r1, _08070128 @ =gKeySt
	ldr r2, [r1]
	movs r0, #2
	ldrh r3, [r2, #8]
	ands r0, r3
	adds r3, r1, #0
	cmp r0, #0
	beq _0807013C
	ldr r3, _0807012C @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r4, [r3, #1]
	ands r0, r4
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r3, #1]
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x44
	movs r2, #0
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r4, r3, #0
	adds r4, #0x46
	movs r0, #0x10
	strb r0, [r4]
	ldr r0, _08070130 @ =0x0000FFE0
	ldrh r4, [r3, #0x3c]
	ands r0, r4
	strh r0, [r3, #0x3c]
	movs r0, #0x20
	ldrb r3, [r1]
	orrs r0, r3
	strb r0, [r1]
	ldr r0, _08070134 @ =gPal
	strh r2, [r0]
	bl EnablePalSync
	adds r0, r5, #0
	bl Proc_Break
	ldr r0, _08070138 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _08070120
	b _08070220
_08070120:
	movs r0, #0x6b
	bl m4aSongNumStart
	b _08070220
	.align 2, 0
_08070128: .4byte gKeySt
_0807012C: .4byte gDispIo
_08070130: .4byte 0x0000FFE0
_08070134: .4byte gPal
_08070138: .4byte gPlaySt
_0807013C:
	ldrh r1, [r2, #6]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _08070160
	ldr r4, _0807015C @ =0x02003108
	ldrb r1, [r4, #1]
	ldrb r2, [r4]
	adds r0, r2, r1
	subs r0, #1
	bl __modsi3
	strb r0, [r4]
	ldrb r1, [r4]
	movs r0, #0x20
	b _0807017E
	.align 2, 0
_0807015C: .4byte 0x02003108
_08070160:
	movs r6, #0x10
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _0807018C
	ldr r4, _08070188 @ =0x02003108
	ldrb r1, [r4, #1]
	ldrb r3, [r4]
	adds r0, r3, r1
	adds r0, #1
	bl __modsi3
	strb r0, [r4]
	ldrb r1, [r4]
	movs r0, #0x10
_0807017E:
	adds r2, r5, #0
	bl sub_806F594
	b _08070220
	.align 2, 0
_08070188: .4byte 0x02003108
_0807018C:
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080701AC
	ldr r0, _080701A8 @ =0x02003108
	ldr r0, [r0, #0xc]
	movs r4, #1
	rsbs r4, r4, #0
	adds r1, r4, #0
	bl sub_806F430
	adds r2, r0, #0
	adds r1, r4, #0
	b _080701F4
	.align 2, 0
_080701A8: .4byte 0x02003108
_080701AC:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _080701C8
	ldr r0, _080701C4 @ =0x02003108
	ldr r0, [r0, #0xc]
	movs r1, #1
	bl sub_806F430
	adds r2, r0, #0
	movs r1, #1
	b _080701F4
	.align 2, 0
_080701C4: .4byte 0x02003108
_080701C8:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08070200
	ldr r4, _080701FC @ =0x02003108
	ldr r2, [r4, #0xc]
	ldrb r0, [r2, #0x19]
	cmp r0, #0
	beq _08070200
	bl GetUnit
	adds r2, r0, #0
	ldr r1, [r4, #0xc]
	adds r0, r6, #0
	ldrh r1, [r1, #0xc]
	ands r0, r1
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, #0
	beq _080701F2
	movs r1, #1
_080701F2:
	adds r0, r2, #0
_080701F4:
	adds r2, r5, #0
	bl sub_806F8B8
	b _08070220
	.align 2, 0
_080701FC: .4byte 0x02003108
_08070200:
	ldr r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08070220
	adds r0, r5, #0
	movs r1, #0
	bl Proc_Goto
	ldr r0, _08070228 @ =0x02003108
	ldrb r0, [r0]
	adds r1, r5, #0
	bl sub_807030C
_08070220:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08070228: .4byte 0x02003108

	thumb_func_start sub_807022C
sub_807022C: @ 0x0807022C
	push {r4, lr}
	ldr r3, _08070258 @ =gPlaySt
	movs r1, #0xfc
	ldrb r0, [r3, #0x14]
	ands r1, r0
	ldr r2, _0807025C @ =0x02003108
	movs r0, #3
	ldrb r4, [r2]
	ands r0, r4
	orrs r1, r0
	strb r1, [r3, #0x14]
	ldr r1, _08070260 @ =0x0203D3DC
	ldr r0, [r2, #0xc]
	ldrb r0, [r0, #0xb]
	strb r0, [r1, #1]
	movs r0, #0
	bl SetOnVMatch
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08070258: .4byte gPlaySt
_0807025C: .4byte 0x02003108
_08070260: .4byte 0x0203D3DC

	thumb_func_start sub_8070264
sub_8070264: @ 0x08070264
	push {lr}
	bl sub_8070CA8
	ldr r1, _08070274 @ =0x02003108
	str r0, [r1, #0x14]
	pop {r0}
	bx r0
	.align 2, 0
_08070274: .4byte 0x02003108

	thumb_func_start sub_8070278
sub_8070278: @ 0x08070278
	push {r4, lr}
	ldr r0, _080702AC @ =0x02003108
	movs r1, #6
	ldrsh r4, [r0, r1]
	rsbs r4, r4, #0
	movs r0, #0xff
	ands r4, r0
	movs r0, #0
	movs r1, #0
	adds r2, r4, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	adds r2, r4, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	adds r2, r4, #0
	bl SetBgOffset
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080702AC: .4byte 0x02003108

	thumb_func_start sub_80702B0
sub_80702B0: @ 0x080702B0
	push {lr}
	bl sub_806EABC
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80702BC
sub_80702BC: @ 0x080702BC
	push {r4, r5, r6, r7, lr}
	adds r6, r1, #0
	ldr r2, _08070300 @ =0x02003108
	movs r5, #0
	movs r3, #0
	strh r3, [r2, #4]
	strh r3, [r2, #6]
	ldr r4, _08070304 @ =gPlaySt
	movs r1, #3
	ldrb r7, [r4, #0x14]
	ands r1, r7
	strb r1, [r2]
	str r0, [r2, #0xc]
	str r3, [r2, #0x14]
	strh r3, [r2, #2]
	strb r5, [r2, #8]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl sub_8084BB8
	ldrb r4, [r4, #0x1d]
	lsls r0, r4, #0x1e
	cmp r0, #0
	blt _080702F2
	movs r0, #0x6a
	bl m4aSongNumStart
_080702F2:
	ldr r0, _08070308 @ =0x08677680
	adds r1, r6, #0
	bl SpawnProcLocking
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08070300: .4byte 0x02003108
_08070304: .4byte gPlaySt
_08070308: .4byte 0x08677680

	thumb_func_start sub_807030C
sub_807030C: @ 0x0807030C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	movs r1, #1
	rsbs r1, r1, #0
	movs r0, #0
	bl sub_8070E70
	ldr r1, _08070334 @ =0x02003108
	ldr r0, [r1, #0x14]
	cmp r0, #0
	bne _08070354
	cmp r4, #1
	beq _08070348
	cmp r4, #1
	bgt _08070338
	cmp r4, #0
	beq _0807033E
	b _08070354
	.align 2, 0
_08070334: .4byte 0x02003108
_08070338:
	cmp r4, #2
	beq _08070350
	b _08070354
_0807033E:
	ldr r0, _08070344 @ =0x08677824
	b _08070352
	.align 2, 0
_08070344: .4byte 0x08677824
_08070348:
	ldr r0, _0807034C @ =0x08677A00
	b _08070352
	.align 2, 0
_0807034C: .4byte 0x08677A00
_08070350:
	ldr r0, _08070364 @ =0x08677BA4
_08070352:
	str r0, [r1, #0x14]
_08070354:
	ldr r0, _08070368 @ =0x02003108
	ldr r0, [r0, #0x14]
	adds r1, r5, #0
	bl sub_80709E8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08070364: .4byte 0x08677BA4
_08070368: .4byte 0x02003108

	thumb_func_start sub_807036C
sub_807036C: @ 0x0807036C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08070394 @ =0x02003108
	ldr r0, [r0, #0xc]
	ldr r1, [r4, #0x2c]
	ldrh r1, [r1, #0x12]
	lsls r1, r1, #1
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r0, [r0]
	adds r1, r4, #0
	adds r1, #0x4e
	strh r0, [r1]
	bl GetItemDescMsg
	adds r4, #0x4c
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08070394: .4byte 0x02003108

	thumb_func_start sub_8070398
sub_8070398: @ 0x08070398
	adds r2, r0, #0
	ldr r0, _080703B4 @ =0x02003108
	ldr r0, [r0, #0xc]
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	cmp r0, #4
	bhi _08070408
	lsls r0, r0, #2
	ldr r1, _080703B8 @ =_080703BC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080703B4: .4byte 0x02003108
_080703B8: .4byte _080703BC
_080703BC: @ jump table
	.4byte _080703D0 @ case 0
	.4byte _080703DA @ case 1
	.4byte _080703E8 @ case 2
	.4byte _080703F4 @ case 3
	.4byte _08070400 @ case 4
_080703D0:
	adds r1, r2, #0
	adds r1, #0x4c
	movs r0, #0xb5
	lsls r0, r0, #3
	b _08070406
_080703DA:
	adds r1, r2, #0
	adds r1, #0x4c
	ldr r0, _080703E4 @ =0x000005A9
	b _08070406
	.align 2, 0
_080703E4: .4byte 0x000005A9
_080703E8:
	adds r1, r2, #0
	adds r1, #0x4c
	ldr r0, _080703F0 @ =0x000005AA
	b _08070406
	.align 2, 0
_080703F0: .4byte 0x000005AA
_080703F4:
	adds r1, r2, #0
	adds r1, #0x4c
	ldr r0, _080703FC @ =0x000005AC
	b _08070406
	.align 2, 0
_080703FC: .4byte 0x000005AC
_08070400:
	adds r1, r2, #0
	adds r1, #0x4c
	ldr r0, _0807040C @ =0x000005AB
_08070406:
	strh r0, [r1]
_08070408:
	bx lr
	.align 2, 0
_0807040C: .4byte 0x000005AB

	thumb_func_start sub_8070410
sub_8070410: @ 0x08070410
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0807042C @ =0x02003108
	ldr r0, [r0, #0xc]
	bl UnitKnowsMagic
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08070434
	adds r1, r4, #0
	adds r1, #0x4c
	ldr r0, _08070430 @ =0x0000059D
	b _0807043A
	.align 2, 0
_0807042C: .4byte 0x02003108
_08070430: .4byte 0x0000059D
_08070434:
	adds r1, r4, #0
	adds r1, #0x4c
	ldr r0, _08070444 @ =0x0000059C
_0807043A:
	strh r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08070444: .4byte 0x0000059C

	thumb_func_start sub_8070448
sub_8070448: @ 0x08070448
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, _08070488 @ =0x02003108
	ldr r0, [r5, #0xc]
	ldrh r0, [r0, #0x1c]
	cmp r0, #0
	bne _0807045C
	adds r0, r4, #0
	bl sub_8070BEC
_0807045C:
	ldr r0, [r5, #0xc]
	ldr r1, [r4, #0x2c]
	ldrh r1, [r1, #0x12]
	lsls r1, r1, #1
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r0, [r0]
	cmp r0, #0
	bne _08070496
	adds r0, r4, #0
	adds r0, #0x50
	ldrh r0, [r0]
	cmp r0, #0
	beq _08070480
	cmp r0, #0x10
	beq _08070480
	cmp r0, #0x40
	bne _0807048C
_08070480:
	adds r0, r4, #0
	bl sub_8070B8C
	b _08070496
	.align 2, 0
_08070488: .4byte 0x02003108
_0807048C:
	cmp r0, #0x80
	bne _08070496
	adds r0, r4, #0
	bl sub_8070BBC
_08070496:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_807049C
sub_807049C: @ 0x0807049C
	push {r4, r5, lr}
	sub sp, #0x10
	adds r5, r0, #0
	ldr r1, _080704D4 @ =0x083195E6
	mov r0, sp
	movs r2, #0x10
	bl memcpy
	ldr r0, [r5, #0x2c]
	ldrh r4, [r0, #0x12]
	ldr r0, _080704D8 @ =0x02003108
	ldr r0, [r0, #0xc]
	bl UnitKnowsMagic
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080704C0
	adds r4, #4
_080704C0:
	lsls r0, r4, #1
	add r0, sp
	ldrh r1, [r0]
	adds r0, r5, #0
	adds r0, #0x4c
	strh r1, [r0]
	add sp, #0x10
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080704D4: .4byte 0x083195E6
_080704D8: .4byte 0x02003108

	thumb_func_start sub_80704DC
sub_80704DC: @ 0x080704DC
	adds r1, r0, #0
	ldr r0, _080704F4 @ =0x02003108
	ldr r0, [r0, #0xc]
	ldr r0, [r0]
	ldrh r2, [r0, #2]
	cmp r2, #0
	beq _080704F8
	adds r0, r1, #0
	adds r0, #0x4c
	strh r2, [r0]
	b _080704FE
	.align 2, 0
_080704F4: .4byte 0x02003108
_080704F8:
	adds r1, #0x4c
	ldr r0, _08070500 @ =0x0000066D
	strh r0, [r1]
_080704FE:
	bx lr
	.align 2, 0
_08070500: .4byte 0x0000066D

	thumb_func_start sub_8070504
sub_8070504: @ 0x08070504
	ldr r1, _08070514 @ =0x02003108
	ldr r1, [r1, #0xc]
	ldr r1, [r1, #4]
	ldrh r1, [r1, #2]
	adds r0, #0x4c
	strh r1, [r0]
	bx lr
	.align 2, 0
_08070514: .4byte 0x02003108

	thumb_func_start sub_8070518
sub_8070518: @ 0x08070518
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0807053C @ =0x02003108
	ldr r0, [r0, #0xc]
	bl GetUnitTotalSupportLevel
	cmp r0, #0
	bne _08070546
	adds r0, r4, #0
	adds r0, #0x50
	ldrh r0, [r0]
	cmp r0, #0x80
	bne _08070540
	adds r0, r4, #0
	bl sub_8070BBC
	b _08070546
	.align 2, 0
_0807053C: .4byte 0x02003108
_08070540:
	adds r0, r4, #0
	bl sub_8070B8C
_08070546:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_807054C
sub_807054C: @ 0x0807054C
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r5, r1, #0
	movs r0, #0x38
	ldrsh r1, [r6, r0]
	movs r3, #0x3c
	ldrsh r2, [r6, r3]
	adds r4, r6, #0
	adds r4, #0x48
	movs r3, #0
	ldrsh r0, [r4, r3]
	mov ip, r0
	adds r7, r6, #0
	adds r7, #0x4a
	movs r3, #0
	ldrsh r0, [r7, r3]
	str r0, [sp]
	adds r0, r5, #0
	mov r3, ip
	bl Interpolate
	strh r0, [r6, #0x30]
	movs r0, #0x3a
	ldrsh r1, [r6, r0]
	movs r3, #0x3e
	ldrsh r2, [r6, r3]
	movs r3, #0
	ldrsh r0, [r4, r3]
	mov ip, r0
	movs r3, #0
	ldrsh r0, [r7, r3]
	str r0, [sp]
	adds r0, r5, #0
	mov r3, ip
	bl Interpolate
	strh r0, [r6, #0x32]
	adds r0, r6, #0
	adds r0, #0x40
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r0, #4
	movs r3, #0
	ldrsh r2, [r0, r3]
	movs r3, #0
	ldrsh r0, [r4, r3]
	mov ip, r0
	movs r3, #0
	ldrsh r0, [r7, r3]
	str r0, [sp]
	adds r0, r5, #0
	mov r3, ip
	bl Interpolate
	strh r0, [r6, #0x34]
	adds r0, r6, #0
	adds r0, #0x42
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r0, #4
	movs r3, #0
	ldrsh r2, [r0, r3]
	movs r0, #0
	ldrsh r3, [r4, r0]
	movs r4, #0
	ldrsh r0, [r7, r4]
	str r0, [sp]
	adds r0, r5, #0
	bl Interpolate
	strh r0, [r6, #0x36]
	movs r1, #0x30
	ldrsh r0, [r6, r1]
	movs r2, #0x32
	ldrsh r1, [r6, r2]
	movs r3, #0x34
	ldrsh r2, [r6, r3]
	movs r4, #0x36
	ldrsh r3, [r6, r4]
	bl sub_8070F64
	adds r0, r6, #0
	adds r0, #0x52
	ldrb r0, [r0]
	cmp r0, #0
	bne _08070610
	movs r0, #0x30
	ldrsh r1, [r6, r0]
	movs r3, #0x32
	ldrsh r2, [r6, r3]
	subs r2, #0xb
	ldr r3, _08070618 @ =Sprite_32x16
	movs r0, #0xb
	str r0, [sp]
	movs r0, #0
	bl PutSprite
_08070610:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08070618: .4byte Sprite_32x16

	thumb_func_start sub_807061C
sub_807061C: @ 0x0807061C
	push {lr}
	adds r0, #0x52
	ldrb r0, [r0]
	cmp r0, #0
	bne _08070636
	ldr r0, _0807063C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08070636
	movs r0, #0x70
	bl m4aSongNumStart
_08070636:
	pop {r0}
	bx r0
	.align 2, 0
_0807063C: .4byte gPlaySt

	thumb_func_start sub_8070640
sub_8070640: @ 0x08070640
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r1, #5
	bl sub_807054C
	adds r2, r4, #0
	adds r2, #0x48
	adds r4, #0x4a
	ldrh r3, [r2]
	movs r0, #0
	ldrsh r1, [r2, r0]
	movs r5, #0
	ldrsh r0, [r4, r5]
	cmp r1, r0
	bge _08070662
	adds r0, r3, #1
	strh r0, [r2]
_08070662:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8070668
sub_8070668: @ 0x08070668
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x52
	ldrb r0, [r0]
	cmp r0, #0
	bne _08070696
	ldr r0, _0807069C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08070684
	movs r0, #0x71
	bl m4aSongNumStart
_08070684:
	adds r0, r4, #0
	bl sub_8070B20
	ldr r0, [r4, #0x2c]
	ldrb r1, [r0, #0x10]
	ldrb r2, [r0, #0x11]
	adds r0, r4, #0
	bl sub_8070AFC
_08070696:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807069C: .4byte gPlaySt

	thumb_func_start sub_80706A0
sub_80706A0: @ 0x080706A0
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0
	bl sub_807054C
	adds r1, r4, #0
	adds r1, #0x48
	ldrh r0, [r1]
	subs r0, #3
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _080706C0
	adds r0, r4, #0
	bl Proc_Break
_080706C0:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80706C8
sub_80706C8: @ 0x080706C8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080706F4 @ =0x0203D3E0
	movs r3, #0
	str r3, [r0]
	str r3, [r0, #4]
	str r3, [r0, #8]
	str r3, [r0, #0xc]
	strb r4, [r0, #0x10]
	strb r1, [r0, #0x11]
	strh r2, [r0, #0x12]
	str r3, [r0, #0x14]
	str r3, [r0, #0x18]
	ldr r1, _080706F8 @ =0x0203D400
	strh r3, [r1]
	strh r3, [r1, #2]
	movs r1, #0
	bl sub_8070738
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080706F4: .4byte 0x0203D3E0
_080706F8: .4byte 0x0203D400

	thumb_func_start sub_80706FC
sub_80706FC: @ 0x080706FC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0807072C @ =0x0203D3E0
	movs r3, #0
	str r3, [r0]
	str r3, [r0, #4]
	str r3, [r0, #8]
	str r3, [r0, #0xc]
	strb r4, [r0, #0x10]
	strb r1, [r0, #0x11]
	strh r2, [r0, #0x12]
	str r3, [r0, #0x14]
	ldr r1, _08070730 @ =sub_8070B70
	str r1, [r0, #0x18]
	ldr r1, _08070734 @ =0x0203D400
	strh r3, [r1]
	strh r3, [r1, #2]
	movs r1, #0
	bl sub_8070738
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807072C: .4byte 0x0203D3E0
_08070730: .4byte sub_8070B70
_08070734: .4byte 0x0203D400

	thumb_func_start sub_8070738
sub_8070738: @ 0x08070738
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r5, r0, #0
	adds r7, r1, #0
	ldr r6, _08070770 @ =0x08677720
	adds r0, r6, #0
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	bne _08070774
	adds r0, r6, #0
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	adds r0, #0x52
	strb r7, [r0]
	ldrb r1, [r5, #0x10]
	ldrb r2, [r5, #0x11]
	adds r0, r4, #0
	bl sub_8070AFC
	adds r0, r4, #0
	bl sub_8070B20
	b _0807078C
	.align 2, 0
_08070770: .4byte 0x08677720
_08070774:
	ldrh r0, [r4, #0x30]
	strh r0, [r4, #0x38]
	ldrh r0, [r4, #0x32]
	strh r0, [r4, #0x3a]
	ldrh r1, [r4, #0x34]
	adds r0, r4, #0
	adds r0, #0x40
	strh r1, [r0]
	ldrh r0, [r4, #0x36]
	adds r1, r4, #0
	adds r1, #0x42
	strh r0, [r1]
_0807078C:
	str r5, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x48
	movs r1, #0
	strh r1, [r0]
	adds r2, r4, #0
	adds r2, #0x4a
	movs r0, #0xc
	strh r0, [r2]
	adds r7, r4, #0
	adds r7, #0x4e
	strh r1, [r7]
	ldrh r0, [r5, #0x12]
	adds r6, r4, #0
	adds r6, #0x4c
	strh r0, [r6]
	ldr r0, [r4, #0x2c]
	ldr r1, [r0, #0x18]
	cmp r1, #0
	beq _080707BA
	adds r0, r4, #0
	bl _call_via_r1
_080707BA:
	movs r0, #1
	bl SetTextFontGlyphs
	ldrh r0, [r6]
	bl DecodeMsg
	add r2, sp, #4
	mov r1, sp
	bl GetStringTextBox
	movs r0, #0
	bl SetTextFontGlyphs
	ldr r1, [sp]
	ldr r2, [sp, #4]
	adds r0, r4, #0
	bl sub_8070A30
	ldrb r1, [r5, #0x10]
	ldrb r2, [r5, #0x11]
	adds r0, r4, #0
	bl sub_8070A70
	bl sub_8071514
	ldrh r0, [r7]
	ldrh r1, [r6]
	bl sub_80714F8
	ldr r0, _08070800 @ =0x0203D3FC
	str r5, [r0]
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08070800: .4byte 0x0203D3FC

	thumb_func_start sub_8070804
sub_8070804: @ 0x08070804
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	ldr r0, _08070898 @ =0x08677720
	movs r1, #3
	bl SpawnProc
	adds r7, r0, #0
	adds r2, r7, #0
	adds r2, #0x52
	movs r1, #0
	movs r0, #1
	strb r0, [r2]
	adds r0, r7, #0
	adds r0, #0x48
	strh r1, [r0]
	subs r2, #8
	movs r0, #0xc
	strh r0, [r2]
	movs r0, #0x4e
	adds r0, r0, r7
	mov sb, r0
	strh r1, [r0]
	adds r4, r7, #0
	adds r4, #0x4c
	mov r1, r8
	strh r1, [r4]
	movs r0, #1
	bl SetTextFontGlyphs
	ldrh r0, [r4]
	bl DecodeMsg
	add r2, sp, #4
	mov r1, sp
	bl GetStringTextBox
	movs r0, #0
	bl SetTextFontGlyphs
	adds r0, r7, #0
	bl sub_8070B20
	ldr r1, [sp]
	ldr r2, [sp, #4]
	adds r0, r7, #0
	bl sub_8070A30
	adds r5, #8
	strh r5, [r7, #0x38]
	adds r6, #8
	strh r6, [r7, #0x3a]
	strh r5, [r7, #0x3c]
	strh r6, [r7, #0x3e]
	bl sub_8071514
	mov r1, sb
	ldrh r0, [r1]
	ldrh r1, [r4]
	bl sub_80714F8
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08070898: .4byte 0x08677720

	thumb_func_start sub_807089C
sub_807089C: @ 0x0807089C
	push {r4, lr}
	ldr r0, _080708BC @ =0x08677720
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _080708B6
	bl sub_8071514
	adds r0, r4, #0
	movs r1, #0x63
	bl Proc_Goto
_080708B6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080708BC: .4byte 0x08677720

	thumb_func_start sub_80708C0
sub_80708C0: @ 0x080708C0
	push {r4, lr}
	ldr r0, _080708E0 @ =0x08677720
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	beq _080708D8
	bl sub_8071514
	adds r0, r4, #0
	bl Proc_End
_080708D8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080708E0: .4byte 0x08677720

	thumb_func_start sub_80708E4
sub_80708E4: @ 0x080708E4
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x50
	movs r1, #0
	strh r1, [r0]
	ldr r0, [r4, #0x2c]
	ldr r1, [r0, #0x14]
	cmp r1, #0
	beq _080708FC
	adds r0, r4, #0
	bl _call_via_r1
_080708FC:
	ldr r0, [r4, #0x2c]
	movs r1, #0
	bl sub_8070738
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807090C
sub_807090C: @ 0x0807090C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r4, #0
	ldr r1, _080709A4 @ =0x0203D400
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #3
	ldr r2, [r5, #0x2c]
	ldrb r3, [r2, #0x10]
	adds r0, r3, r0
	movs r3, #2
	ldrsh r1, [r1, r3]
	lsls r1, r1, #3
	ldrb r2, [r2, #0x11]
	adds r1, r2, r1
	bl sub_80415CC
	ldr r6, _080709A8 @ =gKeySt
	ldr r1, [r6]
	movs r0, #0x40
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _08070946
	adds r0, r5, #0
	bl sub_8070B8C
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_08070946:
	ldr r1, [r6]
	movs r0, #0x80
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _0807095E
	adds r0, r5, #0
	bl sub_8070BBC
	orrs r4, r0
	lsls r0, r4, #0x18
	lsrs r4, r0, #0x18
_0807095E:
	ldr r1, [r6]
	movs r0, #0x20
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _08070976
	adds r0, r5, #0
	bl sub_8070BEC
	orrs r4, r0
	lsls r0, r4, #0x18
	lsrs r4, r0, #0x18
_08070976:
	ldr r1, [r6]
	movs r0, #0x10
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _0807098E
	adds r0, r5, #0
	bl sub_8070C1C
	orrs r4, r0
	lsls r0, r4, #0x18
	lsrs r4, r0, #0x18
_0807098E:
	ldr r1, [r6]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080709AC
	adds r0, r5, #0
	bl Proc_Break
	b _080709C8
	.align 2, 0
_080709A4: .4byte 0x0203D400
_080709A8: .4byte gKeySt
_080709AC:
	cmp r4, #0
	beq _080709C8
	ldr r0, _080709D0 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080709C0
	movs r0, #0x67
	bl m4aSongNumStart
_080709C0:
	adds r0, r5, #0
	movs r1, #0
	bl Proc_Goto
_080709C8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080709D0: .4byte gPlaySt

	thumb_func_start sub_80709D4
sub_80709D4: @ 0x080709D4
	push {r4, lr}
	adds r4, r0, #0
	bl sub_807089C
	adds r0, r4, #0
	bl Proc_End
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_80709E8
sub_80709E8: @ 0x080709E8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08070A04 @ =0x08677758
	bl SpawnProcLocking
	ldr r2, _08070A08 @ =0x0203D400
	movs r1, #0
	strh r1, [r2]
	strh r1, [r2, #2]
	str r4, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08070A04: .4byte 0x08677758
_08070A08: .4byte 0x0203D400

	thumb_func_start sub_8070A0C
sub_8070A0C: @ 0x08070A0C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r2, #0
	adds r5, r3, #0
	ldr r0, _08070A28 @ =0x08677758
	bl SpawnProcLocking
	ldr r1, _08070A2C @ =0x0203D400
	strh r4, [r1]
	strh r5, [r1, #2]
	str r6, [r0, #0x2c]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08070A28: .4byte 0x08677758
_08070A2C: .4byte 0x0203D400

	thumb_func_start sub_8070A30
sub_8070A30: @ 0x08070A30
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	adds r4, #0x1f
	movs r0, #0xe0
	ands r4, r0
	adds r0, r6, #0
	adds r0, #0x4e
	ldrh r0, [r0]
	bl sub_8070B30
	cmp r0, #1
	beq _08070A52
	cmp r0, #2
	beq _08070A58
	b _08070A60
_08070A52:
	movs r4, #0xa0
	adds r5, #0x20
	b _08070A60
_08070A58:
	cmp r4, #0x5f
	bgt _08070A5E
	movs r4, #0x60
_08070A5E:
	adds r5, #0x10
_08070A60:
	adds r0, r6, #0
	adds r0, #0x44
	strh r4, [r0]
	adds r0, #2
	strh r5, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_8070A70
sub_8070A70: @ 0x08070A70
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r4, r1, #0
	adds r7, r2, #0
	adds r0, #0x44
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r6, r0, #0
	adds r6, #0x10
	adds r0, r5, #0
	adds r0, #0x46
	movs r2, #0
	ldrsh r0, [r0, r2]
	adds r0, #0x10
	mov r8, r0
	ldr r1, _08070AF8 @ =0x0203D400
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #3
	adds r4, r4, r0
	movs r2, #2
	ldrsh r0, [r1, r2]
	lsls r0, r0, #3
	adds r7, r7, r0
	adds r0, r6, #0
	movs r1, #6
	bl __divsi3
	adds r0, #0x10
	subs r4, r4, r0
	strh r4, [r5, #0x3c]
	lsls r4, r4, #0x10
	cmp r4, #0
	bge _08070ABC
	movs r0, #0
	strh r0, [r5, #0x3c]
_08070ABC:
	movs r1, #0x3c
	ldrsh r0, [r5, r1]
	adds r0, r0, r6
	cmp r0, #0xf0
	ble _08070ACC
	movs r0, #0xf0
	subs r0, r0, r6
	strh r0, [r5, #0x3c]
_08070ACC:
	adds r0, r7, #0
	adds r0, #0x10
	strh r0, [r5, #0x3e]
	movs r2, #0x3e
	ldrsh r0, [r5, r2]
	add r0, r8
	cmp r0, #0xa0
	ble _08070AE2
	mov r1, r8
	subs r0, r7, r1
	strh r0, [r5, #0x3e]
_08070AE2:
	ldrh r0, [r5, #0x3c]
	adds r0, #8
	strh r0, [r5, #0x3c]
	ldrh r0, [r5, #0x3e]
	adds r0, #8
	strh r0, [r5, #0x3e]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08070AF8: .4byte 0x0203D400

	thumb_func_start sub_8070AFC
sub_8070AFC: @ 0x08070AFC
	push {r4, r5, lr}
	ldr r4, _08070B1C @ =0x0203D400
	movs r5, #0
	ldrsh r3, [r4, r5]
	lsls r3, r3, #3
	adds r1, r1, r3
	movs r5, #2
	ldrsh r3, [r4, r5]
	lsls r3, r3, #3
	adds r2, r2, r3
	strh r1, [r0, #0x38]
	strh r2, [r0, #0x3a]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08070B1C: .4byte 0x0203D400

	thumb_func_start sub_8070B20
sub_8070B20: @ 0x08070B20
	adds r2, r0, #0
	adds r2, #0x40
	movs r1, #0x20
	strh r1, [r2]
	adds r0, #0x42
	movs r1, #0x10
	strh r1, [r0]
	bx lr

	thumb_func_start sub_8070B30
sub_8070B30: @ 0x08070B30
	push {r4, lr}
	adds r4, r0, #0
	bl GetItemAttributes
	movs r1, #0x80
	lsls r1, r1, #3
	ands r1, r0
	cmp r1, #0
	bne _08070B62
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _08070B54
	movs r0, #1
	b _08070B68
_08070B54:
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #4
	ands r1, r0
	cmp r1, #0
	bne _08070B66
_08070B62:
	movs r0, #0
	b _08070B68
_08070B66:
	movs r0, #2
_08070B68:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8070B70
sub_8070B70: @ 0x08070B70
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x2c]
	ldrh r0, [r0, #0x12]
	adds r1, r4, #0
	adds r1, #0x4e
	strh r0, [r1]
	bl GetItemDescMsg
	adds r4, #0x4c
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8070B8C
sub_8070B8C: @ 0x08070B8C
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x2c]
	ldr r0, [r0]
	cmp r0, #0
	bne _08070B9C
	movs r0, #0
	b _08070BB6
_08070B9C:
	str r0, [r2, #0x2c]
	adds r0, r2, #0
	adds r0, #0x50
	movs r1, #0x40
	strh r1, [r0]
	ldr r0, [r2, #0x2c]
	ldr r1, [r0, #0x14]
	cmp r1, #0
	beq _08070BB4
	adds r0, r2, #0
	bl _call_via_r1
_08070BB4:
	movs r0, #1
_08070BB6:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8070BBC
sub_8070BBC: @ 0x08070BBC
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x2c]
	ldr r0, [r0, #4]
	cmp r0, #0
	bne _08070BCC
	movs r0, #0
	b _08070BE6
_08070BCC:
	str r0, [r2, #0x2c]
	adds r0, r2, #0
	adds r0, #0x50
	movs r1, #0x80
	strh r1, [r0]
	ldr r0, [r2, #0x2c]
	ldr r1, [r0, #0x14]
	cmp r1, #0
	beq _08070BE4
	adds r0, r2, #0
	bl _call_via_r1
_08070BE4:
	movs r0, #1
_08070BE6:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8070BEC
sub_8070BEC: @ 0x08070BEC
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x2c]
	ldr r0, [r0, #8]
	cmp r0, #0
	bne _08070BFC
	movs r0, #0
	b _08070C16
_08070BFC:
	str r0, [r2, #0x2c]
	adds r0, r2, #0
	adds r0, #0x50
	movs r1, #0x20
	strh r1, [r0]
	ldr r0, [r2, #0x2c]
	ldr r1, [r0, #0x14]
	cmp r1, #0
	beq _08070C14
	adds r0, r2, #0
	bl _call_via_r1
_08070C14:
	movs r0, #1
_08070C16:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8070C1C
sub_8070C1C: @ 0x08070C1C
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x2c]
	ldr r0, [r0, #0xc]
	cmp r0, #0
	bne _08070C2C
	movs r0, #0
	b _08070C46
_08070C2C:
	str r0, [r2, #0x2c]
	adds r0, r2, #0
	adds r0, #0x50
	movs r1, #0x10
	strh r1, [r0]
	ldr r0, [r2, #0x2c]
	ldr r1, [r0, #0x14]
	cmp r1, #0
	beq _08070C44
	adds r0, r2, #0
	bl _call_via_r1
_08070C44:
	movs r0, #1
_08070C46:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8070C4C
sub_8070C4C: @ 0x08070C4C
	push {lr}
	adds r2, r0, #0
	ldr r0, _08070C6C @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08070C66
	adds r0, r2, #0
	bl Proc_Break
_08070C66:
	pop {r0}
	bx r0
	.align 2, 0
_08070C6C: .4byte gKeySt

	thumb_func_start sub_8070C70
sub_8070C70: @ 0x08070C70
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	movs r1, #1
	rsbs r1, r1, #0
	movs r0, #0
	bl sub_8070E70
	bl sub_8041660
	adds r4, r0, #0
	bl sub_804166C
	adds r1, r0, #0
	adds r0, r4, #0
	adds r2, r5, #0
	bl sub_80706C8
	ldr r0, _08070CA4 @ =0x08677788
	adds r1, r6, #0
	bl SpawnProcLocking
	movs r0, #1
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_08070CA4: .4byte 0x08677788

	thumb_func_start sub_8070CA8
sub_8070CA8: @ 0x08070CA8
	ldr r0, _08070CB0 @ =0x0203D3FC
	ldr r0, [r0]
	bx lr
	.align 2, 0
_08070CB0: .4byte 0x0203D3FC

	thumb_func_start sub_8070CB4
sub_8070CB4: @ 0x08070CB4
	push {lr}
	adds r2, r0, #0
	movs r0, #8
	ands r0, r2
	cmp r0, #0
	beq _08070CD0
	ldr r0, _08070CCC @ =0x0830D5E4
	lsls r1, r1, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	b _08070CFA
	.align 2, 0
_08070CCC: .4byte 0x0830D5E4
_08070CD0:
	movs r0, #1
	ands r0, r2
	ldr r3, _08070D00 @ =0x083094F4
	cmp r0, #0
	beq _08070CDC
	ldr r3, _08070D04 @ =0x08309474
_08070CDC:
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _08070CE6
	adds r3, #0x20
_08070CE6:
	movs r0, #4
	ands r0, r2
	cmp r0, #0
	beq _08070CF0
	adds r3, #0x40
_08070CF0:
	lsls r1, r1, #5
	adds r0, r3, #0
	movs r2, #0x20
	bl ApplyPaletteExt
_08070CFA:
	pop {r0}
	bx r0
	.align 2, 0
_08070D00: .4byte 0x083094F4
_08070D04: .4byte 0x08309474

	thumb_func_start sub_8070D08
sub_8070D08: @ 0x08070D08
	push {r4, lr}
	adds r4, r0, #0
	adds r3, r1, #0
	cmp r3, #0x2c
	bls _08070D14
	movs r3, #0x26
_08070D14:
	ldr r2, _08070D3C @ =0x0203D404
	ldr r0, _08070D40 @ =0x000003FF
	adds r1, r0, #0
	adds r0, r4, #0
	ands r0, r1
	strh r0, [r2, #2]
	ldr r1, _08070D44 @ =0x08677F20
	lsls r0, r3, #2
	adds r0, r0, r1
	ldr r0, [r0]
	lsls r1, r4, #5
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r1, r2
	bl Decompress
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08070D3C: .4byte 0x0203D404
_08070D40: .4byte 0x000003FF
_08070D44: .4byte 0x08677F20

	thumb_func_start sub_8070D48
sub_8070D48: @ 0x08070D48
	push {lr}
	adds r1, r0, #0
	ldr r3, _08070D6C @ =0x0203D404
	ldr r0, _08070D70 @ =0x000003FF
	adds r2, r0, #0
	adds r0, r1, #0
	ands r0, r2
	strh r0, [r3]
	ldr r0, _08070D74 @ =0x0830C804
	lsls r1, r1, #5
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r1, r2
	bl Decompress
	pop {r0}
	bx r0
	.align 2, 0
_08070D6C: .4byte 0x0203D404
_08070D70: .4byte 0x000003FF
_08070D74: .4byte 0x0830C804

	thumb_func_start sub_8070D78
sub_8070D78: @ 0x08070D78
	push {lr}
	adds r1, r0, #0
	ldr r3, _08070D9C @ =0x0203D404
	ldr r0, _08070DA0 @ =0x000003FF
	adds r2, r0, #0
	adds r0, r1, #0
	ands r0, r2
	strh r0, [r3]
	ldr r0, _08070DA4 @ =0x0830CFE0
	lsls r1, r1, #5
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r1, r2
	bl Decompress
	pop {r0}
	bx r0
	.align 2, 0
_08070D9C: .4byte 0x0203D404
_08070DA0: .4byte 0x000003FF
_08070DA4: .4byte 0x0830CFE0

	thumb_func_start sub_8070DA8
sub_8070DA8: @ 0x08070DA8
	adds r2, r0, #0
	ldr r0, _08070DC4 @ =0x0203D404
	lsls r1, r1, #0xc
	ldrh r0, [r0, #2]
	adds r0, r0, r1
	movs r1, #0x3f
_08070DB4:
	strh r0, [r2]
	adds r0, #1
	adds r2, #2
	subs r1, #1
	cmp r1, #0
	bge _08070DB4
	bx lr
	.align 2, 0
_08070DC4: .4byte 0x0203D404

	thumb_func_start sub_8070DC8
sub_8070DC8: @ 0x08070DC8
	adds r2, r0, #0
	ldr r0, _08070DE4 @ =0x0203D404
	lsls r1, r1, #0xc
	ldrh r0, [r0]
	adds r0, r0, r1
	movs r1, #0x7f
_08070DD4:
	strh r0, [r2]
	adds r0, #1
	adds r2, #2
	subs r1, #1
	cmp r1, #0
	bge _08070DD4
	bx lr
	.align 2, 0
_08070DE4: .4byte 0x0203D404

	thumb_func_start sub_8070DE8
sub_8070DE8: @ 0x08070DE8
	push {lr}
	adds r2, r1, #0
	ldr r1, _08070E04 @ =0x0830D4F0
	ldr r3, _08070E08 @ =0x0203D404
	lsls r2, r2, #0xc
	ldrh r3, [r3]
	adds r2, r3, r2
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	bl TmApplyTsa_t
	pop {r0}
	bx r0
	.align 2, 0
_08070E04: .4byte 0x0830D4F0
_08070E08: .4byte 0x0203D404

	thumb_func_start sub_8070E0C
sub_8070E0C: @ 0x08070E0C
	push {lr}
	adds r1, r0, #0
	cmp r1, #0
	bne _08070E18
	movs r0, #0x26
	b _08070E6C
_08070E18:
	movs r0, #1
	rsbs r0, r0, #0
	movs r2, #0xe
	ldrsb r2, [r1, r2]
	cmp r2, r0
	beq _08070E30
	cmp r2, r0
	blt _08070E34
	cmp r2, #0x2c
	bgt _08070E34
	cmp r2, #0x28
	blt _08070E34
_08070E30:
	movs r0, #0x2b
	b _08070E6C
_08070E34:
	movs r0, #0x20
	ldrb r3, [r1, #0x14]
	ands r0, r3
	cmp r0, #0
	beq _08070E64
	ldrb r1, [r1, #0x19]
	lsls r0, r1, #0x1c
	lsrs r0, r0, #0x1c
	cmp r0, #1
	beq _08070E5C
	cmp r0, #1
	bgt _08070E52
	cmp r0, #0
	beq _08070E58
	b _08070E64
_08070E52:
	cmp r0, #2
	beq _08070E60
	b _08070E64
_08070E58:
	movs r0, #0x2a
	b _08070E6C
_08070E5C:
	movs r0, #0x29
	b _08070E6C
_08070E60:
	movs r0, #0x28
	b _08070E6C
_08070E64:
	adds r0, r2, #0
	bl GetChapterInfo
	ldrb r0, [r0, #0xe]
_08070E6C:
	pop {r1}
	bx r1

	thumb_func_start sub_8070E70
sub_8070E70: @ 0x08070E70
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r5, r1, #0
	cmp r7, #0
	bne _08070E7C
	ldr r7, _08070EDC @ =0x06013000
_08070E7C:
	cmp r5, #0
	bge _08070E82
	movs r5, #5
_08070E82:
	movs r4, #0xf
	adds r0, r4, #0
	ands r0, r5
	adds r5, r0, #0
	adds r5, #0x10
	ldr r0, _08070EE0 @ =0x08308A78
	adds r1, r7, #0
	bl Decompress
	ldr r6, _08070EE4 @ =0x0203D40C
	adds r0, r6, #0
	adds r1, r7, #0
	adds r2, r5, #0
	bl InitSpriteTextFont
	adds r0, r6, #0
	adds r0, #0x18
	bl InitSpriteText
	adds r0, r6, #0
	adds r0, #0x20
	bl InitSpriteText
	adds r0, r6, #0
	adds r0, #0x28
	bl InitSpriteText
	movs r0, #0
	bl SetTextFont
	ldr r0, _08070EE8 @ =0x08100A48
	lsls r1, r5, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	lsls r0, r7, #0x11
	lsrs r0, r0, #0x16
	ands r5, r4
	lsls r1, r5, #0xc
	adds r0, r0, r1
	strh r0, [r6, #0x30]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08070EDC: .4byte 0x06013000
_08070EE0: .4byte 0x08308A78
_08070EE4: .4byte 0x0203D40C
_08070EE8: .4byte 0x08100A48

	thumb_func_start sub_8070EEC
sub_8070EEC: @ 0x08070EEC
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r5, r1, #0
	cmp r7, #0
	bne _08070EF8
	ldr r7, _08070F54 @ =0x06013000
_08070EF8:
	cmp r5, #0
	bge _08070EFE
	movs r5, #5
_08070EFE:
	movs r4, #0xf
	adds r0, r4, #0
	ands r0, r5
	adds r5, r0, #0
	adds r5, #0x10
	ldr r0, _08070F58 @ =0x08308A78
	adds r1, r7, #0
	bl Decompress
	ldr r6, _08070F5C @ =0x0203D40C
	adds r0, r6, #0
	adds r1, r7, #0
	adds r2, r5, #0
	bl InitSpriteTextFont
	adds r0, r6, #0
	adds r0, #0x18
	bl InitSpriteText
	adds r0, r6, #0
	adds r0, #0x20
	bl InitSpriteText
	adds r1, r6, #0
	adds r1, #0x2c
	movs r0, #0
	strb r0, [r1]
	bl SetTextFont
	ldr r0, _08070F60 @ =0x08100A48
	lsls r1, r5, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	lsls r0, r7, #0x11
	lsrs r0, r0, #0x16
	ands r5, r4
	lsls r1, r5, #0xc
	adds r0, r0, r1
	strh r0, [r6, #0x30]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08070F54: .4byte 0x06013000
_08070F58: .4byte 0x08308A78
_08070F5C: .4byte 0x0203D40C
_08070F60: .4byte 0x08100A48

	thumb_func_start sub_8070F64
sub_8070F64: @ 0x08070F64
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	mov sb, r0
	mov sl, r1
	adds r7, r2, #0
	mov r8, r3
	cmp r7, #0x1f
	bgt _08070F7E
	movs r7, #0x20
_08070F7E:
	cmp r7, #0xc0
	ble _08070F84
	movs r7, #0xc0
_08070F84:
	mov r0, r8
	cmp r0, #0xf
	bgt _08070F8E
	movs r1, #0x10
	mov r8, r1
_08070F8E:
	mov r3, r8
	cmp r3, #0x30
	ble _08070F98
	movs r0, #0x30
	mov r8, r0
_08070F98:
	adds r0, r7, #0
	adds r0, #0x1f
	cmp r0, #0
	bge _08070FA2
	adds r0, #0x1f
_08070FA2:
	asrs r0, r0, #5
	mov r1, r8
	adds r1, #0xf
	cmp r1, #0
	bge _08070FAE
	adds r1, #0xf
_08070FAE:
	asrs r1, r1, #4
	str r1, [sp, #4]
	subs r6, r0, #1
	str r6, [sp, #8]
	mov r1, sl
	subs r1, #8
	str r1, [sp, #0x18]
	mov r3, sl
	add r3, r8
	str r3, [sp, #0x10]
	mov r0, sb
	subs r0, #8
	str r0, [sp, #0x14]
	mov r1, sb
	adds r1, r1, r7
	str r1, [sp, #0xc]
	cmp r6, #0
	blt _0807101A
_08070FD2:
	ldr r5, [sp, #4]
	subs r4, r6, #1
	cmp r5, #0
	blt _08071014
_08070FDA:
	adds r0, r6, #1
	lsls r1, r0, #5
	cmp r1, r7
	ble _08070FE4
	adds r1, r7, #0
_08070FE4:
	subs r1, #0x20
	adds r0, r5, #1
	lsls r0, r0, #4
	cmp r0, r8
	ble _08070FF0
	mov r0, r8
_08070FF0:
	subs r0, #0x10
	add r1, sb
	mov r3, sl
	adds r2, r3, r0
	ldr r3, _080710F8 @ =0x0203D40C
	lsls r0, r6, #2
	ldrh r3, [r3, #0x30]
	adds r0, r3, r0
	lsls r3, r5, #6
	adds r0, r0, r3
	str r0, [sp]
	movs r0, #0
	ldr r3, _080710FC @ =Sprite_32x16
	bl PutSprite
	subs r5, #1
	cmp r5, #0
	bge _08070FDA
_08071014:
	adds r6, r4, #0
	cmp r6, #0
	bge _08070FD2
_0807101A:
	ldr r6, [sp, #8]
	cmp r6, #0
	blt _0807105C
	ldr r5, _080710F8 @ =0x0203D40C
_08071022:
	adds r0, r6, #1
	lsls r1, r0, #5
	cmp r1, r7
	ble _0807102C
	adds r1, r7, #0
_0807102C:
	subs r1, #0x20
	mov r0, sb
	adds r4, r0, r1
	ldrh r0, [r5, #0x30]
	adds r0, #0x1b
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	ldr r2, [sp, #0x18]
	ldr r3, _08071100 @ =0x085C39F0
	bl PutSprite
	ldrh r0, [r5, #0x30]
	adds r0, #0x1b
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	ldr r2, [sp, #0x10]
	ldr r3, _08071104 @ =0x085C3A00
	bl PutSprite
	subs r6, #1
	cmp r6, #0
	bge _08071022
_0807105C:
	ldr r5, [sp, #4]
	cmp r5, #0
	blt _0807109E
	ldr r6, _080710F8 @ =0x0203D40C
_08071064:
	adds r0, r5, #1
	lsls r0, r0, #4
	cmp r0, r8
	ble _0807106E
	mov r0, r8
_0807106E:
	subs r0, #0x10
	mov r1, sl
	adds r4, r1, r0
	ldrh r0, [r6, #0x30]
	adds r0, #0x1f
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0x14]
	adds r2, r4, #0
	ldr r3, _08071108 @ =0x085C39C0
	bl PutSprite
	ldrh r0, [r6, #0x30]
	adds r0, #0x1f
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0xc]
	adds r2, r4, #0
	ldr r3, _0807110C @ =0x085C3A08
	bl PutSprite
	subs r5, #1
	cmp r5, #0
	bge _08071064
_0807109E:
	ldr r3, _08071110 @ =Sprite_8x8
	ldr r4, _080710F8 @ =0x0203D40C
	ldrh r0, [r4, #0x30]
	adds r0, #0x3e
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0x14]
	ldr r2, [sp, #0x18]
	bl PutSprite
	ldr r3, _08071114 @ =0x085C3A10
	ldrh r0, [r4, #0x30]
	adds r0, #0x3e
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0xc]
	ldr r2, [sp, #0x18]
	bl PutSprite
	ldr r3, _08071118 @ =0x085C3A18
	ldrh r0, [r4, #0x30]
	adds r0, #0x3e
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0x14]
	ldr r2, [sp, #0x10]
	bl PutSprite
	ldr r3, _0807111C @ =0x085C3A20
	ldrh r0, [r4, #0x30]
	adds r0, #0x3e
	str r0, [sp]
	movs r0, #0
	ldr r1, [sp, #0xc]
	ldr r2, [sp, #0x10]
	bl PutSprite
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080710F8: .4byte 0x0203D40C
_080710FC: .4byte Sprite_32x16
_08071100: .4byte 0x085C39F0
_08071104: .4byte 0x085C3A00
_08071108: .4byte 0x085C39C0
_0807110C: .4byte 0x085C3A08
_08071110: .4byte Sprite_8x8
_08071114: .4byte 0x085C3A10
_08071118: .4byte 0x085C3A18
_0807111C: .4byte 0x085C3A20

	thumb_func_start sub_8071120
sub_8071120: @ 0x08071120
	push {r4, lr}
	ldr r4, _08071180 @ =0x0203D424
	bl GetItemKind
	bl GetItemKindString
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0
	movs r2, #8
	bl Text_InsertDrawString
	ldr r3, _08071184 @ =0x08319894
	adds r0, r4, #0
	movs r1, #0x24
	movs r2, #8
	bl Text_InsertDrawString
	ldr r3, _08071188 @ =0x0831989C
	adds r0, r4, #0
	movs r1, #0x60
	movs r2, #8
	bl Text_InsertDrawString
	adds r4, #8
	ldr r3, _0807118C @ =0x083198A4
	adds r0, r4, #0
	movs r1, #0
	movs r2, #8
	bl Text_InsertDrawString
	ldr r3, _08071190 @ =0x083198AC
	adds r0, r4, #0
	movs r1, #0x30
	movs r2, #8
	bl Text_InsertDrawString
	ldr r3, _08071194 @ =0x083198B4
	adds r0, r4, #0
	movs r1, #0x60
	movs r2, #8
	bl Text_InsertDrawString
	movs r0, #2
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08071180: .4byte 0x0203D424
_08071184: .4byte 0x08319894
_08071188: .4byte 0x0831989C
_0807118C: .4byte 0x083198A4
_08071190: .4byte 0x083198AC
_08071194: .4byte 0x083198B4

	thumb_func_start sub_8071198
sub_8071198: @ 0x08071198
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _08071214 @ =0x0203D424
	bl GetItemRequiredExp
	bl GetWeaponLevelStringFromExp
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #7
	bl Text_InsertDrawString
	adds r0, r5, #0
	bl GetItemRangeString
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x38
	movs r2, #7
	bl Text_InsertDrawString
	adds r0, r5, #0
	bl GetItemWeight
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x80
	movs r2, #7
	bl Text_InsertDrawNumberOrBlank
	adds r4, #8
	adds r0, r5, #0
	bl GetItemMight
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x20
	movs r2, #7
	bl Text_InsertDrawNumberOrBlank
	adds r0, r5, #0
	bl GetItemHit
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x50
	movs r2, #7
	bl Text_InsertDrawNumberOrBlank
	adds r0, r5, #0
	bl GetItemCrit
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x80
	movs r2, #7
	bl Text_InsertDrawNumberOrBlank
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08071214: .4byte 0x0203D424

	thumb_func_start sub_8071218
sub_8071218: @ 0x08071218
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _08071268 @ =0x0203D424
	ldr r3, _0807126C @ =0x083198BC
	adds r0, r4, #0
	movs r1, #0
	movs r2, #8
	bl Text_InsertDrawString
	adds r0, r5, #0
	bl GetItemRequiredExp
	bl GetWeaponLevelStringFromExp
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #7
	bl Text_InsertDrawString
	ldr r3, _08071270 @ =0x08319894
	adds r0, r4, #0
	movs r1, #0x24
	movs r2, #8
	bl Text_InsertDrawString
	adds r0, r5, #0
	bl GetItemRangeString
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0x38
	movs r2, #7
	bl Text_InsertDrawString
	movs r0, #1
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08071268: .4byte 0x0203D424
_0807126C: .4byte 0x083198BC
_08071270: .4byte 0x08319894

	thumb_func_start sub_8071274
sub_8071274: @ 0x08071274
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x5e
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bgt _08071302
	adds r0, r4, #0
	adds r0, #0x60
	ldrh r0, [r0]
	strh r0, [r1]
	ldr r0, [r4, #0x30]
	bl SetTextFont
	movs r6, #0
	adds r0, r4, #0
	adds r0, #0x62
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r7, r0, #0
	cmp r6, r1
	bge _080712FC
	adds r5, r4, #0
	adds r5, #0x5c
_080712AA:
	ldr r0, [r4, #0x2c]
	ldrb r2, [r0]
	adds r3, r0, #0
	cmp r2, #1
	beq _080712CC
	cmp r2, #1
	bgt _080712BE
	cmp r2, #0
	beq _080712C4
	b _080712DC
_080712BE:
	cmp r2, #4
	beq _080712D8
	b _080712DC
_080712C4:
	adds r0, r4, #0
	bl Proc_Break
	b _080712FC
_080712CC:
	adds r0, r3, #1
	str r0, [r4, #0x2c]
	ldrh r0, [r5]
	adds r0, #1
	strh r0, [r5]
	b _080712F2
_080712D8:
	adds r0, r3, #1
	b _080712F0
_080712DC:
	movs r0, #0
	ldrsh r1, [r5, r0]
	lsls r1, r1, #2
	adds r0, r4, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r0, [r0]
	adds r1, r3, #0
	bl Text_DrawCharacter
_080712F0:
	str r0, [r4, #0x2c]
_080712F2:
	adds r6, #1
	movs r1, #0
	ldrsh r0, [r7, r1]
	cmp r6, r0
	blt _080712AA
_080712FC:
	movs r0, #0
	bl SetTextFont
_08071302:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8071308
sub_8071308: @ 0x08071308
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x30]
	bl SetTextFont
	movs r6, #0
_08071314:
	lsls r1, r6, #2
	adds r0, r4, #0
	adds r0, #0x34
	adds r0, r0, r1
	ldr r5, [r0]
	ldrb r1, [r5, #4]
	lsls r0, r1, #3
	ldr r1, [r4, #0x2c]
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_SetCursor
_08071330:
	ldr r0, [r4, #0x2c]
	ldrb r1, [r0]
	cmp r1, #1
	beq _08071350
	cmp r1, #1
	bgt _08071342
	cmp r1, #0
	beq _08071368
	b _0807135C
_08071342:
	cmp r1, #5
	bgt _0807135C
	cmp r1, #4
	blt _0807135C
	adds r0, #1
	str r0, [r4, #0x2c]
	b _08071330
_08071350:
	adds r0, #1
	str r0, [r4, #0x2c]
	adds r6, #1
	cmp r6, #5
	ble _08071314
	b _08071368
_0807135C:
	ldr r1, [r4, #0x2c]
	adds r0, r5, #0
	bl Text_DrawCharacter
	str r0, [r4, #0x2c]
	b _08071330
_08071368:
	ldr r0, [r4, #0x30]
	bl SetTextFont
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_8071374
sub_8071374: @ 0x08071374
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x58]
	ldr r0, _0807139C @ =0x0203D40C
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	adds r0, r4, #0
	bl sub_8070B30
	adds r1, r0, #0
	cmp r1, #1
	beq _080713AE
	cmp r1, #1
	bgt _080713A0
	cmp r1, #0
	beq _080713A6
	b _080713CA
	.align 2, 0
_0807139C: .4byte 0x0203D40C
_080713A0:
	cmp r1, #2
	beq _080713BC
	b _080713CA
_080713A6:
	adds r0, r5, #0
	adds r0, #0x64
	strh r1, [r0]
	b _080713CA
_080713AE:
	adds r0, r4, #0
	bl sub_8071120
	adds r1, r5, #0
	adds r1, #0x64
	movs r0, #2
	b _080713C8
_080713BC:
	adds r0, r4, #0
	bl sub_8071218
	adds r1, r5, #0
	adds r1, #0x64
	movs r0, #1
_080713C8:
	strh r0, [r1]
_080713CA:
	movs r0, #0
	bl SetTextFont
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_80713DC
sub_80713DC: @ 0x080713DC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x58]
	ldr r0, _0807140C @ =0x0203D40C
	bl SetTextFont
	adds r0, r4, #0
	bl sub_8070B30
	cmp r0, #1
	bne _080713F8
	adds r0, r4, #0
	bl sub_8071198
_080713F8:
	movs r0, #0
	bl SetTextFont
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807140C: .4byte 0x0203D40C

	thumb_func_start sub_8071410
sub_8071410: @ 0x08071410
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, sb
	mov r4, r8
	push {r4, r5, r6}
	mov sl, r0
	ldr r5, _080714B0 @ =0x0203D40C
	adds r0, r5, #0
	bl SetTextFont
	movs r0, #1
	bl SetTextFontGlyphs
	movs r0, #0x18
	adds r0, r0, r5
	mov sb, r0
	movs r1, #6
	bl Text_SetColor
	movs r1, #0x20
	adds r1, r1, r5
	mov r8, r1
	mov r0, r8
	movs r1, #6
	bl Text_SetColor
	adds r6, r5, #0
	adds r6, #0x28
	adds r0, r6, #0
	movs r1, #6
	bl Text_SetColor
	movs r0, #0
	bl SetTextFont
	ldr r4, _080714B4 @ =0x08677FD0
	adds r0, r4, #0
	bl Proc_EndEach
	adds r0, r4, #0
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x30]
	mov r0, sb
	str r0, [r4, #0x34]
	mov r1, r8
	str r1, [r4, #0x38]
	str r6, [r4, #0x3c]
	mov r0, sl
	adds r0, #0x64
	ldrh r1, [r0]
	adds r0, r4, #0
	adds r0, #0x5c
	movs r5, #0
	strh r1, [r0]
	mov r1, sl
	ldr r0, [r1, #0x5c]
	bl DecodeMsg
	str r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x62
	movs r3, #1
	strh r3, [r1]
	adds r0, r4, #0
	adds r0, #0x5e
	strh r5, [r0]
	ldr r0, _080714B8 @ =gPlaySt
	ldrb r0, [r0, #0x1c]
	lsls r0, r0, #0x19
	lsrs r2, r0, #0x1e
	cmp r2, #1
	beq _080714CE
	cmp r2, #1
	bgt _080714BC
	cmp r2, #0
	beq _080714C6
	b _080714EA
	.align 2, 0
_080714B0: .4byte 0x0203D40C
_080714B4: .4byte 0x08677FD0
_080714B8: .4byte gPlaySt
_080714BC:
	cmp r2, #2
	beq _080714D6
	cmp r2, #3
	beq _080714E0
	b _080714EA
_080714C6:
	adds r1, r4, #0
	adds r1, #0x60
	movs r0, #2
	b _080714E8
_080714CE:
	adds r0, r4, #0
	adds r0, #0x60
	strh r2, [r0]
	b _080714EA
_080714D6:
	adds r0, r4, #0
	adds r0, #0x60
	strh r3, [r0]
	strh r2, [r1]
	b _080714EA
_080714E0:
	adds r0, r4, #0
	adds r0, #0x60
	strh r5, [r0]
	movs r0, #0x7f
_080714E8:
	strh r0, [r1]
_080714EA:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_80714F8
sub_80714F8: @ 0x080714F8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08071510 @ =0x08677FF8
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x58]
	str r5, [r0, #0x5c]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08071510: .4byte 0x08677FF8

	thumb_func_start sub_8071514
sub_8071514: @ 0x08071514
	push {r4, lr}
	ldr r4, _08071550 @ =0x0203D40C
	adds r0, r4, #0
	bl SetTextFont
	adds r0, r4, #0
	adds r0, #0x18
	bl SpriteText_DrawBackground
	adds r0, r4, #0
	adds r0, #0x20
	bl SpriteText_DrawBackground
	adds r4, #0x28
	adds r0, r4, #0
	bl SpriteText_DrawBackground
	ldr r0, _08071554 @ =0x08677FD0
	bl Proc_EndEach
	ldr r0, _08071558 @ =0x08677FF8
	bl Proc_EndEach
	movs r0, #0
	bl SetTextFont
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08071550: .4byte 0x0203D40C
_08071554: .4byte 0x08677FD0
_08071558: .4byte 0x08677FF8

	thumb_func_start sub_807155C
sub_807155C: @ 0x0807155C
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r1, #5
	bl sub_807054C
	adds r2, r4, #0
	adds r2, #0x48
	adds r4, #0x4a
	ldrh r3, [r2]
	movs r0, #0
	ldrsh r1, [r2, r0]
	movs r5, #0
	ldrsh r0, [r4, r5]
	cmp r1, r0
	bge _0807157E
	adds r0, r3, #1
	strh r0, [r2]
_0807157E:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8071584
sub_8071584: @ 0x08071584
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_8071838
	ldr r0, [r4, #0x2c]
	ldrb r1, [r0, #0x10]
	ldrb r2, [r0, #0x11]
	adds r0, r4, #0
	bl sub_8071830
	adds r5, r4, #0
	adds r5, #0x4a
	movs r1, #0
	ldrsh r0, [r5, r1]
	movs r1, #3
	bl __divsi3
	strh r0, [r5]
	adds r4, #0x48
	strh r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80715B4
sub_80715B4: @ 0x080715B4
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0
	bl sub_807054C
	adds r1, r4, #0
	adds r1, #0x48
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _080715D4
	adds r0, r4, #0
	bl Proc_Break
_080715D4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80715DC
sub_80715DC: @ 0x080715DC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080715F8 @ =0x0203D440
	movs r3, #0
	strb r4, [r0, #0x10]
	strb r1, [r0, #0x11]
	strh r2, [r0, #0x12]
	str r3, [r0, #0x14]
	str r3, [r0, #0x18]
	bl sub_8071748
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080715F8: .4byte 0x0203D440

	thumb_func_start sub_80715FC
sub_80715FC: @ 0x080715FC
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r6, r0, #0
	ldr r4, _0807163C @ =0x08678020
	adds r0, r4, #0
	bl Proc_Find
	adds r5, r0, #0
	cmp r5, #0
	bne _08071644
	adds r0, r4, #0
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	ldr r0, _08071640 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807162A
	movs r0, #0x70
	bl m4aSongNumStart
_0807162A:
	ldrb r1, [r6, #0x10]
	ldrb r2, [r6, #0x11]
	adds r0, r5, #0
	bl sub_8071830
	adds r0, r5, #0
	bl sub_8071838
	b _08071660
	.align 2, 0
_0807163C: .4byte 0x08678020
_08071640: .4byte gPlaySt
_08071644:
	ldrh r0, [r5, #0x30]
	strh r0, [r5, #0x38]
	ldrh r0, [r5, #0x32]
	strh r0, [r5, #0x3a]
	adds r0, r5, #0
	adds r0, #0x44
	ldrh r1, [r0]
	subs r0, #4
	strh r1, [r0]
	adds r0, #6
	ldrh r0, [r0]
	adds r1, r5, #0
	adds r1, #0x42
	strh r0, [r1]
_08071660:
	str r6, [r5, #0x2c]
	adds r1, r5, #0
	adds r1, #0x48
	movs r0, #0
	strh r0, [r1]
	adds r1, #2
	movs r0, #0xc
	strh r0, [r1]
	ldrh r0, [r6, #0x12]
	adds r4, r5, #0
	adds r4, #0x4c
	strh r0, [r4]
	movs r0, #1
	bl SetTextFontGlyphs
	ldrh r0, [r4]
	bl DecodeMsg
	add r2, sp, #4
	mov r1, sp
	bl GetStringTextBox
	movs r0, #0
	bl SetTextFontGlyphs
	ldr r1, [sp]
	ldr r2, [sp, #4]
	adds r0, r5, #0
	bl sub_8071778
	ldrb r1, [r6, #0x10]
	ldrb r2, [r6, #0x11]
	adds r0, r5, #0
	bl sub_80717B8
	bl sub_8071514
	adds r0, r5, #0
	adds r0, #0x4e
	ldrh r0, [r0]
	ldrh r1, [r4]
	bl sub_80714F8
	ldr r0, _080716C4 @ =0x0203D45C
	str r6, [r0]
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080716C4: .4byte 0x0203D45C

	thumb_func_start sub_80716C8
sub_80716C8: @ 0x080716C8
	push {lr}
	ldr r0, _080716E8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080716DA
	movs r0, #0x71
	bl m4aSongNumStart
_080716DA:
	bl sub_8071514
	ldr r0, _080716EC @ =0x08678020
	bl Proc_BreakEach
	pop {r0}
	bx r0
	.align 2, 0
_080716E8: .4byte gPlaySt
_080716EC: .4byte 0x08678020

	thumb_func_start sub_80716F0
sub_80716F0: @ 0x080716F0
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x50
	movs r1, #0
	strh r1, [r0]
	ldr r0, [r4, #0x2c]
	ldr r1, [r0, #0x14]
	cmp r1, #0
	beq _08071708
	adds r0, r4, #0
	bl _call_via_r1
_08071708:
	ldr r0, [r4, #0x2c]
	bl sub_80715FC
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8071714
sub_8071714: @ 0x08071714
	push {lr}
	adds r2, r0, #0
	ldr r0, _08071730 @ =gKeySt
	ldr r1, [r0]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0807172C
	adds r0, r2, #0
	bl Proc_Break
_0807172C:
	pop {r0}
	bx r0
	.align 2, 0
_08071730: .4byte gKeySt

	thumb_func_start sub_8071734
sub_8071734: @ 0x08071734
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80716C8
	adds r0, r4, #0
	bl Proc_End
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8071748
sub_8071748: @ 0x08071748
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0807175C @ =0x08678040
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807175C: .4byte 0x08678040

	thumb_func_start sub_8071760
sub_8071760: @ 0x08071760
	push {lr}
	ldr r0, _08071774 @ =0x08678040
	bl Proc_Find
	cmp r0, #0
	beq _0807176E
	movs r0, #1
_0807176E:
	pop {r1}
	bx r1
	.align 2, 0
_08071774: .4byte 0x08678040

	thumb_func_start sub_8071778
sub_8071778: @ 0x08071778
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	adds r4, #0x1f
	movs r0, #0xe0
	ands r4, r0
	adds r0, r6, #0
	adds r0, #0x4e
	ldrh r0, [r0]
	bl sub_8071848
	cmp r0, #1
	beq _0807179A
	cmp r0, #2
	beq _080717A0
	b _080717A8
_0807179A:
	movs r4, #0xa0
	adds r5, #0x20
	b _080717A8
_080717A0:
	cmp r4, #0x5f
	bgt _080717A6
	movs r4, #0x60
_080717A6:
	adds r5, #0x10
_080717A8:
	adds r0, r6, #0
	adds r0, #0x44
	strh r4, [r0]
	adds r0, #2
	strh r5, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_80717B8
sub_80717B8: @ 0x080717B8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r4, r1, #0
	mov r8, r2
	adds r0, #0x44
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r6, r0, #0
	adds r6, #0x10
	adds r0, r5, #0
	adds r0, #0x46
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r7, r0, #0
	adds r7, #0x10
	adds r0, r6, #0
	movs r1, #6
	bl __divsi3
	adds r0, #0x10
	subs r4, r4, r0
	strh r4, [r5, #0x3c]
	lsls r4, r4, #0x10
	cmp r4, #0
	bge _080717F2
	movs r0, #0
	strh r0, [r5, #0x3c]
_080717F2:
	movs r1, #0x3c
	ldrsh r0, [r5, r1]
	adds r0, r0, r6
	cmp r0, #0xf0
	ble _08071802
	movs r0, #0xf0
	subs r0, r0, r6
	strh r0, [r5, #0x3c]
_08071802:
	mov r0, r8
	adds r0, #0x10
	strh r0, [r5, #0x3e]
	movs r1, #0x3e
	ldrsh r0, [r5, r1]
	adds r0, r0, r7
	cmp r0, #0xa0
	ble _08071818
	mov r1, r8
	subs r0, r1, r7
	strh r0, [r5, #0x3e]
_08071818:
	ldrh r0, [r5, #0x3c]
	adds r0, #8
	strh r0, [r5, #0x3c]
	ldrh r0, [r5, #0x3e]
	adds r0, #8
	strh r0, [r5, #0x3e]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8071830
sub_8071830: @ 0x08071830
	strh r1, [r0, #0x38]
	strh r2, [r0, #0x3a]
	bx lr
	.align 2, 0

	thumb_func_start sub_8071838
sub_8071838: @ 0x08071838
	adds r2, r0, #0
	adds r2, #0x40
	movs r1, #0x20
	strh r1, [r2]
	adds r0, #0x42
	movs r1, #0x10
	strh r1, [r0]
	bx lr

	thumb_func_start sub_8071848
sub_8071848: @ 0x08071848
	push {r4, lr}
	adds r4, r0, #0
	bl GetItemAttributes
	movs r1, #0x80
	lsls r1, r1, #3
	ands r1, r0
	cmp r1, #0
	bne _0807187A
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #1
	ands r1, r0
	cmp r1, #0
	beq _0807186C
	movs r0, #1
	b _08071880
_0807186C:
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #4
	ands r1, r0
	cmp r1, #0
	bne _0807187E
_0807187A:
	movs r0, #0
	b _08071880
_0807187E:
	movs r0, #2
_08071880:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8071888
sub_8071888: @ 0x08071888
	push {lr}
	adds r2, r0, #0
	ldr r0, _080718A4 @ =gKeySt
	ldr r1, [r0]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080718A0
	adds r0, r2, #0
	bl Proc_Break
_080718A0:
	pop {r0}
	bx r0
	.align 2, 0
_080718A4: .4byte gKeySt

	thumb_func_start sub_80718A8
sub_80718A8: @ 0x080718A8
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	movs r1, #1
	rsbs r1, r1, #0
	movs r0, #0
	bl sub_8070E70
	bl sub_8041660
	adds r4, r0, #0
	bl sub_804166C
	adds r1, r0, #0
	adds r0, r4, #0
	adds r2, r5, #0
	bl sub_80715DC
	ldr r0, _080718DC @ =0x08678070
	adds r1, r6, #0
	bl SpawnProcLocking
	movs r0, #1
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_080718DC: .4byte 0x08678070

	thumb_func_start sub_80718E0
sub_80718E0: @ 0x080718E0
	push {lr}
	ldr r0, _080718F0 @ =0x08678080
	bl Proc_Find
	cmp r0, #0
	bne _080718F4
	movs r0, #0
	b _080718F6
	.align 2, 0
_080718F0: .4byte 0x08678080
_080718F4:
	movs r0, #1
_080718F6:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80718FC
sub_80718FC: @ 0x080718FC
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r5, r1, #0
	cmp r7, #0
	bne _08071908
	ldr r7, _08071968 @ =0x06013000
_08071908:
	cmp r5, #0
	bge _0807190E
	movs r5, #5
_0807190E:
	movs r4, #0xf
	adds r0, r4, #0
	ands r0, r5
	adds r5, r0, #0
	adds r5, #0x10
	ldr r0, _0807196C @ =0x08308A78
	adds r1, r7, #0
	bl Decompress
	ldr r6, _08071970 @ =0x0203D460
	adds r0, r6, #0
	adds r1, r7, #0
	adds r2, r5, #0
	bl InitSpriteTextFont
	adds r0, r6, #0
	adds r0, #0x18
	bl InitSpriteText
	adds r0, r6, #0
	adds r0, #0x20
	bl InitSpriteText
	adds r0, r6, #0
	adds r0, #0x28
	bl InitSpriteText
	movs r0, #0
	bl SetTextFont
	ldr r0, _08071974 @ =0x08100A48
	lsls r1, r5, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	lsls r0, r7, #0x11
	lsrs r0, r0, #0x16
	ands r5, r4
	lsls r1, r5, #0xc
	adds r0, r0, r1
	strh r0, [r6, #0x30]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08071968: .4byte 0x06013000
_0807196C: .4byte 0x08308A78
_08071970: .4byte 0x0203D460
_08071974: .4byte 0x08100A48

	thumb_func_start sub_8071978
sub_8071978: @ 0x08071978
	push {r4, r5, r6, lr}
	adds r3, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	adds r0, #0x46
	movs r1, #0
	ldrsh r0, [r0, r1]
	adds r2, r0, #0
	adds r2, #0x10
	adds r1, r3, #0
	adds r1, #0x44
	movs r6, #0
	ldrsh r0, [r1, r6]
	cmp r0, #0xbf
	ble _0807199A
	movs r0, #0xc0
	strh r0, [r1]
_0807199A:
	movs r6, #0
	ldrsh r0, [r1, r6]
	adds r1, r0, #0
	adds r1, #0x10
	strh r4, [r3, #0x3c]
	movs r4, #0x3c
	ldrsh r0, [r3, r4]
	adds r0, r0, r1
	cmp r0, #0xf0
	ble _080719B4
	movs r0, #0xf0
	subs r0, r0, r1
	strh r0, [r3, #0x3c]
_080719B4:
	adds r0, r5, #0
	adds r0, #8
	strh r0, [r3, #0x3e]
	movs r6, #0x3e
	ldrsh r0, [r3, r6]
	adds r0, r0, r2
	cmp r0, #0xa0
	ble _080719CA
	subs r0, r5, r2
	subs r0, #8
	strh r0, [r3, #0x3e]
_080719CA:
	ldrh r0, [r3, #0x3c]
	adds r0, #8
	strh r0, [r3, #0x3c]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80719D8
sub_80719D8: @ 0x080719D8
	adds r1, #0x27
	movs r3, #0xe0
	ands r1, r3
	adds r3, r0, #0
	adds r3, #0x44
	strh r1, [r3]
	adds r0, #0x46
	strh r2, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_80719EC
sub_80719EC: @ 0x080719EC
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x38
	ldrb r0, [r1]
	cmp r0, #0xff
	bne _08071A06
	movs r1, #1
	rsbs r1, r1, #0
	movs r0, #0
	bl sub_80718FC
	b _08071A0E
_08071A06:
	ldrb r1, [r1]
	movs r0, #0
	bl sub_80718FC
_08071A0E:
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	ldr r2, [r4, #0x34]
	bl sub_8071D04
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start nullsub_36
nullsub_36: @ 0x08071A20
	bx lr
	.align 2, 0

	thumb_func_start sub_8071A24
sub_8071A24: @ 0x08071A24
	push {lr}
	movs r0, #0
	bl SetTextFontGlyphs
	bl sub_8071B6C
	pop {r0}
	bx r0

	thumb_func_start sub_8071A34
sub_8071A34: @ 0x08071A34
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r7, r0, #0
	adds r5, r1, #0
	movs r0, #0x38
	ldrsh r1, [r7, r0]
	movs r3, #0x3c
	ldrsh r2, [r7, r3]
	adds r4, r7, #0
	adds r4, #0x48
	movs r0, #0
	ldrsh r6, [r4, r0]
	mov r8, r6
	movs r3, #0x4a
	adds r3, r3, r7
	mov sl, r3
	movs r6, #0
	ldrsh r0, [r3, r6]
	str r0, [sp]
	adds r0, r5, #0
	mov r3, r8
	bl Interpolate
	mov sb, r0
	movs r0, #0x3a
	ldrsh r1, [r7, r0]
	movs r3, #0x3e
	ldrsh r2, [r7, r3]
	movs r0, #0
	ldrsh r6, [r4, r0]
	mov r8, r6
	mov r3, sl
	movs r6, #0
	ldrsh r0, [r3, r6]
	str r0, [sp]
	adds r0, r5, #0
	mov r3, r8
	bl Interpolate
	mov r8, r0
	adds r0, r7, #0
	adds r0, #0x40
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r0, #4
	movs r3, #0
	ldrsh r2, [r0, r3]
	movs r0, #0
	ldrsh r6, [r4, r0]
	mov ip, r6
	mov r3, sl
	movs r6, #0
	ldrsh r0, [r3, r6]
	str r0, [sp]
	adds r0, r5, #0
	mov r3, ip
	bl Interpolate
	str r0, [sp, #4]
	adds r0, r7, #0
	adds r0, #0x42
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r0, #4
	movs r3, #0
	ldrsh r2, [r0, r3]
	movs r6, #0
	ldrsh r3, [r4, r6]
	mov r4, sl
	movs r6, #0
	ldrsh r0, [r4, r6]
	str r0, [sp]
	adds r0, r5, #0
	bl Interpolate
	adds r3, r0, #0
	mov r0, sb
	strh r0, [r7, #0x30]
	mov r2, r8
	strh r2, [r7, #0x32]
	mov r0, sb
	mov r1, r8
	ldr r2, [sp, #4]
	bl sub_8071D94
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8071AF8
sub_8071AF8: @ 0x08071AF8
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r1, #5
	bl sub_8071A34
	adds r2, r4, #0
	adds r2, #0x48
	adds r4, #0x4a
	ldrh r3, [r2]
	movs r0, #0
	ldrsh r1, [r2, r0]
	movs r5, #0
	ldrsh r0, [r4, r5]
	cmp r1, r0
	bge _08071B1A
	adds r0, r3, #1
	strh r0, [r2]
_08071B1A:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8071B20
sub_8071B20: @ 0x08071B20
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_8070B20
	adds r5, r4, #0
	adds r5, #0x4a
	movs r1, #0
	ldrsh r0, [r5, r1]
	movs r1, #3
	bl __divsi3
	strh r0, [r5]
	adds r4, #0x48
	strh r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8071B44
sub_8071B44: @ 0x08071B44
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0
	bl sub_8071A34
	adds r1, r4, #0
	adds r1, #0x48
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _08071B64
	adds r0, r4, #0
	bl Proc_Break
_08071B64:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8071B6C
sub_8071B6C: @ 0x08071B6C
	push {lr}
	bl sub_80721D0
	ldr r0, _08071B7C @ =0x086780C8
	bl Proc_BreakEach
	pop {r0}
	bx r0
	.align 2, 0
_08071B7C: .4byte 0x086780C8

	thumb_func_start sub_8071B80
sub_8071B80: @ 0x08071B80
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	cmp r3, #0
	bne _08071B9C
	ldr r0, _08071B98 @ =0x08678080
	movs r1, #3
	bl SpawnProc
	b _08071BA4
	.align 2, 0
_08071B98: .4byte 0x08678080
_08071B9C:
	ldr r0, _08071BBC @ =0x08678080
	adds r1, r3, #0
	bl SpawnProcLocking
_08071BA4:
	adds r3, r0, #0
	str r4, [r3, #0x2c]
	str r5, [r3, #0x30]
	str r6, [r3, #0x34]
	adds r1, r3, #0
	adds r1, #0x38
	movs r0, #0xff
	strb r0, [r1]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08071BBC: .4byte 0x08678080

	thumb_func_start sub_8071BC0
sub_8071BC0: @ 0x08071BC0
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r7, r2, #0
	ldr r0, [sp, #0x14]
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r3, #0
	bne _08071BE0
	ldr r0, _08071BDC @ =0x08678080
	movs r1, #3
	bl SpawnProc
	b _08071BE8
	.align 2, 0
_08071BDC: .4byte 0x08678080
_08071BE0:
	ldr r0, _08071BFC @ =0x08678080
	adds r1, r3, #0
	bl SpawnProcLocking
_08071BE8:
	adds r3, r0, #0
	str r5, [r3, #0x2c]
	str r6, [r3, #0x30]
	str r7, [r3, #0x34]
	adds r0, r3, #0
	adds r0, #0x38
	strb r4, [r0]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08071BFC: .4byte 0x08678080

	thumb_func_start sub_8071C00
sub_8071C00: @ 0x08071C00
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r3, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	movs r7, #0
	movs r6, #0x10
	str r7, [r4]
	str r7, [r5]
_08071C12:
	ldrb r0, [r3]
	cmp r0, #4
	bhi _08071C74
	lsls r0, r0, #2
	ldr r1, _08071C24 @ =_08071C28
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08071C24: .4byte _08071C28
_08071C28: @ jump table
	.4byte _08071C62 @ case 0
	.4byte _08071C3C @ case 1
	.4byte _08071C4C @ case 2
	.4byte _08071C4C @ case 3
	.4byte _08071C48 @ case 4
_08071C3C:
	adds r6, #0x10
	ldr r0, [r4]
	cmp r0, r7
	bge _08071C46
	str r7, [r4]
_08071C46:
	movs r7, #0
_08071C48:
	adds r3, #1
	b _08071C12
_08071C4C:
	ldr r0, [r4]
	cmp r0, r7
	bge _08071C54
	str r7, [r4]
_08071C54:
	movs r7, #0
	ldr r0, [r5]
	cmp r0, r6
	bge _08071C5E
	str r6, [r5]
_08071C5E:
	movs r6, #0
	b _08071C48
_08071C62:
	ldr r0, [r4]
	cmp r0, r7
	bge _08071C6A
	str r7, [r4]
_08071C6A:
	ldr r0, [r5]
	cmp r0, r6
	bge _08071C84
	str r6, [r5]
	b _08071C84
_08071C74:
	adds r0, r3, #0
	mov r1, sp
	bl GetCharTextLen
	adds r3, r0, #0
	ldr r0, [sp]
	adds r7, r7, r0
	b _08071C12
_08071C84:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8071C8C
sub_8071C8C: @ 0x08071C8C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r7, r1, #0
	mov r8, r2
	movs r6, #0
	movs r5, #0
	adds r4, r0, #0
	strb r5, [r7]
	strb r5, [r2]
	movs r0, #1
	bl SetTextFontGlyphs
_08071CA8:
	ldrb r0, [r4]
	cmp r0, #4
	bhi _08071CDC
	lsls r0, r0, #2
	ldr r1, _08071CB8 @ =_08071CBC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08071CB8: .4byte _08071CBC
_08071CBC: @ jump table
	.4byte _08071CEC @ case 0
	.4byte _08071CD4 @ case 1
	.4byte _08071CEC @ case 2
	.4byte _08071CEC @ case 3
	.4byte _08071CD0 @ case 4
_08071CD0:
	adds r4, #1
	b _08071CA8
_08071CD4:
	adds r4, #1
	adds r5, #0x10
	movs r6, #0
	b _08071CA8
_08071CDC:
	adds r0, r4, #0
	mov r1, sp
	bl GetCharTextLen
	adds r4, r0, #0
	ldr r0, [sp]
	adds r6, r6, r0
	b _08071CA8
_08071CEC:
	adds r0, r6, #2
	strb r0, [r7]
	adds r0, r5, #0
	adds r0, #8
	mov r1, r8
	strb r0, [r1]
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8071D04
sub_8071D04: @ 0x08071D04
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	sub sp, #8
	mov r8, r0
	mov sb, r1
	adds r6, r2, #0
	ldr r0, _08071D90 @ =0x086780C8
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	mov r1, r8
	mov r2, sb
	bl sub_8070AFC
	adds r0, r4, #0
	bl sub_8070B20
	movs r1, #0
	str r1, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x48
	strh r1, [r0]
	adds r2, r4, #0
	adds r2, #0x4a
	movs r0, #0xc
	strh r0, [r2]
	adds r0, r4, #0
	adds r0, #0x4e
	strh r1, [r0]
	adds r5, r4, #0
	adds r5, #0x4c
	strh r6, [r5]
	movs r0, #1
	bl SetTextFontGlyphs
	ldrh r0, [r5]
	bl DecodeMsg
	add r2, sp, #4
	mov r1, sp
	bl sub_8071C00
	movs r0, #0
	bl SetTextFontGlyphs
	ldr r1, [sp]
	ldr r2, [sp, #4]
	adds r0, r4, #0
	bl sub_80719D8
	adds r0, r4, #0
	mov r1, r8
	mov r2, sb
	bl sub_8071978
	bl sub_80721D0
	ldrh r0, [r5]
	bl sub_80721B8
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08071D90: .4byte 0x086780C8

	thumb_func_start sub_8071D94
sub_8071D94: @ 0x08071D94
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	mov sb, r0
	mov sl, r1
	adds r7, r2, #0
	mov r8, r3
	cmp r7, #0x1f
	bgt _08071DAE
	movs r7, #0x20
_08071DAE:
	cmp r7, #0xc0
	ble _08071DB4
	movs r7, #0xc0
_08071DB4:
	mov r0, r8
	cmp r0, #0xf
	bgt _08071DBE
	movs r1, #0x10
	mov r8, r1
_08071DBE:
	mov r3, r8
	cmp r3, #0x30
	ble _08071DC8
	movs r0, #0x30
	mov r8, r0
_08071DC8:
	adds r0, r7, #0
	adds r0, #0x1f
	cmp r0, #0
	bge _08071DD2
	adds r0, #0x1f
_08071DD2:
	asrs r0, r0, #5
	mov r1, r8
	adds r1, #0xf
	cmp r1, #0
	bge _08071DDE
	adds r1, #0xf
_08071DDE:
	asrs r1, r1, #4
	str r1, [sp, #4]
	subs r6, r0, #1
	str r6, [sp, #8]
	mov r1, sl
	subs r1, #8
	str r1, [sp, #0x18]
	mov r3, sl
	add r3, r8
	str r3, [sp, #0x10]
	mov r0, sb
	subs r0, #8
	str r0, [sp, #0x14]
	mov r1, sb
	adds r1, r1, r7
	str r1, [sp, #0xc]
	cmp r6, #0
	blt _08071E4A
_08071E02:
	ldr r5, [sp, #4]
	subs r4, r6, #1
	cmp r5, #0
	blt _08071E44
_08071E0A:
	adds r0, r6, #1
	lsls r1, r0, #5
	cmp r1, r7
	ble _08071E14
	adds r1, r7, #0
_08071E14:
	subs r1, #0x20
	adds r0, r5, #1
	lsls r0, r0, #4
	cmp r0, r8
	ble _08071E20
	mov r0, r8
_08071E20:
	subs r0, #0x10
	add r1, sb
	mov r3, sl
	adds r2, r3, r0
	ldr r3, _08071F28 @ =0x0203D460
	lsls r0, r6, #2
	ldrh r3, [r3, #0x30]
	adds r0, r3, r0
	lsls r3, r5, #6
	adds r0, r0, r3
	str r0, [sp]
	movs r0, #2
	ldr r3, _08071F2C @ =Sprite_32x16
	bl PutSprite
	subs r5, #1
	cmp r5, #0
	bge _08071E0A
_08071E44:
	adds r6, r4, #0
	cmp r6, #0
	bge _08071E02
_08071E4A:
	ldr r6, [sp, #8]
	cmp r6, #0
	blt _08071E8C
	ldr r5, _08071F28 @ =0x0203D460
_08071E52:
	adds r0, r6, #1
	lsls r1, r0, #5
	cmp r1, r7
	ble _08071E5C
	adds r1, r7, #0
_08071E5C:
	subs r1, #0x20
	mov r0, sb
	adds r4, r0, r1
	ldrh r0, [r5, #0x30]
	adds r0, #0x1b
	str r0, [sp]
	movs r0, #2
	adds r1, r4, #0
	ldr r2, [sp, #0x18]
	ldr r3, _08071F30 @ =0x085C39F0
	bl PutSprite
	ldrh r0, [r5, #0x30]
	adds r0, #0x1b
	str r0, [sp]
	movs r0, #2
	adds r1, r4, #0
	ldr r2, [sp, #0x10]
	ldr r3, _08071F34 @ =0x085C3A00
	bl PutSprite
	subs r6, #1
	cmp r6, #0
	bge _08071E52
_08071E8C:
	ldr r5, [sp, #4]
	cmp r5, #0
	blt _08071ECE
	ldr r6, _08071F28 @ =0x0203D460
_08071E94:
	adds r0, r5, #1
	lsls r0, r0, #4
	cmp r0, r8
	ble _08071E9E
	mov r0, r8
_08071E9E:
	subs r0, #0x10
	mov r1, sl
	adds r4, r1, r0
	ldrh r0, [r6, #0x30]
	adds r0, #0x1f
	str r0, [sp]
	movs r0, #2
	ldr r1, [sp, #0x14]
	adds r2, r4, #0
	ldr r3, _08071F38 @ =0x085C39C0
	bl PutSprite
	ldrh r0, [r6, #0x30]
	adds r0, #0x1f
	str r0, [sp]
	movs r0, #2
	ldr r1, [sp, #0xc]
	adds r2, r4, #0
	ldr r3, _08071F3C @ =0x085C3A08
	bl PutSprite
	subs r5, #1
	cmp r5, #0
	bge _08071E94
_08071ECE:
	ldr r3, _08071F40 @ =Sprite_8x8
	ldr r4, _08071F28 @ =0x0203D460
	ldrh r0, [r4, #0x30]
	adds r0, #0x3e
	str r0, [sp]
	movs r0, #2
	ldr r1, [sp, #0x14]
	ldr r2, [sp, #0x18]
	bl PutSprite
	ldr r3, _08071F44 @ =0x085C3A10
	ldrh r0, [r4, #0x30]
	adds r0, #0x3e
	str r0, [sp]
	movs r0, #2
	ldr r1, [sp, #0xc]
	ldr r2, [sp, #0x18]
	bl PutSprite
	ldr r3, _08071F48 @ =0x085C3A18
	ldrh r0, [r4, #0x30]
	adds r0, #0x3e
	str r0, [sp]
	movs r0, #2
	ldr r1, [sp, #0x14]
	ldr r2, [sp, #0x10]
	bl PutSprite
	ldr r3, _08071F4C @ =0x085C3A20
	ldrh r0, [r4, #0x30]
	adds r0, #0x3e
	str r0, [sp]
	movs r0, #2
	ldr r1, [sp, #0xc]
	ldr r2, [sp, #0x10]
	bl PutSprite
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08071F28: .4byte 0x0203D460
_08071F2C: .4byte Sprite_32x16
_08071F30: .4byte 0x085C39F0
_08071F34: .4byte 0x085C3A00
_08071F38: .4byte 0x085C39C0
_08071F3C: .4byte 0x085C3A08
_08071F40: .4byte Sprite_8x8
_08071F44: .4byte 0x085C3A10
_08071F48: .4byte 0x085C3A18
_08071F4C: .4byte 0x085C3A20

	thumb_func_start sub_8071F50
sub_8071F50: @ 0x08071F50
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x2c]
	adds r1, r2, #0
	adds r1, #0x56
	adds r2, #0x57
	bl sub_8071C8C
	pop {r0}
	bx r0

	thumb_func_start sub_8071F64
sub_8071F64: @ 0x08071F64
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	adds r5, r6, #0
	adds r5, #0x58
	ldrb r0, [r5]
	cmp r0, #1
	bne _08071FA4
	ldr r4, _08071FA0 @ =0x0203D460
	adds r0, r4, #0
	bl SetTextFont
	adds r0, r4, #0
	adds r0, #0x18
	bl SpriteText_DrawBackground
	adds r0, r4, #0
	adds r0, #0x20
	bl SpriteText_DrawBackground
	adds r4, #0x28
	adds r0, r4, #0
	bl SpriteText_DrawBackground
	movs r0, #0
	bl SetTextFont
	movs r0, #0
	strb r0, [r5]
	b _080720D4
	.align 2, 0
_08071FA0: .4byte 0x0203D460
_08071FA4:
	adds r0, r6, #0
	adds r0, #0x52
	movs r1, #0
	ldrsh r7, [r0, r1]
	ldr r0, _08071FC0 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0xf3
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08071FC4
	movs r7, #0x80
	b _08071FDE
	.align 2, 0
_08071FC0: .4byte gKeySt
_08071FC4:
	adds r1, r6, #0
	adds r1, #0x4e
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	ble _08071FD6
	b _080720D4
_08071FD6:
	adds r0, r6, #0
	adds r0, #0x50
	ldrh r0, [r0]
	strh r0, [r1]
_08071FDE:
	ldr r0, [r6, #0x30]
	bl SetTextFont
	movs r5, #0
	cmp r5, r7
	bge _080720CE
_08071FEA:
	ldr r2, [r6, #0x2c]
	ldrb r0, [r2]
	adds r3, r2, #0
	cmp r0, #4
	bhi _0807208C
	lsls r0, r0, #2
	ldr r1, _08072000 @ =_08072004
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08072000: .4byte _08072004
_08072004: @ jump table
	.4byte _08072018 @ case 0
	.4byte _08072020 @ case 1
	.4byte _08072036 @ case 2
	.4byte _08072036 @ case 3
	.4byte _08072030 @ case 4
_08072018:
	adds r0, r6, #0
	bl Proc_Break
	b _080720CE
_08072020:
	adds r0, r3, #1
	str r0, [r6, #0x2c]
	adds r1, r6, #0
	adds r1, #0x4c
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	b _080720C8
_08072030:
	adds r0, r3, #1
	str r0, [r6, #0x2c]
	b _080720C8
_08072036:
	adds r1, r6, #0
	adds r1, #0x4c
	movs r0, #0
	strh r0, [r1]
	ldr r0, [r6, #0x2c]
	adds r0, #1
	str r0, [r6, #0x2c]
	adds r1, #0xc
	movs r0, #1
	strb r0, [r1]
	ldr r0, [r6, #0x2c]
	ldrb r2, [r0]
	cmp r2, #1
	bne _08072056
	adds r0, #1
	str r0, [r6, #0x2c]
_08072056:
	ldr r0, _08072088 @ =0x086780C8
	bl Proc_Find
	movs r3, #0x3c
	ldrsh r1, [r0, r3]
	adds r5, r6, #0
	adds r5, #0x56
	ldrb r2, [r5]
	adds r1, r2, r1
	movs r3, #0x3e
	ldrsh r2, [r0, r3]
	adds r4, r6, #0
	adds r4, #0x57
	ldrb r0, [r4]
	adds r2, r0, r2
	adds r0, r6, #0
	bl StartTalkWaitForInput
	ldr r0, [r6, #0x2c]
	adds r1, r5, #0
	adds r2, r4, #0
	bl sub_8071C8C
	b _080720CE
	.align 2, 0
_08072088: .4byte 0x086780C8
_0807208C:
	adds r0, r6, #0
	adds r0, #0x4c
	movs r3, #0
	ldrsh r1, [r0, r3]
	lsls r1, r1, #2
	subs r0, #0x18
	adds r0, r0, r1
	ldr r0, [r0]
	adds r1, r2, #0
	bl Text_DrawCharacter
	str r0, [r6, #0x2c]
	bl GetTextPrintDelay
	adds r4, r0, #0
	cmp r4, #1
	bne _080720B8
	bl GetGameTime
	ands r0, r4
	cmp r0, #0
	beq _080720C8
_080720B8:
	ldr r0, _080720DC @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080720C8
	movs r0, #0x6e
	bl m4aSongNumStart
_080720C8:
	adds r5, #1
	cmp r5, r7
	blt _08071FEA
_080720CE:
	movs r0, #0
	bl SetTextFont
_080720D4:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080720DC: .4byte gPlaySt

	thumb_func_start sub_80720E0
sub_80720E0: @ 0x080720E0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080720FC @ =0x08678080
	bl Proc_Find
	movs r1, #0
	bl Proc_Goto
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080720FC: .4byte 0x08678080

	thumb_func_start sub_8072100
sub_8072100: @ 0x08072100
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, sb
	mov r4, r8
	push {r4, r5, r6}
	mov sl, r0
	ldr r5, _080721B0 @ =0x0203D460
	adds r0, r5, #0
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	movs r0, #1
	bl SetTextFontGlyphs
	movs r0, #0x18
	adds r0, r0, r5
	mov sb, r0
	movs r1, #6
	bl Text_SetColor
	movs r1, #0x20
	adds r1, r1, r5
	mov r8, r1
	mov r0, r8
	movs r1, #6
	bl Text_SetColor
	adds r6, r5, #0
	adds r6, #0x28
	adds r0, r6, #0
	movs r1, #6
	bl Text_SetColor
	movs r0, #0
	bl SetTextFont
	ldr r4, _080721B4 @ =0x086780E8
	adds r0, r4, #0
	bl Proc_EndEach
	adds r0, r4, #0
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	str r5, [r4, #0x30]
	mov r0, sb
	str r0, [r4, #0x34]
	mov r1, r8
	str r1, [r4, #0x38]
	str r6, [r4, #0x3c]
	adds r0, r4, #0
	adds r0, #0x4c
	movs r5, #0
	strh r5, [r0]
	mov r1, sl
	ldr r0, [r1, #0x5c]
	bl DecodeMsg
	str r0, [r4, #0x2c]
	bl GetTextPrintDelay
	adds r1, r4, #0
	adds r1, #0x50
	strh r0, [r1]
	lsls r0, r0, #0x10
	movs r1, #0x80
	cmp r0, #0
	beq _08072190
	movs r1, #1
_08072190:
	adds r0, r4, #0
	adds r0, #0x52
	strh r1, [r0]
	subs r0, #4
	strh r5, [r0]
	adds r1, r4, #0
	adds r1, #0x58
	movs r0, #0
	strb r0, [r1]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080721B0: .4byte 0x0203D460
_080721B4: .4byte 0x086780E8

	thumb_func_start sub_80721B8
sub_80721B8: @ 0x080721B8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080721CC @ =0x08678110
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x5c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080721CC: .4byte 0x08678110

	thumb_func_start sub_80721D0
sub_80721D0: @ 0x080721D0
	push {r4, lr}
	ldr r4, _0807220C @ =0x0203D460
	adds r0, r4, #0
	bl SetTextFont
	adds r0, r4, #0
	adds r0, #0x18
	bl SpriteText_DrawBackground
	adds r0, r4, #0
	adds r0, #0x20
	bl SpriteText_DrawBackground
	adds r4, #0x28
	adds r0, r4, #0
	bl SpriteText_DrawBackground
	ldr r0, _08072210 @ =0x086780E8
	bl Proc_EndEach
	ldr r0, _08072214 @ =0x08678110
	bl Proc_EndEach
	movs r0, #0
	bl SetTextFont
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807220C: .4byte 0x0203D460
_08072210: .4byte 0x086780E8
_08072214: .4byte 0x08678110

	thumb_func_start sub_8072218
sub_8072218: @ 0x08072218
	adds r3, r0, #0
	lsls r1, r1, #0x10
	lsrs r0, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #5
	ble _08072226
	movs r0, #5
_08072226:
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r2
	strh r0, [r3]
	bx lr

	thumb_func_start sub_8072230
sub_8072230: @ 0x08072230
	push {r4, r5, lr}
	adds r3, r0, #0
	lsls r1, r1, #0x10
	asrs r4, r1, #0x13
	movs r0, #0xe0
	lsls r0, r0, #0xb
	ands r0, r1
	asrs r0, r0, #0x10
	movs r1, #0
	adds r5, r2, #0
	adds r5, #0xe
	adds r2, #6
	adds r0, r2, r0
_0807224A:
	cmp r1, r4
	bge _08072252
	strh r5, [r3]
	b _0807225C
_08072252:
	cmp r1, r4
	bne _0807225A
	strh r0, [r3]
	b _0807225C
_0807225A:
	strh r2, [r3]
_0807225C:
	adds r3, #2
	adds r1, #1
	cmp r1, #3
	ble _0807224A
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807226C
sub_807226C: @ 0x0807226C
	push {r4, lr}
	adds r4, r0, #0
	lsls r1, r1, #0x10
	lsrs r3, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #4
	ble _0807227C
	movs r3, #5
_0807227C:
	lsls r0, r3, #0x10
	cmp r0, #0
	bge _08072284
	movs r3, #0
_08072284:
	adds r1, r2, #0
	adds r1, #0xf
	lsls r0, r3, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r1
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8072298
sub_8072298: @ 0x08072298
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	adds r0, r6, #0
	bl GetUnitCurrentHp
	movs r1, #0x2a
	adds r4, r0, #0
	muls r4, r1, r4
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r0, r6, #0
	bl GetUnitMaxHp
	adds r1, r0, #0
	adds r0, r4, #0
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r0, r5, #0
	adds r1, r4, #0
	mov r2, r8
	bl sub_8072218
	adds r0, r5, #2
	subs r1, r4, #5
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	mov r2, r8
	bl sub_8072230
	adds r5, #0xa
	subs r4, #0x25
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r0, r5, #0
	adds r1, r4, #0
	mov r2, r8
	bl sub_807226C
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_80722FC
sub_80722FC: @ 0x080722FC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	adds r1, r6, #0
	adds r1, #0x4d
	movs r4, #0
	movs r0, #1
	strb r0, [r1]
	str r4, [sp]
	ldr r7, _08072374 @ =gBg0Tm
	ldr r5, _08072378 @ =0x01000060
	mov r0, sp
	adds r1, r7, #0
	adds r2, r5, #0
	bl CpuFastSet
	str r4, [sp, #4]
	add r0, sp, #4
	ldr r1, _0807237C @ =gBg1Tm
	mov r8, r1
	adds r2, r5, #0
	bl CpuFastSet
	movs r0, #3
	bl EnableBgSync
	ldr r1, _08072380 @ =0x08678164
	ldr r0, [r6, #0x50]
	adds r0, r0, r1
	movs r5, #0
	ldrsb r5, [r0, r5]
	adds r0, r6, #0
	adds r0, #0x48
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _0807238C
	movs r4, #0xc
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r0, _08072384 @ =0x02003238
	adds r0, r4, r0
	adds r1, r7, #0
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_t
	ldr r0, _08072388 @ =0x02003738
	adds r4, r4, r0
	adds r0, r4, #0
	mov r1, r8
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_t
	b _080723AC
	.align 2, 0
_08072374: .4byte gBg0Tm
_08072378: .4byte 0x01000060
_0807237C: .4byte gBg1Tm
_08072380: .4byte 0x08678164
_08072384: .4byte 0x02003238
_08072388: .4byte 0x02003738
_0807238C:
	ldr r0, _080723F8 @ =0x02003238
	movs r4, #0x1e
	subs r4, r4, r5
	lsls r4, r4, #1
	adds r1, r4, r7
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_t
	ldr r0, _080723FC @ =0x02003738
	add r4, r8
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_t
_080723AC:
	ldr r0, [r6, #0x50]
	adds r0, #1
	str r0, [r6, #0x50]
	cmp r0, #4
	bne _080723EA
	adds r1, r6, #0
	adds r1, #0x4d
	movs r0, #0
	strb r0, [r1]
	str r0, [r6, #0x50]
	adds r0, r6, #0
	bl Proc_Break
	ldr r2, _08072400 @ =gBmSt
	movs r3, #0x16
	ldrsh r0, [r2, r3]
	ldr r1, _08072404 @ =gMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r3, #0x14
	ldrsh r1, [r2, r3]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl GetUnit
	adds r1, r0, #0
	adds r0, r6, #0
	bl sub_80728A4
_080723EA:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080723F8: .4byte 0x02003238
_080723FC: .4byte 0x02003738
_08072400: .4byte gBmSt
_08072404: .4byte gMapUnit

	thumb_func_start sub_8072408
sub_8072408: @ 0x08072408
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	adds r1, r6, #0
	adds r1, #0x4d
	movs r4, #0
	movs r0, #1
	strb r0, [r1]
	str r4, [sp]
	ldr r7, _08072480 @ =gBg0Tm
	ldr r5, _08072484 @ =0x01000060
	mov r0, sp
	adds r1, r7, #0
	adds r2, r5, #0
	bl CpuFastSet
	str r4, [sp, #4]
	add r0, sp, #4
	ldr r1, _08072488 @ =gBg1Tm
	mov r8, r1
	adds r2, r5, #0
	bl CpuFastSet
	movs r0, #3
	bl EnableBgSync
	ldr r1, _0807248C @ =0x08678168
	ldr r0, [r6, #0x50]
	adds r0, r0, r1
	movs r5, #0
	ldrsb r5, [r0, r5]
	adds r0, r6, #0
	adds r0, #0x48
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _08072498
	movs r4, #0xc
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r0, _08072490 @ =0x02003238
	adds r0, r4, r0
	adds r1, r7, #0
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_t
	ldr r0, _08072494 @ =0x02003738
	adds r4, r4, r0
	adds r0, r4, #0
	mov r1, r8
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_t
	b _080724B8
	.align 2, 0
_08072480: .4byte gBg0Tm
_08072484: .4byte 0x01000060
_08072488: .4byte gBg1Tm
_0807248C: .4byte 0x08678168
_08072490: .4byte 0x02003238
_08072494: .4byte 0x02003738
_08072498:
	ldr r0, _080724D8 @ =0x02003238
	movs r4, #0x1e
	subs r4, r4, r5
	lsls r4, r4, #1
	adds r1, r4, r7
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_t
	ldr r0, _080724DC @ =0x02003738
	add r4, r8
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #6
	bl TmCopyRect_t
_080724B8:
	ldr r0, [r6, #0x50]
	adds r0, #1
	str r0, [r6, #0x50]
	cmp r0, #3
	bne _080724CC
	movs r0, #0
	str r0, [r6, #0x50]
	adds r0, r6, #0
	bl Proc_Break
_080724CC:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080724D8: .4byte 0x02003238
_080724DC: .4byte 0x02003738

	thumb_func_start sub_80724E0
sub_80724E0: @ 0x080724E0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	adds r1, r6, #0
	adds r1, #0x4d
	movs r0, #1
	strb r0, [r1]
	ldr r7, _08072570 @ =0x02021E48
	adds r0, r7, #0
	movs r1, #6
	movs r2, #7
	movs r3, #0
	bl TmFillRect_t
	ldr r0, _08072574 @ =0x02022648
	mov r8, r0
	movs r1, #6
	movs r2, #7
	movs r3, #0
	bl TmFillRect_t
	adds r0, r7, #0
	adds r0, #0x30
	movs r1, #6
	movs r2, #7
	movs r3, #0
	bl TmFillRect_t
	mov r0, r8
	adds r0, #0x30
	movs r1, #6
	movs r2, #7
	movs r3, #0
	bl TmFillRect_t
	movs r0, #3
	bl EnableBgSync
	ldr r1, _08072578 @ =0x0867816B
	ldr r0, [r6, #0x50]
	adds r0, r0, r1
	movs r5, #0
	ldrsb r5, [r0, r5]
	adds r0, r6, #0
	adds r0, #0x48
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _08072584
	movs r4, #0xa3
	lsls r4, r4, #1
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r0, _0807257C @ =0x02003238
	adds r0, r4, r0
	adds r1, r7, #0
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_t
	ldr r0, _08072580 @ =0x02003738
	adds r4, r4, r0
	adds r0, r4, #0
	mov r1, r8
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_t
	b _080725AE
	.align 2, 0
_08072570: .4byte 0x02021E48
_08072574: .4byte 0x02022648
_08072578: .4byte 0x0867816B
_0807257C: .4byte 0x02003238
_08072580: .4byte 0x02003738
_08072584:
	ldr r0, _080725D4 @ =0x020034B8
	movs r4, #0xdf
	lsls r4, r4, #1
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r2, _080725D8 @ =0xFFFFFCC0
	adds r1, r7, r2
	adds r1, r4, r1
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_t
	ldr r0, _080725DC @ =0x020039B8
	ldr r1, _080725D8 @ =0xFFFFFCC0
	add r1, r8
	adds r4, r4, r1
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_t
_080725AE:
	ldr r0, [r6, #0x50]
	adds r0, #1
	str r0, [r6, #0x50]
	cmp r0, #3
	bne _080725C8
	movs r0, #0
	str r0, [r6, #0x50]
	adds r1, r6, #0
	adds r1, #0x4d
	strb r0, [r1]
	adds r0, r6, #0
	bl Proc_Break
_080725C8:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080725D4: .4byte 0x020034B8
_080725D8: .4byte 0xFFFFFCC0
_080725DC: .4byte 0x020039B8

	thumb_func_start sub_80725E0
sub_80725E0: @ 0x080725E0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #8
	adds r6, r0, #0
	adds r1, r6, #0
	adds r1, #0x4d
	movs r4, #0
	movs r0, #1
	strb r0, [r1]
	str r4, [sp]
	ldr r7, _08072658 @ =0x02021E48
	ldr r5, _0807265C @ =0x01000070
	mov r0, sp
	adds r1, r7, #0
	adds r2, r5, #0
	bl CpuFastSet
	str r4, [sp, #4]
	add r0, sp, #4
	ldr r1, _08072660 @ =0x02022648
	mov r8, r1
	adds r2, r5, #0
	bl CpuFastSet
	movs r0, #3
	bl EnableBgSync
	ldr r1, _08072664 @ =0x0867816E
	ldr r0, [r6, #0x50]
	adds r0, r0, r1
	movs r5, #0
	ldrsb r5, [r0, r5]
	adds r0, r6, #0
	adds r0, #0x48
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _08072670
	movs r4, #0xa3
	lsls r4, r4, #1
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r0, _08072668 @ =0x02003238
	adds r0, r4, r0
	adds r1, r7, #0
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_t
	ldr r0, _0807266C @ =0x02003738
	adds r4, r4, r0
	adds r0, r4, #0
	mov r1, r8
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_t
	b _0807269A
	.align 2, 0
_08072658: .4byte 0x02021E48
_0807265C: .4byte 0x01000070
_08072660: .4byte 0x02022648
_08072664: .4byte 0x0867816E
_08072668: .4byte 0x02003238
_0807266C: .4byte 0x02003738
_08072670:
	ldr r0, _080726C0 @ =0x020034B8
	movs r4, #0xdf
	lsls r4, r4, #1
	subs r4, r4, r5
	lsls r4, r4, #1
	ldr r2, _080726C4 @ =0xFFFFFCC0
	adds r1, r7, r2
	adds r1, r4, r1
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_t
	ldr r0, _080726C8 @ =0x020039B8
	ldr r1, _080726C4 @ =0xFFFFFCC0
	add r1, r8
	adds r4, r4, r1
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #7
	bl TmCopyRect_t
_0807269A:
	ldr r0, [r6, #0x50]
	adds r0, #1
	str r0, [r6, #0x50]
	cmp r0, #3
	bne _080726B4
	movs r0, #0
	str r0, [r6, #0x50]
	adds r1, r6, #0
	adds r1, #0x4d
	strb r0, [r1]
	adds r0, r6, #0
	bl Proc_Break
_080726B4:
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080726C0: .4byte 0x020034B8
_080726C4: .4byte 0xFFFFFCC0
_080726C8: .4byte 0x020039B8

	thumb_func_start sub_80726CC
sub_80726CC: @ 0x080726CC
	push {lr}
	adds r0, #0x48
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #0x12
	cmp r0, #0
	bge _080726DE
	movs r1, #0
_080726DE:
	ldr r0, _080726F8 @ =0x02003238
	lsls r1, r1, #1
	ldr r2, _080726FC @ =gBg0Tm
	adds r1, r1, r2
	movs r2, #0xc
	movs r3, #6
	bl TmCopyRect_t
	movs r0, #3
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
_080726F8: .4byte 0x02003238
_080726FC: .4byte gBg0Tm

	thumb_func_start sub_8072700
sub_8072700: @ 0x08072700
	push {lr}
	adds r0, #0x48
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #0x18
	cmp r0, #0
	bge _08072712
	movs r1, #0
_08072712:
	ldr r0, _0807272C @ =0x020034B8
	lsls r1, r1, #1
	ldr r2, _08072730 @ =0x02021E48
	adds r1, r1, r2
	movs r2, #6
	movs r3, #7
	bl TmCopyRect_t
	movs r0, #3
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
_0807272C: .4byte 0x020034B8
_08072730: .4byte 0x02021E48

	thumb_func_start sub_8072734
sub_8072734: @ 0x08072734
	push {r4, r5, lr}
	adds r5, r1, #0
	movs r4, #0
	cmp r0, #0x40
	beq _08072760
	cmp r0, #0x40
	bgt _08072748
	cmp r0, #0
	beq _0807274E
	b _08072768
_08072748:
	cmp r0, #0x80
	beq _08072758
	b _08072768
_0807274E:
	ldr r4, _08072754 @ =0x0831906C
	b _0807276C
	.align 2, 0
_08072754: .4byte 0x0831906C
_08072758:
	ldr r4, _0807275C @ =0x0831908C
	b _0807276C
	.align 2, 0
_0807275C: .4byte 0x0831908C
_08072760:
	ldr r4, _08072764 @ =0x083190AC
	b _0807276C
	.align 2, 0
_08072764: .4byte 0x083190AC
_08072768:
	bl nullsub_2
_0807276C:
	lsls r1, r5, #5
	adds r0, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_807277C
sub_807277C: @ 0x0807277C
	ldr r0, _08072794 @ =gBmSt
	movs r2, #0x14
	ldrsh r1, [r0, r2]
	lsls r1, r1, #4
	movs r2, #0xc
	ldrsh r0, [r0, r2]
	subs r1, r1, r0
	cmp r1, #0x6f
	bgt _08072798
	movs r0, #1
	b _080727A4
	.align 2, 0
_08072794: .4byte gBmSt
_08072798:
	cmp r1, #0x70
	bgt _080727A0
	movs r0, #0
	b _080727A4
_080727A0:
	movs r0, #1
	rsbs r0, r0, #0
_080727A4:
	bx lr
	.align 2, 0

	thumb_func_start sub_80727A8
sub_80727A8: @ 0x080727A8
	push {r4, lr}
	ldr r1, _080727E8 @ =gBmSt
	movs r0, #0x14
	ldrsh r2, [r1, r0]
	movs r3, #0xc
	ldrsh r0, [r1, r3]
	cmp r0, #0
	bge _080727BA
	adds r0, #0xf
_080727BA:
	asrs r0, r0, #4
	subs r2, r2, r0
	movs r4, #0x16
	ldrsh r3, [r1, r4]
	movs r4, #0xe
	ldrsh r0, [r1, r4]
	cmp r0, #0
	bge _080727CC
	adds r0, #0xf
_080727CC:
	asrs r0, r0, #4
	subs r0, r3, r0
	movs r1, #9
	subs r1, r1, r0
	adds r0, r2, #0
	muls r0, r2, r0
	adds r3, r1, #0
	muls r3, r1, r3
	adds r1, r3, #0
	adds r0, r0, r1
	cmp r0, #0x30
	bgt _080727EC
	movs r0, #1
	b _08072804
	.align 2, 0
_080727E8: .4byte gBmSt
_080727EC:
	movs r0, #0xe
	subs r0, r0, r2
	adds r4, r0, #0
	muls r4, r0, r4
	adds r0, r4, #0
	adds r0, r0, r1
	cmp r0, #0x30
	ble _08072800
	movs r0, #0
	b _08072804
_08072800:
	movs r0, #1
	rsbs r0, r0, #0
_08072804:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_807280C
sub_807280C: @ 0x0807280C
	movs r2, #0x90
	lsls r2, r2, #1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r3, _08072830 @ =0x00000121
	adds r1, r3, #0
	strh r1, [r0, #2]
	movs r2, #0
	strh r2, [r0, #4]
	adds r3, #0x1d
	adds r1, r3, #0
	strh r1, [r0, #6]
	adds r3, #1
	adds r1, r3, #0
	strh r1, [r0, #8]
	strh r2, [r0, #0xa]
	bx lr
	.align 2, 0
_08072830: .4byte 0x00000121

	thumb_func_start sub_8072834
sub_8072834: @ 0x08072834
	push {r4, lr}
	adds r3, r0, #0
	movs r2, #0x80
	lsls r2, r2, #1
	cmp r1, #0
	beq _0807289C
	adds r1, #0x2e
	ldrb r4, [r1]
	lsls r0, r4, #0x1c
	lsrs r0, r0, #0x1c
	adds r4, r1, #0
	cmp r0, #4
	bhi _0807287E
	lsls r0, r0, #2
	ldr r1, _08072858 @ =_0807285C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08072858: .4byte _0807285C
_0807285C: @ jump table
	.4byte _0807289C @ case 0
	.4byte _08072874 @ case 1
	.4byte _08072870 @ case 2
	.4byte _0807287C @ case 3
	.4byte _08072878 @ case 4
_08072870:
	adds r2, #0x60
	b _0807287E
_08072874:
	adds r2, #0x64
	b _0807287E
_08072878:
	adds r2, #0x68
	b _0807287E
_0807287C:
	adds r2, #0x6c
_0807287E:
	strh r2, [r3]
	adds r2, #1
	strh r2, [r3, #2]
	adds r2, #1
	strh r2, [r3, #4]
	adds r2, #1
	strh r2, [r3, #6]
	movs r0, #0
	strh r0, [r3, #8]
	ldrb r4, [r4]
	lsrs r0, r4, #4
	movs r1, #0x94
	lsls r1, r1, #1
	adds r0, r0, r1
	strh r0, [r3, #0xa]
_0807289C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80728A4
sub_80728A4: @ 0x080728A4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	adds r5, r1, #0
	ldrh r1, [r6, #0x3c]
	movs r0, #0x3f
	ands r0, r1
	cmp r0, #0
	bne _0807291A
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _080728D0
	ldr r0, [r6, #0x38]
	adds r1, r5, #0
	bl sub_8072834
	movs r0, #1
	bl EnableBgSync
	b _0807291A
_080728D0:
	ldr r0, [r6, #0x38]
	adds r1, r5, #0
	bl sub_807280C
	movs r0, #1
	bl EnableBgSync
	adds r0, r5, #0
	bl GetUnitCurrentHp
	bl GenNumberStr
	ldr r4, _080729BC @ =gNumberStr
	ldrb r0, [r4, #6]
	subs r0, #0x30
	adds r1, r6, #0
	adds r1, #0x49
	strb r0, [r1]
	ldrb r0, [r4, #7]
	subs r0, #0x30
	adds r1, #1
	strb r0, [r1]
	adds r0, r5, #0
	bl GetUnitMaxHp
	bl GenNumberStr
	ldrb r0, [r4, #6]
	subs r0, #0x30
	adds r1, r6, #0
	adds r1, #0x4b
	strb r0, [r1]
	ldrb r1, [r4, #7]
	subs r1, #0x30
	adds r0, r6, #0
	adds r0, #0x4c
	strb r1, [r0]
_0807291A:
	adds r0, r6, #0
	adds r0, #0x4d
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _080729B2
	movs r0, #0x40
	ldrh r1, [r6, #0x3c]
	ands r0, r1
	cmp r0, #0
	beq _08072940
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #0xf
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _080729B2
_08072940:
	movs r2, #0x3e
	ldrsh r0, [r6, r2]
	lsls r7, r0, #3
	adds r1, r7, #0
	adds r1, #0x10
	adds r0, r6, #0
	adds r0, #0x40
	movs r4, #0
	ldrsh r0, [r0, r4]
	lsls r5, r0, #3
	adds r0, r6, #0
	adds r0, #0x49
	ldrb r2, [r0]
	cmp r2, #0xf0
	beq _0807296E
	ldr r2, _080729C0 @ =Sprite_8x8
	ldrb r0, [r0]
	ldr r4, _080729C4 @ =0x000082E0
	adds r3, r0, r4
	adds r0, r1, #0
	adds r1, r5, #0
	bl PutOamHiRam
_0807296E:
	adds r0, r7, #0
	adds r0, #0x17
	ldr r1, _080729C0 @ =Sprite_8x8
	mov r8, r1
	adds r1, r6, #0
	adds r1, #0x4a
	ldr r4, _080729C4 @ =0x000082E0
	ldrb r1, [r1]
	adds r3, r1, r4
	adds r1, r5, #0
	mov r2, r8
	bl PutOamHiRam
	adds r0, r7, #0
	adds r0, #0x22
	adds r1, r6, #0
	adds r1, #0x4b
	ldrb r1, [r1]
	adds r3, r1, r4
	adds r1, r5, #0
	mov r2, r8
	bl PutOamHiRam
	adds r0, r7, #0
	adds r0, #0x29
	adds r1, r6, #0
	adds r1, #0x4c
	ldrb r1, [r1]
	adds r4, r1, r4
	adds r1, r5, #0
	mov r2, r8
	adds r3, r4, #0
	bl PutOamHiRam
_080729B2:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080729BC: .4byte gNumberStr
_080729C0: .4byte Sprite_8x8
_080729C4: .4byte 0x000082E0

	thumb_func_start sub_80729C8
sub_80729C8: @ 0x080729C8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r7, r0, #0
	mov sl, r1
	movs r0, #0
	mov sb, r0
	str r0, [sp, #4]
	ldr r6, _08072A58 @ =0x02003238
	ldr r2, _08072A5C @ =0x01000060
	add r0, sp, #4
	adds r1, r6, #0
	bl CpuFastSet
	mov r1, sl
	ldr r0, [r1]
	ldrh r0, [r0]
	bl DecodeMsg
	mov r8, r0
	movs r0, #0x30
	mov r1, r8
	bl GetStringTextCenteredPos
	adds r5, r0, #0
	adds r4, r7, #0
	adds r4, #0x2c
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #5
	bl Text_SetParams
	adds r0, r4, #0
	mov r1, r8
	bl Text_DrawString
	adds r1, r6, #0
	adds r1, #0x4a
	adds r0, r4, #0
	bl PutText
	mov r0, sl
	bl GetUnitChibiId
	adds r1, r6, #0
	adds r1, #0x42
	mov r2, sb
	str r2, [sp]
	movs r2, #0xf0
	movs r3, #4
	bl PutFaceChibi
	adds r6, #0xca
	str r6, [r7, #0x38]
	mov r0, sb
	strh r0, [r7, #0x3c]
	adds r0, r7, #0
	adds r0, #0x48
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bge _08072A60
	movs r0, #5
	b _08072A62
	.align 2, 0
_08072A58: .4byte 0x02003238
_08072A5C: .4byte 0x01000060
_08072A60:
	movs r0, #0x17
_08072A62:
	strh r0, [r7, #0x3e]
	adds r1, r7, #0
	adds r1, #0x40
	movs r0, #3
	strh r0, [r1]
	adds r0, r7, #0
	mov r1, sl
	bl sub_80728A4
	ldr r0, _08072AAC @ =0x02003342
	movs r2, #0xc5
	lsls r2, r2, #6
	mov r1, sl
	bl sub_8072298
	ldr r0, _08072AB0 @ =0x02003738
	ldr r1, _08072AB4 @ =0x08319124
	movs r2, #0xc4
	lsls r2, r2, #6
	bl TmApplyTsa_t
	movs r0, #0xc0
	mov r1, sl
	ldrb r1, [r1, #0xb]
	ands r0, r1
	movs r1, #3
	bl sub_8072734
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08072AAC: .4byte 0x02003342
_08072AB0: .4byte 0x02003738
_08072AB4: .4byte 0x08319124

	thumb_func_start sub_8072AB8
sub_8072AB8: @ 0x08072AB8
	adds r2, r0, #0
	movs r0, #1
	cmp r1, #5
	bgt _08072AC2
	movs r0, #4
_08072AC2:
	cmp r2, #1
	bgt _08072AC8
	subs r0, #1
_08072AC8:
	cmp r2, #0x16
	ble _08072ACE
	adds r0, #1
_08072ACE:
	bx lr

	thumb_func_start sub_8072AD0
sub_8072AD0: @ 0x08072AD0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	str r1, [sp]
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	lsls r0, r0, #4
	ldr r2, _08072C10 @ =gBmSt
	movs r3, #0xc
	ldrsh r1, [r2, r3]
	subs r0, r0, r1
	cmp r0, #0
	bge _08072AF4
	adds r0, #7
_08072AF4:
	asrs r0, r0, #3
	mov sl, r0
	ldr r1, [sp]
	movs r0, #0xf
	ldrsb r0, [r1, r0]
	lsls r0, r0, #4
	movs r3, #0xe
	ldrsh r1, [r2, r3]
	subs r0, r0, r1
	cmp r0, #0
	bge _08072B0C
	adds r0, #7
_08072B0C:
	asrs r4, r0, #3
	mov r0, sl
	adds r1, r4, #0
	bl sub_8072AB8
	mov r8, r0
	ldr r0, _08072C14 @ =0x08678140
	add r0, r8
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	add sl, r0
	ldr r0, _08072C18 @ =0x08678146
	add r0, r8
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r4, r4, r0
	adds r0, r7, #0
	adds r0, #0x34
	mov r1, sl
	strb r1, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r1, r7, #0
	adds r1, #0x36
	movs r0, #8
	strb r0, [r1]
	adds r1, #1
	movs r0, #5
	strb r0, [r1]
	ldr r2, [sp]
	ldr r0, [r2]
	ldrh r0, [r0]
	bl DecodeMsg
	mov sb, r0
	movs r0, #0x30
	mov r1, sb
	bl GetStringTextCenteredPos
	adds r6, r0, #0
	adds r5, r7, #0
	adds r5, #0x2c
	adds r0, r5, #0
	bl ClearText
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #5
	bl Text_SetParams
	adds r0, r5, #0
	mov r1, sb
	bl Text_DrawString
	ldr r0, _08072C1C @ =0x0867812E
	add r0, r8
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r1, r4, r1
	lsls r1, r1, #5
	ldr r0, _08072C20 @ =0x08678128
	add r0, r8
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	add r0, sl
	adds r1, r1, r0
	lsls r1, r1, #1
	ldr r6, _08072C24 @ =gBg0Tm
	adds r1, r1, r6
	adds r0, r5, #0
	bl PutText
	adds r1, r4, #3
	lsls r0, r1, #5
	adds r0, #1
	add r0, sl
	lsls r0, r0, #1
	adds r0, r0, r6
	str r0, [r7, #0x38]
	movs r3, #0
	strh r3, [r7, #0x3c]
	mov r0, sl
	adds r0, #1
	strh r0, [r7, #0x3e]
	adds r0, r7, #0
	adds r0, #0x40
	strh r1, [r0]
	adds r0, r7, #0
	ldr r1, [sp]
	bl sub_80728A4
	lsls r4, r4, #5
	add r4, sl
	lsls r4, r4, #1
	ldr r0, _08072C28 @ =gBg1Tm
	adds r4, r4, r0
	ldr r0, _08072C2C @ =0x0867814C
	mov r1, r8
	lsls r1, r1, #2
	mov r8, r1
	add r8, r0
	mov r2, r8
	ldr r1, [r2]
	movs r2, #0xc4
	lsls r2, r2, #6
	adds r0, r4, #0
	bl TmApplyTsa_t
	movs r0, #3
	bl EnableBgSync
	movs r0, #0xc0
	ldr r3, [sp]
	ldrb r3, [r3, #0xb]
	ands r0, r3
	movs r1, #3
	bl sub_8072734
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08072C10: .4byte gBmSt
_08072C14: .4byte 0x08678140
_08072C18: .4byte 0x08678146
_08072C1C: .4byte 0x0867812E
_08072C20: .4byte 0x08678128
_08072C24: .4byte gBg0Tm
_08072C28: .4byte gBg1Tm
_08072C2C: .4byte 0x0867814C

	thumb_func_start sub_8072C30
sub_8072C30: @ 0x08072C30
	push {r4, r5, r6, r7, lr}
	adds r2, r0, #0
	movs r0, #0xa1
	lsls r0, r0, #3
	ldrh r1, [r2, #0x36]
	cmp r1, r0
	bne _08072C9A
	adds r7, r2, #0
	adds r7, #0x35
	movs r0, #0
	ldrsb r0, [r7, r0]
	lsls r0, r0, #5
	adds r5, r2, #0
	adds r5, #0x34
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r1, _08072CA0 @ =gBg0Tm
	adds r0, r0, r1
	adds r6, r2, #0
	adds r6, #0x36
	movs r1, #0
	ldrsb r1, [r6, r1]
	adds r4, r2, #0
	adds r4, #0x37
	movs r2, #0
	ldrsb r2, [r4, r2]
	movs r3, #0
	bl TmFillRect_t
	movs r0, #0
	ldrsb r0, [r7, r0]
	lsls r0, r0, #5
	movs r1, #0
	ldrsb r1, [r5, r1]
	adds r0, r0, r1
	lsls r0, r0, #1
	ldr r1, _08072CA4 @ =gBg1Tm
	adds r0, r0, r1
	movs r1, #0
	ldrsb r1, [r6, r1]
	movs r2, #0
	ldrsb r2, [r4, r2]
	movs r3, #0
	bl TmFillRect_t
	movs r0, #3
	bl EnableBgSync
	movs r0, #0
	strb r0, [r6]
	strb r0, [r4]
_08072C9A:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08072CA0: .4byte gBg0Tm
_08072CA4: .4byte gBg1Tm

	thumb_func_start sub_8072CA8
sub_8072CA8: @ 0x08072CA8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r0, #0
	ldr r0, _08072DB0 @ =gBmSt
	mov sb, r0
	movs r1, #0x16
	ldrsh r0, [r0, r1]
	ldr r1, _08072DB4 @ =gMapTerrain
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	mov r2, sb
	movs r3, #0x14
	ldrsh r1, [r2, r3]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r7, [r0]
	movs r0, #0
	str r0, [sp]
	ldr r0, _08072DB8 @ =0x020034B8
	mov r8, r0
	ldr r2, _08072DBC @ =0x01000070
	mov r0, sp
	mov r1, r8
	bl CpuFastSet
	adds r0, r7, #0
	bl GetTerrainName
	adds r5, r0, #0
	movs r0, #0x20
	adds r1, r5, #0
	bl GetStringTextCenteredPos
	adds r6, r0, #0
	adds r4, #0x2c
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #0
	bl Text_SetParams
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_DrawString
	mov r1, r8
	adds r1, #0x82
	adds r0, r4, #0
	bl PutText
	movs r6, #0x81
	lsls r6, r6, #1
	add r6, r8
	ldr r1, _08072DC0 @ =0x083193B0
	movs r2, #0x80
	lsls r2, r2, #1
	mov sl, r2
	adds r0, r6, #0
	bl TmApplyTsa_t
	ldr r0, _08072DC4 @ =0x0860C714
	adds r0, r7, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble _08072D7E
	ldr r0, _08072DC8 @ =0x0860C9AB
	adds r0, r7, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GenNumberStr
	movs r0, #0x84
	lsls r0, r0, #1
	add r0, r8
	ldr r4, _08072DCC @ =0x02027BA7
	movs r5, #0x94
	lsls r5, r5, #1
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #2
	bl sub_8013E8C
	ldr r0, _08072DD0 @ =0x0860C978
	adds r0, r7, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GenNumberStr
	movs r0, #0xa4
	lsls r0, r0, #1
	add r0, r8
	adds r1, r4, #0
	adds r2, r5, #0
	movs r3, #2
	bl sub_8013E8C
_08072D7E:
	cmp r7, #0x1b
	beq _08072DD8
	cmp r7, #0x1b
	blt _08072E28
	cmp r7, #0x29
	bgt _08072E28
	cmp r7, #0x27
	blt _08072E28
	ldr r1, _08072DD4 @ =0x083193BC
	adds r0, r6, #0
	mov r2, sl
	bl TmApplyTsa_t
	mov r3, sb
	movs r1, #0x14
	ldrsh r0, [r3, r1]
	movs r2, #0x16
	ldrsh r1, [r3, r2]
	bl GetObstacleHpAt
	bl GenNumberStr
	movs r0, #0x84
	lsls r0, r0, #1
	b _08072E1A
	.align 2, 0
_08072DB0: .4byte gBmSt
_08072DB4: .4byte gMapTerrain
_08072DB8: .4byte 0x020034B8
_08072DBC: .4byte 0x01000070
_08072DC0: .4byte 0x083193B0
_08072DC4: .4byte 0x0860C714
_08072DC8: .4byte 0x0860C9AB
_08072DCC: .4byte 0x02027BA7
_08072DD0: .4byte 0x0860C978
_08072DD4: .4byte 0x083193BC
_08072DD8:
	ldr r1, _08072E08 @ =0x083193C4
	movs r2, #0x84
	lsls r2, r2, #6
	adds r0, r6, #0
	bl TmApplyTsa_t
	mov r3, sb
	movs r1, #0x14
	ldrsh r0, [r3, r1]
	movs r2, #0x16
	ldrsh r1, [r3, r2]
	bl GetObstacleHpAt
	adds r6, r0, #0
	cmp r6, #0x64
	bne _08072E10
	movs r0, #0xa3
	lsls r0, r0, #1
	add r0, r8
	ldr r1, _08072E0C @ =0x083193D0
	mov r2, sl
	bl TmApplyTsa_t
	b _08072E28
	.align 2, 0
_08072E08: .4byte 0x083193C4
_08072E0C: .4byte 0x083193D0
_08072E10:
	adds r0, r6, #0
	bl GenNumberStr
	movs r0, #0xa4
	lsls r0, r0, #1
_08072E1A:
	add r0, r8
	ldr r1, _08072E44 @ =0x02027BA7
	movs r2, #0x94
	lsls r2, r2, #1
	movs r3, #2
	bl sub_8013E8C
_08072E28:
	ldr r0, _08072E48 @ =0x020039B8
	ldr r1, _08072E4C @ =0x083190CC
	movs r2, #0x88
	lsls r2, r2, #5
	bl TmApplyTsa_t
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08072E44: .4byte 0x02027BA7
_08072E48: .4byte 0x020039B8
_08072E4C: .4byte 0x083190CC

	thumb_func_start sub_8072E50
sub_8072E50: @ 0x08072E50
	push {lr}
	movs r1, #0
	str r1, [r0, #0x50]
	adds r2, r0, #0
	adds r2, #0x48
	movs r1, #1
	strb r1, [r2]
	adds r0, #0x2c
	movs r1, #4
	bl InitTextDb
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8072E6C
sub_8072E6C: @ 0x08072E6C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_80727A8
	adds r1, r0, #0
	adds r2, r4, #0
	adds r2, #0x48
	strb r1, [r2]
	lsls r0, r1, #0x18
	cmp r0, #0
	bne _08072E88
	movs r0, #0xff
	orrs r1, r0
	strb r1, [r2]
_08072E88:
	adds r0, r4, #0
	bl sub_8072CA8
	ldr r1, _08072EA8 @ =gBmSt
	ldrh r0, [r1, #0x14]
	adds r2, r4, #0
	adds r2, #0x46
	strb r0, [r2]
	ldrh r1, [r1, #0x16]
	adds r0, r4, #0
	adds r0, #0x47
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08072EA8: .4byte gBmSt

	thumb_func_start sub_8072EAC
sub_8072EAC: @ 0x08072EAC
	push {r4, lr}
	adds r4, r0, #0
	adds r3, r4, #0
	adds r3, #0x46
	ldrb r0, [r3]
	adds r2, r4, #0
	adds r2, #0x44
	strb r0, [r2]
	movs r0, #0x47
	adds r0, r0, r4
	mov ip, r0
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x45
	strb r0, [r1]
	ldr r1, _08072F18 @ =gBmSt
	ldrh r0, [r1, #0x14]
	strb r0, [r3]
	ldrh r0, [r1, #0x16]
	mov r1, ip
	strb r0, [r1]
	ldr r0, _08072F1C @ =0x0000FFFF
	adds r1, r0, #0
	ldrh r3, [r3]
	ands r1, r3
	ldrh r2, [r2]
	ands r0, r2
	cmp r1, r0
	beq _08072F2A
	ldr r0, _08072F20 @ =ProcScr_CamMove
	bl Proc_Find
	cmp r0, #0
	bne _08072F24
	bl sub_80727A8
	adds r1, r0, #0
	adds r0, r4, #0
	adds r0, #0x48
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, r1
	beq _08072F08
	cmp r1, #0
	bne _08072F24
_08072F08:
	adds r0, r4, #0
	bl sub_8072CA8
	adds r0, r4, #0
	bl sub_8072700
	b _08072F2A
	.align 2, 0
_08072F18: .4byte gBmSt
_08072F1C: .4byte 0x0000FFFF
_08072F20: .4byte ProcScr_CamMove
_08072F24:
	adds r0, r4, #0
	bl Proc_Break
_08072F2A:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8072F30
sub_8072F30: @ 0x08072F30
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	movs r1, #6
	bl InitTextDb
	movs r0, #0
	str r0, [r4, #0x50]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8072F48
sub_8072F48: @ 0x08072F48
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r0, #0x4d
	movs r7, #1
	strb r7, [r0]
	ldr r5, _08072FB4 @ =gBmSt
	movs r1, #0x16
	ldrsh r0, [r5, r1]
	ldr r1, _08072FB8 @ =gMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r2, #0x14
	ldrsh r1, [r5, r2]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl GetUnit
	adds r6, r0, #0
	cmp r6, #0
	beq _08072FAC
	ldr r0, _08072FBC @ =ProcScr_CamMove
	bl Proc_Find
	cmp r0, #0
	bne _08072FAC
	bl sub_807277C
	adds r1, r4, #0
	adds r1, #0x48
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08072F90
	strb r7, [r1]
_08072F90:
	ldrh r0, [r5, #0x14]
	adds r1, r4, #0
	adds r1, #0x46
	strb r0, [r1]
	ldrh r0, [r5, #0x16]
	adds r1, #1
	strb r0, [r1]
	adds r0, r4, #0
	adds r1, r6, #0
	bl sub_80729C8
	adds r0, r4, #0
	bl Proc_Break
_08072FAC:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08072FB4: .4byte gBmSt
_08072FB8: .4byte gMapUnit
_08072FBC: .4byte ProcScr_CamMove

	thumb_func_start sub_8072FC0
sub_8072FC0: @ 0x08072FC0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r5, _08073064 @ =gBmSt
	movs r1, #0x16
	ldrsh r0, [r5, r1]
	ldr r1, _08073068 @ =gMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r2, #0x14
	ldrsh r1, [r5, r2]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl GetUnit
	adds r6, r0, #0
	ldrh r0, [r4, #0x3c]
	adds r0, #1
	strh r0, [r4, #0x3c]
	adds r0, r4, #0
	adds r1, r6, #0
	bl sub_80728A4
	movs r0, #0x3f
	ldrh r1, [r4, #0x3c]
	ands r0, r1
	cmp r0, #0
	bne _08073000
	adds r0, r4, #0
	bl sub_80726CC
_08073000:
	adds r3, r4, #0
	adds r3, #0x46
	ldrb r0, [r3]
	adds r2, r4, #0
	adds r2, #0x44
	strb r0, [r2]
	movs r0, #0x47
	adds r0, r0, r4
	mov ip, r0
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x45
	strb r0, [r1]
	ldrh r0, [r5, #0x14]
	strb r0, [r3]
	ldrh r0, [r5, #0x16]
	mov r1, ip
	strb r0, [r1]
	ldr r0, _0807306C @ =0x0000FFFF
	adds r1, r0, #0
	ldrh r3, [r3]
	ands r1, r3
	ldrh r2, [r2]
	ands r0, r2
	cmp r1, r0
	beq _0807307A
	cmp r6, #0
	beq _08073074
	ldr r0, _08073070 @ =ProcScr_CamMove
	bl Proc_Find
	cmp r0, #0
	bne _08073074
	bl sub_807277C
	adds r1, r0, #0
	adds r0, r4, #0
	adds r0, #0x48
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, r1
	beq _0807305A
	cmp r1, #0
	bne _08073074
_0807305A:
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
	b _0807307A
	.align 2, 0
_08073064: .4byte gBmSt
_08073068: .4byte gMapUnit
_0807306C: .4byte 0x0000FFFF
_08073070: .4byte ProcScr_CamMove
_08073074:
	adds r0, r4, #0
	bl Proc_Break
_0807307A:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_8073080
sub_8073080: @ 0x08073080
	push {r4, lr}
	adds r4, r0, #0
	ldr r2, _080730B0 @ =gBmSt
	movs r1, #0x16
	ldrsh r0, [r2, r1]
	ldr r1, _080730B4 @ =gMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r3, #0x14
	ldrsh r1, [r2, r3]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	bne _080730B8
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
	b _080730C4
	.align 2, 0
_080730B0: .4byte gBmSt
_080730B4: .4byte gMapUnit
_080730B8:
	adds r0, r4, #0
	bl sub_80729C8
	adds r0, r4, #0
	bl sub_80726CC
_080730C4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80730CC
sub_80730CC: @ 0x080730CC
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x2c
	movs r1, #6
	bl InitTextDb
	adds r0, r4, #0
	adds r0, #0x43
	movs r1, #0
	strb r1, [r0]
	adds r0, #0xa
	strb r1, [r0]
	str r1, [r4, #0x50]
	subs r0, #0x17
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_80730F4
sub_80730F4: @ 0x080730F4
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r0, #0x43
	adds r0, r0, r4
	mov ip, r0
	ldrb r0, [r0]
	adds r3, r4, #0
	adds r3, #0x42
	strb r0, [r3]
	ldr r2, _0807313C @ =gBmSt
	movs r1, #0x16
	ldrsh r0, [r2, r1]
	ldr r1, _08073140 @ =gMapUnit
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	movs r5, #0x14
	ldrsh r1, [r2, r5]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	mov r1, ip
	strb r0, [r1]
	ldrb r1, [r3]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r1, r0
	beq _08073144
	cmp r1, #0
	beq _08073144
	adds r0, r4, #0
	bl sub_8072C30
	movs r0, #0
	str r0, [r4, #0x50]
	b _080731D2
	.align 2, 0
_0807313C: .4byte gBmSt
_08073140: .4byte gMapUnit
_08073144:
	adds r0, r4, #0
	adds r0, #0x43
	ldrb r1, [r0]
	adds r5, r0, #0
	cmp r1, #0
	beq _080731D2
	ldr r0, _08073180 @ =ProcScr_CamMove
	bl Proc_Find
	cmp r0, #0
	bne _080731D2
	ldr r0, _08073184 @ =0x08678174
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	beq _08073188
	adds r0, #0x4d
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08073188
	ldr r0, [r4, #0x50]
	cmp r0, #3
	bgt _080731D2
	adds r0, #1
	str r0, [r4, #0x50]
	b _080731D2
	.align 2, 0
_08073180: .4byte ProcScr_CamMove
_08073184: .4byte 0x08678174
_08073188:
	ldr r0, [r4, #0x50]
	adds r0, #1
	str r0, [r4, #0x50]
	cmp r0, #4
	ble _080731D2
	cmp r0, #5
	bne _080731A6
	ldrb r0, [r5]
	bl GetUnit
	adds r1, r0, #0
	adds r0, r4, #0
	bl sub_8072AD0
	b _080731D2
_080731A6:
	ldrh r0, [r4, #0x3c]
	adds r0, #1
	strh r0, [r4, #0x3c]
	cmp r1, #0
	beq _080731BC
	adds r0, r1, #0
	adds r0, #0x4d
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x4d
	b _080731C2
_080731BC:
	adds r1, r4, #0
	adds r1, #0x4d
	movs r0, #0
_080731C2:
	strb r0, [r1]
	ldrb r0, [r5]
	bl GetUnit
	adds r1, r0, #0
	adds r0, r4, #0
	bl sub_80728A4
_080731D2:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_80731D8
sub_80731D8: @ 0x080731D8
	push {r4, r5, lr}
	ldr r5, _080732E0 @ =gDispIo
	movs r4, #0x21
	rsbs r4, r4, #0
	adds r0, r4, #0
	ldrb r1, [r5, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r5, #1]
	adds r2, r5, #0
	adds r2, #0x36
	movs r0, #1
	ldrb r1, [r2]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	movs r1, #0x20
	orrs r0, r1
	strb r0, [r2]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	adds r2, r5, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r5, #0
	adds r1, #0x44
	movs r3, #0
	movs r0, #0xf
	strb r0, [r1]
	adds r1, #1
	movs r0, #4
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x46
	strb r3, [r0]
	ldr r0, _080732E4 @ =0x0000FFE0
	ldrh r1, [r5, #0x3c]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	strh r0, [r5, #0x3c]
	ldrb r0, [r2]
	ands r4, r0
	strb r4, [r2]
	ldr r0, _080732E8 @ =0x0000E0FF
	ldrh r1, [r5, #0x3c]
	ands r0, r1
	movs r2, #0xe0
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r5, #0x3c]
	ldr r0, _080732EC @ =0x083189B4
	ldr r1, _080732F0 @ =0x06002000
	bl Decompress
	ldr r0, _080732F4 @ =0x06002500
	ldr r1, _080732F8 @ =0x06015C00
	movs r2, #0x50
	bl CpuFastSet
	ldr r0, _080732FC @ =gPal
	movs r1, #0xc0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #1
	movs r1, #2
	bl ApplyIconPalette
	bl ResetTextFont
	ldr r4, _08073300 @ =gPlaySt
	ldrb r1, [r4, #0x1c]
	lsls r0, r1, #0x1e
	cmp r0, #0
	blt _080732B4
	ldr r0, _08073304 @ =0x08678174
	movs r1, #3
	bl SpawnProc
_080732B4:
	ldrb r2, [r4, #0x1c]
	lsls r0, r2, #0x1c
	lsrs r0, r0, #0x1e
	cmp r0, #0
	bne _080732C6
	ldr r0, _08073308 @ =0x086781D4
	movs r1, #3
	bl SpawnProc
_080732C6:
	ldrb r4, [r4, #0x1c]
	lsls r0, r4, #0x1c
	lsrs r0, r0, #0x1e
	cmp r0, #1
	bne _080732D8
	ldr r0, _0807330C @ =0x08678254
	movs r1, #3
	bl SpawnProc
_080732D8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080732E0: .4byte gDispIo
_080732E4: .4byte 0x0000FFE0
_080732E8: .4byte 0x0000E0FF
_080732EC: .4byte 0x083189B4
_080732F0: .4byte 0x06002000
_080732F4: .4byte 0x06002500
_080732F8: .4byte 0x06015C00
_080732FC: .4byte gPal
_08073300: .4byte gPlaySt
_08073304: .4byte 0x08678174
_08073308: .4byte 0x086781D4
_0807330C: .4byte 0x08678254

	thumb_func_start sub_8073310
sub_8073310: @ 0x08073310
	push {lr}
	ldr r0, _08073320 @ =0x08678284
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_08073320: .4byte 0x08678284

	thumb_func_start sub_8073324
sub_8073324: @ 0x08073324
	push {lr}
	ldr r0, _08073360 @ =0x086781D4
	bl Proc_EndEach
	ldr r0, _08073364 @ =0x08678254
	bl Proc_EndEach
	ldr r0, _08073368 @ =0x08678174
	bl Proc_EndEach
	ldr r3, _0807336C @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r2, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	bl ClearBg0Bg1
	pop {r0}
	bx r0
	.align 2, 0
_08073360: .4byte 0x086781D4
_08073364: .4byte 0x08678254
_08073368: .4byte 0x08678174
_0807336C: .4byte gDispIo

	thumb_func_start sub_8073370
sub_8073370: @ 0x08073370
	push {lr}
	ldr r1, _08073390 @ =0x03007FF8
	movs r0, #1
	strh r0, [r1]
	bl SyncDispIo
	bl SyncBgsAndPal
	bl ApplyDataMoves
	bl m4aSoundVSync
	bl m4aSoundMain
	pop {r0}
	bx r0
	.align 2, 0
_08073390: .4byte 0x03007FF8

	thumb_func_start sub_8073394
sub_8073394: @ 0x08073394
	push {r4, lr}
	ldr r4, _080733BC @ =gKeySt
	ldr r0, [r4]
	bl RefreshKeySt
	ldr r1, [r4]
	movs r0, #9
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080733B0
	movs r0, #0xff
	bl SoftReset
_080733B0:
	bl VBlankIntrWait
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080733BC: .4byte gKeySt

	thumb_func_start sub_80733C0
sub_80733C0: @ 0x080733C0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x7c
	add r5, sp, #0x18
	bl ResetText
	bl InitTalkTextFont
	add r7, sp, #8
	add r0, sp, #0x10
	mov r8, r0
	mov r4, sp
	movs r6, #2
_080733DC:
	adds r0, r4, #0
	movs r1, #0x16
	bl InitText
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	adds r4, #8
	subs r6, #1
	cmp r6, #0
	bge _080733DC
	movs r1, #0
	str r1, [r5, #0x30]
	mov r0, sp
	str r0, [r5, #0x34]
	str r7, [r5, #0x38]
	mov r0, r8
	str r0, [r5, #0x3c]
	adds r0, r5, #0
	adds r0, #0x5c
	strh r1, [r0]
	ldr r0, _0807344C @ =0x00000C48
	bl DecodeMsg
	str r0, [r5, #0x2c]
	adds r0, r5, #0
	bl sub_8071308
	ldr r4, _08073450 @ =0x02021C90
	mov r0, sp
	adds r1, r4, #0
	bl PutText
	adds r1, r4, #0
	adds r1, #0xc0
	adds r0, r7, #0
	bl PutText
	movs r0, #0xa0
	lsls r0, r0, #1
	adds r4, r4, r0
	mov r0, r8
	adds r1, r4, #0
	bl PutText
	movs r0, #1
	bl EnableBgSync
	add sp, #0x7c
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807344C: .4byte 0x00000C48
_08073450: .4byte 0x02021C90

	thumb_func_start sub_8073454
sub_8073454: @ 0x08073454
	push {r4, r5, lr}
	sub sp, #8
	movs r0, #0
	bl InitBgs
	bl m4aSoundInit
	bl InitProcs
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r2, _080734FC @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	subs r1, #0x10
	ands r0, r1
	subs r1, #0x20
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r1, #8
	movs r4, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x45
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	strh r4, [r2, #0x38]
	bl SyncDispIo
	str r4, [sp]
	movs r1, #0xc0
	lsls r1, r1, #0x13
	ldr r5, _08073500 @ =0x01000008
	mov r0, sp
	adds r2, r5, #0
	bl CpuFastSet
	str r4, [sp, #4]
	add r0, sp, #4
	ldr r1, _08073504 @ =0x06008000
	adds r2, r5, #0
	bl CpuFastSet
	bl sub_80733C0
	ldr r0, _08073508 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080734EC
	movs r0, #0x7b
	bl m4aSongNumStart
_080734EC:
	ldr r0, _0807350C @ =sub_8073394
	bl SetMainFunc
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080734FC: .4byte gDispIo
_08073500: .4byte 0x01000008
_08073504: .4byte 0x06008000
_08073508: .4byte gPlaySt
_0807350C: .4byte sub_8073394

	thumb_func_start sub_8073510
sub_8073510: @ 0x08073510
	push {lr}
	ldr r1, _08073538 @ =0x04000004
	movs r0, #8
	strh r0, [r1]
	ldr r1, _0807353C @ =0x04000208
	movs r0, #1
	strh r0, [r1]
	movs r1, #0x80
	lsls r1, r1, #0x13
	movs r0, #0
	strh r0, [r1]
	ldr r0, _08073540 @ =sub_8073370
	bl SetOnVBlank
	ldr r0, _08073544 @ =sub_8073454
	bl SetMainFunc
	pop {r0}
	bx r0
	.align 2, 0
_08073538: .4byte 0x04000004
_0807353C: .4byte 0x04000208
_08073540: .4byte sub_8073370
_08073544: .4byte sub_8073454

	thumb_func_start sub_8073548
sub_8073548: @ 0x08073548
	push {lr}
	adds r0, #0x4c
	movs r1, #3
	strh r1, [r0]
	movs r0, #8
	bl sub_800210C
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807355C
sub_807355C: @ 0x0807355C
	push {lr}
	adds r0, #0x4c
	movs r1, #3
	strh r1, [r0]
	movs r0, #8
	rsbs r0, r0, #0
	bl sub_8001FD4
	pop {r0}
	bx r0

	thumb_func_start sub_8073570
sub_8073570: @ 0x08073570
	push {r4, lr}
	adds r4, r0, #0
	bl sub_8000234_t
	bl EnablePalSync
	adds r1, r4, #0
	adds r1, #0x4c
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bge _08073592
	adds r0, r4, #0
	bl Proc_Break
_08073592:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8073598
sub_8073598: @ 0x08073598
	ldr r3, _080735D0 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0xc0
	ldrb r1, [r2]
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _080735D4 @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	movs r1, #0x1f
	orrs r0, r1
	strh r0, [r3, #0x3c]
	movs r0, #0x20
	ldrb r1, [r2]
	orrs r0, r1
	strb r0, [r2]
	bx lr
	.align 2, 0
_080735D0: .4byte gDispIo
_080735D4: .4byte 0x0000FFE0

	thumb_func_start sub_80735D8
sub_80735D8: @ 0x080735D8
	push {r4, lr}
	sub sp, #4
	ldr r1, _08073650 @ =0x020040B8
	movs r0, #4
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bne _0807367A
	ldr r0, [r1]
	cmp r0, #0
	bne _0807361C
	movs r0, #5
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq _08073604
	ldr r3, _08073654 @ =0x086782D4
	ldr r0, _08073658 @ =0x00004A40
	str r0, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0x90
	bl PutSprite
_08073604:
	ldr r4, _0807365C @ =0x02021F70
	bl GetGameTime
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	movs r3, #0
	bl PutTime
	movs r0, #1
	bl EnableBgSync
_0807361C:
	ldr r1, _08073660 @ =gPlaySt
	movs r0, #0x20
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	beq _0807367A
	bl GetGameTime
	lsrs r0, r0, #3
	movs r1, #6
	bl __umodsi3
	ldr r1, _08073664 @ =0x0000328A
	adds r4, r0, r1
	ldr r0, _08073650 @ =0x020040B8
	ldr r0, [r0]
	cmp r0, #0
	bne _0807366C
	ldr r3, _08073668 @ =0x085C3A08
	str r4, [sp]
	movs r0, #4
	movs r1, #0xe8
	movs r2, #0x68
	bl PutSprite
	b _0807367A
	.align 2, 0
_08073650: .4byte 0x020040B8
_08073654: .4byte 0x086782D4
_08073658: .4byte 0x00004A40
_0807365C: .4byte 0x02021F70
_08073660: .4byte gPlaySt
_08073664: .4byte 0x0000328A
_08073668: .4byte 0x085C3A08
_0807366C:
	ldr r3, _08073684 @ =0x085C39C0
	str r4, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #0x68
	bl PutSprite
_0807367A:
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08073684: .4byte 0x085C39C0

	thumb_func_start sub_8073688
sub_8073688: @ 0x08073688
	push {r4, lr}
	movs r4, #0x81
_0807368C:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _080736B2
	ldr r2, [r0]
	cmp r2, #0
	beq _080736B2
	ldr r0, [r0, #4]
	ldr r1, [r2, #0x28]
	ldr r0, [r0, #0x24]
	orrs r1, r0
	movs r0, #0x80
	lsls r0, r0, #8
	ands r1, r0
	cmp r1, #0
	beq _080736B2
	ldrh r0, [r2]
	b _080736BA
_080736B2:
	adds r4, #1
	cmp r4, #0xbf
	ble _0807368C
	ldr r0, _080736C4 @ =0x00000727
_080736BA:
	bl DecodeMsg
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080736C4: .4byte 0x00000727

	thumb_func_start sub_80736C8
sub_80736C8: @ 0x080736C8
	push {r4, r5, lr}
	ldr r5, _08073720 @ =gPlaySt
	movs r4, #0x40
	ldrb r0, [r5, #0x14]
	ands r4, r0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	rsbs r4, r4, #0
	asrs r4, r4, #0x1f
	movs r0, #4
	ands r4, r0
	adds r0, r4, #0
	movs r1, #4
	bl sub_8070CB4
	adds r4, #1
	adds r0, r4, #0
	movs r1, #5
	bl sub_8070CB4
	movs r4, #0xf8
	lsls r4, r4, #3
	adds r0, r5, #0
	bl sub_8070E0C
	adds r1, r0, #0
	adds r0, r4, #0
	bl sub_8070D08
	movs r0, #0xa0
	lsls r0, r0, #2
	bl sub_8070D48
	ldr r0, _08073724 @ =0x02022B4E
	movs r1, #4
	bl sub_8070DA8
	ldr r0, _08073728 @ =0x0202230E
	movs r1, #5
	bl sub_8070DC8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08073720: .4byte gPlaySt
_08073724: .4byte 0x02022B4E
_08073728: .4byte 0x0202230E

	thumb_func_start sub_807372C
sub_807372C: @ 0x0807372C
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #8
	ldr r5, _080737EC @ =0x020040D0
	ldr r0, _080737F0 @ =0x00000724
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #2
	movs r2, #0
	bl Text_InsertDrawString
	ldr r0, _080737F4 @ =gPlaySt
	mov r8, r0
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterInfo
	ldrh r0, [r0, #0x30]
	bl DecodeMsg
	ldr r6, _080737F8 @ =0x02021C4A
	movs r1, #0
	str r1, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #2
	movs r3, #0x19
	bl PutDrawText
	adds r4, r5, #0
	adds r4, #8
	ldr r0, _080737FC @ =0x00000725
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0
	bl Text_InsertDrawString
	adds r0, r4, #0
	movs r1, #0x4a
	movs r2, #2
	bl Text_SetParams
	mov r0, r8
	ldrh r1, [r0, #0x10]
	adds r0, r4, #0
	bl Text_DrawNumber
	adds r1, r6, #0
	subs r1, #0x1e
	adds r0, r4, #0
	bl PutText
	adds r5, #0x10
	ldr r0, _08073800 @ =0x00000726
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0
	bl Text_InsertDrawString
	ldr r3, _08073804 @ =0x083198C0
	adds r0, r5, #0
	movs r1, #0x52
	movs r2, #3
	bl Text_InsertDrawString
	bl GetGold
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0x4a
	movs r2, #2
	bl Text_InsertDrawNumberOrBlank
	adds r6, #0x62
	adds r0, r5, #0
	adds r1, r6, #0
	bl PutText
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080737EC: .4byte 0x020040D0
_080737F0: .4byte 0x00000724
_080737F4: .4byte gPlaySt
_080737F8: .4byte 0x02021C4A
_080737FC: .4byte 0x00000725
_08073800: .4byte 0x00000726
_08073804: .4byte 0x083198C0

	thumb_func_start sub_8073808
sub_8073808: @ 0x08073808
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	sub sp, #8
	ldr r5, _080738E0 @ =0x020040D0
	ldr r0, _080738E4 @ =0x00000724
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #2
	movs r2, #0
	bl Text_InsertDrawString
	ldr r0, _080738E8 @ =gPlaySt
	mov r8, r0
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_80867FC
	ldr r6, _080738EC @ =0x02021C8A
	movs r1, #0
	str r1, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #2
	movs r3, #0x19
	bl PutDrawText
	adds r4, r5, #0
	adds r4, #8
	ldr r0, _080738F0 @ =0x00000725
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0
	bl Text_InsertDrawString
	adds r0, r4, #0
	movs r1, #0x32
	movs r2, #2
	bl Text_SetParams
	mov r2, r8
	ldrh r1, [r2, #0x10]
	adds r0, r4, #0
	bl Text_DrawNumber
	adds r1, r6, #0
	adds r1, #0x28
	adds r0, r4, #0
	bl PutText
	movs r0, #1
	bl SetTextFontGlyphs
	ldr r0, _080738F4 @ =gActiveFont
	mov sb, r0
	ldr r1, [r0]
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r2, #0
	ldrh r2, [r1, #0x10]
	orrs r0, r2
	strh r0, [r1, #0x10]
	mov r1, r8
	movs r0, #0xe
	ldrsb r0, [r1, r0]
	bl sub_80867F0
	adds r4, r0, #0
	movs r0, #0x60
	adds r1, r4, #0
	bl GetStringTextCenteredPos
	adds r1, r0, #0
	subs r5, #8
	adds r0, r5, #0
	movs r2, #0
	adds r3, r4, #0
	bl Text_InsertDrawString
	subs r6, #0x70
	adds r0, r5, #0
	adds r1, r6, #0
	bl PutText
	movs r0, #0
	bl SetTextFontGlyphs
	mov r2, sb
	ldr r1, [r2]
	ldr r0, _080738F8 @ =0x00000FFF
	ldrh r2, [r1, #0x10]
	ands r0, r2
	strh r0, [r1, #0x10]
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080738E0: .4byte 0x020040D0
_080738E4: .4byte 0x00000724
_080738E8: .4byte gPlaySt
_080738EC: .4byte 0x02021C8A
_080738F0: .4byte 0x00000725
_080738F4: .4byte gActiveFont
_080738F8: .4byte 0x00000FFF

	thumb_func_start sub_80738FC
sub_80738FC: @ 0x080738FC
	push {r4, r5, r6, lr}
	ldr r5, _080739B0 @ =0x020040E8
	ldr r6, _080739B4 @ =gPlaySt
	movs r0, #0xe
	ldrsb r0, [r6, r0]
	bl GetChapterInfo
	ldrh r0, [r0, #0x32]
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0
	bl Text_InsertDrawString
	adds r0, r5, #0
	movs r1, #0x45
	movs r2, #2
	bl Text_SetParams
	movs r0, #0
	movs r1, #0xc
	bl CountFactionUnitsWithoutState
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_DrawNumber
	adds r4, r5, #0
	adds r4, #8
	movs r0, #0xe
	ldrsb r0, [r6, r0]
	bl GetChapterInfo
	ldrh r0, [r0, #0x34]
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0
	bl Text_InsertDrawString
	adds r0, r4, #0
	movs r1, #0x45
	movs r2, #2
	bl Text_SetParams
	movs r0, #0x80
	movs r1, #0xc
	bl CountFactionUnitsWithoutState
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawNumber
	adds r4, #8
	movs r0, #1
	bl GetUnitByPid
	ldr r0, [r0]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0
	bl Text_InsertDrawString
	adds r4, #8
	bl sub_8073688
	adds r3, r0, #0
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0
	bl Text_InsertDrawString
	adds r5, #0x20
	ldr r3, _080739B8 @ =0x083198C4
	adds r0, r5, #0
	movs r1, #0
	movs r2, #3
	bl Text_InsertDrawString
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080739B0: .4byte 0x020040E8
_080739B4: .4byte gPlaySt
_080739B8: .4byte 0x083198C4

	thumb_func_start sub_80739BC
sub_80739BC: @ 0x080739BC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	ldr r0, _08073A98 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterInfo
	ldrh r4, [r0, #0x36]
	movs r5, #0xfe
	lsls r5, r5, #7
	ldr r7, _08073A9C @ =0x02003C40
	ldr r2, _08073AA0 @ =0x00000681
	movs r6, #0
	str r6, [sp]
	adds r0, r5, #0
	adds r1, r7, #0
	movs r3, #8
	bl PutFaceChibi
	adds r4, r4, r5
	movs r0, #0x80
	lsls r0, r0, #1
	adds r1, r7, r0
	ldr r2, _08073AA4 @ =0x00000691
	str r6, [sp]
	adds r0, r4, #0
	movs r3, #9
	bl PutFaceChibi
	ldr r4, _08073AA8 @ =0x02003738
	ldr r1, _08073AAC @ =0x0833C6F4
	movs r5, #0x80
	lsls r5, r5, #6
	adds r0, r4, #0
	adds r2, r5, #0
	bl TmApplyTsa_t
	ldr r1, _08073AB0 @ =0x00000226
	adds r4, r4, r1
	ldr r1, _08073AB4 @ =0x0833C8D8
	adds r0, r4, #0
	adds r2, r5, #0
	bl TmApplyTsa_t
	ldr r4, _08073AB8 @ =0x020040E8
	ldr r6, _08073ABC @ =0x02003288
	adds r0, r4, #0
	adds r1, r6, #0
	bl PutText
	adds r0, r4, #0
	adds r0, #8
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r6, r2
	bl PutText
	adds r0, r4, #0
	adds r0, #0x10
	adds r1, r6, #0
	adds r1, #0x18
	bl PutText
	adds r4, #0x18
	movs r0, #0x8c
	lsls r0, r0, #1
	adds r1, r6, r0
	adds r0, r4, #0
	bl PutText
	adds r0, r7, #0
	adds r0, #0x5c
	ldr r5, _08073AC0 @ =0x083093EC
	movs r4, #0xc7
	lsls r4, r4, #7
	adds r1, r5, #0
	adds r2, r4, #0
	bl TmApplyTsa_t
	movs r1, #0xae
	lsls r1, r1, #1
	adds r0, r7, r1
	adds r1, r5, #0
	adds r2, r4, #0
	bl TmApplyTsa_t
	movs r2, #0x88
	lsls r2, r2, #2
	adds r0, r7, r2
	ldr r1, _08073AC4 @ =0x083093F8
	adds r2, r4, #0
	bl TmApplyTsa_t
	movs r0, #0x86
	lsls r0, r0, #2
	adds r4, r6, r0
	bl GetGameTime
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	movs r3, #0
	bl PutTime
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08073A98: .4byte gPlaySt
_08073A9C: .4byte 0x02003C40
_08073AA0: .4byte 0x00000681
_08073AA4: .4byte 0x00000691
_08073AA8: .4byte 0x02003738
_08073AAC: .4byte 0x0833C6F4
_08073AB0: .4byte 0x00000226
_08073AB4: .4byte 0x0833C8D8
_08073AB8: .4byte 0x020040E8
_08073ABC: .4byte 0x02003288
_08073AC0: .4byte 0x083093EC
_08073AC4: .4byte 0x083093F8

	thumb_func_start sub_8073AC8
sub_8073AC8: @ 0x08073AC8
	push {r4, r5, lr}
	movs r0, #1
	bl SetTextFontGlyphs
	ldr r0, _08073B38 @ =0x08677FD0
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	movs r4, #0
	str r4, [r5, #0x30]
	adds r0, #0x5c
	strh r4, [r0]
	ldr r0, _08073B3C @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_8086910
	str r0, [r5, #0x2c]
	adds r1, r5, #0
	adds r1, #0x62
	movs r0, #0xff
	strh r0, [r1]
	adds r0, r5, #0
	adds r0, #0x60
	strh r4, [r0]
	subs r0, #2
	strh r4, [r0]
	ldr r0, _08073B40 @ =0x02004110
	movs r2, #4
	adds r0, #0x20
	subs r1, #0x1e
_08073B0A:
	str r0, [r1]
	subs r0, #8
	subs r1, #4
	subs r2, #1
	cmp r2, #0
	bge _08073B0A
	ldr r0, [r5, #0x2c]
	ldr r1, _08073B44 @ =0x020040C0
	adds r2, r1, #4
	bl GetStringTextBox
	adds r0, r5, #0
	bl sub_8071274
	adds r0, r5, #0
	bl Proc_End
	movs r0, #0
	bl SetTextFontGlyphs
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08073B38: .4byte 0x08677FD0
_08073B3C: .4byte gPlaySt
_08073B40: .4byte 0x02004110
_08073B44: .4byte 0x020040C0

	thumb_func_start sub_8073B48
sub_8073B48: @ 0x08073B48
	push {r4, r5, lr}
	ldr r0, _08073BC8 @ =gActiveFont
	ldr r1, [r0]
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r2, #0
	ldrh r2, [r1, #0x10]
	orrs r0, r2
	strh r0, [r1, #0x10]
	ldr r3, _08073BCC @ =0x020040B8
	ldr r0, [r3, #8]
	cmp r0, #0
	bge _08073B64
	adds r0, #7
_08073B64:
	asrs r0, r0, #3
	movs r1, #0x18
	subs r1, r1, r0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	adds r2, r1, #3
	ldr r1, [r3, #0xc]
	cmp r1, #0
	bge _08073B7A
	adds r1, #0xf
_08073B7A:
	asrs r1, r1, #4
	movs r0, #6
	subs r0, r0, r1
	movs r5, #0
	lsls r0, r0, #5
	adds r4, r0, r2
_08073B86:
	lsls r0, r5, #3
	ldr r1, _08073BD0 @ =0x02004110
	adds r0, r0, r1
	lsls r1, r4, #1
	ldr r2, _08073BD4 @ =0x02003238
	adds r1, r1, r2
	bl PutText
	adds r4, #0x40
	adds r5, #1
	cmp r5, #4
	ble _08073B86
	ldr r0, _08073BC8 @ =gActiveFont
	ldr r1, [r0]
	ldr r0, _08073BD8 @ =0x00000FFF
	ldrh r2, [r1, #0x10]
	ands r0, r2
	strh r0, [r1, #0x10]
	ldr r0, _08073BDC @ =0x08309408
	ldr r4, _08073BE0 @ =gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, _08073BE4 @ =0x0200373C
	movs r2, #0x80
	lsls r2, r2, #6
	adds r1, r4, #0
	bl TmApplyTsa_t
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08073BC8: .4byte gActiveFont
_08073BCC: .4byte 0x020040B8
_08073BD0: .4byte 0x02004110
_08073BD4: .4byte 0x02003238
_08073BD8: .4byte 0x00000FFF
_08073BDC: .4byte 0x08309408
_08073BE0: .4byte gBuf
_08073BE4: .4byte 0x0200373C

	thumb_func_start sub_8073BE8
sub_8073BE8: @ 0x08073BE8
	push {r4, r5, r6, lr}
	sub sp, #0xc
	adds r6, r1, #0
	movs r5, #0
	str r5, [sp]
	ldr r1, _08073C24 @ =0x02003238
	ldr r4, _08073C28 @ =0x010000C0
	mov r0, sp
	adds r2, r4, #0
	bl CpuFastSet
	str r5, [sp, #4]
	add r0, sp, #4
	ldr r1, _08073C2C @ =0x02003738
	adds r2, r4, #0
	bl CpuFastSet
	ldr r0, _08073C30 @ =0x06800680
	str r0, [sp, #8]
	add r0, sp, #8
	ldr r1, _08073C34 @ =0x02003C38
	adds r2, r4, #0
	bl CpuFastSet
	cmp r6, #0
	beq _08073C38
	cmp r6, #1
	beq _08073C40
	b _08073C46
	.align 2, 0
_08073C24: .4byte 0x02003238
_08073C28: .4byte 0x010000C0
_08073C2C: .4byte 0x02003738
_08073C30: .4byte 0x06800680
_08073C34: .4byte 0x02003C38
_08073C38:
	movs r0, #0
	bl sub_80739BC
	b _08073C46
_08073C40:
	movs r0, #0
	bl sub_8073B48
_08073C46:
	add sp, #0xc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8073C50
sub_8073C50: @ 0x08073C50
	push {r4, r5, lr}
	adds r5, r0, #0
	movs r0, #0
	bl InitBgs
	ldr r3, _08073D30 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r4, [r3, #0x14]
	ands r0, r4
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x14]
	ldrb r0, [r3, #0x10]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x10]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r1, #0x80
	lsls r1, r1, #8
	movs r0, #2
	bl SetBgChrOffset
	movs r4, #0xd0
	lsls r4, r4, #3
	adds r0, r4, #0
	bl SetBlankChr
	bl ResetText
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl ClearBg0Bg1
	ldr r0, _08073D34 @ =gBg2Tm
	adds r1, r4, #0
	bl TmFill
	ldr r0, _08073D38 @ =Pal_SystemText
	movs r1, #0
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, _08073D3C @ =0x0833C944
	movs r1, #0x40
	movs r2, #0x40
	bl ApplyPaletteExt
	movs r0, #0x14
	bl sub_8041284
	movs r0, #1
	movs r1, #6
	bl ApplyIconPalette
	movs r0, #1
	movs r1, #0x13
	bl ApplyIconPalette
	ldr r0, _08073D40 @ =0x083092CC
	ldr r1, _08073D44 @ =0x0600F000
	bl Decompress
	ldr r0, _08073D48 @ =0x0833C378
	movs r1, #0xc0
	lsls r1, r1, #0x13
	bl Decompress
	ldr r0, _08073D4C @ =0x083080D0
	ldr r1, _08073D50 @ =0x06014800
	bl Decompress
	bl sub_80736C8
	ldr r0, _08073D54 @ =0x08678330
	bl InitTextList
	adds r0, r5, #0
	bl sub_80738FC
	ldr r1, _08073D58 @ =gPlaySt
	movs r0, #0x20
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	bne _08073D5C
	adds r0, r5, #0
	bl sub_807372C
	b _08073D6E
	.align 2, 0
_08073D30: .4byte gDispIo
_08073D34: .4byte gBg2Tm
_08073D38: .4byte Pal_SystemText
_08073D3C: .4byte 0x0833C944
_08073D40: .4byte 0x083092CC
_08073D44: .4byte 0x0600F000
_08073D48: .4byte 0x0833C378
_08073D4C: .4byte 0x083080D0
_08073D50: .4byte 0x06014800
_08073D54: .4byte 0x08678330
_08073D58: .4byte gPlaySt
_08073D5C:
	ldr r0, _08073DD4 @ =0x08678378
	bl InitTextList
	adds r0, r5, #0
	bl sub_8073808
	adds r0, r5, #0
	bl sub_8073AC8
_08073D6E:
	adds r0, r5, #0
	movs r1, #0
	bl sub_8073BE8
	ldr r0, _08073DD8 @ =0x02003238
	ldr r1, _08073DDC @ =0x02021D08
	movs r2, #0xc0
	bl CpuFastSet
	ldr r0, _08073DE0 @ =0x02003738
	ldr r1, _08073DE4 @ =0x02022508
	movs r2, #0xc0
	bl CpuFastSet
	ldr r0, _08073DE8 @ =0x02003C38
	ldr r1, _08073DEC @ =0x02022D08
	movs r2, #0xc0
	bl CpuFastSet
	ldr r0, _08073DF0 @ =0x020040B8
	movs r2, #0
	str r2, [r0]
	strb r2, [r0, #4]
	strb r2, [r0, #5]
	ldr r3, _08073DF4 @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r4, [r1]
	ands r0, r4
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	subs r2, #1
	adds r0, r5, #0
	movs r1, #0
	bl sub_808C390
	movs r0, #7
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08073DD4: .4byte 0x08678378
_08073DD8: .4byte 0x02003238
_08073DDC: .4byte 0x02021D08
_08073DE0: .4byte 0x02003738
_08073DE4: .4byte 0x02022508
_08073DE8: .4byte 0x02003C38
_08073DEC: .4byte 0x02022D08
_08073DF0: .4byte 0x020040B8
_08073DF4: .4byte gDispIo

	thumb_func_start sub_8073DF8
sub_8073DF8: @ 0x08073DF8
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	adds r7, r0, #0
	movs r5, #0
	str r5, [sp]
	ldr r1, _08073E78 @ =0x02021D08
	ldr r4, _08073E7C @ =0x010000C0
	mov r0, sp
	adds r2, r4, #0
	bl CpuFastSet
	str r5, [sp, #4]
	add r0, sp, #4
	ldr r1, _08073E80 @ =0x02022508
	adds r2, r4, #0
	bl CpuFastSet
	ldr r0, _08073E84 @ =0x06800680
	str r0, [sp, #8]
	add r0, sp, #8
	ldr r1, _08073E88 @ =0x02022D08
	adds r2, r4, #0
	bl CpuFastSet
	ldr r6, _08073E8C @ =0x086783B0
	adds r4, r7, #0
	adds r4, #0x4c
	movs r1, #0
	ldrsh r0, [r4, r1]
	adds r0, r0, r6
	movs r5, #0
	ldrsb r5, [r0, r5]
	cmp r5, #0x7f
	bne _08073E5A
	adds r0, r7, #0
	adds r0, #0x4a
	movs r2, #0
	ldrsh r1, [r0, r2]
	adds r0, r7, #0
	bl sub_8073BE8
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	movs r1, #0
	ldrsh r0, [r4, r1]
	adds r0, r0, r6
	movs r5, #0
	ldrsb r5, [r0, r5]
_08073E5A:
	ldr r0, [r7, #0x2c]
	cmp r0, #0
	bge _08073E62
	rsbs r5, r5, #0
_08073E62:
	adds r2, r5, #0
	cmp r5, #0
	bge _08073E6A
	rsbs r2, r5, #0
_08073E6A:
	movs r0, #0x1e
	subs r6, r0, r2
	cmp r5, #0
	bge _08073E90
	movs r4, #0
	rsbs r5, r5, #0
	b _08073E94
	.align 2, 0
_08073E78: .4byte 0x02021D08
_08073E7C: .4byte 0x010000C0
_08073E80: .4byte 0x02022508
_08073E84: .4byte 0x06800680
_08073E88: .4byte 0x02022D08
_08073E8C: .4byte 0x086783B0
_08073E90:
	adds r4, r5, #0
	movs r5, #0
_08073E94:
	lsls r5, r5, #1
	ldr r0, _08073F00 @ =0x02003238
	adds r0, r5, r0
	lsls r4, r4, #1
	ldr r1, _08073F04 @ =0x02021D08
	adds r1, r4, r1
	adds r2, r6, #0
	movs r3, #0xc
	bl TmCopyRect_t
	ldr r0, _08073F08 @ =0x02003738
	adds r0, r5, r0
	ldr r1, _08073F0C @ =0x02022508
	adds r1, r4, r1
	adds r2, r6, #0
	movs r3, #0xc
	bl TmCopyRect_t
	ldr r0, _08073F10 @ =0x02003C38
	adds r5, r5, r0
	ldr r0, _08073F14 @ =0x02022D08
	adds r4, r4, r0
	adds r0, r5, #0
	adds r1, r4, #0
	adds r2, r6, #0
	movs r3, #0xc
	bl TmCopyRect_t
	movs r0, #7
	bl EnableBgSync
	adds r0, r7, #0
	adds r0, #0x4c
	ldrh r1, [r0]
	adds r1, #1
	strh r1, [r0]
	ldr r1, _08073F18 @ =0x086783B0
	movs r2, #0
	ldrsh r0, [r0, r2]
	adds r0, r0, r1
	movs r5, #0
	ldrsb r5, [r0, r5]
	movs r0, #0x80
	rsbs r0, r0, #0
	cmp r5, r0
	bne _08073EF6
	adds r0, r7, #0
	bl Proc_Break
_08073EF6:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08073F00: .4byte 0x02003238
_08073F04: .4byte 0x02021D08
_08073F08: .4byte 0x02003738
_08073F0C: .4byte 0x02022508
_08073F10: .4byte 0x02003C38
_08073F14: .4byte 0x02022D08
_08073F18: .4byte 0x086783B0

	thumb_func_start sub_8073F1C
sub_8073F1C: @ 0x08073F1C
	ldr r1, _08073F24 @ =0x020040B8
	movs r0, #1
	strb r0, [r1, #4]
	bx lr
	.align 2, 0
_08073F24: .4byte 0x020040B8

	thumb_func_start sub_8073F28
sub_8073F28: @ 0x08073F28
	ldr r1, _08073F30 @ =0x020040B8
	movs r0, #0
	strb r0, [r1, #4]
	bx lr
	.align 2, 0
_08073F30: .4byte 0x020040B8

	thumb_func_start sub_8073F34
sub_8073F34: @ 0x08073F34
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	mov r8, r1
	adds r7, r2, #0
	ldr r5, _08073F84 @ =0x086783C4
	adds r0, r5, #0
	bl Proc_Find
	adds r4, r0, #0
	cmp r4, #0
	bne _08073F78
	adds r0, r5, #0
	adds r1, r6, #0
	bl SpawnProcLocking
	mov r1, r8
	str r1, [r0, #0x2c]
	adds r1, r0, #0
	adds r1, #0x4a
	strh r7, [r1]
	adds r0, #0x4c
	strh r4, [r0]
	ldr r0, _08073F88 @ =0x020040B8
	str r7, [r0]
	ldr r0, _08073F8C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08073F78
	movs r0, #0x6f
	bl m4aSongNumStart
_08073F78:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08073F84: .4byte 0x086783C4
_08073F88: .4byte 0x020040B8
_08073F8C: .4byte gPlaySt

	thumb_func_start sub_8073F90
sub_8073F90: @ 0x08073F90
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r1, _08073FB0 @ =gPlaySt
	movs r0, #0x20
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	beq _08073FC0
	ldr r0, _08073FB4 @ =0x020040B8
	ldr r0, [r0]
	ldr r4, _08073FB8 @ =0x0868B2C8
	cmp r0, #0
	beq _08073FC2
	ldr r4, _08073FBC @ =0x0868B3C4
	b _08073FC2
	.align 2, 0
_08073FB0: .4byte gPlaySt
_08073FB4: .4byte 0x020040B8
_08073FB8: .4byte 0x0868B2C8
_08073FBC: .4byte 0x0868B3C4
_08073FC0:
	ldr r4, _08073FDC @ =0x0868B1B0
_08073FC2:
	movs r1, #1
	rsbs r1, r1, #0
	movs r0, #0
	bl sub_8070E70
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_80709E8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08073FDC: .4byte 0x0868B1B0

	thumb_func_start sub_8073FE0
sub_8073FE0: @ 0x08073FE0
	push {r4, r5, lr}
	adds r4, r0, #0
	cmp r4, #0
	bne _0807405C
	ldr r3, _08074048 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r0, #6
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r4, [r0]
	ldr r0, _0807404C @ =0x0000FFE0
	ldrh r2, [r3, #0x3c]
	ands r0, r2
	ldr r1, _08074050 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	ldr r5, _08074054 @ =0x02004108
	ldr r4, _08074058 @ =0x02021F8E
	adds r0, r5, #0
	adds r1, r4, #0
	bl PutText
	subs r4, #2
	bl GetGlobalCompletedPlaythroughCount
	adds r2, r0, #0
	adds r2, #1
	adds r0, r4, #0
	movs r1, #2
	bl PutNumber
	subs r5, #0x50
	movs r0, #1
	strb r0, [r5, #5]
	b _0807406E
	.align 2, 0
_08074048: .4byte gDispIo
_0807404C: .4byte 0x0000FFE0
_08074050: .4byte 0x0000E0FF
_08074054: .4byte 0x02004108
_08074058: .4byte 0x02021F8E
_0807405C:
	ldr r0, _0807407C @ =0x02021F88
	movs r1, #6
	movs r2, #2
	movs r3, #0
	bl TmFillRect_t
	ldr r1, _08074080 @ =0x020040B8
	movs r0, #0
	strb r0, [r1, #5]
_0807406E:
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807407C: .4byte 0x02021F88
_08074080: .4byte 0x020040B8

	thumb_func_start sub_8074084
sub_8074084: @ 0x08074084
	push {r4, lr}
	bl sub_80846F0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080740C6
	ldr r4, _080740CC @ =gPlaySt
	movs r0, #0x20
	ldrb r1, [r4, #0x14]
	ands r0, r1
	cmp r0, #0
	bne _080740C6
	ldrb r2, [r4, #0x1d]
	lsls r1, r2, #0x1b
	lsrs r1, r1, #0x1f
	movs r0, #1
	eors r1, r0
	lsls r1, r1, #4
	subs r0, #0x12
	ands r0, r2
	orrs r0, r1
	strb r0, [r4, #0x1d]
	bl IsFirstPlaythrough
	bl sub_8073FE0
	ldrb r4, [r4, #0x1d]
	lsls r0, r4, #0x1e
	cmp r0, #0
	blt _080740C6
	movs r0, #0x77
	bl m4aSongNumStart
_080740C6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080740CC: .4byte gPlaySt

	thumb_func_start sub_80740D0
sub_80740D0: @ 0x080740D0
	push {lr}
	ldr r0, _080740E0 @ =0x08678320
	bl Proc_EndEach
	bl sub_806EABC
	pop {r0}
	bx r0
	.align 2, 0
_080740E0: .4byte 0x08678320

	thumb_func_start sub_80740E4
sub_80740E4: @ 0x080740E4
	push {lr}
	ldr r0, _080740F0 @ =0x08678330
	bl InitTextList
	pop {r0}
	bx r0
	.align 2, 0
_080740F0: .4byte 0x08678330

	thumb_func_start sub_80740F4
sub_80740F4: @ 0x080740F4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r1, _08074124 @ =gKeySt
	ldr r0, [r1]
	ldrh r2, [r0, #8]
	movs r0, #2
	ands r0, r2
	adds r5, r1, #0
	cmp r0, #0
	beq _0807412C
	ldr r0, _08074128 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08074118
	movs r0, #0x6b
	bl m4aSongNumStart
_08074118:
	adds r0, r4, #0
	movs r1, #0x63
	bl Proc_Goto
	b _080741A2
	.align 2, 0
_08074124: .4byte gKeySt
_08074128: .4byte gPlaySt
_0807412C:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r2
	cmp r0, #0
	beq _0807413E
	adds r0, r4, #0
	bl sub_8073F90
	b _080741A2
_0807413E:
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r2
	cmp r0, #0
	beq _08074150
	adds r0, r4, #0
	bl sub_8074084
	b _080741A2
_08074150:
	ldr r1, _0807417C @ =gPlaySt
	movs r0, #0x20
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	beq _080741A2
	ldr r0, _08074180 @ =0x020040B8
	ldr r1, [r0]
	adds r3, r0, #0
	cmp r1, #0
	bne _08074184
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	beq _08074184
	adds r0, r4, #0
	movs r1, #1
	movs r2, #1
	bl sub_8073F34
	b _080741A2
	.align 2, 0
_0807417C: .4byte gPlaySt
_08074180: .4byte 0x020040B8
_08074184:
	ldr r0, [r3]
	cmp r0, #1
	bne _080741A2
	ldr r1, [r5]
	movs r0, #0x20
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080741A2
	movs r1, #1
	rsbs r1, r1, #0
	adds r0, r4, #0
	movs r2, #0
	bl sub_8073F34
_080741A2:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_80741A8
sub_80741A8: @ 0x080741A8
	push {lr}
	ldr r1, _080741C4 @ =gPlaySt
	movs r0, #0x20
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	bne _080741BE
	bl IsFirstPlaythrough
	bl sub_8073FE0
_080741BE:
	pop {r0}
	bx r0
	.align 2, 0
_080741C4: .4byte gPlaySt

	thumb_func_start sub_80741C8
sub_80741C8: @ 0x080741C8
	push {lr}
	adds r1, r0, #0
	cmp r1, #0
	beq _080741DC
	ldr r0, _080741D8 @ =0x086783E4
	bl SpawnProcLocking
	b _080741E4
	.align 2, 0
_080741D8: .4byte 0x086783E4
_080741DC:
	ldr r0, _080741E8 @ =0x086783E4
	movs r1, #3
	bl SpawnProc
_080741E4:
	pop {r0}
	bx r0
	.align 2, 0
_080741E8: .4byte 0x086783E4

	thumb_func_start sub_80741EC
sub_80741EC: @ 0x080741EC
	push {r4, r5, r6, lr}
	ldr r0, _08074248 @ =0x0200D6B4
	bl UnitRearrangeInit
	movs r4, #0
	ldr r0, _0807424C @ =0x0200CD38
	ldrb r1, [r0]
	cmp r4, r1
	bge _08074212
	ldr r6, _08074250 @ =0x0200CC38
	adds r5, r0, #0
_08074202:
	ldm r6!, {r0}
	ldr r0, [r0]
	bl UnitRearrangeAdd
	adds r4, #1
	ldrb r2, [r5]
	cmp r4, r2
	blt _08074202
_08074212:
	movs r4, #1
_08074214:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _08074236
	ldr r0, [r1]
	cmp r0, #0
	beq _08074236
	movs r0, #4
	ldrh r2, [r1, #0xc]
	ands r0, r2
	cmp r0, #0
	beq _08074236
	adds r0, r1, #0
	bl UnitRearrangeAdd
_08074236:
	adds r4, #1
	cmp r4, #0x3f
	ble _08074214
	bl UnitRearrangeApply
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08074248: .4byte 0x0200D6B4
_0807424C: .4byte 0x0200CD38
_08074250: .4byte 0x0200CC38

	thumb_func_start sub_8074254
sub_8074254: @ 0x08074254
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	lsls r1, r1, #0x18
	lsrs r7, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r6, r2, #0x18
	ldr r0, _080742CC @ =0x08678744
	ldr r3, [r0]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	mov r1, r8
	adds r2, r7, #0
	bl PutSpriteExt
	movs r5, #0
	subs r0, r6, #1
	cmp r5, r0
	bge _080742A8
	mov r4, r8
	adds r4, #8
_0807428A:
	ldr r0, _080742CC @ =0x08678744
	ldr r3, [r0, #4]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	adds r1, r4, #0
	adds r2, r7, #0
	bl PutSpriteExt
	adds r4, #0x10
	adds r5, #1
	subs r0, r6, #1
	cmp r5, r0
	blt _0807428A
_080742A8:
	lsls r1, r5, #4
	add r1, r8
	adds r1, #8
	ldr r0, _080742CC @ =0x08678744
	ldr r3, [r0, #8]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	adds r2, r7, #0
	bl PutSpriteExt
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080742CC: .4byte 0x08678744

	thumb_func_start sub_80742D0
sub_80742D0: @ 0x080742D0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldr r0, _0807432C @ =0x02022B70
	movs r1, #4
	movs r2, #1
	movs r3, #0
	bl TmFillRect_t
	ldr r4, _08074330 @ =0x0200D6AC
	adds r0, r4, #0
	bl ClearText
	movs r3, #0
	ldr r0, _08074334 @ =0x08678840
	mov r8, r0
	adds r5, r4, #0
	mov sb, r8
_080742FA:
	movs r2, #0
	lsls r1, r3, #3
	adds r6, r3, #1
	adds r1, r1, r3
	lsls r1, r1, #4
	mov r0, sb
	adds r0, #4
	adds r4, r1, r0
	add r1, r8
_0807430C:
	ldrb r0, [r1]
	cmp r0, r7
	bne _08074360
	cmp r3, #5
	bne _08074338
	cmp r2, #0
	beq _08074338
	adds r1, r2, #0
	adds r1, #0x6f
	ldr r0, _0807432C @ =0x02022B70
	movs r2, #0xa0
	lsls r2, r2, #7
	bl PutIcon
	b _0807436A
	.align 2, 0
_0807432C: .4byte 0x02022B70
_08074330: .4byte 0x0200D6AC
_08074334: .4byte 0x08678840
_08074338:
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetCursor
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetColor
	ldr r1, [r4]
	adds r0, r5, #0
	bl Text_DrawString
	adds r0, r5, #0
	ldr r1, _0807435C @ =0x02022B70
	bl PutText
	b _0807436A
	.align 2, 0
_0807435C: .4byte 0x02022B70
_08074360:
	adds r4, #0x10
	adds r1, #0x10
	adds r2, #1
	cmp r2, #8
	ble _0807430C
_0807436A:
	adds r3, r6, #0
	cmp r3, #9
	ble _080742FA
	movs r0, #4
	bl EnableBgSync
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8074384
sub_8074384: @ 0x08074384
	push {r4, lr}
	adds r3, r0, #0
	movs r2, #0
	ldr r1, _080743B4 @ =0x0200E6B4
_0807438C:
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r0, [r0]
	cmp r0, r3
	beq _080743C2
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #7
	bls _0807438C
	movs r2, #0
	ldr r4, _080743B4 @ =0x0200E6B4
_080743A4:
	lsls r0, r2, #2
	adds r1, r0, r4
	ldr r0, [r1]
	cmp r0, #0xff
	bne _080743B8
	str r3, [r1]
	b _080743C2
	.align 2, 0
_080743B4: .4byte 0x0200E6B4
_080743B8:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #7
	bls _080743A4
_080743C2:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_80743C8
sub_80743C8: @ 0x080743C8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x28
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x14
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	movs r5, #0
	ldr r2, _08074494 @ =0x0200CD38
	movs r1, #0xff
_080743DE:
	lsls r0, r5, #2
	add r0, sp
	str r1, [r0]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #7
	bls _080743DE
	cmp r6, #0
	beq _080743F8
	subs r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
_080743F8:
	movs r5, #0
	ldrb r2, [r2]
	cmp r6, r2
	bge _08074440
	ldr r7, _08074498 @ =0x0200CC38
_08074402:
	adds r0, r6, r5
	lsls r0, r0, #2
	adds r4, r0, r7
	ldr r0, [r4]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _0807442C
	ldr r0, [r4]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIcon
	lsls r1, r5, #2
	add r1, sp
	str r0, [r1]
_0807442C:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #7
	bhi _08074440
	adds r1, r5, r6
	ldr r0, _08074494 @ =0x0200CD38
	ldrb r0, [r0]
	cmp r1, r0
	blt _08074402
_08074440:
	movs r5, #0
	ldr r7, _0807449C @ =0x0200E6B4
	mov r8, r7
_08074446:
	lsls r1, r5, #2
	mov r2, r8
	adds r0, r1, r2
	ldr r0, [r0]
	adds r6, r5, #1
	cmp r0, #0xff
	beq _08074480
	movs r5, #0
	movs r2, #0
	adds r3, r0, #0
_0807445A:
	lsls r0, r2, #2
	add r0, sp
	ldr r0, [r0]
	cmp r0, r3
	bne _08074466
	movs r5, #1
_08074466:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #7
	bls _0807445A
	cmp r5, #0
	bne _08074480
	adds r4, r1, r7
	ldr r0, [r4]
	bl ClearIcon
	movs r0, #0xff
	str r0, [r4]
_08074480:
	lsls r0, r6, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #7
	bls _08074446
	add sp, #0x28
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08074494: .4byte 0x0200CD38
_08074498: .4byte 0x0200CC38
_0807449C: .4byte 0x0200E6B4

	thumb_func_start sub_80744A0
sub_80744A0: @ 0x080744A0
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r0, r1, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r0, r0, #0x18
	lsls r2, r2, #0x18
	lsrs r5, r2, #0x18
	lsrs r0, r0, #0x1b
	movs r1, #6
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	adds r6, r3, #0
	cmp r4, #0
	bne _0807450C
	lsls r0, r5, #0x18
	asrs r2, r0, #0x18
	cmp r2, #0
	beq _080744F4
	ldr r2, _080744E8 @ =gBg2Tm
	ldr r0, _080744EC @ =0x0000F368
	adds r1, r3, r0
	movs r4, #0x80
	lsls r4, r4, #1
	adds r0, r2, r4
	strh r1, [r0]
	ldr r0, _080744F0 @ =0x0000F36E
	adds r1, r3, r0
	movs r3, #0xa0
	lsls r3, r3, #1
	adds r0, r2, r3
	strh r1, [r0]
	b _08074546
	.align 2, 0
_080744E8: .4byte gBg2Tm
_080744EC: .4byte 0x0000F368
_080744F0: .4byte 0x0000F36E
_080744F4:
	ldr r1, _08074508 @ =gBg2Tm
	movs r4, #0x80
	lsls r4, r4, #1
	adds r0, r1, r4
	strh r2, [r0]
	movs r3, #0xa0
	lsls r3, r3, #1
	adds r0, r1, r3
	strh r2, [r0]
	b _08074546
	.align 2, 0
_08074508: .4byte gBg2Tm
_0807450C:
	lsls r0, r5, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08074534
	ldr r2, _0807452C @ =gBg2Tm
	ldr r4, _08074530 @ =0x0000F768
	adds r0, r6, r4
	movs r3, #0x9d
	lsls r3, r3, #1
	adds r1, r2, r3
	strh r0, [r1]
	adds r4, #6
	adds r0, r6, r4
	adds r3, #0x40
	adds r1, r2, r3
	b _08074544
	.align 2, 0
_0807452C: .4byte gBg2Tm
_08074530: .4byte 0x0000F768
_08074534:
	ldr r1, _08074554 @ =gBg2Tm
	movs r4, #0x9d
	lsls r4, r4, #1
	adds r2, r1, r4
	strh r0, [r2]
	movs r2, #0xbd
	lsls r2, r2, #1
	adds r1, r1, r2
_08074544:
	strh r0, [r1]
_08074546:
	movs r0, #4
	bl EnableBgSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08074554: .4byte gBg2Tm

	thumb_func_start sub_8074558
sub_8074558: @ 0x08074558
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r6, r0, #0
	lsls r1, r1, #0x18
	lsrs r4, r1, #0x18
	cmp r1, #0
	beq _080745A2
	ldr r0, _08074570 @ =0x0200E7D8
	ldr r2, [r0]
	b _080745A8
	.align 2, 0
_08074570: .4byte 0x0200E7D8
_08074574:
	adds r0, r6, #0
	adds r0, #0x2c
	strb r5, [r0]
	adds r0, #0x14
	strh r5, [r0]
	b _0807465E
_08074580:
	adds r0, r6, #0
	adds r0, #0x2c
	strb r5, [r0]
	adds r0, #0x14
	strh r3, [r0]
	b _0807465E
_0807458C:
	subs r1, r5, r1
	adds r0, r6, #0
	adds r0, #0x2c
	strb r1, [r0]
	b _0807465E
_08074596:
	adds r1, r6, #0
	adds r1, #0x2c
	movs r0, #1
	strb r0, [r1]
	strh r3, [r7]
	b _0807465E
_080745A2:
	bl sub_806EACC
	adds r2, r0, #0
_080745A8:
	movs r5, #0
	ldr r0, _080745DC @ =0x0200CD38
	ldrb r3, [r0]
	mov r8, r0
	cmp r5, r3
	bhs _0807465E
	lsls r0, r4, #0x18
	asrs r7, r0, #0x18
	ldr r4, _080745E0 @ =0x0200CC38
	movs r0, #0x2c
	adds r0, r0, r6
	mov ip, r0
	adds r1, r6, #0
	adds r1, #0x40
_080745C4:
	cmp r7, #0
	beq _080745E4
	lsls r0, r5, #2
	adds r0, r0, r4
	ldr r0, [r0]
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	cmp r0, r2
	beq _080745F6
	b _08074654
	.align 2, 0
_080745DC: .4byte 0x0200CD38
_080745E0: .4byte 0x0200CC38
_080745E4:
	lsls r0, r5, #2
	adds r0, r0, r4
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, r2
	bne _08074654
_080745F6:
	adds r0, r6, #0
	adds r0, #0x30
	movs r3, #0
	strb r5, [r0]
	cmp r5, #0
	beq _08074574
	mov r0, r8
	ldrb r2, [r0]
	subs r0, r2, #1
	cmp r5, r0
	bne _08074622
	cmp r2, #6
	bls _08074580
	movs r0, #5
	mov r2, ip
	strb r0, [r2]
	mov r2, r8
	ldrb r0, [r2]
	subs r0, #6
	lsls r0, r0, #4
	strh r0, [r1]
	b _0807465E
_08074622:
	ldrh r1, [r1]
	lsrs r1, r1, #4
	adds r0, r1, #0
	adds r4, r6, #0
	adds r4, #0x40
	cmp r5, r0
	bls _08074636
	adds r0, #5
	cmp r5, r0
	blt _0807458C
_08074636:
	adds r7, r4, #0
	ldrh r2, [r4]
	subs r0, r5, #1
	lsls r3, r0, #4
	cmp r2, r3
	bgt _08074596
	subs r0, r5, #4
	lsls r1, r0, #4
	cmp r2, r1
	bge _0807465E
	movs r0, #4
	mov r2, ip
	strb r0, [r2]
	strh r1, [r4]
	b _0807465E
_08074654:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, r3
	blo _080745C4
_0807465E:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8074668
sub_8074668: @ 0x08074668
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x18
	asrs r2, r0, #0x18
	cmp r2, #0
	beq _0807470C
	ldr r0, _08074708 @ =gDispIo
	mov ip, r0
	movs r0, #0x20
	mov r1, ip
	ldrb r1, [r1, #1]
	orrs r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r2, ip
	strb r0, [r2, #1]
	mov r0, ip
	adds r0, #0x2d
	movs r2, #0
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x31
	movs r0, #0x38
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2c
	movs r3, #0xf0
	strb r3, [r0]
	subs r1, #1
	movs r0, #0x98
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2f
	strb r2, [r0]
	adds r0, #4
	strb r2, [r0]
	subs r0, #5
	strb r3, [r0]
	adds r1, #2
	movs r0, #0x20
	strb r0, [r1]
	adds r1, #2
	movs r0, #1
	ldrb r3, [r1]
	orrs r0, r3
	movs r4, #2
	orrs r0, r4
	movs r3, #4
	orrs r0, r3
	movs r2, #8
	orrs r0, r2
	movs r5, #0x10
	orrs r0, r5
	strb r0, [r1]
	mov r6, ip
	adds r6, #0x35
	movs r1, #2
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r7, [r6]
	ands r0, r7
	orrs r0, r4
	orrs r0, r3
	orrs r0, r2
	orrs r0, r5
	strb r0, [r6]
	mov r5, ip
	adds r5, #0x36
	ldrb r0, [r5]
	ands r1, r0
	orrs r1, r4
	orrs r1, r3
	orrs r1, r2
	movs r0, #0x11
	rsbs r0, r0, #0
	ands r1, r0
	strb r1, [r5]
	b _0807476C
	.align 2, 0
_08074708: .4byte gDispIo
_0807470C:
	ldr r1, _08074774 @ =gDispIo
	mov ip, r1
	movs r0, #0x20
	ldrb r3, [r1, #1]
	orrs r0, r3
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r6, ip
	strb r0, [r6, #1]
	mov r0, ip
	adds r0, #0x2d
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x31
	movs r0, #0x38
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x98
	strb r0, [r1]
	adds r1, #4
	movs r0, #1
	ldrb r7, [r1]
	orrs r0, r7
	movs r5, #2
	orrs r0, r5
	movs r4, #4
	orrs r0, r4
	movs r3, #8
	orrs r0, r3
	movs r2, #0x10
	orrs r0, r2
	strb r0, [r1]
	adds r1, #2
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r6, [r1]
	ands r0, r6
	orrs r0, r5
	orrs r0, r4
	orrs r0, r3
	orrs r0, r2
	strb r0, [r1]
_0807476C:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08074774: .4byte gDispIo

	thumb_func_start sub_8074778
sub_8074778: @ 0x08074778
	push {r4, lr}
	adds r4, r0, #0
	bl MU_EndAll
	ldr r0, [r4, #0x44]
	bl Proc_End
	ldr r0, [r4, #0x48]
	bl Proc_End
	bl EndGreenText
	ldr r2, _080747B8 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r0, r4, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne _080747BC
	movs r0, #4
	bl sub_806EAE4
	b _080747C2
	.align 2, 0
_080747B8: .4byte gDispIo
_080747BC:
	movs r0, #0xc
	bl sub_806EAE4
_080747C2:
	ldr r1, _080747FC @ =0x0200CC38
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	adds r1, r4, #0
	bl sub_80702BC
	ldr r1, _08074800 @ =gPlaySt
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r0, [r0]
	lsls r0, r0, #7
	adds r2, r4, #0
	adds r2, #0x32
	ldrb r2, [r2]
	adds r0, r2, r0
	strb r0, [r1, #0x1a]
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #4
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080747FC: .4byte 0x0200CC38
_08074800: .4byte gPlaySt

	thumb_func_start sub_8074804
sub_8074804: @ 0x08074804
	push {lr}
	bl sub_8074EF0
	ldr r2, _0807482C @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	pop {r0}
	bx r0
	.align 2, 0
_0807482C: .4byte gDispIo

	thumb_func_start sub_8074830
sub_8074830: @ 0x08074830
	ldr r2, _0807484C @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_0807484C: .4byte gDispIo

	thumb_func_start sub_8074850
sub_8074850: @ 0x08074850
	push {r4, lr}
	sub sp, #0xc
	adds r4, r0, #0
	ldr r0, [r4, #0x14]
	str r0, [r4, #0x2c]
	adds r0, r4, #0
	adds r0, #0x3b
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r0, [r4, #0x2c]
	adds r0, #0x40
	ldrh r0, [r0]
	strh r0, [r4, #0x38]
	adds r0, r4, #0
	adds r0, #0x3a
	strb r1, [r0]
	subs r0, #0xa
	strb r1, [r0]
	adds r0, r4, #0
	bl sub_808230C
	str r0, [r4, #0x34]
	ldr r1, [r4, #0x2c]
	adds r1, #0x40
	ldrh r1, [r1]
	str r1, [sp]
	ldr r1, _080748A8 @ =0x0200CD38
	ldrb r1, [r1]
	str r1, [sp, #4]
	movs r1, #6
	str r1, [sp, #8]
	movs r1, #0xe0
	movs r2, #0x40
	movs r3, #0xa
	bl sub_8082320
	bl ForceSyncUnitSpriteSheet
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080748A8: .4byte 0x0200CD38

	thumb_func_start sub_80748AC
sub_80748AC: @ 0x080748AC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r6, r0, #0
	ldr r1, _080748F4 @ =0x08327148
	add r0, sp, #0xc
	movs r2, #4
	bl memcpy
	ldr r0, [r6, #0x2c]
	adds r0, #0x34
	ldrb r0, [r0]
	cmp r0, #0
	bne _080748FC
	adds r4, r6, #0
	adds r4, #0x3b
	ldrb r1, [r4]
	lsrs r0, r1, #3
	movs r1, #3
	ands r0, r1
	add r0, sp
	adds r0, #0xc
	ldrb r2, [r0]
	adds r2, #7
	ldr r3, _080748F8 @ =0x08678750
	movs r0, #0x90
	lsls r0, r0, #8
	str r0, [sp]
	movs r0, #0xb
	movs r1, #0xb8
	bl PutSpriteExt
	b _08074920
	.align 2, 0
_080748F4: .4byte 0x08327148
_080748F8: .4byte 0x08678750
_080748FC:
	ldr r1, _080749A4 @ =0x000020B8
	adds r4, r6, #0
	adds r4, #0x3b
	ldrb r2, [r4]
	lsrs r0, r2, #3
	movs r2, #3
	ands r0, r2
	add r0, sp
	adds r0, #0xc
	ldrb r2, [r0]
	adds r2, #7
	ldr r3, _080749A8 @ =0x08678750
	movs r0, #0x90
	lsls r0, r0, #8
	str r0, [sp]
	movs r0, #0xb
	bl PutSpriteExt
_08074920:
	str r4, [sp, #0x10]
	ldr r1, _080749AC @ =0x08678818
	ldr r0, [r6, #0x2c]
	adds r0, #0x2f
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r3, [r0]
	movs r5, #0x90
	lsls r5, r5, #8
	str r5, [sp]
	movs r0, #0xd
	movs r1, #0x20
	movs r2, #8
	bl PutSpriteExt
	ldr r3, _080749B0 @ =0x08678758
	str r5, [sp]
	movs r0, #0xd
	movs r1, #0xa0
	movs r2, #0
	bl PutSpriteExt
	ldr r0, [r6, #0x34]
	ldr r1, [r6, #0x2c]
	adds r1, #0x40
	ldrh r1, [r1]
	str r1, [sp]
	ldr r1, _080749B4 @ =0x0200CD38
	ldrb r1, [r1]
	str r1, [sp, #4]
	movs r1, #6
	str r1, [sp, #8]
	movs r1, #0xe0
	movs r2, #0x40
	movs r3, #0xa
	bl sub_8082320
	ldr r4, [r6, #0x2c]
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #2
	bls _080749BC
	ldr r1, _080749B8 @ =0x08678840
	adds r3, r4, #0
	adds r3, #0x2d
	adds r2, r4, #0
	adds r2, #0x2f
	ldrb r5, [r2]
	lsls r0, r5, #3
	adds r0, r0, r5
	ldrb r3, [r3]
	adds r0, r3, r0
	lsls r0, r0, #4
	adds r0, r0, r1
	ldrb r0, [r0, #8]
	adds r1, r4, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	lsls r1, r1, #4
	adds r1, #0x28
	bl sub_80415CC
	b _080749D2
	.align 2, 0
_080749A4: .4byte 0x000020B8
_080749A8: .4byte 0x08678750
_080749AC: .4byte 0x08678818
_080749B0: .4byte 0x08678758
_080749B4: .4byte 0x0200CD38
_080749B8: .4byte 0x08678840
_080749BC:
	adds r0, r4, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	lsls r2, r0, #4
	adds r2, #0x40
	ldr r3, _08074A24 @ =0x08678760
	str r5, [sp]
	movs r0, #0xd
	movs r1, #4
	bl PutSpriteExt
_080749D2:
	ldr r0, [r6, #0x2c]
	adds r1, r0, #0
	adds r1, #0x40
	ldrh r0, [r6, #0x38]
	ldrh r2, [r1]
	cmp r0, r2
	bne _080749E8
	movs r0, #0xf
	ands r0, r2
	cmp r0, #0
	beq _08074A30
_080749E8:
	ldr r0, _08074A28 @ =gPal
	ldr r1, _08074A2C @ =0x02016874
	ldrh r1, [r1, #0x10]
	movs r5, #0xcf
	lsls r5, r5, #2
	adds r0, r0, r5
	strh r1, [r0]
	bl EnablePalSync
	adds r2, r6, #0
	adds r2, #0x3c
	movs r0, #0x20
	strb r0, [r2]
	ldr r0, [r6, #0x2c]
	adds r0, #0x40
	ldrh r0, [r0]
	strh r0, [r6, #0x38]
	adds r0, r6, #0
	adds r0, #0x3a
	ldrb r1, [r0]
	str r2, [sp, #0x14]
	adds r7, r0, #0
	cmp r1, #0
	bne _08074A6A
	movs r0, #1
	bl sub_8074668
	movs r0, #1
	b _08074A68
	.align 2, 0
_08074A24: .4byte 0x08678760
_08074A28: .4byte gPal
_08074A2C: .4byte 0x02016874
_08074A30:
	ldr r2, _08074B20 @ =gPal
	ldr r3, _08074B24 @ =0x02016874
	adds r4, r6, #0
	adds r4, #0x3c
	ldrb r1, [r4]
	lsrs r0, r1, #2
	movs r1, #0xf
	ands r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	movs r5, #0xcf
	lsls r5, r5, #2
	adds r2, r2, r5
	strh r0, [r2]
	bl EnablePalSync
	adds r0, r6, #0
	adds r0, #0x3a
	str r4, [sp, #0x14]
	adds r7, r0, #0
	ldrb r0, [r7]
	cmp r0, #1
	bne _08074A6A
	movs r0, #0
	bl sub_8074668
	movs r0, #0
_08074A68:
	strb r0, [r7]
_08074A6A:
	bl SyncUnitSpriteSheet
	ldrh r1, [r6, #0x38]
	lsrs r0, r1, #4
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	movs r0, #0xf
	ands r1, r0
	rsbs r1, r1, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov sl, r1
	movs r4, #0
	ldr r0, _08074B28 @ =0x0200CD38
	movs r1, #0x30
	adds r1, r1, r6
	mov r8, r1
	ldrb r0, [r0]
	cmp r5, r0
	bge _08074AC8
	mov r2, sl
	lsls r0, r2, #0x18
	asrs r0, r0, #0x18
	adds r0, #0x38
	mov sb, r0
_08074A9C:
	lsls r2, r4, #4
	add r2, sb
	adds r0, r4, r5
	lsls r0, r0, #2
	ldr r1, _08074B2C @ =0x0200CC38
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r3, [r0]
	movs r0, #4
	movs r1, #8
	bl PutUnitSprite
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #5
	bhi _08074AC8
	adds r1, r4, r5
	ldr r0, _08074B28 @ =0x0200CD38
	ldrb r0, [r0]
	cmp r1, r0
	blt _08074A9C
_08074AC8:
	ldrb r0, [r7]
	cmp r0, #0
	beq _08074AF6
	adds r3, r4, r5
	ldr r0, _08074B28 @ =0x0200CD38
	ldrb r0, [r0]
	cmp r3, r0
	bge _08074AF6
	lsls r2, r4, #4
	mov r5, sl
	lsls r0, r5, #0x18
	asrs r0, r0, #0x18
	adds r0, #0x38
	adds r2, r2, r0
	ldr r1, _08074B2C @ =0x0200CC38
	lsls r0, r3, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r3, [r0]
	movs r0, #4
	movs r1, #8
	bl PutUnitSprite
_08074AF6:
	ldr r0, [r6, #0x2c]
	adds r1, r0, #0
	adds r1, #0x2f
	adds r2, r0, #0
	adds r2, #0x2e
	ldrb r1, [r1]
	ldrb r2, [r2]
	cmp r1, r2
	bhs _08074B30
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	beq _08074B30
	mov r0, r8
	ldrb r1, [r0]
	movs r0, #1
	movs r2, #1
	bl sub_80744A0
	b _08074B3C
	.align 2, 0
_08074B20: .4byte gPal
_08074B24: .4byte 0x02016874
_08074B28: .4byte 0x0200CD38
_08074B2C: .4byte 0x0200CC38
_08074B30:
	mov r2, r8
	ldrb r1, [r2]
	movs r0, #1
	movs r2, #0
	bl sub_80744A0
_08074B3C:
	ldr r0, [r6, #0x2c]
	adds r1, r0, #0
	adds r1, #0x2f
	ldrb r1, [r1]
	cmp r1, #1
	bls _08074B5E
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	beq _08074B5E
	mov r5, r8
	ldrb r1, [r5]
	movs r0, #0
	movs r2, #1
	bl sub_80744A0
	b _08074B6A
_08074B5E:
	mov r0, r8
	ldrb r1, [r0]
	movs r0, #0
	movs r2, #0
	bl sub_80744A0
_08074B6A:
	mov r1, r8
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x1b
	cmp r0, #5
	bls _08074B7E
	movs r0, #0
	strb r0, [r1]
_08074B7E:
	ldr r2, [sp, #0x10]
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	ldr r5, [sp, #0x14]
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start nullsub_37
nullsub_37: @ 0x08074BA0
	bx lr
	.align 2, 0

	thumb_func_start sub_8074BA4
sub_8074BA4: @ 0x08074BA4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	str r0, [sp]
	ldr r0, _08074D3C @ =gPlaySt
	ldrb r0, [r0, #0xf]
	adds r1, r0, #1
	mov sb, r1
	adds r0, #0x40
	cmp sb, r0
	blt _08074BC2
	b _08074D2C
_08074BC2:
	ldr r2, _08074D40 @ =0x0200CD38
	mov r8, r2
	ldr r0, _08074D44 @ =gBattleUnitA
	str r0, [sp, #4]
_08074BCA:
	mov r0, sb
	bl GetUnit
	adds r7, r0, #0
	movs r1, #1
	add r1, sb
	mov sl, r1
	cmp r7, #0
	bne _08074BDE
	b _08074D1E
_08074BDE:
	ldr r0, [r7]
	cmp r0, #0
	bne _08074BE6
	b _08074D1E
_08074BE6:
	ldrh r1, [r7, #0xc]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _08074BF2
	b _08074D1E
_08074BF2:
	ldr r0, [sp]
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	beq _08074C06
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _08074C06
	b _08074D1E
_08074C06:
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	bne _08074C18
	ldr r1, [sp]
	adds r1, #0x3b
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_08074C18:
	mov r2, r8
	ldrb r2, [r2]
	lsls r0, r2, #1
	mov r1, r8
	ldrb r1, [r1]
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r2, _08074D48 @ =0x0200C938
	adds r0, r0, r2
	str r7, [r0]
	adds r0, r7, #0
	movs r1, #1
	rsbs r1, r1, #0
	bl BattleGenerateDisplayStats
	mov r0, r8
	ldrb r0, [r0]
	lsls r1, r0, #1
	mov r2, r8
	ldrb r2, [r2]
	adds r1, r1, r2
	lsls r1, r1, #2
	ldr r0, _08074D48 @ =0x0200C938
	adds r1, r1, r0
	ldr r0, [sp, #4]
	adds r0, #0x58
	ldrh r0, [r0]
	adds r0, #1
	movs r2, #0xff
	ands r0, r2
	subs r0, #1
	strh r0, [r1, #4]
	mov r0, r8
	ldrb r0, [r0]
	lsls r1, r0, #1
	mov r2, r8
	ldrb r2, [r2]
	adds r1, r1, r2
	lsls r1, r1, #2
	ldr r0, _08074D48 @ =0x0200C938
	adds r1, r1, r0
	ldr r0, [sp, #4]
	adds r0, #0x5e
	ldrh r0, [r0]
	adds r0, #1
	movs r2, #0xff
	ands r0, r2
	subs r0, #1
	strh r0, [r1, #6]
	mov r0, r8
	ldrb r0, [r0]
	lsls r1, r0, #1
	mov r2, r8
	ldrb r2, [r2]
	adds r1, r1, r2
	lsls r1, r1, #2
	ldr r0, _08074D48 @ =0x0200C938
	adds r1, r1, r0
	ldr r2, _08074D4C @ =0x02039274
	ldrh r0, [r2]
	adds r0, #1
	movs r2, #0xff
	ands r0, r2
	subs r0, #1
	strh r0, [r1, #8]
	adds r0, r7, #0
	bl GetUnitSupportCount
	adds r6, r0, #0
	movs r5, #0
	movs r4, #0
	movs r0, #1
	add r0, sb
	mov sl, r0
	cmp r5, r6
	bge _08074CCE
_08074CB0:
	adds r0, r7, #0
	adds r1, r4, #0
	bl CanUnitSupportNow
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08074CC4
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08074CC4:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, r6
	blt _08074CB0
_08074CCE:
	cmp r5, #3
	bls _08074CE2
	subs r0, r5, #1
	movs r1, #3
	bl __divsi3
	adds r0, #6
	ldr r1, [sp]
	adds r1, #0x2e
	strb r0, [r1]
_08074CE2:
	mov r1, r8
	ldrb r1, [r1]
	lsls r0, r1, #1
	mov r2, r8
	ldrb r2, [r2]
	adds r0, r0, r2
	lsls r0, r0, #2
	ldr r1, _08074D48 @ =0x0200C938
	adds r0, r0, r1
	strb r5, [r0, #0xa]
	ldr r0, _08074D50 @ =0x0200CC38
	mov r2, r8
	ldrb r1, [r2]
	lsls r2, r1, #2
	adds r2, r2, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r1, _08074D48 @ =0x0200C938
	adds r0, r0, r1
	str r0, [r2]
	mov r2, r8
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	adds r0, r7, #0
	bl GetUnitMapSprite
	bl UseUnitSprite
_08074D1E:
	mov sb, sl
	ldr r0, _08074D3C @ =gPlaySt
	ldrb r0, [r0, #0xf]
	adds r0, #0x40
	cmp sb, r0
	bge _08074D2C
	b _08074BCA
_08074D2C:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08074D3C: .4byte gPlaySt
_08074D40: .4byte 0x0200CD38
_08074D44: .4byte gBattleUnitA
_08074D48: .4byte 0x0200C938
_08074D4C: .4byte 0x02039274
_08074D50: .4byte 0x0200CC38

	thumb_func_start sub_8074D54
sub_8074D54: @ 0x08074D54
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	str r0, [sp]
	movs r0, #1
	mov sb, r0
	ldr r1, _08074EDC @ =0x0200CD38
	mov r8, r1
	ldr r2, _08074EE0 @ =gBattleUnitA
	str r2, [sp, #4]
_08074D6E:
	mov r0, sb
	bl GetUnit
	adds r7, r0, #0
	movs r0, #1
	add r0, sb
	mov sl, r0
	cmp r7, #0
	bne _08074D82
	b _08074EC2
_08074D82:
	ldr r0, [r7]
	cmp r0, #0
	bne _08074D8A
	b _08074EC2
_08074D8A:
	ldrh r1, [r7, #0xc]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	beq _08074D96
	b _08074EC2
_08074D96:
	ldr r0, [sp]
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	beq _08074DAA
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _08074DAA
	b _08074EC2
_08074DAA:
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	bne _08074DBC
	ldr r1, [sp]
	adds r1, #0x3b
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_08074DBC:
	mov r1, r8
	ldrb r1, [r1]
	lsls r0, r1, #1
	mov r2, r8
	ldrb r2, [r2]
	adds r0, r0, r2
	lsls r0, r0, #2
	ldr r1, _08074EE4 @ =0x0200C938
	adds r0, r0, r1
	str r7, [r0]
	adds r0, r7, #0
	movs r1, #1
	rsbs r1, r1, #0
	bl BattleGenerateDisplayStats
	mov r2, r8
	ldrb r2, [r2]
	lsls r1, r2, #1
	mov r0, r8
	ldrb r0, [r0]
	adds r1, r1, r0
	lsls r1, r1, #2
	ldr r2, _08074EE4 @ =0x0200C938
	adds r1, r1, r2
	ldr r0, [sp, #4]
	adds r0, #0x58
	ldrh r0, [r0]
	adds r0, #1
	movs r2, #0xff
	ands r0, r2
	subs r0, #1
	strh r0, [r1, #4]
	mov r0, r8
	ldrb r0, [r0]
	lsls r1, r0, #1
	mov r2, r8
	ldrb r2, [r2]
	adds r1, r1, r2
	lsls r1, r1, #2
	ldr r0, _08074EE4 @ =0x0200C938
	adds r1, r1, r0
	ldr r0, [sp, #4]
	adds r0, #0x5e
	ldrh r0, [r0]
	adds r0, #1
	movs r2, #0xff
	ands r0, r2
	subs r0, #1
	strh r0, [r1, #6]
	mov r0, r8
	ldrb r0, [r0]
	lsls r1, r0, #1
	mov r2, r8
	ldrb r2, [r2]
	adds r1, r1, r2
	lsls r1, r1, #2
	ldr r0, _08074EE4 @ =0x0200C938
	adds r1, r1, r0
	ldr r2, _08074EE8 @ =0x02039274
	ldrh r0, [r2]
	adds r0, #1
	movs r2, #0xff
	ands r0, r2
	subs r0, #1
	strh r0, [r1, #8]
	adds r0, r7, #0
	bl GetUnitSupportCount
	adds r6, r0, #0
	movs r5, #0
	movs r4, #0
	movs r0, #1
	add r0, sb
	mov sl, r0
	cmp r5, r6
	bge _08074E72
_08074E54:
	adds r0, r7, #0
	adds r1, r4, #0
	bl CanUnitSupportNow
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08074E68
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_08074E68:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, r6
	blt _08074E54
_08074E72:
	cmp r5, #3
	bls _08074E86
	subs r0, r5, #1
	movs r1, #3
	bl __divsi3
	adds r0, #6
	ldr r1, [sp]
	adds r1, #0x2e
	strb r0, [r1]
_08074E86:
	mov r1, r8
	ldrb r1, [r1]
	lsls r0, r1, #1
	mov r2, r8
	ldrb r2, [r2]
	adds r0, r0, r2
	lsls r0, r0, #2
	ldr r1, _08074EE4 @ =0x0200C938
	adds r0, r0, r1
	strb r5, [r0, #0xa]
	ldr r0, _08074EEC @ =0x0200CC38
	mov r2, r8
	ldrb r1, [r2]
	lsls r2, r1, #2
	adds r2, r2, r0
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r1, _08074EE4 @ =0x0200C938
	adds r0, r0, r1
	str r0, [r2]
	mov r2, r8
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	adds r0, r7, #0
	bl GetUnitMapSprite
	bl UseUnitSprite
_08074EC2:
	mov sb, sl
	mov r0, sb
	cmp r0, #0x3f
	bgt _08074ECC
	b _08074D6E
_08074ECC:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08074EDC: .4byte 0x0200CD38
_08074EE0: .4byte gBattleUnitA
_08074EE4: .4byte 0x0200C938
_08074EE8: .4byte 0x02039274
_08074EEC: .4byte 0x0200CC38

	thumb_func_start sub_8074EF0
sub_8074EF0: @ 0x08074EF0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	mov r8, r0
	ldr r2, _08074FCC @ =gDispIo
	movs r5, #1
	ldrb r0, [r2, #1]
	orrs r0, r5
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	bl SetOnVMatch
	movs r0, #0
	bl InitBgs
	bl ResetText
	bl ResetTextFont
	bl ClearIcons
	bl ApplyUnitSpritePalettes
	bl ApplySystemObjectsGraphics
	mov r0, r8
	bl StartGreenText
	ldr r1, _08074FD0 @ =0x0200CD38
	movs r0, #0
	strb r0, [r1]
	mov r1, r8
	adds r1, #0x3b
	movs r0, #0
	strb r0, [r1]
	mov r0, r8
	adds r0, #0x2e
	movs r6, #6
	strb r6, [r0]
	mov r0, r8
	bl sub_8074D54
	mov r0, r8
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne _08074F7E
	mov r0, r8
	adds r0, #0x2a
	movs r1, #0x32
	add r1, r8
	mov sl, r1
	movs r2, #0x29
	add r2, r8
	mov sb, r2
	mov r7, r8
	adds r7, #0x2f
	ldrb r0, [r0]
	cmp r0, #1
	bne _08074FEC
_08074F7E:
	ldr r4, _08074FD4 @ =gPlaySt
	ldrb r1, [r4, #0x1a]
	mov r3, r8
	adds r3, #0x34
	movs r0, #0x32
	add r0, r8
	mov sl, r0
	cmp r1, #0
	beq _08074FA4
	lsrs r0, r1, #7
	ands r0, r5
	mov r2, r8
	adds r2, #0x33
	strb r0, [r2]
	strb r0, [r3]
	movs r0, #0x7f
	ands r1, r0
	mov r2, sl
	strb r1, [r2]
_08074FA4:
	mov r0, r8
	adds r0, #0x29
	mov sb, r0
	mov r7, r8
	adds r7, #0x2f
	ldrb r0, [r0]
	cmp r0, #4
	beq _08074FE2
	ldrb r0, [r7]
	cmp r0, #0
	beq _08074FE2
	ldrb r4, [r4, #0x19]
	lsrs r1, r4, #4
	cmp r1, #0
	beq _08074FE2
	cmp r1, #6
	bls _08074FD8
	strb r6, [r7]
	b _08074FDA
	.align 2, 0
_08074FCC: .4byte gDispIo
_08074FD0: .4byte 0x0200CD38
_08074FD4: .4byte gPlaySt
_08074FD8:
	strb r1, [r7]
_08074FDA:
	ldrb r0, [r7]
	mov r1, r8
	adds r1, #0x36
	strb r0, [r1]
_08074FE2:
	mov r1, sl
	ldrb r0, [r1]
	ldrb r1, [r3]
	bl sub_8076D3C
_08074FEC:
	ldr r0, _080750DC @ =0x083198CC
	ldr r1, _080750E0 @ =0x06017200
	bl Decompress
	ldr r0, _080750E4 @ =0x08319E88
	movs r1, #0x88
	lsls r1, r1, #2
	movs r2, #0x60
	bl ApplyPaletteExt
	ldr r0, _080750E8 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r4, _080750EC @ =gBg1Tm
	adds r0, r4, #0
	movs r1, #0
	bl TmFill
	ldr r0, _080750F0 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	bl InitIcons
	movs r0, #4
	bl ApplyIconPalettes
	bl LoadUiFrameGraphics
	ldr r0, _080750F4 @ =0x083215B8
	ldr r1, _080750F8 @ =0x06014800
	bl Decompress
	ldr r0, _080750FC @ =0x08321EE4
	movs r1, #0xc8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	bl sub_8082CBC
	ldr r1, _08075100 @ =0x083210A0
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r4, #0
	bl TmApplyTsa_t
	movs r5, #0
	mov r2, r8
	adds r2, #0x2e
	str r2, [sp, #8]
	mov r6, r8
	adds r6, #0x39
	str r6, [sp, #0xc]
	mov r0, r8
	adds r0, #0x2b
	str r0, [sp, #4]
	mov r1, r8
	adds r1, #0x40
	str r1, [sp, #0x10]
	ldr r6, _08075104 @ =0x0200D5F4
_08075068:
	lsls r0, r5, #3
	ldr r1, _08075108 @ =0x0200D5BC
	adds r0, r0, r1
	movs r1, #5
	bl InitText
	lsls r4, r5, #1
	adds r4, r4, r5
	lsls r4, r4, #3
	adds r0, r4, r6
	movs r1, #7
	bl InitTextDb
	adds r0, r6, #0
	adds r0, #8
	adds r0, r4, r0
	movs r1, #7
	bl InitText
	ldr r2, _0807510C @ =0x0200D604
	adds r4, r4, r2
	adds r0, r4, #0
	movs r1, #5
	bl InitText
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #6
	bls _08075068
	ldr r0, _08075110 @ =0x0200D69C
	movs r1, #4
	bl InitText
	ldr r0, _08075114 @ =0x0200D6A4
	movs r1, #0x14
	bl InitText
	ldr r0, _08075118 @ =0x0200D6AC
	movs r1, #4
	bl InitText
	mov r6, sl
	ldrb r0, [r6]
	bl sub_80742D0
	mov r0, sb
	ldrb r0, [r0]
	cmp r0, #4
	bne _0807511C
	mov r0, r8
	movs r1, #0
	bl sub_8074558
	movs r0, #0
	mov r1, sb
	strb r0, [r1]
	b _0807512C
	.align 2, 0
_080750DC: .4byte 0x083198CC
_080750E0: .4byte 0x06017200
_080750E4: .4byte 0x08319E88
_080750E8: .4byte gBg0Tm
_080750EC: .4byte gBg1Tm
_080750F0: .4byte gBg2Tm
_080750F4: .4byte 0x083215B8
_080750F8: .4byte 0x06014800
_080750FC: .4byte 0x08321EE4
_08075100: .4byte 0x083210A0
_08075104: .4byte 0x0200D5F4
_08075108: .4byte 0x0200D5BC
_0807510C: .4byte 0x0200D604
_08075110: .4byte 0x0200D69C
_08075114: .4byte 0x0200D6A4
_08075118: .4byte 0x0200D6AC
_0807511C:
	ldr r2, [sp, #0xc]
	ldrb r2, [r2]
	cmp r2, #1
	bne _0807512C
	mov r0, r8
	movs r1, #1
	bl sub_8074558
_0807512C:
	movs r1, #0
	movs r0, #0
	mov r6, r8
	strh r0, [r6, #0x3e]
	ldr r0, [sp, #4]
	strb r1, [r0]
	ldr r4, _08075184 @ =0x0200D69C
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	ldr r1, _08075188 @ =0x0832714C
	adds r0, r4, #0
	bl Text_DrawString
	ldr r1, _0807518C @ =0x02022C4E
	adds r0, r4, #0
	bl PutText
	movs r5, #0
	ldr r2, _08075190 @ =0x0200E6B4
	movs r1, #0xff
_08075166:
	lsls r0, r5, #2
	adds r0, r0, r2
	str r1, [r0]
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #0x13
	bls _08075166
	ldr r1, [sp, #0x10]
	ldrh r1, [r1]
	lsrs r0, r1, #4
	lsls r1, r0, #0x18
	lsrs r5, r1, #0x18
	b _080751B0
	.align 2, 0
_08075184: .4byte 0x0200D69C
_08075188: .4byte 0x0832714C
_0807518C: .4byte 0x02022C4E
_08075190: .4byte 0x0200E6B4
_08075194:
	ldrb r3, [r7]
	movs r0, #1
	str r0, [sp]
	mov r0, r8
	adds r1, r5, #0
	ldr r2, _080752EC @ =gBg0Tm
	bl sub_8076448
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	ldr r2, [sp, #0x10]
	ldrh r2, [r2]
	lsrs r0, r2, #4
_080751B0:
	adds r0, #6
	cmp r5, r0
	bge _080751BE
	ldr r0, _080752F0 @ =0x0200CD38
	ldrb r0, [r0]
	cmp r5, r0
	blo _08075194
_080751BE:
	ldr r6, [sp, #8]
	ldrb r0, [r6]
	ldrb r1, [r7]
	movs r2, #1
	bl sub_80763D8
	ldr r7, _080752F4 @ =gDispIo
	movs r0, #0x20
	ldrb r1, [r7, #1]
	orrs r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	adds r1, r7, #0
	adds r1, #0x2d
	movs r5, #0x10
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x38
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xe0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x98
	strb r0, [r1]
	adds r2, r7, #0
	adds r2, #0x34
	movs r6, #1
	mov sb, r6
	ldrb r0, [r2]
	mov r1, sb
	orrs r0, r1
	movs r4, #2
	orrs r0, r4
	movs r3, #4
	orrs r0, r3
	movs r1, #8
	orrs r0, r1
	orrs r0, r5
	strb r0, [r2]
	adds r2, #2
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r6, [r2]
	ands r0, r6
	orrs r0, r4
	orrs r0, r3
	orrs r0, r1
	orrs r0, r5
	strb r0, [r2]
	movs r0, #0xf
	bl EnableBgSync
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, [sp, #0x10]
	ldrh r2, [r0]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r7, #0xc]
	ands r0, r2
	strb r0, [r7, #0xc]
	adds r0, r1, #0
	ldrb r6, [r7, #0x10]
	ands r0, r6
	orrs r0, r4
	strb r0, [r7, #0x10]
	ldrb r0, [r7, #0x14]
	ands r1, r0
	mov r2, sb
	orrs r1, r2
	strb r1, [r7, #0x14]
	movs r0, #3
	ldrb r6, [r7, #0x18]
	orrs r0, r6
	strb r0, [r7, #0x18]
	ldr r0, _080752F8 @ =0x08320EEC
	ldr r1, _080752FC @ =0x02022808
	bl Decompress
	ldr r0, _08075300 @ =0x08319E88
	movs r1, #0xf0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08075304 @ =0x086786F4
	mov r1, r8
	bl SpawnProc
	mov r1, r8
	str r0, [r1, #0x44]
	ldr r2, [sp, #0xc]
	ldrb r2, [r2]
	cmp r2, #1
	bne _08075310
	mov r0, r8
	adds r0, #0x3c
	ldrb r0, [r0]
	cmp r0, #0
	bne _08075310
	ldr r4, _08075308 @ =0x0831B0A8
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r6, #0xc0
	lsls r6, r6, #0x13
	adds r1, r1, r6
	adds r0, r4, #0
	bl Decompress
	ldr r0, _0807530C @ =0x08320D98
	movs r1, #0xa0
	lsls r1, r1, #1
	movs r2, #0x80
	bl ApplyPaletteExt
	mov r0, r8
	bl sub_8082560
	mov r1, r8
	str r0, [r1, #0x48]
	b _0807531E
	.align 2, 0
_080752EC: .4byte gBg0Tm
_080752F0: .4byte 0x0200CD38
_080752F4: .4byte gDispIo
_080752F8: .4byte 0x08320EEC
_080752FC: .4byte 0x02022808
_08075300: .4byte 0x08319E88
_08075304: .4byte 0x086786F4
_08075308: .4byte 0x0831B0A8
_0807530C: .4byte 0x08320D98
_08075310:
	movs r0, #0
	movs r1, #0
	movs r2, #0xa
	bl sub_806EA24
	mov r2, r8
	str r0, [r2, #0x48]
_0807531E:
	movs r1, #1
	rsbs r1, r1, #0
	movs r0, #0
	bl sub_8070E70
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8075338
sub_8075338: @ 0x08075338
	push {lr}
	adds r3, r0, #0
	adds r0, #0x29
	movs r1, #0
	strb r1, [r0]
	adds r0, #8
	movs r2, #1
	strb r2, [r0]
	subs r0, #5
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #3
	strb r1, [r0]
	adds r0, #9
	ldrb r0, [r0]
	cmp r0, #3
	bne _08075364
	adds r0, r3, #0
	adds r0, #0x2f
	strb r1, [r0]
	b _0807536A
_08075364:
	adds r0, r3, #0
	adds r0, #0x2f
	strb r2, [r0]
_0807536A:
	ldrb r0, [r0]
	adds r1, r3, #0
	adds r1, #0x36
	movs r2, #0
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x40
	movs r1, #0
	strh r2, [r0]
	adds r2, r3, #0
	adds r2, #0x32
	movs r0, #1
	strb r0, [r2]
	subs r2, #8
	strb r1, [r2]
	adds r2, #9
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x34
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, r3, #0
	bl sub_8074EF0
	pop {r0}
	bx r0

	thumb_func_start sub_80753A0
sub_80753A0: @ 0x080753A0
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r0, #0x30
	ldrb r7, [r0]
	adds r4, r7, #0
	ldr r1, _0807542C @ =0x0200CC38
	lsls r0, r7, #2
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r1, [r0]
	movs r0, #8
	ldrh r2, [r1, #0xc]
	ands r0, r2
	cmp r0, #0
	beq _08075470
	adds r0, r5, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	cmp r0, #0
	beq _080753D6
	adds r0, r1, #0
	bl sub_8082B74
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08075454
_080753D6:
	adds r0, r5, #0
	adds r0, #0x3a
	adds r4, r5, #0
	adds r4, #0x3b
	ldrb r0, [r0]
	ldrb r1, [r4]
	cmp r0, r1
	bls _0807543C
	ldr r0, [r6]
	ldr r1, [r0]
	ldr r0, _08075430 @ =0x0000FFF5
	ldrh r2, [r1, #0xc]
	ands r0, r2
	strh r0, [r1, #0xc]
	ldr r0, [r6]
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl sub_80791B4
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	ldr r0, _08075434 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08075414
	movs r0, #0x6a
	bl m4aSongNumStart
_08075414:
	ldr r2, _08075438 @ =gBg0Tm
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	movs r0, #1
	str r0, [sp]
	adds r0, r5, #0
	adds r1, r7, #0
	bl sub_8076448
	b _080754E8
	.align 2, 0
_0807542C: .4byte 0x0200CC38
_08075430: .4byte 0x0000FFF5
_08075434: .4byte gPlaySt
_08075438: .4byte gBg0Tm
_0807543C:
	ldr r0, _08075450 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080754E8
	movs r0, #0x6c
	bl m4aSongNumStart
	b _080754E8
	.align 2, 0
_08075450: .4byte gPlaySt
_08075454:
	adds r0, r5, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	lsls r1, r0, #4
	adds r1, #0x38
	ldr r2, _0807546C @ =0x000006C1
	movs r0, #0
	adds r3, r5, #0
	bl sub_8082B00
	b _080754E8
	.align 2, 0
_0807546C: .4byte 0x000006C1
_08075470:
	adds r0, r5, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	cmp r0, #0
	bne _08075486
	adds r0, r1, #0
	bl sub_8079404
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080754D8
_08075486:
	ldr r0, [r6]
	ldr r1, [r0]
	movs r0, #0xa
	ldrh r2, [r1, #0xc]
	orrs r0, r2
	strh r0, [r1, #0xc]
	ldr r0, [r6]
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl sub_80791DC
	ldr r0, _080754D0 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080754AE
	movs r0, #0x6b
	bl m4aSongNumStart
_080754AE:
	adds r1, r5, #0
	adds r1, #0x3b
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	ldr r2, _080754D4 @ =gBg0Tm
	adds r0, r5, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	movs r0, #1
	str r0, [sp]
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_8076448
	b _080754E8
	.align 2, 0
_080754D0: .4byte gPlaySt
_080754D4: .4byte gBg0Tm
_080754D8:
	ldr r0, _080754F0 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080754E8
	movs r0, #0x6c
	bl m4aSongNumStart
_080754E8:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080754F0: .4byte gPlaySt

	thumb_func_start sub_80754F4
sub_80754F4: @ 0x080754F4
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, [r6]
	ldrb r0, [r0, #4]
	cmp r0, #0x42
	bne _08075518
	ldr r0, _08075514 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08075564
	movs r0, #0x6c
	bl m4aSongNumStart
	b _08075564
	.align 2, 0
_08075514: .4byte gPlaySt
_08075518:
	ldrh r4, [r6, #0xc]
	movs r5, #0xc0
	lsls r5, r5, #8
	lsrs r2, r4, #0xe
	adds r0, r2, r1
	adds r0, #3
	movs r1, #3
	bl __modsi3
	lsls r2, r0, #0xe
	ldr r0, _0807554C @ =0x00003FFF
	ands r0, r4
	orrs r0, r2
	strh r0, [r6, #0xc]
	ands r2, r5
	cmp r2, #0
	beq _08075554
	ldr r0, _08075550 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08075564
	movs r0, #0x6a
	bl m4aSongNumStart
	b _08075564
	.align 2, 0
_0807554C: .4byte 0x00003FFF
_08075550: .4byte gPlaySt
_08075554:
	ldr r0, _0807556C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08075564
	movs r0, #0x6b
	bl m4aSongNumStart
_08075564:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807556C: .4byte gPlaySt

	thumb_func_start sub_8075570
sub_8075570: @ 0x08075570
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r7, r0, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	str r0, [sp, #4]
	adds r5, r7, #0
	adds r5, #0x29
	ldrb r0, [r5]
	cmp r0, #1
	bne _08075590
	b _080759A2
_08075590:
	cmp r0, #1
	bgt _0807559A
	cmp r0, #0
	beq _080755AE
	b _080758C6
_0807559A:
	cmp r0, #2
	bne _080755A0
	b _080759B4
_080755A0:
	cmp r0, #3
	bne _080755A6
	b _080759F2
_080755A6:
	movs r1, #0x2b
	adds r1, r1, r7
	mov r8, r1
	b _08075CB2
_080755AE:
	ldr r2, _080755C8 @ =gKeySt
	ldr r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _080755CC
	adds r1, r7, #0
	adds r1, #0x31
	movs r0, #2
	b _080755D2
	.align 2, 0
_080755C8: .4byte gKeySt
_080755CC:
	adds r1, r7, #0
	adds r1, #0x31
	movs r0, #1
_080755D2:
	strb r0, [r1]
	mov sb, r1
	ldr r1, [r2]
	ldrh r2, [r1, #8]
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r2
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	cmp r6, #0
	beq _080755F2
	adds r0, r7, #0
	movs r1, #3
	bl Proc_Goto
	b _08075D18
_080755F2:
	movs r3, #1
	mov r8, r3
	mov r5, r8
	ands r5, r2
	cmp r5, #0
	beq _080756A0
	adds r0, r7, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	beq _0807561E
	cmp r0, #1
	bgt _08075612
	cmp r0, #0
	beq _08075660
	b _08075690
_08075612:
	cmp r0, #3
	beq _08075626
	movs r6, #0x2b
	adds r6, r6, r7
	mov r8, r6
	b _08075CB2
_0807561E:
	adds r0, r7, #0
	bl sub_80753A0
	b _080758C6
_08075626:
	ldr r1, _08075658 @ =0x0200CC38
	adds r4, r7, #0
	adds r4, #0x30
	ldrb r2, [r4]
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	movs r1, #1
	bl sub_80754F4
	ldrb r1, [r4]
	ldr r2, _0807565C @ =gBg0Tm
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	str r6, [sp]
	adds r0, r7, #0
	bl sub_8076448
	movs r3, #0x2b
	adds r3, r3, r7
	mov r8, r3
	b _08075CB2
	.align 2, 0
_08075658: .4byte 0x0200CC38
_0807565C: .4byte gBg0Tm
_08075660:
	ldr r1, _08075698 @ =0x0200CC38
	adds r0, r7, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_806EAD8
	ldr r0, _0807569C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807568A
	movs r0, #0x6a
	bl m4aSongNumStart
_0807568A:
	adds r0, r7, #0
	bl Proc_Break
_08075690:
	movs r4, #0x2b
	adds r4, r4, r7
	mov r8, r4
	b _08075CB2
	.align 2, 0
_08075698: .4byte 0x0200CC38
_0807569C: .4byte gPlaySt
_080756A0:
	ldrh r3, [r1, #6]
	movs r4, #0x20
	adds r0, r4, #0
	ands r0, r3
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	cmp r6, #0
	beq _0807573C
	adds r0, r7, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	bne _080756F8
	adds r0, r4, #0
	ands r0, r2
	movs r6, #0x2b
	adds r6, r6, r7
	mov r8, r6
	cmp r0, #0
	bne _080756CA
	b _08075CB2
_080756CA:
	ldr r1, _080756F0 @ =0x0200CC38
	adds r4, r7, #0
	adds r4, #0x30
	ldrb r2, [r4]
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_80754F4
	ldrb r1, [r4]
	ldr r2, _080756F4 @ =gBg0Tm
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	str r5, [sp]
	b _08075782
	.align 2, 0
_080756F0: .4byte 0x0200CC38
_080756F4: .4byte gBg0Tm
_080756F8:
	adds r0, r7, #0
	adds r0, #0x2f
	movs r3, #0x2b
	adds r3, r3, r7
	mov r8, r3
	ldrb r0, [r0]
	cmp r0, #1
	bhi _0807570A
	b _08075CB2
_0807570A:
	adds r1, r7, #0
	adds r1, #0x36
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	adds r0, r7, #0
	movs r1, #2
	bl Proc_Goto
	adds r0, r7, #0
	adds r0, #0x2d
	strb r5, [r0]
	ldr r0, _08075738 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _0807572E
	b _08075CB2
_0807572E:
	movs r0, #0x6f
	bl m4aSongNumStart
	b _08075CB2
	.align 2, 0
_08075738: .4byte gPlaySt
_0807573C:
	movs r4, #0x10
	adds r0, r4, #0
	ands r0, r3
	cmp r0, #0
	beq _080757D4
	adds r0, r7, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	bne _08075794
	adds r0, r4, #0
	ands r0, r2
	movs r4, #0x2b
	adds r4, r4, r7
	mov r8, r4
	cmp r0, #0
	bne _08075760
	b _08075CB2
_08075760:
	ldr r1, _0807578C @ =0x0200CC38
	adds r4, r7, #0
	adds r4, #0x30
	ldrb r2, [r4]
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	movs r1, #1
	bl sub_80754F4
	ldrb r1, [r4]
	ldr r2, _08075790 @ =gBg0Tm
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	str r6, [sp]
_08075782:
	adds r0, r7, #0
	bl sub_8076448
	b _08075CB2
	.align 2, 0
_0807578C: .4byte 0x0200CC38
_08075790: .4byte gBg0Tm
_08075794:
	adds r0, r7, #0
	adds r0, #0x2f
	adds r1, r7, #0
	adds r1, #0x2e
	movs r3, #0x2b
	adds r3, r3, r7
	mov r8, r3
	ldrb r0, [r0]
	ldrb r1, [r1]
	cmp r0, r1
	blo _080757AC
	b _08075CB2
_080757AC:
	adds r1, r7, #0
	adds r1, #0x36
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x2d
	strb r6, [r0]
	ldr r0, _080757D0 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _080757C8
	b _08075C48
_080757C8:
	movs r0, #0x6f
	bl m4aSongNumStart
	b _08075C48
	.align 2, 0
_080757D0: .4byte gPlaySt
_080757D4:
	movs r4, #0x40
	adds r0, r4, #0
	ands r0, r3
	cmp r0, #0
	bne _080757F4
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r6, [r1, #4]
	ands r0, r6
	cmp r0, #0
	beq _080758CE
	adds r0, r4, #0
	ldrh r1, [r1, #0x10]
	ands r0, r1
	cmp r0, #0
	beq _080758CE
_080757F4:
	adds r5, r7, #0
	adds r5, #0x30
	ldrb r0, [r5]
	cmp r0, #0
	bne _0807582C
	adds r0, r4, #0
	ands r0, r2
	movs r1, #0x2b
	adds r1, r1, r7
	mov r8, r1
	cmp r0, #0
	bne _0807580E
	b _08075CB2
_0807580E:
	ldr r0, _08075828 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807581E
	movs r0, #0x66
	bl m4aSongNumStart
_0807581E:
	adds r1, r7, #0
	adds r1, #0x29
	movs r0, #3
	strb r0, [r1]
	b _08075CB2
	.align 2, 0
_08075828: .4byte gPlaySt
_0807582C:
	subs r0, #1
	strb r0, [r5]
	ldr r0, _080758B8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08075840
	movs r0, #0x66
	bl m4aSongNumStart
_08075840:
	adds r0, r7, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	adds r4, r0, #0
	cmp r1, #1
	bhi _080758C0
	adds r6, r7, #0
	adds r6, #0x40
	ldrh r2, [r6]
	lsrs r0, r2, #4
	cmp r0, #0
	beq _080758C0
	cmp r1, #0
	bne _08075866
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	movs r0, #1
	strb r0, [r4]
_08075866:
	ldrh r3, [r6]
	lsrs r1, r3, #4
	subs r1, #1
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	ldr r2, _080758BC @ =gBg0Tm
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	mov r0, r8
	str r0, [sp]
	adds r0, r7, #0
	bl sub_8076448
	adds r1, r7, #0
	adds r1, #0x29
	movs r0, #2
	strb r0, [r1]
	mov r1, sb
	ldrb r1, [r1]
	lsls r2, r1, #2
	ldrh r3, [r6]
	subs r2, r3, r2
	strh r2, [r6]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	ldrb r0, [r4]
	movs r6, #0x2b
	adds r6, r6, r7
	mov r8, r6
	cmp r0, #0
	beq _080758B2
	b _08075CB2
_080758B2:
	adds r0, #1
	strb r0, [r4]
	b _08075CB2
	.align 2, 0
_080758B8: .4byte gPlaySt
_080758BC: .4byte gBg0Tm
_080758C0:
	ldrb r0, [r4]
	subs r0, #1
	strb r0, [r4]
_080758C6:
	movs r0, #0x2b
	adds r0, r0, r7
	mov r8, r0
	b _08075CB2
_080758CE:
	ldr r0, _08075984 @ =gKeySt
	ldr r1, [r0]
	movs r2, #0x80
	adds r0, r2, #0
	ldrh r3, [r1, #6]
	ands r0, r3
	cmp r0, #0
	bne _080758FE
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r4, [r1, #4]
	ands r0, r4
	movs r6, #0x2b
	adds r6, r6, r7
	mov r8, r6
	cmp r0, #0
	bne _080758F2
	b _08075CB2
_080758F2:
	adds r0, r2, #0
	ldrh r1, [r1, #0x10]
	ands r0, r1
	cmp r0, #0
	bne _080758FE
	b _08075CB2
_080758FE:
	adds r5, r7, #0
	adds r5, #0x30
	ldrb r1, [r5]
	ldr r6, _08075988 @ =0x0200CD38
	ldrb r0, [r6]
	subs r0, #1
	movs r2, #0x2b
	adds r2, r2, r7
	mov r8, r2
	cmp r1, r0
	blt _08075916
	b _08075CB2
_08075916:
	adds r0, r1, #1
	strb r0, [r5]
	ldr r0, _0807598C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807592A
	movs r0, #0x66
	bl m4aSongNumStart
_0807592A:
	adds r0, r7, #0
	adds r0, #0x2c
	adds r4, r0, #0
	ldrb r3, [r4]
	cmp r3, #4
	bne _08075994
	ldrb r1, [r5]
	ldrb r0, [r6]
	subs r0, #1
	cmp r1, r0
	beq _08075994
	adds r4, r7, #0
	adds r4, #0x40
	ldrh r6, [r4]
	lsrs r1, r6, #4
	adds r1, #6
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	ldr r2, _08075990 @ =gBg0Tm
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r3, [r0]
	movs r5, #1
	str r5, [sp]
	adds r0, r7, #0
	bl sub_8076448
	adds r0, r7, #0
	adds r0, #0x29
	strb r5, [r0]
	mov r0, sb
	ldrb r0, [r0]
	lsls r2, r0, #2
	ldrh r1, [r4]
	adds r2, r1, r2
	strh r2, [r4]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	b _08075CB2
	.align 2, 0
_08075984: .4byte gKeySt
_08075988: .4byte 0x0200CD38
_0807598C: .4byte gPlaySt
_08075990: .4byte gBg0Tm
_08075994:
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	movs r2, #0x2b
	adds r2, r2, r7
	mov r8, r2
	b _08075CB2
_080759A2:
	adds r4, r7, #0
	adds r4, #0x40
	adds r0, r7, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r2, r0, #2
	ldrh r3, [r4]
	adds r2, r3, r2
	b _080759C4
_080759B4:
	adds r4, r7, #0
	adds r4, #0x40
	adds r0, r7, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r2, r0, #2
	ldrh r3, [r4]
	subs r2, r3, r2
_080759C4:
	strh r2, [r4]
	subs r2, #0x38
	movs r0, #0xff
	ands r2, r0
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	movs r0, #0xf
	ldrh r6, [r4]
	ands r0, r6
	movs r1, #0x2b
	adds r1, r1, r7
	mov r8, r1
	cmp r0, #0
	beq _080759E6
	b _08075CB2
_080759E6:
	movs r0, #0
	strb r0, [r5]
	ldrh r0, [r4]
	bl sub_80743C8
	b _08075CB2
_080759F2:
	adds r1, r7, #0
	adds r1, #0x2b
	ldrb r0, [r1]
	ldr r2, _08075A1C @ =gKeySt
	mov r8, r1
	cmp r0, #0
	beq _08075A20
	ldr r1, [r2]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08075A20
	bl sub_807089C
	movs r0, #0
	mov r2, r8
	strb r0, [r2]
	b _08075D18
	.align 2, 0
_08075A1C: .4byte gKeySt
_08075A20:
	ldr r1, [r2]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08075B14
	mov r3, r8
	ldrb r0, [r3]
	cmp r0, #0
	bne _08075B14
	adds r1, r7, #0
	adds r1, #0x32
	ldrb r4, [r1]
	str r4, [sp, #8]
	adds r2, r7, #0
	adds r2, #0x2a
	movs r0, #1
	strb r0, [r2]
	ldr r0, _08075AAC @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	mov sb, r1
	cmp r0, #0
	blt _08075A56
	movs r0, #0x6a
	bl m4aSongNumStart
_08075A56:
	ldr r1, _08075AB0 @ =0x08678840
	adds r6, r7, #0
	adds r6, #0x2d
	adds r5, r7, #0
	adds r5, #0x2f
	ldrb r2, [r5]
	lsls r0, r2, #3
	adds r0, r0, r2
	ldrb r3, [r6]
	adds r0, r3, r0
	lsls r0, r0, #4
	adds r0, r0, r1
	ldrb r0, [r0]
	mov r4, sb
	strb r0, [r4]
	adds r4, r7, #0
	adds r4, #0x33
	ldrb r0, [r4]
	adds r0, #1
	movs r1, #1
	ands r0, r1
	strb r0, [r4]
	mov r1, sb
	ldrb r0, [r1]
	ldrb r1, [r4]
	bl sub_8076D3C
	lsls r0, r0, #0x18
	mov sl, r6
	str r4, [sp, #0xc]
	adds r2, r7, #0
	adds r2, #0x34
	str r2, [sp, #0x10]
	adds r3, r7, #0
	adds r3, #0x35
	str r3, [sp, #0x14]
	cmp r0, #0
	beq _08075AE4
	movs r4, #0
	ldr r0, _08075AB4 @ =0x0200CD38
	adds r6, #0x13
	b _08075AD2
	.align 2, 0
_08075AAC: .4byte gPlaySt
_08075AB0: .4byte 0x08678840
_08075AB4: .4byte 0x0200CD38
_08075AB8:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	ldrb r3, [r5]
	movs r0, #1
	str r0, [sp]
	adds r0, r7, #0
	ldr r2, _08075B0C @ =gBg0Tm
	bl sub_8076448
	adds r4, #1
	cmp r4, #5
	bgt _08075AD8
	ldr r0, _08075B10 @ =0x0200CD38
_08075AD2:
	ldrb r0, [r0]
	cmp r4, r0
	blt _08075AB8
_08075AD8:
	ldrh r0, [r6]
	bl sub_80743C8
	movs r0, #1
	bl EnableBgSync
_08075AE4:
	ldr r4, [sp, #0xc]
	ldrb r0, [r4]
	ldr r6, [sp, #0x10]
	strb r0, [r6]
	mov r1, sl
	ldrb r0, [r1]
	ldr r2, [sp, #0x14]
	strb r0, [r2]
	mov r3, sb
	ldrb r3, [r3]
	ldr r4, [sp, #8]
	cmp r3, r4
	bne _08075B00
	b _08075CB2
_08075B00:
	mov r6, sb
	ldrb r0, [r6]
	bl sub_80742D0
	b _08075CB2
	.align 2, 0
_08075B0C: .4byte gBg0Tm
_08075B10: .4byte 0x0200CD38
_08075B14:
	ldr r1, [r2]
	movs r0, #0x80
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _08075B4C
	mov r0, r8
	ldrb r4, [r0]
	cmp r4, #0
	bne _08075B4C
	ldr r0, _08075B48 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08075B38
	movs r0, #0x66
	bl m4aSongNumStart
_08075B38:
	adds r1, r7, #0
	adds r1, #0x33
	movs r0, #1
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x29
	strb r4, [r0]
	b _08075CB2
	.align 2, 0
_08075B48: .4byte gPlaySt
_08075B4C:
	ldr r1, [r2]
	ldrh r3, [r1, #6]
	movs r0, #0x20
	ands r0, r3
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0
	beq _08075BE2
	adds r1, r7, #0
	adds r1, #0x33
	movs r0, #1
	strb r0, [r1]
	subs r1, #6
	ldrb r0, [r1]
	mov sl, r1
	cmp r0, #0
	bne _08075BDC
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #1
	bhi _08075B7A
	b _08075CB2
_08075B7A:
	adds r0, r7, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	bne _08075B86
	b _08075CB2
_08075B86:
	ldr r0, _08075BD4 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08075B96
	movs r0, #0x6f
	bl m4aSongNumStart
_08075B96:
	adds r1, r7, #0
	adds r1, #0x36
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	movs r4, #8
	ldr r2, _08075BD8 @ =0x08678840
	lsls r0, r0, #3
	ldrb r1, [r1]
	adds r0, r0, r1
	lsls r1, r0, #4
	adds r0, r1, #0
	adds r0, #0x80
	adds r0, r0, r2
	ldrb r0, [r0, #8]
	cmp r0, #0
	bne _08075BCC
	adds r0, r1, r2
	adds r1, r0, #0
	adds r1, #0x80
_08075BBE:
	subs r1, #0x10
	subs r4, #1
	cmp r4, #0
	ble _08075BCC
	ldrb r0, [r1, #8]
	cmp r0, #0
	beq _08075BBE
_08075BCC:
	mov r1, sl
	strb r4, [r1]
	b _08075C48
	.align 2, 0
_08075BD4: .4byte gPlaySt
_08075BD8: .4byte 0x08678840
_08075BDC:
	subs r0, #1
	strb r0, [r1]
	b _08075C5E
_08075BE2:
	movs r0, #0x10
	ands r0, r3
	cmp r0, #0
	beq _08075C74
	adds r1, r7, #0
	adds r1, #0x33
	movs r0, #1
	strb r0, [r1]
	adds r2, r7, #0
	adds r2, #0x2d
	adds r5, r7, #0
	adds r5, #0x2f
	ldrb r3, [r2]
	cmp r3, #8
	beq _08075C16
	ldr r0, _08075C54 @ =0x08678840
	adds r3, #1
	ldrb r6, [r5]
	lsls r1, r6, #3
	adds r1, r1, r6
	adds r1, r1, r3
	lsls r1, r1, #4
	adds r1, r1, r0
	ldrb r0, [r1, #8]
	cmp r0, #0
	bne _08075C5C
_08075C16:
	adds r0, r7, #0
	adds r0, #0x2e
	ldrb r5, [r5]
	ldrb r0, [r0]
	cmp r5, r0
	bhs _08075CB2
	adds r0, r7, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #3
	beq _08075CB2
	strb r4, [r2]
	ldr r0, _08075C58 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08075C3E
	movs r0, #0x6f
	bl m4aSongNumStart
_08075C3E:
	adds r1, r7, #0
	adds r1, #0x36
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_08075C48:
	adds r0, r7, #0
	movs r1, #2
	bl Proc_Goto
	b _08075CB2
	.align 2, 0
_08075C54: .4byte 0x08678840
_08075C58: .4byte gPlaySt
_08075C5C:
	strb r3, [r2]
_08075C5E:
	ldr r0, _08075C70 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08075CB2
	movs r0, #0x67
	bl m4aSongNumStart
	b _08075CB2
	.align 2, 0
_08075C70: .4byte gPlaySt
_08075C74:
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08075CB2
	mov r1, r8
	ldrb r0, [r1]
	cmp r0, #0
	bne _08075CB2
	movs r0, #1
	strb r0, [r1]
	ldr r2, _08075D28 @ =0x08678840
	adds r3, r7, #0
	adds r3, #0x2d
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r4, [r0]
	lsls r1, r4, #3
	adds r1, r1, r4
	ldrb r3, [r3]
	adds r1, r3, r1
	lsls r1, r1, #4
	adds r0, r1, r2
	ldrb r0, [r0, #8]
	adds r2, #0xc
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0x28
	bl sub_80706C8
_08075CB2:
	ldr r0, _08075D2C @ =gKeySt
	ldr r1, [r0]
	movs r0, #2
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08075CE4
	mov r6, r8
	ldrb r0, [r6]
	cmp r0, #0
	bne _08075CEC
	ldr r0, _08075D30 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08075CD8
	movs r0, #0x6b
	bl m4aSongNumStart
_08075CD8:
	movs r0, #0
	bl sub_806EAD8
	adds r0, r7, #0
	bl Proc_Break
_08075CE4:
	mov r1, r8
	ldrb r0, [r1]
	cmp r0, #0
	beq _08075D18
_08075CEC:
	adds r3, r7, #0
	adds r3, #0x2d
	ldr r2, [sp, #4]
	ldrb r4, [r3]
	cmp r2, r4
	beq _08075D18
	ldr r2, _08075D28 @ =0x08678840
	adds r0, r7, #0
	adds r0, #0x36
	ldrb r6, [r0]
	lsls r1, r6, #3
	adds r1, r1, r6
	adds r1, r4, r1
	lsls r1, r1, #4
	adds r0, r1, r2
	ldrb r0, [r0, #8]
	adds r2, #0xc
	adds r1, r1, r2
	ldr r2, [r1]
	movs r1, #0x28
	bl sub_80706C8
_08075D18:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08075D28: .4byte 0x08678840
_08075D2C: .4byte gKeySt
_08075D30: .4byte gPlaySt

	thumb_func_start sub_8075D34
sub_8075D34: @ 0x08075D34
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne _08075D5C
	ldr r2, _08075DDC @ =0x0200E7D8
	ldr r1, _08075DE0 @ =0x0200CC38
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	str r0, [r2]
	bl sub_80741EC
_08075D5C:
	ldr r2, _08075DE4 @ =gPlaySt
	adds r0, r4, #0
	adds r0, #0x34
	ldrb r0, [r0]
	lsls r0, r0, #7
	adds r1, r4, #0
	adds r1, #0x32
	ldrb r1, [r1]
	adds r0, r1, r0
	strb r0, [r2, #0x1a]
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	cmp r1, #0
	beq _08075D86
	lsls r1, r1, #4
	movs r0, #0xf
	ldrb r3, [r2, #0x19]
	ands r0, r3
	orrs r0, r1
	strb r0, [r2, #0x19]
_08075D86:
	ldr r0, [r4, #0x44]
	bl Proc_End
	ldr r0, [r4, #0x48]
	cmp r0, #0
	beq _08075D96
	bl Proc_End
_08075D96:
	bl EndGreenText
	ldr r0, _08075DE8 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _08075DEC @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _08075DF0 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #0xf
	bl EnableBgSync
	ldr r2, _08075DF4 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	bl ResetTextFont
	bl ClearIcons
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08075DDC: .4byte 0x0200E7D8
_08075DE0: .4byte 0x0200CC38
_08075DE4: .4byte gPlaySt
_08075DE8: .4byte gBg0Tm
_08075DEC: .4byte gBg1Tm
_08075DF0: .4byte gBg2Tm
_08075DF4: .4byte gDispIo

	thumb_func_start sub_8075DF8
sub_8075DF8: @ 0x08075DF8
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, _08075E20 @ =0x0200CD3A
	movs r1, #0x1f
	movs r2, #0x1f
	movs r3, #0
	bl TmFillRect_t
	adds r0, r5, #0
	adds r0, #0x40
	ldrh r0, [r0]
	lsrs r4, r0, #4
	adds r0, r4, #6
	cmp r4, r0
	bge _08075E52
	ldr r0, _08075E24 @ =0x0200CD38
	adds r6, r5, #0
	adds r6, #0x2f
	b _08075E4C
	.align 2, 0
_08075E20: .4byte 0x0200CD3A
_08075E24: .4byte 0x0200CD38
_08075E28:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	ldrb r3, [r6]
	movs r0, #0
	str r0, [sp]
	adds r0, r5, #0
	ldr r2, _08075E88 @ =0x0200CD3A
	bl sub_8076448
	adds r4, #1
	adds r0, r5, #0
	adds r0, #0x40
	ldrh r0, [r0]
	lsrs r0, r0, #4
	adds r0, #6
	cmp r4, r0
	bge _08075E52
	ldr r0, _08075E8C @ =0x0200CD38
_08075E4C:
	ldrb r0, [r0]
	cmp r4, r0
	blt _08075E28
_08075E52:
	ldr r4, _08075E90 @ =0x0200D53A
	adds r0, r4, #0
	movs r1, #0x1f
	movs r2, #1
	movs r3, #0
	bl TmFillRect_t
	adds r6, r5, #0
	adds r6, #0x2f
	ldrb r1, [r6]
	adds r0, r4, #0
	bl sub_8076314
	movs r1, #0
	movs r0, #0
	strh r0, [r5, #0x3e]
	ldrb r0, [r6]
	adds r2, r5, #0
	adds r2, #0x37
	strb r0, [r2]
	adds r0, r5, #0
	adds r0, #0x38
	strb r1, [r0]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08075E88: .4byte 0x0200CD3A
_08075E8C: .4byte 0x0200CD38
_08075E90: .4byte 0x0200D53A

	thumb_func_start sub_8075E94
sub_8075E94: @ 0x08075E94
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r7, r0, #0
	adds r1, r7, #0
	adds r1, #0x38
	ldr r0, _08075EF8 @ =0x0867871C
	ldrh r2, [r7, #0x3e]
	adds r0, r2, r0
	ldrb r2, [r1]
	ldrb r0, [r0]
	adds r0, r2, r0
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x14
	bls _08075EC0
	movs r0, #0x14
	strb r0, [r1]
_08075EC0:
	ldrh r0, [r7, #0x3e]
	adds r0, #1
	strh r0, [r7, #0x3e]
	movs r3, #0
	str r1, [sp, #0x10]
	adds r0, r7, #0
	adds r0, #0x36
	str r0, [sp, #0xc]
	adds r1, r7, #0
	adds r1, #0x2f
	str r1, [sp, #8]
	adds r2, r7, #0
	adds r2, #0x40
	str r2, [sp, #0x14]
	ldr r0, [sp, #0x10]
	str r0, [sp, #4]
_08075EE0:
	ldr r1, [sp, #0xc]
	ldrb r2, [r1]
	ldr r1, [sp, #8]
	ldrb r1, [r1]
	cmp r2, r1
	bls _08075EFC
	ldr r2, [sp, #4]
	ldrb r2, [r2]
	adds r0, r2, r3
	cmp r0, #0x14
	bgt _08075F04
	b _08075F0A
	.align 2, 0
_08075EF8: .4byte 0x0867871C
_08075EFC:
	ldr r1, [sp, #4]
	ldrb r0, [r1]
	cmp r3, r0
	bge _08075F08
_08075F04:
	movs r1, #0
	b _08075F10
_08075F08:
	subs r0, r3, r0
_08075F0A:
	adds r0, #8
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
_08075F10:
	ldr r6, [sp, #0x14]
	ldrh r2, [r6]
	lsrs r4, r2, #3
	adds r0, r4, #0
	adds r0, #0xc
	lsls r5, r1, #1
	adds r1, r3, #1
	mov sl, r1
	cmp r4, r0
	bge _08075F58
	movs r2, #0x1f
	mov sb, r2
	ldr r0, _08075FD8 @ =gBg0Tm
	mov r8, r0
	ldr r1, _08075FDC @ =0x0200CD3A
	mov ip, r1
	adds r2, r5, #0
_08075F32:
	adds r0, r4, #0
	mov r1, sb
	ands r0, r1
	lsls r1, r0, #5
	adds r1, #8
	adds r1, r1, r3
	lsls r1, r1, #1
	add r1, r8
	lsls r0, r0, #6
	adds r0, r2, r0
	add r0, ip
	ldrh r0, [r0]
	strh r0, [r1]
	adds r4, #1
	ldrh r1, [r6]
	lsrs r0, r1, #3
	adds r0, #0xc
	cmp r4, r0
	blt _08075F32
_08075F58:
	ldr r0, _08075FE0 @ =gBg2Tm
	ldr r1, _08075FE4 @ =0x0200D53A
	adds r2, r5, r1
	adds r1, r3, #0
	adds r1, #0xa8
	movs r4, #1
	lsls r1, r1, #1
	adds r1, r1, r0
_08075F68:
	ldrh r0, [r2]
	strh r0, [r1]
	adds r2, #0x40
	adds r1, #0x40
	subs r4, #1
	cmp r4, #0
	bge _08075F68
	mov r3, sl
	cmp r3, #0x13
	ble _08075EE0
	movs r0, #5
	bl EnableBgSync
	ldr r2, [sp, #0x10]
	ldrb r2, [r2]
	cmp r2, #0x13
	bls _08076042
	ldr r1, [sp, #0xc]
	ldrb r0, [r1]
	ldr r2, [sp, #8]
	strb r0, [r2]
	ldr r0, _08075FE8 @ =0x02022C58
	movs r1, #0x16
	movs r2, #1
	movs r3, #0
	bl TmFillRect_t
	ldr r0, _08075FEC @ =0x02021B18
	movs r1, #0x16
	movs r2, #0x1f
	movs r3, #0
	bl TmFillRect_t
	adds r4, r7, #0
	adds r4, #0x32
	adds r5, r7, #0
	adds r5, #0x2e
	ldr r1, _08075FF0 @ =0x0200E6B4
	movs r2, #0xff
	adds r0, r1, #0
	adds r0, #0x4c
_08075FBA:
	str r2, [r0]
	subs r0, #4
	cmp r0, r1
	bge _08075FBA
	bl ClearIcons
	ldrb r0, [r4]
	bl sub_80742D0
	ldr r0, [sp, #0x14]
	ldrh r0, [r0]
	lsrs r4, r0, #4
	adds r0, r4, #6
	b _08076012
	.align 2, 0
_08075FD8: .4byte gBg0Tm
_08075FDC: .4byte 0x0200CD3A
_08075FE0: .4byte gBg2Tm
_08075FE4: .4byte 0x0200D53A
_08075FE8: .4byte 0x02022C58
_08075FEC: .4byte 0x02021B18
_08075FF0: .4byte 0x0200E6B4
_08075FF4:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	ldr r2, [sp, #8]
	ldrb r3, [r2]
	movs r0, #0
	str r0, [sp]
	adds r0, r7, #0
	ldr r2, _08076054 @ =0x0200CD3A
	bl sub_8076448
	adds r4, #1
	ldr r1, [sp, #0x14]
	ldrh r1, [r1]
	lsrs r0, r1, #4
	adds r0, #6
_08076012:
	cmp r4, r0
	bge _0807601E
	ldr r0, _08076058 @ =0x0200CD38
	ldrb r0, [r0]
	cmp r4, r0
	blt _08075FF4
_0807601E:
	ldr r0, _0807605C @ =0x0200D53A
	ldr r2, [sp, #8]
	ldrb r1, [r2]
	bl sub_8076314
	ldrb r0, [r5]
	ldr r2, [sp, #8]
	ldrb r1, [r2]
	movs r2, #0
	bl sub_80763D8
	movs r0, #0
	ldr r1, [sp, #0x10]
	strb r0, [r1]
	strh r0, [r7, #0x3e]
	adds r0, r7, #0
	bl Proc_Break
_08076042:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076054: .4byte 0x0200CD3A
_08076058: .4byte 0x0200CD38
_0807605C: .4byte 0x0200D53A

	thumb_func_start sub_8076060
sub_8076060: @ 0x08076060
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	str r0, [sp]
	adds r2, r0, #0
	adds r2, #0x38
	ldr r0, _08076150 @ =0x08678722
	ldr r1, [sp]
	ldrh r1, [r1, #0x3e]
	adds r0, r1, r0
	ldrb r3, [r2]
	ldrb r0, [r0]
	adds r0, r3, r0
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x14
	bls _0807608E
	movs r0, #0x14
	strb r0, [r2]
_0807608E:
	ldr r5, [sp]
	ldrh r0, [r5, #0x3e]
	adds r0, #1
	strh r0, [r5, #0x3e]
	adds r0, r5, #0
	adds r0, #0x36
	adds r1, r5, #0
	adds r1, #0x37
	ldrb r0, [r0]
	ldrb r1, [r1]
	cmp r0, r1
	bls _08076164
	movs r5, #0
	str r2, [sp, #8]
	ldrb r6, [r2]
	cmp r5, r6
	blt _080760B2
	b _08076202
_080760B2:
	ldr r7, [sp]
	adds r7, #0x40
	str r7, [sp, #4]
	str r2, [sp, #0x10]
_080760BA:
	ldr r0, [sp, #4]
	ldrh r0, [r0]
	lsrs r4, r0, #3
	adds r0, r4, #0
	adds r0, #0xc
	adds r6, r5, #0
	adds r6, #0x1c
	movs r1, #8
	adds r1, r1, r5
	mov ip, r1
	adds r5, #1
	mov sb, r5
	cmp r4, r0
	bge _08076116
	str r6, [sp, #0xc]
	ldr r2, _08076154 @ =0x0200CD3A
	mov sl, r2
	lsls r1, r1, #1
	str r1, [sp, #0x14]
	movs r3, #0x1f
	mov r8, r3
_080760E4:
	adds r3, r4, #0
	mov r5, r8
	ands r3, r5
	lsls r1, r3, #5
	ldr r2, [sp, #0xc]
	ldr r7, [sp, #0x10]
	ldrb r7, [r7]
	subs r0, r2, r7
	adds r1, r1, r0
	lsls r1, r1, #1
	ldr r0, _08076158 @ =gBg0Tm
	adds r1, r1, r0
	lsls r0, r3, #6
	ldr r2, [sp, #0x14]
	adds r0, r2, r0
	add r0, sl
	ldrh r0, [r0]
	strh r0, [r1]
	adds r4, #1
	ldr r3, [sp, #4]
	ldrh r3, [r3]
	lsrs r0, r3, #3
	adds r0, #0xc
	cmp r4, r0
	blt _080760E4
_08076116:
	ldr r5, _0807615C @ =gBg2Tm
	mov r8, r5
	adds r5, r6, #0
	mov r6, ip
	lsls r0, r6, #1
	ldr r7, _08076160 @ =0x0200D53A
	adds r2, r0, r7
	movs r3, #0xa0
	movs r4, #1
_08076128:
	ldr r1, [sp, #0x10]
	ldrb r1, [r1]
	subs r0, r5, r1
	adds r0, r3, r0
	lsls r0, r0, #1
	add r0, r8
	ldrh r1, [r2]
	strh r1, [r0]
	adds r2, #0x40
	adds r3, #0x20
	subs r4, #1
	cmp r4, #0
	bge _08076128
	mov r5, sb
	ldr r2, [sp, #0x10]
	ldrb r2, [r2]
	cmp r5, r2
	blt _080760BA
	b _08076202
	.align 2, 0
_08076150: .4byte 0x08678722
_08076154: .4byte 0x0200CD3A
_08076158: .4byte gBg0Tm
_0807615C: .4byte gBg2Tm
_08076160: .4byte 0x0200D53A
_08076164:
	movs r5, #0
	str r2, [sp, #8]
	ldrb r3, [r2]
	cmp r5, r3
	bge _08076202
	ldr r6, [sp]
	adds r6, #0x40
	mov sl, r6
	str r2, [sp, #0x10]
_08076176:
	mov r7, sl
	ldrh r7, [r7]
	lsrs r4, r7, #3
	adds r0, r4, #0
	adds r0, #0xc
	adds r6, r5, #0
	adds r6, #0x1c
	adds r1, r5, #1
	mov sb, r1
	cmp r4, r0
	bge _080761CC
	mov ip, r6
	movs r2, #0x1f
	mov r8, r2
_08076192:
	adds r3, r4, #0
	mov r7, r8
	ands r3, r7
	lsls r2, r3, #5
	adds r2, #8
	adds r2, r2, r5
	lsls r2, r2, #1
	ldr r0, _08076228 @ =gBg0Tm
	adds r2, r2, r0
	str r2, [sp, #0x14]
	mov r2, ip
	ldr r1, [sp, #0x10]
	ldrb r1, [r1]
	subs r0, r2, r1
	lsls r0, r0, #1
	lsls r1, r3, #6
	adds r0, r0, r1
	ldr r2, _0807622C @ =0x0200CD3A
	adds r0, r0, r2
	ldrh r0, [r0]
	ldr r3, [sp, #0x14]
	strh r0, [r3]
	adds r4, #1
	mov r7, sl
	ldrh r7, [r7]
	lsrs r0, r7, #3
	adds r0, #0xc
	cmp r4, r0
	blt _08076192
_080761CC:
	movs r4, #0
	ldr r0, _08076230 @ =0x0200D53A
	mov ip, r0
	adds r3, r6, #0
	adds r0, r5, #0
	adds r0, #0xa8
	lsls r0, r0, #1
	ldr r1, _08076234 @ =gBg2Tm
	adds r2, r0, r1
_080761DE:
	ldr r5, [sp, #0x10]
	ldrb r5, [r5]
	subs r0, r3, r5
	lsls r0, r0, #1
	lsls r1, r4, #6
	adds r0, r0, r1
	add r0, ip
	ldrh r0, [r0]
	strh r0, [r2]
	adds r2, #0x40
	adds r4, #1
	cmp r4, #1
	ble _080761DE
	mov r5, sb
	ldr r6, [sp, #0x10]
	ldrb r6, [r6]
	cmp r5, r6
	blt _08076176
_08076202:
	movs r0, #5
	bl EnableBgSync
	ldr r7, [sp, #8]
	ldrb r7, [r7]
	cmp r7, #0x13
	bls _08076216
	ldr r0, [sp]
	bl Proc_Break
_08076216:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076228: .4byte gBg0Tm
_0807622C: .4byte 0x0200CD3A
_08076230: .4byte 0x0200D53A
_08076234: .4byte gBg2Tm

	thumb_func_start sub_8076238
sub_8076238: @ 0x08076238
	push {lr}
	ldr r0, _0807624C @ =0x08678484
	movs r1, #3
	bl SpawnProc
	adds r0, #0x39
	movs r1, #0
	strb r1, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_0807624C: .4byte 0x08678484

	thumb_func_start sub_8076250
sub_8076250: @ 0x08076250
	push {r4, lr}
	adds r1, r0, #0
	cmp r1, #0
	bne _08076268
	ldr r0, _08076264 @ =0x08678594
	movs r1, #3
	bl SpawnProc
	b _0807626E
	.align 2, 0
_08076264: .4byte 0x08678594
_08076268:
	ldr r0, _08076290 @ =0x08678594
	bl SpawnProcLocking
_0807626E:
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x39
	movs r0, #1
	strb r0, [r1]
	bl sub_8036984
	adds r1, r0, #0
	cmp r1, #1
	bne _08076294
	adds r0, r4, #0
	adds r0, #0x3c
	strb r1, [r0]
	adds r1, r4, #0
	adds r1, #0x3a
	movs r0, #5
	b _080762A4
	.align 2, 0
_08076290: .4byte 0x08678594
_08076294:
	adds r0, r4, #0
	adds r0, #0x3c
	movs r1, #0
	strb r1, [r0]
	bl GetPlayerDeployCount
	adds r1, r4, #0
	adds r1, #0x3a
_080762A4:
	strb r0, [r1]
	adds r1, r4, #0
	adds r1, #0x3b
	movs r0, #0
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_80762B4
sub_80762B4: @ 0x080762B4
	push {lr}
	adds r1, r0, #0
	cmp r1, #0
	bne _080762CC
	ldr r0, _080762C8 @ =0x0867865C
	movs r1, #3
	bl SpawnProc
	b _080762D2
	.align 2, 0
_080762C8: .4byte 0x0867865C
_080762CC:
	ldr r0, _080762E0 @ =0x0867865C
	bl SpawnProcLocking
_080762D2:
	adds r1, r0, #0
	adds r1, #0x39
	movs r0, #3
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_080762E0: .4byte 0x0867865C

	thumb_func_start sub_80762E4
sub_80762E4: @ 0x080762E4
	push {lr}
	adds r1, r0, #0
	cmp r1, #0
	bne _080762FC
	ldr r0, _080762F8 @ =0x08678594
	movs r1, #3
	bl SpawnProc
	b _08076302
	.align 2, 0
_080762F8: .4byte 0x08678594
_080762FC:
	ldr r0, _08076310 @ =0x08678594
	bl SpawnProcLocking
_08076302:
	adds r1, r0, #0
	adds r1, #0x39
	movs r0, #4
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08076310: .4byte 0x08678594

	thumb_func_start sub_8076314
sub_8076314: @ 0x08076314
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r6, r0, #0
	lsls r1, r1, #0x18
	lsrs r4, r1, #0x18
	adds r0, #0x12
	movs r1, #0x13
	movs r2, #1
	movs r3, #0
	bl TmFillRect_t
	ldr r7, _0807635C @ =0x0200D6A4
	adds r0, r7, #0
	bl ClearText
	cmp r4, #5
	bne _08076360
	movs r5, #0
_0807633C:
	lsls r0, r5, #2
	adds r0, #0x12
	adds r0, r6, r0
	adds r1, r5, #0
	adds r1, #0x70
	movs r2, #0xa0
	lsls r2, r2, #7
	bl PutIcon
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #7
	bls _0807633C
	b _080763BE
	.align 2, 0
_0807635C: .4byte 0x0200D6A4
_08076360:
	movs r5, #1
	ldr r2, _080763D0 @ =0x08678840
	lsls r0, r4, #3
	adds r0, r0, r4
	lsls r1, r0, #4
	adds r0, r1, r2
	ldrb r0, [r0, #0x18]
	adds r6, #0x10
	mov sb, r6
	cmp r0, #0
	beq _080763B6
	mov r8, r7
	adds r7, r2, #0
	adds r6, r1, #0
_0807637C:
	lsls r4, r5, #4
	adds r4, r4, r6
	adds r0, r4, r7
	ldrb r1, [r0, #8]
	subs r1, #0x40
	mov r0, r8
	bl Text_SetCursor
	mov r0, r8
	movs r1, #0
	bl Text_SetColor
	adds r0, r7, #4
	adds r4, r4, r0
	ldr r1, [r4]
	mov r0, r8
	bl Text_DrawString
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #8
	bhi _080763B6
	lsls r0, r5, #4
	adds r0, r0, r6
	adds r0, r0, r7
	ldrb r0, [r0, #8]
	cmp r0, #0
	bne _0807637C
_080763B6:
	ldr r0, _080763D4 @ =0x0200D6A4
	mov r1, sb
	bl PutText
_080763BE:
	movs r0, #4
	bl EnableBgSync
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080763D0: .4byte 0x08678840
_080763D4: .4byte 0x0200D6A4

	thumb_func_start sub_80763D8
sub_80763D8: @ 0x080763D8
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r5, r1, #0x18
	lsls r2, r2, #0x18
	lsrs r7, r2, #0x18
	cmp r5, #0
	beq _08076414
	ldr r4, _08076410 @ =0x02022B7C
	adds r0, r4, #0
	movs r1, #2
	adds r2, r5, #0
	bl PutNumber
	adds r0, r4, #2
	movs r1, #0
	movs r2, #0x16
	bl PutSpecialChar
	adds r4, #4
	adds r0, r4, #0
	movs r1, #2
	adds r2, r6, #0
	bl PutNumber
	b _08076426
	.align 2, 0
_08076410: .4byte 0x02022B7C
_08076414:
	ldr r0, _08076440 @ =0x0202233A
	movs r1, #6
	movs r2, #3
	movs r3, #0
	bl TmFillRect_t
	movs r0, #2
	bl EnableBgSync
_08076426:
	cmp r7, #0
	beq _08076432
	ldr r0, _08076444 @ =0x02022C48
	adds r1, r5, #0
	bl sub_8076314
_08076432:
	movs r0, #4
	bl EnableBgSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076440: .4byte 0x0202233A
_08076444: .4byte 0x02022C48

	thumb_func_start sub_8076448
sub_8076448: @ 0x08076448
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x54
	str r0, [sp, #0x24]
	str r2, [sp, #0x28]
	ldr r4, [sp, #0x74]
	lsls r1, r1, #0x18
	lsrs r7, r1, #0x18
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	str r3, [sp, #0x2c]
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	adds r0, r7, #0
	movs r1, #7
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x30]
	lsls r0, r7, #1
	mov sl, r0
	movs r0, #0x1f
	mov r1, sl
	ands r1, r0
	mov sl, r1
	ldr r1, _080764E8 @ =0x0200CC38
	lsls r0, r7, #2
	adds r0, r0, r1
	mov r8, r0
	ldr r0, [r0]
	ldr r1, [r0]
	movs r0, #8
	ldrh r1, [r1, #0xc]
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	rsbs r0, r0, #0
	lsrs r0, r0, #0x1f
	mov sb, r0
	cmp r4, #0
	beq _08076528
	ldr r2, [sp, #0x30]
	lsls r4, r2, #3
	ldr r0, _080764EC @ =0x0200D5BC
	adds r5, r4, r0
	adds r0, r5, #0
	bl ClearText
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetCursor
	ldr r0, [sp, #0x24]
	adds r0, #0x3c
	ldrb r0, [r0]
	adds r6, r4, #0
	cmp r0, #0
	bne _080764F0
	ldr r0, [sp, #0x24]
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #1
	bne _080764F0
	mov r3, r8
	ldr r0, [r3]
	ldr r0, [r0]
	bl sub_8079404
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080764F0
	adds r0, r5, #0
	movs r1, #4
	bl Text_SetColor
	b _080764FA
	.align 2, 0
_080764E8: .4byte 0x0200CC38
_080764EC: .4byte 0x0200D5BC
_080764F0:
	ldr r0, _08076574 @ =0x0200D5BC
	adds r0, r6, r0
	mov r1, sb
	bl Text_SetColor
_080764FA:
	ldr r4, _08076574 @ =0x0200D5BC
	adds r4, r6, r4
	ldr r1, _08076578 @ =0x0200CC38
	lsls r0, r7, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	mov r6, sl
	lsls r1, r6, #6
	ldr r0, [sp, #0x28]
	adds r1, r0, r1
	adds r1, #6
	adds r0, r4, #0
	bl PutText
_08076528:
	ldr r1, [sp, #0x30]
	lsls r5, r1, #1
	adds r0, r5, r1
	lsls r0, r0, #3
	mov r8, r0
	ldr r6, _0807657C @ =0x0200D5F4
	adds r0, r0, r6
	bl ClearText
	adds r0, r6, #0
	adds r0, #8
	add r0, r8
	bl ClearText
	mov r2, sl
	lsls r4, r2, #6
	ldr r3, [sp, #0x28]
	adds r3, r3, r4
	str r3, [sp, #0x34]
	adds r0, r3, #0
	adds r0, #0x10
	movs r1, #0x18
	movs r2, #1
	movs r3, #0
	bl TmFillRect_t
	mov sl, r4
	str r5, [sp, #0x50]
	ldr r4, [sp, #0x2c]
	cmp r4, #5
	bls _08076568
	b _08076BA8
_08076568:
	lsls r0, r4, #2
	ldr r1, _08076580 @ =_08076584
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08076574: .4byte 0x0200D5BC
_08076578: .4byte 0x0200CC38
_0807657C: .4byte 0x0200D5F4
_08076580: .4byte _08076584
_08076584: @ jump table
	.4byte _0807659C @ case 0
	.4byte _08076724 @ case 1
	.4byte _080767E8 @ case 2
	.4byte _08076906 @ case 3
	.4byte _08076A14 @ case 4
	.4byte _08076B48 @ case 5
_0807659C:
	ldr r0, _0807660C @ =0x0200CC38
	lsls r6, r7, #2
	adds r0, r0, r6
	mov r8, r0
	ldr r0, [r0]
	ldr r0, [r0]
	ldr r0, [r0, #4]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r2, r0, #0
	ldr r0, [sp, #0x50]
	ldr r1, [sp, #0x30]
	adds r5, r0, r1
	lsls r5, r5, #3
	ldr r4, _08076610 @ =0x0200D5F4
	adds r0, r5, r4
	ldr r7, [sp, #0x28]
	add r7, sl
	adds r1, r7, #0
	adds r1, #0x10
	movs r3, #0
	str r3, [sp]
	str r2, [sp, #4]
	movs r2, #0
	bl PutDrawText
	adds r4, #8
	adds r5, r5, r4
	mov r4, sb
	adds r0, r5, #0
	adds r1, r4, #0
	bl Text_SetColor
	mov r1, r8
	ldr r0, [r1]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	str r6, [sp, #0x4c]
	cmp r0, #0
	bne _08076618
	adds r1, r7, #0
	adds r1, #0x22
	movs r2, #0
	str r2, [sp]
	ldr r0, _08076614 @ =0x08327154
	str r0, [sp, #4]
	adds r0, r5, #0
	adds r2, r4, #0
	movs r3, #0
	bl PutDrawText
	b _08076676
	.align 2, 0
_0807660C: .4byte 0x0200CC38
_08076610: .4byte 0x0200D5F4
_08076614: .4byte 0x08327154
_08076618:
	mov r3, r8
	ldr r0, [r3]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemName
	adds r1, r7, #0
	adds r1, #0x22
	movs r6, #0
	str r6, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	adds r2, r4, #0
	movs r3, #0
	bl PutDrawText
	adds r4, r7, #0
	adds r4, #0x1e
	mov r1, r8
	ldr r0, [r1]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIcon
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r4, #0
	bl PutIcon
	mov r2, r8
	ldr r0, [r2]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIcon
	bl sub_8074384
_08076676:
	ldr r3, [sp, #0x50]
	ldr r4, [sp, #0x30]
	adds r0, r3, r4
	lsls r0, r0, #3
	ldr r1, _080766A8 @ =0x0200D604
	adds r4, r0, r1
	adds r0, r4, #0
	bl ClearText
	ldr r0, _080766AC @ =0x0200CC38
	ldr r6, [sp, #0x4c]
	adds r0, r6, r0
	ldr r0, [r0]
	ldr r1, [r0]
	ldr r0, [r1]
	ldrb r0, [r0, #4]
	cmp r0, #0x42
	bne _080766B0
	ldr r1, [sp, #0x28]
	add r1, sl
	adds r1, #0x30
	movs r0, #0
	str r0, [sp]
	b _08076710
	.align 2, 0
_080766A8: .4byte 0x0200D604
_080766AC: .4byte 0x0200CC38
_080766B0:
	movs r3, #0xc0
	lsls r3, r3, #8
	ldrh r1, [r1, #0xc]
	ands r3, r1
	movs r0, #0x80
	lsls r0, r0, #7
	cmp r3, r0
	beq _080766D4
	cmp r3, r0
	bgt _080766CA
	cmp r3, #0
	beq _08076708
	b _08076D10
_080766CA:
	movs r0, #0x80
	lsls r0, r0, #8
	cmp r3, r0
	beq _080766E8
	b _08076D10
_080766D4:
	ldr r1, [sp, #0x28]
	add r1, sl
	adds r1, #0x30
	movs r0, #0
	str r0, [sp]
	ldr r0, _080766E4 @ =0x08327168
	b _080766F4
	.align 2, 0
_080766E4: .4byte 0x08327168
_080766E8:
	ldr r1, [sp, #0x28]
	add r1, sl
	adds r1, #0x30
	movs r0, #0
	str r0, [sp]
	ldr r0, _08076704 @ =0x0832716C
_080766F4:
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #4
	movs r3, #8
	bl PutDrawText
	b _08076D10
	.align 2, 0
_08076704: .4byte 0x0832716C
_08076708:
	ldr r1, [sp, #0x28]
	add r1, sl
	adds r1, #0x30
	str r3, [sp]
_08076710:
	ldr r0, _08076720 @ =0x08327160
	str r0, [sp, #4]
	adds r0, r4, #0
	movs r2, #1
	movs r3, #4
	bl PutDrawText
	b _08076D10
	.align 2, 0
_08076720: .4byte 0x08327160
_08076724:
	ldr r1, _080767E0 @ =0x0200CC38
	lsls r0, r7, #2
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	ldr r0, [r0, #4]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r3, r0, #0
	ldr r1, [sp, #0x50]
	ldr r2, [sp, #0x30]
	adds r0, r1, r2
	lsls r0, r0, #3
	ldr r1, _080767E4 @ =0x0200D5F4
	adds r0, r0, r1
	ldr r4, [sp, #0x28]
	add r4, sl
	adds r1, r4, #0
	adds r1, #0x10
	mov r8, sb
	movs r2, #0
	str r2, [sp]
	str r3, [sp, #4]
	mov r2, r8
	movs r3, #0
	bl PutDrawText
	adds r3, r4, #0
	adds r3, #0x22
	movs r1, #2
	mov r0, sb
	cmp r0, #0
	beq _0807676A
	movs r1, #1
_0807676A:
	ldr r0, [r6]
	ldr r0, [r0]
	movs r2, #8
	ldrsb r2, [r0, r2]
	adds r0, r3, #0
	bl PutNumberOrBlank
	adds r3, r4, #0
	adds r3, #0x28
	movs r1, #2
	mov r2, sb
	cmp r2, #0
	beq _08076786
	movs r1, #1
_08076786:
	ldr r0, [r6]
	ldr r0, [r0]
	ldrb r2, [r0, #9]
	adds r0, r3, #0
	bl PutNumberOrBlank
	adds r5, r4, #0
	adds r5, #0x2e
	movs r7, #2
	mov r3, sb
	cmp r3, #0
	beq _080767A0
	movs r7, #1
_080767A0:
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitCurrentHp
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r7, #0
	bl PutNumberOrBlank
	adds r0, r4, #0
	adds r0, #0x30
	mov r1, r8
	movs r2, #0x16
	bl PutSpecialChar
	adds r4, #0x34
	movs r5, #2
	mov r0, sb
	cmp r0, #0
	beq _080767CA
	movs r5, #1
_080767CA:
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitMaxHp
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl PutNumberOrBlank
	b _08076D10
	.align 2, 0
_080767E0: .4byte 0x0200CC38
_080767E4: .4byte 0x0200D5F4
_080767E8:
	ldr r5, [sp, #0x28]
	add r5, sl
	movs r1, #0x12
	adds r1, r1, r5
	mov r8, r1
	ldr r1, _080768F4 @ =0x0200CC38
	lsls r0, r7, #2
	adds r4, r0, r1
	ldr r0, [r4]
	ldr r1, [r0]
	ldr r0, [r1, #4]
	movs r6, #2
	ldrb r0, [r0, #0x14]
	ldrb r2, [r1, #0x12]
	cmp r0, r2
	bne _0807680A
	movs r6, #4
_0807680A:
	adds r0, r1, #0
	bl GetUnitPower
	adds r2, r0, #0
	mov r0, r8
	adds r1, r6, #0
	bl PutNumberOrBlank
	adds r7, r5, #0
	adds r7, #0x18
	ldr r0, [r4]
	ldr r1, [r0]
	ldr r0, [r1, #4]
	movs r6, #2
	ldrb r0, [r0, #0x15]
	ldrb r3, [r1, #0x13]
	cmp r0, r3
	bne _08076830
	movs r6, #4
_08076830:
	adds r0, r1, #0
	bl GetUnitSkill
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl PutNumberOrBlank
	adds r7, r5, #0
	adds r7, #0x1e
	ldr r0, [r4]
	ldr r1, [r0]
	ldr r0, [r1, #4]
	movs r6, #2
	ldrb r0, [r0, #0x16]
	ldrb r2, [r1, #0x14]
	cmp r0, r2
	bne _08076856
	movs r6, #4
_08076856:
	adds r0, r1, #0
	bl GetUnitSpeed
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl PutNumberOrBlank
	adds r7, r5, #0
	adds r7, #0x24
	ldr r0, [r4]
	ldr r0, [r0]
	movs r6, #2
	ldrb r3, [r0, #0x17]
	cmp r3, #0x1e
	bne _08076878
	movs r6, #4
_08076878:
	bl GetUnitLuck
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl PutNumberOrBlank
	adds r7, r5, #0
	adds r7, #0x2a
	ldr r0, [r4]
	ldr r1, [r0]
	ldr r0, [r1, #4]
	movs r6, #2
	ldrb r0, [r0, #0x17]
	ldrb r2, [r1, #0x15]
	cmp r0, r2
	bne _0807689C
	movs r6, #4
_0807689C:
	adds r0, r1, #0
	bl GetUnitDefense
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl PutNumberOrBlank
	adds r7, r5, #0
	adds r7, #0x30
	ldr r0, [r4]
	ldr r1, [r0]
	ldr r0, [r1, #4]
	movs r6, #2
	ldrb r0, [r0, #0x18]
	ldrb r3, [r1, #0x16]
	cmp r0, r3
	bne _080768C2
	movs r6, #4
_080768C2:
	adds r0, r1, #0
	bl GetUnitResistance
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	bl PutNumberOrBlank
	ldr r0, [r4]
	ldr r0, [r0]
	bl GetUnitAffinityIcon
	adds r1, r0, #0
	movs r0, #1
	rsbs r0, r0, #0
	cmp r1, r0
	bne _080768F8
	adds r0, r5, #0
	adds r0, #0x34
	movs r1, #2
	movs r2, #0x14
	bl PutSpecialChar
	b _08076D10
	.align 2, 0
_080768F4: .4byte 0x0200CC38
_080768F8:
	adds r0, r5, #0
	adds r0, #0x34
	movs r2, #0xa0
	lsls r2, r2, #7
	bl PutIcon
	b _08076D10
_08076906:
	ldr r0, _08076940 @ =0x0200CC38
	lsls r4, r7, #2
	adds r7, r4, r0
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	str r4, [sp, #0x4c]
	cmp r3, #0
	bne _0807694C
	ldr r4, [sp, #0x50]
	ldr r6, [sp, #0x30]
	adds r0, r4, r6
	lsls r0, r0, #3
	ldr r1, _08076944 @ =0x0200D5F4
	adds r0, r0, r1
	ldr r1, [sp, #0x28]
	add r1, sl
	adds r1, #0x14
	mov r2, sb
	str r3, [sp]
	ldr r3, _08076948 @ =0x08327154
	str r3, [sp, #4]
	movs r3, #0
	bl PutDrawText
	b _080769B0
	.align 2, 0
_08076940: .4byte 0x0200CC38
_08076944: .4byte 0x0200D5F4
_08076948: .4byte 0x08327154
_0807694C:
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemName
	adds r5, r0, #0
	ldr r1, [sp, #0x50]
	ldr r2, [sp, #0x30]
	adds r0, r1, r2
	lsls r0, r0, #3
	ldr r1, _08076A0C @ =0x0200D5F4
	adds r0, r0, r1
	ldr r4, [sp, #0x28]
	add r4, sl
	adds r1, r4, #0
	adds r1, #0x14
	mov r2, sb
	movs r3, #0
	str r3, [sp]
	str r5, [sp, #4]
	bl PutDrawText
	adds r4, #0x10
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIcon
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r4, #0
	bl PutIcon
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIcon
	bl sub_8074384
_080769B0:
	ldr r5, [sp, #0x28]
	add r5, sl
	adds r3, r5, #0
	adds r3, #0x24
	movs r1, #2
	mov r4, sb
	cmp r4, #0
	beq _080769C2
	movs r1, #1
_080769C2:
	ldr r0, _08076A10 @ =0x0200CC38
	ldr r6, [sp, #0x4c]
	adds r4, r6, r0
	ldr r0, [r4]
	movs r6, #4
	ldrsh r2, [r0, r6]
	adds r0, r3, #0
	bl PutNumberOrBlank
	adds r3, r5, #0
	adds r3, #0x2c
	movs r1, #2
	mov r0, sb
	cmp r0, #0
	beq _080769E2
	movs r1, #1
_080769E2:
	ldr r0, [r4]
	movs r6, #6
	ldrsh r2, [r0, r6]
	adds r0, r3, #0
	bl PutNumberOrBlank
	adds r1, r5, #0
	adds r1, #0x34
	movs r3, #2
	mov r0, sb
	cmp r0, #0
	beq _080769FC
	movs r3, #1
_080769FC:
	ldr r0, [r4]
	movs r4, #8
	ldrsh r2, [r0, r4]
	adds r0, r1, #0
	adds r1, r3, #0
	bl PutNumberOrBlank
	b _08076D10
	.align 2, 0
_08076A0C: .4byte 0x0200D5F4
_08076A10: .4byte 0x0200CC38
_08076A14:
	ldr r0, _08076A5C @ =0x0200CC38
	lsls r1, r7, #2
	adds r0, r1, r0
	ldr r0, [r0]
	ldr r2, [r0]
	movs r0, #0x10
	ldrh r6, [r2, #0xc]
	ands r0, r6
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	str r1, [sp, #0x4c]
	cmp r3, #0
	beq _08076A64
	adds r0, r2, #0
	bl GetUnitRescueName
	adds r5, r0, #0
	ldr r1, [sp, #0x50]
	ldr r2, [sp, #0x30]
	adds r0, r1, r2
	lsls r0, r0, #3
	ldr r1, _08076A60 @ =0x0200D5FC
	adds r0, r0, r1
	ldr r1, [sp, #0x28]
	add r1, sl
	adds r1, #0x24
	mov r3, sb
	rsbs r4, r3, #0
	mov r2, sb
	movs r3, #0
	str r3, [sp]
	str r5, [sp, #4]
	bl PutDrawText
	b _08076A86
	.align 2, 0
_08076A5C: .4byte 0x0200CC38
_08076A60: .4byte 0x0200D5FC
_08076A64:
	ldr r4, [sp, #0x50]
	ldr r6, [sp, #0x30]
	adds r0, r4, r6
	lsls r0, r0, #3
	ldr r1, _08076B38 @ =0x0200D5FC
	adds r0, r0, r1
	ldr r1, [sp, #0x28]
	add r1, sl
	adds r1, #0x24
	mov r2, sb
	rsbs r4, r2, #0
	str r3, [sp]
	ldr r3, _08076B3C @ =0x08327170
	str r3, [sp, #4]
	movs r3, #0
	bl PutDrawText
_08076A86:
	mov r8, r4
	ldr r7, [sp, #0x28]
	add r7, sl
	adds r3, r7, #0
	adds r3, #0x14
	movs r1, #2
	mov r4, sb
	cmp r4, #0
	beq _08076A9A
	movs r1, #1
_08076A9A:
	ldr r0, _08076B40 @ =0x0200CC38
	ldr r6, [sp, #0x4c]
	adds r4, r6, r0
	ldr r0, [r4]
	ldr r0, [r0]
	movs r2, #0x1a
	ldrsb r2, [r0, r2]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r2, r0
	adds r0, r3, #0
	bl PutNumberOrBlank
	adds r3, r7, #0
	adds r3, #0x1a
	movs r5, #2
	mov r0, sb
	cmp r0, #0
	beq _08076AC6
	movs r5, #1
_08076AC6:
	ldr r0, [r4]
	ldr r1, [r0]
	ldr r0, [r1, #4]
	movs r2, #0x11
	ldrsb r2, [r0, r2]
	ldr r0, [r1]
	ldrb r0, [r0, #0x13]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r2, r0
	movs r0, #0x18
	ldrsb r0, [r1, r0]
	adds r2, r2, r0
	adds r0, r3, #0
	adds r1, r5, #0
	bl PutNumberOrBlank
	adds r5, r7, #0
	adds r5, #0x20
	movs r6, #2
	mov r1, sb
	cmp r1, #0
	beq _08076AF6
	movs r6, #1
_08076AF6:
	ldr r0, [r4]
	ldr r0, [r0]
	bl GetUnitAid
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r6, #0
	bl PutNumberOrBlank
	ldr r0, [r4]
	ldr r0, [r0]
	bl GetUnitStatusName
	adds r4, r0, #0
	ldr r2, [sp, #0x50]
	ldr r3, [sp, #0x30]
	adds r0, r2, r3
	lsls r0, r0, #3
	ldr r1, _08076B44 @ =0x0200D5F4
	adds r0, r0, r1
	adds r1, r7, #0
	adds r1, #0x2e
	mov r6, r8
	mov r2, sb
	orrs r6, r2
	lsrs r2, r6, #0x1f
	movs r3, #0
	str r3, [sp]
	str r4, [sp, #4]
	bl PutDrawText
	b _08076D10
	.align 2, 0
_08076B38: .4byte 0x0200D5FC
_08076B3C: .4byte 0x08327170
_08076B40: .4byte 0x0200CC38
_08076B44: .4byte 0x0200D5F4
_08076B48:
	movs r6, #0
	lsls r3, r7, #2
	ldr r0, _08076BA0 @ =0x0200CC38
	adds r7, r3, r0
	ldr r5, [sp, #0x28]
	add r5, sl
_08076B54:
	add r1, sp, #8
	ldr r0, _08076BA4 @ =0x08327178
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldr r0, [r0]
	str r0, [r1]
	ldr r0, [r7]
	ldr r0, [r0]
	adds r0, #0x26
	adds r0, r0, r6
	ldrb r0, [r0]
	bl GetWeaponLevelFromExp
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	lsls r0, r6, #2
	adds r0, #0x14
	adds r3, r5, r0
	movs r1, #2
	cmp r4, #6
	bne _08076B84
	movs r1, #4
_08076B84:
	lsls r0, r4, #2
	add r0, sp
	adds r0, #8
	ldr r2, [r0]
	adds r0, r3, #0
	bl PutSpecialChar
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #7
	bls _08076B54
	b _08076D10
	.align 2, 0
_08076BA0: .4byte 0x0200CC38
_08076BA4: .4byte 0x08327178
_08076BA8:
	ldr r1, [sp, #0x2c]
	subs r1, #6
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x38]
	movs r4, #0
	str r4, [sp, #0x3c]
	ldr r1, _08076C60 @ =0x0200CC38
	lsls r0, r7, #2
	adds r5, r0, r1
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitSupportCount
	str r0, [sp, #0x40]
	adds r0, r6, #0
	adds r0, #0x10
	add r0, r8
	bl ClearText
	movs r6, #0
	ldr r0, [sp, #0x40]
	cmp r4, r0
	bge _08076CCE
	adds r7, r5, #0
	mov r1, r8
	str r1, [sp, #0x44]
	ldr r2, [sp, #0x34]
	str r2, [sp, #0x48]
	mov r3, sb
	rsbs r3, r3, #0
	mov r0, sb
	orrs r3, r0
	mov r8, r3
_08076BF0:
	ldr r0, [r7]
	ldr r0, [r0]
	adds r1, r6, #0
	bl CanUnitSupportNow
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08076CC2
	ldr r1, [sp, #0x3c]
	ldr r2, [sp, #0x38]
	cmp r1, r2
	blo _08076CB8
	ldr r0, [r7]
	ldr r0, [r0]
	adds r1, r6, #0
	bl GetUnitSupportUnit
	movs r1, #8
	ldrh r0, [r0, #0xc]
	ands r1, r0
	lsls r1, r1, #0x10
	lsrs r5, r1, #0x10
	cmp r5, #0
	bne _08076C68
	ldr r0, [r7]
	ldr r0, [r0]
	adds r1, r6, #0
	bl GetUnitSupportPid
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl GetPersonInfo
	ldrh r0, [r0]
	bl DecodeMsg
	adds r2, r0, #0
	lsls r0, r4, #3
	ldr r1, _08076C64 @ =0x0200D5F4
	adds r0, r0, r1
	ldr r3, [sp, #0x44]
	adds r0, r3, r0
	lsls r1, r4, #1
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r1, #0x12
	ldr r3, [sp, #0x48]
	adds r1, r3, r1
	str r5, [sp]
	str r2, [sp, #4]
	mov r3, r8
	lsrs r2, r3, #0x1f
	movs r3, #0
	bl PutDrawText
	b _08076CA6
	.align 2, 0
_08076C60: .4byte 0x0200CC38
_08076C64: .4byte 0x0200D5F4
_08076C68:
	ldr r0, [r7]
	ldr r0, [r0]
	adds r1, r6, #0
	bl GetUnitSupportPid
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bl GetPersonInfo
	ldrh r0, [r0]
	bl DecodeMsg
	adds r3, r0, #0
	lsls r0, r4, #3
	ldr r1, _08076CB4 @ =0x0200D5F4
	adds r0, r0, r1
	ldr r1, [sp, #0x44]
	adds r0, r1, r0
	lsls r1, r4, #1
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r1, #0x12
	ldr r2, [sp, #0x48]
	adds r1, r2, r1
	movs r2, #0
	str r2, [sp]
	str r3, [sp, #4]
	movs r2, #1
	movs r3, #0
	bl PutDrawText
_08076CA6:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #3
	beq _08076CCE
	b _08076CC2
	.align 2, 0
_08076CB4: .4byte 0x0200D5F4
_08076CB8:
	ldr r0, [sp, #0x3c]
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0x3c]
_08076CC2:
	adds r0, r6, #1
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	ldr r3, [sp, #0x40]
	cmp r6, r3
	blt _08076BF0
_08076CCE:
	cmp r4, #2
	bhi _08076D10
	ldr r6, [sp, #0x50]
	ldr r1, [sp, #0x30]
	adds r0, r6, r1
	lsls r5, r0, #3
	ldr r7, [sp, #0x28]
	add r7, sl
	mov r2, sb
	rsbs r6, r2, #0
	orrs r6, r2
_08076CE4:
	lsls r0, r4, #3
	ldr r1, _08076D28 @ =0x0200D5F4
	adds r0, r0, r1
	adds r0, r5, r0
	lsls r1, r4, #1
	adds r1, r1, r4
	lsls r1, r1, #2
	adds r1, #0x12
	adds r1, r7, r1
	movs r2, #0
	str r2, [sp]
	ldr r2, _08076D2C @ =0x08327170
	str r2, [sp, #4]
	lsrs r2, r6, #0x1f
	movs r3, #0
	bl PutDrawText
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #2
	bls _08076CE4
_08076D10:
	movs r0, #1
	bl EnableBgSync
	add sp, #0x54
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08076D28: .4byte 0x0200D5F4
_08076D2C: .4byte 0x08327170

	thumb_func_start sub_8076D30
sub_8076D30: @ 0x08076D30
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #8
	ldrh r1, [r1, #0xc]
	ands r0, r1
	bx lr

	thumb_func_start sub_8076D3C
sub_8076D3C: @ 0x08076D3C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x64
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r2, r1, #0x18
	movs r1, #1
	ands r2, r1
	subs r0, #1
	cmp r0, #0x1f
	bls _08076D5E
	bl _0807918C
_08076D5E:
	lsls r0, r0, #2
	ldr r1, _08076D68 @ =_08076D6C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08076D68: .4byte _08076D6C
_08076D6C: @ jump table
	.4byte _08076DEC @ case 0
	.4byte _080770EC @ case 1
	.4byte _08076FD8 @ case 2
	.4byte _080771F8 @ case 3
	.4byte _080772FC @ case 4
	.4byte _08077404 @ case 5
	.4byte _08077510 @ case 6
	.4byte _08077618 @ case 7
	.4byte _08077720 @ case 8
	.4byte _0807782C @ case 9
	.4byte _08077934 @ case 10
	.4byte _08077A3C @ case 11
	.4byte _08077DA4 @ case 12
	.4byte _08077EB0 @ case 13
	.4byte _080780BC @ case 14
	.4byte _080781B0 @ case 15
	.4byte _080782A4 @ case 16
	.4byte _08078398 @ case 17
	.4byte _08077B48 @ case 18
	.4byte _08077C9C @ case 19
	.4byte _080784C0 @ case 20
	.4byte _080785D4 @ case 21
	.4byte _08078768 @ case 22
	.4byte _0807886C @ case 23
	.4byte _08078970 @ case 24
	.4byte _08078A74 @ case 25
	.4byte _08078B78 @ case 26
	.4byte _08078C7C @ case 27
	.4byte _08078D80 @ case 28
	.4byte _08078E84 @ case 29
	.4byte _08078F8C @ case 30
	.4byte _08079080 @ case 31
_08076DEC:
	cmp r2, #0
	bne _08076EE4
	movs r0, #0
	str r0, [sp, #0x40]
	movs r1, #0
	ldr r3, _08076EDC @ =0x0200CD38
	mov sl, r3
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	bge _08076E62
	adds r4, r3, #0
	mov sb, r4
	ldr r7, _08076EE0 @ =0x0200CC38
	mov ip, r7
_08076E0A:
	movs r3, #0
	adds r0, r1, #1
	mov r2, sb
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r3, r1
	bge _08076E52
	mov r7, ip
_08076E1C:
	adds r6, r3, #1
	lsls r0, r6, #2
	adds r5, r0, r7
	ldr r4, [r5]
	ldr r0, [r4]
	ldr r1, [r0]
	lsls r0, r3, #2
	adds r3, r0, r7
	ldr r2, [r3]
	ldr r0, [r2]
	ldr r0, [r0]
	ldrb r1, [r1, #0xa]
	ldrb r0, [r0, #0xa]
	cmp r1, r0
	bhs _08076E42
	str r4, [r3]
	str r2, [r5]
	movs r3, #1
	str r3, [sp, #0x40]
_08076E42:
	lsls r0, r6, #0x18
	lsrs r3, r0, #0x18
	mov r4, sb
	ldrb r4, [r4]
	mov r1, r8
	subs r0, r4, r1
	cmp r3, r0
	blt _08076E1C
_08076E52:
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	mov r3, sl
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _08076E0A
_08076E62:
	movs r1, #0
	ldr r4, _08076EDC @ =0x0200CD38
	ldrb r0, [r4]
	subs r0, #1
	cmp r1, r0
	bge _08076ED6
	mov sl, r4
_08076E70:
	movs r3, #0
	adds r0, r1, #1
	mov r7, sl
	ldrb r7, [r7]
	subs r1, r7, r0
	mov r8, r0
	cmp r3, r1
	bge _08076EC6
	ldr r0, _08076EE0 @ =0x0200CC38
	mov sb, r0
	movs r1, #2
	mov ip, r1
_08076E88:
	adds r7, r3, #1
	lsls r0, r7, #2
	mov r2, sb
	adds r6, r0, r2
	ldr r5, [r6]
	ldr r0, [r5]
	mov r2, ip
	ldrh r0, [r0, #0xc]
	ands r2, r0
	lsls r0, r3, #2
	mov r3, sb
	adds r4, r0, r3
	ldr r3, [r4]
	ldr r1, [r3]
	mov r0, ip
	ldrh r1, [r1, #0xc]
	ands r0, r1
	cmp r2, r0
	bhs _08076EB6
	str r5, [r4]
	str r3, [r6]
	movs r4, #1
	str r4, [sp, #0x40]
_08076EB6:
	lsls r0, r7, #0x18
	lsrs r3, r0, #0x18
	mov r7, sl
	ldrb r7, [r7]
	mov r1, r8
	subs r0, r7, r1
	cmp r3, r0
	blt _08076E88
_08076EC6:
	mov r2, r8
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _08076EDC @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _08076E70
_08076ED6:
	ldr r4, [sp, #0x40]
	bl _080780AA
	.align 2, 0
_08076EDC: .4byte 0x0200CD38
_08076EE0: .4byte 0x0200CC38
_08076EE4:
	movs r7, #0
	str r7, [sp, #0x44]
	movs r1, #0
	ldr r0, _08076FD0 @ =0x0200CD38
	mov sl, r0
	ldrb r0, [r0]
	subs r0, #1
	cmp r7, r0
	bge _08076F56
	ldr r2, _08076FD0 @ =0x0200CD38
	mov sb, r2
	ldr r3, _08076FD4 @ =0x0200CC38
	mov ip, r3
_08076EFE:
	movs r3, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	mov r8, r0
	cmp r3, r1
	bge _08076F46
	mov r7, ip
_08076F10:
	adds r6, r3, #1
	lsls r0, r6, #2
	adds r5, r0, r7
	ldr r4, [r5]
	ldr r0, [r4]
	ldr r1, [r0]
	lsls r0, r3, #2
	adds r3, r0, r7
	ldr r2, [r3]
	ldr r0, [r2]
	ldr r0, [r0]
	ldrb r1, [r1, #0xa]
	ldrb r0, [r0, #0xa]
	cmp r1, r0
	bls _08076F36
	str r4, [r3]
	str r2, [r5]
	movs r0, #1
	str r0, [sp, #0x44]
_08076F36:
	lsls r0, r6, #0x18
	lsrs r3, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	mov r2, r8
	subs r0, r1, r2
	cmp r3, r0
	blt _08076F10
_08076F46:
	mov r3, r8
	lsls r0, r3, #0x18
	lsrs r1, r0, #0x18
	mov r4, sl
	ldrb r0, [r4]
	subs r0, #1
	cmp r1, r0
	blt _08076EFE
_08076F56:
	movs r1, #0
	ldr r7, _08076FD0 @ =0x0200CD38
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	bge _08076FC8
	mov sl, r7
_08076F64:
	movs r3, #0
	adds r0, r1, #1
	mov r2, sl
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r3, r1
	bge _08076FB8
	ldr r4, _08076FD4 @ =0x0200CC38
	mov sb, r4
	movs r7, #2
	mov ip, r7
_08076F7C:
	adds r7, r3, #1
	lsls r0, r7, #2
	mov r1, sb
	adds r6, r0, r1
	ldr r5, [r6]
	ldr r0, [r5]
	mov r2, ip
	ldrh r0, [r0, #0xc]
	ands r2, r0
	lsls r0, r3, #2
	adds r4, r0, r1
	ldr r3, [r4]
	ldr r1, [r3]
	mov r0, ip
	ldrh r1, [r1, #0xc]
	ands r0, r1
	cmp r2, r0
	bls _08076FA8
	str r5, [r4]
	str r3, [r6]
	movs r2, #1
	str r2, [sp, #0x44]
_08076FA8:
	lsls r0, r7, #0x18
	lsrs r3, r0, #0x18
	mov r4, sl
	ldrb r4, [r4]
	mov r7, r8
	subs r0, r4, r7
	cmp r3, r0
	blt _08076F7C
_08076FB8:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _08076FD0 @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08076F64
_08076FC8:
	ldr r3, [sp, #0x44]
	bl _08078F78
	.align 2, 0
_08076FD0: .4byte 0x0200CD38
_08076FD4: .4byte 0x0200CC38
_08076FD8:
	cmp r2, #0
	bne _08077064
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _0807705C @ =0x0200CD38
	mov ip, r7
	mov r3, ip
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _08076FF4
	bl _08078F76
_08076FF4:
	adds r4, r3, #0
	mov sb, r4
_08076FF8:
	movs r2, #0
	adds r0, r1, #1
	mov r7, sb
	ldrb r7, [r7]
	subs r1, r7, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _08077048
	ldr r0, _08077060 @ =0x0200CC38
	mov r8, r0
_0807700C:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	ldrb r1, [r1, #8]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	ldrb r0, [r0, #8]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r1, r0
	ble _0807703A
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0807703A:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _0807700C
_08077048:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08076FF8
	bl _08078F76
	.align 2, 0
_0807705C: .4byte 0x0200CD38
_08077060: .4byte 0x0200CC38
_08077064:
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _080770E4 @ =0x0200CD38
	mov ip, r7
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0807707C
	bl _08078F76
_0807707C:
	adds r3, r2, #0
	mov sb, r3
_08077080:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _080770D0
	ldr r0, _080770E8 @ =0x0200CC38
	mov r8, r0
_08077094:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	ldrb r1, [r1, #8]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	ldrb r0, [r0, #8]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r1, r0
	bge _080770C2
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_080770C2:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _08077094
_080770D0:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08077080
	bl _08078F76
	.align 2, 0
_080770E4: .4byte 0x0200CD38
_080770E8: .4byte 0x0200CC38
_080770EC:
	cmp r2, #0
	bne _08077174
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _0807716C @ =0x0200CD38
	mov ip, r7
	mov r3, ip
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _08077108
	bl _08078F76
_08077108:
	adds r4, r3, #0
	mov sb, r4
_0807710C:
	movs r2, #0
	adds r0, r1, #1
	mov r7, sb
	ldrb r7, [r7]
	subs r1, r7, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _08077158
	ldr r0, _08077170 @ =0x0200CC38
	mov r8, r0
_08077120:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r0, [r4]
	ldr r1, [r0, #4]
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	ldr r0, [r0, #4]
	ldrb r1, [r1, #0xa]
	ldrb r0, [r0, #0xa]
	cmp r1, r0
	bhs _0807714A
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_0807714A:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _08077120
_08077158:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _0807710C
	bl _08078F76
	.align 2, 0
_0807716C: .4byte 0x0200CD38
_08077170: .4byte 0x0200CC38
_08077174:
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _080771F0 @ =0x0200CD38
	mov ip, r7
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _0807718C
	bl _08078F76
_0807718C:
	adds r3, r2, #0
	mov sb, r3
_08077190:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _080771DC
	ldr r0, _080771F4 @ =0x0200CC38
	mov r8, r0
_080771A4:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r0, [r4]
	ldr r1, [r0, #4]
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	ldr r0, [r0, #4]
	ldrb r1, [r1, #0xa]
	ldrb r0, [r0, #0xa]
	cmp r1, r0
	bls _080771CE
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_080771CE:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _080771A4
_080771DC:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08077190
	bl _08078F76
	.align 2, 0
_080771F0: .4byte 0x0200CD38
_080771F4: .4byte 0x0200CC38
_080771F8:
	cmp r2, #0
	bne _0807727C
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _08077274 @ =0x0200CD38
	mov ip, r7
	mov r3, ip
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _08077214
	bl _08078F76
_08077214:
	adds r4, r3, #0
	mov sb, r4
_08077218:
	movs r2, #0
	adds r0, r1, #1
	mov r7, sb
	ldrb r7, [r7]
	subs r1, r7, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _08077260
	ldr r0, _08077278 @ =0x0200CC38
	mov r8, r0
_0807722C:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	ldrb r1, [r1, #9]
	ldrb r0, [r0, #9]
	cmp r1, r0
	bls _08077252
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_08077252:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _0807722C
_08077260:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08077218
	bl _08078F76
	.align 2, 0
_08077274: .4byte 0x0200CD38
_08077278: .4byte 0x0200CC38
_0807727C:
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _080772F4 @ =0x0200CD38
	mov ip, r7
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _08077294
	bl _08078F76
_08077294:
	adds r3, r2, #0
	mov sb, r3
_08077298:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _080772E0
	ldr r0, _080772F8 @ =0x0200CC38
	mov r8, r0
_080772AC:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	ldrb r1, [r1, #9]
	ldrb r0, [r0, #9]
	cmp r1, r0
	bhs _080772D2
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_080772D2:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _080772AC
_080772E0:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08077298
	bl _08078F76
	.align 2, 0
_080772F4: .4byte 0x0200CD38
_080772F8: .4byte 0x0200CC38
_080772FC:
	cmp r2, #0
	bne _08077384
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r3, _0807737C @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _08077314
	bl _0807917A
_08077314:
	movs r5, #0
	adds r0, r1, #1
	ldrb r3, [r3]
	subs r1, r3, r0
	mov r8, r0
	cmp r5, r1
	bge _08077366
	ldr r7, _08077380 @ =0x0200CC38
	mov sb, r7
_08077326:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, sb
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitCurrentHp
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, sb
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitCurrentHp
	cmp r4, r0
	ble _08077356
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_08077356:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0807737C @ =0x0200CD38
	ldrb r0, [r0]
	mov r4, r8
	subs r0, r0, r4
	cmp r5, r0
	blt _08077326
_08077366:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _0807737C @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _08077314
	bl _0807917A
	.align 2, 0
_0807737C: .4byte 0x0200CD38
_08077380: .4byte 0x0200CC38
_08077384:
	movs r1, #0
	mov sl, r1
	ldr r2, _080773FC @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _08077396
	bl _0807906C
_08077396:
	movs r5, #0
	adds r0, r1, #1
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r5, r1
	bge _080773E8
	ldr r2, _08077400 @ =0x0200CC38
	mov sb, r2
_080773A8:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r3, sb
	adds r6, r0, r3
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitCurrentHp
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r1, sb
	adds r5, r0, r1
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitCurrentHp
	cmp r4, r0
	bge _080773D8
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r2, #1
	mov sl, r2
_080773D8:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _080773FC @ =0x0200CD38
	ldrb r0, [r0]
	mov r3, r8
	subs r0, r0, r3
	cmp r5, r0
	blt _080773A8
_080773E8:
	mov r4, r8
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _080773FC @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08077396
	bl _0807906C
	.align 2, 0
_080773FC: .4byte 0x0200CD38
_08077400: .4byte 0x0200CC38
_08077404:
	cmp r2, #0
	bne _0807748C
	movs r0, #0
	mov sl, r0
	movs r1, #0
	ldr r3, _08077484 @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0807741C
	bl _080790F6
_0807741C:
	movs r5, #0
	adds r0, r1, #1
	ldrb r3, [r3]
	subs r1, r3, r0
	mov r8, r0
	cmp r5, r1
	bge _0807746E
	ldr r1, _08077488 @ =0x0200CC38
	mov sb, r1
_0807742E:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r2, sb
	adds r6, r0, r2
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitMaxHp
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r3, sb
	adds r5, r0, r3
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitMaxHp
	cmp r4, r0
	ble _0807745E
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r4, #1
	mov sl, r4
_0807745E:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08077484 @ =0x0200CD38
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _0807742E
_0807746E:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _08077484 @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _0807741C
	bl _080790F6
	.align 2, 0
_08077484: .4byte 0x0200CD38
_08077488: .4byte 0x0200CC38
_0807748C:
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r2, _08077508 @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _080774A0
	bl _0807917A
_080774A0:
	movs r5, #0
	adds r0, r1, #1
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r5, r1
	bge _080774F2
	ldr r4, _0807750C @ =0x0200CC38
	mov sb, r4
_080774B2:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, sb
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitMaxHp
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, sb
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitMaxHp
	cmp r4, r0
	bge _080774E2
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_080774E2:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08077508 @ =0x0200CD38
	ldrb r0, [r0]
	mov r4, r8
	subs r0, r0, r4
	cmp r5, r0
	blt _080774B2
_080774F2:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _08077508 @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _080774A0
	bl _0807917A
	.align 2, 0
_08077508: .4byte 0x0200CD38
_0807750C: .4byte 0x0200CC38
_08077510:
	cmp r2, #0
	bne _08077594
	movs r1, #0
	mov sl, r1
	ldr r3, _0807758C @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _08077526
	bl _0807906C
_08077526:
	movs r5, #0
	adds r0, r1, #1
	ldrb r3, [r3]
	subs r1, r3, r0
	mov r8, r0
	cmp r5, r1
	bge _08077578
	ldr r2, _08077590 @ =0x0200CC38
	mov sb, r2
_08077538:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r3, sb
	adds r6, r0, r3
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitPower
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r1, sb
	adds r5, r0, r1
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitPower
	cmp r4, r0
	ble _08077568
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r2, #1
	mov sl, r2
_08077568:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0807758C @ =0x0200CD38
	ldrb r0, [r0]
	mov r3, r8
	subs r0, r0, r3
	cmp r5, r0
	blt _08077538
_08077578:
	mov r4, r8
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _0807758C @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _08077526
	bl _0807906C
	.align 2, 0
_0807758C: .4byte 0x0200CD38
_08077590: .4byte 0x0200CC38
_08077594:
	movs r0, #0
	mov sl, r0
	movs r1, #0
	ldr r2, _08077610 @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _080775A8
	bl _080790F6
_080775A8:
	movs r5, #0
	adds r0, r1, #1
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r5, r1
	bge _080775FA
	ldr r1, _08077614 @ =0x0200CC38
	mov sb, r1
_080775BA:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r2, sb
	adds r6, r0, r2
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitPower
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r3, sb
	adds r5, r0, r3
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitPower
	cmp r4, r0
	bge _080775EA
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r4, #1
	mov sl, r4
_080775EA:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08077610 @ =0x0200CD38
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _080775BA
_080775FA:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _08077610 @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _080775A8
	bl _080790F6
	.align 2, 0
_08077610: .4byte 0x0200CD38
_08077614: .4byte 0x0200CC38
_08077618:
	cmp r2, #0
	bne _080776A0
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r3, _08077698 @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _08077630
	bl _0807917A
_08077630:
	movs r5, #0
	adds r0, r1, #1
	ldrb r3, [r3]
	subs r1, r3, r0
	mov r8, r0
	cmp r5, r1
	bge _08077682
	ldr r4, _0807769C @ =0x0200CC38
	mov sb, r4
_08077642:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, sb
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitSkill
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, sb
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitSkill
	cmp r4, r0
	ble _08077672
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_08077672:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08077698 @ =0x0200CD38
	ldrb r0, [r0]
	mov r4, r8
	subs r0, r0, r4
	cmp r5, r0
	blt _08077642
_08077682:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _08077698 @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _08077630
	bl _0807917A
	.align 2, 0
_08077698: .4byte 0x0200CD38
_0807769C: .4byte 0x0200CC38
_080776A0:
	movs r1, #0
	mov sl, r1
	ldr r2, _08077718 @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _080776B2
	bl _0807906C
_080776B2:
	movs r5, #0
	adds r0, r1, #1
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r5, r1
	bge _08077704
	ldr r2, _0807771C @ =0x0200CC38
	mov sb, r2
_080776C4:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r3, sb
	adds r6, r0, r3
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitSkill
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r1, sb
	adds r5, r0, r1
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitSkill
	cmp r4, r0
	bge _080776F4
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r2, #1
	mov sl, r2
_080776F4:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08077718 @ =0x0200CD38
	ldrb r0, [r0]
	mov r3, r8
	subs r0, r0, r3
	cmp r5, r0
	blt _080776C4
_08077704:
	mov r4, r8
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _08077718 @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _080776B2
	bl _0807906C
	.align 2, 0
_08077718: .4byte 0x0200CD38
_0807771C: .4byte 0x0200CC38
_08077720:
	cmp r2, #0
	bne _080777A8
	movs r0, #0
	mov sl, r0
	movs r1, #0
	ldr r3, _080777A0 @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _08077738
	bl _080790F6
_08077738:
	movs r5, #0
	adds r0, r1, #1
	ldrb r3, [r3]
	subs r1, r3, r0
	mov r8, r0
	cmp r5, r1
	bge _0807778A
	ldr r1, _080777A4 @ =0x0200CC38
	mov sb, r1
_0807774A:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r2, sb
	adds r6, r0, r2
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitSpeed
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r3, sb
	adds r5, r0, r3
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitSpeed
	cmp r4, r0
	ble _0807777A
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r4, #1
	mov sl, r4
_0807777A:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _080777A0 @ =0x0200CD38
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _0807774A
_0807778A:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _080777A0 @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _08077738
	bl _080790F6
	.align 2, 0
_080777A0: .4byte 0x0200CD38
_080777A4: .4byte 0x0200CC38
_080777A8:
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r2, _08077824 @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _080777BC
	bl _0807917A
_080777BC:
	movs r5, #0
	adds r0, r1, #1
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r5, r1
	bge _0807780E
	ldr r4, _08077828 @ =0x0200CC38
	mov sb, r4
_080777CE:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, sb
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitSpeed
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, sb
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitSpeed
	cmp r4, r0
	bge _080777FE
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_080777FE:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08077824 @ =0x0200CD38
	ldrb r0, [r0]
	mov r4, r8
	subs r0, r0, r4
	cmp r5, r0
	blt _080777CE
_0807780E:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _08077824 @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _080777BC
	bl _0807917A
	.align 2, 0
_08077824: .4byte 0x0200CD38
_08077828: .4byte 0x0200CC38
_0807782C:
	cmp r2, #0
	bne _080778B0
	movs r1, #0
	mov sl, r1
	ldr r3, _080778A8 @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _08077842
	bl _0807906C
_08077842:
	movs r5, #0
	adds r0, r1, #1
	ldrb r3, [r3]
	subs r1, r3, r0
	mov r8, r0
	cmp r5, r1
	bge _08077894
	ldr r2, _080778AC @ =0x0200CC38
	mov sb, r2
_08077854:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r3, sb
	adds r6, r0, r3
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitLuck
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r1, sb
	adds r5, r0, r1
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitLuck
	cmp r4, r0
	ble _08077884
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r2, #1
	mov sl, r2
_08077884:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _080778A8 @ =0x0200CD38
	ldrb r0, [r0]
	mov r3, r8
	subs r0, r0, r3
	cmp r5, r0
	blt _08077854
_08077894:
	mov r4, r8
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _080778A8 @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _08077842
	bl _0807906C
	.align 2, 0
_080778A8: .4byte 0x0200CD38
_080778AC: .4byte 0x0200CC38
_080778B0:
	movs r0, #0
	mov sl, r0
	movs r1, #0
	ldr r2, _0807792C @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _080778C4
	bl _080790F6
_080778C4:
	movs r5, #0
	adds r0, r1, #1
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r5, r1
	bge _08077916
	ldr r1, _08077930 @ =0x0200CC38
	mov sb, r1
_080778D6:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r2, sb
	adds r6, r0, r2
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitLuck
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r3, sb
	adds r5, r0, r3
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitLuck
	cmp r4, r0
	bge _08077906
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r4, #1
	mov sl, r4
_08077906:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _0807792C @ =0x0200CD38
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _080778D6
_08077916:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _0807792C @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _080778C4
	bl _080790F6
	.align 2, 0
_0807792C: .4byte 0x0200CD38
_08077930: .4byte 0x0200CC38
_08077934:
	cmp r2, #0
	bne _080779BC
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r3, _080779B4 @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0807794C
	bl _0807917A
_0807794C:
	movs r5, #0
	adds r0, r1, #1
	ldrb r3, [r3]
	subs r1, r3, r0
	mov r8, r0
	cmp r5, r1
	bge _0807799E
	ldr r4, _080779B8 @ =0x0200CC38
	mov sb, r4
_0807795E:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, sb
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitDefense
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, sb
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitDefense
	cmp r4, r0
	ble _0807798E
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_0807798E:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _080779B4 @ =0x0200CD38
	ldrb r0, [r0]
	mov r4, r8
	subs r0, r0, r4
	cmp r5, r0
	blt _0807795E
_0807799E:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _080779B4 @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _0807794C
	bl _0807917A
	.align 2, 0
_080779B4: .4byte 0x0200CD38
_080779B8: .4byte 0x0200CC38
_080779BC:
	movs r1, #0
	mov sl, r1
	ldr r2, _08077A34 @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _080779CE
	bl _0807906C
_080779CE:
	movs r5, #0
	adds r0, r1, #1
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r5, r1
	bge _08077A20
	ldr r2, _08077A38 @ =0x0200CC38
	mov sb, r2
_080779E0:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r3, sb
	adds r6, r0, r3
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitDefense
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r1, sb
	adds r5, r0, r1
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitDefense
	cmp r4, r0
	bge _08077A10
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r2, #1
	mov sl, r2
_08077A10:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08077A34 @ =0x0200CD38
	ldrb r0, [r0]
	mov r3, r8
	subs r0, r0, r3
	cmp r5, r0
	blt _080779E0
_08077A20:
	mov r4, r8
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _08077A34 @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _080779CE
	bl _0807906C
	.align 2, 0
_08077A34: .4byte 0x0200CD38
_08077A38: .4byte 0x0200CC38
_08077A3C:
	cmp r2, #0
	bne _08077AC4
	movs r0, #0
	mov sl, r0
	movs r1, #0
	ldr r3, _08077ABC @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _08077A54
	bl _080790F6
_08077A54:
	movs r5, #0
	adds r0, r1, #1
	ldrb r3, [r3]
	subs r1, r3, r0
	mov r8, r0
	cmp r5, r1
	bge _08077AA6
	ldr r1, _08077AC0 @ =0x0200CC38
	mov sb, r1
_08077A66:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r2, sb
	adds r6, r0, r2
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitResistance
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r3, sb
	adds r5, r0, r3
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitResistance
	cmp r4, r0
	ble _08077A96
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r4, #1
	mov sl, r4
_08077A96:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08077ABC @ =0x0200CD38
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _08077A66
_08077AA6:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _08077ABC @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _08077A54
	bl _080790F6
	.align 2, 0
_08077ABC: .4byte 0x0200CD38
_08077AC0: .4byte 0x0200CC38
_08077AC4:
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r2, _08077B40 @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _08077AD8
	bl _0807917A
_08077AD8:
	movs r5, #0
	adds r0, r1, #1
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r5, r1
	bge _08077B2A
	ldr r4, _08077B44 @ =0x0200CC38
	mov sb, r4
_08077AEA:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, sb
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitResistance
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, sb
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitResistance
	cmp r4, r0
	bge _08077B1A
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_08077B1A:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08077B40 @ =0x0200CD38
	ldrb r0, [r0]
	mov r4, r8
	subs r0, r0, r4
	cmp r5, r0
	blt _08077AEA
_08077B2A:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _08077B40 @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08077AD8
	bl _0807917A
	.align 2, 0
_08077B40: .4byte 0x0200CD38
_08077B44: .4byte 0x0200CC38
_08077B48:
	cmp r2, #0
	bne _08077BF4
	movs r1, #0
	str r1, [sp, #0x48]
	ldr r3, _08077BEC @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	bge _08077BE6
	adds r4, r3, #0
	mov sl, r4
_08077B5E:
	movs r2, #0
	adds r0, r1, #1
	mov r7, sl
	ldrb r7, [r7]
	subs r1, r7, r0
	mov sb, r0
	cmp r2, r1
	bge _08077BD6
	ldr r0, _08077BF0 @ =0x0200CC38
	mov ip, r0
_08077B72:
	adds r1, r2, #1
	mov r8, r1
	lsls r0, r1, #2
	mov r3, ip
	adds r7, r0, r3
	ldr r6, [r7]
	ldr r1, [r6]
	ldr r0, [r1, #4]
	movs r3, #0x11
	ldrsb r3, [r0, r3]
	ldr r0, [r1]
	ldrb r0, [r0, #0x13]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r3, r3, r0
	movs r0, #0x18
	ldrsb r0, [r1, r0]
	adds r3, r3, r0
	lsls r0, r2, #2
	mov r1, ip
	adds r4, r0, r1
	ldr r5, [r4]
	ldr r2, [r5]
	ldr r0, [r2, #4]
	ldrb r0, [r0, #0x11]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r1, [r2]
	ldrb r1, [r1, #0x13]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	movs r1, #0x18
	ldrsb r1, [r2, r1]
	adds r0, r0, r1
	cmp r3, r0
	ble _08077BC4
	str r6, [r4]
	str r5, [r7]
	movs r2, #1
	str r2, [sp, #0x48]
_08077BC4:
	mov r3, r8
	lsls r0, r3, #0x18
	lsrs r2, r0, #0x18
	mov r4, sl
	ldrb r4, [r4]
	mov r7, sb
	subs r0, r4, r7
	cmp r2, r0
	blt _08077B72
_08077BD6:
	mov r1, sb
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _08077BEC @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08077B5E
_08077BE6:
	ldr r3, [sp, #0x48]
	bl _08078F78
	.align 2, 0
_08077BEC: .4byte 0x0200CD38
_08077BF0: .4byte 0x0200CC38
_08077BF4:
	movs r4, #0
	str r4, [sp, #0x4c]
	movs r1, #0
	ldr r7, _08077C94 @ =0x0200CD38
	ldrb r0, [r7]
	subs r0, #1
	cmp r4, r0
	bge _08077C90
	adds r0, r7, #0
	mov sl, r0
_08077C08:
	movs r2, #0
	adds r0, r1, #1
	mov r3, sl
	ldrb r3, [r3]
	subs r1, r3, r0
	mov sb, r0
	cmp r2, r1
	bge _08077C80
	ldr r4, _08077C98 @ =0x0200CC38
	mov ip, r4
_08077C1C:
	adds r7, r2, #1
	mov r8, r7
	lsls r0, r7, #2
	mov r1, ip
	adds r7, r0, r1
	ldr r6, [r7]
	ldr r1, [r6]
	ldr r0, [r1, #4]
	movs r3, #0x11
	ldrsb r3, [r0, r3]
	ldr r0, [r1]
	ldrb r0, [r0, #0x13]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r3, r3, r0
	movs r0, #0x18
	ldrsb r0, [r1, r0]
	adds r3, r3, r0
	lsls r0, r2, #2
	mov r2, ip
	adds r4, r0, r2
	ldr r5, [r4]
	ldr r2, [r5]
	ldr r0, [r2, #4]
	ldrb r0, [r0, #0x11]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r1, [r2]
	ldrb r1, [r1, #0x13]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	adds r0, r0, r1
	movs r1, #0x18
	ldrsb r1, [r2, r1]
	adds r0, r0, r1
	cmp r3, r0
	bge _08077C6E
	str r6, [r4]
	str r5, [r7]
	movs r3, #1
	str r3, [sp, #0x4c]
_08077C6E:
	mov r4, r8
	lsls r0, r4, #0x18
	lsrs r2, r0, #0x18
	mov r7, sl
	ldrb r7, [r7]
	mov r1, sb
	subs r0, r7, r1
	cmp r2, r0
	blt _08077C1C
_08077C80:
	mov r2, sb
	lsls r0, r2, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _08077C94 @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _08077C08
_08077C90:
	ldr r4, [sp, #0x4c]
	b _080780AA
	.align 2, 0
_08077C94: .4byte 0x0200CD38
_08077C98: .4byte 0x0200CC38
_08077C9C:
	cmp r2, #0
	bne _08077D24
	movs r7, #0
	mov sl, r7
	movs r1, #0
	ldr r3, _08077D1C @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _08077CB4
	bl _0807917A
_08077CB4:
	movs r5, #0
	adds r0, r1, #1
	ldrb r3, [r3]
	subs r1, r3, r0
	mov r8, r0
	cmp r5, r1
	bge _08077D06
	ldr r0, _08077D20 @ =0x0200CC38
	mov sb, r0
_08077CC6:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, sb
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitAid
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, sb
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitAid
	cmp r4, r0
	ble _08077CF6
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_08077CF6:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08077D1C @ =0x0200CD38
	ldrb r0, [r0]
	mov r4, r8
	subs r0, r0, r4
	cmp r5, r0
	blt _08077CC6
_08077D06:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _08077D1C @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _08077CB4
	bl _0807917A
	.align 2, 0
_08077D1C: .4byte 0x0200CD38
_08077D20: .4byte 0x0200CC38
_08077D24:
	movs r1, #0
	mov sl, r1
	ldr r2, _08077D9C @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _08077D36
	bl _0807906C
_08077D36:
	movs r5, #0
	adds r0, r1, #1
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r5, r1
	bge _08077D88
	ldr r2, _08077DA0 @ =0x0200CC38
	mov sb, r2
_08077D48:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r3, sb
	adds r6, r0, r3
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitAid
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r1, sb
	adds r5, r0, r1
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitAid
	cmp r4, r0
	bge _08077D78
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r2, #1
	mov sl, r2
_08077D78:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08077D9C @ =0x0200CD38
	ldrb r0, [r0]
	mov r3, r8
	subs r0, r0, r3
	cmp r5, r0
	blt _08077D48
_08077D88:
	mov r4, r8
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _08077D9C @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08077D36
	bl _0807906C
	.align 2, 0
_08077D9C: .4byte 0x0200CD38
_08077DA0: .4byte 0x0200CC38
_08077DA4:
	cmp r2, #0
	bne _08077E2C
	movs r0, #0
	mov sl, r0
	movs r1, #0
	ldr r3, _08077E24 @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _08077DBC
	bl _080790F6
_08077DBC:
	movs r5, #0
	adds r0, r1, #1
	ldrb r3, [r3]
	subs r1, r3, r0
	mov r8, r0
	cmp r5, r1
	bge _08077E0E
	ldr r1, _08077E28 @ =0x0200CC38
	mov sb, r1
_08077DCE:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r2, sb
	adds r6, r0, r2
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitAffinityIcon
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r3, sb
	adds r5, r0, r3
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitAffinityIcon
	cmp r4, r0
	bge _08077DFE
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r4, #1
	mov sl, r4
_08077DFE:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08077E24 @ =0x0200CD38
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _08077DCE
_08077E0E:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r3, _08077E24 @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r1, r0
	blt _08077DBC
	bl _080790F6
	.align 2, 0
_08077E24: .4byte 0x0200CD38
_08077E28: .4byte 0x0200CC38
_08077E2C:
	movs r3, #0
	mov sl, r3
	movs r1, #0
	ldr r2, _08077EA8 @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _08077E40
	bl _0807917A
_08077E40:
	movs r5, #0
	adds r0, r1, #1
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r5, r1
	bge _08077E92
	ldr r4, _08077EAC @ =0x0200CC38
	mov sb, r4
_08077E52:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, sb
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitAffinityIcon
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, sb
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl GetUnitAffinityIcon
	cmp r4, r0
	ble _08077E82
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_08077E82:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08077EA8 @ =0x0200CD38
	ldrb r0, [r0]
	mov r4, r8
	subs r0, r0, r4
	cmp r5, r0
	blt _08077E52
_08077E92:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _08077EA8 @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08077E40
	bl _0807917A
	.align 2, 0
_08077EA8: .4byte 0x0200CD38
_08077EAC: .4byte 0x0200CC38
_08077EB0:
	cmp r2, #0
	beq _08077EB6
	b _08077FB4
_08077EB6:
	movs r1, #0
	str r1, [sp, #0x50]
	movs r4, #0
	ldr r0, _08077EF4 @ =0x0200CD38
	ldrb r0, [r0]
	cmp r2, r0
	bhs _08077EEE
	ldr r5, _08077EF8 @ =0x0200CC38
_08077EC6:
	lsls r0, r4, #2
	adds r0, r0, r5
	ldr r0, [r0]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIid
	mov r2, sp
	adds r1, r2, r4
	strb r0, [r1]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r0, _08077EF4 @ =0x0200CD38
	ldrb r0, [r0]
	cmp r4, r0
	blo _08077EC6
_08077EEE:
	movs r4, #0
	b _08077FA2
	.align 2, 0
_08077EF4: .4byte 0x0200CD38
_08077EF8: .4byte 0x0200CC38
_08077EFC:
	movs r6, #0
	adds r0, r4, #1
	ldrb r1, [r1]
	subs r1, r1, r0
	str r0, [sp, #0x58]
	cmp r6, r1
	bge _08077F9C
	ldr r3, _08077F44 @ =0x0200CC38
	mov sl, r3
_08077F0E:
	adds r0, r6, #1
	mov r4, sp
	adds r4, r4, r0
	mov r8, r4
	mov r7, sp
	adds r5, r7, r6
	ldrb r4, [r4]
	adds r3, r4, #0
	ldrb r2, [r5]
	mov sb, r0
	cmp r3, r2
	bls _08077F48
	adds r1, r2, #0
	strb r4, [r5]
	mov r0, r8
	strb r1, [r0]
	lsls r2, r6, #2
	add r2, sl
	ldr r3, [r2]
	mov r4, sb
	lsls r1, r4, #2
	add r1, sl
	ldr r0, [r1]
	str r0, [r2]
	str r3, [r1]
	b _08077F86
	.align 2, 0
_08077F44: .4byte 0x0200CC38
_08077F48:
	cmp r3, r2
	bne _08077F8A
	mov r1, sb
	lsls r0, r1, #2
	mov r2, sl
	adds r7, r0, r2
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	adds r4, r0, #0
	lsls r0, r6, #2
	mov r3, sl
	adds r6, r0, r3
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r4, r4, #0x10
	lsls r0, r0, #0x10
	cmp r4, r0
	bls _08077F8A
	ldrb r1, [r5]
	mov r4, r8
	ldrb r0, [r4]
	strb r0, [r5]
	strb r1, [r4]
	ldr r3, [r6]
	ldr r0, [r7]
	str r0, [r6]
	str r3, [r7]
_08077F86:
	movs r7, #1
	str r7, [sp, #0x50]
_08077F8A:
	mov r1, sb
	lsls r0, r1, #0x18
	lsrs r6, r0, #0x18
	ldr r0, _08077FB0 @ =0x0200CD38
	ldrb r0, [r0]
	ldr r2, [sp, #0x58]
	subs r0, r0, r2
	cmp r6, r0
	blt _08077F0E
_08077F9C:
	ldr r3, [sp, #0x58]
	lsls r0, r3, #0x18
	lsrs r4, r0, #0x18
_08077FA2:
	ldr r1, _08077FB0 @ =0x0200CD38
	ldrb r0, [r1]
	subs r0, #1
	cmp r4, r0
	blt _08077EFC
	ldr r4, [sp, #0x50]
	b _080780AA
	.align 2, 0
_08077FB0: .4byte 0x0200CD38
_08077FB4:
	movs r7, #0
	str r7, [sp, #0x54]
	movs r4, #0
	ldr r0, _08077FF0 @ =0x0200CD38
	ldrb r0, [r0]
	cmp r7, r0
	bhs _08077FEC
	ldr r5, _08077FF4 @ =0x0200CC38
_08077FC4:
	lsls r0, r4, #2
	adds r0, r0, r5
	ldr r0, [r0]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bl GetItemIid
	mov r2, sp
	adds r1, r2, r4
	strb r0, [r1]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r0, _08077FF0 @ =0x0200CD38
	ldrb r0, [r0]
	cmp r4, r0
	blo _08077FC4
_08077FEC:
	movs r4, #0
	b _0807809E
	.align 2, 0
_08077FF0: .4byte 0x0200CD38
_08077FF4: .4byte 0x0200CC38
_08077FF8:
	movs r6, #0
	adds r0, r4, #1
	ldrb r1, [r1]
	subs r1, r1, r0
	str r0, [sp, #0x5c]
	cmp r6, r1
	bge _08078098
	ldr r3, _08078040 @ =0x0200CC38
	mov sl, r3
_0807800A:
	adds r0, r6, #1
	mov r4, sp
	adds r4, r4, r0
	mov r8, r4
	mov r7, sp
	adds r5, r7, r6
	ldrb r4, [r4]
	adds r3, r4, #0
	ldrb r2, [r5]
	mov sb, r0
	cmp r3, r2
	bhs _08078044
	adds r1, r2, #0
	strb r4, [r5]
	mov r0, r8
	strb r1, [r0]
	lsls r2, r6, #2
	add r2, sl
	ldr r3, [r2]
	mov r4, sb
	lsls r1, r4, #2
	add r1, sl
	ldr r0, [r1]
	str r0, [r2]
	str r3, [r1]
	b _08078082
	.align 2, 0
_08078040: .4byte 0x0200CC38
_08078044:
	cmp r3, r2
	bne _08078086
	mov r1, sb
	lsls r0, r1, #2
	mov r2, sl
	adds r7, r0, r2
	ldr r0, [r7]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	adds r4, r0, #0
	lsls r0, r6, #2
	mov r3, sl
	adds r6, r0, r3
	ldr r0, [r6]
	ldr r0, [r0]
	bl GetUnitEquippedWeapon
	lsls r4, r4, #0x10
	lsls r0, r0, #0x10
	cmp r4, r0
	bhs _08078086
	ldrb r1, [r5]
	mov r4, r8
	ldrb r0, [r4]
	strb r0, [r5]
	strb r1, [r4]
	ldr r3, [r6]
	ldr r0, [r7]
	str r0, [r6]
	str r3, [r7]
_08078082:
	movs r7, #1
	str r7, [sp, #0x54]
_08078086:
	mov r1, sb
	lsls r0, r1, #0x18
	lsrs r6, r0, #0x18
	ldr r0, _080780B8 @ =0x0200CD38
	ldrb r0, [r0]
	ldr r2, [sp, #0x5c]
	subs r0, r0, r2
	cmp r6, r0
	blt _0807800A
_08078098:
	ldr r3, [sp, #0x5c]
	lsls r0, r3, #0x18
	lsrs r4, r0, #0x18
_0807809E:
	ldr r1, _080780B8 @ =0x0200CD38
	ldrb r0, [r1]
	subs r0, #1
	cmp r4, r0
	blt _08077FF8
	ldr r4, [sp, #0x54]
_080780AA:
	cmp r4, #0
	bne _080780B2
	bl _0807918C
_080780B2:
	movs r0, #1
	bl _0807918E
	.align 2, 0
_080780B8: .4byte 0x0200CD38
_080780BC:
	cmp r2, #0
	bne _08078138
	movs r7, #0
	mov ip, r7
	movs r1, #0
	ldr r3, _08078130 @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	bge _0807812A
	adds r4, r3, #0
	mov sl, r4
_080780D4:
	movs r2, #0
	adds r0, r1, #1
	mov r7, sl
	ldrb r7, [r7]
	subs r1, r7, r0
	mov sb, r0
	cmp r2, r1
	bge _0807811A
	mov r8, sb
_080780E6:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r1, _08078134 @ =0x0200CC38
	adds r5, r0, r1
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r1
	ldr r3, [r2]
	movs r7, #4
	ldrsh r1, [r4, r7]
	movs r7, #4
	ldrsh r0, [r3, r7]
	cmp r1, r0
	ble _0807810A
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
_0807810A:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r1, [r1]
	mov r3, r8
	subs r0, r1, r3
	cmp r2, r0
	blt _080780E6
_0807811A:
	mov r4, sb
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r7, _08078130 @ =0x0200CD38
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _080780D4
_0807812A:
	mov r0, ip
	bl _0807917C
	.align 2, 0
_08078130: .4byte 0x0200CD38
_08078134: .4byte 0x0200CC38
_08078138:
	movs r1, #0
	mov ip, r1
	ldr r2, _080781A8 @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp ip, r0
	bge _080781A0
	adds r3, r2, #0
	mov sl, r3
_0807814A:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sl
	ldrb r4, [r4]
	subs r1, r4, r0
	mov sb, r0
	cmp r2, r1
	bge _08078190
	mov r8, sb
_0807815C:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r7, _080781AC @ =0x0200CC38
	adds r5, r0, r7
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r7
	ldr r3, [r2]
	movs r0, #4
	ldrsh r1, [r4, r0]
	movs r7, #4
	ldrsh r0, [r3, r7]
	cmp r1, r0
	bge _08078180
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
_08078180:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r1, [r1]
	mov r3, r8
	subs r0, r1, r3
	cmp r2, r0
	blt _0807815C
_08078190:
	mov r4, sb
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r7, _080781A8 @ =0x0200CD38
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0807814A
_080781A0:
	mov r0, ip
	bl _0807917C
	.align 2, 0
_080781A8: .4byte 0x0200CD38
_080781AC: .4byte 0x0200CC38
_080781B0:
	cmp r2, #0
	bne _0807822C
	movs r1, #0
	mov ip, r1
	ldr r3, _08078224 @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	bge _0807821C
	adds r4, r3, #0
	mov sl, r4
_080781C6:
	movs r2, #0
	adds r0, r1, #1
	mov r7, sl
	ldrb r7, [r7]
	subs r1, r7, r0
	mov sb, r0
	cmp r2, r1
	bge _0807820C
	mov r8, sb
_080781D8:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r1, _08078228 @ =0x0200CC38
	adds r5, r0, r1
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r1
	ldr r3, [r2]
	movs r7, #6
	ldrsh r1, [r4, r7]
	movs r7, #6
	ldrsh r0, [r3, r7]
	cmp r1, r0
	ble _080781FC
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
_080781FC:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r1, [r1]
	mov r3, r8
	subs r0, r1, r3
	cmp r2, r0
	blt _080781D8
_0807820C:
	mov r4, sb
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r7, _08078224 @ =0x0200CD38
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _080781C6
_0807821C:
	mov r0, ip
	bl _0807917C
	.align 2, 0
_08078224: .4byte 0x0200CD38
_08078228: .4byte 0x0200CC38
_0807822C:
	movs r1, #0
	mov ip, r1
	ldr r2, _0807829C @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp ip, r0
	bge _08078294
	adds r3, r2, #0
	mov sl, r3
_0807823E:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sl
	ldrb r4, [r4]
	subs r1, r4, r0
	mov sb, r0
	cmp r2, r1
	bge _08078284
	mov r8, sb
_08078250:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r7, _080782A0 @ =0x0200CC38
	adds r5, r0, r7
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r7
	ldr r3, [r2]
	movs r0, #6
	ldrsh r1, [r4, r0]
	movs r7, #6
	ldrsh r0, [r3, r7]
	cmp r1, r0
	bge _08078274
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
_08078274:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r1, [r1]
	mov r3, r8
	subs r0, r1, r3
	cmp r2, r0
	blt _08078250
_08078284:
	mov r4, sb
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r7, _0807829C @ =0x0200CD38
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _0807823E
_08078294:
	mov r0, ip
	bl _0807917C
	.align 2, 0
_0807829C: .4byte 0x0200CD38
_080782A0: .4byte 0x0200CC38
_080782A4:
	cmp r2, #0
	bne _08078320
	movs r1, #0
	mov ip, r1
	ldr r3, _08078318 @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	bge _08078310
	adds r4, r3, #0
	mov sl, r4
_080782BA:
	movs r2, #0
	adds r0, r1, #1
	mov r7, sl
	ldrb r7, [r7]
	subs r1, r7, r0
	mov sb, r0
	cmp r2, r1
	bge _08078300
	mov r8, sb
_080782CC:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r1, _0807831C @ =0x0200CC38
	adds r5, r0, r1
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r1
	ldr r3, [r2]
	movs r7, #8
	ldrsh r1, [r4, r7]
	movs r7, #8
	ldrsh r0, [r3, r7]
	cmp r1, r0
	ble _080782F0
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
_080782F0:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r1, [r1]
	mov r3, r8
	subs r0, r1, r3
	cmp r2, r0
	blt _080782CC
_08078300:
	mov r4, sb
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r7, _08078318 @ =0x0200CD38
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _080782BA
_08078310:
	mov r0, ip
	bl _0807917C
	.align 2, 0
_08078318: .4byte 0x0200CD38
_0807831C: .4byte 0x0200CC38
_08078320:
	movs r1, #0
	mov ip, r1
	ldr r2, _08078390 @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp ip, r0
	bge _08078388
	adds r3, r2, #0
	mov sl, r3
_08078332:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sl
	ldrb r4, [r4]
	subs r1, r4, r0
	mov sb, r0
	cmp r2, r1
	bge _08078378
	mov r8, sb
_08078344:
	adds r6, r2, #1
	lsls r0, r6, #2
	ldr r7, _08078394 @ =0x0200CC38
	adds r5, r0, r7
	ldr r4, [r5]
	lsls r0, r2, #2
	adds r2, r0, r7
	ldr r3, [r2]
	movs r0, #8
	ldrsh r1, [r4, r0]
	movs r7, #8
	ldrsh r0, [r3, r7]
	cmp r1, r0
	bge _08078368
	str r4, [r2]
	str r3, [r5]
	movs r0, #1
	mov ip, r0
_08078368:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sl
	ldrb r1, [r1]
	mov r3, r8
	subs r0, r1, r3
	cmp r2, r0
	blt _08078344
_08078378:
	mov r4, sb
	lsls r0, r4, #0x18
	lsrs r1, r0, #0x18
	ldr r7, _08078390 @ =0x0200CD38
	ldrb r0, [r7]
	subs r0, #1
	cmp r1, r0
	blt _08078332
_08078388:
	mov r0, ip
	bl _0807917C
	.align 2, 0
_08078390: .4byte 0x0200CD38
_08078394: .4byte 0x0200CC38
_08078398:
	cmp r2, #0
	bne _0807842C
	movs r1, #0
	mov ip, r1
	ldr r3, _08078424 @ =0x0200CD38
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	bge _0807841E
	adds r4, r3, #0
	mov sl, r4
_080783AE:
	movs r3, #0
	adds r0, r1, #1
	mov r7, sl
	ldrb r7, [r7]
	subs r1, r7, r0
	mov r8, r0
	cmp r3, r1
	bge _0807840E
	ldr r0, _08078428 @ =0x0200CC38
	mov sb, r0
_080783C2:
	adds r7, r3, #1
	lsls r0, r7, #2
	mov r1, sb
	adds r6, r0, r1
	ldr r5, [r6]
	ldr r0, [r5]
	movs r2, #0x1a
	ldrsb r2, [r0, r2]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r2, r0
	lsls r0, r3, #2
	adds r3, r0, r1
	ldr r4, [r3]
	ldr r0, [r4]
	movs r1, #0x1a
	ldrsb r1, [r0, r1]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r1, r0
	cmp r2, r1
	ble _080783FE
	str r5, [r3]
	str r4, [r6]
	movs r2, #1
	mov ip, r2
_080783FE:
	lsls r0, r7, #0x18
	lsrs r3, r0, #0x18
	mov r4, sl
	ldrb r4, [r4]
	mov r7, r8
	subs r0, r4, r7
	cmp r3, r0
	blt _080783C2
_0807840E:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _08078424 @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _080783AE
_0807841E:
	mov r3, ip
	bl _08078F78
	.align 2, 0
_08078424: .4byte 0x0200CD38
_08078428: .4byte 0x0200CC38
_0807842C:
	movs r4, #0
	mov ip, r4
	movs r1, #0
	ldr r7, _080784B8 @ =0x0200CD38
	ldrb r0, [r7]
	subs r0, #1
	cmp ip, r0
	bge _080784B0
	adds r0, r7, #0
	mov sl, r0
_08078440:
	movs r3, #0
	adds r0, r1, #1
	mov r2, sl
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r3, r1
	bge _080784A0
	ldr r4, _080784BC @ =0x0200CC38
	mov sb, r4
_08078454:
	adds r7, r3, #1
	lsls r0, r7, #2
	mov r1, sb
	adds r6, r0, r1
	ldr r5, [r6]
	ldr r0, [r5]
	movs r2, #0x1a
	ldrsb r2, [r0, r2]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r2, r2, r0
	lsls r0, r3, #2
	adds r3, r0, r1
	ldr r4, [r3]
	ldr r0, [r4]
	movs r1, #0x1a
	ldrsb r1, [r0, r1]
	ldr r0, [r0, #4]
	ldrb r0, [r0, #0x12]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r1, r1, r0
	cmp r2, r1
	bge _08078490
	str r5, [r3]
	str r4, [r6]
	movs r2, #1
	mov ip, r2
_08078490:
	lsls r0, r7, #0x18
	lsrs r3, r0, #0x18
	mov r4, sl
	ldrb r4, [r4]
	mov r7, r8
	subs r0, r4, r7
	cmp r3, r0
	blt _08078454
_080784A0:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _080784B8 @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08078440
_080784B0:
	mov r3, ip
	bl _08078F78
	.align 2, 0
_080784B8: .4byte 0x0200CD38
_080784BC: .4byte 0x0200CC38
_080784C0:
	cmp r2, #0
	bne _0807854C
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _08078544 @ =0x0200CD38
	mov ip, r7
	mov r3, ip
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _080784DC
	bl _08078F76
_080784DC:
	adds r4, r3, #0
	mov sb, r4
_080784E0:
	movs r2, #0
	adds r0, r1, #1
	mov r7, sb
	ldrb r7, [r7]
	subs r1, r7, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _08078530
	ldr r0, _08078548 @ =0x0200CC38
	mov r8, r0
_080784F4:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r0, [r4]
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r1, r0, #0x1c
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	cmp r1, r0
	bls _08078522
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_08078522:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _080784F4
_08078530:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _080784E0
	bl _08078F76
	.align 2, 0
_08078544: .4byte 0x0200CD38
_08078548: .4byte 0x0200CC38
_0807854C:
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _080785CC @ =0x0200CD38
	mov ip, r7
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _08078564
	bl _08078F76
_08078564:
	adds r3, r2, #0
	mov sb, r3
_08078568:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _080785B8
	ldr r0, _080785D0 @ =0x0200CC38
	mov r8, r0
_0807857C:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r0, [r4]
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r1, r0, #0x1c
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	cmp r1, r0
	bhs _080785AA
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_080785AA:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _0807857C
_080785B8:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08078568
	bl _08078F76
	.align 2, 0
_080785CC: .4byte 0x0200CD38
_080785D0: .4byte 0x0200CC38
_080785D4:
	cmp r2, #0
	bne _080786A0
	movs r4, #0
	mov sb, r4
	movs r3, #0
	ldr r0, _0807860C @ =0x0200CD38
	ldrb r1, [r0]
	cmp r2, r1
	bhs _08078624
	ldr r6, _08078610 @ =0x0200CC38
	adds r2, r1, #0
	movs r5, #0x10
	movs r4, #1
_080785EE:
	lsls r0, r3, #2
	adds r0, r0, r6
	ldr r0, [r0]
	ldr r1, [r0]
	adds r0, r5, #0
	ldrh r1, [r1, #0xc]
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	cmp r1, #0
	beq _08078614
	mov r7, sp
	adds r0, r7, r3
	strb r4, [r0]
	b _0807861A
	.align 2, 0
_0807860C: .4byte 0x0200CD38
_08078610: .4byte 0x0200CC38
_08078614:
	mov r7, sp
	adds r0, r7, r3
	strb r1, [r0]
_0807861A:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, r2
	blo _080785EE
_08078624:
	movs r3, #0
	ldr r1, _08078698 @ =0x0200CD38
	ldrb r0, [r1]
	subs r0, #1
	cmp r3, r0
	bge _08078690
	mov r8, r1
	ldr r2, _0807869C @ =0x0200CC38
	mov ip, r2
	mov sl, r8
_08078638:
	movs r2, #0
	adds r0, r3, #1
	mov r3, r8
	ldrb r3, [r3]
	subs r1, r3, r0
	adds r6, r0, #0
	cmp r2, r1
	bge _08078682
	mov r7, ip
_0807864A:
	adds r5, r2, #1
	mov r0, sp
	adds r4, r0, r5
	adds r1, r0, r2
	ldrb r3, [r4]
	ldrb r0, [r1]
	cmp r3, r0
	bls _08078674
	ldrb r0, [r1]
	strb r3, [r1]
	strb r0, [r4]
	lsls r2, r2, #2
	adds r2, r2, r7
	ldr r3, [r2]
	lsls r1, r5, #2
	adds r1, r1, r7
	ldr r0, [r1]
	str r0, [r2]
	str r3, [r1]
	movs r1, #1
	mov sb, r1
_08078674:
	lsls r0, r5, #0x18
	lsrs r2, r0, #0x18
	mov r3, r8
	ldrb r3, [r3]
	subs r0, r3, r6
	cmp r2, r0
	blt _0807864A
_08078682:
	lsls r0, r6, #0x18
	lsrs r3, r0, #0x18
	mov r4, sl
	ldrb r0, [r4]
	subs r0, #1
	cmp r3, r0
	blt _08078638
_08078690:
	mov r7, sb
	bl _0807906E
	.align 2, 0
_08078698: .4byte 0x0200CD38
_0807869C: .4byte 0x0200CC38
_080786A0:
	movs r0, #0
	mov sb, r0
	movs r3, #0
	ldr r0, _080786D4 @ =0x0200CD38
	ldrb r1, [r0]
	cmp sb, r1
	bhs _080786EC
	ldr r6, _080786D8 @ =0x0200CC38
	adds r2, r1, #0
	movs r5, #0x10
	movs r4, #1
_080786B6:
	lsls r0, r3, #2
	adds r0, r0, r6
	ldr r0, [r0]
	ldr r1, [r0]
	adds r0, r5, #0
	ldrh r1, [r1, #0xc]
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	cmp r1, #0
	beq _080786DC
	mov r1, sp
	adds r0, r1, r3
	strb r4, [r0]
	b _080786E2
	.align 2, 0
_080786D4: .4byte 0x0200CD38
_080786D8: .4byte 0x0200CC38
_080786DC:
	mov r7, sp
	adds r0, r7, r3
	strb r1, [r0]
_080786E2:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, r2
	blo _080786B6
_080786EC:
	movs r3, #0
	ldr r1, _08078760 @ =0x0200CD38
	ldrb r0, [r1]
	subs r0, #1
	cmp r3, r0
	bge _08078758
	mov r8, r1
	ldr r2, _08078764 @ =0x0200CC38
	mov ip, r2
	mov sl, r8
_08078700:
	movs r2, #0
	adds r0, r3, #1
	mov r3, r8
	ldrb r3, [r3]
	subs r1, r3, r0
	adds r6, r0, #0
	cmp r2, r1
	bge _0807874A
	mov r7, ip
_08078712:
	adds r5, r2, #1
	mov r0, sp
	adds r4, r0, r5
	adds r1, r0, r2
	ldrb r3, [r4]
	ldrb r0, [r1]
	cmp r3, r0
	bhs _0807873C
	ldrb r0, [r1]
	strb r3, [r1]
	strb r0, [r4]
	lsls r2, r2, #2
	adds r2, r2, r7
	ldr r3, [r2]
	lsls r1, r5, #2
	adds r1, r1, r7
	ldr r0, [r1]
	str r0, [r2]
	str r3, [r1]
	movs r1, #1
	mov sb, r1
_0807873C:
	lsls r0, r5, #0x18
	lsrs r2, r0, #0x18
	mov r3, r8
	ldrb r3, [r3]
	subs r0, r3, r6
	cmp r2, r0
	blt _08078712
_0807874A:
	lsls r0, r6, #0x18
	lsrs r3, r0, #0x18
	mov r4, sl
	ldrb r0, [r4]
	subs r0, #1
	cmp r3, r0
	blt _08078700
_08078758:
	mov r7, sb
	bl _0807906E
	.align 2, 0
_08078760: .4byte 0x0200CD38
_08078764: .4byte 0x0200CC38
_08078768:
	cmp r2, #0
	bne _080787EC
	movs r0, #0
	mov sl, r0
	movs r1, #0
	ldr r3, _080787E4 @ =0x0200CD38
	mov ip, r3
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _08078782
	bl _08078F76
_08078782:
	adds r4, r3, #0
	mov sb, r4
_08078786:
	movs r2, #0
	adds r0, r1, #1
	mov r7, sb
	ldrb r7, [r7]
	subs r1, r7, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _080787D2
	ldr r0, _080787E8 @ =0x0200CC38
	mov r8, r0
_0807879A:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x26
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x26
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _080787C4
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_080787C4:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _0807879A
_080787D2:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08078786
	b _08078F76
	.align 2, 0
_080787E4: .4byte 0x0200CD38
_080787E8: .4byte 0x0200CC38
_080787EC:
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _08078864 @ =0x0200CD38
	mov ip, r7
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _08078802
	b _08078F76
_08078802:
	adds r3, r2, #0
	mov sb, r3
_08078806:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _08078852
	ldr r0, _08078868 @ =0x0200CC38
	mov r8, r0
_0807881A:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x26
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x26
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bhs _08078844
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_08078844:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _0807881A
_08078852:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08078806
	b _08078F76
	.align 2, 0
_08078864: .4byte 0x0200CD38
_08078868: .4byte 0x0200CC38
_0807886C:
	cmp r2, #0
	bne _080788F0
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _080788E8 @ =0x0200CD38
	mov ip, r7
	mov r3, ip
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _08078886
	b _08078F76
_08078886:
	adds r4, r3, #0
	mov sb, r4
_0807888A:
	movs r2, #0
	adds r0, r1, #1
	mov r7, sb
	ldrb r7, [r7]
	subs r1, r7, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _080788D6
	ldr r0, _080788EC @ =0x0200CC38
	mov r8, r0
_0807889E:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x27
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x27
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _080788C8
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_080788C8:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _0807889E
_080788D6:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _0807888A
	b _08078F76
	.align 2, 0
_080788E8: .4byte 0x0200CD38
_080788EC: .4byte 0x0200CC38
_080788F0:
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _08078968 @ =0x0200CD38
	mov ip, r7
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _08078906
	b _08078F76
_08078906:
	adds r3, r2, #0
	mov sb, r3
_0807890A:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _08078956
	ldr r0, _0807896C @ =0x0200CC38
	mov r8, r0
_0807891E:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x27
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x27
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bhs _08078948
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_08078948:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _0807891E
_08078956:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _0807890A
	b _08078F76
	.align 2, 0
_08078968: .4byte 0x0200CD38
_0807896C: .4byte 0x0200CC38
_08078970:
	cmp r2, #0
	bne _080789F4
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _080789EC @ =0x0200CD38
	mov ip, r7
	mov r3, ip
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _0807898A
	b _08078F76
_0807898A:
	adds r4, r3, #0
	mov sb, r4
_0807898E:
	movs r2, #0
	adds r0, r1, #1
	mov r7, sb
	ldrb r7, [r7]
	subs r1, r7, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _080789DA
	ldr r0, _080789F0 @ =0x0200CC38
	mov r8, r0
_080789A2:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x28
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x28
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _080789CC
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_080789CC:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _080789A2
_080789DA:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _0807898E
	b _08078F76
	.align 2, 0
_080789EC: .4byte 0x0200CD38
_080789F0: .4byte 0x0200CC38
_080789F4:
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _08078A6C @ =0x0200CD38
	mov ip, r7
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _08078A0A
	b _08078F76
_08078A0A:
	adds r3, r2, #0
	mov sb, r3
_08078A0E:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _08078A5A
	ldr r0, _08078A70 @ =0x0200CC38
	mov r8, r0
_08078A22:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x28
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x28
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bhs _08078A4C
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_08078A4C:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _08078A22
_08078A5A:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08078A0E
	b _08078F76
	.align 2, 0
_08078A6C: .4byte 0x0200CD38
_08078A70: .4byte 0x0200CC38
_08078A74:
	cmp r2, #0
	bne _08078AF8
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _08078AF0 @ =0x0200CD38
	mov ip, r7
	mov r3, ip
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _08078A8E
	b _08078F76
_08078A8E:
	adds r4, r3, #0
	mov sb, r4
_08078A92:
	movs r2, #0
	adds r0, r1, #1
	mov r7, sb
	ldrb r7, [r7]
	subs r1, r7, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _08078ADE
	ldr r0, _08078AF4 @ =0x0200CC38
	mov r8, r0
_08078AA6:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x29
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x29
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _08078AD0
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_08078AD0:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _08078AA6
_08078ADE:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08078A92
	b _08078F76
	.align 2, 0
_08078AF0: .4byte 0x0200CD38
_08078AF4: .4byte 0x0200CC38
_08078AF8:
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _08078B70 @ =0x0200CD38
	mov ip, r7
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _08078B0E
	b _08078F76
_08078B0E:
	adds r3, r2, #0
	mov sb, r3
_08078B12:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _08078B5E
	ldr r0, _08078B74 @ =0x0200CC38
	mov r8, r0
_08078B26:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x29
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x29
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bhs _08078B50
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_08078B50:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _08078B26
_08078B5E:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08078B12
	b _08078F76
	.align 2, 0
_08078B70: .4byte 0x0200CD38
_08078B74: .4byte 0x0200CC38
_08078B78:
	cmp r2, #0
	bne _08078BFC
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _08078BF4 @ =0x0200CD38
	mov ip, r7
	mov r3, ip
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _08078B92
	b _08078F76
_08078B92:
	adds r4, r3, #0
	mov sb, r4
_08078B96:
	movs r2, #0
	adds r0, r1, #1
	mov r7, sb
	ldrb r7, [r7]
	subs r1, r7, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _08078BE2
	ldr r0, _08078BF8 @ =0x0200CC38
	mov r8, r0
_08078BAA:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2a
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2a
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _08078BD4
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_08078BD4:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _08078BAA
_08078BE2:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08078B96
	b _08078F76
	.align 2, 0
_08078BF4: .4byte 0x0200CD38
_08078BF8: .4byte 0x0200CC38
_08078BFC:
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _08078C74 @ =0x0200CD38
	mov ip, r7
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _08078C12
	b _08078F76
_08078C12:
	adds r3, r2, #0
	mov sb, r3
_08078C16:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _08078C62
	ldr r0, _08078C78 @ =0x0200CC38
	mov r8, r0
_08078C2A:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2a
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2a
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bhs _08078C54
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_08078C54:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _08078C2A
_08078C62:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08078C16
	b _08078F76
	.align 2, 0
_08078C74: .4byte 0x0200CD38
_08078C78: .4byte 0x0200CC38
_08078C7C:
	cmp r2, #0
	bne _08078D00
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _08078CF8 @ =0x0200CD38
	mov ip, r7
	mov r3, ip
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _08078C96
	b _08078F76
_08078C96:
	adds r4, r3, #0
	mov sb, r4
_08078C9A:
	movs r2, #0
	adds r0, r1, #1
	mov r7, sb
	ldrb r7, [r7]
	subs r1, r7, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _08078CE6
	ldr r0, _08078CFC @ =0x0200CC38
	mov r8, r0
_08078CAE:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2b
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2b
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _08078CD8
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_08078CD8:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _08078CAE
_08078CE6:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08078C9A
	b _08078F76
	.align 2, 0
_08078CF8: .4byte 0x0200CD38
_08078CFC: .4byte 0x0200CC38
_08078D00:
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _08078D78 @ =0x0200CD38
	mov ip, r7
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _08078D16
	b _08078F76
_08078D16:
	adds r3, r2, #0
	mov sb, r3
_08078D1A:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _08078D66
	ldr r0, _08078D7C @ =0x0200CC38
	mov r8, r0
_08078D2E:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2b
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2b
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bhs _08078D58
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_08078D58:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _08078D2E
_08078D66:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08078D1A
	b _08078F76
	.align 2, 0
_08078D78: .4byte 0x0200CD38
_08078D7C: .4byte 0x0200CC38
_08078D80:
	cmp r2, #0
	bne _08078E04
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _08078DFC @ =0x0200CD38
	mov ip, r7
	mov r3, ip
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	blt _08078D9A
	b _08078F76
_08078D9A:
	adds r4, r3, #0
	mov sb, r4
_08078D9E:
	movs r2, #0
	adds r0, r1, #1
	mov r7, sb
	ldrb r7, [r7]
	subs r1, r7, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _08078DEA
	ldr r0, _08078E00 @ =0x0200CC38
	mov r8, r0
_08078DB2:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2c
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2c
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _08078DDC
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_08078DDC:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _08078DB2
_08078DEA:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08078D9E
	b _08078F76
	.align 2, 0
_08078DFC: .4byte 0x0200CD38
_08078E00: .4byte 0x0200CC38
_08078E04:
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _08078E7C @ =0x0200CD38
	mov ip, r7
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	blt _08078E1A
	b _08078F76
_08078E1A:
	adds r3, r2, #0
	mov sb, r3
_08078E1E:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _08078E6A
	ldr r0, _08078E80 @ =0x0200CC38
	mov r8, r0
_08078E32:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2c
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2c
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bhs _08078E5C
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_08078E5C:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _08078E32
_08078E6A:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08078E1E
	b _08078F76
	.align 2, 0
_08078E7C: .4byte 0x0200CD38
_08078E80: .4byte 0x0200CC38
_08078E84:
	cmp r2, #0
	bne _08078F04
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _08078EFC @ =0x0200CD38
	mov ip, r7
	mov r3, ip
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	bge _08078F76
	adds r4, r3, #0
	mov sb, r4
_08078EA0:
	movs r2, #0
	adds r0, r1, #1
	mov r7, sb
	ldrb r7, [r7]
	subs r1, r7, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _08078EEC
	ldr r0, _08078F00 @ =0x0200CC38
	mov r8, r0
_08078EB4:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2d
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2d
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bls _08078EDE
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_08078EDE:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _08078EB4
_08078EEC:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08078EA0
	b _08078F76
	.align 2, 0
_08078EFC: .4byte 0x0200CD38
_08078F00: .4byte 0x0200CC38
_08078F04:
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _08078F84 @ =0x0200CD38
	mov ip, r7
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	bge _08078F76
	adds r3, r2, #0
	mov sb, r3
_08078F1C:
	movs r2, #0
	adds r0, r1, #1
	mov r4, sb
	ldrb r4, [r4]
	subs r1, r4, r0
	adds r7, r0, #0
	cmp r2, r1
	bge _08078F68
	ldr r0, _08078F88 @ =0x0200CC38
	mov r8, r0
_08078F30:
	adds r6, r2, #1
	lsls r0, r6, #2
	mov r1, r8
	adds r5, r0, r1
	ldr r4, [r5]
	ldr r1, [r4]
	adds r1, #0x2d
	lsls r0, r2, #2
	mov r3, r8
	adds r2, r0, r3
	ldr r3, [r2]
	ldr r0, [r3]
	adds r0, #0x2d
	ldrb r1, [r1]
	ldrb r0, [r0]
	cmp r1, r0
	bhs _08078F5A
	str r4, [r2]
	str r3, [r5]
	movs r4, #1
	mov sl, r4
_08078F5A:
	lsls r0, r6, #0x18
	lsrs r2, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	subs r0, r1, r7
	cmp r2, r0
	blt _08078F30
_08078F68:
	lsls r0, r7, #0x18
	lsrs r1, r0, #0x18
	mov r2, ip
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08078F1C
_08078F76:
	mov r3, sl
_08078F78:
	cmp r3, #0
	bne _08078F7E
	b _0807918C
_08078F7E:
	movs r0, #1
	b _0807918E
	.align 2, 0
_08078F84: .4byte 0x0200CD38
_08078F88: .4byte 0x0200CC38
_08078F8C:
	cmp r2, #0
	bne _08079004
	movs r4, #0
	mov sl, r4
	movs r1, #0
	ldr r7, _08078FFC @ =0x0200CD38
	mov ip, r7
	mov r3, ip
	ldrb r0, [r3]
	subs r0, #1
	cmp r2, r0
	bge _0807906C
	adds r4, r3, #0
	mov sb, r4
_08078FA8:
	movs r4, #0
	adds r0, r1, #1
	mov r7, sb
	ldrb r7, [r7]
	subs r1, r7, r0
	mov r8, r0
	cmp r4, r1
	bge _08078FEA
	ldr r6, _08079000 @ =0x0200CC38
	str r0, [sp, #0x60]
_08078FBC:
	adds r5, r4, #1
	lsls r0, r5, #2
	adds r3, r0, r6
	ldr r2, [r3]
	lsls r0, r4, #2
	adds r0, r0, r6
	ldr r1, [r0]
	ldrb r4, [r2, #0xa]
	ldrb r7, [r1, #0xa]
	cmp r4, r7
	bls _08078FDA
	str r2, [r0]
	str r1, [r3]
	movs r0, #1
	mov sl, r0
_08078FDA:
	lsls r0, r5, #0x18
	lsrs r4, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	ldr r2, [sp, #0x60]
	subs r0, r1, r2
	cmp r4, r0
	blt _08078FBC
_08078FEA:
	mov r3, r8
	lsls r0, r3, #0x18
	lsrs r1, r0, #0x18
	mov r4, ip
	ldrb r0, [r4]
	subs r0, #1
	cmp r1, r0
	blt _08078FA8
	b _0807906C
	.align 2, 0
_08078FFC: .4byte 0x0200CD38
_08079000: .4byte 0x0200CC38
_08079004:
	movs r0, #0
	mov sl, r0
	movs r1, #0
	ldr r2, _08079078 @ =0x0200CD38
	mov ip, r2
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	bge _0807906C
	adds r3, r2, #0
	mov sb, r3
_0807901A:
	movs r4, #0
	adds r0, r1, #1
	mov r7, sb
	ldrb r7, [r7]
	subs r1, r7, r0
	mov r8, r0
	cmp r4, r1
	bge _0807905C
	ldr r6, _0807907C @ =0x0200CC38
	str r0, [sp, #0x60]
_0807902E:
	adds r5, r4, #1
	lsls r0, r5, #2
	adds r3, r0, r6
	ldr r2, [r3]
	lsls r0, r4, #2
	adds r0, r0, r6
	ldr r1, [r0]
	ldrb r4, [r2, #0xa]
	ldrb r7, [r1, #0xa]
	cmp r4, r7
	bhs _0807904C
	str r2, [r0]
	str r1, [r3]
	movs r0, #1
	mov sl, r0
_0807904C:
	lsls r0, r5, #0x18
	lsrs r4, r0, #0x18
	mov r1, sb
	ldrb r1, [r1]
	ldr r2, [sp, #0x60]
	subs r0, r1, r2
	cmp r4, r0
	blt _0807902E
_0807905C:
	mov r3, r8
	lsls r0, r3, #0x18
	lsrs r1, r0, #0x18
	mov r4, ip
	ldrb r0, [r4]
	subs r0, #1
	cmp r1, r0
	blt _0807901A
_0807906C:
	mov r7, sl
_0807906E:
	cmp r7, #0
	bne _08079074
	b _0807918C
_08079074:
	movs r0, #1
	b _0807918E
	.align 2, 0
_08079078: .4byte 0x0200CD38
_0807907C: .4byte 0x0200CC38
_08079080:
	cmp r2, #0
	bne _08079108
	movs r0, #0
	mov sl, r0
	movs r1, #0
	ldr r2, _08079100 @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp sl, r0
	bge _080790F6
_08079094:
	movs r5, #0
	adds r0, r1, #1
	ldrb r2, [r2]
	subs r1, r2, r0
	mov r8, r0
	cmp r5, r1
	bge _080790E6
	ldr r1, _08079104 @ =0x0200CC38
	mov sb, r1
_080790A6:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r2, sb
	adds r6, r0, r2
	ldr r0, [r6]
	ldr r0, [r0]
	bl sub_8076D30
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r3, sb
	adds r5, r0, r3
	ldr r0, [r5]
	ldr r0, [r0]
	bl sub_8076D30
	cmp r4, r0
	ble _080790D6
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r4, #1
	mov sl, r4
_080790D6:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08079100 @ =0x0200CD38
	ldrb r0, [r0]
	mov r7, r8
	subs r0, r0, r7
	cmp r5, r0
	blt _080790A6
_080790E6:
	mov r1, r8
	lsls r0, r1, #0x18
	lsrs r1, r0, #0x18
	ldr r2, _08079100 @ =0x0200CD38
	ldrb r0, [r2]
	subs r0, #1
	cmp r1, r0
	blt _08079094
_080790F6:
	mov r2, sl
	cmp r2, #0
	beq _0807918C
	movs r0, #1
	b _0807918E
	.align 2, 0
_08079100: .4byte 0x0200CD38
_08079104: .4byte 0x0200CC38
_08079108:
	movs r3, #0
	mov sl, r3
	movs r2, #0
	ldr r1, _08079184 @ =0x0200CD38
	ldrb r0, [r1]
	subs r0, #1
	cmp sl, r0
	bge _0807917A
_08079118:
	movs r5, #0
	adds r0, r2, #1
	ldrb r1, [r1]
	subs r1, r1, r0
	mov r8, r0
	cmp r5, r1
	bge _0807916A
	ldr r4, _08079188 @ =0x0200CC38
	mov sb, r4
_0807912A:
	adds r7, r5, #1
	lsls r0, r7, #2
	mov r1, sb
	adds r6, r0, r1
	ldr r0, [r6]
	ldr r0, [r0]
	bl sub_8076D30
	adds r4, r0, #0
	lsls r0, r5, #2
	mov r2, sb
	adds r5, r0, r2
	ldr r0, [r5]
	ldr r0, [r0]
	bl sub_8076D30
	cmp r4, r0
	bge _0807915A
	ldr r1, [r5]
	ldr r0, [r6]
	str r0, [r5]
	str r1, [r6]
	movs r3, #1
	mov sl, r3
_0807915A:
	lsls r0, r7, #0x18
	lsrs r5, r0, #0x18
	ldr r0, _08079184 @ =0x0200CD38
	ldrb r0, [r0]
	mov r4, r8
	subs r0, r0, r4
	cmp r5, r0
	blt _0807912A
_0807916A:
	mov r7, r8
	lsls r0, r7, #0x18
	lsrs r2, r0, #0x18
	ldr r1, _08079184 @ =0x0200CD38
	ldrb r0, [r1]
	subs r0, #1
	cmp r2, r0
	blt _08079118
_0807917A:
	mov r0, sl
_0807917C:
	cmp r0, #0
	beq _0807918C
	movs r0, #1
	b _0807918E
	.align 2, 0
_08079184: .4byte 0x0200CD38
_08079188: .4byte 0x0200CC38
_0807918C:
	movs r0, #0
_0807918E:
	add sp, #0x64
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80791A0
sub_80791A0: @ 0x080791A0
	ldr r1, _080791B0 @ =0x0203D494
	movs r2, #0
	adds r0, r1, #4
_080791A6:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge _080791A6
	bx lr
	.align 2, 0
_080791B0: .4byte 0x0203D494

	thumb_func_start sub_80791B4
sub_80791B4: @ 0x080791B4
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	movs r2, #0
	ldr r4, _080791CC @ =0x0203D494
_080791BE:
	adds r1, r2, r4
	ldrb r0, [r1]
	cmp r0, #0
	bne _080791D0
	strb r3, [r1]
	b _080791D6
	.align 2, 0
_080791CC: .4byte 0x0203D494
_080791D0:
	adds r2, #1
	cmp r2, #4
	ble _080791BE
_080791D6:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_80791DC
sub_80791DC: @ 0x080791DC
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	movs r1, #0
	ldr r3, _0807920C @ =0x0203D494
	adds r4, r3, #0
_080791E8:
	adds r0, r1, r3
	ldrb r0, [r0]
	cmp r0, r2
	bne _08079210
	adds r2, r1, #0
	cmp r1, #3
	bgt _08079204
	adds r1, r1, r4
_080791F8:
	ldrb r0, [r1, #1]
	strb r0, [r1]
	adds r1, #1
	adds r2, #1
	cmp r2, #3
	ble _080791F8
_08079204:
	movs r0, #0
	strb r0, [r3, #4]
	b _08079216
	.align 2, 0
_0807920C: .4byte 0x0203D494
_08079210:
	adds r1, #1
	cmp r1, #4
	ble _080791E8
_08079216:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_807921C
sub_807921C: @ 0x0807921C
	push {r4, lr}
	movs r4, #1
_08079220:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _08079242
	ldr r0, [r1]
	cmp r0, #0
	beq _08079242
	ldrh r2, [r1, #0xc]
	movs r0, #8
	ands r0, r2
	cmp r0, #0
	beq _08079242
	movs r0, #4
	orrs r0, r2
	strh r0, [r1, #0xc]
_08079242:
	adds r4, #1
	cmp r4, #0x3f
	ble _08079220
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8079250
sub_8079250: @ 0x08079250
	push {r4, r5, r6, lr}
	movs r1, #0
	strh r1, [r0, #0x30]
	ldr r0, _080792C4 @ =gDispIo
	mov ip, r0
	movs r0, #0x20
	mov r1, ip
	ldrb r1, [r1, #1]
	orrs r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r2, ip
	strb r0, [r2, #1]
	mov r5, ip
	adds r5, #0x34
	subs r1, #0x81
	adds r0, r1, #0
	ldrb r2, [r5]
	ands r0, r2
	movs r6, #3
	rsbs r6, r6, #0
	ands r0, r6
	movs r4, #5
	rsbs r4, r4, #0
	ands r0, r4
	movs r2, #8
	orrs r0, r2
	movs r3, #0x11
	rsbs r3, r3, #0
	ands r0, r3
	strb r0, [r5]
	mov r0, ip
	adds r0, #0x35
	ldrb r5, [r0]
	ands r1, r5
	ands r1, r6
	ands r1, r4
	orrs r1, r2
	ands r1, r3
	strb r1, [r0]
	mov r3, ip
	adds r3, #0x36
	movs r0, #1
	ldrb r1, [r3]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	orrs r0, r2
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r3]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080792C4: .4byte gDispIo

	thumb_func_start sub_80792C8
sub_80792C8: @ 0x080792C8
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldrh r0, [r6, #0x30]
	adds r0, #8
	strh r0, [r6, #0x30]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x3f
	bls _080792DE
	movs r0, #0x40
	strh r0, [r6, #0x30]
_080792DE:
	ldr r0, _08079340 @ =gDispIo
	mov ip, r0
	adds r0, #0x2d
	movs r4, #0x68
	strb r4, [r0]
	mov r1, ip
	adds r1, #0x31
	movs r0, #0x20
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2c
	movs r5, #0xf0
	strb r5, [r0]
	ldrh r2, [r6, #0x30]
	adds r3, r2, #0
	adds r1, r3, #0
	adds r1, #0x20
	adds r0, #4
	strb r1, [r0]
	subs r0, #1
	strb r4, [r0]
	movs r0, #0xa0
	subs r0, r0, r3
	mov r1, ip
	adds r1, #0x33
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2e
	strb r5, [r0]
	subs r1, #1
	movs r0, #0xa0
	strb r0, [r1]
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	cmp r2, #0x40
	bne _0807937C
	adds r0, r6, #0
	bl Proc_Break
	movs r0, #0
	strh r0, [r6, #0x30]
	ldr r0, [r6, #0x14]
	adds r1, r0, #0
	adds r1, #0x2a
	ldrb r0, [r1]
	cmp r0, #0
	bne _08079344
	movs r0, #1
	b _08079346
	.align 2, 0
_08079340: .4byte gDispIo
_08079344:
	movs r0, #0
_08079346:
	strb r0, [r1]
	ldr r0, [r6, #0x14]
	bl sub_807A67C
	ldr r2, _08079384 @ =gDispIo
	movs r0, #0x20
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r1, r2, #0
	adds r1, #0x2d
	movs r0, #0x68
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x20
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
_0807937C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08079384: .4byte gDispIo

	thumb_func_start sub_8079388
sub_8079388: @ 0x08079388
	push {r4, r5, lr}
	adds r5, r0, #0
	ldrh r0, [r5, #0x30]
	adds r0, #8
	strh r0, [r5, #0x30]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x3f
	bls _0807939E
	movs r0, #0x40
	strh r0, [r5, #0x30]
_0807939E:
	ldr r4, _080793EC @ =gDispIo
	adds r1, r4, #0
	adds r1, #0x2d
	movs r0, #0x68
	strb r0, [r1]
	ldrh r2, [r5, #0x30]
	adds r3, r2, #0
	adds r0, r3, #0
	adds r0, #0x20
	adds r1, #4
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	movs r0, #0xa0
	subs r0, r0, r3
	adds r1, #4
	strb r0, [r1]
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	cmp r2, #0x40
	bne _080793E4
	adds r0, r5, #0
	bl Proc_Break
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r4, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r4, #1]
_080793E4:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080793EC: .4byte gDispIo

	thumb_func_start sub_80793F0
sub_80793F0: @ 0x080793F0
	push {lr}
	adds r1, r0, #0
	ldr r0, _08079400 @ =0x08678DE0
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_08079400: .4byte 0x08678DE0

	thumb_func_start sub_8079404
sub_8079404: @ 0x08079404
	ldr r0, [r0]
	ldrb r1, [r0, #4]
	cmp r1, #1
	beq _08079418
	ldr r0, _0807941C @ =gPlaySt
	ldrb r0, [r0, #0xe]
	cmp r0, #0x18
	bne _08079420
	cmp r1, #3
	bne _08079420
_08079418:
	movs r0, #1
	b _08079422
	.align 2, 0
_0807941C: .4byte gPlaySt
_08079420:
	movs r0, #0
_08079422:
	bx lr

	thumb_func_start sub_8079424
sub_8079424: @ 0x08079424
	push {r4, r5, lr}
	sub sp, #8
	adds r4, r0, #0
	ldr r0, _0807957C @ =sub_807C5B8
	ldr r2, _08079580 @ =0x000006AE
	ldr r1, _08079584 @ =0x00000659
	str r1, [sp]
	movs r1, #0
	str r1, [sp, #4]
	movs r3, #0
	bl sub_807CC34
	ldr r0, _08079588 @ =sub_807C7B8
	ldr r2, _0807958C @ =0x000006AF
	ldr r1, _08079590 @ =0x0000065A
	str r1, [sp]
	movs r5, #1
	str r5, [sp, #4]
	movs r1, #0
	movs r3, #0
	bl sub_807CC34
	bl sub_808D0F8
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	beq _0807948A
	adds r1, r4, #0
	adds r1, #0x2c
	adds r0, r5, #0
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _0807948A
	ldr r1, _08079594 @ =gPlaySt
	movs r0, #0x20
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	bne _0807948A
	ldr r0, _08079598 @ =sub_807CB08
	ldr r2, _0807959C @ =0x000006B7
	ldr r1, _080795A0 @ =0x000006A3
	str r1, [sp]
	movs r1, #0xa
	str r1, [sp, #4]
	movs r1, #0
	movs r3, #0
	bl sub_807CC34
_0807948A:
	ldr r1, _080795A4 @ =sub_807C884
	movs r3, #0
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #1
	bne _0807949A
	movs r3, #1
_0807949A:
	ldr r0, _080795A8 @ =0x0000065F
	str r0, [sp]
	movs r0, #5
	str r0, [sp, #4]
	adds r0, r1, #0
	movs r1, #1
	ldr r2, _080795AC @ =0x000006B3
	bl sub_807CC34
	adds r1, r4, #0
	adds r1, #0x2c
	movs r0, #1
	ldrb r2, [r1]
	ands r0, r2
	adds r5, r1, #0
	cmp r0, #0
	bne _08079506
	ldr r1, _08079594 @ =gPlaySt
	movs r0, #0x20
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	bne _080794DC
	ldr r0, _080795B0 @ =sub_807CB78
	ldr r2, _080795B4 @ =0x000006B1
	ldr r1, _080795B8 @ =0x0000065C
	str r1, [sp]
	movs r1, #3
	str r1, [sp, #4]
	movs r1, #0
	movs r3, #0
	bl sub_807CC34
_080794DC:
	ldr r0, _080795BC @ =sub_807CBB0
	ldr r2, _080795C0 @ =0x000006B2
	ldr r1, _080795C4 @ =0x0000065D
	str r1, [sp]
	movs r1, #4
	str r1, [sp, #4]
	movs r1, #0
	movs r3, #0
	bl sub_807CC34
	ldr r0, _080795C8 @ =sub_807C97C
	ldr r2, _080795CC @ =0x000006B4
	movs r1, #0xcc
	lsls r1, r1, #3
	str r1, [sp]
	movs r1, #6
	str r1, [sp, #4]
	movs r1, #1
	movs r3, #0
	bl sub_807CC34
_08079506:
	ldr r0, _080795D0 @ =sub_807C9F4
	ldr r2, _080795D4 @ =0x000006B5
	ldr r1, _080795D8 @ =0x00000661
	str r1, [sp]
	movs r1, #7
	str r1, [sp, #4]
	movs r1, #1
	movs r3, #0
	bl sub_807CC34
	ldr r0, _080795DC @ =sub_807CA48
	ldr r2, _080795E0 @ =0x000006B6
	ldr r1, _080795E4 @ =0x00000662
	str r1, [sp]
	movs r1, #8
	str r1, [sp, #4]
	movs r1, #1
	movs r3, #0
	bl sub_807CC34
	movs r4, #1
	adds r0, r4, #0
	ldrb r1, [r5]
	ands r0, r1
	cmp r0, #0
	bne _08079564
	ldr r1, _08079594 @ =gPlaySt
	movs r0, #0x60
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	bne _0807955A
	ldr r0, _080795E8 @ =sub_807CA9C
	ldr r2, _080795EC @ =0x000006B9
	ldr r1, _080795F0 @ =0x00000663
	str r1, [sp]
	movs r1, #9
	str r1, [sp, #4]
	movs r1, #1
	movs r3, #0
	bl sub_807CC34
_0807955A:
	adds r0, r4, #0
	ldrb r5, [r5]
	ands r0, r5
	cmp r0, #0
	beq _080795FC
_08079564:
	ldr r0, _080795F4 @ =sub_807CBDC
	movs r2, #0xd6
	lsls r2, r2, #3
	ldr r1, _080795F8 @ =0x000006F1
	str r1, [sp]
	movs r1, #0xc
	str r1, [sp, #4]
	movs r1, #0
	movs r3, #0
	bl sub_807CC34
	b _08079610
	.align 2, 0
_0807957C: .4byte sub_807C5B8
_08079580: .4byte 0x000006AE
_08079584: .4byte 0x00000659
_08079588: .4byte sub_807C7B8
_0807958C: .4byte 0x000006AF
_08079590: .4byte 0x0000065A
_08079594: .4byte gPlaySt
_08079598: .4byte sub_807CB08
_0807959C: .4byte 0x000006B7
_080795A0: .4byte 0x000006A3
_080795A4: .4byte sub_807C884
_080795A8: .4byte 0x0000065F
_080795AC: .4byte 0x000006B3
_080795B0: .4byte sub_807CB78
_080795B4: .4byte 0x000006B1
_080795B8: .4byte 0x0000065C
_080795BC: .4byte sub_807CBB0
_080795C0: .4byte 0x000006B2
_080795C4: .4byte 0x0000065D
_080795C8: .4byte sub_807C97C
_080795CC: .4byte 0x000006B4
_080795D0: .4byte sub_807C9F4
_080795D4: .4byte 0x000006B5
_080795D8: .4byte 0x00000661
_080795DC: .4byte sub_807CA48
_080795E0: .4byte 0x000006B6
_080795E4: .4byte 0x00000662
_080795E8: .4byte sub_807CA9C
_080795EC: .4byte 0x000006B9
_080795F0: .4byte 0x00000663
_080795F4: .4byte sub_807CBDC
_080795F8: .4byte 0x000006F1
_080795FC:
	ldr r0, _08079618 @ =sub_807CBDC
	ldr r2, _0807961C @ =0x000006BA
	ldr r1, _08079620 @ =0x0000065E
	str r1, [sp]
	movs r1, #0xc
	str r1, [sp, #4]
	movs r1, #0
	movs r3, #0
	bl sub_807CC34
_08079610:
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08079618: .4byte sub_807CBDC
_0807961C: .4byte 0x000006BA
_08079620: .4byte 0x0000065E

	thumb_func_start sub_8079624
sub_8079624: @ 0x08079624
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r5, r0, #0
	adds r7, r1, #0
	adds r0, r7, #0
	adds r0, #0x50
	movs r2, #8
	ldrsb r2, [r5, r2]
	movs r1, #2
	bl PutNumberOrBlank
	adds r0, r7, #0
	adds r0, #0x56
	ldrb r2, [r5, #9]
	movs r1, #2
	bl PutNumberOrBlank
	adds r4, r7, #0
	adds r4, #0xd6
	adds r0, r5, #0
	bl GetUnitCurrentHp
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	bl PutNumberOrBlank
	subs r4, #6
	adds r0, r5, #0
	bl GetUnitMaxHp
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	bl PutNumberOrBlank
	ldr r0, [r5]
	ldrh r0, [r0]
	bl DecodeMsg
	bl GetStringTextLen
	movs r4, #0x38
	subs r4, r4, r0
	asrs r4, r4, #1
	ldr r6, _080796AC @ =0x0200E89C
	adds r0, r6, #0
	bl ClearText
	ldr r0, [r5]
	ldrh r0, [r0]
	bl DecodeMsg
	movs r2, #0xa3
	lsls r2, r2, #1
	adds r1, r7, r2
	movs r2, #0
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r6, #0
	adds r3, r4, #0
	bl PutDrawText
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080796AC: .4byte 0x0200E89C

	thumb_func_start sub_80796B0
sub_80796B0: @ 0x080796B0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov sb, r0
	ldr r0, _0807978C @ =0x08320FCE
	mov r8, r0
	ldr r4, _08079790 @ =0x0200E8A4
	adds r0, r4, #0
	movs r1, #0x1d
	movs r2, #0x1d
	movs r3, #0
	bl TmFillRect_t
	movs r1, #0
	ldr r2, _08079794 @ =0x0200E89C
	mov sl, r2
	mov ip, r4
	movs r6, #0x1a
	movs r3, #0x80
	lsls r3, r3, #5
	adds r4, r3, #0
_080796E0:
	adds r0, r1, #0
	adds r0, #0xa
	adds r5, r1, #1
	movs r7, #7
	subs r1, r7, r1
	muls r1, r6, r1
	add r1, r8
	lsls r0, r0, #6
	mov r3, ip
	adds r2, r0, r3
	movs r3, #0xc
_080796F6:
	ldrh r7, [r1]
	adds r0, r4, r7
	strh r0, [r2]
	adds r1, #2
	adds r2, #2
	subs r3, #1
	cmp r3, #0
	bge _080796F6
	adds r1, r5, #0
	cmp r1, #7
	ble _080796E0
	movs r4, #0
	mov r0, sl
	bl ClearText
	ldr r5, _08079798 @ =0x0200E976
	adds r0, r5, #0
	movs r1, #3
	movs r2, #0x16
	bl PutSpecialChar
	adds r0, r5, #0
	subs r0, #8
	movs r1, #3
	movs r2, #0x22
	bl PutSpecialChar
	subs r0, r5, #6
	movs r1, #3
	movs r2, #0x23
	bl PutSpecialChar
	adds r0, r5, #0
	subs r0, #0x88
	movs r1, #3
	movs r2, #0x24
	bl PutSpecialChar
	adds r0, r5, #0
	subs r0, #0x86
	movs r1, #3
	movs r2, #0x25
	bl PutSpecialChar
	adds r0, r5, #0
	subs r0, #0x80
	movs r1, #3
	movs r2, #0x1f
	bl PutSpecialChar
	adds r1, r5, #0
	subs r1, #0xd2
	mov r0, sb
	bl sub_8079624
	mov r0, sb
	bl GetUnitFid
	adds r1, r5, #0
	subs r1, #0x90
	movs r2, #0x8c
	lsls r2, r2, #2
	str r4, [sp]
	movs r3, #2
	bl PutFaceChibi
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807978C: .4byte 0x08320FCE
_08079790: .4byte 0x0200E8A4
_08079794: .4byte 0x0200E89C
_08079798: .4byte 0x0200E976

	thumb_func_start sub_807979C
sub_807979C: @ 0x0807979C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r6, [r5, #0x48]
	ldr r4, _080797D8 @ =0x02021B56
	adds r0, r4, #0
	movs r1, #1
	movs r2, #3
	movs r3, #0
	bl TmFillRect_t
	adds r0, r4, #6
	movs r1, #1
	movs r2, #3
	movs r3, #0
	bl TmFillRect_t
	subs r4, #0x4e
	adds r0, r6, #0
	adds r1, r4, #0
	bl sub_8079624
	movs r0, #1
	bl EnableBgSync
	adds r0, r5, #0
	bl Proc_Break
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080797D8: .4byte 0x02021B56

	thumb_func_start sub_80797DC
sub_80797DC: @ 0x080797DC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080797FC @ =0x08678E00
	adds r1, r4, #0
	bl SpawnProc
	ldr r2, _08079800 @ =0x0200E6D4
	adds r4, #0x30
	ldrb r4, [r4]
	lsls r1, r4, #2
	adds r1, r1, r2
	ldr r1, [r1]
	str r1, [r0, #0x48]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080797FC: .4byte 0x08678E00
_08079800: .4byte 0x0200E6D4

	thumb_func_start sub_8079804
sub_8079804: @ 0x08079804
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov sb, r0
	ldr r4, _080798D8 @ =0x02021BDA
	adds r0, r4, #0
	movs r1, #3
	movs r2, #0x16
	bl PutSpecialChar
	adds r0, r4, #0
	subs r0, #8
	movs r1, #3
	movs r2, #0x22
	bl PutSpecialChar
	subs r0, r4, #6
	movs r1, #3
	movs r2, #0x23
	bl PutSpecialChar
	adds r0, r4, #0
	subs r0, #0x88
	movs r1, #3
	movs r2, #0x24
	bl PutSpecialChar
	adds r0, r4, #0
	subs r0, #0x86
	movs r1, #3
	movs r2, #0x25
	bl PutSpecialChar
	subs r4, #0x80
	adds r0, r4, #0
	movs r1, #3
	movs r2, #0x1f
	bl PutSpecialChar
	movs r1, #0
	ldr r0, _080798DC @ =0x0200E6D4
	mov sl, r0
	mov r2, sb
	adds r2, #0x30
	str r2, [sp, #4]
	ldr r3, _080798E0 @ =gBg1Tm
	mov r8, r3
	movs r6, #7
	mov ip, r6
	movs r7, #0x1a
	movs r0, #0x80
	lsls r0, r0, #5
	adds r5, r0, #0
_08079874:
	lsls r0, r1, #6
	adds r4, r1, #1
	mov r2, ip
	subs r1, r2, r1
	muls r1, r7, r1
	ldr r3, _080798E4 @ =0x08320FCE
	adds r1, r1, r3
	mov r6, r8
	adds r2, r0, r6
	movs r3, #0xc
_08079888:
	ldrh r6, [r1]
	adds r0, r5, r6
	strh r0, [r2]
	adds r1, #2
	adds r2, #2
	subs r3, #1
	cmp r3, #0
	bge _08079888
	adds r1, r4, #0
	cmp r1, #7
	ble _08079874
	movs r4, #0
	ldr r1, [sp, #4]
	ldrb r1, [r1]
	lsls r0, r1, #2
	add r0, sl
	ldr r0, [r0]
	bl GetUnitFid
	ldr r1, _080798E8 @ =0x02021B4A
	movs r2, #0x8c
	lsls r2, r2, #2
	str r4, [sp]
	movs r3, #2
	bl PutFaceChibi
	mov r0, sb
	bl sub_80797DC
	movs r0, #3
	bl EnableBgSync
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080798D8: .4byte 0x02021BDA
_080798DC: .4byte 0x0200E6D4
_080798E0: .4byte gBg1Tm
_080798E4: .4byte 0x08320FCE
_080798E8: .4byte 0x02021B4A

	thumb_func_start sub_80798EC
sub_80798EC: @ 0x080798EC
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r1, _08079920 @ =0x0200E6D4
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	bl GetUnitFid
	ldr r1, _08079924 @ =0x02021B4A
	movs r2, #0x8c
	lsls r2, r2, #2
	movs r3, #0
	str r3, [sp]
	movs r3, #2
	bl PutFaceChibi
	adds r0, r4, #0
	bl sub_80797DC
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08079920: .4byte 0x0200E6D4
_08079924: .4byte 0x02021B4A

	thumb_func_start sub_8079928
sub_8079928: @ 0x08079928
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r3, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r3, r0
	bhs _08079A0A
	ldr r4, _0807995C @ =0x0200E6D4
	adds r5, r7, #0
	adds r5, #0x36
	adds r6, r7, #0
	adds r6, #0x44
_08079948:
	cmp r2, #0
	beq _08079960
	lsls r0, r3, #2
	adds r0, r0, r4
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	cmp r0, r1
	beq _08079970
	b _080799FA
	.align 2, 0
_0807995C: .4byte 0x0200E6D4
_08079960:
	lsls r0, r3, #2
	adds r0, r0, r4
	ldr r0, [r0]
	ldrb r0, [r0, #0xb]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, r1
	bne _080799FA
_08079970:
	adds r0, r7, #0
	adds r0, #0x30
	movs r1, #0
	mov r8, r1
	strb r3, [r0]
	lsrs r0, r3, #1
	adds r2, r0, #0
	adds r4, r2, #0
	cmp r2, #0
	bne _0807998A
	strb r2, [r5]
	strh r2, [r6]
	b _08079A0A
_0807998A:
	movs r0, #0x2d
	adds r0, r0, r7
	mov ip, r0
	ldrb r3, [r0]
	subs r0, r3, #1
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	cmp r2, r0
	bne _080799C0
	cmp r3, #0xe
	bhi _080799AA
	strb r4, [r5]
	mov r1, r8
	strh r1, [r6]
	b _08079A0A
_080799AA:
	movs r0, #6
	strb r0, [r5]
	mov r1, ip
	ldrb r0, [r1]
	subs r0, #0xd
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	lsls r0, r0, #4
	strh r0, [r6]
	b _08079A0A
_080799C0:
	ldrh r6, [r6]
	lsrs r1, r6, #4
	adds r0, r1, #0
	cmp r2, r0
	bls _080799D6
	adds r0, #6
	cmp r2, r0
	bge _080799D6
	subs r0, r4, r1
	strb r0, [r5]
	b _08079A0A
_080799D6:
	adds r3, r7, #0
	adds r3, #0x44
	ldrh r0, [r3]
	lsrs r2, r0, #4
	adds r0, r4, #0
	subs r1, r0, #1
	cmp r2, r1
	ble _080799EA
	movs r0, #1
	b _080799F2
_080799EA:
	subs r1, r0, #5
	cmp r2, r1
	bge _08079A0A
	movs r0, #5
_080799F2:
	strb r0, [r5]
	lsls r0, r1, #4
	strh r0, [r3]
	b _08079A0A
_080799FA:
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	adds r0, r7, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r3, r0
	blo _08079948
_08079A0A:
	adds r0, r7, #0
	adds r0, #0x44
	ldrh r2, [r0]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8079A28
sub_8079A28: @ 0x08079A28
	push {r4, lr}
	ldr r0, _08079A90 @ =0x0200F0A4
	bl UnitRearrangeInit
	movs r4, #1
_08079A32:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _08079A54
	ldr r0, [r1]
	cmp r0, #0
	beq _08079A54
	movs r0, #0xc
	ldrh r2, [r1, #0xc]
	ands r0, r2
	cmp r0, #0
	bne _08079A54
	adds r0, r1, #0
	bl UnitRearrangeAdd
_08079A54:
	adds r4, #1
	cmp r4, #0x3f
	ble _08079A32
	movs r4, #1
_08079A5C:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _08079A7E
	ldr r0, [r1]
	cmp r0, #0
	beq _08079A7E
	movs r0, #0xc
	ldrh r2, [r1, #0xc]
	ands r0, r2
	cmp r0, #0
	beq _08079A7E
	adds r0, r1, #0
	bl UnitRearrangeAdd
_08079A7E:
	adds r4, #1
	cmp r4, #0x3f
	ble _08079A5C
	bl UnitRearrangeApply
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08079A90: .4byte 0x0200F0A4

	thumb_func_start sub_8079A94
sub_8079A94: @ 0x08079A94
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r4, r6, #0
	adds r4, #0x35
	ldrb r0, [r4]
	bl sub_807CD24
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldrb r0, [r4]
	cmp r0, #0
	bne _08079B30
	adds r0, r6, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	bne _08079AC2
	movs r0, #0xc
	movs r1, #1
	bl sub_807CEF0
	b _08079ACA
_08079AC2:
	movs r0, #0xc
	movs r1, #0
	bl sub_807CEF0
_08079ACA:
	ldr r4, _08079B24 @ =gBg0Tm
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #0x13
	movs r3, #0
	bl TmFillRect_t
	ldr r0, _08079B28 @ =gBg1Tm
	movs r1, #0xc
	movs r2, #0x13
	movs r3, #0
	bl TmFillRect_t
	lsls r3, r7, #1
	adds r3, #2
	movs r0, #0
	str r0, [sp]
	movs r1, #4
	movs r2, #0xc
	bl sub_8041358
	ldr r0, _08079B2C @ =0x0200E864
	movs r1, #0xa2
	lsls r1, r1, #1
	adds r4, r4, r1
	movs r1, #0
	adds r2, r4, #0
	adds r3, r7, #0
	bl sub_807CD5C
	adds r1, r6, #0
	adds r1, #0x35
	adds r0, r6, #0
	adds r0, #0x33
	ldrb r1, [r1]
	adds r0, r1, r0
	ldrb r0, [r0]
	lsls r1, r0, #1
	adds r1, #5
	movs r0, #1
	movs r2, #0xa
	bl sub_804169C
	b _08079BAE
	.align 2, 0
_08079B24: .4byte gBg0Tm
_08079B28: .4byte gBg1Tm
_08079B2C: .4byte 0x0200E864
_08079B30:
	ldr r1, _08079B50 @ =0x0200E6D4
	adds r0, r6, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	bl GetUnitItemCount
	cmp r0, #0
	ble _08079B54
	movs r0, #6
	movs r1, #0
	bl sub_807CEF0
	b _08079B5C
	.align 2, 0
_08079B50: .4byte 0x0200E6D4
_08079B54:
	movs r0, #6
	movs r1, #1
	bl sub_807CEF0
_08079B5C:
	ldr r4, _08079BBC @ =0x02021D08
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #0xb
	movs r3, #0
	bl TmFillRect_t
	ldr r0, _08079BC0 @ =0x02022508
	movs r1, #0xc
	movs r2, #0xb
	movs r3, #0
	bl TmFillRect_t
	lsls r3, r7, #1
	adds r3, #2
	movs r0, #0
	str r0, [sp]
	movs r1, #8
	movs r2, #0xd
	bl sub_8041358
	ldr r0, _08079BC4 @ =0x0200E864
	adds r5, r6, #0
	adds r5, #0x35
	ldrb r1, [r5]
	adds r4, #0x44
	adds r2, r4, #0
	adds r3, r7, #0
	bl sub_807CD5C
	adds r0, r6, #0
	adds r0, #0x33
	ldrb r5, [r5]
	adds r0, r5, r0
	ldrb r0, [r0]
	lsls r1, r0, #1
	adds r1, #9
	movs r0, #1
	movs r2, #0xa
	bl sub_804169C
_08079BAE:
	movs r0, #3
	bl EnableBgSync
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08079BBC: .4byte 0x02021D08
_08079BC0: .4byte 0x02022508
_08079BC4: .4byte 0x0200E864

	thumb_func_start sub_8079BC8
sub_8079BC8: @ 0x08079BC8
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r0, [r5, #0x14]
	str r0, [r5, #0x30]
	ldr r1, _08079C30 @ =0x0200E6D4
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	str r0, [r5, #0x2c]
	ldr r0, _08079C34 @ =0x02021D08
	movs r1, #0xc
	movs r2, #0xb
	movs r3, #0
	bl TmFillRect_t
	movs r4, #0
	str r4, [sp]
	movs r0, #0
	movs r1, #8
	movs r2, #0xd
	movs r3, #0xc
	bl sub_8041358
	movs r0, #3
	bl EnableBgSync
	adds r0, r5, #0
	adds r0, #0x34
	strb r4, [r0]
	ldr r0, [r5, #0x2c]
	bl GetUnitItemCount
	adds r4, r5, #0
	adds r4, #0x35
	strb r0, [r4]
	bl ClearIcons
	ldrb r1, [r4]
	cmp r1, #0
	bne _08079C28
	ldr r0, [r5, #0x30]
	str r1, [r0, #0x5c]
	adds r0, r5, #0
	bl Proc_End
_08079C28:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08079C30: .4byte 0x0200E6D4
_08079C34: .4byte 0x02021D08

	thumb_func_start sub_8079C38
sub_8079C38: @ 0x08079C38
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	movs r0, #0
	mov sb, r0
	adds r5, r6, #0
	adds r5, #0x34
	ldr r1, _08079D48 @ =0x0200E864
	mov r8, r1
	ldr r2, _08079D4C @ =0x02021B0A
	mov sl, r2
_08079C54:
	ldrb r1, [r5]
	lsls r0, r1, #3
	add r0, r8
	bl ClearText
	ldrb r2, [r5]
	lsls r1, r2, #1
	adds r4, r1, #0
	adds r4, #9
	lsls r4, r4, #6
	add r4, sl
	ldr r0, [r6, #0x2c]
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r0, [r0]
	bl GetItemIcon
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0x80
	lsls r2, r2, #7
	bl PutIcon
	ldrb r2, [r5]
	lsls r0, r2, #3
	mov r1, r8
	adds r4, r0, r1
	ldr r0, [r6, #0x2c]
	lsls r2, r2, #1
	adds r1, r0, #0
	adds r1, #0x1c
	adds r1, r1, r2
	ldrh r1, [r1]
	bl IsItemDisplayUseable
	movs r1, #0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08079CA4
	movs r1, #1
_08079CA4:
	adds r0, r4, #0
	bl Text_SetColor
	ldrb r2, [r5]
	lsls r0, r2, #3
	add r0, r8
	movs r1, #0
	bl Text_SetCursor
	ldrb r1, [r5]
	lsls r4, r1, #3
	add r4, r8
	ldr r0, [r6, #0x2c]
	lsls r1, r1, #1
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r0, [r0]
	bl GetItemName
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	ldrb r1, [r5]
	lsls r0, r1, #3
	add r0, r8
	lsls r1, r1, #7
	add r1, sl
	movs r2, #0x91
	lsls r2, r2, #2
	adds r1, r1, r2
	bl PutText
	ldrb r0, [r5]
	lsls r2, r0, #1
	adds r0, r2, #0
	adds r0, #9
	lsls r0, r0, #6
	ldr r1, _08079D50 @ =0x02021B1E
	adds r7, r0, r1
	ldr r0, [r6, #0x2c]
	adds r1, r0, #0
	adds r1, #0x1c
	adds r1, r1, r2
	ldrh r1, [r1]
	bl IsItemDisplayUseable
	lsls r0, r0, #0x18
	movs r4, #1
	cmp r0, #0
	beq _08079D0C
	movs r4, #2
_08079D0C:
	ldr r0, [r6, #0x2c]
	ldrb r2, [r5]
	lsls r1, r2, #1
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r0, [r0]
	bl GetItemUses
	adds r2, r0, #0
	adds r0, r7, #0
	adds r1, r4, #0
	bl PutNumberOrBlank
	ldrb r0, [r5]
	adds r0, #1
	movs r2, #0
	strb r0, [r5]
	adds r1, r6, #0
	adds r1, #0x35
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldrb r1, [r1]
	cmp r0, r1
	blo _08079D54
	ldr r0, [r6, #0x30]
	str r2, [r0, #0x5c]
	adds r0, r6, #0
	bl Proc_Break
	b _08079D60
	.align 2, 0
_08079D48: .4byte 0x0200E864
_08079D4C: .4byte 0x02021B0A
_08079D50: .4byte 0x02021B1E
_08079D54:
	movs r0, #1
	add sb, r0
	mov r1, sb
	cmp r1, #4
	bgt _08079D60
	b _08079C54
_08079D60:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8079D70
sub_8079D70: @ 0x08079D70
	push {lr}
	adds r1, r0, #0
	ldr r0, _08079D80 @ =0x08678E18
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
_08079D80: .4byte 0x08678E18

	thumb_func_start sub_8079D84
sub_8079D84: @ 0x08079D84
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r4, r0, #0
	ldr r5, _08079E90 @ =0x0200E6D4
	adds r4, #0x30
	ldrb r1, [r4]
	lsls r0, r1, #2
	adds r0, r0, r5
	ldr r0, [r0]
	mov sb, r0
	ldr r7, _08079E94 @ =0x02021D08
	adds r0, r7, #0
	movs r1, #0xc
	movs r2, #0xb
	movs r3, #0
	bl TmFillRect_t
	movs r0, #0
	str r0, [sp]
	movs r1, #8
	movs r2, #0xd
	movs r3, #0xc
	bl sub_8041358
	ldrb r4, [r4]
	lsls r0, r4, #2
	adds r0, r0, r5
	ldr r0, [r0]
	bl GetUnitItemCount
	mov sl, r0
	bl ClearIcons
	movs r6, #0
	cmp r6, sl
	bge _08079E78
	movs r0, #0x56
	adds r0, r0, r7
	mov r8, r0
	adds r7, #0x42
	movs r1, #0x90
	lsls r1, r1, #2
	str r1, [sp, #4]
_08079DE2:
	lsls r1, r6, #3
	ldr r0, _08079E98 @ =0x0200E864
	adds r4, r1, r0
	adds r0, r4, #0
	bl ClearText
	lsls r1, r6, #1
	mov r0, sb
	adds r0, #0x1c
	adds r5, r0, r1
	ldrh r0, [r5]
	bl GetItemIcon
	adds r1, r0, #0
	adds r0, r7, #0
	movs r2, #0x80
	lsls r2, r2, #7
	bl PutIcon
	ldrh r1, [r5]
	mov r0, sb
	bl IsItemDisplayUseable
	movs r1, #0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08079E1A
	movs r1, #1
_08079E1A:
	adds r0, r4, #0
	bl Text_SetColor
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetCursor
	ldrh r0, [r5]
	bl GetItemName
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	ldr r1, _08079E9C @ =0x02021B0A
	adds r1, #4
	ldr r0, [sp, #4]
	adds r1, r0, r1
	adds r0, r4, #0
	bl PutText
	ldrh r1, [r5]
	mov r0, sb
	bl IsItemDisplayUseable
	lsls r0, r0, #0x18
	movs r4, #1
	cmp r0, #0
	beq _08079E56
	movs r4, #2
_08079E56:
	ldrh r0, [r5]
	bl GetItemUses
	adds r2, r0, #0
	mov r0, r8
	adds r1, r4, #0
	bl PutNumberOrBlank
	movs r1, #0x80
	add r8, r1
	adds r7, #0x80
	ldr r0, [sp, #4]
	adds r0, #0x80
	str r0, [sp, #4]
	adds r6, #1
	cmp r6, sl
	blt _08079DE2
_08079E78:
	movs r0, #3
	bl EnableBgSync
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08079E90: .4byte 0x0200E6D4
_08079E94: .4byte 0x02021D08
_08079E98: .4byte 0x0200E864
_08079E9C: .4byte 0x02021B0A

	thumb_func_start sub_8079EA0
sub_8079EA0: @ 0x08079EA0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r4, _08079F3C @ =0x0200E7DC
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	ldr r1, _08079F40 @ =0x08327254
	adds r0, r4, #0
	bl Text_DrawString
	adds r0, r4, #0
	movs r1, #0x18
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #2
	bl Text_SetColor
	adds r6, r5, #0
	adds r6, #0x2e
	adds r5, #0x2f
	ldrb r0, [r6]
	ldrb r5, [r5]
	subs r1, r0, r5
	adds r0, r4, #0
	bl Text_DrawNumberOrBlank
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	adds r0, r4, #0
	movs r1, #0x20
	bl Text_SetCursor
	ldr r1, _08079F44 @ =0x0832725C
	adds r0, r4, #0
	bl Text_DrawString
	adds r0, r4, #0
	movs r1, #0x28
	bl Text_SetCursor
	ldr r1, _08079F48 @ =0x08327260
	adds r0, r4, #0
	bl Text_DrawString
	adds r0, r4, #0
	movs r1, #0x38
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #2
	bl Text_SetColor
	ldrb r1, [r6]
	adds r0, r4, #0
	bl Text_DrawNumberOrBlank
	ldr r1, _08079F4C @ =0x02021B72
	adds r0, r4, #0
	bl PutText
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08079F3C: .4byte 0x0200E7DC
_08079F40: .4byte 0x08327254
_08079F44: .4byte 0x0832725C
_08079F48: .4byte 0x08327260
_08079F4C: .4byte 0x02021B72

	thumb_func_start sub_8079F50
sub_8079F50: @ 0x08079F50
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov sl, r0
	lsls r1, r1, #0x19
	lsrs r7, r1, #0x18
	movs r0, #0xf
	ands r0, r7
	str r0, [sp]
	movs r0, #0x1f
	ands r0, r7
	lsls r0, r0, #6
	ldr r1, _08079FD4 @ =gBg2Tm
	adds r0, r0, r1
	movs r1, #0xf
	movs r2, #1
	movs r3, #0
	bl TmFillRect_t
	movs r1, #0
	mov r8, r1
	mov r0, sl
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r7, r0
	bge _0807A05C
	ldr r2, _08079FD8 @ =0x0200E7E4
	mov sb, r2
_08079F8E:
	ldr r4, [sp]
	add r4, r8
	lsls r0, r4, #3
	mov r1, sb
	adds r5, r0, r1
	adds r0, r5, #0
	bl ClearText
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetCursor
	mov r1, sl
	adds r1, #0x2c
	movs r0, #1
	ldrb r1, [r1]
	ands r0, r1
	mov r2, r8
	adds r6, r7, r2
	cmp r0, #0
	bne _08079FE0
	lsls r0, r6, #2
	ldr r1, _08079FDC @ =0x0200E6D4
	adds r0, r0, r1
	ldr r0, [r0]
	bl sub_8079404
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08079FE0
	adds r0, r5, #0
	movs r1, #4
	bl Text_SetColor
	b _0807A00E
	.align 2, 0
_08079FD4: .4byte gBg2Tm
_08079FD8: .4byte 0x0200E7E4
_08079FDC: .4byte 0x0200E6D4
_08079FE0:
	lsls r0, r6, #2
	ldr r2, _0807A000 @ =0x0200E6D4
	adds r0, r0, r2
	ldr r1, [r0]
	movs r0, #8
	ldrh r1, [r1, #0xc]
	ands r0, r1
	cmp r0, #0
	beq _0807A004
	lsls r0, r4, #3
	add r0, sb
	movs r1, #1
	bl Text_SetColor
	b _0807A00E
	.align 2, 0
_0807A000: .4byte 0x0200E6D4
_0807A004:
	lsls r0, r4, #3
	add r0, sb
	movs r1, #0
	bl Text_SetColor
_0807A00E:
	lsls r4, r4, #3
	add r4, sb
	lsls r0, r6, #2
	ldr r1, _0807A074 @ =0x0200E6D4
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	movs r1, #0x1f
	ands r1, r7
	lsls r1, r1, #5
	mov r2, r8
	lsls r0, r2, #3
	adds r1, r1, r0
	lsls r1, r1, #1
	ldr r0, _0807A078 @ =gBg2Tm
	adds r1, r1, r0
	adds r0, r4, #0
	bl PutText
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	cmp r0, #1
	bhi _0807A05C
	adds r0, r7, r0
	mov r1, sl
	adds r1, #0x2d
	ldrb r1, [r1]
	cmp r0, r1
	blt _08079F8E
_0807A05C:
	movs r0, #4
	bl EnableBgSync
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807A074: .4byte 0x0200E6D4
_0807A078: .4byte gBg2Tm

	thumb_func_start sub_807A07C
sub_807A07C: @ 0x0807A07C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x100
	bl GetPlayerDeployCount
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sl, r0
	movs r0, #0
	mov sb, r0
	mov r8, r0
	movs r4, #1
_0807A09A:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0807A0BE
	ldr r0, [r1]
	cmp r0, #0
	beq _0807A0BE
	mov r2, r8
	lsls r0, r2, #2
	add r0, sp
	str r1, [r0]
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
_0807A0BE:
	adds r4, #1
	cmp r4, #0x3f
	ble _0807A09A
	movs r5, #0
	cmp r5, r8
	bge _0807A118
	mov r6, sp
_0807A0CC:
	ldr r1, [r6]
	movs r0, #4
	ldrh r3, [r1, #0xc]
	ands r0, r3
	cmp r0, #0
	bne _0807A110
	adds r0, r1, #0
	bl sub_8079404
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807A110
	cmp r5, #0
	ble _0807A110
	mov r1, sp
	subs r1, #4
	lsls r0, r5, #2
	adds r4, r1, r0
_0807A0F0:
	subs r7, r5, #1
	ldr r0, [r4]
	bl sub_8079404
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0807A110
	ldr r1, [r4, #4]
	ldr r0, [r4]
	str r0, [r4, #4]
	str r1, [r4]
	subs r4, #4
	subs r6, #4
	adds r5, r7, #0
	cmp r5, #0
	bgt _0807A0F0
_0807A110:
	adds r6, #4
	adds r5, #1
	cmp r5, r8
	blt _0807A0CC
_0807A118:
	ldr r0, _0807A170 @ =0x0200F0A4
	bl UnitRearrangeInit
	mov r0, r8
	cmp r0, #0
	beq _0807A134
	mov r4, sp
	mov r5, r8
_0807A128:
	ldm r4!, {r0}
	bl UnitRearrangeAdd
	subs r5, #1
	cmp r5, #0
	bne _0807A128
_0807A134:
	bl UnitRearrangeApply
	movs r4, #1
_0807A13A:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _0807A17E
	ldr r0, [r2]
	cmp r0, #0
	beq _0807A17E
	ldrh r1, [r2, #0xc]
	movs r0, #4
	ands r0, r1
	cmp r0, #0
	bne _0807A17E
	cmp sl, sb
	bls _0807A178
	ldr r3, _0807A174 @ =0x0000FFF7
	adds r0, r3, #0
	ands r0, r1
	strh r0, [r2, #0xc]
	mov r0, sb
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sb, r0
	b _0807A17E
	.align 2, 0
_0807A170: .4byte 0x0200F0A4
_0807A174: .4byte 0x0000FFF7
_0807A178:
	movs r0, #8
	orrs r0, r1
	strh r0, [r2, #0xc]
_0807A17E:
	adds r4, #1
	cmp r4, #0x3f
	ble _0807A13A
	add sp, #0x100
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_807A194
sub_807A194: @ 0x0807A194
	push {r4, lr}
	movs r4, #1
_0807A198:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0807A1BA
	ldr r0, [r1]
	cmp r0, #0
	beq _0807A1BA
	ldrh r2, [r1, #0xc]
	movs r0, #4
	ands r0, r2
	cmp r0, #0
	bne _0807A1BA
	movs r0, #8
	orrs r0, r2
	strh r0, [r1, #0xc]
_0807A1BA:
	adds r4, #1
	cmp r4, #0x3f
	ble _0807A198
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807A1C8
sub_807A1C8: @ 0x0807A1C8
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	lsls r1, r1, #0x18
	lsrs r6, r1, #0x18
	adds r0, #0x2f
	movs r1, #0
	strb r1, [r0]
	subs r0, #2
	strb r1, [r0]
	ldr r0, _0807A228 @ =0x0200E7D4
	strb r1, [r0]
	movs r4, #1
_0807A1E0:
	adds r0, r4, #0
	bl GetUnit
	adds r3, r0, #0
	cmp r3, #0
	beq _0807A256
	ldr r0, [r3]
	cmp r0, #0
	beq _0807A256
	movs r0, #4
	ldrh r1, [r3, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _0807A256
	ldr r1, _0807A22C @ =0x0200E6D4
	adds r2, r5, #0
	adds r2, #0x2d
	ldrb r7, [r2]
	lsls r0, r7, #2
	adds r0, r0, r1
	str r3, [r0]
	ldrh r1, [r3, #0xc]
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	bne _0807A234
	ldr r7, _0807A230 @ =0x0000FFFD
	adds r0, r7, #0
	ands r0, r1
	strh r0, [r3, #0xc]
	adds r1, r5, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	b _0807A23A
	.align 2, 0
_0807A228: .4byte 0x0200E7D4
_0807A22C: .4byte 0x0200E6D4
_0807A230: .4byte 0x0000FFFD
_0807A234:
	movs r0, #0xa
	orrs r0, r1
	strh r0, [r3, #0xc]
_0807A23A:
	ldr r0, _0807A264 @ =0x0200E7D4
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	cmp r6, #0
	beq _0807A256
	adds r0, r3, #0
	bl GetUnitMapSprite
	bl UseUnitSprite
_0807A256:
	adds r4, #1
	cmp r4, #0x3f
	ble _0807A1E0
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807A264: .4byte 0x0200E7D4

	thumb_func_start sub_807A268
sub_807A268: @ 0x0807A268
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r0, #0
	bl ResetTextFont
	bl ClearIcons
	bl ApplyUnitSpritePalettes
	bl ResetText
	bl InitIcons
	movs r0, #4
	bl ApplyIconPalettes
	bl LoadUiFrameGraphics
	movs r0, #0
	movs r1, #0xe
	bl sub_8070E70
	ldr r2, _0807A2E0 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	bl ApplySystemObjectsGraphics
	bl ResetUnitSprites
	adds r0, r7, #0
	bl StartGreenText
	bl sub_8082CBC
	adds r1, r7, #0
	adds r1, #0x2c
	movs r0, #1
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0807A2E4
	adds r1, r7, #0
	adds r1, #0x2e
	movs r0, #5
	b _0807A2EC
	.align 2, 0
_0807A2E0: .4byte gDispIo
_0807A2E4:
	bl GetPlayerDeployCount
	adds r1, r7, #0
	adds r1, #0x2e
_0807A2EC:
	strb r0, [r1]
	adds r4, r1, #0
	movs r0, #0
	str r0, [r7, #0x5c]
	adds r0, r7, #0
	movs r1, #1
	bl sub_807A1C8
	adds r0, r7, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	ldrb r2, [r4]
	cmp r2, r0
	bls _0807A30A
	strb r0, [r4]
_0807A30A:
	adds r0, r7, #0
	adds r0, #0x3b
	ldrb r0, [r0]
	cmp r0, #6
	bne _0807A324
	bl sub_806EACC
	adds r1, r0, #0
	adds r0, r7, #0
	movs r2, #0
	bl sub_8079928
	b _0807A334
_0807A324:
	cmp r0, #9
	bne _0807A334
	ldr r0, _0807A514 @ =0x0200E7D8
	ldr r1, [r0]
	adds r0, r7, #0
	movs r2, #1
	bl sub_8079928
_0807A334:
	ldr r0, _0807A518 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0807A51C @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0807A520 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	adds r6, r7, #0
	adds r6, #0x42
	movs r3, #0x44
	adds r3, r3, r7
	mov r8, r3
	movs r4, #0x2a
	adds r4, r4, r7
	mov sb, r4
	movs r0, #0x29
	adds r0, r0, r7
	mov sl, r0
	ldr r5, _0807A524 @ =0x0200E864
	movs r4, #4
_0807A366:
	adds r0, r5, #0
	movs r1, #7
	bl InitTextDb
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _0807A366
	ldr r4, _0807A528 @ =0x0200E88C
	adds r0, r4, #0
	movs r1, #7
	bl InitText
	adds r4, #8
	adds r0, r4, #0
	movs r1, #7
	bl InitText
	ldr r5, _0807A52C @ =0x0200E7E4
	movs r4, #0xf
_0807A38E:
	adds r0, r5, #0
	movs r1, #5
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _0807A38E
	ldr r0, _0807A530 @ =0x0200E7DC
	movs r1, #9
	bl InitTextDb
	ldr r0, _0807A534 @ =0x0200E89C
	movs r1, #7
	bl InitText
	ldr r0, _0807A538 @ =0x0831A268
	ldr r1, _0807A53C @ =0x06014800
	bl Decompress
	ldr r0, _0807A540 @ =0x0831AABC
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, _0807A544 @ =0x08326930
	ldr r1, _0807A548 @ =0x06017000
	bl Decompress
	ldr r0, _0807A54C @ =0x08326E64
	movs r1, #0xb0
	lsls r1, r1, #2
	movs r2, #0x80
	bl ApplyPaletteExt
	ldr r0, _0807A550 @ =0x08327108
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r4, #0
	ldr r2, _0807A554 @ =gPal
	ldr r3, _0807A558 @ =0x000002CA
	adds r1, r2, r3
	adds r3, r6, #0
	movs r6, #0xf
	mov ip, r6
	movs r5, #0xc8
	lsls r5, r5, #1
_0807A3F4:
	ldrh r6, [r3]
	lsrs r0, r6, #2
	adds r0, r0, r4
	mov r6, ip
	ands r0, r6
	adds r0, r0, r5
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r1]
	adds r1, #2
	adds r4, #1
	cmp r4, #9
	ble _0807A3F4
	bl EnablePalSync
	ldr r0, _0807A55C @ =gDispIo
	mov ip, r0
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	mov r2, ip
	ldrb r2, [r2, #0xc]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	mov r3, ip
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r4, [r3, #0x10]
	ands r0, r4
	movs r6, #2
	orrs r0, r6
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	orrs r1, r2
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r3, [r3, #1]
	ands r0, r3
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r4, ip
	strb r0, [r4, #1]
	mov r1, ip
	adds r1, #0x2d
	movs r0, #0
	strb r0, [r1]
	adds r1, #4
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	adds r4, #0x34
	ldrb r0, [r4]
	orrs r0, r2
	orrs r0, r6
	movs r5, #4
	orrs r0, r5
	movs r3, #8
	orrs r0, r3
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r4]
	adds r4, #1
	ldrb r0, [r4]
	orrs r0, r2
	orrs r0, r6
	orrs r0, r5
	orrs r0, r3
	orrs r0, r1
	strb r0, [r4]
	adds r4, #1
	ldrb r0, [r4]
	orrs r2, r0
	orrs r2, r6
	movs r0, #5
	rsbs r0, r0, #0
	ands r2, r0
	orrs r2, r3
	orrs r2, r1
	strb r2, [r4]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	mov r1, r8
	ldrh r2, [r1]
	subs r2, #0x28
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	ldr r0, _0807A560 @ =0x08320E18
	ldr r1, _0807A564 @ =0x06004800
	bl Decompress
	ldr r0, _0807A568 @ =0x08319E88
	movs r1, #0xf0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	bl sub_807CC28
	adds r0, r7, #0
	bl sub_8079424
	mov r2, sb
	ldrb r2, [r2]
	cmp r2, #1
	bne _0807A502
	adds r0, r7, #0
	bl sub_8079804
_0807A502:
	mov r3, sl
	ldrb r0, [r3]
	cmp r0, #0
	bne _0807A56C
	adds r0, r7, #0
	bl sub_8079A94
	b _0807A576
	.align 2, 0
_0807A514: .4byte 0x0200E7D8
_0807A518: .4byte gBg0Tm
_0807A51C: .4byte gBg1Tm
_0807A520: .4byte gBg2Tm
_0807A524: .4byte 0x0200E864
_0807A528: .4byte 0x0200E88C
_0807A52C: .4byte 0x0200E7E4
_0807A530: .4byte 0x0200E7DC
_0807A534: .4byte 0x0200E89C
_0807A538: .4byte 0x0831A268
_0807A53C: .4byte 0x06014800
_0807A540: .4byte 0x0831AABC
_0807A544: .4byte 0x08326930
_0807A548: .4byte 0x06017000
_0807A54C: .4byte 0x08326E64
_0807A550: .4byte 0x08327108
_0807A554: .4byte gPal
_0807A558: .4byte 0x000002CA
_0807A55C: .4byte gDispIo
_0807A560: .4byte 0x08320E18
_0807A564: .4byte 0x06004800
_0807A568: .4byte 0x08319E88
_0807A56C:
	cmp r0, #1
	bne _0807A576
	adds r0, r7, #0
	bl sub_8079D84
_0807A576:
	adds r0, r7, #0
	bl sub_807A67C
	movs r0, #0xf
	bl EnableBgSync
	ldr r0, [r7, #0x60]
	movs r1, #0xc0
	lsls r1, r1, #7
	movs r2, #0xd
	bl sub_8082D08
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_807A59C
sub_807A59C: @ 0x0807A59C
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r0, #0
	bl InitBgs
	adds r0, r5, #0
	bl sub_807A268
	adds r1, r5, #0
	adds r1, #0x2c
	movs r0, #1
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0807A5C6
	movs r0, #0
	movs r1, #0
	movs r2, #0xa
	bl sub_806EA24
	b _0807A5EE
_0807A5C6:
	ldr r4, _0807A65C @ =0x0831B0A8
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, _0807A660 @ =0x08320D98
	movs r1, #0xa0
	lsls r1, r1, #1
	movs r2, #0x80
	bl ApplyPaletteExt
	adds r0, r5, #0
	bl sub_8082560
_0807A5EE:
	str r0, [r5, #0x58]
	ldr r0, _0807A664 @ =0x08321FA4
	ldr r1, _0807A668 @ =0x020104A4
	bl Decompress
	ldr r0, _0807A66C @ =0x08326910
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r5, #0
	ldr r7, _0807A670 @ =gPlaySt
	ldr r6, _0807A674 @ =0x0600E000
_0807A60A:
	movs r0, #0xe
	ldrsb r0, [r7, r0]
	bl GetChapterInfo
	adds r4, r0, #0
	movs r0, #0xe
	ldrsb r0, [r7, r0]
	bl GetChapterInfo
	adds r1, r0, #0
	adds r4, #0x40
	ldrb r4, [r4]
	adds r0, r4, r5
	lsls r0, r0, #5
	adds r1, #0x3f
	ldrb r1, [r1]
	adds r0, r1, r0
	lsls r0, r0, #5
	ldr r1, _0807A668 @ =0x020104A4
	adds r0, r0, r1
	adds r1, r6, #0
	movs r2, #0x78
	bl CpuFastSet
	movs r0, #0xf0
	lsls r0, r0, #1
	adds r6, r6, r0
	adds r5, #1
	cmp r5, #0xb
	ble _0807A60A
	movs r2, #0
	movs r1, #0x1f
	ldr r0, _0807A678 @ =0x0600F81F
_0807A64C:
	strb r2, [r0]
	subs r0, #1
	subs r1, #1
	cmp r1, #0
	bge _0807A64C
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807A65C: .4byte 0x0831B0A8
_0807A660: .4byte 0x08320D98
_0807A664: .4byte 0x08321FA4
_0807A668: .4byte 0x020104A4
_0807A66C: .4byte 0x08326910
_0807A670: .4byte gPlaySt
_0807A674: .4byte 0x0600E000
_0807A678: .4byte 0x0600F81F

	thumb_func_start sub_807A67C
sub_807A67C: @ 0x0807A67C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r6, r0, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807A694
	b _0807A7C8
_0807A694:
	ldr r0, _0807A7A0 @ =0x08326EE6
	mov sl, r0
	movs r1, #0x80
	lsls r1, r1, #8
	movs r0, #2
	bl SetBgChrOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	bl GetBgTilemap
	ldr r1, _0807A7A4 @ =0x0000E3C0
	bl TmFill
	movs r4, #0
	ldr r1, _0807A7A8 @ =gBg0Tm
	mov r8, r1
	ldr r0, _0807A7AC @ =0x0200E7DC
	mov sb, r0
	ldr r7, _0807A7B0 @ =gBg2Tm
	movs r5, #0
	movs r2, #0xae
	ldr r1, _0807A7B4 @ =0xFFFFE300
	adds r6, r1, #0
_0807A6CC:
	movs r3, #0xe
	adds r0, r5, r6
	adds r1, r0, #0
	adds r1, #0xe
	lsls r0, r2, #1
	adds r0, r0, r7
	adds r0, #0x1c
_0807A6DA:
	strh r1, [r0]
	subs r1, #1
	subs r0, #2
	subs r3, #1
	cmp r3, #0
	bge _0807A6DA
	adds r5, #0xf
	adds r2, #0x20
	adds r4, #1
	cmp r4, #0xb
	ble _0807A6CC
	movs r4, #0
	ldr r0, _0807A7B8 @ =gBg1Tm
	mov ip, r0
	movs r7, #0xf
	movs r1, #0x80
	lsls r1, r1, #5
	adds r6, r1, #0
_0807A6FE:
	movs r3, #0
	adds r5, r4, #1
	adds r0, r4, #4
	lsls r0, r0, #5
	adds r0, #0xd
	subs r2, r7, r4
	lsls r1, r2, #4
	adds r1, r1, r2
	lsls r1, r1, #1
	add r1, sl
	lsls r0, r0, #1
	mov r4, ip
	adds r2, r0, r4
_0807A718:
	ldrh r4, [r1]
	adds r0, r6, r4
	strh r0, [r2]
	adds r1, #2
	adds r2, #2
	adds r3, #1
	cmp r3, #0x10
	ble _0807A718
	adds r4, r5, #0
	cmp r4, #0xf
	ble _0807A6FE
	movs r0, #0x94
	lsls r0, r0, #1
	add r0, r8
	movs r1, #0
	strh r1, [r0]
	movs r0, #0x95
	lsls r0, r0, #1
	add r0, r8
	strh r1, [r0]
	movs r0, #0x9d
	lsls r0, r0, #3
	add r0, r8
	strh r1, [r0]
	ldr r0, _0807A7BC @ =0x000004EA
	add r0, r8
	strh r1, [r0]
	mov r0, sb
	bl ClearText
	ldr r4, _0807A7C0 @ =gPlaySt
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetChapterInfo
	ldrh r0, [r0, #0x3c]
	bl DecodeMsg
	bl GetStringTextLen
	movs r1, #0x48
	subs r1, r1, r0
	asrs r1, r1, #1
	mov r0, sb
	bl Text_SetCursor
	mov r0, sb
	movs r1, #0
	bl Text_SetColor
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetChapterInfo
	ldrh r0, [r0, #0x3c]
	bl DecodeMsg
	adds r1, r0, #0
	mov r0, sb
	bl Text_DrawString
	ldr r1, _0807A7C4 @ =0x00000462
	add r1, r8
	mov r0, sb
	bl PutText
	b _0807A82E
	.align 2, 0
_0807A7A0: .4byte 0x08326EE6
_0807A7A4: .4byte 0x0000E3C0
_0807A7A8: .4byte gBg0Tm
_0807A7AC: .4byte 0x0200E7DC
_0807A7B0: .4byte gBg2Tm
_0807A7B4: .4byte 0xFFFFE300
_0807A7B8: .4byte gBg1Tm
_0807A7BC: .4byte 0x000004EA
_0807A7C0: .4byte gPlaySt
_0807A7C4: .4byte 0x00000462
_0807A7C8:
	movs r0, #2
	movs r1, #0
	bl SetBgChrOffset
	ldr r0, _0807A844 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	adds r0, r6, #0
	adds r0, #0x44
	ldrh r1, [r0]
	lsrs r4, r1, #4
	adds r1, r4, #7
	adds r5, r0, #0
	adds r7, r6, #0
	adds r7, #0x33
	cmp r4, r1
	bge _0807A802
_0807A7EC:
	lsls r1, r4, #0x18
	lsrs r1, r1, #0x18
	adds r0, r6, #0
	bl sub_8079F50
	adds r4, #1
	ldrh r1, [r5]
	lsrs r0, r1, #4
	adds r0, #7
	cmp r4, r0
	blt _0807A7EC
_0807A802:
	movs r0, #0
	str r0, [sp]
	movs r0, #0xd
	movs r1, #4
	movs r2, #0x11
	movs r3, #0x10
	bl sub_8041358
	ldr r1, _0807A848 @ =0x0000FF80
	ldrh r2, [r5]
	subs r2, #0x28
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	ldrb r0, [r7]
	cmp r0, #0
	bne _0807A82E
	adds r0, r6, #0
	bl sub_8079EA0
_0807A82E:
	movs r0, #7
	bl EnableBgSync
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807A844: .4byte gBg2Tm
_0807A848: .4byte 0x0000FF80

	thumb_func_start sub_807A84C
sub_807A84C: @ 0x0807A84C
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r4, r0, #0
	ldr r1, _0807A898 @ =0x0200E7D8
	movs r0, #0
	str r0, [r1]
	str r0, [r4, #0x48]
	str r0, [r4, #0x4c]
	adds r1, r4, #0
	adds r1, #0x44
	movs r5, #0
	strh r0, [r1]
	adds r0, r4, #0
	adds r0, #0x30
	strb r5, [r0]
	subs r1, #0x13
	movs r0, #0xff
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x29
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	adds r0, #0xb
	strb r5, [r0]
	bl sub_8036984
	adds r1, r0, #0
	cmp r1, #1
	bne _0807A89C
	adds r0, r4, #0
	adds r0, #0x2c
	strb r1, [r0]
	b _0807A8AA
	.align 2, 0
_0807A898: .4byte 0x0200E7D8
_0807A89C:
	adds r0, r4, #0
	adds r0, #0x2c
	strb r5, [r0]
	movs r0, #0x22
	movs r1, #0
	bl StartBgm
_0807A8AA:
	adds r0, r4, #0
	adds r0, #0x38
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #2
	strb r1, [r0]
	subs r0, #1
	strb r1, [r0]
	adds r0, #2
	strb r1, [r0]
	adds r3, r4, #0
	adds r3, #0x35
	adds r1, r4, #0
	adds r1, #0x33
	movs r2, #0
	subs r0, #9
_0807A8D6:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge _0807A8D6
	movs r0, #0
	strb r0, [r3]
	adds r0, r4, #0
	bl sub_8082CF4
	str r0, [r4, #0x60]
	adds r0, r4, #0
	bl sub_807A59C
	adds r0, r4, #0
	bl sub_807C508
	mov r8, r0
	str r0, [r4, #0x50]
	ldr r5, _0807A93C @ =gPlaySt
	movs r0, #0xe
	ldrsb r0, [r5, r0]
	bl GetChapterInfo
	adds r0, #0x41
	ldrb r0, [r0]
	lsls r6, r0, #0x1b
	lsrs r6, r6, #0x18
	movs r0, #0xe
	ldrsb r0, [r5, r0]
	bl GetChapterInfo
	adds r0, #0x42
	ldrb r0, [r0]
	lsls r4, r0, #0x1b
	lsrs r4, r4, #0x18
	movs r0, #0xe
	ldrsb r0, [r5, r0]
	bl GetChapterInfo
	adds r0, #0x3e
	ldrb r3, [r0]
	mov r0, r8
	adds r1, r6, #0
	adds r2, r4, #0
	bl sub_807B8CC
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807A93C: .4byte gPlaySt

	thumb_func_start sub_807A940
sub_807A940: @ 0x0807A940
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r0, #0x30
	ldrb r0, [r0]
	mov r8, r0
	ldr r2, _0807A968 @ =gKeySt
	ldr r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _0807A96C
	adds r1, r4, #0
	adds r1, #0x3f
	movs r0, #2
	b _0807A972
	.align 2, 0
_0807A968: .4byte gKeySt
_0807A96C:
	adds r1, r4, #0
	adds r1, #0x3f
	movs r0, #1
_0807A972:
	strb r0, [r1]
	adds r5, r1, #0
	ldr r1, [r2]
	movs r0, #8
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0807A9F8
	adds r1, r4, #0
	adds r1, #0x2c
	movs r6, #1
	adds r0, r6, #0
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _0807A9F8
	adds r1, r4, #0
	adds r1, #0x3c
	adds r0, r6, #0
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0807A9D8
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807A9D8
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
	ldr r0, [r4, #0x50]
	adds r0, #0x2a
	strb r6, [r0]
	ldr r0, _0807A9D4 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	adds r5, r4, #0
	adds r5, #0x30
	adds r6, r4, #0
	adds r6, #0x36
	cmp r0, #0
	bge _0807A9CC
	b _0807AB76
_0807A9CC:
	movs r0, #0x6a
	bl m4aSongNumStart
	b _0807AB76
	.align 2, 0
_0807A9D4: .4byte gPlaySt
_0807A9D8:
	ldr r0, _0807A9F4 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	adds r5, r4, #0
	adds r5, #0x30
	adds r6, r4, #0
	adds r6, #0x36
	cmp r0, #0
	bge _0807A9EC
	b _0807AB76
_0807A9EC:
	movs r0, #0x6c
	bl m4aSongNumStart
	b _0807AB76
	.align 2, 0
_0807A9F4: .4byte gPlaySt
_0807A9F8:
	ldr r1, [r2]
	movs r3, #0x80
	adds r0, r3, #0
	ldrh r6, [r1, #6]
	ands r0, r6
	cmp r0, #0
	bne _0807AA16
	adds r0, r3, #0
	ldrh r1, [r1, #0x10]
	ands r0, r1
	cmp r0, #0
	beq _0807AA70
	ldrb r0, [r5]
	cmp r0, #2
	bne _0807AA70
_0807AA16:
	adds r1, r4, #0
	adds r1, #0x3c
	ldrb r2, [r1]
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _0807AA44
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	beq _0807AA44
	strb r0, [r1]
	ldr r0, _0807AA40 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	adds r5, r4, #0
	adds r5, #0x30
	adds r6, r4, #0
	adds r6, #0x36
	b _0807AAE6
	.align 2, 0
_0807AA40: .4byte gPlaySt
_0807AA44:
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r3, [r0]
	adds r3, #2
	adds r2, r4, #0
	adds r2, #0x2d
	adds r5, r0, #0
	adds r6, r4, #0
	adds r6, #0x36
	ldrb r2, [r2]
	cmp r3, r2
	blt _0807AA5E
	b _0807AB76
_0807AA5E:
	strb r3, [r5]
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
	movs r0, #1
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	b _0807AB76
_0807AA70:
	ldr r1, [r2]
	movs r3, #0x40
	adds r0, r3, #0
	ldrh r6, [r1, #6]
	ands r0, r6
	cmp r0, #0
	bne _0807AA8E
	adds r0, r3, #0
	ldrh r6, [r1, #0x10]
	ands r0, r6
	cmp r0, #0
	beq _0807AB10
	ldrb r5, [r5]
	cmp r5, #2
	bne _0807AB10
_0807AA8E:
	adds r7, r4, #0
	adds r7, #0x3c
	ldrb r2, [r7]
	movs r0, #1
	mov ip, r0
	ands r0, r2
	adds r6, r4, #0
	adds r6, #0x36
	cmp r0, #0
	beq _0807AAF8
	movs r0, #0
	ldrsb r0, [r6, r0]
	cmp r0, #0
	bne _0807AAF8
	adds r0, r4, #0
	adds r0, #0x44
	ldrh r0, [r0]
	cmp r0, #0
	bne _0807AAF8
	adds r0, r3, #0
	ldrh r1, [r1, #8]
	ands r0, r1
	adds r5, r4, #0
	adds r5, #0x30
	cmp r0, #0
	beq _0807AB76
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807AB76
	adds r1, r4, #0
	adds r1, #0x2c
	mov r0, ip
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _0807AB76
	movs r0, #2
	orrs r0, r2
	strb r0, [r7]
	ldr r0, _0807AAF4 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
_0807AAE6:
	cmp r0, #0
	blt _0807AB76
	movs r0, #0x66
	bl m4aSongNumStart
	b _0807AB76
	.align 2, 0
_0807AAF4: .4byte gPlaySt
_0807AAF8:
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r1, [r0]
	subs r1, #2
	adds r5, r0, #0
	cmp r1, #0
	blt _0807AB76
	strb r1, [r5]
	ldrb r0, [r6]
	subs r0, #1
	strb r0, [r6]
	b _0807AB76
_0807AB10:
	ldr r0, [r2]
	ldrh r1, [r0, #6]
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0807AB40
	adds r1, r4, #0
	adds r1, #0x30
	ldrb r2, [r1]
	movs r0, #1
	ands r0, r2
	adds r5, r1, #0
	adds r6, r4, #0
	adds r6, #0x36
	cmp r0, #0
	beq _0807AB76
	adds r1, #0xc
	movs r0, #3
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #3
	beq _0807AB76
	subs r0, r2, #1
	b _0807AB74
_0807AB40:
	movs r0, #0x10
	ands r0, r1
	adds r5, r4, #0
	adds r5, #0x30
	adds r6, r4, #0
	adds r6, #0x36
	cmp r0, #0
	beq _0807AB76
	adds r1, r4, #0
	adds r1, #0x3c
	movs r0, #3
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #3
	beq _0807AB76
	ldrb r1, [r5]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0807AB76
	adds r0, r1, #1
	adds r1, r4, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	cmp r0, r1
	bge _0807AB76
_0807AB74:
	strb r0, [r5]
_0807AB76:
	ldrb r2, [r5]
	cmp r2, r8
	beq _0807ABA4
	adds r0, r4, #0
	bl sub_80798EC
	ldr r0, [r4, #0x5c]
	cmp r0, #0
	beq _0807AB8C
	bl Proc_End
_0807AB8C:
	adds r0, r4, #0
	bl sub_8079D70
	str r0, [r4, #0x5c]
	ldr r0, _0807ABCC @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807ABA4
	movs r0, #0x66
	bl m4aSongNumStart
_0807ABA4:
	ldrb r0, [r6]
	cmp r0, #6
	bne _0807ABD0
	ldrb r2, [r5]
	adds r2, #2
	asrs r2, r2, #1
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	subs r0, #1
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	cmp r2, r0
	bgt _0807ABD0
	movs r0, #5
	strb r0, [r6]
	movs r0, #1
	b _0807ABEA
	.align 2, 0
_0807ABCC: .4byte gPlaySt
_0807ABD0:
	movs r0, #0
	ldrsb r0, [r6, r0]
	cmp r0, #0
	bne _0807ABE8
	ldrb r5, [r5]
	lsrs r0, r5, #1
	cmp r0, #0
	beq _0807ABE8
	movs r0, #1
	strb r0, [r6]
	subs r0, #2
	b _0807ABEA
_0807ABE8:
	movs r0, #0
_0807ABEA:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_807ABF4
sub_807ABF4: @ 0x0807ABF4
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r1, r6, #0
	adds r1, #0x44
	ldrh r0, [r1]
	lsrs r4, r0, #4
	adds r2, r6, #0
	adds r2, #0x31
	ldrb r0, [r2]
	adds r3, r6, #0
	adds r3, #0x30
	strb r0, [r3]
	movs r0, #0xff
	strb r0, [r2]
	adds r0, r6, #0
	adds r0, #0x40
	ldrh r1, [r1]
	ldrh r0, [r0]
	cmp r1, r0
	beq _0807AC2A
	ldrb r0, [r3]
	lsrs r1, r0, #1
	cmp r1, r4
	ble _0807AC38
	adds r0, r4, #6
	cmp r1, r0
	bge _0807AC38
_0807AC2A:
	ldrb r3, [r3]
	lsrs r0, r3, #1
	subs r0, r0, r4
	adds r1, r6, #0
	adds r1, #0x36
	strb r0, [r1]
	b _0807AC8E
_0807AC38:
	adds r0, r6, #0
	adds r0, #0x40
	ldrh r0, [r0]
	adds r4, r6, #0
	adds r4, #0x44
	strh r0, [r4]
	adds r0, r6, #0
	adds r0, #0x37
	ldrb r0, [r0]
	adds r1, r6, #0
	adds r1, #0x36
	strb r0, [r1]
	ldr r0, _0807AC94 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r1, _0807AC98 @ =0x0000FF80
	ldrh r2, [r4]
	subs r2, #0x28
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	ldrh r1, [r4]
	lsrs r5, r1, #4
	adds r0, r5, #7
	cmp r5, r0
	bge _0807AC88
_0807AC72:
	lsls r1, r5, #0x18
	lsrs r1, r1, #0x18
	adds r0, r6, #0
	bl sub_8079F50
	adds r5, #1
	ldrh r1, [r4]
	lsrs r0, r1, #4
	adds r0, #7
	cmp r5, r0
	blt _0807AC72
_0807AC88:
	movs r0, #4
	bl EnableBgSync
_0807AC8E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807AC94: .4byte gBg2Tm
_0807AC98: .4byte 0x0000FF80

	thumb_func_start sub_807AC9C
sub_807AC9C: @ 0x0807AC9C
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	adds r7, r6, #0
	adds r7, #0x35
	ldrb r5, [r7]
	cmp r5, #0
	bne _0807ACB2
	movs r1, #6
	bl Proc_Goto
	b _0807ACCC
_0807ACB2:
	cmp r5, #1
	bne _0807ACCC
	adds r0, r6, #0
	bl sub_807ABF4
	adds r0, r6, #0
	adds r0, #0x29
	movs r4, #0
	strb r5, [r0]
	adds r0, r6, #0
	bl sub_8079D84
	strb r4, [r7]
_0807ACCC:
	ldr r0, _0807ACE4 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807ACDC
	movs r0, #0x6b
	bl m4aSongNumStart
_0807ACDC:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807ACE4: .4byte gPlaySt

	thumb_func_start sub_807ACE8
sub_807ACE8: @ 0x0807ACE8
	push {lr}
	ldr r0, [r0, #0x50]
	movs r1, #2
	bl Proc_Goto
	bl EndGreenText
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807ACFC
sub_807ACFC: @ 0x0807ACFC
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r5, #0
	ldr r2, _0807AD68 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r4, #1
_0807AD22:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0807AD44
	ldr r0, [r1]
	cmp r0, #0
	beq _0807AD44
	movs r0, #4
	ldrh r1, [r1, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _0807AD44
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0807AD44:
	adds r4, #1
	cmp r4, #0x3f
	ble _0807AD22
	cmp r5, #0
	bne _0807AD62
	str r5, [r6, #0x58]
	adds r1, r6, #0
	adds r1, #0x3e
	movs r0, #1
	strb r0, [r1]
	adds r0, r6, #0
	movs r1, #0xb
	bl Proc_Goto
	str r5, [r6, #0x50]
_0807AD62:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807AD68: .4byte gDispIo

	thumb_func_start sub_807AD6C
sub_807AD6C: @ 0x0807AD6C
	push {lr}
	bl sub_807A84C
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807AD78
sub_807AD78: @ 0x0807AD78
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r6, r0, #0
	adds r0, #0x35
	ldrb r2, [r0]
	subs r0, #2
	adds r0, r0, r2
	ldrb r0, [r0]
	str r0, [sp]
	str r2, [sp, #4]
	adds r5, r6, #0
	adds r5, #0x29
	ldrb r4, [r5]
	cmp r4, #0
	beq _0807ADA6
	cmp r4, #1
	bne _0807ADA4
	b _0807AF30
_0807ADA4:
	b _0807B0BC
_0807ADA6:
	adds r0, r6, #0
	adds r0, #0x3d
	ldrb r1, [r0]
	mov sb, r0
	ldr r2, _0807ADCC @ =gKeySt
	cmp r1, #0
	beq _0807ADD0
	ldr r1, [r2]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0807ADD0
	bl sub_807089C
	mov r0, sb
	strb r4, [r0]
	b _0807B0BC
	.align 2, 0
_0807ADCC: .4byte gKeySt
_0807ADD0:
	ldr r1, [r2]
	ldrh r3, [r1, #8]
	movs r0, #1
	ands r0, r3
	cmp r0, #0
	beq _0807AE0C
	mov r1, sb
	ldrb r0, [r1]
	adds r4, r6, #0
	adds r4, #0x35
	cmp r0, #0
	bne _0807AECC
	adds r0, r6, #0
	bl sub_807CCC4
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0807AECC
	ldr r0, _0807AE08 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807AECC
	movs r0, #0x6c
	bl m4aSongNumStart
	b _0807AECC
	.align 2, 0
_0807AE08: .4byte gPlaySt
_0807AE0C:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r3
	cmp r0, #0
	beq _0807AE2A
	mov r2, sb
	ldrb r0, [r2]
	adds r4, r6, #0
	adds r4, #0x35
	cmp r0, #0
	bne _0807AECC
	adds r0, r6, #0
	bl sub_807CDF4
	b _0807AECC
_0807AE2A:
	ldrh r1, [r1, #6]
	movs r0, #0x40
	mov ip, r0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	cmp r0, #0
	beq _0807AE6E
	adds r0, r6, #0
	adds r0, #0x35
	ldrb r5, [r0]
	adds r7, r6, #0
	adds r7, #0x33
	adds r2, r7, r5
	ldrb r1, [r2]
	adds r4, r0, #0
	cmp r1, #0
	beq _0807AE56
	subs r0, r1, #1
	strb r0, [r2]
	b _0807AECC
_0807AE56:
	mov r0, ip
	ands r0, r3
	cmp r0, #0
	beq _0807AECC
	adds r0, r5, #0
	bl sub_807CD24
	ldrb r2, [r4]
	adds r1, r2, r7
	subs r0, #1
	strb r0, [r1]
	b _0807AECC
_0807AE6E:
	movs r0, #0x80
	mov sl, r0
	ands r0, r1
	cmp r0, #0
	beq _0807AEBA
	adds r4, r6, #0
	adds r4, #0x35
	ldrb r0, [r4]
	adds r7, r6, #0
	adds r7, #0x33
	adds r1, r7, r0
	ldrb r5, [r1]
	str r2, [sp, #8]
	bl sub_807CD24
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	subs r0, #1
	ldr r2, [sp, #8]
	cmp r5, r0
	bge _0807AEA4
	ldrb r2, [r4]
	adds r1, r2, r7
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	b _0807AECC
_0807AEA4:
	ldr r1, [r2]
	mov r0, sl
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0807AECC
	ldrb r1, [r4]
	adds r0, r1, r7
	mov r2, r8
	strb r2, [r0]
	b _0807AECC
_0807AEBA:
	movs r0, #2
	ands r0, r3
	adds r4, r6, #0
	adds r4, #0x35
	cmp r0, #0
	beq _0807AECC
	adds r0, r6, #0
	bl sub_807AC9C
_0807AECC:
	adds r1, r4, #0
	ldr r0, [sp, #4]
	ldrb r2, [r1]
	cmp r0, r2
	beq _0807AED8
	b _0807B0BC
_0807AED8:
	adds r0, r6, #0
	adds r0, #0x33
	adds r0, r2, r0
	ldr r1, [sp]
	ldrb r0, [r0]
	cmp r1, r0
	bne _0807AEE8
	b _0807B0BC
_0807AEE8:
	mov r2, sb
	ldrb r0, [r2]
	cmp r0, #0
	beq _0807AEF6
	adds r0, r6, #0
	bl sub_807CDF4
_0807AEF6:
	ldrb r4, [r4]
	cmp r4, #1
	bne _0807AF18
	ldr r4, [r6, #0x50]
	adds r0, r6, #0
	adds r0, #0x34
	ldrb r0, [r0]
	movs r1, #1
	bl sub_807CF2C
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	subs r1, #5
	adds r0, r4, #0
	bl sub_807B8B0
_0807AF18:
	ldr r0, _0807AF2C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _0807AF24
	b _0807B0BC
_0807AF24:
	movs r0, #0x66
	bl m4aSongNumStart
	b _0807B0BC
	.align 2, 0
_0807AF2C: .4byte gPlaySt
_0807AF30:
	ldr r7, _0807AF60 @ =gKeySt
	ldr r0, [r7]
	ldrh r1, [r0, #8]
	adds r3, r1, #0
	ands r3, r4
	cmp r3, #0
	beq _0807AF68
	adds r0, r6, #0
	bl sub_807CCC4
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807AF4C
	b _0807B0BC
_0807AF4C:
	ldr r0, _0807AF64 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _0807AF58
	b _0807B0BC
_0807AF58:
	movs r0, #0x6c
	bl m4aSongNumStart
	b _0807B0BC
	.align 2, 0
_0807AF60: .4byte gKeySt
_0807AF64: .4byte gPlaySt
_0807AF68:
	movs r4, #2
	adds r0, r4, #0
	ands r0, r1
	cmp r0, #0
	beq _0807B010
	adds r0, r2, #0
	cmp r0, #0
	bne _0807AFB6
	ldr r0, _0807AFA8 @ =0x02021B30
	movs r1, #0xa
	movs r2, #3
	movs r3, #0
	bl TmFillRect_t
	movs r0, #1
	bl EnableBgSync
	adds r1, r6, #0
	adds r1, #0x3c
	adds r0, r4, #0
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r2, r6, #0
	adds r2, #0x31
	ldrb r1, [r2]
	adds r0, r1, #0
	cmp r0, #0xff
	beq _0807AFAC
	movs r0, #0xff
	strb r0, [r2]
	b _0807AFF8
	.align 2, 0
_0807AFA8: .4byte 0x02021B30
_0807AFAC:
	adds r0, r6, #0
	movs r1, #0xa
	bl Proc_Goto
	b _0807AFF8
_0807AFB6:
	cmp r0, #1
	bne _0807AFF8
	strb r3, [r5]
	ldr r4, [r6, #0x50]
	adds r0, r6, #0
	adds r0, #0x34
	ldrb r0, [r0]
	movs r1, #1
	bl sub_807CF2C
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	subs r1, #5
	adds r0, r4, #0
	bl sub_807B8B0
	adds r0, r6, #0
	bl sub_8079A94
	adds r1, r6, #0
	adds r1, #0x30
	ldrb r0, [r1]
	adds r2, r6, #0
	adds r2, #0x32
	strb r0, [r2]
	adds r0, r6, #0
	adds r0, #0x31
	ldrb r0, [r0]
	strb r0, [r1]
	adds r0, r6, #0
	bl sub_80798EC
_0807AFF8:
	ldr r0, _0807B00C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807B0BC
	movs r0, #0x6b
	bl m4aSongNumStart
	b _0807B0BC
	.align 2, 0
_0807B00C: .4byte gPlaySt
_0807B010:
	adds r0, r6, #0
	bl sub_807A940
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r0, #0
	beq _0807B040
	lsls r0, r1, #0x18
	asrs r4, r0, #0x18
	movs r0, #1
	rsbs r0, r0, #0
	cmp r4, r0
	bne _0807B032
	adds r0, r6, #0
	movs r1, #7
	bl Proc_Goto
_0807B032:
	cmp r4, #1
	bne _0807B0BC
	adds r0, r6, #0
	movs r1, #8
	bl Proc_Goto
	b _0807B0BC
_0807B040:
	ldr r1, [r7]
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0807B06E
	adds r1, r6, #0
	adds r1, #0x3c
	movs r0, #3
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #3
	beq _0807B06E
	adds r1, r6, #0
	adds r1, #0x3b
	movs r0, #6
	strb r0, [r1]
	adds r0, r6, #0
	movs r1, #3
	bl Proc_Goto
	b _0807B0BC
_0807B06E:
	ldr r0, _0807B0CC @ =gKeySt
	ldr r1, [r0]
	movs r0, #4
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0807B0BC
	adds r0, r6, #0
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #1
	beq _0807B0BC
	ldr r2, _0807B0D0 @ =0x0200E7D8
	ldr r1, _0807B0D4 @ =0x0200E6D4
	adds r0, r6, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	str r0, [r2]
	ldr r0, _0807B0D8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807B0AC
	movs r0, #0x6a
	bl m4aSongNumStart
_0807B0AC:
	adds r1, r6, #0
	adds r1, #0x3b
	movs r0, #9
	strb r0, [r1]
	adds r0, r6, #0
	movs r1, #0xd
	bl Proc_Goto
_0807B0BC:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807B0CC: .4byte gKeySt
_0807B0D0: .4byte 0x0200E7D8
_0807B0D4: .4byte 0x0200E6D4
_0807B0D8: .4byte gPlaySt

	thumb_func_start sub_807B0DC
sub_807B0DC: @ 0x0807B0DC
	adds r0, #0x3e
	movs r1, #1
	strb r1, [r0]
	bx lr

	thumb_func_start sub_807B0E4
sub_807B0E4: @ 0x0807B0E4
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x3e
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807B0FA
	bl sub_8079A28
	bl sub_802B7E4
	b _0807B10C
_0807B0FA:
	adds r1, r4, #0
	adds r1, #0x2c
	movs r0, #1
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0807B10C
	bl sub_8036994
_0807B10C:
	bl EndGreenText
	ldr r0, [r4, #0x58]
	bl Proc_End
	ldr r0, [r4, #0x50]
	cmp r0, #0
	beq _0807B122
	movs r1, #5
	bl Proc_Goto
_0807B122:
	bl InitPlayerDeployUnitPositions
	bl ResetUnitSprites
	bl RefreshEntityMaps
	bl RefreshUnitSprites
	ldr r3, _0807B170 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0xc0
	ldrb r1, [r2]
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _0807B174 @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	movs r1, #0x1f
	orrs r0, r1
	strh r0, [r3, #0x3c]
	movs r0, #0x20
	ldrb r1, [r2]
	orrs r0, r1
	strb r0, [r2]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807B170: .4byte gDispIo
_0807B174: .4byte 0x0000FFE0

	thumb_func_start sub_807B178
sub_807B178: @ 0x0807B178
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r5, #0
	adds r6, #0x44
	ldrh r1, [r6]
	movs r4, #0xf
	adds r0, r1, #0
	ands r0, r4
	cmp r0, #0
	bne _0807B19A
	lsrs r1, r1, #4
	subs r1, #1
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	adds r0, r5, #0
	bl sub_8079F50
_0807B19A:
	adds r0, r5, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	lsls r0, r0, #2
	ldrh r1, [r6]
	subs r0, r1, r0
	strh r0, [r6]
	adds r0, r4, #0
	ldrh r1, [r6]
	ands r0, r1
	cmp r0, #0
	bne _0807B1F4
	adds r0, r5, #0
	bl sub_807A940
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #0
	bne _0807B1C8
	adds r0, r5, #0
	movs r1, #1
	bl Proc_Goto
_0807B1C8:
	cmp r4, #1
	bne _0807B1D4
	adds r0, r5, #0
	movs r1, #8
	bl Proc_Goto
_0807B1D4:
	ldrh r6, [r6]
	lsrs r0, r6, #3
	adds r0, #0xe
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #6
	ldr r1, _0807B1FC @ =gBg2Tm
	adds r0, r0, r1
	movs r1, #0xc
	movs r2, #1
	movs r3, #0
	bl TmFillRect_t
	movs r0, #4
	bl EnableBgSync
_0807B1F4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807B1FC: .4byte gBg2Tm

	thumb_func_start sub_807B200
sub_807B200: @ 0x0807B200
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x44
	ldrh r1, [r6]
	movs r5, #0xf
	adds r0, r1, #0
	ands r0, r5
	cmp r0, #0
	bne _0807B222
	lsrs r1, r1, #4
	adds r1, #7
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	adds r0, r4, #0
	bl sub_8079F50
_0807B222:
	adds r0, r4, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	lsls r0, r0, #2
	ldrh r1, [r6]
	adds r0, r1, r0
	strh r0, [r6]
	adds r0, r5, #0
	ldrh r1, [r6]
	ands r0, r1
	cmp r0, #0
	bne _0807B280
	adds r0, r4, #0
	bl sub_807A940
	lsls r0, r0, #0x18
	asrs r5, r0, #0x18
	cmp r5, #0
	bne _0807B250
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
_0807B250:
	movs r0, #1
	rsbs r0, r0, #0
	cmp r5, r0
	bne _0807B260
	adds r0, r4, #0
	movs r1, #7
	bl Proc_Goto
_0807B260:
	ldrh r6, [r6]
	lsrs r0, r6, #3
	subs r0, #2
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #6
	ldr r1, _0807B288 @ =gBg2Tm
	adds r0, r0, r1
	movs r1, #0xc
	movs r2, #1
	movs r3, #0
	bl TmFillRect_t
	movs r0, #4
	bl EnableBgSync
_0807B280:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807B288: .4byte gBg2Tm

	thumb_func_start sub_807B28C
sub_807B28C: @ 0x0807B28C
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x3b
	ldrb r0, [r0]
	subs r0, #2
	cmp r0, #8
	bls _0807B29C
	b _0807B3C4
_0807B29C:
	lsls r0, r0, #2
	ldr r1, _0807B2A8 @ =_0807B2AC
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0807B2A8: .4byte _0807B2AC
_0807B2AC: @ jump table
	.4byte _0807B2D0 @ case 0
	.4byte _0807B2DE @ case 1
	.4byte _0807B2D6 @ case 2
	.4byte _0807B2E4 @ case 3
	.4byte _0807B380 @ case 4
	.4byte _0807B308 @ case 5
	.4byte _0807B2F4 @ case 6
	.4byte _0807B328 @ case 7
	.4byte _0807B336 @ case 8
_0807B2D0:
	adds r0, r4, #0
	movs r1, #2
	b _0807B2E8
_0807B2D6:
	adds r0, r4, #0
	bl sub_8081E3C
	b _0807B2EC
_0807B2DE:
	adds r0, r4, #0
	movs r1, #4
	b _0807B2E8
_0807B2E4:
	adds r0, r4, #0
	movs r1, #0
_0807B2E8:
	bl sub_80815BC
_0807B2EC:
	adds r0, r4, #0
	bl sub_807ACE8
	b _0807B3C4
_0807B2F4:
	ldr r0, [r4, #0x58]
	bl Proc_End
	ldr r0, _0807B304 @ =ProcScr_Unk_0868B010
	adds r1, r4, #0
	bl SpawnProcLocking
	b _0807B350
	.align 2, 0
_0807B304: .4byte ProcScr_Unk_0868B010
_0807B308:
	ldr r0, [r4, #0x58]
	bl Proc_End
	movs r0, #0x80
	lsls r0, r0, #1
	movs r1, #0x80
	movs r2, #0x20
	movs r3, #0
	bl StartBgmVolumeChange
	bl InitPlayerDeployUnitPositions
	adds r0, r4, #0
	bl sub_8089234
	b _0807B350
_0807B328:
	ldr r0, [r4, #0x58]
	bl Proc_End
	adds r0, r4, #0
	bl sub_8076250
	b _0807B350
_0807B336:
	ldr r0, [r4, #0x58]
	bl Proc_End
	ldr r1, _0807B378 @ =0x0200E6D4
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r1, r4, #0
	bl sub_8095DF0
_0807B350:
	adds r0, r4, #0
	bl sub_807ACE8
	ldr r2, _0807B37C @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	b _0807B3C4
	.align 2, 0
_0807B378: .4byte 0x0200E6D4
_0807B37C: .4byte gDispIo
_0807B380:
	ldr r0, [r4, #0x58]
	bl Proc_End
	adds r0, r4, #0
	bl sub_807ACE8
	ldr r2, _0807B3D0 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #4
	bl sub_806EAE4
	ldr r1, _0807B3D4 @ =0x0200E6D4
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r1, r4, #0
	bl sub_80702BC
_0807B3C4:
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807B3D0: .4byte gDispIo
_0807B3D4: .4byte 0x0200E6D4

	thumb_func_start sub_807B3D8
sub_807B3D8: @ 0x0807B3D8
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r0, #0x3b
	ldrb r0, [r0]
	subs r0, #2
	cmp r0, #8
	bhi _0807B466
	lsls r0, r0, #2
	ldr r1, _0807B3F0 @ =_0807B3F4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0807B3F0: .4byte _0807B3F4
_0807B3F4: @ jump table
	.4byte _0807B418 @ case 0
	.4byte _0807B418 @ case 1
	.4byte _0807B418 @ case 2
	.4byte _0807B418 @ case 3
	.4byte _0807B458 @ case 4
	.4byte _0807B432 @ case 5
	.4byte _0807B458 @ case 6
	.4byte _0807B458 @ case 7
	.4byte _0807B440 @ case 8
_0807B418:
	adds r0, r4, #0
	bl sub_807A268
	ldr r0, [r4, #0x50]
	movs r1, #0
	bl Proc_Goto
	movs r1, #1
	rsbs r1, r1, #0
	adds r0, r4, #0
	bl sub_80829E8
	b _0807B466
_0807B432:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x80
	movs r2, #0x20
	movs r3, #0
	bl StartBgmVolumeChange
_0807B440:
	movs r0, #0x22
	movs r1, #0
	bl StartBgm
	adds r0, r4, #0
	bl sub_807A59C
	ldr r0, [r4, #0x50]
	movs r1, #0
	bl Proc_Goto
	b _0807B466
_0807B458:
	adds r0, r4, #0
	bl sub_807A59C
	ldr r0, [r4, #0x50]
	movs r1, #0
	bl Proc_Goto
_0807B466:
	adds r0, r4, #0
	adds r0, #0x3b
	ldrb r1, [r0]
	adds r5, r0, #0
	cmp r1, #6
	bne _0807B47C
	adds r0, r4, #0
	movs r1, #0xf
	bl Proc_Goto
	b _0807B490
_0807B47C:
	cmp r1, #6
	bls _0807B48A
	adds r0, r4, #0
	movs r1, #0xc
	bl Proc_Goto
	b _0807B490
_0807B48A:
	adds r0, r4, #0
	bl Proc_Break
_0807B490:
	movs r0, #0
	strb r0, [r5]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807B49C
sub_807B49C: @ 0x0807B49C
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, _0807B4BC @ =0x0200E6D4
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	bl sub_80796B0
	adds r4, #0x42
	movs r0, #0
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807B4BC: .4byte 0x0200E6D4

	thumb_func_start sub_807B4C0
sub_807B4C0: @ 0x0807B4C0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r8, r0
	mov r5, r8
	adds r5, #0x42
	ldrh r0, [r5]
	cmp r0, #0
	bne _0807B50C
	mov r1, r8
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	mov r0, r8
	bl sub_807A67C
	ldr r0, _0807B594 @ =gBg0Tm
	movs r1, #0xc
	movs r2, #0x13
	movs r3, #0
	bl TmFillRect_t
	ldr r0, _0807B598 @ =gBg1Tm
	movs r1, #0xc
	movs r2, #0x13
	movs r3, #0
	bl TmFillRect_t
	mov r0, r8
	bl sub_8079D84
_0807B50C:
	ldrh r4, [r5]
	adds r4, #0x10
	ldrh r0, [r5]
	movs r1, #0xc
	bl __udivsi3
	subs r4, r4, r0
	strh r4, [r5]
	lsls r4, r4, #0x10
	lsrs r7, r4, #0x13
	movs r0, #0
	rsbs r1, r7, #0
	str r1, [sp]
_0807B526:
	adds r1, r0, #1
	mov ip, r1
	cmp r7, #0
	beq _0807B56C
	ldr r3, _0807B59C @ =0x0200E8A4
	adds r2, r0, #0
	adds r2, #0xa
	lsls r2, r2, #6
	ldr r1, [sp]
	adds r1, #0xd
	lsls r4, r0, #6
	ldr r0, _0807B598 @ =gBg1Tm
	mov sl, r0
	ldr r0, _0807B594 @ =gBg0Tm
	mov sb, r0
	adds r6, r7, #0
	lsls r1, r1, #1
	adds r0, r4, r3
	adds r5, r1, r0
	adds r2, r2, r3
	adds r2, r1, r2
_0807B550:
	mov r0, sl
	adds r1, r4, r0
	ldrh r0, [r2]
	strh r0, [r1]
	mov r0, sb
	adds r1, r4, r0
	ldrh r0, [r5]
	strh r0, [r1]
	adds r5, #2
	adds r2, #2
	adds r4, #2
	subs r6, #1
	cmp r6, #0
	bne _0807B550
_0807B56C:
	mov r0, ip
	cmp r0, #7
	ble _0807B526
	movs r0, #3
	bl EnableBgSync
	cmp r7, #0xc
	ble _0807B582
	mov r0, r8
	bl Proc_Break
_0807B582:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807B594: .4byte gBg0Tm
_0807B598: .4byte gBg1Tm
_0807B59C: .4byte 0x0200E8A4

	thumb_func_start sub_807B5A0
sub_807B5A0: @ 0x0807B5A0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r6, r0, #0
	adds r5, r6, #0
	adds r5, #0x42
	ldrh r1, [r5]
	cmp r1, #0
	bne _0807B5BA
	adds r0, #0x2b
	strb r1, [r0]
_0807B5BA:
	ldrh r4, [r5]
	adds r4, #0x10
	ldrh r0, [r5]
	movs r1, #0xc
	bl __udivsi3
	subs r4, r4, r0
	strh r4, [r5]
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x13
	mov sl, r4
	movs r2, #0
	movs r0, #0xd
	mov r1, sl
	subs r1, r0, r1
	mov r8, r1
	movs r3, #0
	mov sb, r3
	mov r0, sl
	lsls r7, r0, #1
_0807B5E2:
	movs r5, #0
	lsls r1, r2, #6
	adds r3, r2, #1
	mov ip, r3
	adds r0, r7, r1
	ldr r3, _0807B610 @ =0x0200E8A4
	adds r4, r0, r3
	ldr r0, _0807B614 @ =gBg0Tm
	adds r3, r1, r0
	ldr r0, _0807B618 @ =gBg1Tm
	adds r1, r1, r0
	adds r0, r2, #0
	adds r0, #0xa
	lsls r0, r0, #6
	ldr r2, _0807B610 @ =0x0200E8A4
	adds r0, r0, r2
	adds r2, r7, r0
_0807B604:
	cmp r5, r8
	blt _0807B61C
	mov r0, sb
	strh r0, [r1]
	b _0807B622
	.align 2, 0
_0807B610: .4byte 0x0200E8A4
_0807B614: .4byte gBg0Tm
_0807B618: .4byte gBg1Tm
_0807B61C:
	ldrh r0, [r2]
	strh r0, [r1]
	ldrh r0, [r4]
_0807B622:
	strh r0, [r3]
	adds r4, #2
	adds r3, #2
	adds r2, #2
	adds r1, #2
	adds r5, #1
	cmp r5, #0xc
	ble _0807B604
	mov r2, ip
	cmp r2, #7
	ble _0807B5E2
	movs r0, #3
	bl EnableBgSync
	mov r1, sl
	cmp r1, #0xc
	ble _0807B68A
	adds r1, r6, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r0, r6, #0
	bl sub_8079A94
	adds r0, r6, #0
	bl Proc_Break
	ldr r1, _0807B698 @ =0x0200E6D4
	adds r0, r6, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r4, [r0, #4]
	bl sub_8079A28
	adds r0, r6, #0
	movs r1, #0
	bl sub_807A1C8
	adds r0, r6, #0
	adds r1, r4, #0
	movs r2, #1
	bl sub_8079928
	adds r0, r6, #0
	bl sub_807A67C
_0807B68A:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807B698: .4byte 0x0200E6D4

	thumb_func_start sub_807B69C
sub_807B69C: @ 0x0807B69C
	ldr r2, _0807B6B8 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_0807B6B8: .4byte gDispIo

	thumb_func_start sub_807B6BC
sub_807B6BC: @ 0x0807B6BC
	push {lr}
	ldr r0, _0807B6CC @ =0x08678E38
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_0807B6CC: .4byte 0x08678E38

	thumb_func_start sub_807B6D0
sub_807B6D0: @ 0x0807B6D0
	push {lr}
	ldr r0, _0807B6E8 @ =0x08678E38
	movs r1, #3
	bl SpawnProc
	bl sub_807A194
	bl sub_80791A0
	pop {r0}
	bx r0
	.align 2, 0
_0807B6E8: .4byte 0x08678E38

	thumb_func_start sub_807B6EC
sub_807B6EC: @ 0x0807B6EC
	adds r0, #0x42
	movs r1, #0
	strh r1, [r0]
	ldr r3, _0807B70C @ =gPal
	ldr r2, _0807B710 @ =0x020100A4
	movs r1, #0x80
	lsls r1, r1, #2
_0807B6FA:
	ldrh r0, [r3]
	strh r0, [r2]
	adds r3, #2
	adds r2, #2
	subs r1, #1
	cmp r1, #0
	bne _0807B6FA
	bx lr
	.align 2, 0
_0807B70C: .4byte gPal
_0807B710: .4byte 0x020100A4

	thumb_func_start sub_807B714
sub_807B714: @ 0x0807B714
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sb, r0
	adds r0, #0x42
	ldrb r5, [r0]
	ldr r2, _0807B7B8 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r6, #0
	ldr r4, _0807B7BC @ =gPal
	mov sl, r4
	movs r0, #0xf8
	lsls r0, r0, #7
	mov r8, r0
	ldr r1, _0807B7C0 @ =0x020100A4
	mov ip, r1
_0807B74E:
	lsls r7, r6, #1
	mov r4, ip
	ldrh r1, [r4]
	mov r0, r8
	ands r0, r1
	muls r0, r5, r0
	asrs r2, r0, #4
	mov r0, r8
	ands r2, r0
	movs r4, #0xf8
	lsls r4, r4, #2
	adds r0, r4, #0
	ands r0, r1
	muls r0, r5, r0
	asrs r3, r0, #4
	ands r3, r4
	movs r4, #0x1f
	adds r0, r4, #0
	ands r0, r1
	muls r0, r5, r0
	asrs r0, r0, #4
	ands r0, r4
	mov r4, sl
	adds r1, r7, r4
	orrs r2, r3
	orrs r2, r0
	strh r2, [r1]
	movs r0, #2
	add ip, r0
	adds r6, #1
	ldr r0, _0807B7C4 @ =0x000001FF
	cmp r6, r0
	ble _0807B74E
	bl EnablePalSync
	mov r1, sb
	adds r1, #0x42
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	cmp r5, #0x10
	bne _0807B7A8
	mov r0, sb
	bl Proc_Break
_0807B7A8:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807B7B8: .4byte gDispIo
_0807B7BC: .4byte gPal
_0807B7C0: .4byte 0x020100A4
_0807B7C4: .4byte 0x000001FF

	thumb_func_start sub_807B7C8
sub_807B7C8: @ 0x0807B7C8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sb, r0
	mov r1, sb
	adds r1, #0x42
	movs r0, #0x10
	ldrb r1, [r1]
	subs r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	movs r6, #0
	ldr r0, _0807B878 @ =gPal
	mov sl, r0
	movs r1, #0xf8
	lsls r1, r1, #7
	mov r8, r1
	ldr r4, _0807B87C @ =0x020100A4
	mov ip, r4
_0807B7F2:
	lsls r7, r6, #1
	mov r0, ip
	ldrh r1, [r0]
	mov r0, r8
	ands r0, r1
	muls r0, r5, r0
	asrs r2, r0, #4
	mov r4, r8
	ands r2, r4
	movs r4, #0xf8
	lsls r4, r4, #2
	adds r0, r4, #0
	ands r0, r1
	muls r0, r5, r0
	asrs r3, r0, #4
	ands r3, r4
	movs r4, #0x1f
	adds r0, r4, #0
	ands r0, r1
	muls r0, r5, r0
	asrs r0, r0, #4
	ands r0, r4
	mov r4, sl
	adds r1, r7, r4
	orrs r2, r3
	orrs r2, r0
	strh r2, [r1]
	movs r0, #2
	add ip, r0
	adds r6, #1
	ldr r0, _0807B880 @ =0x000001FF
	cmp r6, r0
	ble _0807B7F2
	bl EnablePalSync
	mov r1, sb
	adds r1, #0x42
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	cmp r5, #0
	bne _0807B86A
	ldr r2, _0807B884 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	mov r0, sb
	bl Proc_Break
_0807B86A:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807B878: .4byte gPal
_0807B87C: .4byte 0x020100A4
_0807B880: .4byte 0x000001FF
_0807B884: .4byte gDispIo

	thumb_func_start sub_807B888
sub_807B888: @ 0x0807B888
	push {lr}
	adds r1, r0, #0
	ldr r0, _0807B898 @ =0x08679008
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
_0807B898: .4byte 0x08679008

	thumb_func_start sub_807B89C
sub_807B89C: @ 0x0807B89C
	push {lr}
	adds r1, r0, #0
	ldr r0, _0807B8AC @ =0x08679028
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
_0807B8AC: .4byte 0x08679028

	thumb_func_start sub_807B8B0
sub_807B8B0: @ 0x0807B8B0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	adds r2, r0, #0
	adds r2, #0x43
	ldrb r3, [r2]
	cmp r3, r1
	beq _0807B8C0
	strb r1, [r2]
_0807B8C0:
	adds r1, r0, #0
	adds r1, #0x44
	movs r0, #1
	strb r0, [r1]
	bx lr
	.align 2, 0

	thumb_func_start sub_807B8CC
sub_807B8CC: @ 0x0807B8CC
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, #0x34
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r0, #2
	strb r3, [r0]
	ldr r4, _0807B908 @ =gPlaySt
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetChapterInfo
	adds r0, #0x3f
	ldrb r1, [r0]
	adds r0, r5, #0
	adds r0, #0x38
	strb r1, [r0]
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetChapterInfo
	adds r0, #0x40
	ldrb r1, [r0]
	adds r0, r5, #0
	adds r0, #0x39
	strb r1, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807B908: .4byte gPlaySt

	thumb_func_start sub_807B90C
sub_807B90C: @ 0x0807B90C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r0, r1, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r0, r0, #0x18
	lsls r2, r2, #0x18
	lsrs r6, r2, #0x18
	lsrs r0, r0, #0x1b
	movs r1, #6
	bl __umodsi3
	lsls r0, r0, #0x19
	lsrs r3, r0, #0x18
	adds r5, r3, #0
	cmp r4, #0
	bne _0807B978
	lsls r0, r6, #0x18
	asrs r2, r0, #0x18
	cmp r2, #0
	beq _0807B960
	ldr r2, _0807B954 @ =gBg0Tm
	ldr r1, _0807B958 @ =0x0000F240
	adds r0, r3, r1
	movs r4, #0x94
	lsls r4, r4, #1
	adds r1, r2, r4
	strh r0, [r1]
	ldr r1, _0807B95C @ =0x0000F241
	adds r0, r3, r1
	movs r3, #0x95
	lsls r3, r3, #1
	adds r1, r2, r3
	strh r0, [r1]
	b _0807B9B8
	.align 2, 0
_0807B954: .4byte gBg0Tm
_0807B958: .4byte 0x0000F240
_0807B95C: .4byte 0x0000F241
_0807B960:
	ldr r1, _0807B974 @ =gBg0Tm
	movs r4, #0x94
	lsls r4, r4, #1
	adds r0, r1, r4
	strh r2, [r0]
	movs r3, #0x95
	lsls r3, r3, #1
	adds r0, r1, r3
	b _0807B9B6
	.align 2, 0
_0807B974: .4byte gBg0Tm
_0807B978:
	lsls r0, r6, #0x18
	asrs r2, r0, #0x18
	cmp r2, #0
	beq _0807B9A8
	ldr r1, _0807B99C @ =gBg0Tm
	ldr r4, _0807B9A0 @ =0x0000FA40
	adds r2, r5, r4
	movs r3, #0x9d
	lsls r3, r3, #3
	adds r0, r1, r3
	strh r2, [r0]
	adds r4, #1
	adds r0, r5, r4
	ldr r2, _0807B9A4 @ =0x000004EA
	adds r1, r1, r2
	strh r0, [r1]
	b _0807B9B8
	.align 2, 0
_0807B99C: .4byte gBg0Tm
_0807B9A0: .4byte 0x0000FA40
_0807B9A4: .4byte 0x000004EA
_0807B9A8:
	ldr r0, _0807B9C4 @ =gBg0Tm
	movs r3, #0x9d
	lsls r3, r3, #3
	adds r1, r0, r3
	strh r2, [r1]
	ldr r4, _0807B9C8 @ =0x000004EA
	adds r0, r0, r4
_0807B9B6:
	strh r2, [r0]
_0807B9B8:
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807B9C4: .4byte gBg0Tm
_0807B9C8: .4byte 0x000004EA

	thumb_func_start sub_807B9CC
sub_807B9CC: @ 0x0807B9CC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov sl, r0
	ldr r0, [r0, #0x14]
	adds r0, #0x44
	ldrh r2, [r0]
	rsbs r1, r2, #0
	adds r0, r1, #0
	cmp r1, #0
	bge _0807B9EA
	adds r0, #0xf
_0807B9EA:
	asrs r0, r0, #4
	lsls r0, r0, #4
	subs r0, r1, r0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp]
	lsrs r0, r2, #4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #4]
	mov r0, sl
	adds r0, #0x40
	ldrh r0, [r0]
	cmp r0, r2
	beq _0807BAAC
	ldr r0, _0807BAA8 @ =gDispIo
	mov ip, r0
	movs r0, #0x20
	mov r1, ip
	ldrb r1, [r1, #1]
	orrs r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r2, ip
	strb r0, [r2, #1]
	mov r1, ip
	adds r1, #0x35
	movs r2, #1
	ldrb r0, [r1]
	orrs r0, r2
	movs r6, #2
	orrs r0, r6
	movs r3, #5
	rsbs r3, r3, #0
	mov sb, r3
	ands r0, r3
	movs r5, #8
	orrs r0, r5
	movs r4, #0x10
	orrs r0, r4
	strb r0, [r1]
	mov r3, ip
	adds r3, #0x34
	ldrb r0, [r3]
	orrs r0, r2
	orrs r0, r6
	movs r1, #4
	orrs r0, r1
	orrs r0, r5
	orrs r0, r4
	strb r0, [r3]
	mov r0, ip
	adds r0, #0x2d
	movs r3, #0
	strb r3, [r0]
	adds r0, #4
	movs r1, #0x28
	mov r8, r1
	mov r1, r8
	strb r1, [r0]
	subs r0, #5
	movs r4, #0xf0
	strb r4, [r0]
	mov r1, ip
	adds r1, #0x30
	movs r0, #0x98
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x2f
	strb r3, [r0]
	adds r0, #4
	strb r3, [r0]
	subs r0, #5
	strb r4, [r0]
	adds r0, #4
	mov r3, r8
	strb r3, [r0]
	adds r1, #6
	ldrb r0, [r1]
	orrs r2, r0
	orrs r2, r6
	mov r3, sb
	ands r2, r3
	orrs r2, r5
	movs r0, #0x11
	rsbs r0, r0, #0
	ands r2, r0
	strb r2, [r1]
	mov r1, sl
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	b _0807BB2A
	.align 2, 0
_0807BAA8: .4byte gDispIo
_0807BAAC:
	mov r7, sl
	adds r7, #0x29
	ldrb r0, [r7]
	cmp r0, #1
	bne _0807BB2A
	ldr r1, _0807BBFC @ =gDispIo
	mov r8, r1
	movs r0, #0x20
	ldrb r2, [r1, #1]
	orrs r0, r2
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r3, r8
	strb r0, [r3, #1]
	mov r2, r8
	adds r2, #0x35
	movs r1, #1
	ldrb r0, [r2]
	orrs r0, r1
	movs r6, #2
	orrs r0, r6
	movs r3, #4
	orrs r0, r3
	movs r5, #8
	orrs r0, r5
	movs r4, #0x10
	orrs r0, r4
	strb r0, [r2]
	subs r2, #1
	ldrb r0, [r2]
	orrs r0, r1
	orrs r0, r6
	orrs r0, r3
	orrs r0, r5
	orrs r0, r4
	strb r0, [r2]
	mov r0, r8
	adds r0, #0x2d
	movs r3, #0
	strb r3, [r0]
	subs r2, #3
	movs r0, #0x28
	strb r0, [r2]
	subs r2, #5
	movs r0, #0xf0
	strb r0, [r2]
	adds r2, #4
	movs r0, #0x98
	strb r0, [r2]
	adds r2, #6
	ldrb r0, [r2]
	orrs r1, r0
	orrs r1, r6
	movs r0, #5
	rsbs r0, r0, #0
	ands r1, r0
	orrs r1, r5
	orrs r1, r4
	strb r1, [r2]
	strb r3, [r7]
_0807BB2A:
	mov r1, sl
	ldr r0, [r1, #0x14]
	adds r1, r0, #0
	adds r1, #0x31
	ldrb r0, [r1]
	ldr r2, [sp]
	lsls r7, r2, #0x10
	cmp r0, #0xff
	beq _0807BB5C
	adds r2, r0, #0
	lsrs r0, r2, #1
	ldr r3, [sp, #4]
	subs r1, r0, r3
	cmp r1, #6
	bhi _0807BB5C
	movs r0, #1
	ands r2, r0
	lsls r0, r2, #6
	adds r0, #0x70
	lsls r1, r1, #4
	asrs r2, r7, #0x10
	adds r1, r1, r2
	adds r1, #0x28
	bl sub_804163C
_0807BB5C:
	movs r5, #0
	ldr r0, [sp, #4]
	lsls r6, r0, #1
	asrs r0, r7, #0x10
	adds r0, #0x28
	mov r8, r0
_0807BB68:
	adds r3, r6, r5
	mov r1, sl
	ldr r0, [r1, #0x14]
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r3, r0
	bge _0807BB9A
	lsrs r0, r5, #1
	lsls r0, r0, #4
	mov r2, r8
	adds r4, r0, r2
	cmp r4, #0x27
	ble _0807BB9A
	movs r1, #1
	ands r1, r5
	lsls r1, r1, #6
	adds r1, #0x70
	ldr r2, _0807BC00 @ =0x0200E6D4
	lsls r0, r3, #2
	adds r0, r0, r2
	ldr r3, [r0]
	movs r0, #3
	adds r2, r4, #0
	bl PutUnitSprite
_0807BB9A:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #0xd
	bls _0807BB68
	asrs r0, r7, #0x10
	cmp r0, #0
	beq _0807BBEA
	cmp r5, #0xf
	bhi _0807BBEA
	adds r7, r0, #0
	adds r7, #0x28
_0807BBB2:
	adds r4, r6, r5
	mov r3, sl
	ldr r0, [r3, #0x14]
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r4, r0
	bge _0807BBE0
	movs r1, #1
	ands r1, r5
	lsls r1, r1, #6
	adds r1, #0x70
	lsrs r2, r5, #1
	lsls r2, r2, #4
	adds r2, r2, r7
	movs r0, #0xff
	ands r2, r0
	ldr r3, _0807BC00 @ =0x0200E6D4
	lsls r0, r4, #2
	adds r0, r0, r3
	ldr r3, [r0]
	movs r0, #3
	bl PutUnitSprite
_0807BBE0:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #0xf
	bls _0807BBB2
_0807BBEA:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807BBFC: .4byte gDispIo
_0807BC00: .4byte 0x0200E6D4

	thumb_func_start sub_807BC04
sub_807BC04: @ 0x0807BC04
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	mov r8, r0
	ldr r1, _0807BC74 @ =0x08327264
	add r0, sp, #4
	movs r2, #6
	bl memcpy
	movs r7, #0x28
	mov r0, r8
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #0x1f
	bhi _0807BC2A
	movs r7, #0x74
_0807BC2A:
	mov r1, r8
	ldr r0, [r1, #0x14]
	adds r0, #0x2c
	movs r2, #1
	adds r5, r2, #0
	ldrb r0, [r0]
	ands r5, r0
	cmp r5, #0
	bne _0807BD28
	mov r0, r8
	adds r0, #0x37
	ldrb r1, [r0]
	mov sl, r0
	cmp r1, #0
	beq _0807BD28
	adds r4, r2, #0
	ands r4, r1
	cmp r4, #0
	beq _0807BC80
	movs r2, #0xa4
	mov sb, r2
	adds r2, r7, #2
	ldr r3, _0807BC78 @ =0x086790BA
	str r5, [sp]
	movs r0, #4
	movs r1, #0xa6
	bl PutSpriteExt
	ldr r0, _0807BC7C @ =0x0867913C
	ldr r3, [r0, #0x28]
	str r5, [sp]
	movs r0, #4
	movs r1, #0xdc
	adds r2, r7, #0
	bl PutSpriteExt
	b _0807BCA0
	.align 2, 0
_0807BC74: .4byte 0x08327264
_0807BC78: .4byte 0x086790BA
_0807BC7C: .4byte 0x0867913C
_0807BC80:
	movs r6, #0xa8
	mov sb, r6
	adds r2, r7, #2
	ldr r3, _0807BCD0 @ =0x086790A0
	str r4, [sp]
	movs r0, #4
	movs r1, #0xaa
	bl PutSpriteExt
	ldr r3, _0807BCD4 @ =0x08679098
	str r4, [sp]
	movs r0, #4
	movs r1, #0xe0
	adds r2, r7, #0
	bl PutSpriteExt
_0807BCA0:
	ldr r3, _0807BCD8 @ =0x0867908A
	movs r6, #0
	str r6, [sp]
	movs r0, #4
	mov r1, sb
	adds r2, r7, #0
	bl PutSpriteExt
	mov r1, sl
	ldrb r1, [r1]
	lsrs r0, r1, #1
	cmp r0, #9
	bhi _0807BCE0
	mov r1, sb
	adds r1, #0x28
	ldr r0, _0807BCDC @ =0x0867913C
	ldr r3, [r0, #0x2c]
	str r6, [sp]
	movs r0, #4
	adds r2, r7, #0
	bl PutSpriteExt
	b _0807BD00
	.align 2, 0
_0807BCD0: .4byte 0x086790A0
_0807BCD4: .4byte 0x08679098
_0807BCD8: .4byte 0x0867908A
_0807BCDC: .4byte 0x0867913C
_0807BCE0:
	mov r5, sb
	adds r5, #0x28
	ldr r4, _0807BDC4 @ =0x0867913C
	movs r1, #0xa
	bl __udivsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x16
	adds r0, r0, r4
	ldr r3, [r0]
	str r6, [sp]
	movs r0, #4
	adds r1, r5, #0
	adds r2, r7, #0
	bl PutSpriteExt
_0807BD00:
	mov r5, sb
	adds r5, #0x30
	ldr r4, _0807BDC4 @ =0x0867913C
	mov r2, sl
	ldrb r2, [r2]
	lsrs r0, r2, #1
	movs r1, #0xa
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x16
	adds r0, r0, r4
	ldr r3, [r0]
	movs r0, #0
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	adds r2, r7, #0
	bl PutSpriteExt
_0807BD28:
	mov r0, r8
	adds r0, #0x33
	ldrb r3, [r0]
	movs r1, #0xf
	ands r1, r3
	adds r2, r0, #0
	cmp r1, #0
	bne _0807BD5A
	adds r0, r3, #0
	adds r0, #0x10
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x5f
	bls _0807BD48
	strb r1, [r2]
_0807BD48:
	ldrb r0, [r2]
	movs r1, #0xf0
	ands r1, r0
	lsrs r0, r0, #4
	add r0, sp
	adds r0, #4
	ldrb r0, [r0]
	adds r1, r0, r1
	strb r1, [r2]
_0807BD5A:
	ldrb r0, [r2]
	subs r0, #1
	movs r6, #0
	strb r0, [r2]
	mov r4, r8
	adds r4, #0x34
	ldrb r7, [r4]
	cmp r7, #0x1f
	bhi _0807BDE0
	adds r1, r7, #0
	adds r1, #0x68
	mov r5, r8
	adds r5, #0x35
	ldrb r2, [r5]
	adds r2, #0x26
	ldr r3, _0807BDC8 @ =0x08679048
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x1c
	lsls r0, r0, #2
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
	ldrb r0, [r4]
	ldr r2, _0807BDCC @ =0x00001088
	adds r1, r0, r2
	ldrb r2, [r5]
	adds r2, #0x1e
	ldr r3, _0807BDD0 @ =0x0867907A
	str r6, [sp]
	movs r0, #4
	bl PutSpriteExt
	ldrb r7, [r4]
	ldr r0, _0807BDD4 @ =0x00001068
	adds r1, r7, r0
	ldrb r2, [r5]
	adds r2, #0x1e
	ldr r3, _0807BDD8 @ =0x08679082
	str r6, [sp]
	movs r0, #4
	bl PutSpriteExt
	ldrb r1, [r4]
	adds r1, #0x68
	ldrb r2, [r5]
	adds r2, #0x16
	ldr r3, _0807BDDC @ =0x08679050
	str r6, [sp]
	movs r0, #4
	bl PutSpriteExt
	b _0807BE32
	.align 2, 0
_0807BDC4: .4byte 0x0867913C
_0807BDC8: .4byte 0x08679048
_0807BDCC: .4byte 0x00001088
_0807BDD0: .4byte 0x0867907A
_0807BDD4: .4byte 0x00001068
_0807BDD8: .4byte 0x08679082
_0807BDDC: .4byte 0x08679050
_0807BDE0:
	ldrb r1, [r4]
	adds r1, #0x62
	mov r5, r8
	adds r5, #0x35
	ldrb r2, [r5]
	adds r2, #0x26
	ldr r3, _0807BE70 @ =0x08679048
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x1c
	lsls r0, r0, #2
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
	ldrb r1, [r4]
	adds r1, #0x42
	ldrb r2, [r5]
	adds r2, #0x1e
	ldr r3, _0807BE74 @ =0x0867907A
	str r6, [sp]
	movs r0, #4
	bl PutSpriteExt
	ldrb r1, [r4]
	adds r1, #0x62
	ldrb r2, [r5]
	adds r2, #0x1e
	ldr r3, _0807BE78 @ =0x08679082
	str r6, [sp]
	movs r0, #4
	bl PutSpriteExt
	ldrb r1, [r4]
	adds r1, #0x42
	ldrb r2, [r5]
	adds r2, #0x16
	ldr r3, _0807BE7C @ =0x08679050
	str r6, [sp]
	movs r0, #4
	bl PutSpriteExt
_0807BE32:
	movs r1, #0
	ldr r3, _0807BE80 @ =gPal
	ldr r6, _0807BE84 @ =0x000002CA
	adds r2, r3, r6
	movs r5, #0xf
	movs r4, #0xc8
	lsls r4, r4, #1
_0807BE40:
	mov r7, r8
	ldrh r7, [r7, #0x3e]
	lsrs r0, r7, #1
	adds r0, r0, r1
	ands r0, r5
	adds r0, r0, r4
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	strh r0, [r2]
	adds r2, #2
	adds r1, #1
	cmp r1, #9
	ble _0807BE40
	bl EnablePalSync
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807BE70: .4byte 0x08679048
_0807BE74: .4byte 0x0867907A
_0807BE78: .4byte 0x08679082
_0807BE7C: .4byte 0x08679050
_0807BE80: .4byte gPal
_0807BE84: .4byte 0x000002CA

	thumb_func_start sub_807BE88
sub_807BE88: @ 0x0807BE88
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r2, [r5, #0x14]
	adds r0, r2, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807BEA0
	cmp r0, #1
	beq _0807BED0
	b _0807BF5A
_0807BEA0:
	adds r1, r2, #0
	adds r1, #0x35
	ldrb r0, [r1]
	cmp r0, #0
	bne _0807BEB6
	adds r0, r2, #0
	adds r0, #0x33
	ldrb r0, [r0]
	lsls r1, r0, #4
	adds r1, #0x28
	b _0807BEC8
_0807BEB6:
	cmp r0, #1
	bne _0807BF5A
	adds r0, r2, #0
	adds r0, #0x33
	ldrb r1, [r1]
	adds r0, r1, r0
	ldrb r0, [r0]
	lsls r1, r0, #4
	adds r1, #0x48
_0807BEC8:
	movs r0, #0xc
	bl sub_80415CC
	b _0807BF5A
_0807BED0:
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #2
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0807BEF2
	adds r0, r2, #0
	adds r0, #0x33
	ldrb r0, [r0]
	cmp r0, #0
	bne _0807BEF2
	movs r0, #0x6c
	movs r1, #8
	bl sub_80415CC
	b _0807BF5A
_0807BEF2:
	ldr r1, [r5, #0x14]
	adds r2, r1, #0
	adds r2, #0x30
	movs r4, #1
	adds r0, r4, #0
	ldrb r2, [r2]
	ands r0, r2
	lsls r0, r0, #6
	adds r0, #0x70
	adds r1, #0x36
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #4
	adds r1, #0x28
	bl sub_80415CC
	ldr r0, [r5, #0x14]
	adds r1, r0, #0
	adds r1, #0x30
	ldrb r1, [r1]
	ands r4, r1
	lsls r4, r4, #6
	adds r4, #0x70
	adds r0, #0x36
	movs r2, #0
	ldrsb r2, [r0, r2]
	lsls r2, r2, #4
	adds r2, #0x30
	ldr r3, _0807BF64 @ =0x0867916C
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #0xd
	adds r1, r4, #0
	bl PutSpriteExt
	ldr r2, _0807BF68 @ =gPal
	ldr r3, _0807BF6C @ =0x02016874
	ldrh r5, [r5, #0x3e]
	lsrs r0, r5, #2
	movs r1, #0xf
	ands r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	movs r1, #0x9f
	lsls r1, r1, #2
	adds r2, r2, r1
	strh r0, [r2]
	bl EnablePalSync
_0807BF5A:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807BF64: .4byte 0x0867916C
_0807BF68: .4byte gPal
_0807BF6C: .4byte 0x02016874

	thumb_func_start sub_807BF70
sub_807BF70: @ 0x0807BF70
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r2, [r7, #0x14]
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #1
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0807BFA2
	adds r0, r2, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807BFA2
	ldrh r0, [r7, #0x3c]
	cmp r0, #0xff
	bhi _0807BFAC
	adds r0, #0x20
	b _0807BFAA
_0807BFA2:
	ldrh r0, [r7, #0x3c]
	cmp r0, #0
	beq _0807BFAC
	subs r0, #0x20
_0807BFAA:
	strh r0, [r7, #0x3c]
_0807BFAC:
	ldrh r0, [r7, #0x3c]
	cmp r0, #0x10
	bls _0807C06A
	ldr r2, _0807C07C @ =gPal
	ldrh r1, [r7, #0x3e]
	lsrs r0, r1, #3
	movs r1, #0xf
	ands r0, r1
	lsls r0, r0, #1
	ldr r1, _0807C080 @ =0x0831AAFC
	adds r0, r0, r1
	ldrh r0, [r0]
	ldr r1, _0807C084 @ =0x0000027A
	adds r2, r2, r1
	strh r0, [r2]
	bl EnablePalSync
	movs r2, #0x2a
	adds r2, r2, r7
	mov sl, r2
	ldrb r0, [r2]
	movs r1, #0xa
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #4
	bhi _0807C05E
	ldr r4, _0807C088 @ =gSinLut
	movs r0, #0x80
	adds r0, r0, r4
	mov sb, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	ldrh r1, [r7, #0x3c]
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, sb
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	ldrh r1, [r7, #0x3c]
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	movs r2, #0xff
	lsls r2, r2, #1
	ldr r3, _0807C08C @ =0x086791A2
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #0x68
	bl PutSprite
_0807C05E:
	mov r1, sl
	ldrb r0, [r1]
	cmp r0, #0
	beq _0807C06A
	adds r0, #1
	strb r0, [r1]
_0807C06A:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807C07C: .4byte gPal
_0807C080: .4byte 0x0831AAFC
_0807C084: .4byte 0x0000027A
_0807C088: .4byte gSinLut
_0807C08C: .4byte 0x086791A2

	thumb_func_start sub_807C090
sub_807C090: @ 0x0807C090
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r6, r0, #0
	ldr r3, _0807C118 @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r2, #0
	movs r0, #0xe
	strb r0, [r1]
	adds r1, #1
	movs r0, #8
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r2, [r0]
	ldr r0, _0807C11C @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	ldr r1, _0807C120 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	movs r4, #0
	movs r5, #0x80
	lsls r5, r5, #6
_0807C0DA:
	lsls r1, r4, #5
	str r5, [sp]
	movs r0, #0xd
	movs r2, #4
	ldr r3, _0807C124 @ =0x0867917A
	bl PutSprite
	adds r4, #1
	cmp r4, #7
	ble _0807C0DA
	adds r4, r6, #0
	adds r4, #0x30
	ldrb r0, [r4]
	cmp r0, #0
	beq _0807C12C
	adds r1, r0, #0
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #6
	lsls r2, r1, #4
	muls r1, r2, r1
	subs r0, r0, r1
	movs r1, #0xa
	bl __divsi3
	strh r0, [r6, #0x3a]
	ldrb r0, [r4]
	cmp r0, #9
	bhi _0807C128
	adds r0, #1
	b _0807C12A
	.align 2, 0
_0807C118: .4byte gDispIo
_0807C11C: .4byte 0x0000FFE0
_0807C120: .4byte 0x0000E0FF
_0807C124: .4byte 0x0867917A
_0807C128:
	movs r0, #0
_0807C12A:
	strb r0, [r4]
_0807C12C:
	ldr r0, [r6, #0x14]
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	bne _0807C13E
	ldrh r0, [r6, #0x3a]
	subs r0, #0xa0
	mov r8, r0
	b _0807C144
_0807C13E:
	ldrh r1, [r6, #0x3a]
	rsbs r1, r1, #0
	mov r8, r1
_0807C144:
	ldr r0, [r6, #0x14]
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #1
	bne _0807C1A8
	adds r2, r6, #0
	adds r2, #0x44
	ldrb r0, [r2]
	cmp r0, #0
	bne _0807C16C
	adds r0, r6, #0
	adds r0, #0x46
	ldrh r1, [r0]
	adds r7, r0, #0
	cmp r1, #0xff
	bhi _0807C19C
	adds r0, r1, #0
	adds r0, #0x20
	strh r0, [r7]
	b _0807C19C
_0807C16C:
	adds r0, r6, #0
	adds r0, #0x46
	ldrh r1, [r0]
	adds r7, r0, #0
	cmp r1, #0x3f
	bls _0807C180
	adds r0, r1, #0
	subs r0, #0x40
	strh r0, [r7]
	b _0807C19C
_0807C180:
	movs r0, #0
	strb r0, [r2]
	strh r0, [r7]
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x60]
	adds r1, r6, #0
	adds r1, #0x43
	ldrb r1, [r1]
	bl sub_8082D54
	adds r1, r6, #0
	adds r1, #0x48
	movs r0, #0x60
	strh r0, [r1]
_0807C19C:
	ldr r1, [r6, #0x14]
	adds r0, r1, #0
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #1
	beq _0807C208
_0807C1A8:
	mov r1, r8
	adds r1, #8
	ldr r5, _0807C1E4 @ =0x000001FF
	ands r1, r5
	ldr r3, _0807C1E8 @ =0x08679182
	movs r4, #0x80
	lsls r4, r4, #6
	str r4, [sp]
	movs r0, #0xd
	movs r2, #8
	bl PutSprite
	adds r0, r6, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #0
	bne _0807C1EC
	ldr r2, [r6, #0x14]
	adds r1, r2, #0
	adds r1, #0x2c
	movs r0, #1
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _0807C24E
	adds r0, r6, #0
	bl sub_807BF70
	b _0807C23E
	.align 2, 0
_0807C1E4: .4byte 0x000001FF
_0807C1E8: .4byte 0x08679182
_0807C1EC:
	movs r1, #0xa0
	lsls r1, r1, #1
	add r1, r8
	ands r1, r5
	ldr r3, _0807C204 @ =0x086791B0
	str r4, [sp]
	movs r0, #0xd
	movs r2, #8
	bl PutSprite
	b _0807C23E
	.align 2, 0
_0807C204: .4byte 0x086791B0
_0807C208:
	ldr r0, [r1, #0x60]
	adds r4, r6, #0
	adds r4, #0x48
	movs r1, #0x80
	lsls r1, r1, #2
	ldrh r2, [r4]
	subs r1, r1, r2
	ldr r5, _0807C280 @ =0x000001FF
	ands r1, r5
	ldrh r3, [r7]
	movs r2, #7
	bl sub_8082DA4
	ldr r0, [r6, #0x14]
	ldr r0, [r0, #0x60]
	movs r1, #0x80
	lsls r1, r1, #1
	ldrh r2, [r4]
	subs r1, r1, r2
	ands r1, r5
	ldrh r3, [r7]
	movs r2, #7
	bl sub_8082DA4
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
_0807C23E:
	ldr r2, [r6, #0x14]
	adds r1, r2, #0
	adds r1, #0x2c
	movs r0, #1
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0807C272
_0807C24E:
	adds r0, r2, #0
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #0
	bne _0807C272
	mov r0, r8
	asrs r1, r0, #1
	adds r1, #0xbc
	ldr r0, _0807C280 @ =0x000001FF
	ands r1, r0
	ldr r3, _0807C284 @ =0x086791BE
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #4
	movs r2, #8
	bl PutSpriteExt
_0807C272:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807C280: .4byte 0x000001FF
_0807C284: .4byte 0x086791BE

	thumb_func_start sub_807C288
sub_807C288: @ 0x0807C288
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r0, #0x2a
	movs r6, #0
	strb r6, [r0]
	movs r4, #0
	strh r6, [r5, #0x3e]
	subs r0, #1
	strb r4, [r0]
	ldr r0, [r5, #0x14]
	adds r0, #0x44
	ldrh r1, [r0]
	adds r0, r5, #0
	adds r0, #0x40
	strh r1, [r0]
	bl ForceSyncUnitSpriteSheet
	ldr r0, [r5, #0x14]
	adds r1, r0, #0
	adds r1, #0x35
	adds r0, #0x33
	ldrb r1, [r1]
	adds r0, r1, r0
	ldrb r0, [r0]
	adds r1, r5, #0
	adds r1, #0x2b
	strb r0, [r1]
	ldr r0, [r5, #0x14]
	adds r0, #0x35
	ldrb r1, [r0]
	adds r0, r5, #0
	adds r0, #0x2c
	strb r1, [r0]
	movs r0, #0xa0
	strh r0, [r5, #0x3a]
	ldr r0, [r5, #0x14]
	adds r0, #0x29
	ldrb r0, [r0]
	adds r1, r5, #0
	adds r1, #0x2d
	strb r0, [r1]
	ldr r0, [r5, #0x14]
	adds r0, #0x2a
	ldrb r0, [r0]
	adds r1, #1
	strb r0, [r1]
	ldr r0, [r5, #0x14]
	adds r0, #0x2b
	ldrb r0, [r0]
	adds r1, #1
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x30
	strb r4, [r0]
	adds r0, #2
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	ldr r0, [r5, #0x14]
	bl sub_807CE98
	adds r1, r5, #0
	adds r1, #0x31
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x44
	strb r4, [r0]
	ldr r0, [r5, #0x14]
	adds r0, #0x34
	ldrb r0, [r0]
	adds r2, r5, #0
	adds r2, #0x43
	strb r0, [r2]
	adds r1, #0x17
	movs r0, #0x60
	strh r0, [r1]
	ldr r0, [r5, #0x14]
	ldrh r1, [r0, #0x34]
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	bne _0807C33E
	adds r0, r5, #0
	adds r0, #0x46
	strh r1, [r0]
	ldr r0, [r5, #0x14]
	ldr r0, [r0, #0x60]
	movs r1, #5
	bl sub_8082D54
	b _0807C35E
_0807C33E:
	adds r0, r5, #0
	adds r0, #0x46
	strh r6, [r0]
	ldr r0, [r5, #0x14]
	ldr r4, [r0, #0x60]
	ldrb r0, [r2]
	movs r1, #1
	bl sub_807CF2C
	adds r1, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	subs r1, #5
	adds r0, r4, #0
	bl sub_8082D54
_0807C35E:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_807C364
sub_807C364: @ 0x0807C364
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, [r5, #0x14]
	adds r0, #0x2a
	adds r1, r5, #0
	adds r1, #0x2e
	ldrb r0, [r0]
	ldrb r2, [r1]
	cmp r0, r2
	beq _0807C37A
	strb r0, [r1]
_0807C37A:
	ldr r0, [r5, #0x14]
	adds r1, r0, #0
	adds r1, #0x2b
	adds r4, r5, #0
	adds r4, #0x2f
	ldrb r1, [r1]
	ldrb r2, [r4]
	cmp r1, r2
	beq _0807C3A4
	bl sub_807CE98
	adds r1, r5, #0
	adds r1, #0x31
	strb r0, [r1]
	ldr r0, [r5, #0x14]
	adds r0, #0x2b
	ldrb r0, [r0]
	strb r0, [r4]
	subs r1, #1
	movs r0, #1
	strb r0, [r1]
_0807C3A4:
	bl SyncUnitSpriteSheet
	ldr r2, [r5, #0x14]
	adds r0, r2, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	bne _0807C3C0
	adds r0, r5, #0
	bl sub_807BC04
	adds r4, r5, #0
	adds r4, #0x32
	b _0807C432
_0807C3C0:
	ldr r1, _0807C3F4 @ =0x0000FF80
	adds r0, r2, #0
	adds r0, #0x44
	ldrh r2, [r0]
	subs r2, #0x28
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	adds r0, r5, #0
	bl sub_807B9CC
	ldr r0, [r5, #0x14]
	adds r0, #0x44
	ldrh r0, [r0]
	cmp r0, #0
	beq _0807C3F8
	adds r4, r5, #0
	adds r4, #0x32
	ldrb r1, [r4]
	movs r0, #0
	movs r2, #1
	bl sub_807B90C
	b _0807C406
	.align 2, 0
_0807C3F4: .4byte 0x0000FF80
_0807C3F8:
	adds r4, r5, #0
	adds r4, #0x32
	ldrb r1, [r4]
	movs r0, #0
	movs r2, #0
	bl sub_807B90C
_0807C406:
	ldr r1, [r5, #0x14]
	adds r0, r1, #0
	adds r0, #0x44
	ldrh r0, [r0]
	lsrs r0, r0, #4
	adds r0, #7
	lsls r0, r0, #1
	adds r1, #0x2d
	ldrb r1, [r1]
	cmp r0, r1
	bge _0807C428
	ldrb r1, [r4]
	movs r0, #1
	movs r2, #1
	bl sub_807B90C
	b _0807C432
_0807C428:
	ldrb r1, [r4]
	movs r0, #1
	movs r2, #0
	bl sub_807B90C
_0807C432:
	adds r0, r5, #0
	bl sub_807BE88
	adds r0, r5, #0
	bl sub_807C090
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x1b
	cmp r0, #5
	bls _0807C450
	movs r0, #0
	strb r0, [r4]
_0807C450:
	ldr r0, [r5, #0x14]
	adds r0, #0x44
	ldrh r1, [r0]
	adds r0, r5, #0
	adds r0, #0x40
	strh r1, [r0]
	adds r3, r5, #0
	adds r3, #0x2c
	ldr r0, [r5, #0x14]
	adds r2, r0, #0
	adds r2, #0x35
	ldrb r1, [r2]
	ldrb r4, [r3]
	cmp r4, r1
	beq _0807C476
	strb r1, [r3]
	adds r4, r5, #0
	adds r4, #0x2b
	b _0807C4E4
_0807C476:
	adds r1, r5, #0
	adds r1, #0x2b
	ldrb r2, [r2]
	adds r0, #0x33
	adds r0, r0, r2
	adds r4, r1, #0
	ldrb r1, [r4]
	ldrb r0, [r0]
	cmp r1, r0
	beq _0807C4E4
	cmp r2, #0
	bne _0807C4B6
	lsls r1, r1, #1
	adds r1, #5
	movs r0, #1
	movs r2, #0xa
	bl sub_8041728
	ldr r0, [r5, #0x14]
	adds r1, r0, #0
	adds r1, #0x35
	adds r0, #0x33
	ldrb r1, [r1]
	adds r0, r1, r0
	ldrb r0, [r0]
	lsls r1, r0, #1
	adds r1, #5
	movs r0, #1
	movs r2, #0xa
	bl sub_804169C
	b _0807C4DE
_0807C4B6:
	ldrb r2, [r4]
	lsls r1, r2, #1
	adds r1, #9
	movs r0, #1
	movs r2, #0xa
	bl sub_8041728
	ldr r0, [r5, #0x14]
	adds r1, r0, #0
	adds r1, #0x35
	adds r0, #0x33
	ldrb r1, [r1]
	adds r0, r1, r0
	ldrb r0, [r0]
	lsls r1, r0, #1
	adds r1, #9
	movs r0, #1
	movs r2, #0xa
	bl sub_804169C
_0807C4DE:
	movs r0, #2
	bl EnableBgSync
_0807C4E4:
	ldr r0, [r5, #0x14]
	adds r1, r0, #0
	adds r1, #0x35
	adds r0, #0x33
	ldrb r1, [r1]
	adds r0, r1, r0
	ldrb r0, [r0]
	strb r0, [r4]
	ldrh r0, [r5, #0x3e]
	adds r0, #1
	strh r0, [r5, #0x3e]
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start nullsub_38
nullsub_38: @ 0x0807C500
	bx lr
	.align 2, 0

	thumb_func_start nullsub_39
nullsub_39: @ 0x0807C504
	bx lr
	.align 2, 0

	thumb_func_start sub_807C508
sub_807C508: @ 0x0807C508
	push {lr}
	adds r1, r0, #0
	ldr r0, _0807C51C @ =0x0867923C
	bl SpawnProc
	movs r1, #0
	strh r1, [r0, #0x3c]
	pop {r1}
	bx r1
	.align 2, 0
_0807C51C: .4byte 0x0867923C

	thumb_func_start sub_807C520
sub_807C520: @ 0x0807C520
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r2, r0, #0
	adds r3, r2, #0
	subs r3, #0x38
	cmp r3, #0
	bge _0807C536
	movs r7, #0
	adds r6, r2, #0
	b _0807C54C
_0807C536:
	adds r0, r2, #0
	adds r0, #0x38
	cmp r0, #0xf0
	ble _0807C546
	movs r7, #0xf
	adds r6, r2, #0
	subs r6, #0x78
	b _0807C54C
_0807C546:
	asrs r7, r3, #3
	lsls r0, r7, #3
	subs r6, r2, r0
_0807C54C:
	adds r3, r1, #0
	subs r3, #0x28
	adds r0, r1, #0
	adds r0, #0x30
	cmp r0, #0xa0
	ble _0807C55E
	movs r5, #8
	subs r1, #0x40
	b _0807C56E
_0807C55E:
	adds r0, r3, #0
	cmp r0, #0
	bge _0807C568
	adds r0, r1, #0
	subs r0, #0x21
_0807C568:
	asrs r5, r0, #3
	lsls r0, r5, #3
	subs r1, r1, r0
_0807C56E:
	mov r8, r1
	ldr r4, _0807C5B4 @ =0x02021B10
	adds r0, r4, #0
	movs r1, #2
	adds r2, r7, #0
	bl PutNumberOrBlank
	adds r0, r4, #0
	adds r0, #0x80
	movs r1, #2
	adds r2, r5, #0
	bl PutNumberOrBlank
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r4, r1
	movs r1, #2
	adds r2, r6, #0
	bl PutNumberOrBlank
	movs r1, #0xc0
	lsls r1, r1, #1
	adds r0, r4, r1
	movs r1, #2
	mov r2, r8
	bl PutNumberOrBlank
	movs r0, #1
	bl EnableBgSync
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807C5B4: .4byte 0x02021B10

	thumb_func_start sub_807C5B8
sub_807C5B8: @ 0x0807C5B8
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	adds r0, #0x29
	ldrb r5, [r0]
	cmp r5, #0
	bne _0807C5F8
	adds r1, r4, #0
	adds r1, #0x3c
	movs r0, #1
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #9
	bl Proc_Goto
	ldr r0, _0807C5F4 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _0807C5EA
	b _0807C7A6
_0807C5EA:
	movs r0, #0x6a
	bl m4aSongNumStart
	b _0807C7A6
	.align 2, 0
_0807C5F4: .4byte gPlaySt
_0807C5F8:
	cmp r5, #1
	beq _0807C5FE
	b _0807C7A6
_0807C5FE:
	adds r1, r4, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	mov sb, r0
	adds r0, r4, #0
	adds r0, #0x3c
	ldrb r2, [r0]
	adds r0, r5, #0
	ands r0, r2
	mov r8, r1
	cmp r0, #0
	beq _0807C64C
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _0807C64C
	mov r1, sb
	cmp r1, #0
	beq _0807C6D4
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
	ldr r0, [r4, #0x50]
	adds r0, #0x2a
	strb r5, [r0]
	ldr r0, _0807C648 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _0807C63E
	b _0807C798
_0807C63E:
	movs r0, #0x6a
	bl m4aSongNumStart
	b _0807C798
	.align 2, 0
_0807C648: .4byte gPlaySt
_0807C64C:
	ldr r7, _0807C6C8 @ =0x0200E6D4
	adds r5, r4, #0
	adds r5, #0x30
	ldrb r2, [r5]
	lsls r0, r2, #2
	adds r0, r0, r7
	ldr r2, [r0]
	movs r0, #8
	ldrh r1, [r2, #0xc]
	ands r0, r1
	cmp r0, #0
	beq _0807C714
	adds r1, r4, #0
	adds r1, #0x2c
	movs r6, #1
	adds r0, r6, #0
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0807C680
	adds r0, r2, #0
	bl sub_8082B74
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807C6EC
_0807C680:
	adds r0, r4, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	mov r2, r8
	ldrb r2, [r2]
	cmp r0, r2
	bls _0807C6D4
	ldrb r1, [r5]
	lsls r0, r1, #2
	adds r0, r0, r7
	ldr r1, [r0]
	ldr r0, _0807C6CC @ =0x0000FFF5
	ldrh r2, [r1, #0xc]
	ands r0, r2
	strh r0, [r1, #0xc]
	ldrb r5, [r5]
	lsls r0, r5, #2
	adds r0, r0, r7
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl sub_80791B4
	ldr r0, _0807C6D0 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807C6BE
	movs r0, #0x6a
	bl m4aSongNumStart
_0807C6BE:
	mov r1, r8
	ldrb r0, [r1]
	adds r0, #1
	b _0807C764
	.align 2, 0
_0807C6C8: .4byte 0x0200E6D4
_0807C6CC: .4byte 0x0000FFF5
_0807C6D0: .4byte gPlaySt
_0807C6D4:
	ldr r0, _0807C6E8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807C798
	movs r0, #0x6c
	bl m4aSongNumStart
	b _0807C798
	.align 2, 0
_0807C6E8: .4byte gPlaySt
_0807C6EC:
	adds r0, r6, #0
	ldrb r5, [r5]
	ands r0, r5
	lsls r0, r0, #6
	adds r0, #0x70
	adds r1, r4, #0
	adds r1, #0x36
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	lsls r1, r1, #4
	adds r1, #0x28
	ldr r2, _0807C710 @ =0x000006C1
	adds r3, r4, #0
	bl sub_8082B00
	b _0807C7A6
	.align 2, 0
_0807C710: .4byte 0x000006C1
_0807C714:
	adds r1, r4, #0
	adds r1, #0x2c
	movs r0, #1
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _0807C72E
	adds r0, r2, #0
	bl sub_8079404
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0807C788
_0807C72E:
	ldrb r2, [r5]
	lsls r0, r2, #2
	adds r0, r0, r7
	ldr r1, [r0]
	movs r0, #0xa
	ldrh r2, [r1, #0xc]
	orrs r0, r2
	strh r0, [r1, #0xc]
	ldrb r5, [r5]
	lsls r0, r5, #2
	adds r0, r0, r7
	ldr r0, [r0]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	bl sub_80791DC
	ldr r0, _0807C784 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807C75E
	movs r0, #0x6b
	bl m4aSongNumStart
_0807C75E:
	mov r1, r8
	ldrb r0, [r1]
	subs r0, #1
_0807C764:
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x44
	ldrh r0, [r0]
	lsrs r1, r0, #4
	adds r0, r4, #0
	adds r0, #0x36
	ldrb r0, [r0]
	adds r1, r0, r1
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	adds r0, r4, #0
	bl sub_8079F50
	b _0807C798
	.align 2, 0
_0807C784: .4byte gPlaySt
_0807C788:
	ldr r0, _0807C7B4 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807C798
	movs r0, #0x6c
	bl m4aSongNumStart
_0807C798:
	mov r2, r8
	ldrb r2, [r2]
	cmp sb, r2
	beq _0807C7A6
	adds r0, r4, #0
	bl sub_8079EA0
_0807C7A6:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807C7B4: .4byte gPlaySt

	thumb_func_start sub_807C7B8
sub_807C7B8: @ 0x0807C7B8
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0x29
	adds r0, r0, r4
	mov ip, r0
	ldrb r3, [r0]
	cmp r3, #0
	bne _0807C7E8
	adds r0, r4, #0
	movs r1, #9
	bl Proc_Goto
	ldr r0, _0807C7E4 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807C834
	movs r0, #0x6a
	bl m4aSongNumStart
	b _0807C834
	.align 2, 0
_0807C7E4: .4byte gPlaySt
_0807C7E8:
	cmp r3, #1
	bne _0807C834
	adds r1, r4, #0
	adds r1, #0x30
	ldrb r0, [r1]
	adds r2, r4, #0
	adds r2, #0x31
	strb r0, [r2]
	ldrb r0, [r1]
	adds r1, #2
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x44
	ldrh r1, [r0]
	subs r0, #4
	movs r2, #0
	strh r1, [r0]
	subs r0, #0xa
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x37
	strb r0, [r1]
	mov r0, ip
	strb r2, [r0]
	adds r0, r4, #0
	adds r0, #0x35
	strb r3, [r0]
	ldr r0, _0807C83C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807C82E
	movs r0, #0x6a
	bl m4aSongNumStart
_0807C82E:
	adds r0, r4, #0
	bl sub_8079A94
_0807C834:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807C83C: .4byte gPlaySt

	thumb_func_start sub_807C840
sub_807C840: @ 0x0807C840
	mov ip, r0
	mov r3, ip
	adds r3, #0x30
	adds r0, #0x31
	ldrb r1, [r3]
	ldrb r0, [r0]
	cmp r1, r0
	bne _0807C882
	ldrb r1, [r3]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0807C87E
	adds r2, r1, #1
	mov r0, ip
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r2, r0
	bge _0807C86A
	strb r2, [r3]
	b _0807C882
_0807C86A:
	cmp r1, #1
	bls _0807C882
	subs r0, r1, #2
	strb r0, [r3]
	mov r1, ip
	adds r1, #0x36
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	b _0807C882
_0807C87E:
	subs r0, r1, #1
	strb r0, [r3]
_0807C882:
	bx lr

	thumb_func_start sub_807C884
sub_807C884: @ 0x0807C884
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r0, [r4]
	cmp r0, #0
	bne _0807C8E0
	adds r0, r5, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #1
	beq _0807C916
	ldr r0, [r5, #0x50]
	movs r1, #5
	bl sub_807B8B0
	adds r0, r5, #0
	adds r0, #0x32
	ldrb r1, [r0]
	subs r0, #2
	strb r1, [r0]
	movs r0, #1
	strb r0, [r4]
	adds r0, r5, #0
	bl sub_807C840
	adds r0, r5, #0
	bl sub_8079D84
	adds r0, r5, #0
	bl sub_80798EC
	ldr r0, _0807C8DC @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807C96C
	movs r0, #0x6a
	bl m4aSongNumStart
	b _0807C96C
	.align 2, 0
_0807C8DC: .4byte gPlaySt
_0807C8E0:
	cmp r0, #1
	bne _0807C96C
	adds r7, r5, #0
	adds r7, #0x30
	adds r6, r5, #0
	adds r6, #0x31
	ldrb r0, [r7]
	ldrb r1, [r6]
	cmp r0, r1
	beq _0807C916
	ldr r0, _0807C928 @ =0x0200E6D4
	mov r8, r0
	ldrb r1, [r7]
	lsls r0, r1, #2
	add r0, r8
	ldr r0, [r0]
	bl GetUnitItemCount
	adds r4, r0, #0
	ldrb r1, [r6]
	lsls r0, r1, #2
	add r0, r8
	ldr r0, [r0]
	bl GetUnitItemCount
	cmn r4, r0
	bne _0807C930
_0807C916:
	ldr r0, _0807C92C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807C96C
	movs r0, #0x6c
	bl m4aSongNumStart
	b _0807C96C
	.align 2, 0
_0807C928: .4byte 0x0200E6D4
_0807C92C: .4byte gPlaySt
_0807C930:
	ldrb r6, [r6]
	lsls r0, r6, #2
	add r0, r8
	ldr r0, [r0]
	str r0, [r5, #0x48]
	ldrb r7, [r7]
	lsls r0, r7, #2
	add r0, r8
	ldr r0, [r0]
	str r0, [r5, #0x4c]
	adds r0, r5, #0
	movs r1, #1
	bl sub_80829E8
	adds r1, r5, #0
	adds r1, #0x3b
	movs r0, #2
	strb r0, [r1]
	adds r0, r5, #0
	movs r1, #3
	bl Proc_Goto
	ldr r0, _0807C978 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807C96C
	movs r0, #0x6a
	bl m4aSongNumStart
_0807C96C:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807C978: .4byte gPlaySt

	thumb_func_start sub_807C97C
sub_807C97C: @ 0x0807C97C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _0807C9EA
	ldr r6, _0807C9B0 @ =0x0200E6D4
	adds r5, r4, #0
	adds r5, #0x30
	ldrb r1, [r5]
	lsls r0, r1, #2
	adds r0, r0, r6
	ldr r0, [r0]
	bl GetUnitItemCount
	cmp r0, #0
	bne _0807C9B8
	ldr r0, _0807C9B4 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807C9EA
	movs r0, #0x6c
	bl m4aSongNumStart
	b _0807C9EA
	.align 2, 0
_0807C9B0: .4byte 0x0200E6D4
_0807C9B4: .4byte gPlaySt
_0807C9B8:
	ldrb r5, [r5]
	lsls r0, r5, #2
	adds r0, r0, r6
	ldr r0, [r0]
	str r0, [r4, #0x48]
	adds r0, r4, #0
	movs r1, #1
	bl sub_80829E8
	adds r1, r4, #0
	adds r1, #0x3b
	movs r0, #4
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
	ldr r0, _0807C9F0 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807C9EA
	movs r0, #0x6a
	bl m4aSongNumStart
_0807C9EA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807C9F0: .4byte gPlaySt

	thumb_func_start sub_807C9F4
sub_807C9F4: @ 0x0807C9F4
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _0807CA38
	ldr r1, _0807CA40 @ =0x0200E6D4
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	str r0, [r4, #0x48]
	adds r0, r4, #0
	movs r1, #1
	bl sub_80829E8
	adds r1, r4, #0
	adds r1, #0x3b
	movs r0, #3
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
	ldr r0, _0807CA44 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807CA38
	movs r0, #0x6a
	bl m4aSongNumStart
_0807CA38:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807CA40: .4byte 0x0200E6D4
_0807CA44: .4byte gPlaySt

	thumb_func_start sub_807CA48
sub_807CA48: @ 0x0807CA48
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _0807CA8C
	ldr r1, _0807CA94 @ =0x0200E6D4
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	str r0, [r4, #0x48]
	adds r0, r4, #0
	movs r1, #1
	bl sub_80829E8
	adds r1, r4, #0
	adds r1, #0x3b
	movs r0, #5
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
	ldr r0, _0807CA98 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807CA8C
	movs r0, #0x6a
	bl m4aSongNumStart
_0807CA8C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807CA94: .4byte 0x0200E6D4
_0807CA98: .4byte gPlaySt

	thumb_func_start sub_807CA9C
sub_807CA9C: @ 0x0807CA9C
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _0807CAC8
	ldr r0, _0807CAD0 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807CAB8
	movs r0, #0x6a
	bl m4aSongNumStart
_0807CAB8:
	adds r1, r4, #0
	adds r1, #0x3b
	movs r0, #0xa
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #0xd
	bl Proc_Goto
_0807CAC8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807CAD0: .4byte gPlaySt

	thumb_func_start sub_807CAD4
sub_807CAD4: @ 0x0807CAD4
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _0807CAFE
	adds r1, r4, #0
	adds r1, #0x35
	movs r0, #2
	strb r0, [r1]
	ldr r0, _0807CB04 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807CAF8
	movs r0, #0x6a
	bl m4aSongNumStart
_0807CAF8:
	adds r0, r4, #0
	bl sub_8079A94
_0807CAFE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807CB04: .4byte gPlaySt

	thumb_func_start sub_807CB08
sub_807CB08: @ 0x0807CB08
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _0807CB34
	ldr r0, _0807CB3C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807CB24
	movs r0, #0x6a
	bl m4aSongNumStart
_0807CB24:
	adds r1, r4, #0
	adds r1, #0x3b
	movs r0, #8
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #0xd
	bl Proc_Goto
_0807CB34:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807CB3C: .4byte gPlaySt

	thumb_func_start sub_807CB40
sub_807CB40: @ 0x0807CB40
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _0807CB6C
	ldr r0, _0807CB74 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807CB5C
	movs r0, #0x6a
	bl m4aSongNumStart
_0807CB5C:
	adds r1, r4, #0
	adds r1, #0x3b
	movs r0, #9
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #0xd
	bl Proc_Goto
_0807CB6C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807CB74: .4byte gPlaySt

	thumb_func_start sub_807CB78
sub_807CB78: @ 0x0807CB78
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _0807CBA4
	ldr r0, _0807CBAC @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807CB94
	movs r0, #0x6a
	bl m4aSongNumStart
_0807CB94:
	adds r1, r4, #0
	adds r1, #0x3b
	movs r0, #7
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #0xd
	bl Proc_Goto
_0807CBA4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807CBAC: .4byte gPlaySt

	thumb_func_start sub_807CBB0
sub_807CBB0: @ 0x0807CBB0
	push {lr}
	adds r1, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _0807CBD4
	adds r0, r1, #0
	movs r1, #6
	bl Proc_Goto
	ldr r0, _0807CBD8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807CBD4
	movs r0, #0x6a
	bl m4aSongNumStart
_0807CBD4:
	pop {r0}
	bx r0
	.align 2, 0
_0807CBD8: .4byte gPlaySt

	thumb_func_start sub_807CBDC
sub_807CBDC: @ 0x0807CBDC
	push {lr}
	adds r1, r0, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _0807CC20
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807CC10
	adds r0, r1, #0
	movs r1, #0xe
	bl Proc_Goto
	ldr r0, _0807CC0C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807CC20
	movs r0, #0x6a
	bl m4aSongNumStart
	b _0807CC20
	.align 2, 0
_0807CC0C: .4byte gPlaySt
_0807CC10:
	ldr r0, _0807CC24 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807CC20
	movs r0, #0x6c
	bl m4aSongNumStart
_0807CC20:
	pop {r0}
	bx r0
	.align 2, 0
_0807CC24: .4byte gPlaySt

	thumb_func_start sub_807CC28
sub_807CC28: @ 0x0807CC28
	ldr r1, _0807CC30 @ =0x020155E4
	movs r0, #0
	strb r0, [r1]
	bx lr
	.align 2, 0
_0807CC30: .4byte 0x020155E4

	thumb_func_start sub_807CC34
sub_807CC34: @ 0x0807CC34
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r6, r2, #0
	ldr r0, [sp, #0x18]
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r3, r3, #0x18
	lsrs r4, r3, #0x18
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov ip, r0
	ldr r3, _0807CCBC @ =0x020155E4
	ldrb r0, [r3]
	cmp r0, #0xf
	bhi _0807CCB4
	ldr r2, _0807CCC0 @ =0x020154A4
	lsls r0, r0, #2
	ldrb r7, [r3]
	adds r0, r0, r7
	lsls r0, r0, #2
	adds r0, r0, r2
	strb r1, [r0, #9]
	ldrb r1, [r3]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	str r5, [r0]
	ldrb r7, [r3]
	lsls r0, r7, #2
	adds r1, r7, #0
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	strb r4, [r0, #8]
	ldrb r7, [r3]
	lsls r0, r7, #2
	adds r1, r7, #0
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r1, r2, #0
	adds r1, #0xc
	adds r0, r0, r1
	str r6, [r0]
	ldrb r7, [r3]
	lsls r0, r7, #2
	adds r1, r7, #0
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r1, r2, #4
	adds r0, r0, r1
	ldr r1, [sp, #0x14]
	str r1, [r0]
	ldrb r7, [r3]
	lsls r0, r7, #2
	adds r1, r7, #0
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	mov r7, ip
	strb r7, [r0, #0x10]
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
_0807CCB4:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807CCBC: .4byte 0x020155E4
_0807CCC0: .4byte 0x020154A4

	thumb_func_start sub_807CCC4
sub_807CCC4: @ 0x0807CCC4
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	movs r5, #0
	movs r3, #0
	ldr r0, _0807CD04 @ =0x020155E4
	adds r6, r0, #0
	ldrb r0, [r6]
	cmp r3, r0
	bge _0807CD1C
	adds r2, r4, #0
	adds r2, #0x35
	ldr r1, _0807CD08 @ =0x020154A4
_0807CCDC:
	ldrb r7, [r1, #9]
	ldrb r0, [r2]
	cmp r7, r0
	bne _0807CD12
	adds r0, r4, #0
	adds r0, #0x33
	ldrb r7, [r2]
	adds r0, r7, r0
	ldrb r0, [r0]
	cmp r5, r0
	bne _0807CD0C
	ldrb r0, [r1, #8]
	cmp r0, #1
	beq _0807CD1C
	ldr r1, [r1]
	adds r0, r4, #0
	bl _call_via_r1
	movs r0, #1
	b _0807CD1E
	.align 2, 0
_0807CD04: .4byte 0x020155E4
_0807CD08: .4byte 0x020154A4
_0807CD0C:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0807CD12:
	adds r1, #0x14
	adds r3, #1
	ldrb r7, [r6]
	cmp r3, r7
	blt _0807CCDC
_0807CD1C:
	movs r0, #0
_0807CD1E:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_807CD24
sub_807CD24: @ 0x0807CD24
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	movs r3, #0
	ldr r0, _0807CD54 @ =0x020155E4
	ldrb r0, [r0]
	cmp r3, r0
	bge _0807CD4C
	ldr r2, _0807CD58 @ =0x020154A4
	adds r1, r0, #0
_0807CD38:
	ldrb r0, [r2, #9]
	cmp r0, r4
	bne _0807CD44
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
_0807CD44:
	adds r2, #0x14
	subs r1, #1
	cmp r1, #0
	bne _0807CD38
_0807CD4C:
	adds r0, r3, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0807CD54: .4byte 0x020155E4
_0807CD58: .4byte 0x020154A4

	thumb_func_start sub_807CD5C
sub_807CD5C: @ 0x0807CD5C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r4, r0, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov sl, r1
	lsls r3, r3, #0x18
	lsrs r3, r3, #0x18
	mov sb, r3
	movs r0, #0
	mov r8, r0
	movs r7, #0
	ldr r0, _0807CDEC @ =0x020155E4
	ldrb r0, [r0]
	cmp r7, r0
	bge _0807CDDC
	ldr r0, _0807CDF0 @ =0x020154A4
	adds r5, r0, #0
	adds r5, #8
	adds r6, r2, #0
_0807CD8A:
	ldrb r0, [r5, #1]
	cmp r0, sl
	bne _0807CDD0
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetCursor
	movs r1, #0
	ldrb r0, [r5]
	cmp r0, #1
	bne _0807CDA8
	movs r1, #1
_0807CDA8:
	adds r0, r4, #0
	bl Text_SetColor
	ldr r0, [r5, #4]
	bl DecodeMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	adds r0, r4, #0
	adds r1, r6, #0
	bl PutText
	adds r6, #0x80
	adds r4, #8
	movs r0, #1
	add r8, r0
	cmp r8, sb
	bge _0807CDDC
_0807CDD0:
	adds r5, #0x14
	adds r7, #1
	ldr r0, _0807CDEC @ =0x020155E4
	ldrb r0, [r0]
	cmp r7, r0
	blt _0807CD8A
_0807CDDC:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807CDEC: .4byte 0x020155E4
_0807CDF0: .4byte 0x020154A4

	thumb_func_start sub_807CDF4
sub_807CDF4: @ 0x0807CDF4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	movs r0, #0
	mov sl, r0
	movs r4, #0
	ldr r0, _0807CE4C @ =0x020155E4
	mov sb, r0
	ldrb r1, [r0]
	cmp r4, r1
	bge _0807CE8A
	ldr r7, _0807CE50 @ =0x020154A4
	mov ip, r7
	mov r3, r8
	adds r3, #0x35
	mov r6, ip
	movs r5, #0
_0807CE1C:
	ldrb r0, [r6, #9]
	ldrb r1, [r3]
	cmp r0, r1
	bne _0807CE7C
	ldrb r0, [r3]
	mov r2, r8
	adds r2, #0x33
	adds r1, r2, r0
	ldrb r7, [r1]
	cmp sl, r7
	bne _0807CE72
	cmp r0, #0
	bne _0807CE54
	ldrb r2, [r2]
	lsls r1, r2, #4
	adds r1, #0x28
	mov r0, ip
	adds r0, #4
	adds r0, r5, r0
	ldr r2, [r0]
	movs r0, #0xc
	bl sub_80706C8
	b _0807CE68
	.align 2, 0
_0807CE4C: .4byte 0x020155E4
_0807CE50: .4byte 0x020154A4
_0807CE54:
	ldrb r1, [r1]
	lsls r1, r1, #4
	adds r1, #0x48
	mov r0, ip
	adds r0, #4
	adds r0, r5, r0
	ldr r2, [r0]
	movs r0, #0xc
	bl sub_80706C8
_0807CE68:
	mov r1, r8
	adds r1, #0x3d
	movs r0, #1
	strb r0, [r1]
	b _0807CE8A
_0807CE72:
	mov r0, sl
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sl, r0
_0807CE7C:
	adds r6, #0x14
	adds r5, #0x14
	adds r4, #1
	mov r0, sb
	ldrb r0, [r0]
	cmp r4, r0
	blt _0807CE1C
_0807CE8A:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_807CE98
sub_807CE98: @ 0x0807CE98
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	movs r4, #0
	movs r2, #0
	ldr r0, _0807CED0 @ =0x020155E4
	ldrb r1, [r0]
	cmp r2, r1
	bge _0807CEE6
	ldr r0, _0807CED4 @ =0x020154A4
	adds r3, r5, #0
	adds r3, #0x35
	ldrb r6, [r3]
	mov ip, r6
	adds r6, r1, #0
	adds r1, r0, #0
	adds r1, #9
	adds r5, #0x33
_0807CEBA:
	ldrb r7, [r1]
	cmp r7, ip
	bne _0807CEDE
	ldrb r7, [r3]
	adds r0, r7, r5
	ldrb r0, [r0]
	cmp r4, r0
	bne _0807CED8
	ldrb r0, [r1, #7]
	b _0807CEE8
	.align 2, 0
_0807CED0: .4byte 0x020155E4
_0807CED4: .4byte 0x020154A4
_0807CED8:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_0807CEDE:
	adds r1, #0x14
	adds r2, #1
	cmp r2, r6
	blt _0807CEBA
_0807CEE6:
	movs r0, #0xff
_0807CEE8:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_807CEF0
sub_807CEF0: @ 0x0807CEF0
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	movs r2, #0
	ldr r3, _0807CF14 @ =0x020155E4
	ldrb r0, [r3]
	cmp r2, r0
	bge _0807CF26
	ldr r0, _0807CF18 @ =0x020154A4
	adds r0, #8
_0807CF08:
	ldrb r5, [r0, #8]
	cmp r5, r4
	bne _0807CF1C
	strb r1, [r0]
	b _0807CF26
	.align 2, 0
_0807CF14: .4byte 0x020155E4
_0807CF18: .4byte 0x020154A4
_0807CF1C:
	adds r0, #0x14
	adds r2, #1
	ldrb r5, [r3]
	cmp r2, r5
	blt _0807CF08
_0807CF26:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_807CF2C
sub_807CF2C: @ 0x0807CF2C
	push {r4, r5, r6, lr}
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r5, r1, #0x18
	movs r1, #0
	movs r3, #0
	ldr r0, _0807CF58 @ =0x020155E4
	ldrb r2, [r0]
	cmp r3, r2
	bge _0807CF6E
	ldr r0, _0807CF5C @ =0x020154A4
	adds r4, r2, #0
	adds r2, r0, #0
	adds r2, #9
_0807CF4A:
	ldrb r0, [r2]
	cmp r0, r5
	bne _0807CF66
	cmp r1, r6
	bne _0807CF60
	ldrb r0, [r2, #7]
	b _0807CF70
	.align 2, 0
_0807CF58: .4byte 0x020155E4
_0807CF5C: .4byte 0x020154A4
_0807CF60:
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
_0807CF66:
	adds r2, #0x14
	adds r3, #1
	cmp r3, r4
	blt _0807CF4A
_0807CF6E:
	movs r0, #0xff
_0807CF70:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_807CF78
sub_807CF78: @ 0x0807CF78
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x34
	movs r1, #0xc
	bl InitTextDb
	adds r0, r4, #0
	adds r0, #0x3c
	movs r1, #0xc
	bl InitTextDb
	adds r0, r4, #0
	adds r0, #0x44
	movs r1, #0xc
	bl InitText
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start nullsub_40
nullsub_40: @ 0x0807CFA0
	bx lr
	.align 2, 0

	thumb_func_start sub_807CFA4
sub_807CFA4: @ 0x0807CFA4
	push {lr}
	adds r1, r0, #0
	ldr r0, _0807CFB4 @ =0x08679368
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
_0807CFB4: .4byte 0x08679368

	thumb_func_start nullsub_6
nullsub_6: @ 0x0807CFB8
	bx lr
	.align 2, 0

	thumb_func_start sub_807CFBC
sub_807CFBC: @ 0x0807CFBC
	adds r1, r0, #0
	movs r0, #0
	strh r0, [r1, #0x2a]
	ldr r0, [r1, #0x14]
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #3
	bhi _0807CFD2
	movs r0, #0xe4
	lsls r0, r0, #7
	b _0807CFD6
_0807CFD2:
	movs r0, #0xa0
	lsls r0, r0, #7
_0807CFD6:
	str r0, [r1, #0x30]
	bx lr
	.align 2, 0

	thumb_func_start sub_807CFDC
sub_807CFDC: @ 0x0807CFDC
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r3, _0807D06C @ =0x086792B6
	ldr r0, [r4, #0x30]
	cmp r0, #0
	bge _0807CFEC
	adds r0, #0x1f
_0807CFEC:
	asrs r0, r0, #5
	str r0, [sp]
	movs r0, #0xb
	movs r1, #0x80
	lsls r1, r1, #5
	movs r2, #0
	bl PutSpriteExt
	ldr r3, _0807D070 @ =0x086792A8
	ldr r0, [r4, #0x30]
	cmp r0, #0
	bge _0807D006
	adds r0, #0x1f
_0807D006:
	asrs r0, r0, #5
	str r0, [sp]
	movs r0, #0xb
	movs r1, #0xb0
	movs r2, #0
	bl PutSpriteExt
	ldr r1, [r4, #0x14]
	adds r2, r1, #0
	adds r2, #0x2f
	ldrb r3, [r2]
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #4
	adds r0, #0x10
	adds r1, #0x2e
	ldrb r1, [r1]
	lsls r1, r1, #4
	adds r1, #0x48
	bl sub_80415CC
	ldr r1, [r4, #0x14]
	adds r2, r1, #0
	adds r2, #0x30
	ldrb r0, [r2]
	cmp r0, #0xff
	beq _0807D052
	ldrb r3, [r2]
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #4
	adds r0, #0x10
	adds r1, #0x31
	ldrb r1, [r1]
	lsls r1, r1, #4
	adds r1, #0x48
	bl sub_804163C
_0807D052:
	ldrh r2, [r4, #0x2a]
	movs r0, #0
	movs r1, #4
	bl nullsub_6
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807D06C: .4byte 0x086792B6
_0807D070: .4byte 0x086792A8

	thumb_func_start sub_807D074
sub_807D074: @ 0x0807D074
	push {lr}
	adds r1, r0, #0
	ldr r0, _0807D084 @ =0x08679388
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
_0807D084: .4byte 0x08679388

	thumb_func_start sub_807D088
sub_807D088: @ 0x0807D088
	adds r1, r0, #0
	movs r0, #0
	strh r0, [r1, #0x2a]
	ldr r0, [r1, #0x14]
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #3
	bhi _0807D09E
	movs r0, #0xe4
	lsls r0, r0, #7
	b _0807D0A2
_0807D09E:
	movs r0, #0xa0
	lsls r0, r0, #7
_0807D0A2:
	str r0, [r1, #0x30]
	bx lr
	.align 2, 0

	thumb_func_start sub_807D0A8
sub_807D0A8: @ 0x0807D0A8
	push {r4, lr}
	sub sp, #0xc
	adds r4, r0, #0
	ldr r3, _0807D160 @ =0x086792B6
	ldr r0, [r4, #0x30]
	cmp r0, #0
	bge _0807D0B8
	adds r0, #0x1f
_0807D0B8:
	asrs r0, r0, #5
	str r0, [sp]
	movs r0, #0xb
	movs r1, #0x80
	lsls r1, r1, #5
	movs r2, #0
	bl PutSpriteExt
	ldr r3, _0807D164 @ =0x086792A8
	ldr r0, [r4, #0x30]
	cmp r0, #0
	bge _0807D0D2
	adds r0, #0x1f
_0807D0D2:
	asrs r0, r0, #5
	str r0, [sp]
	movs r0, #0xb
	movs r1, #0xb0
	movs r2, #0
	bl PutSpriteExt
	ldr r1, [r4, #0x14]
	adds r0, r1, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	cmp r0, #0x64
	bne _0807D0FC
	adds r0, r1, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r1, r0, #4
	adds r1, #0x28
	movs r0, #0x80
	bl sub_804163C
_0807D0FC:
	ldr r0, [r4, #0x14]
	adds r0, #0x46
	ldrb r0, [r0]
	ldrh r1, [r4, #0x2a]
	ldr r2, [r4, #0x30]
	bl sub_807DFEC
	ldr r1, [r4, #0x14]
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	adds r1, #0x2e
	ldrb r1, [r1]
	lsls r1, r1, #4
	lsls r2, r2, #5
	subs r2, #0x48
	subs r1, r1, r2
	bl sub_80415CC
	ldr r1, [r4, #0x14]
	ldr r0, [r1, #0x60]
	adds r1, #0x50
	ldrh r1, [r1]
	str r1, [sp]
	ldr r1, _0807D168 @ =0x0201636A
	ldrh r1, [r1]
	str r1, [sp, #4]
	movs r1, #7
	str r1, [sp, #8]
	movs r1, #0xe0
	movs r2, #0x30
	movs r3, #0xc
	bl sub_8082320
	ldrh r2, [r4, #0x2a]
	movs r0, #3
	movs r1, #4
	bl nullsub_6
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807D160: .4byte 0x086792B6
_0807D164: .4byte 0x086792A8
_0807D168: .4byte 0x0201636A

	thumb_func_start sub_807D16C
sub_807D16C: @ 0x0807D16C
	push {lr}
	adds r1, r0, #0
	ldr r0, _0807D17C @ =0x086793A8
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
_0807D17C: .4byte 0x086793A8

	thumb_func_start sub_807D180
sub_807D180: @ 0x0807D180
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl sub_807CFA4
	str r0, [r4, #0x2c]
	ldr r0, [r4, #0x14]
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #3
	bhi _0807D1A0
	movs r0, #0xe4
	lsls r0, r0, #7
	b _0807D1A4
_0807D1A0:
	movs r0, #0xa0
	lsls r0, r0, #7
_0807D1A4:
	str r0, [r4, #0x30]
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_807D1AC
sub_807D1AC: @ 0x0807D1AC
	push {r4, lr}
	sub sp, #0xc
	adds r4, r0, #0
	ldr r3, _0807D204 @ =0x086792C4
	ldr r0, [r4, #0x30]
	cmp r0, #0
	bge _0807D1BC
	adds r0, #0x1f
_0807D1BC:
	asrs r0, r0, #5
	str r0, [sp]
	movs r0, #0xb
	movs r1, #0x88
	movs r2, #0
	bl PutSpriteExt
	ldr r1, [r4, #0x14]
	adds r0, r1, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, #0
	bne _0807D20C
	ldr r3, _0807D208 @ =0x086792B6
	ldr r0, [r4, #0x30]
	cmp r0, #0
	bge _0807D1E0
	adds r0, #0x1f
_0807D1E0:
	asrs r0, r0, #5
	str r0, [sp]
	movs r0, #0xb
	movs r1, #0x80
	lsls r1, r1, #5
	movs r2, #0
	bl PutSpriteExt
	ldr r0, [r4, #0x14]
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r1, r0, #4
	adds r1, #0x48
	movs r0, #0xa0
	bl sub_80415CC
	b _0807D2BA
	.align 2, 0
_0807D204: .4byte 0x086792C4
_0807D208: .4byte 0x086792B6
_0807D20C:
	adds r0, r1, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r0, #2
	beq _0807D230
	ldr r3, _0807D26C @ =0x086792B6
	ldr r0, [r4, #0x30]
	cmp r0, #0
	bge _0807D220
	adds r0, #0x1f
_0807D220:
	asrs r0, r0, #5
	str r0, [sp]
	movs r0, #0xb
	movs r1, #0x80
	lsls r1, r1, #5
	movs r2, #0
	bl PutSpriteExt
_0807D230:
	ldr r1, [r4, #0x14]
	adds r0, r1, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	cmp r0, #0x14
	bne _0807D270
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	adds r1, #0x2e
	ldrb r1, [r1]
	lsls r1, r1, #4
	lsls r2, r2, #5
	subs r2, #0x48
	subs r1, r1, r2
	bl sub_804163C
	ldr r0, [r4, #0x14]
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #5
	adds r0, #0x24
	movs r1, #0x40
	bl sub_80415CC
	b _0807D28E
	.align 2, 0
_0807D26C: .4byte 0x086792B6
_0807D270:
	adds r0, r1, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	adds r1, #0x2e
	ldrb r1, [r1]
	lsls r1, r1, #4
	lsls r2, r2, #5
	subs r2, #0x48
	subs r1, r1, r2
	bl sub_80415CC
_0807D28E:
	ldr r0, [r4, #0x14]
	adds r0, #0x46
	ldrb r0, [r0]
	ldrh r1, [r4, #0x2a]
	ldr r2, [r4, #0x30]
	bl sub_807DFEC
	ldr r1, [r4, #0x14]
	ldr r0, [r1, #0x60]
	adds r1, #0x50
	ldrh r1, [r1]
	str r1, [sp]
	ldr r1, _0807D2DC @ =0x0201636A
	ldrh r1, [r1]
	str r1, [sp, #4]
	movs r1, #7
	str r1, [sp, #8]
	movs r1, #0xe0
	movs r2, #0x30
	movs r3, #0xc
	bl sub_8082320
_0807D2BA:
	ldr r0, [r4, #0x14]
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #3
	bhi _0807D2CE
	ldrh r2, [r4, #0x2a]
	movs r0, #2
	movs r1, #4
	bl nullsub_6
_0807D2CE:
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0807D2DC: .4byte 0x0201636A

	thumb_func_start sub_807D2E0
sub_807D2E0: @ 0x0807D2E0
	push {lr}
	adds r1, r0, #0
	ldr r0, _0807D2F0 @ =0x086793C8
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
_0807D2F0: .4byte 0x086793C8

	thumb_func_start sub_807D2F4
sub_807D2F4: @ 0x0807D2F4
	push {r4, lr}
	adds r3, r0, #0
	movs r2, #0
	ldr r1, _0807D324 @ =0x02015698
_0807D2FC:
	lsls r0, r2, #2
	adds r0, r0, r1
	ldr r0, [r0]
	cmp r0, r3
	beq _0807D332
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0x13
	bls _0807D2FC
	movs r2, #0
	ldr r4, _0807D324 @ =0x02015698
_0807D314:
	lsls r0, r2, #2
	adds r1, r0, r4
	ldr r0, [r1]
	cmp r0, #0xff
	bne _0807D328
	str r3, [r1]
	b _0807D332
	.align 2, 0
_0807D324: .4byte 0x02015698
_0807D328:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0x13
	bls _0807D314
_0807D332:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_807D338
sub_807D338: @ 0x0807D338
	push {lr}
	bl InitIcons
	ldr r1, _0807D354 @ =0x02015698
	movs r2, #0xff
	adds r0, r1, #0
	adds r0, #0x4c
_0807D346:
	str r2, [r0]
	subs r0, #4
	cmp r0, r1
	bge _0807D346
	pop {r0}
	bx r0
	.align 2, 0
_0807D354: .4byte 0x02015698

	thumb_func_start sub_807D358
sub_807D358: @ 0x0807D358
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0x50
	mov r8, r0
	adds r0, #0x50
	ldrh r0, [r0]
	lsrs r0, r0, #4
	mov sb, r0
	mov r0, r8
	ldr r7, [r0, #0x54]
	adds r0, r7, #0
	bl GetUnitItemCount
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	movs r5, #0
	movs r4, #0
	cmp r4, r6
	bhs _0807D3A6
_0807D382:
	lsls r1, r4, #1
	adds r0, r7, #0
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r0, [r0]
	bl GetItemIcon
	lsls r1, r5, #2
	add r1, sp
	str r0, [r1]
	adds r0, r5, #1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	adds r0, r4, #1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	cmp r4, r6
	blo _0807D382
_0807D3A6:
	ldr r6, _0807D45C @ =0x0201636A
	ldrh r0, [r6]
	cmp r0, #0
	beq _0807D3D8
	ldr r2, _0807D460 @ =0x02015D28
	mov r0, r8
	adds r0, #0x50
	ldrh r0, [r0]
	lsrs r0, r0, #4
	mov r1, r8
	adds r1, #0x2e
	ldrb r1, [r1]
	adds r0, r1, r0
	lsls r0, r0, #2
	adds r0, r0, r2
	ldrh r0, [r0, #2]
	bl GetItemKind
	lsls r1, r5, #2
	add r1, sp
	adds r0, #0x70
	str r0, [r1]
	adds r0, r5, #1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
_0807D3D8:
	mov r0, sb
	cmp r0, #0
	beq _0807D3E6
	subs r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov sb, r0
_0807D3E6:
	mov r4, sb
	adds r0, r4, #0
	adds r0, #9
	cmp r4, r0
	bge _0807D424
	ldrh r6, [r6]
	cmp r4, r6
	bhs _0807D424
	ldr r6, _0807D460 @ =0x02015D28
_0807D3F8:
	lsls r0, r4, #2
	adds r0, r0, r6
	ldrh r0, [r0, #2]
	bl GetItemIcon
	lsls r1, r5, #2
	add r1, sp
	str r0, [r1]
	adds r0, r5, #1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	adds r0, r4, #1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	mov r0, sb
	adds r0, #9
	cmp r4, r0
	bge _0807D424
	ldr r0, _0807D45C @ =0x0201636A
	ldrh r0, [r0]
	cmp r4, r0
	blo _0807D3F8
_0807D424:
	cmp r5, #0x13
	bhi _0807D43A
	movs r1, #0xff
_0807D42A:
	lsls r0, r5, #2
	add r0, sp
	str r1, [r0]
	adds r0, r5, #1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0x13
	bls _0807D42A
_0807D43A:
	movs r4, #0
	ldr r7, _0807D464 @ =0x02015698
_0807D43E:
	ldr r0, _0807D464 @ =0x02015698
	lsls r1, r4, #2
	adds r0, r1, r0
	ldr r3, [r0]
	adds r6, r4, #1
	adds r5, r1, #0
	cmp r3, #0xff
	beq _0807D492
	movs r4, #0
	movs r2, #0
	ldr r0, [sp]
	cmp r3, r0
	bne _0807D468
	movs r4, #1
	b _0807D492
	.align 2, 0
_0807D45C: .4byte 0x0201636A
_0807D460: .4byte 0x02015D28
_0807D464: .4byte 0x02015698
_0807D468:
	adds r0, r2, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0x13
	bhi _0807D482
	adds r1, r5, r7
	lsls r0, r2, #2
	add r0, sp
	ldr r1, [r1]
	ldr r0, [r0]
	cmp r1, r0
	bne _0807D468
	movs r4, #1
_0807D482:
	cmp r4, #0
	bne _0807D492
	adds r4, r5, r7
	ldr r0, [r4]
	bl ClearIcon
	movs r0, #0xff
	str r0, [r4]
_0807D492:
	lsls r0, r6, #0x10
	lsrs r4, r0, #0x10
	cmp r4, #0x13
	bls _0807D43E
	add sp, #0x50
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_807D4A8
sub_807D4A8: @ 0x0807D4A8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	str r2, [sp, #8]
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	str r1, [sp, #4]
	ldr r6, [r3, #0x2c]
	adds r0, r6, #0
	adds r0, #0x34
	bl ClearText
	adds r0, r6, #0
	adds r0, #0x3c
	bl ClearText
	adds r0, r6, #0
	adds r0, #0x44
	bl ClearText
	ldr r0, _0807D4FC @ =0x0201636A
	ldrh r0, [r0]
	cmp r0, #0
	bne _0807D508
	ldr r0, _0807D500 @ =gBg0Tm
	movs r1, #0xe
	movs r2, #0x13
	movs r3, #0
	bl TmFillRect_t
	ldr r0, _0807D504 @ =gBg1Tm
	movs r1, #0xe
	movs r2, #0x13
	movs r3, #0
	bl TmFillRect_t
	b _0807D692
	.align 2, 0
_0807D4FC: .4byte 0x0201636A
_0807D500: .4byte gBg0Tm
_0807D504: .4byte gBg1Tm
_0807D508:
	movs r0, #0
	str r0, [sp]
	adds r0, r7, #0
	ldr r1, [sp, #4]
	movs r2, #0xe
	movs r3, #8
	bl sub_8041358
	ldr r0, [sp, #8]
	bl GetItemKind
	cmp r0, #9
	beq _0807D530
	cmp r0, #9
	bgt _0807D52C
	cmp r0, #4
	beq _0807D530
	b _0807D578
_0807D52C:
	cmp r0, #0xb
	bne _0807D578
_0807D530:
	ldr r0, [sp, #8]
	bl GetItemUseDescMsg
	bl DecodeMsg
	adds r4, r0, #0
	ldr r0, [sp, #4]
	adds r0, #1
	adds r6, #0x34
	lsls r0, r0, #5
	adds r0, #1
	adds r5, r0, r7
	b _0807D550
_0807D54A:
	adds r4, #1
	adds r5, #0x40
	adds r6, #8
_0807D550:
	lsls r1, r5, #1
	ldr r0, _0807D574 @ =gBg0Tm
	adds r1, r1, r0
	str r4, [sp]
	adds r0, r6, #0
	movs r2, #0
	movs r3, #0
	bl sub_8082360
	adds r0, r4, #0
	bl GetStringLineEnd
	adds r4, r0, #0
	ldrb r0, [r4]
	cmp r0, #0
	bne _0807D54A
	b _0807D692
	.align 2, 0
_0807D574: .4byte gBg0Tm
_0807D578:
	adds r5, r6, #0
	adds r5, #0x44
	ldr r3, _0807D6A8 @ =0x0832726C
	adds r0, r5, #0
	movs r1, #0
	movs r2, #0
	bl Text_InsertDrawString
	adds r4, r6, #0
	adds r4, #0x34
	ldr r3, _0807D6AC @ =0x08327274
	adds r0, r4, #0
	movs r1, #2
	movs r2, #0
	bl Text_InsertDrawString
	adds r6, #0x3c
	mov sl, r6
	ldr r3, _0807D6B0 @ =0x0832727C
	mov r0, sl
	movs r1, #2
	movs r2, #0
	bl Text_InsertDrawString
	ldr r3, _0807D6B4 @ =0x08327284
	adds r0, r4, #0
	movs r1, #0x32
	movs r2, #0
	bl Text_InsertDrawString
	ldr r3, _0807D6B8 @ =0x0832728C
	mov r0, sl
	movs r1, #0x32
	movs r2, #0
	bl Text_InsertDrawString
	ldr r6, [sp, #4]
	adds r6, #3
	lsls r6, r6, #5
	adds r1, r6, #1
	adds r1, r1, r7
	lsls r1, r1, #1
	ldr r0, _0807D6BC @ =gBg0Tm
	mov sb, r0
	add r1, sb
	adds r0, r4, #0
	bl PutText
	ldr r0, [sp, #4]
	adds r0, #1
	lsls r0, r0, #5
	mov r8, r0
	mov r1, r8
	adds r1, #5
	adds r1, r1, r7
	lsls r1, r1, #1
	add r1, sb
	adds r0, r5, #0
	bl PutText
	ldr r5, [sp, #4]
	adds r5, #5
	lsls r5, r5, #5
	adds r1, r5, #1
	adds r1, r1, r7
	lsls r1, r1, #1
	add r1, sb
	mov r0, sl
	bl PutText
	adds r4, r6, #5
	adds r4, r4, r7
	lsls r4, r4, #1
	add r4, sb
	ldr r0, [sp, #8]
	bl GetItemMight
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	bl PutNumber
	adds r4, r5, #5
	adds r4, r4, r7
	lsls r4, r4, #1
	add r4, sb
	ldr r0, [sp, #8]
	bl GetItemHit
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #2
	bl PutNumber
	adds r6, #0xb
	adds r6, r6, r7
	lsls r6, r6, #1
	add r6, sb
	ldr r0, [sp, #8]
	bl GetItemCrit
	adds r2, r0, #0
	adds r0, r6, #0
	movs r1, #2
	bl PutNumber
	adds r5, #0xb
	adds r5, r5, r7
	lsls r5, r5, #1
	add r5, sb
	ldr r0, [sp, #8]
	bl GetItemWeight
	adds r2, r0, #0
	adds r0, r5, #0
	movs r1, #2
	bl PutNumber
	movs r0, #7
	add r8, r0
	add r8, r7
	mov r0, r8
	lsls r0, r0, #1
	mov r8, r0
	add r8, sb
	ldr r0, [sp, #8]
	bl GetItemKind
	adds r1, r0, #0
	adds r1, #0x70
	movs r2, #0xa0
	lsls r2, r2, #7
	mov r0, r8
	bl PutIcon
	ldr r0, [sp, #8]
	bl GetItemKind
	adds r0, #0x70
	bl sub_807D2F4
_0807D692:
	movs r0, #3
	bl EnableBgSync
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807D6A8: .4byte 0x0832726C
_0807D6AC: .4byte 0x08327274
_0807D6B0: .4byte 0x0832727C
_0807D6B4: .4byte 0x08327284
_0807D6B8: .4byte 0x0832728C
_0807D6BC: .4byte gBg0Tm

	thumb_func_start sub_807D6C0
sub_807D6C0: @ 0x0807D6C0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	str r1, [sp, #4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp]
	adds r0, r1, #0
	bl GetUnitItemCount
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #8]
	movs r0, #0
	mov sl, r0
	ldr r2, [sp]
	lsls r1, r2, #2
	adds r0, r1, r2
	lsls r5, r0, #4
	adds r6, r1, #0
	lsls r3, r2, #3
	str r3, [sp, #0x14]
	subs r0, r3, r2
	lsls r4, r0, #1
_0807D6F6:
	mov r1, sl
	lsls r0, r1, #3
	ldr r1, _0807D82C @ =0x020155E8
	adds r0, r0, r1
	adds r0, r5, r0
	bl ClearText
	mov r2, sl
	lsls r0, r2, #6
	movs r3, #0x91
	lsls r3, r3, #1
	adds r0, r0, r3
	adds r0, r0, r4
	lsls r0, r0, #1
	ldr r1, _0807D830 @ =gBg0Tm
	adds r0, r0, r1
	movs r1, #0xb
	movs r2, #1
	movs r3, #0
	bl TmFillRect_t
	mov r0, sl
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sl, r0
	cmp r0, #4
	bls _0807D6F6
	movs r0, #0
	mov sl, r0
	ldr r1, [sp, #8]
	cmp sl, r1
	bhs _0807D816
	ldr r2, [sp]
	adds r0, r6, r2
	lsls r0, r0, #4
	str r0, [sp, #0xc]
_0807D740:
	mov r3, sl
	lsls r5, r3, #1
	ldr r0, [sp, #4]
	adds r0, #0x1c
	adds r0, r0, r5
	mov r8, r0
	ldrh r1, [r0]
	ldr r0, [sp, #4]
	bl IsItemDisplayUseable
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	rsbs r2, r0, #0
	orrs r2, r0
	mov r1, sl
	lsls r0, r1, #3
	ldr r1, _0807D82C @ =0x020155E8
	adds r0, r0, r1
	ldr r3, [sp, #0xc]
	adds r4, r3, r0
	movs r1, #0
	lsrs r2, r2, #0x1f
	str r2, [sp, #0x10]
	cmp r2, #0
	bne _0807D774
	movs r1, #1
_0807D774:
	adds r0, r4, #0
	bl Text_SetColor
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetCursor
	mov r1, r8
	ldrh r0, [r1]
	bl GetItemName
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	adds r0, r5, #0
	adds r0, #9
	lsls r6, r0, #5
	adds r1, r6, #4
	ldr r2, [sp, #0x14]
	ldr r3, [sp]
	subs r0, r2, r3
	lsls r5, r0, #1
	adds r1, r1, r5
	lsls r1, r1, #1
	ldr r0, _0807D830 @ =gBg0Tm
	mov sb, r0
	add r1, sb
	adds r0, r4, #0
	bl PutText
	adds r0, r6, #0
	adds r0, #0xd
	adds r0, r0, r5
	lsls r0, r0, #1
	mov r1, sb
	adds r4, r0, r1
	movs r7, #1
	ldr r2, [sp, #0x10]
	cmp r2, #0
	beq _0807D7C8
	movs r7, #2
_0807D7C8:
	mov r3, r8
	ldrh r0, [r3]
	bl GetItemUses
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r7, #0
	bl PutNumberOrBlank
	adds r4, r6, #2
	adds r4, r4, r5
	lsls r4, r4, #1
	add r4, sb
	mov r1, r8
	ldrh r0, [r1]
	bl GetItemIcon
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0x80
	lsls r2, r2, #7
	bl PutIcon
	mov r2, r8
	ldrh r0, [r2]
	bl GetItemIcon
	bl sub_807D2F4
	mov r0, sl
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sl, r0
	cmp r0, #4
	bhi _0807D816
	ldr r3, [sp, #8]
	cmp sl, r3
	blo _0807D740
_0807D816:
	movs r0, #1
	bl EnableBgSync
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807D82C: .4byte 0x020155E8
_0807D830: .4byte gBg0Tm

	thumb_func_start sub_807D834
sub_807D834: @ 0x0807D834
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x18
	mov sl, r0
	ldr r1, _0807D8A8 @ =0x0201636A
	movs r0, #0
	strh r0, [r1]
	movs r4, #0
	ldr r0, _0807D8AC @ =0x02016368
	ldrh r0, [r0]
	cmp r4, r0
	bge _0807D8A2
	ldr r7, _0807D8B0 @ =0x08679354
	mov r0, sl
	adds r0, #1
	adds r0, r0, r7
	mov r8, r0
	ldr r0, _0807D8B4 @ =0x020156E8
	mov sb, r0
	adds r6, r1, #0
_0807D866:
	ldr r1, _0807D8B8 @ =0x02015D28
	lsls r0, r4, #2
	adds r5, r0, r1
	ldrh r0, [r5, #2]
	bl GetItemKind
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	mov r2, sl
	adds r0, r2, r7
	ldrb r0, [r0]
	cmp r1, r0
	blo _0807D898
	mov r0, r8
	ldrb r0, [r0]
	cmp r1, r0
	bhi _0807D898
	ldrh r1, [r6]
	lsls r0, r1, #2
	add r0, sb
	ldr r1, [r5]
	str r1, [r0]
	ldrh r0, [r6]
	adds r0, #1
	strh r0, [r6]
_0807D898:
	adds r4, #1
	ldr r0, _0807D8AC @ =0x02016368
	ldrh r0, [r0]
	cmp r4, r0
	blt _0807D866
_0807D8A2:
	movs r2, #1
	b _0807D8C2
	.align 2, 0
_0807D8A8: .4byte 0x0201636A
_0807D8AC: .4byte 0x02016368
_0807D8B0: .4byte 0x08679354
_0807D8B4: .4byte 0x020156E8
_0807D8B8: .4byte 0x02015D28
_0807D8BC:
	lsls r0, r2, #1
	adds r0, r0, r2
	adds r2, r0, #1
_0807D8C2:
	ldr r1, _0807D8E0 @ =0x0201636A
	ldrh r0, [r1]
	movs r1, #3
	str r2, [sp]
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r2, [sp]
	cmp r2, r0
	blt _0807D8BC
	cmp r2, #0
	ble _0807D95C
_0807D8DC:
	adds r4, r2, #0
	b _0807D946
	.align 2, 0
_0807D8E0: .4byte 0x0201636A
_0807D8E4:
	subs r7, r4, r2
	adds r4, #1
	mov sb, r4
	cmp r7, #0
	blt _0807D944
	ldr r1, _0807D9D0 @ =0x020156E8
	mov r8, r1
_0807D8F2:
	lsls r0, r7, #2
	mov r1, r8
	adds r6, r0, r1
	ldrh r0, [r6, #2]
	str r2, [sp]
	bl GetItemIid
	adds r4, r0, #0
	ldr r2, [sp]
	adds r0, r7, r2
	lsls r0, r0, #2
	mov r1, r8
	adds r5, r0, r1
	ldrh r0, [r5, #2]
	bl GetItemIid
	ldr r2, [sp]
	cmp r4, r0
	bgt _0807D936
	ldrh r0, [r6, #2]
	str r2, [sp]
	bl GetItemIid
	adds r4, r0, #0
	ldrh r0, [r5, #2]
	bl GetItemIid
	ldr r2, [sp]
	cmp r4, r0
	bne _0807D944
	ldrh r0, [r6, #2]
	ldrh r1, [r5, #2]
	cmp r0, r1
	bls _0807D93E
_0807D936:
	ldr r1, [r6]
	ldr r0, [r5]
	str r0, [r6]
	str r1, [r5]
_0807D93E:
	subs r7, r7, r2
	cmp r7, #0
	bge _0807D8F2
_0807D944:
	mov r4, sb
_0807D946:
	ldr r0, _0807D9D4 @ =0x0201636A
	ldrh r0, [r0]
	cmp r4, r0
	blt _0807D8E4
	adds r0, r2, #0
	movs r1, #3
	bl __divsi3
	adds r2, r0, #0
	cmp r2, #0
	bgt _0807D8DC
_0807D95C:
	movs r7, #0
	movs r4, #0
	ldr r0, _0807D9D8 @ =0x02016368
	ldrh r0, [r0]
	cmp r4, r0
	bge _0807D9B2
	ldr r6, _0807D9DC @ =0x08679354
	mov r0, sl
	adds r0, #1
	adds r0, r0, r6
	mov r8, r0
	ldr r2, _0807D9D0 @ =0x020156E8
	mov sb, r2
_0807D976:
	ldr r1, _0807D9E0 @ =0x02015D28
	lsls r0, r4, #2
	adds r5, r0, r1
	ldrh r0, [r5, #2]
	bl GetItemKind
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	mov r2, sl
	adds r0, r2, r6
	ldrb r0, [r0]
	cmp r1, r0
	blo _0807D998
	mov r0, r8
	ldrb r0, [r0]
	cmp r1, r0
	bls _0807D9A8
_0807D998:
	ldr r0, _0807D9D4 @ =0x0201636A
	ldrh r0, [r0]
	adds r0, r0, r7
	lsls r0, r0, #2
	add r0, sb
	ldr r1, [r5]
	str r1, [r0]
	adds r7, #1
_0807D9A8:
	adds r4, #1
	ldr r0, _0807D9D8 @ =0x02016368
	ldrh r0, [r0]
	cmp r4, r0
	blt _0807D976
_0807D9B2:
	ldr r0, _0807D9E0 @ =0x02015D28
	ldr r1, _0807D9D0 @ =0x020156E8
	movs r2, #0xc8
	lsls r2, r2, #3
	bl memcpy
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807D9D0: .4byte 0x020156E8
_0807D9D4: .4byte 0x0201636A
_0807D9D8: .4byte 0x02016368
_0807D9DC: .4byte 0x08679354
_0807D9E0: .4byte 0x02015D28

	thumb_func_start sub_807D9E4
sub_807D9E4: @ 0x0807D9E4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	mov sl, r0
	str r2, [sp]
	lsls r1, r1, #0x18
	lsrs r4, r1, #0x18
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	str r3, [sp, #4]
	ldr r5, _0807DAC4 @ =gBg2Tm
	adds r0, r5, #0
	movs r1, #0
	bl TmFill
	ldr r6, _0807DAC8 @ =0x0201636A
	ldrh r0, [r6]
	cmp r0, #0
	bne _0807DA40
	mov r0, sl
	bl ClearText
	mov r0, sl
	movs r1, #0
	bl Text_SetCursor
	mov r0, sl
	movs r1, #1
	bl Text_SetColor
	ldr r1, _0807DACC @ =0x08327294
	mov r0, sl
	bl Text_DrawString
	lsls r1, r4, #3
	subs r1, r1, r4
	lsls r1, r1, #2
	adds r0, r5, #0
	adds r0, #8
	adds r1, r1, r0
	mov r0, sl
	bl PutText
_0807DA40:
	ldr r0, [sp, #4]
	mov r8, r0
	adds r0, #7
	cmp r8, r0
	blt _0807DA4C
	b _0807DB5E
_0807DA4C:
	ldrh r6, [r6]
	cmp r8, r6
	blo _0807DA54
	b _0807DB5E
_0807DA54:
	lsls r0, r4, #3
	subs r0, r0, r4
	lsls r0, r0, #1
	str r0, [sp, #8]
_0807DA5C:
	movs r4, #7
	mov r1, r8
	ands r4, r1
	lsls r4, r4, #3
	add r4, sl
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetCursor
	mov r0, r8
	lsls r6, r0, #1
	movs r4, #0x1f
	ands r4, r6
	lsls r4, r4, #5
	adds r4, #2
	ldr r1, [sp, #8]
	adds r4, r4, r1
	lsls r4, r4, #1
	ldr r0, _0807DAC4 @ =gBg2Tm
	adds r4, r4, r0
	ldr r0, _0807DAD0 @ =0x02015D28
	mov r1, r8
	lsls r5, r1, #2
	adds r7, r5, r0
	ldrh r0, [r7, #2]
	bl GetItemIcon
	adds r1, r0, #0
	adds r0, r4, #0
	movs r2, #0x80
	lsls r2, r2, #7
	bl PutIcon
	ldrh r0, [r7, #2]
	bl GetItemIcon
	bl sub_807D2F4
	ldr r0, [sp]
	cmp r0, #0
	beq _0807DAC0
	ldrh r1, [r7, #2]
	bl IsItemDisplayUseable
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807DAD4
_0807DAC0:
	movs r2, #1
	b _0807DAD6
	.align 2, 0
_0807DAC4: .4byte gBg2Tm
_0807DAC8: .4byte 0x0201636A
_0807DACC: .4byte 0x08327294
_0807DAD0: .4byte 0x02015D28
_0807DAD4:
	movs r2, #0
_0807DAD6:
	movs r0, #7
	mov r1, r8
	ands r0, r1
	lsls r0, r0, #3
	mov r1, sl
	adds r7, r1, r0
	movs r1, #0
	mov sb, r2
	cmp r2, #0
	bne _0807DAEC
	movs r1, #1
_0807DAEC:
	adds r0, r7, #0
	bl Text_SetColor
	ldr r0, _0807DB74 @ =0x02015D28
	adds r5, r5, r0
	ldrh r0, [r5, #2]
	bl GetItemName
	adds r1, r0, #0
	adds r0, r7, #0
	bl Text_DrawString
	movs r4, #0x1f
	ands r4, r6
	lsls r4, r4, #5
	adds r1, r4, #4
	ldr r0, [sp, #8]
	adds r1, r1, r0
	lsls r1, r1, #1
	ldr r0, _0807DB78 @ =gBg2Tm
	adds r1, r1, r0
	adds r0, r7, #0
	bl PutText
	adds r4, #0xd
	ldr r1, [sp, #8]
	adds r4, r4, r1
	lsls r4, r4, #1
	ldr r0, _0807DB78 @ =gBg2Tm
	adds r4, r4, r0
	movs r6, #1
	mov r1, sb
	cmp r1, #0
	beq _0807DB32
	movs r6, #2
_0807DB32:
	ldrh r0, [r5, #2]
	bl GetItemUses
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r6, #0
	bl PutNumberOrBlank
	mov r0, r8
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r8, r0
	ldr r0, [sp, #4]
	adds r0, #7
	cmp r8, r0
	bge _0807DB5E
	ldr r0, _0807DB7C @ =0x0201636A
	ldrh r0, [r0]
	cmp r8, r0
	bhs _0807DB5E
	b _0807DA5C
_0807DB5E:
	movs r0, #4
	bl EnableBgSync
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807DB74: .4byte 0x02015D28
_0807DB78: .4byte gBg2Tm
_0807DB7C: .4byte 0x0201636A

	thumb_func_start sub_807DB80
sub_807DB80: @ 0x0807DB80
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	str r0, [sp]
	adds r7, r3, #0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov sl, r1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	mov r8, r2
	movs r0, #0xf
	mov sb, r8
	mov r1, sb
	ands r1, r0
	mov sb, r1
	lsls r4, r1, #6
	mov r2, sl
	lsls r5, r2, #3
	subs r5, r5, r2
	lsls r5, r5, #1
	adds r0, r4, r5
	lsls r0, r0, #1
	ldr r6, _0807DC14 @ =gBg2Tm
	adds r0, r0, r6
	movs r1, #0x10
	movs r2, #1
	movs r3, #0
	bl TmFillRect_t
	movs r0, #7
	mov r1, r8
	ands r0, r1
	lsls r0, r0, #3
	ldr r2, [sp]
	adds r0, r2, r0
	bl ClearText
	adds r4, #2
	adds r4, r4, r5
	lsls r4, r4, #1
	adds r4, r4, r6
	ldr r1, _0807DC18 @ =0x02015D28
	mov r2, r8
	lsls r0, r2, #2
	adds r5, r0, r1
	ldrh r0, [r5, #2]
	bl GetItemIcon
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r4, #0
	bl PutIcon
	ldrh r0, [r5, #2]
	bl GetItemIcon
	bl sub_807D2F4
	cmp r7, #0
	beq _0807DC10
	ldrh r1, [r5, #2]
	adds r0, r7, #0
	bl IsItemDisplayUseable
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807DC1C
_0807DC10:
	movs r2, #1
	b _0807DC1E
	.align 2, 0
_0807DC14: .4byte gBg2Tm
_0807DC18: .4byte 0x02015D28
_0807DC1C:
	movs r2, #0
_0807DC1E:
	movs r0, #7
	mov r1, r8
	ands r0, r1
	lsls r0, r0, #3
	ldr r1, [sp]
	adds r7, r1, r0
	movs r1, #0
	str r2, [sp, #4]
	cmp r2, #0
	bne _0807DC34
	movs r1, #1
_0807DC34:
	adds r0, r7, #0
	bl Text_SetColor
	adds r0, r7, #0
	movs r1, #0
	bl Text_SetCursor
	ldr r1, _0807DCB0 @ =0x02015D28
	mov r2, r8
	lsls r0, r2, #2
	adds r0, r0, r1
	mov r8, r0
	ldrh r0, [r0, #2]
	bl GetItemName
	adds r1, r0, #0
	adds r0, r7, #0
	bl Text_DrawString
	mov r0, sb
	lsls r4, r0, #6
	adds r1, r4, #4
	mov r2, sl
	lsls r5, r2, #3
	subs r5, r5, r2
	lsls r5, r5, #1
	adds r1, r1, r5
	lsls r1, r1, #1
	ldr r6, _0807DCB4 @ =gBg2Tm
	adds r1, r1, r6
	adds r0, r7, #0
	bl PutText
	adds r4, #0xd
	adds r4, r4, r5
	lsls r4, r4, #1
	adds r4, r4, r6
	movs r5, #1
	ldr r0, [sp, #4]
	cmp r0, #0
	beq _0807DC88
	movs r5, #2
_0807DC88:
	mov r1, r8
	ldrh r0, [r1, #2]
	bl GetItemUses
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	bl PutNumberOrBlank
	movs r0, #4
	bl EnableBgSync
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807DCB0: .4byte 0x02015D28
_0807DCB4: .4byte gBg2Tm

	thumb_func_start sub_807DCB8
sub_807DCB8: @ 0x0807DCB8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r5, r0, #0
	lsls r1, r1, #0x18
	lsrs r4, r1, #0x18
	adds r6, r4, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	mov r8, r2
	mov r0, r8
	str r0, [sp]
	lsls r3, r3, #0x18
	lsrs r7, r3, #0x18
	mov sl, r7
	ldr r0, _0807DD04 @ =0x02021B26
	mov sb, r0
	movs r1, #0xf
	movs r2, #1
	movs r3, #0
	bl TmFillRect_t
	ldr r0, _0807DD08 @ =0x0201636A
	ldrh r0, [r0]
	cmp r0, #0
	bne _0807DD0C
	mov r0, sb
	adds r0, #0xa
	movs r1, #9
	movs r2, #1
	movs r3, #0
	bl TmFillRect_t
	b _0807DDB0
	.align 2, 0
_0807DD04: .4byte 0x02021B26
_0807DD08: .4byte 0x0201636A
_0807DD0C:
	cmp r4, #0
	bne _0807DD58
	adds r0, r5, #0
	bl ClearText
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetColor
	ldr r4, _0807DD54 @ =0x083272A4
	adds r0, r4, #0
	bl GetStringTextLen
	movs r1, #0x28
	subs r1, r1, r0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	adds r0, r5, #0
	bl Text_SetCursor
	adds r0, r5, #0
	adds r1, r4, #0
	bl Text_DrawString
	lsls r1, r7, #5
	add r1, r8
	lsls r1, r1, #1
	mov r0, sb
	subs r0, #0x1e
	adds r1, r1, r0
	adds r0, r5, #0
	bl PutText
	b _0807DDB0
	.align 2, 0
_0807DD54: .4byte 0x083272A4
_0807DD58:
	adds r0, r6, #0
	bl GetUnitByPid
	adds r4, r0, #0
	adds r0, r5, #0
	bl ClearText
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetColor
	ldr r0, [r4]
	ldrh r0, [r0]
	bl DecodeMsg
	bl GetStringTextLen
	movs r1, #0x28
	subs r1, r1, r0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	adds r0, r5, #0
	bl Text_SetCursor
	ldr r0, [r4]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_DrawString
	mov r0, sl
	lsls r1, r0, #5
	ldr r0, [sp]
	adds r1, r1, r0
	lsls r1, r1, #1
	mov r0, sb
	subs r0, #0x1e
	adds r1, r1, r0
	adds r0, r5, #0
	bl PutText
_0807DDB0:
	movs r0, #1
	bl EnableBgSync
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807DDC8
sub_807DDC8: @ 0x0807DDC8
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r5, r0, #0
	adds r4, r1, #0
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	bl sub_8082A08
	adds r6, r0, #0
	lsls r6, r6, #0x18
	lsrs r6, r6, #0x18
	lsls r4, r4, #5
	subs r0, r4, #3
	adds r0, r0, r5
	lsls r0, r0, #1
	ldr r1, _0807DE54 @ =gBg0Tm
	mov r8, r1
	add r0, r8
	movs r1, #6
	movs r2, #1
	movs r3, #0
	bl TmFillRect_t
	ldr r0, _0807DE58 @ =0x02015690
	mov r1, r8
	adds r1, #0x24
	ldr r2, _0807DE5C @ =0x083272A4
	str r2, [sp]
	movs r2, #0
	movs r3, #4
	bl sub_8082360
	adds r0, r4, r5
	lsls r0, r0, #1
	add r0, r8
	movs r1, #2
	adds r2, r6, #0
	bl PutNumber
	adds r0, r4, #4
	adds r0, r0, r5
	lsls r0, r0, #1
	add r0, r8
	movs r1, #2
	movs r2, #0x64
	bl PutNumber
	adds r4, #1
	adds r4, r4, r5
	lsls r4, r4, #1
	add r4, r8
	adds r0, r4, #0
	movs r1, #2
	movs r2, #0x16
	bl PutSpecialChar
	movs r0, #1
	bl EnableBgSync
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807DE54: .4byte gBg0Tm
_0807DE58: .4byte 0x02015690
_0807DE5C: .4byte 0x083272A4

	thumb_func_start sub_807DE60
sub_807DE60: @ 0x0807DE60
	push {r4, r5, r6, lr}
	bl GetSupplyItems
	adds r4, r0, #0
	movs r2, #0
	movs r3, #0
	ldr r0, _0807DEC0 @ =0x02016368
	ldrh r1, [r0]
	cmp r2, r1
	bhs _0807DE9C
	ldr r6, _0807DEC4 @ =0x02015D28
	adds r5, r0, #0
_0807DE78:
	lsls r0, r3, #2
	adds r1, r0, r6
	ldrb r0, [r1]
	cmp r0, #0
	bne _0807DE90
	lsls r0, r2, #1
	adds r0, r0, r4
	ldrh r1, [r1, #2]
	strh r1, [r0]
	adds r0, r2, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
_0807DE90:
	adds r0, r3, #1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	ldrh r0, [r5]
	cmp r3, r0
	blo _0807DE78
_0807DE9C:
	cmp r2, #0x63
	bhi _0807DEB2
	movs r1, #0
_0807DEA2:
	lsls r0, r2, #1
	adds r0, r0, r4
	strh r1, [r0]
	adds r0, r2, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0x63
	bls _0807DEA2
_0807DEB2:
	movs r0, #0x18
	movs r1, #0
	bl sub_807DDC8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807DEC0: .4byte 0x02016368
_0807DEC4: .4byte 0x02015D28

	thumb_func_start sub_807DEC8
sub_807DEC8: @ 0x0807DEC8
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	lsls r0, r1, #0x10
	lsrs r0, r0, #0x10
	bl GetItemKind
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	movs r2, #0
	ldr r0, _0807DF58 @ =0x08679354
	ldrb r1, [r0]
	cmp r3, r1
	beq _0807DF0A
	ldrb r1, [r0, #1]
	cmp r3, r1
	beq _0807DF0A
	adds r4, r0, #0
_0807DEEC:
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #8
	bhi _0807DF0A
	lsls r1, r2, #1
	adds r0, r1, r4
	ldrb r0, [r0]
	cmp r3, r0
	beq _0807DF0A
	adds r0, r1, #1
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r3, r0
	bne _0807DEEC
_0807DF0A:
	adds r5, r6, #0
	adds r5, #0x46
	ldrb r0, [r5]
	cmp r0, r2
	beq _0807DF4E
	strb r2, [r5]
	adds r0, r6, #0
	adds r0, #0x32
	adds r0, r2, r0
	ldrb r0, [r0]
	lsls r0, r0, #4
	adds r4, r6, #0
	adds r4, #0x50
	strh r0, [r4]
	ldrb r0, [r5]
	bl sub_807D834
	ldrb r0, [r5]
	adds r0, #0x3b
	adds r0, r6, r0
	adds r1, r4, #0
	bl sub_80823A0
	ldr r0, _0807DF5C @ =0x02015638
	ldr r2, [r6, #0x54]
	ldrh r4, [r4]
	lsrs r3, r4, #4
	movs r1, #1
	str r1, [sp]
	bl sub_807D9E4
	adds r0, r6, #0
	bl sub_807D358
_0807DF4E:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807DF58: .4byte 0x08679354
_0807DF5C: .4byte 0x02015638

	thumb_func_start sub_807DF60
sub_807DF60: @ 0x0807DF60
	push {r4, r5, r6, r7, lr}
	lsls r1, r1, #0x18
	lsls r2, r2, #0x10
	lsrs r5, r2, #0x10
	ldr r6, _0807DFD4 @ =0x02015D28
	lsls r4, r5, #2
	adds r4, r4, r6
	ldr r3, [r4]
	lsrs r1, r1, #0x17
	adds r2, r0, #0
	adds r2, #0x1c
	adds r2, r2, r1
	ldrh r1, [r2]
	strh r1, [r4, #2]
	lsrs r3, r3, #0x10
	strh r3, [r2]
	bl UnitRemoveInvalidItems
	ldrh r0, [r4, #2]
	cmp r0, #0
	bne _0807DFE0
	adds r2, r5, #0
	ldr r0, _0807DFD8 @ =0x02016368
	adds r4, r0, #0
	ldr r7, _0807DFDC @ =0x0201636A
	ldrh r0, [r4]
	cmp r2, r0
	bhs _0807DFC0
	adds r3, r6, #0
	adds r5, r4, #0
_0807DF9C:
	lsls r0, r2, #2
	adds r1, r0, r3
	adds r2, #1
	lsls r0, r2, #2
	adds r0, r0, r3
	ldr r0, [r0]
	str r0, [r1]
	ldrb r0, [r1]
	cmp r0, #0
	bne _0807DFB6
	ldrb r0, [r1, #1]
	subs r0, #1
	strb r0, [r1, #1]
_0807DFB6:
	lsls r0, r2, #0x10
	lsrs r2, r0, #0x10
	ldrh r0, [r5]
	cmp r2, r0
	blo _0807DF9C
_0807DFC0:
	ldrh r0, [r7]
	subs r0, #1
	strh r0, [r7]
	ldrh r0, [r4]
	subs r0, #1
	strh r0, [r4]
	bl sub_807DE60
	movs r0, #1
	b _0807DFE6
	.align 2, 0
_0807DFD4: .4byte 0x02015D28
_0807DFD8: .4byte 0x02016368
_0807DFDC: .4byte 0x0201636A
_0807DFE0:
	bl sub_807DE60
	movs r0, #0
_0807DFE6:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_807DFEC
sub_807DFEC: @ 0x0807DFEC
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r2, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r1, r1, #0x18
	ldr r3, _0807E058 @ =0x0831B068
	ldr r2, _0807E05C @ =gPal
	lsrs r1, r1, #0x1a
	movs r0, #0xf
	ands r1, r0
	lsls r1, r1, #1
	adds r1, r1, r3
	ldrh r0, [r1]
	ldr r1, _0807E060 @ =0x0000025A
	adds r2, r2, r1
	strh r0, [r2]
	bl EnablePalSync
	lsls r0, r4, #1
	adds r0, r0, r4
	lsls r0, r0, #2
	adds r6, r0, #0
	adds r6, #0x7c
	ldr r0, _0807E064 @ =0x08679330
	lsls r4, r4, #2
	adds r4, r4, r0
	ldr r3, [r4]
	adds r0, r5, #0
	cmp r5, #0
	bge _0807E02E
	adds r0, #0x1f
_0807E02E:
	asrs r0, r0, #5
	movs r1, #0x80
	lsls r1, r1, #6
	adds r4, r0, r1
	str r4, [sp]
	movs r0, #4
	adds r1, r6, #0
	movs r2, #0x18
	bl PutSprite
	ldr r3, _0807E068 @ =0x08679326
	str r4, [sp]
	movs r0, #4
	adds r1, r6, #0
	movs r2, #0x18
	bl PutSprite
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0807E058: .4byte 0x0831B068
_0807E05C: .4byte gPal
_0807E060: .4byte 0x0000025A
_0807E064: .4byte 0x08679330
_0807E068: .4byte 0x08679326

	thumb_func_start sub_807E06C
sub_807E06C: @ 0x0807E06C
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0807E0A8
	movs r1, #0
	ldr r0, _0807E0A0 @ =gBg0Tm
	ldr r2, _0807E0A4 @ =0x00003328
	adds r5, r2, #0
	adds r2, #0x40
	adds r4, r2, #0
	movs r2, #0x8f
	lsls r2, r2, #1
	adds r3, r0, r2
	adds r2, r0, #0
	adds r2, #0xde
_0807E08A:
	adds r0, r1, r5
	strh r0, [r2]
	adds r0, r1, r4
	strh r0, [r3]
	adds r3, #2
	adds r2, #2
	adds r1, #1
	cmp r1, #0xe
	ble _0807E08A
	b _0807E0C4
	.align 2, 0
_0807E0A0: .4byte gBg0Tm
_0807E0A4: .4byte 0x00003328
_0807E0A8:
	ldr r0, _0807E0D0 @ =gBg0Tm
	movs r3, #0
	movs r1, #0x8f
	lsls r1, r1, #1
	adds r2, r0, r1
	adds r0, #0xde
	movs r1, #0xe
_0807E0B6:
	strh r3, [r0]
	strh r3, [r2]
	adds r2, #2
	adds r0, #2
	subs r1, #1
	cmp r1, #0
	bge _0807E0B6
_0807E0C4:
	movs r0, #3
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0807E0D0: .4byte gBg0Tm

	thumb_func_start sub_807E0D4
sub_807E0D4: @ 0x0807E0D4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x34
	adds r5, r0, #0
	adds r6, r5, #0
	adds r6, #0x2d
	ldrb r0, [r6]
	cmp r0, #3
	bhi _0807E0F4
	adds r1, r5, #0
	adds r1, #0x4b
	movs r0, #0
	strb r0, [r1]
_0807E0F4:
	bl ResetText
	bl ResetTextFont
	ldr r3, _0807E2B4 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	adds r0, r1, #0
	ldrb r2, [r3, #0x14]
	ands r0, r2
	strb r0, [r3, #0x14]
	ldrb r0, [r3, #0x18]
	ands r1, r0
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x18]
	bl ClearIcons
	movs r4, #0
	str r6, [sp, #0x28]
	adds r1, r5, #0
	adds r1, #0x4b
	str r1, [sp, #0x10]
	adds r2, r5, #0
	adds r2, #0x50
	str r2, [sp, #0x18]
	adds r3, r5, #0
	adds r3, #0x45
	str r3, [sp, #4]
	movs r0, #0x2e
	adds r0, r0, r5
	mov sl, r0
	movs r1, #0x30
	adds r1, r1, r5
	mov r8, r1
	movs r2, #0x31
	adds r2, r2, r5
	mov sb, r2
	adds r3, #3
	str r3, [sp, #0xc]
	adds r0, r5, #0
	adds r0, #0x2c
	str r0, [sp, #0x24]
	adds r1, r5, #0
	adds r1, #0x52
	str r1, [sp, #0x1c]
	adds r2, r5, #0
	adds r2, #0x29
	str r2, [sp, #0x20]
	adds r3, #6
	str r3, [sp, #0x14]
	adds r0, #0x1b
	str r0, [sp, #8]
	adds r7, r5, #0
	adds r7, #0x4c
	subs r1, #0x20
	str r1, [sp, #0x2c]
	adds r2, #0x12
	str r2, [sp, #0x30]
	ldr r2, _0807E2B8 @ =0x02015698
	movs r1, #0xff
_0807E182:
	lsls r0, r4, #2
	adds r0, r0, r2
	str r1, [r0]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #0x13
	bls _0807E182
	ldr r0, _0807E2BC @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0807E2C0 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0807E2C4 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	bl InitIcons
	movs r0, #4
	bl ApplyIconPalettes
	bl LoadUiFrameGraphics
	ldr r4, _0807E2C8 @ =0x02015688
	adds r0, r4, #0
	movs r1, #6
	bl InitText
	adds r4, #8
	adds r0, r4, #0
	movs r1, #5
	bl InitTextDb
	movs r4, #0
	ldr r6, _0807E2CC @ =0x020155E8
_0807E1D0:
	lsls r0, r4, #3
	adds r0, r0, r6
	movs r1, #7
	bl InitTextDb
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #4
	bls _0807E1D0
	movs r4, #0
	ldr r6, _0807E2D0 @ =0x02015638
_0807E1E8:
	lsls r0, r4, #3
	adds r0, r0, r6
	movs r1, #7
	bl InitTextDb
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #7
	bls _0807E1E8
	ldr r0, _0807E2D4 @ =0x08319E88
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x60
	bl ApplyPaletteExt
	ldr r0, _0807E2D8 @ =0x0831AABC
	movs r1, #0xc0
	lsls r1, r1, #2
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, _0807E2DC @ =0x0831A248
	movs r1, #0x60
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0807E2E0 @ =0x08319EE8
	ldr r1, _0807E2E4 @ =0x02022008
	bl Decompress
	ldr r0, _0807E2E8 @ =0x0831A088
	ldr r1, _0807E2EC @ =0x02022808
	bl Decompress
	movs r4, #0
	movs r2, #0
	ldr r3, [sp, #0x18]
	strh r2, [r3]
	ldr r0, [sp, #4]
	strb r4, [r0]
	mov r1, sl
	strb r4, [r1]
	movs r0, #0xff
	mov r3, r8
	ldrb r1, [r3]
	orrs r1, r0
	strb r1, [r3]
	mov r1, sb
	ldrb r1, [r1]
	orrs r0, r1
	mov r3, sb
	strb r0, [r3]
	ldr r0, [sp, #0xc]
	strb r4, [r0]
	ldr r1, [sp, #0x24]
	strb r4, [r1]
	ldr r3, [sp, #0x1c]
	strh r2, [r3]
	ldr r0, [sp, #0x20]
	strb r4, [r0]
	ldr r1, [sp, #0x14]
	strh r2, [r1]
	ldr r2, [sp, #8]
	strb r4, [r2]
	adds r0, r5, #0
	bl sub_808230C
	str r0, [r5, #0x60]
	ldr r3, [sp, #0x28]
	ldrb r3, [r3]
	cmp r3, #3
	bhi _0807E300
	ldr r0, _0807E2F0 @ =0x0831AB1C
	ldr r1, _0807E2F4 @ =0x06011000
	bl Decompress
	ldr r0, _0807E2F8 @ =0x083198CC
	ldr r1, _0807E2FC @ =0x06017200
	bl Decompress
	ldr r1, [r5, #0x14]
	ldr r0, [r1, #0x48]
	str r0, [r5, #0x54]
	ldr r0, [r1, #0x4c]
	str r0, [r5, #0x58]
	ldr r0, [r5, #0x60]
	movs r1, #0xe4
	lsls r1, r1, #7
	movs r2, #2
	bl sub_8082348
	ldr r1, [r5, #0x14]
	adds r1, #0x2c
	movs r2, #1
	adds r0, r2, #0
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _0807E314
	strb r2, [r7]
	b _0807E316
	.align 2, 0
_0807E2B4: .4byte gDispIo
_0807E2B8: .4byte 0x02015698
_0807E2BC: .4byte gBg0Tm
_0807E2C0: .4byte gBg1Tm
_0807E2C4: .4byte gBg2Tm
_0807E2C8: .4byte 0x02015688
_0807E2CC: .4byte 0x020155E8
_0807E2D0: .4byte 0x02015638
_0807E2D4: .4byte 0x08319E88
_0807E2D8: .4byte 0x0831AABC
_0807E2DC: .4byte 0x0831A248
_0807E2E0: .4byte 0x08319EE8
_0807E2E4: .4byte 0x02022008
_0807E2E8: .4byte 0x0831A088
_0807E2EC: .4byte 0x02022808
_0807E2F0: .4byte 0x0831AB1C
_0807E2F4: .4byte 0x06011000
_0807E2F8: .4byte 0x083198CC
_0807E2FC: .4byte 0x06017200
_0807E300:
	ldr r0, _0807E40C @ =0x083198CC
	ldr r1, _0807E410 @ =0x06015000
	bl Decompress
	ldr r0, [r5, #0x60]
	movs r1, #0xa0
	lsls r1, r1, #7
	movs r2, #2
	bl sub_8082348
_0807E314:
	strb r4, [r7]
_0807E316:
	ldr r1, [sp, #0x10]
	ldrb r0, [r1]
	cmp r0, #0
	bne _0807E394
	str r0, [sp]
	movs r0, #1
	movs r1, #8
	movs r2, #0xe
	movs r3, #0xc
	bl sub_8041358
	ldr r4, _0807E414 @ =0x02015688
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	ldr r0, [r5, #0x54]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl DecodeMsg
	bl GetStringTextLen
	movs r1, #0x30
	subs r1, r1, r0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	adds r0, r4, #0
	bl Text_SetCursor
	ldr r0, [r5, #0x54]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	ldr r1, _0807E418 @ =gBg0Tm
	adds r0, r4, #0
	bl PutText
	ldr r1, [r5, #0x54]
	movs r0, #0
	bl sub_807D6C0
	ldr r0, [r5, #0x54]
	bl GetUnitFid
	adds r1, r0, #0
	movs r3, #4
	rsbs r3, r3, #0
	movs r0, #3
	str r0, [sp]
	movs r0, #0
	movs r2, #0x40
	bl StartFace
_0807E394:
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r2, [sp, #4]
	ldrb r1, [r2]
	ldr r3, [sp, #0x18]
	ldrh r2, [r3]
	subs r2, #0x28
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	movs r4, #0
	ldr r3, [sp, #0x2c]
	movs r1, #0
	ldr r2, [sp, #0x30]
_0807E3C4:
	adds r0, r3, r4
	strb r1, [r0]
	adds r0, r2, r4
	strb r1, [r0]
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #8
	bls _0807E3C4
	movs r0, #7
	bl EnableBgSync
	ldr r0, [sp, #0x28]
	ldrb r0, [r0]
	cmp r0, #3
	bhi _0807E3F0
	adds r0, r5, #0
	adds r0, #0x2a
	ldrb r1, [r0]
	adds r0, r5, #0
	bl Proc_Goto
_0807E3F0:
	movs r1, #1
	rsbs r1, r1, #0
	movs r0, #0
	bl sub_8070E70
	add sp, #0x34
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807E40C: .4byte 0x083198CC
_0807E410: .4byte 0x06015000
_0807E414: .4byte 0x02015688
_0807E418: .4byte gBg0Tm

	thumb_func_start sub_807E41C
sub_807E41C: @ 0x0807E41C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r6, #0
	str r6, [sp]
	movs r0, #0xf
	movs r1, #8
	movs r2, #0xe
	movs r3, #0xc
	bl sub_8041358
	ldr r4, _0807E4B8 @ =0x02015690
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	ldr r0, [r5, #0x58]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl DecodeMsg
	bl GetStringTextLen
	movs r1, #0x28
	subs r1, r1, r0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	adds r0, r4, #0
	bl Text_SetCursor
	ldr r0, [r5, #0x58]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	ldr r1, _0807E4BC @ =0x02021B38
	adds r0, r4, #0
	bl PutText
	ldr r1, [r5, #0x58]
	movs r0, #1
	bl sub_807D6C0
	ldr r0, [r5, #0x58]
	bl GetUnitFid
	adds r1, r0, #0
	movs r3, #4
	rsbs r3, r3, #0
	movs r0, #2
	str r0, [sp]
	movs r0, #1
	movs r2, #0xac
	bl StartFace
	adds r0, r5, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #3
	beq _0807E4CE
	ldr r0, [r5, #0x54]
	bl GetUnitItemCount
	cmp r0, #0
	bne _0807E4C0
	adds r1, r5, #0
	adds r1, #0x2f
	movs r0, #1
	strb r0, [r1]
	b _0807E4C6
	.align 2, 0
_0807E4B8: .4byte 0x02015690
_0807E4BC: .4byte 0x02021B38
_0807E4C0:
	adds r0, r5, #0
	adds r0, #0x2f
	strb r6, [r0]
_0807E4C6:
	adds r1, r5, #0
	adds r1, #0x2e
	movs r0, #0
	strb r0, [r1]
_0807E4CE:
	adds r2, r5, #0
	adds r2, #0x30
	movs r0, #0xff
	ldrb r1, [r2]
	orrs r1, r0
	strb r1, [r2]
	adds r1, r5, #0
	adds r1, #0x31
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	subs r1, #2
	ldrb r2, [r1]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	subs r1, #1
	ldrb r1, [r1]
	lsls r1, r1, #1
	adds r1, #9
	movs r2, #0xc
	bl sub_804169C
	movs r0, #0xf
	bl EnableBgSync
	adds r1, r5, #0
	adds r1, #0x2c
	movs r0, #0
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x2d
	ldrb r1, [r0]
	adds r4, r0, #0
	cmp r1, #0
	bne _0807E524
	movs r1, #1
	rsbs r1, r1, #0
	adds r0, r5, #0
	bl sub_80829E8
	b _0807E52E
_0807E524:
	cmp r1, #3
	bne _0807E52E
	ldr r0, [r5, #0x5c]
	bl Proc_End
_0807E52E:
	adds r0, r5, #0
	bl sub_807D074
	str r0, [r5, #0x5c]
	movs r0, #1
	strb r0, [r4]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807E544
sub_807E544: @ 0x0807E544
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x54]
	bl GetUnitItemCount
	adds r5, r4, #0
	adds r5, #0x3b
	strb r0, [r5]
	ldr r0, [r4, #0x58]
	bl GetUnitItemCount
	adds r1, r4, #0
	adds r1, #0x3c
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #1
	bne _0807E57E
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _0807E57E
	ldrb r0, [r5]
	cmp r0, #4
	bhi _0807E57E
	adds r0, #1
	strb r0, [r5]
_0807E57E:
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	cmp r0, #0
	bne _0807E5A0
	adds r0, r4, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _0807E5A0
	adds r1, r4, #0
	adds r1, #0x3c
	ldrb r0, [r1]
	cmp r0, #4
	bhi _0807E5A0
	adds r0, #1
	strb r0, [r1]
_0807E5A0:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807E5A8
sub_807E5A8: @ 0x0807E5A8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r6, r0, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	str r0, [sp]
	adds r0, r6, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	str r0, [sp, #4]
	adds r0, r6, #0
	bl sub_807E544
	adds r4, r6, #0
	adds r4, #0x29
	ldrb r0, [r4]
	cmp r0, #2
	bne _0807E5F4
	ldr r0, _0807E5F0 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0807E5F4
	bl sub_807089C
	movs r0, #0
	strb r0, [r4]
	b _0807EB60
	.align 2, 0
_0807E5F0: .4byte gKeySt
_0807E5F4:
	ldr r2, _0807E674 @ =gKeySt
	ldr r1, [r2]
	movs r0, #0x20
	ldrh r1, [r1, #6]
	ands r0, r1
	mov r8, r2
	cmp r0, #0
	beq _0807E67C
	adds r0, r6, #0
	adds r0, #0x2f
	adds r5, r0, #0
	ldrb r1, [r5]
	cmp r1, #1
	bne _0807E67C
	adds r7, r6, #0
	adds r7, #0x3b
	ldrb r0, [r7]
	adds r2, r6, #0
	adds r2, #0x29
	str r2, [sp, #8]
	cmp r0, #0
	bne _0807E622
	b _0807EB1A
_0807E622:
	ldr r0, _0807E678 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807E632
	movs r0, #0x67
	bl m4aSongNumStart
_0807E632:
	ldrb r3, [r5]
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #1
	adds r0, #2
	adds r4, r6, #0
	adds r4, #0x2e
	ldrb r2, [r4]
	lsls r1, r2, #1
	adds r1, #9
	movs r2, #0xc
	bl sub_8041728
	ldrb r0, [r5]
	subs r0, #1
	strb r0, [r5]
	adds r0, r0, r7
	ldrb r0, [r0]
	ldrb r3, [r4]
	cmp r3, r0
	blo _0807E660
	subs r0, #1
	strb r0, [r4]
_0807E660:
	ldrb r7, [r5]
	lsls r0, r7, #3
	adds r5, r7, #0
	subs r0, r0, r5
	lsls r0, r0, #1
	adds r0, #2
	ldrb r4, [r4]
	lsls r1, r4, #1
	b _0807EAB2
	.align 2, 0
_0807E674: .4byte gKeySt
_0807E678: .4byte gPlaySt
_0807E67C:
	mov r0, r8
	ldr r1, [r0]
	movs r0, #0x10
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _0807E700
	adds r0, r6, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	adds r5, r0, #0
	cmp r1, #0
	bne _0807E700
	adds r0, #0xd
	ldrb r0, [r0]
	adds r1, r6, #0
	adds r1, #0x29
	str r1, [sp, #8]
	cmp r0, #0
	bne _0807E6A6
	b _0807EB1A
_0807E6A6:
	ldr r0, _0807E6FC @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807E6B6
	movs r0, #0x67
	bl m4aSongNumStart
_0807E6B6:
	ldrb r2, [r5]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	adds r4, r6, #0
	adds r4, #0x2e
	ldrb r3, [r4]
	lsls r1, r3, #1
	adds r1, #9
	movs r2, #0xc
	bl sub_8041728
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	adds r0, r6, #0
	adds r0, #0x3b
	ldrb r7, [r5]
	adds r0, r7, r0
	ldrb r0, [r0]
	ldrb r1, [r4]
	cmp r1, r0
	blo _0807E6EA
	subs r0, #1
	strb r0, [r4]
_0807E6EA:
	ldrb r2, [r5]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r4, [r4]
	lsls r1, r4, #1
	b _0807EAB2
	.align 2, 0
_0807E6FC: .4byte gPlaySt
_0807E700:
	mov r3, r8
	ldr r1, [r3]
	movs r4, #0x40
	mov sb, r4
	mov r0, sb
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _0807E7AC
	adds r0, r6, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	adds r7, r6, #0
	adds r7, #0x3b
	adds r1, r7, r2
	ldrb r1, [r1]
	adds r5, r0, #0
	cmp r1, #0
	beq _0807E7AC
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	adds r4, r6, #0
	adds r4, #0x2e
	ldrb r2, [r4]
	lsls r1, r2, #1
	adds r1, #9
	movs r2, #0xc
	bl sub_8041728
	ldrb r0, [r4]
	cmp r0, #0
	beq _0807E760
	subs r0, #1
	strb r0, [r4]
	ldr r0, _0807E75C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807E788
	movs r0, #0x66
	bl m4aSongNumStart
	b _0807E788
	.align 2, 0
_0807E75C: .4byte gPlaySt
_0807E760:
	mov r3, r8
	ldr r1, [r3]
	mov r0, sb
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0807E788
	ldrb r1, [r5]
	adds r0, r1, r7
	ldrb r0, [r0]
	subs r0, #1
	strb r0, [r4]
	ldr r0, _0807E7A8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807E788
	movs r0, #0x66
	bl m4aSongNumStart
_0807E788:
	ldrb r2, [r5]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r4, [r4]
	lsls r1, r4, #1
	adds r1, #9
	movs r2, #0xc
	bl sub_804169C
	adds r3, r6, #0
	adds r3, #0x29
	str r3, [sp, #8]
	b _0807EB1A
	.align 2, 0
_0807E7A8: .4byte gPlaySt
_0807E7AC:
	mov r4, r8
	ldr r1, [r4]
	movs r7, #0x80
	mov sb, r7
	mov r0, sb
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _0807E858
	adds r0, r6, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	adds r7, r6, #0
	adds r7, #0x3b
	adds r1, r7, r2
	ldrb r1, [r1]
	adds r5, r0, #0
	cmp r1, #0
	beq _0807E858
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	adds r4, r6, #0
	adds r4, #0x2e
	ldrb r2, [r4]
	lsls r1, r2, #1
	adds r1, #9
	movs r2, #0xc
	bl sub_8041728
	ldrb r1, [r4]
	ldrb r3, [r5]
	adds r0, r3, r7
	ldrb r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge _0807E814
	adds r0, r1, #1
	strb r0, [r4]
	ldr r0, _0807E810 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807E836
	movs r0, #0x66
	bl m4aSongNumStart
	b _0807E836
	.align 2, 0
_0807E810: .4byte gPlaySt
_0807E814:
	mov r7, r8
	ldr r1, [r7]
	mov r0, sb
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0807E836
	movs r0, #0
	strb r0, [r4]
	ldr r0, _0807E854 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807E836
	movs r0, #0x66
	bl m4aSongNumStart
_0807E836:
	ldrb r1, [r5]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, #2
	ldrb r4, [r4]
	lsls r1, r4, #1
	adds r1, #9
	movs r2, #0xc
	bl sub_804169C
	adds r2, r6, #0
	adds r2, #0x29
	str r2, [sp, #8]
	b _0807EB1A
	.align 2, 0
_0807E854: .4byte gPlaySt
_0807E858:
	mov r3, r8
	ldr r1, [r3]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	adds r4, r6, #0
	adds r4, #0x29
	str r4, [sp, #8]
	cmp r0, #0
	bne _0807E86E
	b _0807EA22
_0807E86E:
	ldrb r0, [r4]
	cmp r0, #0
	beq _0807E876
	b _0807EA22
_0807E876:
	ldr r0, _0807E8F8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807E886
	movs r0, #0x6a
	bl m4aSongNumStart
_0807E886:
	adds r0, r6, #0
	adds r0, #0x30
	ldrb r1, [r0]
	mov sb, r0
	cmp r1, #0xff
	bne _0807E8FC
	adds r5, r6, #0
	adds r5, #0x2f
	ldrb r0, [r5]
	mov r7, sb
	strb r0, [r7]
	adds r4, r6, #0
	adds r4, #0x2e
	ldrb r0, [r4]
	adds r1, r6, #0
	adds r1, #0x31
	strb r0, [r1]
	ldrb r1, [r5]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, #2
	ldrb r2, [r4]
	lsls r1, r2, #1
	adds r1, #9
	movs r2, #0xc
	bl sub_8041728
	ldrb r0, [r5]
	adds r0, #1
	movs r1, #1
	ands r0, r1
	strb r0, [r5]
	lsls r1, r0, #2
	adds r0, r6, #0
	adds r0, #0x54
	adds r0, r0, r1
	ldr r0, [r0]
	bl GetUnitItemCount
	cmp r0, #4
	bgt _0807E8E6
	adds r0, r6, #0
	adds r0, #0x3b
	ldrb r3, [r5]
	adds r0, r3, r0
	ldrb r0, [r0]
	strb r0, [r4]
_0807E8E6:
	ldrb r7, [r5]
	lsls r0, r7, #3
	adds r5, r7, #0
	subs r0, r0, r5
	lsls r0, r0, #1
	adds r0, #2
	ldrb r4, [r4]
	lsls r1, r4, #1
	b _0807EAB2
	.align 2, 0
_0807E8F8: .4byte gPlaySt
_0807E8FC:
	adds r0, r6, #0
	adds r0, #0x4c
	ldrb r0, [r0]
	adds r5, r6, #0
	adds r5, #0x2f
	adds r4, r6, #0
	adds r4, #0x2e
	movs r1, #0x31
	adds r1, r1, r6
	mov sl, r1
	adds r7, r6, #0
	adds r7, #0x54
	cmp r0, #0
	beq _0807E958
	mov r2, sb
	ldrb r2, [r2]
	lsls r0, r2, #2
	adds r0, r7, r0
	ldr r0, [r0]
	ldrb r1, [r1]
	ldrb r3, [r5]
	lsls r2, r3, #2
	adds r2, r7, r2
	ldr r2, [r2]
	ldrb r3, [r4]
	bl sub_8082B98
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0807E958
	ldrb r7, [r5]
	lsls r0, r7, #3
	adds r5, r7, #0
	subs r0, r0, r5
	lsls r0, r0, #4
	adds r0, #0x10
	ldrb r4, [r4]
	lsls r1, r4, #4
	adds r1, #0x48
	ldr r2, _0807E954 @ =0x000006C2
	adds r3, r6, #0
	bl sub_8082B00
	b _0807EB1A
	.align 2, 0
_0807E954: .4byte 0x000006C2
_0807E958:
	mov r1, sb
	ldrb r1, [r1]
	lsls r0, r1, #2
	adds r0, r7, r0
	ldr r1, [r0]
	mov r8, sl
	mov r2, r8
	ldrb r2, [r2]
	lsls r0, r2, #1
	adds r1, #0x1c
	adds r1, r1, r0
	ldrh r3, [r1]
	mov ip, r3
	ldrb r2, [r5]
	lsls r0, r2, #2
	adds r0, r7, r0
	ldr r0, [r0]
	ldrb r3, [r4]
	lsls r2, r3, #1
	adds r0, #0x1c
	adds r0, r0, r2
	ldrh r0, [r0]
	strh r0, [r1]
	ldrb r1, [r5]
	lsls r0, r1, #2
	adds r0, r7, r0
	ldr r0, [r0]
	ldrb r2, [r4]
	lsls r1, r2, #1
	adds r0, #0x1c
	adds r0, r0, r1
	mov r3, ip
	strh r3, [r0]
	ldrb r1, [r5]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, #2
	ldrb r2, [r4]
	lsls r1, r2, #1
	adds r1, #9
	movs r2, #0xc
	bl sub_8041728
	ldr r0, [r6, #0x54]
	bl UnitRemoveInvalidItems
	ldr r0, [r6, #0x58]
	bl UnitRemoveInvalidItems
	ldr r1, [r6, #0x54]
	movs r0, #0
	bl sub_807D6C0
	ldr r1, [r6, #0x58]
	movs r0, #1
	bl sub_807D6C0
	mov r0, sb
	ldrb r3, [r0]
	lsls r0, r3, #2
	adds r0, r7, r0
	ldr r2, [r0]
	mov r7, r8
	ldrb r7, [r7]
	lsls r1, r7, #1
	adds r0, r2, #0
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r0, [r0]
	cmp r0, #0
	beq _0807E9F0
	strb r3, [r5]
	mov r1, r8
	ldrb r0, [r1]
	b _0807EA0A
_0807E9F0:
	adds r0, r2, #0
	bl GetUnitItemCount
	cmp r0, #0
	ble _0807EA08
	mov r2, sb
	ldrb r0, [r2]
	strb r0, [r5]
	mov r3, sl
	ldrb r0, [r3]
	subs r0, #1
	b _0807EA0A
_0807EA08:
	movs r0, #0
_0807EA0A:
	strb r0, [r4]
	movs r0, #0xff
	mov r7, sb
	strb r0, [r7]
	ldrb r1, [r5]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, #2
	ldrb r4, [r4]
	lsls r1, r4, #1
	b _0807EAB2
_0807EA22:
	mov r2, r8
	ldr r0, [r2]
	ldrh r1, [r0, #8]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0807EABC
	ldr r0, _0807EA60 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807EA40
	movs r0, #0x6b
	bl m4aSongNumStart
_0807EA40:
	adds r7, r6, #0
	adds r7, #0x30
	ldrb r0, [r7]
	cmp r0, #0xff
	bne _0807EA76
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r0, #0
	bne _0807EA64
	adds r0, r6, #0
	movs r1, #7
	bl Proc_Goto
	b _0807EB1A
	.align 2, 0
_0807EA60: .4byte gPlaySt
_0807EA64:
	adds r0, r6, #0
	movs r1, #1
	bl sub_80829E8
	adds r0, r6, #0
	movs r1, #6
	bl Proc_Goto
	b _0807EB1A
_0807EA76:
	adds r4, r6, #0
	adds r4, #0x2f
	ldrb r3, [r4]
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #1
	adds r0, #2
	adds r5, r6, #0
	adds r5, #0x2e
	ldrb r2, [r5]
	lsls r1, r2, #1
	adds r1, #9
	movs r2, #0xc
	bl sub_8041728
	ldrb r0, [r7]
	strb r0, [r4]
	adds r0, r6, #0
	adds r0, #0x31
	ldrb r0, [r0]
	strb r0, [r5]
	movs r0, #0xff
	strb r0, [r7]
	ldrb r3, [r4]
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #1
	adds r0, #2
	ldrb r5, [r5]
	lsls r1, r5, #1
_0807EAB2:
	adds r1, #9
	movs r2, #0xc
	bl sub_804169C
	b _0807EB1A
_0807EABC:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0807EB1A
	ldr r4, [sp, #8]
	ldrb r0, [r4]
	cmp r0, #0
	bne _0807EB1A
	adds r3, r6, #0
	adds r3, #0x2f
	ldrb r7, [r3]
	lsls r0, r7, #2
	adds r5, r6, #0
	adds r5, #0x54
	adds r0, r5, r0
	ldr r0, [r0]
	adds r2, r6, #0
	adds r2, #0x2e
	ldrb r4, [r2]
	lsls r1, r4, #1
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r0, [r0]
	adds r4, r2, #0
	cmp r0, #0
	beq _0807EB1A
	movs r0, #2
	ldr r7, [sp, #8]
	strb r0, [r7]
	ldrb r2, [r3]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	ldrb r3, [r4]
	lsls r1, r3, #4
	adds r1, #0x48
	lsls r2, r2, #2
	adds r2, r5, r2
	ldr r2, [r2]
	lsls r3, r3, #1
	adds r2, #0x1c
	adds r2, r2, r3
	ldrh r2, [r2]
	bl sub_80706FC
_0807EB1A:
	ldr r0, [sp, #8]
	ldrb r0, [r0]
	cmp r0, #2
	bne _0807EB60
	adds r0, r6, #0
	adds r0, #0x2f
	adds r4, r6, #0
	adds r4, #0x2e
	ldr r1, [sp]
	ldrb r2, [r0]
	cmp r1, r2
	bne _0807EB3A
	ldr r3, [sp, #4]
	ldrb r7, [r4]
	cmp r3, r7
	beq _0807EB60
_0807EB3A:
	ldrb r3, [r0]
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #4
	adds r0, #0x10
	ldrb r4, [r4]
	lsls r1, r4, #4
	adds r1, #0x48
	lsls r3, r3, #2
	adds r2, r6, #0
	adds r2, #0x54
	adds r2, r2, r3
	ldr r2, [r2]
	lsls r4, r4, #1
	adds r2, #0x1c
	adds r2, r2, r4
	ldrh r2, [r2]
	bl sub_80706FC
_0807EB60:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_807EB70
sub_807EB70: @ 0x0807EB70
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x34
	adds r6, r0, #0
	bl GetSupplyItems
	mov sl, r0
	movs r4, #0
	str r4, [sp]
	movs r0, #0xf
	movs r1, #4
	movs r2, #0xf
	movs r3, #0x10
	bl sub_8041358
	ldr r0, _0807ED78 @ =0x02016368
	strh r4, [r0]
	movs r4, #1
_0807EB9A:
	adds r0, r4, #0
	bl GetUnit
	adds r5, r0, #0
	adds r4, #1
	mov sb, r4
	adds r0, r6, #0
	adds r0, #0x46
	str r0, [sp, #0x28]
	adds r1, r6, #0
	adds r1, #0x4e
	str r1, [sp, #0x30]
	movs r2, #0x50
	adds r2, r2, r6
	mov r8, r2
	adds r3, r6, #0
	adds r3, #0x47
	str r3, [sp, #0x2c]
	adds r4, r6, #0
	adds r4, #0x2e
	str r4, [sp, #0x14]
	adds r7, r6, #0
	adds r7, #0x45
	str r7, [sp, #0x24]
	subs r0, #0x17
	str r0, [sp, #0x18]
	subs r1, #0x1e
	str r1, [sp, #0x1c]
	adds r2, r6, #0
	adds r2, #0x31
	str r2, [sp, #0x20]
	subs r3, #0x1b
	str r3, [sp, #0xc]
	subs r4, #1
	str r4, [sp, #0x10]
	cmp r5, #0
	beq _0807EC46
	ldr r0, [r5]
	cmp r0, #0
	beq _0807EC46
	movs r0, #4
	ldrh r7, [r5, #0xc]
	ands r0, r7
	cmp r0, #0
	bne _0807EC46
	ldr r0, [r6, #0x54]
	cmp r5, r0
	beq _0807EC46
	adds r0, r5, #0
	bl GetUnitItemCount
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	movs r3, #0
	cmp r3, r2
	bhs _0807EC46
	ldr r7, _0807ED7C @ =0x02015D28
	ldr r4, _0807ED78 @ =0x02016368
	movs r0, #0x1c
	adds r0, r0, r5
	mov ip, r0
_0807EC14:
	ldrh r0, [r4]
	lsls r1, r0, #2
	adds r1, r1, r7
	ldr r0, [r5]
	ldrb r0, [r0, #4]
	strb r0, [r1]
	ldrh r0, [r4]
	lsls r1, r0, #2
	adds r1, r1, r7
	lsls r0, r3, #1
	add r0, ip
	ldrh r0, [r0]
	strh r0, [r1, #2]
	ldrh r1, [r4]
	lsls r0, r1, #2
	adds r0, r0, r7
	strb r3, [r0, #1]
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	adds r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	cmp r3, r2
	blo _0807EC14
_0807EC46:
	mov r4, sb
	cmp r4, #0x3f
	ble _0807EB9A
	ldr r1, _0807ED78 @ =0x02016368
	ldrh r4, [r1]
	movs r2, #0
	mov r3, sl
	ldrh r0, [r3]
	cmp r0, #0
	beq _0807EC8C
	ldr r7, _0807ED7C @ =0x02015D28
	movs r5, #0
	adds r3, r1, #0
_0807EC60:
	adds r1, r2, r4
	lsls r1, r1, #2
	adds r1, r1, r7
	lsls r0, r2, #1
	add r0, sl
	ldrh r0, [r0]
	strh r0, [r1, #2]
	strb r5, [r1]
	strb r2, [r1, #1]
	ldrh r0, [r3]
	adds r0, #1
	strh r0, [r3]
	adds r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	cmp r2, #0x63
	bhi _0807EC8C
	lsls r0, r2, #1
	add r0, sl
	ldrh r0, [r0]
	cmp r0, #0
	bne _0807EC60
_0807EC8C:
	ldr r0, [r6, #0x14]
	adds r0, #0x39
	ldrb r0, [r0]
	movs r4, #0
	ldr r7, [sp, #0x28]
	strb r0, [r7]
	ldrb r0, [r7]
	bl sub_807D834
	ldr r1, [sp, #0x30]
	ldrh r0, [r1]
	movs r5, #0
	mov r2, r8
	strh r0, [r2]
	ldr r3, [sp, #0x2c]
	ldrb r0, [r3]
	ldr r7, [sp, #0x14]
	strb r0, [r7]
	ldr r0, [sp, #0x14]
	mov r1, r8
	bl sub_80823A0
	ldr r0, _0807ED80 @ =0x02015638
	ldr r2, [r6, #0x54]
	mov r1, r8
	ldrh r1, [r1]
	lsrs r3, r1, #4
	str r4, [sp]
	movs r1, #1
	bl sub_807D9E4
	adds r0, r6, #0
	bl sub_807D358
	ldr r2, [sp, #0x24]
	strb r5, [r2]
	movs r0, #1
	ldr r3, [sp, #0x18]
	strb r0, [r3]
	movs r0, #0xff
	ldr r4, [sp, #0x1c]
	ldrb r1, [r4]
	orrs r1, r0
	strb r1, [r4]
	ldr r7, [sp, #0x20]
	ldrb r7, [r7]
	orrs r0, r7
	ldr r1, [sp, #0x20]
	strb r0, [r1]
	ldr r0, _0807ED84 @ =0x02015690
	ldr r2, _0807ED7C @ =0x02015D28
	mov r3, r8
	ldrh r3, [r3]
	lsrs r1, r3, #4
	ldr r4, [sp, #0x14]
	ldrb r4, [r4]
	adds r1, r4, r1
	lsls r1, r1, #2
	adds r1, r1, r2
	ldrb r1, [r1]
	movs r2, #0x18
	movs r3, #0
	bl sub_807DCB8
	ldr r7, [sp, #0x18]
	ldrb r2, [r7]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldr r3, [sp, #0x14]
	ldrb r3, [r3]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_804169C
	ldr r4, [sp, #0x24]
	ldrb r1, [r4]
	mov r7, r8
	ldrh r2, [r7]
	subs r2, #0x28
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	ldr r0, [r6, #0x60]
	ldrh r1, [r7]
	str r1, [sp]
	ldr r1, _0807ED88 @ =0x0201636A
	ldrh r1, [r1]
	str r1, [sp, #4]
	movs r1, #7
	str r1, [sp, #8]
	movs r1, #0xe0
	movs r2, #0x34
	movs r3, #0xb
	bl sub_8082320
	movs r0, #0xf
	bl EnableBgSync
	ldr r0, [sp, #0xc]
	strb r5, [r0]
	ldr r1, [sp, #0x10]
	ldrb r0, [r1]
	cmp r0, #0
	bne _0807ED8C
	movs r1, #1
	rsbs r1, r1, #0
	adds r0, r6, #0
	bl sub_80829E8
	b _0807ED96
	.align 2, 0
_0807ED78: .4byte 0x02016368
_0807ED7C: .4byte 0x02015D28
_0807ED80: .4byte 0x02015638
_0807ED84: .4byte 0x02015690
_0807ED88: .4byte 0x0201636A
_0807ED8C:
	cmp r0, #1
	bne _0807ED96
	ldr r0, [r6, #0x5c]
	bl Proc_End
_0807ED96:
	adds r0, r6, #0
	bl sub_807D16C
	str r0, [r6, #0x5c]
	movs r0, #1
	bl sub_807E06C
	movs r0, #3
	ldr r2, [sp, #0x10]
	strb r0, [r2]
	add sp, #0x34
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807EDBC
sub_807EDBC: @ 0x0807EDBC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	mov r8, r0
	adds r0, #0x46
	ldrb r0, [r0]
	str r0, [sp, #4]
	mov r1, r8
	adds r1, #0x2e
	mov r0, r8
	adds r0, #0x50
	ldrh r0, [r0]
	lsrs r0, r0, #4
	ldrb r1, [r1]
	adds r1, r1, r0
	str r1, [sp, #8]
	mov r4, r8
	adds r4, #0x29
	ldrb r2, [r4]
	cmp r2, #0
	beq _0807EE14
	ldr r0, _0807EE0C @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0807EE14
	cmp r2, #1
	beq _0807EE10
	bl sub_807089C
	movs r0, #0
	strb r0, [r4]
	bl _0807FBD8
	.align 2, 0
_0807EE0C: .4byte gKeySt
_0807EE10:
	movs r0, #0
	strb r0, [r4]
_0807EE14:
	mov r0, r8
	adds r0, #0x2c
	ldrb r1, [r0]
	mov sb, r0
	cmp r1, #0x64
	bls _0807EE24
	bl _0807FA9A
_0807EE24:
	lsls r0, r1, #2
	ldr r1, _0807EE30 @ =_0807EE34
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0807EE30: .4byte _0807EE34
_0807EE34: @ jump table
	.4byte _0807F2FE @ case 0
	.4byte _0807F7FC @ case 1
	.4byte _0807F844 @ case 2
	.4byte _0807FA9A @ case 3
	.4byte _0807FA9A @ case 4
	.4byte _0807F88C @ case 5
	.4byte _0807F8A4 @ case 6
	.4byte _0807F970 @ case 7
	.4byte _0807FA9A @ case 8
	.4byte _0807FA9A @ case 9
	.4byte _0807F97A @ case 10
	.4byte _0807F996 @ case 11
	.4byte _0807FA84 @ case 12
	.4byte _0807FA9A @ case 13
	.4byte _0807FA9A @ case 14
	.4byte _0807FA9A @ case 15
	.4byte _0807FA9A @ case 16
	.4byte _0807FA9A @ case 17
	.4byte _0807FA9A @ case 18
	.4byte _0807FA9A @ case 19
	.4byte _0807FA9A @ case 20
	.4byte _0807FA9A @ case 21
	.4byte _0807FA9A @ case 22
	.4byte _0807FA9A @ case 23
	.4byte _0807FA9A @ case 24
	.4byte _0807FA9A @ case 25
	.4byte _0807FA9A @ case 26
	.4byte _0807FA9A @ case 27
	.4byte _0807FA9A @ case 28
	.4byte _0807FA9A @ case 29
	.4byte _0807FA9A @ case 30
	.4byte _0807FA9A @ case 31
	.4byte _0807FA9A @ case 32
	.4byte _0807FA9A @ case 33
	.4byte _0807FA9A @ case 34
	.4byte _0807FA9A @ case 35
	.4byte _0807FA9A @ case 36
	.4byte _0807FA9A @ case 37
	.4byte _0807FA9A @ case 38
	.4byte _0807FA9A @ case 39
	.4byte _0807FA9A @ case 40
	.4byte _0807FA9A @ case 41
	.4byte _0807FA9A @ case 42
	.4byte _0807FA9A @ case 43
	.4byte _0807FA9A @ case 44
	.4byte _0807FA9A @ case 45
	.4byte _0807FA9A @ case 46
	.4byte _0807FA9A @ case 47
	.4byte _0807FA9A @ case 48
	.4byte _0807FA9A @ case 49
	.4byte _0807FA9A @ case 50
	.4byte _0807FA9A @ case 51
	.4byte _0807FA9A @ case 52
	.4byte _0807FA9A @ case 53
	.4byte _0807FA9A @ case 54
	.4byte _0807FA9A @ case 55
	.4byte _0807FA9A @ case 56
	.4byte _0807FA9A @ case 57
	.4byte _0807FA9A @ case 58
	.4byte _0807FA9A @ case 59
	.4byte _0807FA9A @ case 60
	.4byte _0807FA9A @ case 61
	.4byte _0807FA9A @ case 62
	.4byte _0807FA9A @ case 63
	.4byte _0807FA9A @ case 64
	.4byte _0807FA9A @ case 65
	.4byte _0807FA9A @ case 66
	.4byte _0807FA9A @ case 67
	.4byte _0807FA9A @ case 68
	.4byte _0807FA9A @ case 69
	.4byte _0807FA9A @ case 70
	.4byte _0807FA9A @ case 71
	.4byte _0807FA9A @ case 72
	.4byte _0807FA9A @ case 73
	.4byte _0807FA9A @ case 74
	.4byte _0807FA9A @ case 75
	.4byte _0807FA9A @ case 76
	.4byte _0807FA9A @ case 77
	.4byte _0807FA9A @ case 78
	.4byte _0807FA9A @ case 79
	.4byte _0807FA9A @ case 80
	.4byte _0807FA9A @ case 81
	.4byte _0807FA9A @ case 82
	.4byte _0807FA9A @ case 83
	.4byte _0807FA9A @ case 84
	.4byte _0807FA9A @ case 85
	.4byte _0807FA9A @ case 86
	.4byte _0807FA9A @ case 87
	.4byte _0807FA9A @ case 88
	.4byte _0807FA9A @ case 89
	.4byte _0807FA9A @ case 90
	.4byte _0807FA9A @ case 91
	.4byte _0807FA9A @ case 92
	.4byte _0807FA9A @ case 93
	.4byte _0807FA9A @ case 94
	.4byte _0807FA9A @ case 95
	.4byte _0807FA9A @ case 96
	.4byte _0807FA9A @ case 97
	.4byte _0807FA9A @ case 98
	.4byte _0807FA9A @ case 99
	.4byte _0807EFC8 @ case 100
_0807EFC8:
	mov r1, r8
	ldr r0, [r1, #0x54]
	bl GetUnitItemCount
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	mov r0, r8
	adds r0, #0x29
	ldrb r1, [r0]
	adds r3, r0, #0
	cmp r1, #0
	bne _0807EFEA
	cmp r7, #4
	bhi _0807EFEA
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
_0807EFEA:
	ldr r2, _0807F054 @ =gKeySt
	ldr r1, [r2]
	movs r4, #0x40
	mov sl, r4
	mov r0, sl
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _0807F078
	cmp r7, #1
	bls _0807F078
	mov r5, r8
	adds r5, #0x2f
	ldrb r2, [r5]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	mov r4, r8
	adds r4, #0x2e
	ldrb r3, [r4]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_8041728
	ldrb r0, [r4]
	adds r6, r4, #0
	adds r4, r5, #0
	cmp r0, #0
	bne _0807F05C
	ldr r0, _0807F054 @ =gKeySt
	ldr r1, [r0]
	mov r0, sl
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	bne _0807F03C
	b _0807F5A6
_0807F03C:
	subs r0, r7, #1
_0807F03E:
	strb r0, [r6]
	ldr r0, _0807F058 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _0807F04C
	b _0807F5A6
_0807F04C:
	movs r0, #0x66
	bl m4aSongNumStart
	b _0807F5A6
	.align 2, 0
_0807F054: .4byte gKeySt
_0807F058: .4byte gPlaySt
_0807F05C:
	subs r0, #1
	strb r0, [r6]
	ldr r0, _0807F074 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _0807F06C
	b _0807F5A6
_0807F06C:
	movs r0, #0x66
	bl m4aSongNumStart
	b _0807F5A6
	.align 2, 0
_0807F074: .4byte gPlaySt
_0807F078:
	ldr r2, _0807F0C0 @ =gKeySt
	ldr r1, [r2]
	movs r4, #0x80
	mov sl, r4
	mov r0, sl
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _0807F0F4
	cmp r7, #1
	bls _0807F0F4
	mov r5, r8
	adds r5, #0x2f
	ldrb r2, [r5]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	mov r4, r8
	adds r4, #0x2e
	ldrb r3, [r4]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_8041728
	ldrb r1, [r4]
	subs r0, r7, #1
	adds r6, r4, #0
	adds r4, r5, #0
	cmp r1, r0
	bge _0807F0C4
	adds r0, r1, #1
	b _0807F03E
	.align 2, 0
_0807F0C0: .4byte gKeySt
_0807F0C4:
	ldr r0, _0807F0EC @ =gKeySt
	ldr r1, [r0]
	mov r0, sl
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	bne _0807F0D4
	b _0807F5A6
_0807F0D4:
	movs r0, #0
	strb r0, [r6]
	ldr r0, _0807F0F0 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _0807F0E4
	b _0807F5A6
_0807F0E4:
	movs r0, #0x66
	bl m4aSongNumStart
	b _0807F5A6
	.align 2, 0
_0807F0EC: .4byte gKeySt
_0807F0F0: .4byte gPlaySt
_0807F0F4:
	ldr r2, _0807F164 @ =gKeySt
	ldr r1, [r2]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	bne _0807F104
	b _0807F230
_0807F104:
	ldrb r0, [r3]
	cmp r0, #0
	beq _0807F10C
	b _0807F230
_0807F10C:
	mov r0, r8
	adds r0, #0x4c
	ldrb r0, [r0]
	mov r6, r8
	adds r6, #0x2e
	mov r5, r8
	adds r5, #0x31
	cmp r0, #0
	beq _0807F170
	mov r3, r8
	ldr r0, [r3, #0x54]
	ldrb r1, [r6]
	ldr r3, _0807F168 @ =0x02015D28
	mov r2, r8
	adds r2, #0x50
	ldrh r2, [r2]
	lsrs r2, r2, #4
	ldrb r4, [r5]
	adds r2, r4, r2
	lsls r2, r2, #2
	adds r2, r2, r3
	ldrh r2, [r2, #2]
	bl sub_8082C34
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0807F170
	mov r1, r8
	adds r1, #0x2f
	ldrb r2, [r1]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	ldrb r6, [r6]
	lsls r1, r6, #4
	adds r1, #0x48
	ldr r2, _0807F16C @ =0x000006C2
	mov r3, r8
	bl sub_8082B00
	bl _0807FA9A
	.align 2, 0
_0807F164: .4byte gKeySt
_0807F168: .4byte 0x02015D28
_0807F16C: .4byte 0x000006C2
_0807F170:
	ldr r0, _0807F220 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807F180
	movs r0, #0x6a
	bl m4aSongNumStart
_0807F180:
	mov r3, r8
	ldr r0, [r3, #0x54]
	ldrb r1, [r6]
	mov r4, r8
	adds r4, #0x50
	ldrh r3, [r4]
	lsrs r2, r3, #4
	ldrb r3, [r5]
	adds r2, r3, r2
	bl sub_807DF60
	mov r7, r8
	adds r7, #0x2f
	ldrb r2, [r7]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r3, [r6]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_8041728
	ldrb r0, [r5]
	movs r5, #0
	strb r0, [r6]
	movs r0, #1
	strb r0, [r7]
	adds r0, r6, #0
	adds r1, r4, #0
	bl sub_80823A0
	mov r0, r8
	ldr r1, [r0, #0x54]
	movs r0, #0
	bl sub_807D6C0
	ldr r0, _0807F224 @ =0x02015638
	mov r1, r8
	ldr r2, [r1, #0x54]
	ldrh r1, [r4]
	lsrs r3, r1, #4
	str r5, [sp]
	movs r1, #1
	bl sub_807D9E4
	ldr r0, _0807F228 @ =0x02015690
	ldr r2, _0807F22C @ =0x02015D28
	ldrh r4, [r4]
	lsrs r1, r4, #4
	ldrb r3, [r6]
	adds r1, r3, r1
	lsls r1, r1, #2
	adds r1, r1, r2
	ldrb r1, [r1]
	movs r2, #0x18
	movs r3, #0
	bl sub_807DCB8
	ldrb r2, [r7]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r6, [r6]
	lsls r1, r6, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_804169C
	mov r4, sb
	strb r5, [r4]
	bl _0807FA9A
	.align 2, 0
_0807F220: .4byte gPlaySt
_0807F224: .4byte 0x02015638
_0807F228: .4byte 0x02015690
_0807F22C: .4byte 0x02015D28
_0807F230:
	ldr r1, _0807F294 @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0807F29C
	ldr r0, _0807F298 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807F24E
	movs r0, #0x6b
	bl m4aSongNumStart
_0807F24E:
	mov r5, r8
	adds r5, #0x2f
	ldrb r2, [r5]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	mov r4, r8
	adds r4, #0x2e
	ldrb r3, [r4]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_8041728
	mov r0, r8
	adds r0, #0x31
	ldrb r0, [r0]
	movs r1, #0
	strb r0, [r4]
	movs r0, #1
	strb r0, [r5]
	mov r0, sb
	strb r1, [r0]
	ldrb r2, [r5]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r4, [r4]
	lsls r1, r4, #1
	b _0807F5B4
	.align 2, 0
_0807F294: .4byte gKeySt
_0807F298: .4byte gPlaySt
_0807F29C:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r1
	cmp r0, #0
	bne _0807F2AA
	bl _0807FA9A
_0807F2AA:
	mov r2, r8
	adds r2, #0x29
	ldrb r0, [r2]
	cmp r0, #0
	beq _0807F2B8
	bl _0807FA9A
_0807F2B8:
	mov r1, r8
	ldr r0, [r1, #0x54]
	mov r3, r8
	adds r3, #0x2e
	ldrb r4, [r3]
	lsls r1, r4, #1
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r0, [r0]
	cmp r0, #0
	bne _0807F2D0
	b _0807FA9A
_0807F2D0:
	movs r0, #2
	strb r0, [r2]
	mov r0, r8
	adds r0, #0x2f
	ldrb r2, [r0]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	ldrb r3, [r3]
	lsls r1, r3, #4
	lsls r2, r2, #5
	subs r2, #0x48
	subs r1, r1, r2
	mov r4, r8
	ldr r2, [r4, #0x54]
	lsls r3, r3, #1
	adds r2, #0x1c
	adds r2, r2, r3
	ldrh r2, [r2]
	bl sub_80706FC
	b _0807FA9A
_0807F2FE:
	ldr r2, _0807F318 @ =gKeySt
	ldr r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _0807F31C
	mov r1, r8
	adds r1, #0x4a
	movs r0, #2
	b _0807F322
	.align 2, 0
_0807F318: .4byte gKeySt
_0807F31C:
	mov r1, r8
	adds r1, #0x4a
	movs r0, #1
_0807F322:
	strb r0, [r1]
	adds r7, r1, #0
	ldr r0, _0807F358 @ =gKeySt
	ldr r1, [r0]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0807F410
	mov r0, r8
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	bne _0807F410
	ldr r0, _0807F35C @ =0x0201636A
	ldrh r0, [r0]
	cmp r0, #0
	bne _0807F364
	ldr r0, _0807F360 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807F410
	movs r0, #0x6c
	bl m4aSongNumStart
	b _0807F410
	.align 2, 0
_0807F358: .4byte gKeySt
_0807F35C: .4byte 0x0201636A
_0807F360: .4byte gPlaySt
_0807F364:
	ldr r2, _0807F3D8 @ =0x02015D28
	mov r1, r8
	adds r1, #0x2e
	mov r0, r8
	adds r0, #0x50
	ldrh r0, [r0]
	lsrs r0, r0, #4
	ldrb r3, [r1]
	adds r0, r3, r0
	lsls r0, r0, #2
	adds r0, r0, r2
	ldrb r5, [r0]
	adds r6, r1, #0
	cmp r5, #0
	bne _0807F3F0
	ldr r0, _0807F3DC @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807F392
	movs r0, #0x6a
	bl m4aSongNumStart
_0807F392:
	movs r0, #0x64
	mov r4, sb
	strb r0, [r4]
	ldrb r0, [r6]
	mov r1, r8
	adds r1, #0x31
	strb r0, [r1]
	mov r4, r8
	adds r4, #0x2f
	ldrb r2, [r4]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r3, [r6]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_8041728
	mov r1, r8
	ldr r0, [r1, #0x54]
	bl GetUnitItemCount
	cmp r0, #4
	bgt _0807F3E0
	mov r2, r8
	ldr r0, [r2, #0x54]
	bl GetUnitItemCount
	strb r0, [r6]
	b _0807F3E2
	.align 2, 0
_0807F3D8: .4byte 0x02015D28
_0807F3DC: .4byte gPlaySt
_0807F3E0:
	strb r5, [r6]
_0807F3E2:
	movs r0, #0
	strb r0, [r4]
	ldrb r6, [r6]
	lsls r1, r6, #1
	adds r1, #9
	movs r0, #2
	b _0807F5BA
_0807F3F0:
	ldr r0, _0807F40C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807F400
	movs r0, #0x6a
	bl m4aSongNumStart
_0807F400:
	mov r0, r8
	movs r1, #7
	bl Proc_Goto
	b _0807FA9A
	.align 2, 0
_0807F40C: .4byte gPlaySt
_0807F410:
	ldr r1, _0807F440 @ =gKeySt
	ldr r0, [r1]
	ldrh r3, [r0, #8]
	movs r0, #2
	ands r0, r3
	cmp r0, #0
	beq _0807F448
	ldr r0, _0807F444 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807F42E
	movs r0, #0x6b
	bl m4aSongNumStart
_0807F42E:
	mov r0, r8
	movs r1, #1
	bl sub_80829E8
	mov r0, r8
	movs r1, #6
	bl Proc_Goto
	b _0807FBD8
	.align 2, 0
_0807F440: .4byte gKeySt
_0807F444: .4byte gPlaySt
_0807F448:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r3
	cmp r0, #0
	beq _0807F4A4
	mov r1, r8
	adds r1, #0x29
	ldrb r0, [r1]
	cmp r0, #0
	bne _0807F4A4
	ldr r0, _0807F49C @ =0x0201636A
	ldrh r0, [r0]
	cmp r0, #0
	bne _0807F466
	b _0807FA9A
_0807F466:
	movs r0, #2
	strb r0, [r1]
	mov r0, r8
	adds r0, #0x2f
	ldrb r3, [r0]
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #4
	adds r0, #0x10
	adds r1, #5
	ldrb r2, [r1]
	lsls r1, r2, #4
	lsls r3, r3, #5
	subs r3, #0x48
	subs r1, r1, r3
	ldr r4, _0807F4A0 @ =0x02015D28
	mov r3, r8
	adds r3, #0x50
	ldrh r3, [r3]
	lsrs r3, r3, #4
	adds r2, r2, r3
	lsls r2, r2, #2
	adds r2, r2, r4
	ldrh r2, [r2, #2]
	bl sub_80706FC
	b _0807FA9A
	.align 2, 0
_0807F49C: .4byte 0x0201636A
_0807F4A0: .4byte 0x02015D28
_0807F4A4:
	ldr r3, _0807F548 @ =gKeySt
	ldr r1, [r3]
	movs r2, #0x40
	adds r0, r2, #0
	ldrh r4, [r1, #6]
	ands r0, r4
	cmp r0, #0
	bne _0807F4C8
	adds r0, r2, #0
	ldrh r1, [r1, #0x10]
	ands r0, r1
	cmp r0, #0
	bne _0807F4C0
	b _0807F5CC
_0807F4C0:
	ldrb r0, [r7]
	cmp r0, #2
	beq _0807F4C8
	b _0807F5CC
_0807F4C8:
	mov r0, r8
	adds r0, #0x2e
	ldrb r1, [r0]
	adds r6, r0, #0
	cmp r1, #0
	beq _0807F5CC
	ldr r0, _0807F54C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807F4E4
	movs r0, #0x66
	bl m4aSongNumStart
_0807F4E4:
	ldrb r4, [r6]
	cmp r4, #1
	bne _0807F55C
	mov r5, r8
	adds r5, #0x50
	ldrh r0, [r5]
	cmp r0, #0
	beq _0807F55C
	ldr r0, _0807F550 @ =0x02015638
	ldrh r1, [r5]
	lsrs r2, r1, #4
	subs r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	mov r1, r8
	ldr r3, [r1, #0x54]
	movs r1, #0
	str r1, [sp]
	movs r1, #1
	bl sub_807DB80
	mov r0, r8
	bl sub_807D358
	ldr r1, _0807F554 @ =0x02015D28
	ldrh r2, [r5]
	lsrs r0, r2, #4
	ldrb r6, [r6]
	adds r0, r6, r0
	subs r0, #1
	lsls r0, r0, #2
	adds r1, r0, r1
	movs r3, #0xff
	ldrb r0, [r1]
	cmp r3, r0
	beq _0807F538
	ldr r0, _0807F558 @ =0x02015690
	ldrb r1, [r1]
	movs r2, #0x18
	movs r3, #0
	bl sub_807DCB8
_0807F538:
	ldrb r7, [r7]
	lsls r0, r7, #2
	ldrh r1, [r5]
	subs r0, r1, r0
	strh r0, [r5]
	mov r2, sb
	strb r4, [r2]
	b _0807FA9A
	.align 2, 0
_0807F548: .4byte gKeySt
_0807F54C: .4byte gPlaySt
_0807F550: .4byte 0x02015638
_0807F554: .4byte 0x02015D28
_0807F558: .4byte 0x02015690
_0807F55C:
	mov r4, r8
	adds r4, #0x2f
	ldrb r2, [r4]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r3, [r6]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_8041728
	ldrb r0, [r6]
	subs r0, #1
	strb r0, [r6]
	ldr r1, _0807F5C4 @ =0x02015D28
	mov r0, r8
	adds r0, #0x50
	ldrh r0, [r0]
	lsrs r0, r0, #4
	ldrb r2, [r6]
	adds r0, r2, r0
	lsls r0, r0, #2
	adds r1, r0, r1
	movs r3, #0xff
	ldrb r0, [r1]
	cmp r3, r0
	beq _0807F5A6
	ldr r0, _0807F5C8 @ =0x02015690
	ldrb r1, [r1]
	movs r2, #0x18
	movs r3, #0
	bl sub_807DCB8
_0807F5A6:
	ldrb r2, [r4]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r6, [r6]
	lsls r1, r6, #1
_0807F5B4:
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
_0807F5BA:
	movs r2, #0xc
	bl sub_804169C
	b _0807FA9A
	.align 2, 0
_0807F5C4: .4byte 0x02015D28
_0807F5C8: .4byte 0x02015690
_0807F5CC:
	ldr r2, _0807F664 @ =gKeySt
	ldr r1, [r2]
	movs r2, #0x80
	adds r0, r2, #0
	ldrh r3, [r1, #6]
	ands r0, r3
	cmp r0, #0
	bne _0807F5F0
	adds r0, r2, #0
	ldrh r1, [r1, #0x10]
	ands r0, r1
	cmp r0, #0
	bne _0807F5E8
	b _0807F710
_0807F5E8:
	ldrb r4, [r7]
	cmp r4, #2
	beq _0807F5F0
	b _0807F710
_0807F5F0:
	mov r0, r8
	adds r0, #0x2e
	ldrb r1, [r0]
	adds r6, r0, #0
	cmp r1, #5
	bls _0807F5FE
	b _0807F710
_0807F5FE:
	ldr r3, _0807F668 @ =0x0201636A
	cmp r1, #5
	bne _0807F678
	mov r5, r8
	adds r5, #0x50
	ldrh r0, [r5]
	lsrs r2, r0, #4
	adds r1, r2, #7
	ldrh r0, [r3]
	cmp r1, r0
	bge _0807F678
	ldr r0, _0807F66C @ =0x02015638
	adds r2, r1, #0
	mov r1, r8
	ldr r3, [r1, #0x54]
	movs r1, #0
	str r1, [sp]
	movs r1, #1
	bl sub_807DB80
	mov r0, r8
	bl sub_807D358
	ldr r1, _0807F670 @ =0x02015D28
	ldrh r2, [r5]
	lsrs r0, r2, #4
	ldrb r6, [r6]
	adds r0, r6, r0
	adds r0, #1
	lsls r0, r0, #2
	adds r1, r0, r1
	movs r3, #0xff
	ldrb r4, [r1]
	cmp r3, r4
	beq _0807F650
	ldr r0, _0807F674 @ =0x02015690
	ldrb r1, [r1]
	movs r2, #0x18
	movs r3, #0
	bl sub_807DCB8
_0807F650:
	ldrb r7, [r7]
	lsls r0, r7, #2
	ldrh r1, [r5]
	adds r0, r1, r0
	strh r0, [r5]
	movs r0, #2
	mov r2, sb
	strb r0, [r2]
	b _0807F6EE
	.align 2, 0
_0807F664: .4byte gKeySt
_0807F668: .4byte 0x0201636A
_0807F66C: .4byte 0x02015638
_0807F670: .4byte 0x02015D28
_0807F674: .4byte 0x02015690
_0807F678:
	mov r5, r8
	adds r5, #0x50
	ldrh r4, [r5]
	lsrs r0, r4, #4
	adds r4, r6, #0
	ldrb r1, [r4]
	adds r0, r0, r1
	adds r0, #1
	ldrh r3, [r3]
	cmp r0, r3
	blt _0807F690
	b _0807FA9A
_0807F690:
	mov r7, r8
	adds r7, #0x2f
	ldrb r2, [r7]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	lsls r1, r1, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_8041728
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	ldr r1, _0807F704 @ =0x02015D28
	ldrh r5, [r5]
	lsrs r0, r5, #4
	ldrb r4, [r4]
	adds r0, r4, r0
	lsls r0, r0, #2
	adds r1, r0, r1
	movs r0, #0xff
	ldrb r2, [r1]
	cmp r0, r2
	beq _0807F6D4
	ldr r0, _0807F708 @ =0x02015690
	ldrb r1, [r1]
	movs r2, #0x18
	movs r3, #0
	bl sub_807DCB8
_0807F6D4:
	ldrb r2, [r7]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r6, [r6]
	lsls r1, r6, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_804169C
_0807F6EE:
	ldr r0, _0807F70C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	bge _0807F6FA
	b _0807FA9A
_0807F6FA:
	movs r0, #0x66
	bl m4aSongNumStart
	b _0807FA9A
	.align 2, 0
_0807F704: .4byte 0x02015D28
_0807F708: .4byte 0x02015690
_0807F70C: .4byte gPlaySt
_0807F710:
	ldr r3, _0807F780 @ =gKeySt
	ldr r0, [r3]
	ldrh r1, [r0, #6]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0807F788
	ldr r0, _0807F784 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807F72E
	movs r0, #0x67
	bl m4aSongNumStart
_0807F72E:
	mov r2, r8
	adds r2, #0x46
	mov r0, r8
	adds r0, #0x32
	ldrb r4, [r2]
	adds r0, r4, r0
	mov r1, r8
	adds r1, #0x50
	ldrh r1, [r1]
	lsrs r1, r1, #4
	strb r1, [r0]
	mov r0, r8
	adds r0, #0x3b
	ldrb r2, [r2]
	adds r0, r2, r0
	mov r3, r8
	adds r3, #0x2e
	ldrb r1, [r3]
	strb r1, [r0]
	mov r0, r8
	adds r0, #0x2f
	ldrb r2, [r0]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r3, [r3]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_8041728
	mov r1, r8
	adds r1, #0x45
	movs r0, #0x38
	strb r0, [r1]
	movs r0, #5
	b _0807FA6E
	.align 2, 0
_0807F780: .4byte gKeySt
_0807F784: .4byte gPlaySt
_0807F788:
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	bne _0807F792
	b _0807FA9A
_0807F792:
	ldr r0, _0807F7F8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0807F7A2
	movs r0, #0x67
	bl m4aSongNumStart
_0807F7A2:
	mov r2, r8
	adds r2, #0x46
	mov r0, r8
	adds r0, #0x32
	ldrb r3, [r2]
	adds r0, r3, r0
	mov r1, r8
	adds r1, #0x50
	ldrh r1, [r1]
	lsrs r1, r1, #4
	strb r1, [r0]
	mov r0, r8
	adds r0, #0x3b
	ldrb r2, [r2]
	adds r0, r2, r0
	mov r3, r8
	adds r3, #0x2e
	ldrb r1, [r3]
	strb r1, [r0]
	mov r0, r8
	adds r0, #0x2f
	ldrb r2, [r0]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r3, [r3]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_8041728
	mov r1, r8
	adds r1, #0x45
	movs r0, #0xc8
	strb r0, [r1]
	movs r0, #0xa
	mov r4, sb
	strb r0, [r4]
	b _0807FA9A
	.align 2, 0
_0807F7F8: .4byte gPlaySt
_0807F7FC:
	mov r0, r8
	adds r0, #0x50
	mov r1, r8
	adds r1, #0x4a
	ldrb r1, [r1]
	lsls r1, r1, #2
	ldrh r2, [r0]
	subs r1, r2, r1
	strh r1, [r0]
	ldrh r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _0807F81A
	b _0807FA9A
_0807F81A:
	lsrs r0, r1, #4
	adds r0, #7
	lsls r0, r0, #1
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #6
	ldr r1, _0807F840 @ =0x02022B26
	adds r0, r0, r1
	movs r1, #0xf
	movs r2, #1
	movs r3, #0
	bl TmFillRect_t
	movs r0, #4
	bl EnableBgSync
	movs r0, #0
	b _0807F990
	.align 2, 0
_0807F840: .4byte 0x02022B26
_0807F844:
	mov r0, r8
	adds r0, #0x50
	mov r1, r8
	adds r1, #0x4a
	ldrb r1, [r1]
	lsls r1, r1, #2
	ldrh r4, [r0]
	adds r1, r4, r1
	strh r1, [r0]
	ldrh r1, [r0]
	movs r0, #0xf
	ands r0, r1
	cmp r0, #0
	beq _0807F862
	b _0807FA9A
_0807F862:
	lsrs r0, r1, #4
	subs r0, #1
	lsls r0, r0, #1
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #6
	ldr r1, _0807F888 @ =0x02022B26
	adds r0, r0, r1
	movs r1, #0xf
	movs r2, #1
	movs r3, #0
	bl TmFillRect_t
	movs r0, #4
	bl EnableBgSync
	movs r0, #0
	b _0807FA6E
	.align 2, 0
_0807F888: .4byte 0x02022B26
_0807F88C:
	mov r1, r8
	adds r1, #0x45
	ldrb r0, [r1]
	adds r0, #0x38
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x70
	beq _0807F8A0
	b _0807FA9A
_0807F8A0:
	movs r0, #6
	b _0807FA96
_0807F8A4:
	mov r1, r8
	adds r1, #0x45
	movs r0, #0x90
	strb r0, [r1]
	mov r0, r8
	adds r0, #0x46
	ldrb r1, [r0]
	adds r7, r0, #0
	cmp r1, #8
	bne _0807F8BC
	movs r0, #0
	b _0807F8BE
_0807F8BC:
	adds r0, r1, #1
_0807F8BE:
	strb r0, [r7]
	mov r0, r8
	adds r0, #0x32
	ldrb r3, [r7]
	adds r0, r3, r0
	ldrb r0, [r0]
	lsls r0, r0, #4
	mov r5, r8
	adds r5, #0x50
	movs r6, #0
	strh r0, [r5]
	mov r0, r8
	adds r0, #0x3b
	ldrb r4, [r7]
	adds r0, r4, r0
	ldrb r0, [r0]
	mov r4, r8
	adds r4, #0x2e
	strb r0, [r4]
	ldrb r0, [r7]
	bl sub_807D834
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_80823A0
	ldr r0, _0807F960 @ =0x02015638
	mov r1, r8
	ldr r2, [r1, #0x54]
	ldrh r1, [r5]
	lsrs r3, r1, #4
	str r6, [sp]
	movs r1, #1
	bl sub_807D9E4
	mov r0, r8
	adds r0, #0x2f
	ldrb r2, [r0]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r3, [r4]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_804169C
	ldr r1, _0807F964 @ =0x02015D28
	ldrh r5, [r5]
	lsrs r0, r5, #4
	ldrb r4, [r4]
	adds r0, r4, r0
	lsls r0, r0, #2
	adds r1, r0, r1
	movs r4, #0xff
	ldrb r0, [r1]
	cmp r4, r0
	bne _0807F940
	ldr r0, _0807F968 @ =0x0201636A
	ldrh r0, [r0]
	cmp r0, #0
	bne _0807F94C
_0807F940:
	ldr r0, _0807F96C @ =0x02015690
	ldrb r1, [r1]
	movs r2, #0x18
	movs r3, #0
	bl sub_807DCB8
_0807F94C:
	mov r0, r8
	bl sub_807D358
	mov r1, r8
	adds r1, #0x45
	ldrb r0, [r1]
	adds r0, #0xe
	strb r0, [r1]
	movs r0, #7
	b _0807FA6E
	.align 2, 0
_0807F960: .4byte 0x02015638
_0807F964: .4byte 0x02015D28
_0807F968: .4byte 0x0201636A
_0807F96C: .4byte 0x02015690
_0807F970:
	mov r1, r8
	adds r1, #0x45
	ldrb r0, [r1]
	adds r0, #0xe
	b _0807FA8C
_0807F97A:
	mov r1, r8
	adds r1, #0x45
	ldrb r0, [r1]
	subs r0, #0x38
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x90
	beq _0807F98E
	b _0807FA9A
_0807F98E:
	movs r0, #0xb
_0807F990:
	mov r3, sb
	strb r0, [r3]
	b _0807FA9A
_0807F996:
	mov r1, r8
	adds r1, #0x45
	movs r0, #0x70
	strb r0, [r1]
	mov r0, r8
	adds r0, #0x46
	ldrb r1, [r0]
	adds r7, r0, #0
	cmp r1, #0
	bne _0807F9AE
	movs r0, #8
	b _0807F9B0
_0807F9AE:
	subs r0, r1, #1
_0807F9B0:
	strb r0, [r7]
	movs r4, #0x2f
	add r4, r8
	mov sl, r4
	ldrb r2, [r4]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	mov r5, r8
	adds r5, #0x2e
	ldrb r3, [r5]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_8041728
	mov r0, r8
	adds r0, #0x32
	ldrb r4, [r7]
	adds r0, r4, r0
	ldrb r0, [r0]
	lsls r0, r0, #4
	mov r4, r8
	adds r4, #0x50
	movs r6, #0
	strh r0, [r4]
	mov r0, r8
	adds r0, #0x3b
	ldrb r1, [r7]
	adds r0, r1, r0
	ldrb r0, [r0]
	strb r0, [r5]
	ldrb r0, [r7]
	bl sub_807D834
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_80823A0
	ldr r0, _0807FA74 @ =0x02015638
	mov r3, r8
	ldr r2, [r3, #0x54]
	ldrh r1, [r4]
	lsrs r3, r1, #4
	str r6, [sp]
	movs r1, #1
	bl sub_807D9E4
	mov r3, sl
	ldrb r2, [r3]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r3, [r5]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_804169C
	ldr r1, _0807FA78 @ =0x02015D28
	ldrh r4, [r4]
	lsrs r0, r4, #4
	ldrb r5, [r5]
	adds r0, r5, r0
	lsls r0, r0, #2
	adds r1, r0, r1
	movs r4, #0xff
	ldrb r0, [r1]
	cmp r4, r0
	bne _0807FA50
	ldr r0, _0807FA7C @ =0x0201636A
	ldrh r0, [r0]
	cmp r0, #0
	bne _0807FA5C
_0807FA50:
	ldr r0, _0807FA80 @ =0x02015690
	ldrb r1, [r1]
	movs r2, #0x18
	movs r3, #0
	bl sub_807DCB8
_0807FA5C:
	mov r0, r8
	bl sub_807D358
	mov r1, r8
	adds r1, #0x45
	ldrb r0, [r1]
	subs r0, #0xe
	strb r0, [r1]
	movs r0, #0xc
_0807FA6E:
	mov r1, sb
	strb r0, [r1]
	b _0807FA9A
	.align 2, 0
_0807FA74: .4byte 0x02015638
_0807FA78: .4byte 0x02015D28
_0807FA7C: .4byte 0x0201636A
_0807FA80: .4byte 0x02015690
_0807FA84:
	mov r1, r8
	adds r1, #0x45
	ldrb r0, [r1]
	subs r0, #0xe
_0807FA8C:
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0
	bne _0807FA9A
_0807FA96:
	mov r2, sb
	strb r0, [r2]
_0807FA9A:
	mov r0, r8
	adds r0, #0x45
	ldrb r1, [r0]
	mov r5, r8
	adds r5, #0x50
	ldrh r2, [r5]
	subs r2, #0x28
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	mov r6, r8
	adds r6, #0x29
	ldrb r2, [r6]
	cmp r2, #0
	beq _0807FB52
	mov r0, r8
	adds r0, #0x46
	ldr r3, [sp, #4]
	ldrb r0, [r0]
	cmp r3, r0
	bne _0807FADA
	mov r1, r8
	adds r1, #0x2e
	ldrh r4, [r5]
	lsrs r0, r4, #4
	ldrb r1, [r1]
	adds r0, r1, r0
	ldr r1, [sp, #8]
	cmp r1, r0
	beq _0807FB52
_0807FADA:
	mov r1, r8
	adds r1, #0x2f
	ldrb r0, [r1]
	cmp r0, #0
	bne _0807FB0C
	adds r2, r0, #0
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	subs r1, #1
	ldrb r3, [r1]
	lsls r1, r3, #4
	lsls r2, r2, #5
	subs r2, #0x48
	subs r1, r1, r2
	mov r4, r8
	ldr r2, [r4, #0x54]
	lsls r3, r3, #1
	adds r2, #0x1c
	adds r2, r2, r3
	ldrh r2, [r2]
	bl sub_80706FC
	b _0807FB52
_0807FB0C:
	ldr r0, _0807FB20 @ =0x0201636A
	ldrh r0, [r0]
	cmp r0, #0
	bne _0807FB24
	cmp r2, #1
	beq _0807FB1C
	bl sub_807089C
_0807FB1C:
	movs r0, #1
	b _0807FB50
	.align 2, 0
_0807FB20: .4byte 0x0201636A
_0807FB24:
	ldrb r3, [r1]
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #4
	adds r0, #0x10
	mov r1, r8
	adds r1, #0x2e
	ldrb r2, [r1]
	lsls r1, r2, #4
	lsls r3, r3, #5
	subs r3, #0x48
	subs r1, r1, r3
	ldr r4, _0807FBC8 @ =0x02015D28
	ldrh r5, [r5]
	lsrs r3, r5, #4
	adds r2, r2, r3
	lsls r2, r2, #2
	adds r2, r2, r4
	ldrh r2, [r2, #2]
	bl sub_80706FC
	movs r0, #2
_0807FB50:
	strb r0, [r6]
_0807FB52:
	mov r7, r8
	adds r7, #0x52
	ldrh r0, [r7]
	adds r1, r0, #0
	cmp r1, #1
	bne _0807FBD0
	ldr r0, _0807FBCC @ =gDispIo
	mov ip, r0
	movs r0, #0x20
	mov r1, ip
	ldrb r1, [r1, #1]
	orrs r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r2, ip
	strb r0, [r2, #1]
	mov r1, ip
	adds r1, #0x2d
	movs r0, #0x80
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xe0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x98
	strb r0, [r1]
	mov r5, ip
	adds r5, #0x34
	movs r1, #1
	ldrb r0, [r5]
	orrs r0, r1
	movs r6, #2
	orrs r0, r6
	movs r2, #4
	orrs r0, r2
	movs r4, #8
	orrs r0, r4
	movs r3, #0x10
	orrs r0, r3
	strb r0, [r5]
	mov r2, ip
	adds r2, #0x36
	ldrb r0, [r2]
	orrs r1, r0
	orrs r1, r6
	movs r0, #5
	rsbs r0, r0, #0
	ands r1, r0
	orrs r1, r4
	orrs r1, r3
	strb r1, [r2]
	movs r0, #2
	b _0807FBD6
	.align 2, 0
_0807FBC8: .4byte 0x02015D28
_0807FBCC: .4byte gDispIo
_0807FBD0:
	cmp r1, #1
	bhi _0807FBD8
	adds r0, #1
_0807FBD6:
	strh r0, [r7]
_0807FBD8:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_807FBE8
sub_807FBE8: @ 0x0807FBE8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	adds r7, r0, #0
	ldr r0, _0807FCF0 @ =gDispIo
	mov ip, r0
	movs r0, #0x20
	mov r1, ip
	ldrb r1, [r1, #1]
	orrs r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r2, ip
	strb r0, [r2, #1]
	mov r1, ip
	adds r1, #0x2d
	movs r0, #0
	mov r8, r0
	movs r0, #0x80
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x28
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xe0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x98
	strb r0, [r1]
	mov r5, ip
	adds r5, #0x34
	movs r1, #1
	ldrb r0, [r5]
	orrs r0, r1
	movs r6, #2
	orrs r0, r6
	movs r2, #4
	orrs r0, r2
	movs r4, #8
	orrs r0, r4
	movs r3, #0x10
	orrs r0, r3
	strb r0, [r5]
	mov r2, ip
	adds r2, #0x36
	ldrb r0, [r2]
	orrs r1, r0
	orrs r1, r6
	movs r0, #5
	rsbs r0, r0, #0
	ands r1, r0
	orrs r1, r4
	orrs r1, r3
	strb r1, [r2]
	mov r1, r8
	str r1, [sp]
	movs r0, #0xf
	movs r1, #4
	movs r2, #0xf
	movs r3, #0x10
	bl sub_8041358
	ldr r0, _0807FCF4 @ =0x02015638
	ldr r2, [r7, #0x54]
	adds r4, r7, #0
	adds r4, #0x50
	ldrh r1, [r4]
	lsrs r3, r1, #4
	movs r5, #1
	str r5, [sp]
	movs r1, #1
	bl sub_807D9E4
	movs r0, #7
	bl EnableBgSync
	adds r0, r7, #0
	adds r0, #0x45
	ldrb r1, [r0]
	ldrh r2, [r4]
	subs r2, #0x28
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	ldr r0, [r7, #0x60]
	ldrh r1, [r4]
	str r1, [sp]
	ldr r1, _0807FCF8 @ =0x0201636A
	ldrh r1, [r1]
	str r1, [sp, #4]
	movs r1, #7
	str r1, [sp, #8]
	movs r1, #0xe0
	movs r2, #0x30
	movs r3, #0xc
	bl sub_8082320
	adds r0, r7, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	adds r1, r7, #0
	adds r1, #0x2e
	ldrb r1, [r1]
	lsls r1, r1, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_804169C
	movs r0, #1
	bl sub_807E06C
	adds r0, r7, #0
	adds r0, #0x2b
	strb r5, [r0]
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0807FCF0: .4byte gDispIo
_0807FCF4: .4byte 0x02015638
_0807FCF8: .4byte 0x0201636A

	thumb_func_start sub_807FCFC
sub_807FCFC: @ 0x0807FCFC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r6, r0, #0
	ldr r0, _0807FDB0 @ =0x02021B26
	movs r1, #0xf
	movs r2, #0x13
	movs r3, #0
	bl TmFillRect_t
	ldr r0, _0807FDB4 @ =0x02022326
	movs r1, #0xf
	movs r2, #0x13
	movs r3, #0
	bl TmFillRect_t
	ldr r0, _0807FDB8 @ =0x02022B26
	movs r1, #0xf
	movs r2, #0x1f
	movs r3, #0
	bl TmFillRect_t
	ldr r0, [r6, #0x60]
	movs r5, #0
	str r5, [sp]
	str r5, [sp, #4]
	str r5, [sp, #8]
	movs r1, #0
	movs r2, #0
	movs r3, #0xd
	bl sub_8082320
	adds r4, r6, #0
	adds r4, #0x30
	ldrb r0, [r4]
	cmp r0, #0xff
	bne _0807FDD2
	bl GetSupplyItems
	adds r3, r0, #0
	strb r5, [r4]
	adds r0, r6, #0
	adds r0, #0x31
	strb r5, [r0]
	ldr r1, _0807FDBC @ =0x02016368
	strh r5, [r1]
	movs r2, #0
	ldrh r0, [r3]
	adds r5, r6, #0
	adds r5, #0x46
	cmp r0, #0
	beq _0807FD9C
	ldr r0, _0807FDC0 @ =0x02015D28
	mov ip, r0
	movs r7, #0
	adds r4, r1, #0
_0807FD72:
	lsls r1, r2, #2
	add r1, ip
	lsls r0, r2, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	strh r0, [r1, #2]
	strb r7, [r1]
	strb r2, [r1, #1]
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	adds r0, r2, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0x63
	bhi _0807FD9C
	lsls r0, r2, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	cmp r0, #0
	bne _0807FD72
_0807FD9C:
	adds r0, r6, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #3
	bhi _0807FDC4
	ldr r0, [r6, #0x14]
	adds r0, #0x3a
	ldrb r0, [r0]
	b _0807FDC6
	.align 2, 0
_0807FDB0: .4byte 0x02021B26
_0807FDB4: .4byte 0x02022326
_0807FDB8: .4byte 0x02022B26
_0807FDBC: .4byte 0x02016368
_0807FDC0: .4byte 0x02015D28
_0807FDC4:
	movs r0, #0
_0807FDC6:
	strb r0, [r5]
	adds r0, r6, #0
	adds r0, #0x46
	ldrb r0, [r0]
	bl sub_807D834
_0807FDD2:
	adds r2, r6, #0
	adds r2, #0x46
	adds r0, r6, #0
	adds r0, #0x32
	ldrb r1, [r2]
	adds r0, r1, r0
	ldrb r0, [r0]
	lsls r0, r0, #4
	adds r5, r6, #0
	adds r5, #0x50
	strh r0, [r5]
	adds r1, r6, #0
	adds r1, #0x2f
	movs r0, #1
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x3b
	ldrb r2, [r2]
	adds r0, r2, r0
	ldrb r0, [r0]
	adds r4, r6, #0
	adds r4, #0x2e
	strb r0, [r4]
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_80823A0
	adds r0, r6, #0
	adds r0, #0x4b
	ldrb r1, [r0]
	mov sb, r5
	mov sl, r4
	mov r8, r0
	cmp r1, #0
	bne _0807FEA8
	ldr r0, [r6, #0x54]
	bl GetUnitItemCount
	movs r2, #0
	cmp r0, #0
	bne _0807FE26
	movs r2, #1
_0807FE26:
	ldr r4, _0807FE6C @ =0x02015638
	ldr r5, _0807FE70 @ =0x02022C32
	ldr r0, _0807FE74 @ =0x083272AC
	str r0, [sp]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #0
	bl sub_8082360
	adds r3, r4, #0
	adds r3, #8
	adds r1, r5, #0
	adds r1, #0x80
	movs r2, #0
	ldr r7, _0807FE78 @ =0x02016368
	ldrh r0, [r7]
	cmp r0, #0
	bne _0807FE4C
	movs r2, #1
_0807FE4C:
	ldr r0, _0807FE7C @ =0x083272B8
	str r0, [sp]
	adds r0, r3, #0
	movs r3, #0
	bl sub_8082360
	adds r0, r6, #0
	adds r0, #0x4c
	ldrb r0, [r0]
	cmp r0, #0
	beq _0807FE80
	adds r1, r6, #0
	adds r1, #0x49
	movs r0, #2
	b _0807FEA6
	.align 2, 0
_0807FE6C: .4byte 0x02015638
_0807FE70: .4byte 0x02022C32
_0807FE74: .4byte 0x083272AC
_0807FE78: .4byte 0x02016368
_0807FE7C: .4byte 0x083272B8
_0807FE80:
	adds r3, r4, #0
	adds r3, #0x10
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r5, r2
	movs r2, #0
	ldrh r0, [r7]
	cmp r0, #0
	bne _0807FE94
	movs r2, #1
_0807FE94:
	ldr r0, _0807FF44 @ =0x083272C4
	str r0, [sp]
	adds r0, r3, #0
	movs r3, #0
	bl sub_8082360
	adds r1, r6, #0
	adds r1, #0x49
	movs r0, #3
_0807FEA6:
	strb r0, [r1]
_0807FEA8:
	movs r0, #2
	movs r1, #0
	movs r2, #0xd8
	bl SetBgOffset
	adds r0, r6, #0
	adds r0, #0x2c
	movs r5, #0
	strb r5, [r0]
	subs r0, #1
	strb r5, [r0]
	movs r0, #7
	bl EnableBgSync
	adds r4, r6, #0
	adds r4, #0x2d
	ldrb r0, [r4]
	cmp r0, #0
	bne _0807FEE0
	movs r1, #1
	rsbs r1, r1, #0
	adds r0, r6, #0
	bl sub_80829E8
	adds r0, r6, #0
	bl sub_807D2E0
	str r0, [r6, #0x5c]
_0807FEE0:
	movs r0, #0x18
	movs r1, #0
	bl sub_807DDC8
	ldrb r0, [r4]
	cmp r0, #4
	bne _0807FF50
	adds r0, r6, #0
	bl sub_807D2E0
	str r0, [r6, #0x5c]
	movs r0, #5
	strb r0, [r4]
	mov r3, r8
	ldrb r0, [r3]
	cmp r0, #0
	beq _0807FF5C
	adds r1, r6, #0
	adds r1, #0x31
	movs r0, #2
	strb r0, [r1]
	adds r0, r6, #0
	bl sub_807FBE8
	adds r0, r6, #0
	movs r1, #7
	bl Proc_Goto
	ldr r1, _0807FF48 @ =0x02015D28
	mov r2, sb
	ldrh r2, [r2]
	lsrs r0, r2, #4
	mov r3, sl
	ldrb r3, [r3]
	adds r0, r3, r0
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r2, [r0, #2]
	ldr r3, [r6, #0x5c]
	movs r0, #1
	movs r1, #0xb
	bl sub_807D4A8
	ldr r2, _0807FF4C @ =0x00000C47
	movs r0, #0x10
	movs r1, #0x10
	adds r3, r6, #0
	bl sub_8071B80
	b _0807FF86
	.align 2, 0
_0807FF44: .4byte 0x083272C4
_0807FF48: .4byte 0x02015D28
_0807FF4C: .4byte 0x00000C47
_0807FF50:
	cmp r0, #3
	bhi _0807FF5C
	movs r0, #2
	strb r0, [r4]
	mov r0, r8
	strb r5, [r0]
_0807FF5C:
	adds r0, r6, #0
	adds r0, #0x49
	ldrb r0, [r0]
	lsls r3, r0, #1
	adds r3, #2
	movs r0, #0
	str r0, [sp]
	movs r0, #0x12
	movs r1, #8
	movs r2, #0xa
	bl sub_8041358
	adds r0, r6, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r1, r0, #1
	adds r1, #9
	movs r0, #0x13
	movs r2, #7
	bl sub_804169C
_0807FF86:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_807FF98
sub_807FF98: @ 0x0807FF98
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r0, #0x31
	ldrb r0, [r0]
	mov r8, r0
	adds r4, r5, #0
	adds r4, #0x29
	ldrb r0, [r4]
	ldr r7, _0807FFCC @ =gKeySt
	cmp r0, #0
	beq _0807FFD0
	ldr r1, [r7]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0807FFD0
	bl sub_807089C
	movs r0, #0
	strb r0, [r4]
	b _08080274
	.align 2, 0
_0807FFCC: .4byte gKeySt
_0807FFD0:
	ldr r2, [r7]
	ldrh r1, [r2, #6]
	movs r6, #0x80
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _0808004C
	adds r4, r5, #0
	adds r4, #0x31
	ldrb r0, [r4]
	lsls r1, r0, #1
	adds r1, #9
	movs r0, #0x13
	movs r2, #7
	bl sub_8041728
	ldrb r1, [r4]
	adds r0, r5, #0
	adds r0, #0x49
	ldrb r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge _08080018
	adds r0, r1, #1
	strb r0, [r4]
	ldr r0, _08080014 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08080038
	movs r0, #0x66
	bl m4aSongNumStart
	b _08080038
	.align 2, 0
_08080014: .4byte gPlaySt
_08080018:
	ldr r1, [r7]
	adds r0, r6, #0
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08080038
	movs r0, #0
	strb r0, [r4]
	ldr r0, _08080048 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08080038
	movs r0, #0x66
	bl m4aSongNumStart
_08080038:
	ldrb r4, [r4]
	lsls r1, r4, #1
	adds r1, #9
	movs r0, #0x13
	movs r2, #7
	bl sub_804169C
	b _080800F8
	.align 2, 0
_08080048: .4byte gPlaySt
_0808004C:
	movs r6, #0x40
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _080800C4
	adds r4, r5, #0
	adds r4, #0x31
	ldrb r0, [r4]
	lsls r1, r0, #1
	adds r1, #9
	movs r0, #0x13
	movs r2, #7
	bl sub_8041728
	ldrb r0, [r4]
	cmp r0, #0
	beq _08080088
	subs r0, #1
	strb r0, [r4]
	ldr r0, _08080084 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080800AE
	movs r0, #0x66
	bl m4aSongNumStart
	b _080800AE
	.align 2, 0
_08080084: .4byte gPlaySt
_08080088:
	ldr r1, [r7]
	adds r0, r6, #0
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080800AE
	ldr r0, _080800C0 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080800A4
	movs r0, #0x66
	bl m4aSongNumStart
_080800A4:
	adds r0, r5, #0
	adds r0, #0x49
	ldrb r0, [r0]
	subs r0, #1
	strb r0, [r4]
_080800AE:
	ldrb r4, [r4]
	lsls r1, r4, #1
	adds r1, #9
	movs r0, #0x13
	movs r2, #7
	bl sub_804169C
	b _080800F8
	.align 2, 0
_080800C0: .4byte gPlaySt
_080800C4:
	ldrh r1, [r2, #8]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _08080104
	ldr r0, _08080100 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080800DE
	movs r0, #0x6b
	bl m4aSongNumStart
_080800DE:
	adds r0, r5, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #3
	bhi _080800F0
	adds r0, r5, #0
	movs r1, #1
	bl sub_80829E8
_080800F0:
	adds r0, r5, #0
	movs r1, #6
	bl Proc_Goto
_080800F8:
	adds r6, r5, #0
	adds r6, #0x29
	b _08080250
	.align 2, 0
_08080100: .4byte gPlaySt
_08080104:
	movs r0, #1
	ands r0, r1
	adds r6, r5, #0
	adds r6, #0x29
	cmp r0, #0
	bne _08080112
	b _08080220
_08080112:
	ldrb r0, [r6]
	cmp r0, #0
	beq _0808011A
	b _08080220
_0808011A:
	adds r0, r5, #0
	adds r0, #0x31
	ldrb r4, [r0]
	cmp r4, #0
	bne _08080150
	ldr r0, [r5, #0x54]
	bl GetUnitItemCount
	cmp r0, #0
	beq _08080184
	ldr r0, _0808014C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808013E
	movs r0, #0x6a
	bl m4aSongNumStart
_0808013E:
	adds r0, r5, #0
	adds r0, #0x2e
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	b _080801FC
	.align 2, 0
_0808014C: .4byte gPlaySt
_08080150:
	cmp r4, #1
	bne _08080178
	ldr r0, _08080170 @ =0x02016368
	ldrh r0, [r0]
	cmp r0, #0
	beq _08080184
	ldr r0, _08080174 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080801FC
	movs r0, #0x6a
	bl m4aSongNumStart
	b _080801FC
	.align 2, 0
_08080170: .4byte 0x02016368
_08080174: .4byte gPlaySt
_08080178:
	cmp r4, #2
	bne _080801FC
	ldr r0, _08080198 @ =0x02016368
	ldrh r0, [r0]
	cmp r0, #0
	bne _080801A0
_08080184:
	ldr r0, _0808019C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08080274
	movs r0, #0x6c
	bl m4aSongNumStart
	b _08080274
	.align 2, 0
_08080198: .4byte 0x02016368
_0808019C: .4byte gPlaySt
_080801A0:
	ldr r0, _0808020C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080801B0
	movs r0, #0x6a
	bl m4aSongNumStart
_080801B0:
	movs r0, #0
	bl EndFaceById
	ldr r0, _08080210 @ =gBg0Tm
	movs r1, #0xf
	movs r2, #0x13
	movs r3, #0
	bl TmFillRect_t
	ldr r0, _08080214 @ =gBg1Tm
	movs r1, #0xf
	movs r2, #0x13
	movs r3, #0
	bl TmFillRect_t
	ldr r0, _08080218 @ =gBg2Tm
	movs r1, #0xf
	movs r2, #0x1f
	movs r3, #0
	bl TmFillRect_t
	ldr r1, _0808021C @ =0x02015D28
	adds r0, r5, #0
	adds r0, #0x50
	ldrh r0, [r0]
	lsrs r0, r0, #4
	adds r2, r5, #0
	adds r2, #0x2e
	ldrb r2, [r2]
	adds r0, r2, r0
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r2, [r0, #2]
	ldr r3, [r5, #0x5c]
	movs r0, #1
	movs r1, #0xb
	bl sub_807D4A8
_080801FC:
	adds r0, r5, #0
	bl sub_807FBE8
	adds r0, r5, #0
	bl Proc_Break
	b _08080250
	.align 2, 0
_0808020C: .4byte gPlaySt
_08080210: .4byte gBg0Tm
_08080214: .4byte gBg1Tm
_08080218: .4byte gBg2Tm
_0808021C: .4byte 0x02015D28
_08080220:
	ldr r1, [r7]
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08080250
	ldrb r0, [r6]
	cmp r0, #0
	bne _08080250
	movs r0, #2
	strb r0, [r6]
	adds r0, r5, #0
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r1, r0, #4
	adds r1, #0x48
	ldr r2, _08080280 @ =0x0867929C
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r2, [r0]
	movs r0, #0xa0
	bl sub_80706C8
_08080250:
	ldrb r6, [r6]
	cmp r6, #2
	bne _08080274
	adds r0, r5, #0
	adds r0, #0x31
	ldrb r1, [r0]
	cmp r1, r8
	beq _08080274
	ldrb r0, [r0]
	lsls r1, r0, #4
	adds r1, #0x48
	ldr r2, _08080280 @ =0x0867929C
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r2, [r0]
	movs r0, #0xa0
	bl sub_80706C8
_08080274:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08080280: .4byte 0x0867929C

	thumb_func_start sub_8080284
sub_8080284: @ 0x08080284
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	adds r6, r0, #0
	adds r1, r6, #0
	adds r1, #0x2e
	adds r0, #0x50
	ldrh r0, [r0]
	lsrs r0, r0, #4
	ldrb r1, [r1]
	adds r0, r1, r0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #4]
	adds r0, r6, #0
	adds r0, #0x46
	ldrb r0, [r0]
	str r0, [sp, #8]
	adds r4, r6, #0
	adds r4, #0x29
	ldrb r2, [r4]
	cmp r2, #0
	beq _080802E0
	ldr r0, _080802D8 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080802E0
	cmp r2, #1
	beq _080802DC
	bl sub_807089C
	movs r0, #0
	strb r0, [r4]
	bl _080813D2
	.align 2, 0
_080802D8: .4byte gKeySt
_080802DC:
	movs r0, #0
	strb r0, [r4]
_080802E0:
	adds r4, r6, #0
	adds r4, #0x2c
	ldrb r0, [r4]
	str r4, [sp, #0xc]
	cmp r0, #7
	bne _080802F0
	bl _080811E4
_080802F0:
	cmp r0, #7
	bgt _0808034C
	cmp r0, #2
	bne _080802FC
	bl _080810D0
_080802FC:
	cmp r0, #2
	bgt _08080322
	cmp r0, #0
	bne _08080306
	b _080806B0
_08080306:
	cmp r0, #1
	bne _0808030E
	bl _08081078
_0808030E:
	adds r7, r6, #0
	adds r7, #0x2e
	movs r0, #0x50
	adds r0, r0, r6
	mov r8, r0
	movs r1, #0x45
	adds r1, r1, r6
	mov sb, r1
	bl _080812C6
_08080322:
	cmp r0, #5
	bne _0808032A
	bl _08081128
_0808032A:
	cmp r0, #6
	bne _08080332
	bl _08081152
_08080332:
	adds r7, r6, #0
	adds r7, #0x2e
	movs r3, #0x50
	adds r3, r3, r6
	mov r8, r3
	movs r4, #0x45
	adds r4, r4, r6
	mov sb, r4
	movs r5, #0x52
	adds r5, r5, r6
	mov sl, r5
	bl _080812FA
_0808034C:
	cmp r0, #0xc
	bne _08080354
	bl _080812D4
_08080354:
	cmp r0, #0xc
	bgt _0808037C
	cmp r0, #0xa
	bne _08080360
	bl _080811EE
_08080360:
	cmp r0, #0xb
	bne _08080368
	bl _08081216
_08080368:
	adds r7, r6, #0
	adds r7, #0x2e
	movs r0, #0x50
	adds r0, r0, r6
	mov r8, r0
	movs r1, #0x45
	adds r1, r1, r6
	mov sb, r1
	bl _080812C6
_0808037C:
	cmp r0, #0x14
	bne _08080382
	b _080804B8
_08080382:
	adds r7, r6, #0
	adds r7, #0x2e
	movs r3, #0x50
	adds r3, r3, r6
	mov r8, r3
	movs r4, #0x45
	adds r4, r4, r6
	mov sb, r4
	movs r5, #0x52
	adds r5, r5, r6
	mov sl, r5
	cmp r0, #0xff
	beq _080803A0
	bl _080812FA
_080803A0:
	adds r0, r6, #0
	adds r0, #0x31
	ldrb r1, [r0]
	str r0, [sp, #0x10]
	cmp r1, #0
	bne _080803CA
	subs r0, #2
	ldrb r2, [r0]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r3, [r7]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_8041728
	b _080803EA
_080803CA:
	adds r2, r6, #0
	adds r2, #0x46
	adds r0, r6, #0
	adds r0, #0x3b
	ldrb r4, [r2]
	adds r0, r4, r0
	ldrb r1, [r7]
	strb r1, [r0]
	adds r0, r6, #0
	adds r0, #0x32
	ldrb r2, [r2]
	adds r0, r2, r0
	mov r5, r8
	ldrh r5, [r5]
	lsrs r1, r5, #4
	strb r1, [r0]
_080803EA:
	ldr r0, [sp, #0x10]
	ldrb r0, [r0]
	cmp r0, #2
	bne _0808047E
	ldr r0, [r6, #0x54]
	bl GetUnitFid
	adds r1, r0, #0
	movs r3, #4
	rsbs r3, r3, #0
	movs r0, #3
	str r0, [sp]
	movs r0, #0
	movs r2, #0x40
	bl StartFace
	ldr r5, _080804A8 @ =gBg0Tm
	adds r0, r5, #0
	movs r1, #0xf
	movs r2, #0x13
	movs r3, #0
	bl TmFillRect_t
	ldr r0, _080804AC @ =gBg1Tm
	movs r1, #0xf
	movs r2, #0x13
	movs r3, #0
	bl TmFillRect_t
	ldr r0, _080804B0 @ =gBg2Tm
	movs r1, #0xf
	movs r2, #0x1f
	movs r3, #0
	bl TmFillRect_t
	movs r0, #0
	str r0, [sp]
	movs r0, #1
	movs r1, #8
	movs r2, #0xe
	movs r3, #0xc
	bl sub_8041358
	bl sub_807D338
	ldr r0, [r6, #0x54]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl DecodeMsg
	bl GetStringTextLen
	movs r4, #0x30
	subs r4, r4, r0
	lsrs r0, r4, #0x1f
	adds r4, r4, r0
	asrs r4, r4, #1
	ldr r0, [r6, #0x54]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl DecodeMsg
	ldr r1, _080804B4 @ =0x02015688
	str r0, [sp]
	adds r0, r1, #0
	adds r1, r5, #0
	movs r2, #0
	adds r3, r4, #0
	bl sub_8082360
	ldr r1, [r6, #0x54]
	movs r0, #0
	bl sub_807D6C0
_0808047E:
	adds r0, r6, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #3
	bhi _08080494
	ldr r0, [r6, #0x14]
	adds r1, r6, #0
	adds r1, #0x46
	ldrb r1, [r1]
	adds r0, #0x3a
	strb r1, [r0]
_08080494:
	adds r0, r6, #0
	movs r1, #4
	bl Proc_Goto
	movs r1, #0x45
	adds r1, r1, r6
	mov sb, r1
	bl _080812C6
	.align 2, 0
_080804A8: .4byte gBg0Tm
_080804AC: .4byte gBg1Tm
_080804B0: .4byte gBg2Tm
_080804B4: .4byte 0x02015688
_080804B8:
	ldr r0, _080805D4 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x20
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _080804E4
	adds r1, r6, #0
	adds r1, #0x30
	ldrb r0, [r1]
	cmp r0, #0
	beq _080804E4
	movs r0, #0
	strb r0, [r1]
	ldr r0, _080805D8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080804E4
	movs r0, #0x66
	bl m4aSongNumStart
_080804E4:
	ldr r0, _080805D4 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x10
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _08080510
	adds r1, r6, #0
	adds r1, #0x30
	ldrb r3, [r1]
	cmp r3, #1
	beq _08080510
	movs r0, #1
	strb r0, [r1]
	ldr r0, _080805D8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08080510
	movs r0, #0x66
	bl m4aSongNumStart
_08080510:
	ldr r0, _080805D4 @ =gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r4, #1
	ands r4, r1
	cmp r4, #0
	beq _080805F0
	ldr r0, _080805D8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808052E
	movs r0, #0x6a
	bl m4aSongNumStart
_0808052E:
	adds r0, r6, #0
	adds r0, #0x30
	ldrb r0, [r0]
	adds r7, r6, #0
	adds r7, #0x2e
	movs r4, #0x50
	adds r4, r4, r6
	mov r8, r4
	movs r5, #0x45
	adds r5, r5, r6
	mov sb, r5
	movs r1, #0x52
	adds r1, r1, r6
	mov sl, r1
	cmp r0, #0
	bne _080805CC
	ldrh r2, [r4]
	lsrs r0, r2, #4
	ldrb r3, [r7]
	adds r0, r3, r0
	lsls r1, r0, #0x10
	ldr r4, _080805DC @ =0x02016368
	adds r5, r4, #0
	ldr r2, _080805E0 @ =0x0201636A
	mov ip, r2
	adds r3, r6, #0
	adds r3, #0x4b
	str r3, [sp, #0x14]
	ldrh r2, [r4]
	cmp r0, r2
	bge _08080588
	ldr r3, _080805E4 @ =0x02015D28
_0808056E:
	asrs r1, r1, #0x10
	lsls r2, r1, #2
	adds r2, r2, r3
	adds r1, #1
	lsls r0, r1, #2
	adds r0, r0, r3
	ldrh r0, [r0, #2]
	strh r0, [r2, #2]
	lsls r1, r1, #0x10
	asrs r0, r1, #0x10
	ldrh r2, [r4]
	cmp r0, r2
	blt _0808056E
_08080588:
	ldrh r0, [r5]
	subs r0, #1
	strh r0, [r5]
	mov r3, ip
	ldrh r0, [r3]
	subs r0, #1
	strh r0, [r3]
	adds r0, r7, #0
	mov r1, r8
	bl sub_80823A0
	ldr r0, _080805E8 @ =0x02015638
	ldr r2, [r6, #0x54]
	mov r4, r8
	ldrh r4, [r4]
	lsrs r3, r4, #4
	movs r1, #0
	str r1, [sp]
	movs r1, #1
	bl sub_807D9E4
	bl sub_807DE60
	ldr r1, _080805EC @ =gAction
	movs r0, #0x19
	strb r0, [r1, #0x11]
	ldr r5, [sp, #0x14]
	ldrb r0, [r5]
	cmp r0, #0
	beq _080805CC
	adds r0, r6, #0
	movs r1, #6
	bl Proc_Goto
_080805CC:
	movs r0, #0
	ldr r1, [sp, #0xc]
	strb r0, [r1]
	b _08080622
	.align 2, 0
_080805D4: .4byte gKeySt
_080805D8: .4byte gPlaySt
_080805DC: .4byte 0x02016368
_080805E0: .4byte 0x0201636A
_080805E4: .4byte 0x02015D28
_080805E8: .4byte 0x02015638
_080805EC: .4byte gAction
_080805F0:
	movs r0, #2
	ands r0, r1
	adds r7, r6, #0
	adds r7, #0x2e
	movs r2, #0x50
	adds r2, r2, r6
	mov r8, r2
	movs r3, #0x45
	adds r3, r3, r6
	mov sb, r3
	movs r5, #0x52
	adds r5, r5, r6
	mov sl, r5
	cmp r0, #0
	beq _08080622
	ldr r0, _0808069C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808061E
	movs r0, #0x6b
	bl m4aSongNumStart
_0808061E:
	ldr r0, [sp, #0xc]
	strb r4, [r0]
_08080622:
	ldr r1, [sp, #0xc]
	ldrb r0, [r1]
	cmp r0, #0
	beq _0808062E
	bl _080812FA
_0808062E:
	adds r0, r6, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r3, [r7]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_804169C
	ldr r0, _080806A0 @ =gBg0Tm
	movs r1, #0xe
	movs r2, #0x13
	movs r3, #0
	bl TmFillRect_t
	ldr r0, _080806A4 @ =gBg1Tm
	movs r1, #0xe
	movs r2, #0x13
	movs r3, #0
	bl TmFillRect_t
	ldr r1, _080806A8 @ =0x02015D28
	mov r4, r8
	ldrh r4, [r4]
	lsrs r0, r4, #4
	ldrb r5, [r7]
	adds r0, r5, r0
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r2, [r0, #2]
	ldr r3, [r6, #0x5c]
	movs r0, #1
	movs r1, #0xb
	bl sub_807D4A8
	movs r0, #3
	bl EnableBgSync
	ldr r0, _080806AC @ =0x02016368
	ldrh r0, [r0]
	cmp r0, #0
	beq _08080692
	bl _080812FA
_08080692:
	movs r0, #0xff
	ldr r1, [sp, #0xc]
	strb r0, [r1]
	bl _080812FA
	.align 2, 0
_0808069C: .4byte gPlaySt
_080806A0: .4byte gBg0Tm
_080806A4: .4byte gBg1Tm
_080806A8: .4byte 0x02015D28
_080806AC: .4byte 0x02016368
_080806B0:
	ldr r1, _080806F8 @ =gKeySt
	ldr r0, [r1]
	ldrh r2, [r0, #8]
	movs r0, #2
	ands r0, r2
	adds r3, r1, #0
	cmp r0, #0
	beq _08080720
	adds r0, r6, #0
	adds r0, #0x4b
	ldrb r0, [r0]
	cmp r0, #0
	beq _08080700
	ldr r0, _080806FC @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	adds r7, r6, #0
	adds r7, #0x2e
	movs r2, #0x50
	adds r2, r2, r6
	mov r8, r2
	movs r3, #0x45
	adds r3, r3, r6
	mov sb, r3
	movs r4, #0x52
	adds r4, r4, r6
	mov sl, r4
	cmp r0, #0
	bge _080806EE
	bl _080812FA
_080806EE:
	movs r0, #0x6c
	bl m4aSongNumStart
	bl _080812FA
	.align 2, 0
_080806F8: .4byte gKeySt
_080806FC: .4byte gPlaySt
_08080700:
	ldr r0, _0808071C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08080710
	movs r0, #0x6b
	bl m4aSongNumStart
_08080710:
	movs r0, #0xff
	strb r0, [r4]
	adds r7, r6, #0
	adds r7, #0x2e
	b _08080BBA
	.align 2, 0
_0808071C: .4byte gPlaySt
_08080720:
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	bne _0808072A
	b _08080B68
_0808072A:
	adds r0, r6, #0
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0
	beq _08080736
	b _08080B68
_08080736:
	adds r4, r6, #0
	adds r4, #0x2f
	ldrb r2, [r4]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	adds r5, r6, #0
	adds r5, #0x2e
	ldrb r3, [r5]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_8041728
	adds r0, r6, #0
	adds r0, #0x31
	ldrb r1, [r0]
	adds r7, r5, #0
	str r0, [sp, #0x10]
	adds r5, r4, #0
	cmp r1, #0
	beq _0808076A
	b _08080918
_0808076A:
	bl sub_8082A08
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x64
	bne _080807A0
	ldr r0, _0808079C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	movs r4, #0x50
	adds r4, r4, r6
	mov r8, r4
	movs r1, #0x45
	adds r1, r1, r6
	mov sb, r1
	movs r2, #0x52
	adds r2, r2, r6
	mov sl, r2
	cmp r0, #0
	bge _08080794
	b _08080A3E
_08080794:
	movs r0, #0x6c
	bl m4aSongNumStart
	b _08080A3E
	.align 2, 0
_0808079C: .4byte gPlaySt
_080807A0:
	adds r0, r6, #0
	adds r0, #0x4c
	ldrb r0, [r0]
	cmp r0, #0
	beq _080807E0
	ldr r0, [r6, #0x54]
	ldrb r1, [r7]
	bl sub_8082C80
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080807E0
	ldrb r3, [r7]
	lsls r1, r3, #4
	adds r1, #0x48
	ldr r2, _080807DC @ =0x000006C2
	movs r0, #0x10
	adds r3, r6, #0
	bl sub_8082B00
	movs r4, #0x50
	adds r4, r4, r6
	mov r8, r4
	movs r0, #0x45
	adds r0, r0, r6
	mov sb, r0
	movs r1, #0x52
	adds r1, r1, r6
	mov sl, r1
	b _08080A3E
	.align 2, 0
_080807DC: .4byte 0x000006C2
_080807E0:
	ldr r0, _080808C8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080807F0
	movs r0, #0x6a
	bl m4aSongNumStart
_080807F0:
	ldr r0, [r6, #0x54]
	ldrb r2, [r7]
	lsls r1, r2, #1
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r6, #0
	bl sub_807DEC8
	ldr r0, _080808CC @ =0x02016368
	ldrh r0, [r0]
	lsls r2, r0, #0x10
	asrs r1, r2, #0x10
	adds r3, r6, #0
	adds r3, #0x50
	ldrh r4, [r3]
	lsrs r0, r4, #4
	mov r8, r3
	cmp r1, r0
	blt _08080842
	ldr r0, _080808D0 @ =0x02015D28
	mov sl, r0
	movs r1, #0
	mov sb, r1
_08080820:
	asrs r2, r2, #0x10
	adds r1, r2, #1
	lsls r1, r1, #2
	add r1, sl
	lsls r0, r2, #2
	add r0, sl
	ldrh r0, [r0, #2]
	strh r0, [r1, #2]
	mov r4, sb
	strb r4, [r1]
	subs r2, #1
	lsls r2, r2, #0x10
	asrs r1, r2, #0x10
	ldrh r4, [r3]
	lsrs r0, r4, #4
	cmp r1, r0
	bge _08080820
_08080842:
	ldr r3, _080808D0 @ =0x02015D28
	mov r0, r8
	ldrh r0, [r0]
	lsrs r1, r0, #4
	lsls r1, r1, #2
	adds r1, r1, r3
	ldr r0, [r6, #0x54]
	ldrb r4, [r7]
	lsls r2, r4, #1
	adds r0, #0x1c
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r2, #0
	strh r0, [r1, #2]
	mov r1, r8
	ldrh r1, [r1]
	lsrs r0, r1, #4
	lsls r0, r0, #2
	adds r0, r0, r3
	strb r2, [r0]
	ldr r1, _080808CC @ =0x02016368
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	ldr r1, _080808D4 @ =0x0201636A
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	ldr r0, [r6, #0x54]
	ldrb r1, [r7]
	bl UnitRemoveItem
	ldr r1, [r6, #0x54]
	movs r0, #0
	bl sub_807D6C0
	bl sub_807DE60
	ldr r1, _080808D8 @ =gAction
	movs r0, #0x19
	strb r0, [r1, #0x11]
	ldr r0, [r6, #0x54]
	bl GetUnitItemCount
	cmp r0, #0
	bne _080808DC
	adds r0, r6, #0
	bl sub_807D358
	adds r0, r6, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #3
	bhi _080808BA
	ldr r0, [r6, #0x14]
	adds r1, r6, #0
	adds r1, #0x46
	ldrb r1, [r1]
	adds r0, #0x3a
	strb r1, [r0]
_080808BA:
	adds r0, r6, #0
	movs r1, #4
	bl Proc_Goto
	bl _080813D2
	.align 2, 0
_080808C8: .4byte gPlaySt
_080808CC: .4byte 0x02016368
_080808D0: .4byte 0x02015D28
_080808D4: .4byte 0x0201636A
_080808D8: .4byte gAction
_080808DC:
	ldr r0, _08080914 @ =0x02015638
	ldr r2, [r6, #0x54]
	mov r4, r8
	ldrh r4, [r4]
	lsrs r3, r4, #4
	movs r1, #0
	str r1, [sp]
	movs r1, #1
	bl sub_807D9E4
	ldr r0, [r6, #0x54]
	bl GetUnitItemCount
	ldrb r2, [r7]
	adds r1, r2, #1
	movs r3, #0x45
	adds r3, r3, r6
	mov sb, r3
	movs r4, #0x52
	adds r4, r4, r6
	mov sl, r4
	cmp r0, r1
	blt _0808090C
	b _08080A3E
_0808090C:
	subs r0, r2, #1
	strb r0, [r7]
	b _08080A3E
	.align 2, 0
_08080914: .4byte 0x02015638
_08080918:
	movs r0, #0x50
	adds r0, r0, r6
	mov r8, r0
	movs r2, #0x45
	adds r2, r2, r6
	mov sb, r2
	movs r3, #0x52
	adds r3, r3, r6
	mov sl, r3
	cmp r1, #1
	beq _08080930
	b _08080A3E
_08080930:
	ldr r0, _08080A04 @ =0x0201636A
	ldrh r0, [r0]
	cmp r0, #0
	beq _08080A1C
	ldr r0, [r6, #0x54]
	bl GetUnitItemCount
	cmp r0, #4
	bgt _08080A1C
	ldr r0, _08080A08 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08080952
	movs r0, #0x6a
	bl m4aSongNumStart
_08080952:
	ldr r0, [r6, #0x54]
	bl GetUnitItemCount
	ldr r1, [r6, #0x54]
	lsls r0, r0, #1
	adds r1, #0x1c
	adds r1, r1, r0
	mov r4, r8
	ldrh r4, [r4]
	lsrs r0, r4, #4
	ldrb r2, [r7]
	adds r0, r2, r0
	lsls r0, r0, #2
	ldr r3, _08080A0C @ =0x02015D28
	adds r0, r0, r3
	ldrh r0, [r0, #2]
	strh r0, [r1]
	ldr r0, [r6, #0x54]
	bl UnitRemoveInvalidItems
	mov r4, r8
	ldrh r4, [r4]
	lsrs r0, r4, #4
	ldrb r1, [r7]
	adds r0, r1, r0
	lsls r1, r0, #0x10
	ldr r4, _08080A10 @ =0x02016368
	ldrh r2, [r4]
	cmp r0, r2
	bge _080809AA
	ldr r3, _08080A0C @ =0x02015D28
_08080990:
	asrs r1, r1, #0x10
	lsls r2, r1, #2
	adds r2, r2, r3
	adds r1, #1
	lsls r0, r1, #2
	adds r0, r0, r3
	ldrh r0, [r0, #2]
	strh r0, [r2, #2]
	lsls r1, r1, #0x10
	asrs r0, r1, #0x10
	ldrh r2, [r4]
	cmp r0, r2
	blt _08080990
_080809AA:
	ldr r4, _08080A10 @ =0x02016368
	ldrh r0, [r4]
	subs r0, #1
	strh r0, [r4]
	ldr r1, _08080A04 @ =0x0201636A
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	adds r0, r7, #0
	mov r1, r8
	bl sub_80823A0
	ldr r0, _08080A14 @ =0x02015638
	ldr r2, [r6, #0x54]
	mov r3, r8
	ldrh r1, [r3]
	lsrs r1, r1, #4
	mov ip, r1
	movs r1, #0
	str r1, [sp]
	movs r1, #1
	mov r3, ip
	bl sub_807D9E4
	ldr r1, [r6, #0x54]
	movs r0, #0
	bl sub_807D6C0
	bl sub_807DE60
	ldr r1, _08080A18 @ =gAction
	movs r0, #0x19
	strb r0, [r1, #0x11]
	ldr r0, [r6, #0x54]
	bl GetUnitItemCount
	cmp r0, #5
	beq _080809FC
	ldrh r0, [r4]
	cmp r0, #0
	bne _08080A3E
_080809FC:
	movs r0, #0xff
	ldr r2, [sp, #0xc]
	strb r0, [r2]
	b _08080A3E
	.align 2, 0
_08080A04: .4byte 0x0201636A
_08080A08: .4byte gPlaySt
_08080A0C: .4byte 0x02015D28
_08080A10: .4byte 0x02016368
_08080A14: .4byte 0x02015638
_08080A18: .4byte gAction
_08080A1C:
	ldr r0, _08080A90 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	movs r3, #0x50
	adds r3, r3, r6
	mov r8, r3
	movs r4, #0x45
	adds r4, r4, r6
	mov sb, r4
	movs r1, #0x52
	adds r1, r1, r6
	mov sl, r1
	cmp r0, #0
	blt _08080A3E
	movs r0, #0x6c
	bl m4aSongNumStart
_08080A3E:
	ldr r2, [sp, #0x10]
	ldrb r2, [r2]
	cmp r2, #2
	beq _08080A48
	b _08080B60
_08080A48:
	ldr r0, _08080A94 @ =0x0201636A
	ldrh r0, [r0]
	cmp r0, #0
	beq _08080B3C
	ldr r1, _08080A98 @ =0x02015D28
	mov r3, r8
	ldrh r3, [r3]
	lsrs r0, r3, #4
	ldrb r4, [r7]
	adds r0, r4, r0
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r0, [r0, #2]
	bl GetItemAttributes
	adds r4, r0, #0
	movs r0, #0x10
	ands r4, r0
	cmp r4, #0
	beq _08080AA0
	ldrb r2, [r5]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	ldrb r3, [r7]
	lsls r1, r3, #4
	lsls r2, r2, #5
	subs r2, #0x48
	subs r1, r1, r2
	ldr r2, _08080A9C @ =0x00000C33
	adds r3, r6, #0
	bl sub_8082B00
	b _08080E2E
	.align 2, 0
_08080A90: .4byte gPlaySt
_08080A94: .4byte 0x0201636A
_08080A98: .4byte 0x02015D28
_08080A9C: .4byte 0x00000C33
_08080AA0:
	ldr r0, _08080B20 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08080AB0
	movs r0, #0x6a
	bl m4aSongNumStart
_08080AB0:
	adds r1, r6, #0
	adds r1, #0x30
	movs r0, #1
	strb r0, [r1]
	movs r0, #0x14
	ldr r5, [sp, #0xc]
	strb r0, [r5]
	str r4, [sp]
	movs r0, #2
	movs r1, #4
	movs r2, #0xc
	movs r3, #7
	bl sub_8041358
	ldr r4, _08080B24 @ =0x020155E8
	ldr r5, _08080B28 @ =0x02021C50
	ldr r0, _08080B2C @ =0x083272CC
	str r0, [sp]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0
	bl sub_8082360
	adds r0, r4, #0
	adds r0, #8
	adds r1, r5, #6
	ldr r2, _08080B30 @ =0x083272D4
	str r2, [sp]
	movs r2, #0
	movs r3, #0
	bl sub_8082360
	adds r0, r4, #0
	adds r0, #0x10
	adds r1, r5, #0
	adds r1, #0xc2
	ldr r2, _08080B34 @ =0x083272E0
	str r2, [sp]
	movs r2, #0
	movs r3, #0
	bl sub_8082360
	adds r4, #0x18
	adds r5, #0xca
	ldr r0, _08080B38 @ =0x083272E8
	str r0, [sp]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0
	bl sub_8082360
	bl _080812FA
	.align 2, 0
_08080B20: .4byte gPlaySt
_08080B24: .4byte 0x020155E8
_08080B28: .4byte 0x02021C50
_08080B2C: .4byte 0x083272CC
_08080B30: .4byte 0x083272D4
_08080B34: .4byte 0x083272E0
_08080B38: .4byte 0x083272E8
_08080B3C:
	ldr r0, _08080B5C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08080B4C
	movs r0, #0x6c
	bl m4aSongNumStart
_08080B4C:
	ldrb r2, [r5]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r3, [r7]
	lsls r1, r3, #1
	b _08080E3C
	.align 2, 0
_08080B5C: .4byte gPlaySt
_08080B60:
	adds r0, r6, #0
	bl sub_807D358
	b _08080E2E
_08080B68:
	ldr r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08080C34
	adds r1, r6, #0
	adds r1, #0x29
	ldrb r0, [r1]
	cmp r0, #0
	bne _08080C34
	adds r0, r6, #0
	adds r0, #0x31
	ldrb r2, [r0]
	cmp r2, #0
	bne _08080BCE
	movs r0, #2
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	adds r4, r6, #0
	adds r4, #0x2e
	ldrb r3, [r4]
	lsls r1, r3, #4
	lsls r2, r2, #5
	subs r2, #0x48
	subs r1, r1, r2
	ldr r2, [r6, #0x54]
	lsls r3, r3, #1
	adds r2, #0x1c
	adds r2, r2, r3
	ldrh r2, [r2]
	bl sub_80706FC
	adds r7, r4, #0
_08080BBA:
	movs r5, #0x50
	adds r5, r5, r6
	mov r8, r5
	movs r0, #0x45
	adds r0, r0, r6
	mov sb, r0
	movs r1, #0x52
	adds r1, r1, r6
	mov sl, r1
	b _080812FA
_08080BCE:
	ldr r0, _08080C2C @ =0x0201636A
	ldrh r0, [r0]
	adds r7, r6, #0
	adds r7, #0x2e
	movs r3, #0x50
	adds r3, r3, r6
	mov r8, r3
	movs r4, #0x45
	adds r4, r4, r6
	mov sb, r4
	movs r5, #0x52
	adds r5, r5, r6
	mov sl, r5
	cmp r0, #0
	bne _08080BEE
	b _080812FA
_08080BEE:
	subs r0, r2, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bls _08080BFA
	b _080812FA
_08080BFA:
	movs r0, #2
	strb r0, [r1]
	adds r0, r6, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	ldrb r4, [r7]
	lsls r1, r4, #4
	lsls r2, r2, #5
	subs r2, #0x48
	subs r1, r1, r2
	ldr r2, _08080C30 @ =0x02015D28
	mov ip, r2
	ldrh r3, [r3]
	lsrs r2, r3, #4
	adds r2, r2, r4
	lsls r2, r2, #2
	add r2, ip
	ldrh r2, [r2, #2]
	bl sub_80706FC
	b _080812FA
	.align 2, 0
_08080C2C: .4byte 0x0201636A
_08080C30: .4byte 0x02015D28
_08080C34:
	adds r0, r6, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	adds r5, r0, #0
	cmp r2, #1
	beq _08080C42
	b _08080E50
_08080C42:
	ldr r1, [r3]
	movs r0, #0x80
	lsls r0, r0, #2
	ldrh r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _08080C5C
	adds r1, r6, #0
	adds r1, #0x4a
	movs r0, #2
	strb r0, [r1]
	adds r4, r1, #0
	b _08080C64
_08080C5C:
	adds r0, r6, #0
	adds r0, #0x4a
	strb r2, [r0]
	adds r4, r0, #0
_08080C64:
	ldr r1, [r3]
	movs r2, #0x40
	adds r0, r2, #0
	ldrh r7, [r1, #6]
	ands r0, r7
	cmp r0, #0
	bne _08080C82
	adds r0, r2, #0
	ldrh r1, [r1, #0x10]
	ands r0, r1
	cmp r0, #0
	beq _08080D34
	ldrb r0, [r4]
	cmp r0, #2
	bne _08080D34
_08080C82:
	adds r0, r6, #0
	adds r0, #0x2e
	ldrb r1, [r0]
	mov sb, r1
	adds r7, r0, #0
	movs r2, #0x50
	adds r2, r2, r6
	mov r8, r2
	cmp r1, #1
	bne _08080CEC
	ldrh r0, [r2]
	cmp r0, #0
	beq _08080CEC
	ldr r0, _08080CE4 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08080CAC
	movs r0, #0x66
	bl m4aSongNumStart
_08080CAC:
	ldr r0, _08080CE8 @ =0x02015638
	mov r3, r8
	ldrh r3, [r3]
	lsrs r2, r3, #4
	subs r2, #1
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	ldr r3, [r6, #0x54]
	movs r1, #0
	str r1, [sp]
	movs r1, #1
	bl sub_807DB80
	adds r0, r6, #0
	bl sub_807D358
	ldrb r4, [r4]
	lsls r0, r4, #2
	mov r4, r8
	ldrh r4, [r4]
	subs r0, r4, r0
	mov r5, r8
	strh r0, [r5]
	mov r1, sb
	ldr r0, [sp, #0xc]
	strb r1, [r0]
	b _08080DC2
	.align 2, 0
_08080CE4: .4byte gPlaySt
_08080CE8: .4byte 0x02015638
_08080CEC:
	ldrb r0, [r7]
	movs r4, #0x45
	adds r4, r4, r6
	mov sb, r4
	movs r1, #0x52
	adds r1, r1, r6
	mov sl, r1
	cmp r0, #0
	bne _08080D00
	b _080812FA
_08080D00:
	ldr r0, _08080D30 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08080D10
	movs r0, #0x66
	bl m4aSongNumStart
_08080D10:
	ldrb r2, [r5]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r3, [r7]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_8041728
	ldrb r0, [r7]
	subs r0, #1
	b _08080E2C
	.align 2, 0
_08080D30: .4byte gPlaySt
_08080D34:
	ldr r1, [r3]
	movs r2, #0x80
	adds r0, r2, #0
	ldrh r7, [r1, #6]
	ands r0, r7
	cmp r0, #0
	bne _08080D5A
	adds r0, r2, #0
	ldrh r1, [r1, #0x10]
	ands r0, r1
	adds r7, r6, #0
	adds r7, #0x2e
	cmp r0, #0
	bne _08080D52
	b _08080F84
_08080D52:
	ldrb r0, [r4]
	cmp r0, #2
	beq _08080D5A
	b _08080F84
_08080D5A:
	adds r0, r6, #0
	adds r0, #0x2e
	ldrb r1, [r0]
	adds r7, r0, #0
	cmp r1, #5
	bls _08080D68
	b _08080F84
_08080D68:
	movs r2, #0x50
	adds r2, r2, r6
	mov r8, r2
	ldr r3, _08080DD0 @ =0x0201636A
	mov ip, r3
	cmp r1, #5
	bne _08080DDC
	ldrh r1, [r2]
	lsrs r0, r1, #4
	adds r0, #7
	ldrh r1, [r3]
	cmp r0, r1
	bge _08080DDC
	ldr r0, _08080DD4 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08080D92
	movs r0, #0x66
	bl m4aSongNumStart
_08080D92:
	ldr r0, _08080DD8 @ =0x02015638
	mov r3, r8
	ldrh r3, [r3]
	lsrs r2, r3, #4
	adds r2, #7
	ldr r3, [r6, #0x54]
	movs r1, #0
	str r1, [sp]
	movs r1, #1
	bl sub_807DB80
	adds r0, r6, #0
	bl sub_807D358
	ldrb r4, [r4]
	lsls r0, r4, #2
	mov r4, r8
	ldrh r4, [r4]
	adds r0, r4, r0
	mov r5, r8
	strh r0, [r5]
	movs r0, #2
	ldr r1, [sp, #0xc]
	strb r0, [r1]
_08080DC2:
	movs r2, #0x45
	adds r2, r2, r6
	mov sb, r2
	movs r3, #0x52
	adds r3, r3, r6
	mov sl, r3
	b _080812FA
	.align 2, 0
_08080DD0: .4byte 0x0201636A
_08080DD4: .4byte gPlaySt
_08080DD8: .4byte 0x02015638
_08080DDC:
	mov r4, r8
	ldrh r4, [r4]
	lsrs r0, r4, #4
	ldrb r1, [r7]
	adds r0, r1, r0
	adds r0, #1
	movs r2, #0x45
	adds r2, r2, r6
	mov sb, r2
	movs r3, #0x52
	adds r3, r3, r6
	mov sl, r3
	mov r4, ip
	ldrh r4, [r4]
	cmp r0, r4
	blt _08080DFE
	b _080812FA
_08080DFE:
	ldr r0, _08080E4C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08080E0E
	movs r0, #0x66
	bl m4aSongNumStart
_08080E0E:
	ldrb r2, [r5]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r3, [r7]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_8041728
	ldrb r0, [r7]
	adds r0, #1
_08080E2C:
	strb r0, [r7]
_08080E2E:
	ldrb r2, [r5]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r4, [r7]
	lsls r1, r4, #1
_08080E3C:
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_804169C
	b _080812FA
	.align 2, 0
_08080E4C: .4byte gPlaySt
_08080E50:
	ldr r0, [r3]
	ldrh r1, [r0, #6]
	movs r7, #0x40
	mov r8, r7
	mov r0, r8
	ands r0, r1
	cmp r0, #0
	beq _08080EF4
	ldrb r2, [r5]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	adds r4, r6, #0
	adds r4, #0x2e
	ldrb r7, [r4]
	lsls r1, r7, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	str r3, [sp, #0x18]
	bl sub_8041728
	ldrb r0, [r4]
	adds r7, r4, #0
	ldr r3, [sp, #0x18]
	cmp r0, #0
	beq _08080EA4
	ldr r0, _08080EA0 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08080E9A
	movs r0, #0x66
	bl m4aSongNumStart
_08080E9A:
	ldrb r0, [r7]
	b _08080ED0
	.align 2, 0
_08080EA0: .4byte gPlaySt
_08080EA4:
	ldr r1, [r3]
	mov r0, r8
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08080ED4
	ldr r0, _08080EF0 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08080EC0
	movs r0, #0x66
	bl m4aSongNumStart
_08080EC0:
	ldrb r0, [r5]
	lsls r1, r0, #2
	adds r0, r6, #0
	adds r0, #0x54
	adds r0, r0, r1
	ldr r0, [r0]
	bl GetUnitItemCount
_08080ED0:
	subs r0, #1
	strb r0, [r7]
_08080ED4:
	ldrb r2, [r5]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r3, [r7]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_804169C
	b _08080F84
	.align 2, 0
_08080EF0: .4byte gPlaySt
_08080EF4:
	movs r0, #0x80
	ands r0, r1
	adds r7, r6, #0
	adds r7, #0x2e
	cmp r0, #0
	beq _08080F84
	ldrb r2, [r5]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r4, [r7]
	lsls r1, r4, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_8041728
	ldrb r4, [r7]
	ldr r0, [r6, #0x54]
	bl GetUnitItemCount
	subs r0, #1
	cmp r4, r0
	bge _08080F48
	ldrb r0, [r7]
	cmp r0, #3
	bhi _08080F48
	ldr r0, _08080F44 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08080F3E
	movs r0, #0x66
	bl m4aSongNumStart
_08080F3E:
	ldrb r0, [r7]
	adds r0, #1
	b _08080F68
	.align 2, 0
_08080F44: .4byte gPlaySt
_08080F48:
	ldr r0, _08081008 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x80
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08080F6A
	ldr r0, _0808100C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08080F66
	movs r0, #0x66
	bl m4aSongNumStart
_08080F66:
	movs r0, #0
_08080F68:
	strb r0, [r7]
_08080F6A:
	ldrb r2, [r5]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r3, [r7]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_804169C
_08080F84:
	adds r4, r5, #0
	movs r0, #0x50
	adds r0, r0, r6
	mov r8, r0
	movs r1, #0x45
	adds r1, r1, r6
	mov sb, r1
	movs r2, #0x52
	adds r2, r2, r6
	mov sl, r2
	ldrb r3, [r4]
	cmp r3, #1
	beq _08080FA0
	b _080812FA
_08080FA0:
	ldr r0, _08081008 @ =gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _08081010
	ldr r0, _0808100C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08080FBE
	movs r0, #0x67
	bl m4aSongNumStart
_08080FBE:
	ldrb r2, [r4]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r4, [r7]
	lsls r1, r4, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_8041728
	adds r2, r6, #0
	adds r2, #0x46
	adds r0, r6, #0
	adds r0, #0x32
	ldrb r5, [r2]
	adds r0, r5, r0
	mov r3, r8
	ldrh r3, [r3]
	lsrs r1, r3, #4
	strb r1, [r0]
	adds r0, r6, #0
	adds r0, #0x3b
	ldrb r2, [r2]
	adds r0, r2, r0
	ldrb r1, [r7]
	strb r1, [r0]
	movs r0, #0x38
	mov r4, sb
	strb r0, [r4]
	movs r0, #5
	ldr r5, [sp, #0xc]
	strb r0, [r5]
	b _080812FA
	.align 2, 0
_08081008: .4byte gKeySt
_0808100C: .4byte gPlaySt
_08081010:
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	bne _0808101A
	b _080812FA
_0808101A:
	ldr r0, _08081074 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808102A
	movs r0, #0x67
	bl m4aSongNumStart
_0808102A:
	ldrb r2, [r5]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r3, [r7]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_8041728
	adds r2, r6, #0
	adds r2, #0x46
	adds r0, r6, #0
	adds r0, #0x32
	ldrb r4, [r2]
	adds r0, r4, r0
	mov r5, r8
	ldrh r5, [r5]
	lsrs r1, r5, #4
	strb r1, [r0]
	adds r0, r6, #0
	adds r0, #0x3b
	ldrb r2, [r2]
	adds r0, r2, r0
	ldrb r1, [r7]
	strb r1, [r0]
	movs r0, #0xc8
	mov r1, sb
	strb r0, [r1]
	movs r0, #0xa
	ldr r2, [sp, #0xc]
	strb r0, [r2]
	b _080812FA
	.align 2, 0
_08081074: .4byte gPlaySt
_08081078:
	adds r0, r6, #0
	adds r0, #0x50
	adds r1, r6, #0
	adds r1, #0x4a
	ldrb r1, [r1]
	lsls r1, r1, #2
	ldrh r3, [r0]
	subs r1, r3, r1
	strh r1, [r0]
	ldrh r2, [r0]
	movs r1, #0xf
	ands r1, r2
	adds r7, r6, #0
	adds r7, #0x2e
	mov r8, r0
	movs r5, #0x45
	adds r5, r5, r6
	mov sb, r5
	movs r0, #0x52
	adds r0, r0, r6
	mov sl, r0
	cmp r1, #0
	beq _080810A8
	b _080812FA
_080810A8:
	lsrs r0, r2, #4
	adds r0, #7
	lsls r0, r0, #1
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #6
	ldr r1, _080810CC @ =0x02022B26
	adds r0, r0, r1
	movs r1, #0xf
	movs r2, #1
	movs r3, #0
	bl TmFillRect_t
	movs r0, #4
	bl EnableBgSync
	movs r0, #0
	b _080812F8
	.align 2, 0
_080810CC: .4byte 0x02022B26
_080810D0:
	adds r0, r6, #0
	adds r0, #0x50
	adds r1, r6, #0
	adds r1, #0x4a
	ldrb r1, [r1]
	lsls r1, r1, #2
	ldrh r2, [r0]
	adds r1, r2, r1
	strh r1, [r0]
	ldrh r2, [r0]
	movs r1, #0xf
	ands r1, r2
	adds r7, r6, #0
	adds r7, #0x2e
	mov r8, r0
	movs r3, #0x45
	adds r3, r3, r6
	mov sb, r3
	movs r5, #0x52
	adds r5, r5, r6
	mov sl, r5
	cmp r1, #0
	beq _08081100
	b _080812FA
_08081100:
	lsrs r0, r2, #4
	subs r0, #1
	lsls r0, r0, #1
	movs r1, #0x1f
	ands r0, r1
	lsls r0, r0, #6
	ldr r1, _08081124 @ =0x02022B26
	adds r0, r0, r1
	movs r1, #0xf
	movs r2, #1
	movs r3, #0
	bl TmFillRect_t
	movs r0, #4
	bl EnableBgSync
	movs r0, #0
	b _080812F8
	.align 2, 0
_08081124: .4byte 0x02022B26
_08081128:
	adds r1, r6, #0
	adds r1, #0x45
	ldrb r0, [r1]
	adds r0, #0x38
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r7, r6, #0
	adds r7, #0x2e
	movs r2, #0x50
	adds r2, r2, r6
	mov r8, r2
	mov sb, r1
	movs r3, #0x52
	adds r3, r3, r6
	mov sl, r3
	cmp r0, #0x70
	beq _0808114E
	b _080812FA
_0808114E:
	movs r0, #6
	b _080812F8
_08081152:
	adds r2, r6, #0
	adds r2, #0x45
	movs r0, #0x90
	strb r0, [r2]
	adds r0, r6, #0
	adds r0, #0x46
	ldrb r1, [r0]
	adds r5, r0, #0
	mov sb, r2
	cmp r1, #8
	bne _0808116C
	movs r0, #0
	b _0808116E
_0808116C:
	adds r0, r1, #1
_0808116E:
	strb r0, [r5]
	adds r0, r6, #0
	adds r0, #0x32
	ldrb r4, [r5]
	adds r0, r4, r0
	ldrb r0, [r0]
	lsls r0, r0, #4
	adds r4, r6, #0
	adds r4, #0x50
	strh r0, [r4]
	adds r0, r6, #0
	adds r0, #0x3b
	ldrb r7, [r5]
	adds r0, r7, r0
	ldrb r0, [r0]
	adds r7, r6, #0
	adds r7, #0x2e
	strb r0, [r7]
	ldrb r0, [r5]
	bl sub_807D834
	adds r0, r7, #0
	adds r1, r4, #0
	bl sub_80823A0
	ldr r0, _080811E0 @ =0x02015638
	ldr r2, [r6, #0x54]
	ldrh r1, [r4]
	lsrs r3, r1, #4
	movs r1, #1
	str r1, [sp]
	bl sub_807D9E4
	adds r0, r6, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r3, [r7]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_804169C
	adds r0, r6, #0
	bl sub_807D358
	mov r5, sb
	ldrb r0, [r5]
	adds r0, #0xe
	strb r0, [r5]
	movs r0, #7
	b _080812C0
	.align 2, 0
_080811E0: .4byte 0x02015638
_080811E4:
	adds r1, r6, #0
	adds r1, #0x45
	ldrb r0, [r1]
	adds r0, #0xe
	b _080812DC
_080811EE:
	adds r1, r6, #0
	adds r1, #0x45
	ldrb r0, [r1]
	subs r0, #0x38
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r7, r6, #0
	adds r7, #0x2e
	movs r2, #0x50
	adds r2, r2, r6
	mov r8, r2
	mov sb, r1
	movs r3, #0x52
	adds r3, r3, r6
	mov sl, r3
	cmp r0, #0x90
	bne _080812FA
	movs r0, #0xb
	b _080812F8
_08081216:
	adds r2, r6, #0
	adds r2, #0x45
	movs r0, #0x70
	strb r0, [r2]
	adds r0, r6, #0
	adds r0, #0x46
	ldrb r1, [r0]
	adds r5, r0, #0
	mov sb, r2
	cmp r1, #0
	bne _08081230
	movs r0, #8
	b _08081232
_08081230:
	subs r0, r1, #1
_08081232:
	strb r0, [r5]
	movs r4, #0x2f
	adds r4, r4, r6
	mov r8, r4
	ldrb r2, [r4]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	adds r7, r6, #0
	adds r7, #0x2e
	ldrb r3, [r7]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_8041728
	adds r0, r6, #0
	adds r0, #0x32
	ldrb r4, [r5]
	adds r0, r4, r0
	ldrb r0, [r0]
	lsls r0, r0, #4
	adds r4, r6, #0
	adds r4, #0x50
	strh r0, [r4]
	adds r0, r6, #0
	adds r0, #0x3b
	ldrb r1, [r5]
	adds r0, r1, r0
	ldrb r0, [r0]
	strb r0, [r7]
	ldrb r0, [r5]
	bl sub_807D834
	adds r0, r7, #0
	adds r1, r4, #0
	bl sub_80823A0
	ldr r0, _080812D0 @ =0x02015638
	ldr r2, [r6, #0x54]
	ldrh r5, [r4]
	lsrs r3, r5, #4
	movs r1, #1
	str r1, [sp]
	bl sub_807D9E4
	mov r0, r8
	ldrb r2, [r0]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldrb r3, [r7]
	lsls r1, r3, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_804169C
	adds r0, r6, #0
	bl sub_807D358
	mov r5, sb
	ldrb r0, [r5]
	subs r0, #0xe
	strb r0, [r5]
	movs r0, #0xc
_080812C0:
	ldr r1, [sp, #0xc]
	strb r0, [r1]
	mov r8, r4
_080812C6:
	movs r2, #0x52
	adds r2, r2, r6
	mov sl, r2
	b _080812FA
	.align 2, 0
_080812D0: .4byte 0x02015638
_080812D4:
	adds r1, r6, #0
	adds r1, #0x45
	ldrb r0, [r1]
	subs r0, #0xe
_080812DC:
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r7, r6, #0
	adds r7, #0x2e
	movs r3, #0x50
	adds r3, r3, r6
	mov r8, r3
	mov sb, r1
	movs r5, #0x52
	adds r5, r5, r6
	mov sl, r5
	cmp r0, #0
	bne _080812FA
_080812F8:
	strb r0, [r4]
_080812FA:
	mov r1, r8
	ldrh r1, [r1]
	lsrs r0, r1, #4
	ldrb r3, [r7]
	adds r5, r0, r3
	ldr r2, [sp, #4]
	cmp r2, r5
	bne _08081316
	adds r0, r6, #0
	adds r0, #0x46
	ldr r4, [sp, #8]
	ldrb r0, [r0]
	cmp r4, r0
	beq _080813B6
_08081316:
	adds r4, r6, #0
	adds r4, #0x29
	ldrb r1, [r4]
	adds r0, r6, #0
	adds r0, #0x31
	str r0, [sp, #0x10]
	cmp r1, #0
	beq _08081392
	ldrb r0, [r0]
	cmp r0, #0
	bne _08081352
	adds r0, r6, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	lsls r1, r3, #4
	lsls r2, r2, #5
	subs r2, #0x48
	subs r1, r1, r2
	ldr r2, [r6, #0x54]
	lsls r3, r3, #1
	adds r2, #0x1c
	adds r2, r2, r3
	ldrh r2, [r2]
	bl sub_80706FC
	b _08081392
_08081352:
	ldr r0, _08081368 @ =0x0201636A
	ldrh r0, [r0]
	cmp r0, #0
	bne _0808136C
	cmp r1, #1
	beq _08081362
	bl sub_807089C
_08081362:
	movs r0, #1
	b _08081390
	.align 2, 0
_08081368: .4byte 0x0201636A
_0808136C:
	adds r0, r6, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #4
	adds r0, #0x10
	lsls r1, r3, #4
	lsls r2, r2, #5
	subs r2, #0x48
	subs r1, r1, r2
	ldr r3, _080813E4 @ =0x02015D28
	lsls r2, r5, #2
	adds r2, r2, r3
	ldrh r2, [r2, #2]
	bl sub_80706FC
	movs r0, #2
_08081390:
	strb r0, [r4]
_08081392:
	ldr r1, [sp, #0x10]
	ldrb r1, [r1]
	cmp r1, #2
	bne _080813B6
	ldr r1, _080813E4 @ =0x02015D28
	mov r2, r8
	ldrh r2, [r2]
	lsrs r0, r2, #4
	ldrb r7, [r7]
	adds r0, r7, r0
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrh r2, [r0, #2]
	ldr r3, [r6, #0x5c]
	movs r0, #1
	movs r1, #0xb
	bl sub_807D4A8
_080813B6:
	mov r3, sb
	ldrb r1, [r3]
	mov r4, r8
	ldrh r2, [r4]
	subs r2, #0x28
	movs r0, #0xff
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	mov r5, sl
	ldrh r0, [r5]
	adds r0, #1
	strh r0, [r5]
_080813D2:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080813E4: .4byte 0x02015D28

	thumb_func_start sub_80813E8
sub_80813E8: @ 0x080813E8
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	adds r4, r0, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #3
	bne _08081460
	ldr r0, [r4, #0x14]
	adds r1, r4, #0
	adds r1, #0x46
	ldrb r2, [r1]
	adds r0, #0x39
	movs r1, #0
	strb r2, [r0]
	ldr r0, [r4, #0x60]
	str r1, [sp]
	str r1, [sp, #4]
	str r1, [sp, #8]
	movs r2, #0
	movs r3, #0xd
	bl sub_8082320
	adds r3, r4, #0
	adds r3, #0x50
	ldrh r0, [r3]
	adds r1, r4, #0
	adds r1, #0x4e
	strh r0, [r1]
	adds r2, r4, #0
	adds r2, #0x2e
	ldrb r0, [r2]
	subs r1, #7
	strb r0, [r1]
	ldr r5, _0808145C @ =0x02015D28
	ldrh r1, [r3]
	lsrs r0, r1, #4
	ldrb r1, [r2]
	adds r0, r1, r0
	lsls r0, r0, #2
	adds r0, r0, r5
	ldrb r0, [r0]
	cmp r0, #0
	bne _08081460
	adds r1, r4, #0
	adds r1, #0x2c
	movs r0, #0
	strb r0, [r1]
	ldrh r3, [r3]
	lsrs r0, r3, #4
	ldrb r2, [r2]
	adds r0, r2, r0
	lsls r0, r0, #2
	adds r0, r0, r5
	ldrb r1, [r0, #1]
	adds r0, r4, #0
	adds r0, #0x48
	strb r1, [r0]
	b _08081536
	.align 2, 0
_0808145C: .4byte 0x02015D28
_08081460:
	adds r1, r4, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	cmp r0, #0
	bne _08081486
	adds r2, r0, #0
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	subs r1, #1
	ldrb r1, [r1]
	lsls r1, r1, #1
	lsls r2, r2, #2
	subs r2, #9
	subs r1, r1, r2
	movs r2, #0xc
	bl sub_8041728
_08081486:
	ldr r0, _080814F0 @ =0x02021B26
	movs r1, #0xf
	movs r2, #0x13
	movs r3, #0
	bl TmFillRect_t
	ldr r0, _080814F4 @ =0x02022326
	movs r1, #0xf
	movs r2, #0x13
	movs r3, #0
	bl TmFillRect_t
	ldr r0, _080814F8 @ =0x02022B26
	movs r1, #0xf
	movs r2, #0x1f
	movs r3, #0
	bl TmFillRect_t
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #3
	bne _08081522
	ldr r0, [r4, #0x14]
	adds r1, r4, #0
	adds r1, #0x46
	ldrb r1, [r1]
	adds r0, #0x39
	strb r1, [r0]
	ldr r7, _080814FC @ =0x02015D28
	adds r5, r4, #0
	adds r5, #0x2e
	adds r6, r4, #0
	adds r6, #0x50
	ldrh r1, [r6]
	lsrs r0, r1, #4
	ldrb r1, [r5]
	adds r0, r1, r0
	lsls r0, r0, #2
	adds r1, r0, r7
	ldrb r0, [r1]
	cmp r0, #0
	bne _08081500
	ldrb r1, [r1, #1]
	adds r0, r4, #0
	adds r0, #0x48
	strb r1, [r0]
	adds r0, r4, #0
	movs r1, #4
	bl Proc_Goto
	b _08081530
	.align 2, 0
_080814F0: .4byte 0x02021B26
_080814F4: .4byte 0x02022326
_080814F8: .4byte 0x02022B26
_080814FC: .4byte 0x02015D28
_08081500:
	ldrb r0, [r1]
	bl GetUnitByPid
	str r0, [r4, #0x58]
	ldrh r6, [r6]
	lsrs r0, r6, #4
	ldrb r1, [r5]
	adds r0, r1, r0
	lsls r0, r0, #2
	adds r0, r0, r7
	ldrb r0, [r0, #1]
	strb r0, [r5]
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
	b _08081530
_08081522:
	movs r0, #1
	bl EndFaceById
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
_08081530:
	movs r0, #7
	bl EnableBgSync
_08081536:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8081540
sub_8081540: @ 0x08081540
	push {lr}
	adds r2, r0, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #5
	beq _0808157A
	adds r3, r2, #0
	adds r3, #0x2a
	ldrb r0, [r3]
	cmp r0, #0
	bne _08081562
	ldr r0, [r2, #0x14]
	adds r1, r2, #0
	adds r1, #0x46
	ldrb r1, [r1]
	adds r0, #0x39
	strb r1, [r0]
_08081562:
	ldrb r3, [r3]
	cmp r3, #4
	bne _08081574
	ldr r0, [r2, #0x14]
	adds r1, r2, #0
	adds r1, #0x46
	ldrb r1, [r1]
	adds r0, #0x3a
	strb r1, [r0]
_08081574:
	bl InitBmBgLayers
	b _08081580
_0808157A:
	ldr r0, [r2, #0x5c]
	bl Proc_End
_08081580:
	movs r0, #0
	bl EndFaceById
	movs r0, #1
	bl EndFaceById
	ldr r0, _080815B0 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080815B4 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080815B8 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #7
	bl EnableBgSync
	pop {r0}
	bx r0
	.align 2, 0
_080815B0: .4byte gBg0Tm
_080815B4: .4byte gBg1Tm
_080815B8: .4byte gBg2Tm

	thumb_func_start sub_80815BC
sub_80815BC: @ 0x080815BC
	push {r4, lr}
	adds r2, r0, #0
	lsls r4, r1, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080815E0 @ =0x086793E8
	adds r1, r2, #0
	bl SpawnProcLocking
	adds r2, r0, #0
	adds r2, #0x2a
	movs r1, #0
	strb r4, [r2]
	adds r0, #0x2d
	strb r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080815E0: .4byte 0x086793E8

	thumb_func_start sub_80815E4
sub_80815E4: @ 0x080815E4
	push {r4, lr}
	adds r4, r0, #0
	cmp r1, #0
	bne _080815FC
	ldr r0, _080815F8 @ =0x08679490
	movs r1, #3
	bl SpawnProc
	b _08081602
	.align 2, 0
_080815F8: .4byte 0x08679490
_080815FC:
	ldr r0, _0808161C @ =0x08679490
	bl SpawnProcLocking
_08081602:
	adds r2, r0, #0
	adds r3, r2, #0
	adds r3, #0x2d
	movs r0, #0
	movs r1, #4
	strb r1, [r3]
	str r4, [r2, #0x54]
	adds r1, r2, #0
	adds r1, #0x4b
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808161C: .4byte 0x08679490

	thumb_func_start sub_8081620
sub_8081620: @ 0x08081620
	push {r4, lr}
	adds r4, r0, #0
	cmp r1, #0
	bne _08081638
	ldr r0, _08081634 @ =0x08679490
	movs r1, #3
	bl SpawnProc
	b _0808163E
	.align 2, 0
_08081634: .4byte 0x08679490
_08081638:
	ldr r0, _08081658 @ =0x08679490
	bl SpawnProcLocking
_0808163E:
	adds r1, r0, #0
	adds r2, r1, #0
	adds r2, #0x2d
	movs r0, #4
	strb r0, [r2]
	str r4, [r1, #0x54]
	adds r1, #0x4b
	movs r0, #1
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08081658: .4byte 0x08679490

	thumb_func_start sub_808165C
sub_808165C: @ 0x0808165C
	push {lr}
	adds r0, #0x2e
	ldrb r0, [r0]
	bl UpdateEquipInfoWindow
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808166C
sub_808166C: @ 0x0808166C
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	cmp r1, #1
	bne _080816EC
	movs r0, #0
	str r0, [sp]
	movs r0, #0x11
	movs r1, #4
	movs r2, #0xc
	movs r3, #7
	bl sub_8041358
	ldr r4, _080816D8 @ =0x02021C6E
	ldr r0, _080816DC @ =0x083272F0
	str r0, [sp]
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl sub_8082360
	adds r0, r5, #0
	adds r0, #8
	adds r1, r4, #6
	ldr r2, _080816E0 @ =0x083272F8
	str r2, [sp]
	movs r2, #0
	movs r3, #0
	bl sub_8082360
	adds r0, r5, #0
	adds r0, #0x10
	adds r1, r4, #0
	adds r1, #0xc2
	ldr r2, _080816E4 @ =0x08327304
	str r2, [sp]
	movs r2, #0
	movs r3, #0
	bl sub_8082360
	adds r0, r5, #0
	adds r0, #0x18
	adds r4, #0xca
	ldr r1, _080816E8 @ =0x0832730C
	str r1, [sp]
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl sub_8082360
	b _08081704
	.align 2, 0
_080816D8: .4byte 0x02021C6E
_080816DC: .4byte 0x083272F0
_080816E0: .4byte 0x083272F8
_080816E4: .4byte 0x08327304
_080816E8: .4byte 0x0832730C
_080816EC:
	ldr r0, _08081714 @ =0x02021C6C
	movs r1, #0xd
	movs r2, #5
	movs r3, #0
	bl TmFillRect_t
	ldr r0, _08081718 @ =0x0202242A
	movs r1, #0xc
	movs r2, #6
	movs r3, #0
	bl TmFillRect_t
_08081704:
	movs r0, #3
	bl EnableBgSync
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08081714: .4byte 0x02021C6C
_08081718: .4byte 0x0202242A

	thumb_func_start sub_808171C
sub_808171C: @ 0x0808171C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	adds r5, r0, #0
	bl ResetTextFont
	bl ClearIcons
	ldr r3, _0808193C @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r2, [r3, #0x10]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	ldr r0, _08081940 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _08081944 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _08081948 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	bl ApplySystemObjectsGraphics
	bl InitIcons
	movs r0, #4
	bl ApplyIconPalettes
	ldr r0, _0808194C @ =0x02015688
	movs r1, #6
	bl InitText
	movs r4, #0
	ldr r6, _08081950 @ =0x020155E8
_0808178C:
	lsls r0, r4, #3
	adds r0, r0, r6
	movs r1, #7
	bl InitTextDb
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #7
	bls _0808178C
	movs r4, #0
	adds r7, r5, #0
	adds r7, #0x2f
	adds r2, r5, #0
	adds r2, #0x2e
	str r2, [sp, #0x18]
	movs r3, #0x30
	adds r3, r3, r5
	mov sl, r3
	movs r0, #0x31
	adds r0, r0, r5
	mov r8, r0
	movs r1, #0x45
	adds r1, r1, r5
	mov sb, r1
	adds r2, #0x22
	str r2, [sp, #4]
	adds r3, r5, #0
	adds r3, #0x2c
	str r3, [sp, #0x10]
	adds r0, r5, #0
	adds r0, #0x52
	str r0, [sp, #8]
	adds r1, r5, #0
	adds r1, #0x29
	str r1, [sp, #0xc]
	subs r2, #0x23
	str r2, [sp, #0x14]
	ldr r6, _08081954 @ =0x02015638
_080817DA:
	lsls r0, r4, #3
	adds r0, r0, r6
	movs r1, #7
	bl InitText
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #3
	bls _080817DA
	ldr r0, [r5, #0x14]
	ldr r1, [r0, #0x48]
	str r1, [r5, #0x54]
	ldr r0, [r0, #0x4c]
	str r0, [r5, #0x58]
	adds r0, r5, #0
	movs r2, #0x10
	movs r3, #0xb
	bl StartEquipInfoWindow
	movs r4, #0
	strb r4, [r7]
	ldr r3, [sp, #0x18]
	strb r4, [r3]
	mov r0, sl
	strb r4, [r0]
	mov r1, r8
	strb r4, [r1]
	mov r2, sb
	strb r4, [r2]
	movs r0, #0
	ldr r3, [sp, #4]
	strh r4, [r3]
	ldr r1, [sp, #0x10]
	strb r0, [r1]
	ldr r2, [sp, #8]
	strh r4, [r2]
	ldr r3, [sp, #0xc]
	strb r0, [r3]
	ldr r1, [sp, #0x14]
	strb r0, [r1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl LoadUiFrameGraphics
	str r4, [sp]
	movs r0, #0x10
	movs r1, #0xb
	movs r2, #0xe
	movs r3, #8
	bl sub_8041358
	adds r0, r5, #0
	bl sub_808165C
	str r4, [sp]
	movs r0, #1
	movs r1, #8
	movs r2, #0xe
	movs r3, #0xc
	bl sub_8041358
	ldr r0, [r5, #0x54]
	bl GetUnitFid
	adds r1, r0, #0
	movs r3, #4
	rsbs r3, r3, #0
	movs r0, #3
	str r0, [sp]
	movs r0, #0
	movs r2, #0x40
	bl StartFace
	ldr r1, [r5, #0x54]
	movs r0, #0
	bl sub_807D6C0
	ldrb r2, [r7]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	ldr r3, [sp, #0x18]
	ldrb r3, [r3]
	lsls r1, r3, #1
	adds r1, #9
	movs r2, #0xc
	bl sub_804169C
	ldr r0, [r5, #0x54]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl DecodeMsg
	bl GetStringTextLen
	movs r4, #0x30
	subs r4, r4, r0
	lsrs r0, r4, #0x1f
	adds r4, r4, r0
	asrs r4, r4, #1
	ldr r0, [r5, #0x54]
	ldr r0, [r0]
	ldrh r0, [r0]
	bl DecodeMsg
	ldr r2, _0808194C @ =0x02015688
	ldr r1, _08081940 @ =gBg0Tm
	str r0, [sp]
	adds r0, r2, #0
	movs r2, #0
	adds r3, r4, #0
	bl sub_8082360
	ldr r0, _08081958 @ =0x083198CC
	ldr r1, _0808195C @ =0x06017200
	bl Decompress
	ldr r0, _08081960 @ =0x08319E88
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x60
	bl ApplyPaletteExt
	ldr r0, _08081964 @ =0x0831AB1C
	ldr r1, _08081968 @ =0x06011000
	bl Decompress
	ldr r0, _0808196C @ =0x0831AABC
	movs r1, #0xc0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #7
	bl EnableBgSync
	adds r0, r5, #0
	bl sub_8081ED4
	movs r4, #1
	rsbs r4, r4, #0
	movs r0, #0
	adds r1, r4, #0
	bl sub_8070E70
	adds r0, r5, #0
	adds r1, r4, #0
	bl sub_80829E8
	adds r0, r5, #0
	movs r1, #0
	bl Proc_Goto
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808193C: .4byte gDispIo
_08081940: .4byte gBg0Tm
_08081944: .4byte gBg1Tm
_08081948: .4byte gBg2Tm
_0808194C: .4byte 0x02015688
_08081950: .4byte 0x020155E8
_08081954: .4byte 0x02015638
_08081958: .4byte 0x083198CC
_0808195C: .4byte 0x06017200
_08081960: .4byte 0x08319E88
_08081964: .4byte 0x0831AB1C
_08081968: .4byte 0x06011000
_0808196C: .4byte 0x0831AABC

	thumb_func_start sub_8081970
sub_8081970: @ 0x08081970
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	str r0, [sp]
	adds r4, r7, #0
	adds r4, #0x29
	ldrb r0, [r4]
	cmp r0, #0
	beq _080819AC
	ldr r0, _080819A8 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x81
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080819AC
	bl sub_807089C
	movs r0, #0
	strb r0, [r4]
	b _08081DDC
	.align 2, 0
_080819A8: .4byte gKeySt
_080819AC:
	adds r0, r7, #0
	adds r0, #0x2c
	ldrb r4, [r0]
	adds r6, r0, #0
	cmp r4, #0
	beq _080819C0
	cmp r4, #1
	bne _080819BE
	b _08081C20
_080819BE:
	b _08081C84
_080819C0:
	ldr r2, _08081A00 @ =gKeySt
	ldr r1, [r2]
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	movs r1, #0x29
	adds r1, r1, r7
	mov sb, r1
	mov sl, r2
	cmp r0, #0
	beq _08081A04
	ldrb r0, [r1]
	cmp r0, #0
	bne _08081A04
	movs r0, #1
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x2e
	ldrb r2, [r0]
	lsls r1, r2, #4
	adds r1, #0x48
	ldr r0, [r7, #0x54]
	lsls r2, r2, #1
	adds r0, #0x1c
	adds r0, r0, r2
	ldrh r2, [r0]
	movs r0, #0x10
	bl sub_80706FC
	b _08081DB2
	.align 2, 0
_08081A00: .4byte gKeySt
_08081A04:
	mov r2, sl
	ldr r1, [r2]
	movs r0, #0x40
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _08081A8C
	ldr r0, [r7, #0x54]
	bl GetUnitItemCount
	cmp r0, #1
	ble _08081A8C
	adds r5, r7, #0
	adds r5, #0x2f
	ldrb r3, [r5]
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #1
	adds r0, #2
	adds r4, r7, #0
	adds r4, #0x2e
	ldrb r2, [r4]
	lsls r1, r2, #1
	adds r1, #9
	movs r2, #0xc
	bl sub_8041728
	ldrb r0, [r4]
	mov r8, r4
	cmp r0, #0
	beq _08081A60
	ldr r0, _08081A5C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08081A52
	movs r0, #0x66
	bl m4aSongNumStart
_08081A52:
	mov r3, r8
	ldrb r0, [r3]
	subs r0, #1
	b _08081AFE
	.align 2, 0
_08081A5C: .4byte gPlaySt
_08081A60:
	mov r0, sl
	ldr r1, [r0]
	movs r0, #0x40
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08081B3A
	ldr r0, _08081A88 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08081A7E
	movs r0, #0x66
	bl m4aSongNumStart
_08081A7E:
	ldr r0, [r7, #0x54]
	bl GetUnitItemCount
	subs r0, #1
	b _08081B30
	.align 2, 0
_08081A88: .4byte gPlaySt
_08081A8C:
	ldr r0, _08081B08 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x80
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _08081B5C
	ldr r0, [r7, #0x54]
	bl GetUnitItemCount
	cmp r0, #1
	ble _08081B5C
	adds r6, r7, #0
	adds r6, #0x2f
	ldrb r0, [r6]
	lsls r1, r0, #2
	adds r0, r7, #0
	adds r0, #0x54
	adds r0, r0, r1
	ldr r0, [r0]
	bl GetUnitItemCount
	adds r4, r0, #0
	subs r4, #1
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldrb r1, [r6]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, #2
	adds r5, r7, #0
	adds r5, #0x2e
	ldrb r2, [r5]
	lsls r1, r2, #1
	adds r1, #9
	movs r2, #0xc
	bl sub_8041728
	ldrb r0, [r5]
	mov r8, r5
	adds r5, r6, #0
	cmp r0, r4
	bhs _08081B10
	cmp r0, #3
	bhi _08081B10
	ldr r0, _08081B0C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08081AF8
	movs r0, #0x66
	bl m4aSongNumStart
_08081AF8:
	mov r3, r8
	ldrb r0, [r3]
	adds r0, #1
_08081AFE:
	strb r0, [r3]
	adds r0, r7, #0
	bl sub_808165C
	b _08081B3A
	.align 2, 0
_08081B08: .4byte gKeySt
_08081B0C: .4byte gPlaySt
_08081B10:
	ldr r0, _08081B54 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x80
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08081B3A
	ldr r0, _08081B58 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08081B2E
	movs r0, #0x66
	bl m4aSongNumStart
_08081B2E:
	movs r0, #0
_08081B30:
	mov r1, r8
	strb r0, [r1]
	adds r0, r7, #0
	bl sub_808165C
_08081B3A:
	ldrb r2, [r5]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	mov r3, r8
	ldrb r3, [r3]
	lsls r1, r3, #1
	adds r1, #9
	movs r2, #0xc
	bl sub_804169C
	b _08081DB2
	.align 2, 0
_08081B54: .4byte gKeySt
_08081B58: .4byte gPlaySt
_08081B5C:
	ldr r0, _08081BA4 @ =gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r5, #1
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _08081BF0
	mov r1, sb
	ldrb r0, [r1]
	cmp r0, #0
	beq _08081B76
	b _08081DBA
_08081B76:
	ldr r0, [r7, #0x54]
	adds r4, r7, #0
	adds r4, #0x2e
	ldrb r2, [r4]
	lsls r1, r2, #1
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r0, [r0]
	bl GetItemAttributes
	movs r1, #0x10
	ands r1, r0
	cmp r1, #0
	beq _08081BAC
	ldrb r4, [r4]
	lsls r1, r4, #4
	adds r1, #0x48
	ldr r2, _08081BA8 @ =0x00000C33
	movs r0, #0x10
	adds r3, r7, #0
	bl sub_8082B00
	b _08081DB2
	.align 2, 0
_08081BA4: .4byte gKeySt
_08081BA8: .4byte 0x00000C33
_08081BAC:
	ldr r0, _08081BE8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08081BBC
	movs r0, #0x6a
	bl m4aSongNumStart
_08081BBC:
	ldr r0, _08081BEC @ =0x02015638
	movs r1, #1
	bl sub_808166C
	adds r1, r7, #0
	adds r1, #0x2f
	ldrb r3, [r1]
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #1
	adds r0, #2
	ldrb r4, [r4]
	lsls r1, r4, #1
	adds r1, #9
	movs r2, #0xc
	bl sub_8041728
	adds r0, r7, #0
	adds r0, #0x30
	strb r5, [r0]
	strb r5, [r6]
	b _08081DB2
	.align 2, 0
_08081BE8: .4byte gPlaySt
_08081BEC: .4byte 0x02015638
_08081BF0:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	bne _08081BFA
	b _08081DB2
_08081BFA:
	ldr r0, _08081C1C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08081C0A
	movs r0, #0x6b
	bl m4aSongNumStart
_08081C0A:
	adds r0, r7, #0
	movs r1, #1
	bl sub_80829E8
	adds r0, r7, #0
	movs r1, #1
	bl Proc_Goto
	b _08081DB2
	.align 2, 0
_08081C1C: .4byte gPlaySt
_08081C20:
	ldr r2, _08081C50 @ =gKeySt
	ldr r1, [r2]
	movs r0, #0x10
	ldrh r1, [r1, #6]
	ands r0, r1
	mov sl, r2
	cmp r0, #0
	beq _08081C58
	adds r5, r7, #0
	adds r5, #0x30
	ldrb r0, [r5]
	cmp r0, #0
	bne _08081C58
	ldr r0, _08081C54 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08081C4A
	movs r0, #0x66
	bl m4aSongNumStart
_08081C4A:
	strb r4, [r5]
	b _08081C84
	.align 2, 0
_08081C50: .4byte gKeySt
_08081C54: .4byte gPlaySt
_08081C58:
	mov r2, sl
	ldr r1, [r2]
	movs r0, #0x20
	ldrh r1, [r1, #6]
	ands r0, r1
	cmp r0, #0
	beq _08081C90
	adds r4, r7, #0
	adds r4, #0x30
	ldrb r3, [r4]
	cmp r3, #1
	bne _08081C90
	ldr r0, _08081C8C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08081C80
	movs r0, #0x66
	bl m4aSongNumStart
_08081C80:
	movs r0, #0
	strb r0, [r4]
_08081C84:
	movs r0, #0x29
	adds r0, r0, r7
	mov sb, r0
	b _08081DB2
	.align 2, 0
_08081C8C: .4byte gPlaySt
_08081C90:
	mov r2, sl
	ldr r1, [r2]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08081D60
	ldr r0, _08081CF8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08081CAE
	movs r0, #0x6a
	bl m4aSongNumStart
_08081CAE:
	adds r0, r7, #0
	adds r0, #0x30
	ldrb r0, [r0]
	mov r8, r0
	cmp r0, #0
	bne _08081D54
	ldr r0, [r7, #0x54]
	adds r5, r7, #0
	adds r5, #0x2e
	ldrb r1, [r5]
	bl UnitRemoveItem
	ldr r0, [r7, #0x54]
	bl UnitRemoveInvalidItems
	ldr r1, [r7, #0x54]
	movs r0, #0
	bl sub_807D6C0
	ldr r0, [r7, #0x54]
	bl GetUnitItemCount
	cmp r0, #0
	bne _08081CFC
	adds r0, r7, #0
	movs r1, #1
	bl sub_80829E8
	adds r0, r7, #0
	movs r1, #1
	bl Proc_Goto
	movs r3, #0x29
	adds r3, r3, r7
	mov sb, r3
	b _08081DB2
	.align 2, 0
_08081CF8: .4byte gPlaySt
_08081CFC:
	ldrb r4, [r5]
	ldr r0, [r7, #0x54]
	bl GetUnitItemCount
	cmp r4, r0
	blt _08081D3E
	adds r4, r7, #0
	adds r4, #0x2f
	ldrb r1, [r4]
	lsls r0, r1, #3
	subs r0, r0, r1
	lsls r0, r0, #1
	adds r0, #2
	ldrb r2, [r5]
	lsls r1, r2, #1
	adds r1, #9
	movs r2, #0xc
	bl sub_8041728
	ldrb r0, [r5]
	subs r0, #1
	strb r0, [r5]
	ldrb r3, [r4]
	lsls r0, r3, #3
	subs r0, r0, r3
	lsls r0, r0, #1
	adds r0, #2
	ldrb r5, [r5]
	lsls r1, r5, #1
	adds r1, #9
	movs r2, #0xc
	bl sub_804169C
_08081D3E:
	adds r0, r7, #0
	bl sub_808165C
	ldr r0, _08081D50 @ =0x02015638
	movs r1, #0
	bl sub_808166C
	mov r0, r8
	b _08081D5E
	.align 2, 0
_08081D50: .4byte 0x02015638
_08081D54:
	ldr r0, _08081DEC @ =0x02015638
	movs r1, #0
	bl sub_808166C
	movs r0, #0
_08081D5E:
	strb r0, [r6]
_08081D60:
	ldr r0, _08081DF0 @ =gKeySt
	ldr r1, [r0]
	movs r0, #2
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08081D8A
	ldr r0, _08081DF4 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08081D7E
	movs r0, #0x6b
	bl m4aSongNumStart
_08081D7E:
	ldr r0, _08081DEC @ =0x02015638
	movs r1, #0
	bl sub_808166C
	movs r0, #0
	strb r0, [r6]
_08081D8A:
	ldrb r0, [r6]
	movs r1, #0x29
	adds r1, r1, r7
	mov sb, r1
	cmp r0, #0
	bne _08081DB2
	adds r1, r7, #0
	adds r1, #0x2f
	ldrb r2, [r1]
	lsls r0, r2, #3
	subs r0, r0, r2
	lsls r0, r0, #1
	adds r0, #2
	subs r1, #1
	ldrb r1, [r1]
	lsls r1, r1, #1
	adds r1, #9
	movs r2, #0xc
	bl sub_804169C
_08081DB2:
	mov r3, sb
	ldrb r0, [r3]
	cmp r0, #0
	beq _08081DDC
_08081DBA:
	adds r0, r7, #0
	adds r0, #0x2e
	ldr r1, [sp]
	ldrb r2, [r0]
	cmp r1, r2
	beq _08081DDC
	ldrb r2, [r0]
	lsls r1, r2, #4
	adds r1, #0x48
	ldr r0, [r7, #0x54]
	lsls r2, r2, #1
	adds r0, #0x1c
	adds r0, r0, r2
	ldrh r2, [r0]
	movs r0, #0x10
	bl sub_80706FC
_08081DDC:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08081DEC: .4byte 0x02015638
_08081DF0: .4byte gKeySt
_08081DF4: .4byte gPlaySt

	thumb_func_start sub_8081DF8
sub_8081DF8: @ 0x08081DF8
	push {lr}
	movs r0, #0
	bl EndFaceById
	ldr r0, _08081E30 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _08081E34 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _08081E38 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	movs r0, #7
	bl EnableBgSync
	bl ResetTextFont
	bl ClearIcons
	bl InitBmBgLayers
	pop {r0}
	bx r0
	.align 2, 0
_08081E30: .4byte gBg0Tm
_08081E34: .4byte gBg1Tm
_08081E38: .4byte gBg2Tm

	thumb_func_start sub_8081E3C
sub_8081E3C: @ 0x08081E3C
	push {lr}
	adds r1, r0, #0
	ldr r0, _08081E4C @ =0x08679518
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
_08081E4C: .4byte 0x08679518

	thumb_func_start sub_8081E50
sub_8081E50: @ 0x08081E50
	adds r0, #0x52
	movs r1, #0
	strh r1, [r0]
	bx lr

	thumb_func_start sub_8081E58
sub_8081E58: @ 0x08081E58
	push {r4, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r0, #0x52
	ldrh r2, [r0]
	movs r0, #1
	movs r1, #4
	bl nullsub_6
	movs r1, #0x80
	lsls r1, r1, #5
	ldr r3, _08081EAC @ =0x086792B6
	movs r0, #0xe4
	lsls r0, r0, #2
	str r0, [sp]
	movs r0, #0xb
	movs r2, #0
	bl PutSpriteExt
	ldr r1, [r4, #0x14]
	adds r0, r1, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	cmp r0, #1
	bne _08081EB0
	adds r0, r1, #0
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #5
	adds r0, #0x9c
	movs r1, #0x40
	bl sub_80415CC
	ldr r0, [r4, #0x14]
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r1, r0, #4
	adds r1, #0x48
	movs r0, #0x10
	bl sub_804163C
	b _08081EC0
	.align 2, 0
_08081EAC: .4byte 0x086792B6
_08081EB0:
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r1, r0, #4
	adds r1, #0x48
	movs r0, #0x10
	bl sub_80415CC
_08081EC0:
	adds r1, r4, #0
	adds r1, #0x52
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	add sp, #4
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8081ED4
sub_8081ED4: @ 0x08081ED4
	push {lr}
	adds r1, r0, #0
	ldr r0, _08081EE4 @ =0x08679558
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
_08081EE4: .4byte 0x08679558

	thumb_func_start sub_8081EE8
sub_8081EE8: @ 0x08081EE8
	adds r3, r0, #0
	adds r0, #0x2a
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	movs r2, #0
	strh r1, [r3, #0x2e]
	strh r1, [r3, #0x32]
	adds r0, #8
	strb r2, [r0]
	ldrh r0, [r3, #0x2e]
	strh r0, [r3, #0x30]
	movs r0, #0xe4
	lsls r0, r0, #2
	strh r0, [r3, #0x36]
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r3, #0x38]
	adds r0, r3, #0
	adds r0, #0x3a
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_8081F20
sub_8081F20: @ 0x08081F20
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x30
	adds r6, r0, #0
	adds r0, #0x34
	ldrh r1, [r6, #0x32]
	ldrb r0, [r0]
	cmp r1, r0
	bhi _08081F3A
	b _080822EC
_08081F3A:
	movs r4, #0
	adds r0, r6, #0
	adds r0, #0x2c
	ldrb r2, [r0]
	lsrs r1, r2, #2
	str r0, [sp, #0x10]
	adds r3, r6, #0
	adds r3, #0x3a
	str r3, [sp, #0x18]
	adds r5, r6, #0
	adds r5, #0x3b
	str r5, [sp, #0x1c]
	cmp r4, r1
	bhs _08081F84
_08081F56:
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r1, [r0]
	adds r0, #1
	lsls r2, r4, #5
	ldrb r0, [r0]
	adds r2, r0, r2
	ldrh r7, [r6, #0x38]
	ldrh r3, [r6, #0x36]
	adds r0, r7, r3
	str r0, [sp]
	movs r0, #4
	ldr r3, _080821E4 @ =0x08679588
	bl PutSpriteExt
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r5, [sp, #0x10]
	ldrb r5, [r5]
	lsrs r0, r5, #2
	cmp r4, r0
	blo _08081F56
_08081F84:
	movs r7, #0
	lsls r1, r4, #2
	ldr r2, [sp, #0x10]
	ldrb r2, [r2]
	subs r0, r2, r1
	asrs r0, r0, #1
	adds r5, r1, #0
	cmp r7, r0
	bge _08081FCE
_08081F96:
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r1, [r0]
	adds r0, #1
	lsls r2, r7, #4
	ldrb r0, [r0]
	adds r2, r0, r2
	lsls r0, r4, #5
	adds r2, r2, r0
	mov r8, r2
	ldrh r3, [r6, #0x38]
	ldrh r2, [r6, #0x36]
	adds r0, r3, r2
	str r0, [sp]
	movs r0, #4
	mov r2, r8
	ldr r3, _080821E8 @ =0x08679580
	bl PutSpriteExt
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	ldr r3, [sp, #0x10]
	ldrb r3, [r3]
	subs r0, r3, r5
	asrs r0, r0, #1
	cmp r7, r0
	blt _08081F96
_08081FCE:
	movs r0, #0
	mov sb, r0
	lsls r1, r7, #1
	adds r0, r5, r1
	ldr r2, [sp, #0x10]
	ldrb r2, [r2]
	subs r0, r2, r0
	mov r8, r1
	adds r3, r4, r7
	mov sl, r3
	cmp sb, r0
	bge _0808202A
_08081FE6:
	adds r0, r6, #0
	adds r0, #0x2a
	ldrb r1, [r0]
	adds r0, #1
	mov r3, sb
	lsls r2, r3, #3
	ldrb r0, [r0]
	adds r2, r0, r2
	lsls r0, r7, #4
	adds r2, r2, r0
	lsls r0, r4, #5
	adds r2, r2, r0
	mov ip, r2
	ldrh r2, [r6, #0x38]
	ldrh r3, [r6, #0x36]
	adds r0, r2, r3
	str r0, [sp]
	movs r0, #4
	mov r2, ip
	ldr r3, _080821EC @ =0x08679578
	bl PutSpriteExt
	mov r0, sb
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sb, r0
	mov r1, r8
	adds r0, r5, r1
	ldr r2, [sp, #0x10]
	ldrb r2, [r2]
	subs r0, r2, r0
	cmp sb, r0
	blt _08081FE6
_0808202A:
	mov r0, sl
	add r0, sb
	cmp r0, #0
	bgt _08082034
	b _0808229A
_08082034:
	ldr r3, [sp, #0x10]
	ldrb r3, [r3]
	lsls r4, r3, #0x13
	ldrh r5, [r6, #0x2e]
	mov r8, r5
	ldrh r5, [r6, #0x32]
	adds r0, r6, #0
	adds r0, #0x34
	ldrb r7, [r0]
	str r0, [sp, #0x14]
	subs r0, #0xa
	str r0, [sp, #8]
	adds r1, r6, #0
	adds r1, #0x2b
	str r1, [sp, #0xc]
	cmp r5, r7
	bhi _08082058
	b _08082260
_08082058:
	adds r0, r4, #0
	adds r1, r5, #0
	bl __udivsi3
	mov sb, r0
	adds r0, r4, #0
	muls r0, r7, r0
	adds r1, r5, #0
	bl __udivsi3
	adds r7, r0, #0
	mov r2, r8
	cmp r2, #0
	beq _080820A2
	ldr r3, [sp, #8]
	ldrb r1, [r3]
	adds r1, #1
	movs r0, #0x80
	lsls r0, r0, #6
	orrs r1, r0
	ldr r4, [sp, #0xc]
	ldrb r2, [r4]
	subs r2, #8
	ldr r3, _080821F0 @ =0x08679654
	ldr r5, [sp, #0x18]
	ldrb r5, [r5]
	lsrs r0, r5, #3
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	ldrh r4, [r6, #0x38]
	ldrh r5, [r6, #0x36]
	adds r0, r4, r5
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
_080820A2:
	movs r4, #0
	lsrs r0, r7, #0x15
	str r0, [sp, #0x2c]
	mov r2, r8
	mov r1, sb
	muls r1, r2, r1
	str r1, [sp, #0x24]
	lsrs r7, r7, #0x10
	mov sl, r7
	cmp r4, r0
	bhs _080820E4
_080820B8:
	ldr r3, [sp, #8]
	ldrb r1, [r3]
	ldr r5, [sp, #0x24]
	lsrs r2, r5, #0x14
	ldr r7, [sp, #0xc]
	ldrb r7, [r7]
	adds r2, r7, r2
	lsls r0, r4, #5
	adds r2, r2, r0
	ldr r0, _080821F4 @ =0x086795F8
	ldr r3, [r0, #0x28]
	ldrh r5, [r6, #0x38]
	ldrh r7, [r6, #0x36]
	adds r0, r5, r7
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
	adds r4, #1
	ldr r0, [sp, #0x2c]
	cmp r4, r0
	blo _080820B8
_080820E4:
	movs r7, #0
	lsls r5, r4, #5
	mov r1, sl
	subs r0, r1, r5
	lsrs r0, r0, #4
	str r5, [sp, #0x20]
	cmp r7, r0
	bhs _08082132
_080820F4:
	ldr r2, [sp, #8]
	ldrb r1, [r2]
	ldr r3, [sp, #0x24]
	lsrs r2, r3, #0x14
	ldr r4, [sp, #0xc]
	ldrb r4, [r4]
	adds r2, r4, r2
	mov r8, r5
	adds r2, r2, r5
	lsls r0, r7, #4
	adds r2, r2, r0
	ldr r0, _080821F4 @ =0x086795F8
	ldr r0, [r0, #0x24]
	mov sb, r0
	ldrh r3, [r6, #0x38]
	ldrh r4, [r6, #0x36]
	adds r0, r3, r4
	str r0, [sp]
	movs r0, #4
	mov r3, sb
	bl PutSpriteExt
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	mov r0, sl
	mov r1, r8
	subs r4, r0, r1
	lsrs r4, r4, #4
	cmp r7, r4
	blo _080820F4
_08082132:
	movs r2, #0
	mov sb, r2
	ldr r3, [sp, #0x20]
	mov r8, r3
	mov r4, sl
	subs r0, r4, r3
	lsls r7, r7, #4
	subs r0, r0, r7
	lsrs r0, r0, #3
	str r7, [sp, #4]
	cmp sb, r0
	bhs _08082194
_0808214A:
	ldr r5, [sp, #8]
	ldrb r1, [r5]
	ldr r0, [sp, #0x24]
	lsrs r2, r0, #0x14
	ldr r3, [sp, #0xc]
	ldrb r3, [r3]
	adds r2, r3, r2
	mov r4, r8
	str r4, [sp, #0x28]
	add r2, r8
	str r7, [sp, #0x2c]
	adds r2, r2, r7
	mov r5, sb
	lsls r0, r5, #3
	adds r2, r2, r0
	ldr r0, _080821F4 @ =0x086795F8
	ldr r3, [r0, #0x20]
	ldrh r4, [r6, #0x38]
	ldrh r5, [r6, #0x36]
	adds r0, r4, r5
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
	mov r0, sb
	adds r0, #1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sb, r0
	mov r0, sl
	ldr r1, [sp, #0x28]
	subs r4, r0, r1
	ldr r2, [sp, #0x2c]
	subs r4, r4, r2
	lsrs r4, r4, #3
	cmp sb, r4
	blo _0808214A
_08082194:
	ldrh r3, [r6, #0x2e]
	lsrs r0, r3, #4
	ldr r4, [sp, #0x14]
	ldrb r4, [r4]
	adds r0, r4, r0
	ldrh r5, [r6, #0x32]
	cmp r0, r5
	bne _080821F8
	ldr r7, [sp, #8]
	ldrb r1, [r7]
	ldr r0, [sp, #0x24]
	lsrs r4, r0, #0x14
	ldr r3, [sp, #0xc]
	ldrb r3, [r3]
	adds r2, r3, r4
	ldr r5, [sp, #0x20]
	ldr r7, [sp, #4]
	adds r3, r5, r7
	mov r5, sb
	lsls r0, r5, #3
	adds r3, r3, r0
	adds r2, r2, r3
	ldr r7, _080821F4 @ =0x086795F8
	mov r8, r7
	ldr r5, [sp, #0x10]
	ldrb r5, [r5]
	lsls r0, r5, #3
	adds r4, r4, r3
	subs r0, r0, r4
	lsls r0, r0, #2
	add r0, r8
	ldr r3, [r0]
	ldrh r7, [r6, #0x38]
	ldrh r4, [r6, #0x36]
	adds r0, r7, r4
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
	b _08082260
	.align 2, 0
_080821E4: .4byte 0x08679588
_080821E8: .4byte 0x08679580
_080821EC: .4byte 0x08679578
_080821F0: .4byte 0x08679654
_080821F4: .4byte 0x086795F8
_080821F8:
	ldr r5, [sp, #8]
	ldrb r1, [r5]
	ldr r7, [sp, #0x24]
	lsrs r2, r7, #0x14
	ldr r0, [sp, #0xc]
	ldrb r0, [r0]
	adds r2, r0, r2
	ldr r3, [sp, #0x20]
	ldr r4, [sp, #4]
	adds r0, r3, r4
	mov r5, sb
	lsls r3, r5, #3
	adds r0, r0, r3
	adds r2, r2, r0
	ldr r3, _080822FC @ =0x086795F8
	movs r0, #7
	mov r7, sl
	ands r7, r0
	lsls r0, r7, #2
	adds r0, r0, r3
	ldr r3, [r0]
	ldrh r4, [r6, #0x38]
	ldrh r5, [r6, #0x36]
	adds r0, r4, r5
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
	ldr r7, [sp, #8]
	ldrb r1, [r7]
	adds r1, #1
	ldr r0, [sp, #0x10]
	ldrb r0, [r0]
	lsls r2, r0, #3
	ldr r3, [sp, #0xc]
	ldrb r3, [r3]
	adds r2, r3, r2
	adds r2, #1
	ldr r3, _08082300 @ =0x08679654
	ldr r4, [sp, #0x1c]
	ldrb r4, [r4]
	lsrs r0, r4, #3
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r3, [r0]
	ldrh r5, [r6, #0x38]
	ldrh r7, [r6, #0x36]
	adds r0, r5, r7
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
_08082260:
	ldr r0, [sp, #8]
	ldrb r1, [r0]
	ldr r3, [sp, #0xc]
	ldrb r2, [r3]
	subs r2, #8
	ldr r3, _08082304 @ =0x08679590
	ldrh r4, [r6, #0x38]
	ldrh r5, [r6, #0x36]
	adds r0, r4, r5
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
	ldr r7, [sp, #8]
	ldrb r1, [r7]
	ldr r0, [sp, #0x10]
	ldrb r0, [r0]
	lsls r2, r0, #3
	ldr r3, [sp, #0xc]
	ldrb r3, [r3]
	adds r2, r3, r2
	ldr r3, _08082308 @ =0x08679598
	ldrh r4, [r6, #0x38]
	ldrh r5, [r6, #0x36]
	adds r0, r4, r5
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
_0808229A:
	ldrh r1, [r6, #0x30]
	ldrh r0, [r6, #0x2e]
	cmp r1, r0
	beq _080822C2
	cmp r1, r0
	bls _080822AE
	ldr r7, [sp, #0x18]
	ldrb r0, [r7]
	adds r0, #1
	strb r0, [r7]
_080822AE:
	ldrh r0, [r6, #0x30]
	ldrh r1, [r6, #0x2e]
	cmp r0, r1
	bhs _080822BE
	ldr r2, [sp, #0x1c]
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
_080822BE:
	ldrh r0, [r6, #0x2e]
	strh r0, [r6, #0x30]
_080822C2:
	ldr r3, [sp, #0x18]
	ldrb r0, [r3]
	adds r0, #1
	movs r1, #0
	strb r0, [r3]
	ldr r4, [sp, #0x1c]
	ldrb r0, [r4]
	adds r0, #1
	strb r0, [r4]
	ldrb r5, [r3]
	lsrs r0, r5, #3
	cmp r0, #5
	bls _080822DE
	strb r1, [r3]
_080822DE:
	ldr r7, [sp, #0x1c]
	ldrb r7, [r7]
	lsrs r0, r7, #3
	cmp r0, #5
	bls _080822EC
	ldr r0, [sp, #0x1c]
	strb r1, [r0]
_080822EC:
	add sp, #0x30
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080822FC: .4byte 0x086795F8
_08082300: .4byte 0x08679654
_08082304: .4byte 0x08679590
_08082308: .4byte 0x08679598

	thumb_func_start sub_808230C
sub_808230C: @ 0x0808230C
	push {lr}
	adds r1, r0, #0
	ldr r0, _0808231C @ =0x0867966C
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
_0808231C: .4byte 0x0867966C

	thumb_func_start sub_8082320
sub_8082320: @ 0x08082320
	push {r4, r5, r6, lr}
	mov ip, r0
	ldr r4, [sp, #0x10]
	ldr r5, [sp, #0x14]
	ldr r6, [sp, #0x18]
	adds r0, #0x2a
	strb r1, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r0, #1
	strb r3, [r0]
	mov r0, ip
	strh r4, [r0, #0x2e]
	strh r5, [r0, #0x32]
	adds r0, #0x34
	strb r6, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8082348
sub_8082348: @ 0x08082348
	adds r3, r0, #0
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	cmp r1, #0
	bge _08082354
	adds r1, #0x1f
_08082354:
	asrs r0, r1, #5
	strh r0, [r3, #0x36]
	lsls r0, r2, #0xc
	strh r0, [r3, #0x38]
	bx lr
	.align 2, 0

	thumb_func_start sub_8082360
sub_8082360: @ 0x08082360
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	mov r8, r1
	adds r5, r2, #0
	adds r6, r3, #0
	ldr r7, [sp, #0x18]
	bl ClearText
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_SetColor
	adds r0, r4, #0
	adds r1, r6, #0
	bl Text_SetCursor
	adds r0, r4, #0
	adds r1, r7, #0
	bl Text_DrawString
	adds r0, r4, #0
	mov r1, r8
	bl PutText
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80823A0
sub_80823A0: @ 0x080823A0
	push {r4, lr}
	adds r3, r0, #0
	ldr r4, _080823B4 @ =0x0201636A
	ldrh r0, [r4]
	adds r2, r0, #0
	cmp r2, #0
	bne _080823B8
	strb r2, [r3]
	strh r2, [r1]
	b _080823EC
	.align 2, 0
_080823B4: .4byte 0x0201636A
_080823B8:
	cmp r2, #7
	bhi _080823CA
	ldrb r4, [r3]
	cmp r4, r2
	blo _080823C6
	subs r0, #1
	strb r0, [r3]
_080823C6:
	movs r0, #0
	b _080823EA
_080823CA:
	ldrh r2, [r1]
	lsrs r0, r2, #4
	adds r2, r0, #7
	ldrh r0, [r4]
	cmp r2, r0
	bge _080823E2
	ldrb r4, [r3]
	cmp r4, #6
	bne _080823EC
	movs r0, #5
	strb r0, [r3]
	b _080823EC
_080823E2:
	cmp r2, r0
	ble _080823EC
	subs r0, #7
	lsls r0, r0, #4
_080823EA:
	strh r0, [r1]
_080823EC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80823F4
sub_80823F4: @ 0x080823F4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r0, #0
	ldr r4, _0808248C @ =gBg3Tm
	adds r0, r4, #0
	movs r1, #0
	bl TmFill
	ldr r0, _08082490 @ =0x08320436
	mov sb, r0
	movs r0, #0
	movs r1, #0x2c
	adds r1, r1, r7
	mov sl, r1
	mov ip, r4
	movs r3, #0x27
	mov r8, r3
	movs r1, #0xa0
	lsls r1, r1, #8
	adds r4, r1, #0
_08082422:
	movs r2, #0
	adds r6, r0, #1
	lsls r5, r0, #6
	mov r3, r8
	subs r1, r3, r0
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #2
	mov r1, sb
	adds r3, r0, r1
_08082436:
	lsls r0, r2, #1
	adds r1, r5, r0
	add r1, ip
	adds r0, r0, r3
	ldrh r0, [r0]
	adds r0, r4, r0
	strh r0, [r1]
	adds r0, r2, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0x1d
	bls _08082436
	lsls r0, r6, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x1f
	bls _08082422
	movs r0, #8
	bl EnableBgSync
	movs r6, #0
	movs r5, #0
	strh r5, [r7, #0x2a]
	movs r4, #0xff
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _08082494 @ =0x0400001E
	ldrh r3, [r7, #0x2a]
	ands r4, r3
	strh r4, [r0]
	mov r0, sl
	strb r6, [r0]
	strh r5, [r7, #0x2a]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808248C: .4byte gBg3Tm
_08082490: .4byte 0x08320436
_08082494: .4byte 0x0400001E

	thumb_func_start sub_8082498
sub_8082498: @ 0x08082498
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r6, r5, #0
	adds r6, #0x2c
	ldrb r0, [r6]
	cmp r0, #3
	bne _080824D6
	ldrh r0, [r5, #0x2a]
	adds r0, #1
	strh r0, [r5, #0x2a]
	lsls r0, r0, #0x10
	movs r1, #0xa0
	lsls r1, r1, #0x13
	cmp r0, r1
	bne _080824BA
	movs r0, #0
	strh r0, [r5, #0x2a]
_080824BA:
	movs r4, #0xff
	adds r2, r4, #0
	ldrh r1, [r5, #0x2a]
	ands r2, r1
	movs r0, #3
	movs r1, #0
	bl SetBgOffset
	ldr r0, _0808254C @ =0x0400001E
	ldrh r1, [r5, #0x2a]
	ands r4, r1
	strh r4, [r0]
	movs r0, #0
	strb r0, [r6]
_080824D6:
	adds r1, r5, #0
	adds r1, #0x2c
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrh r1, [r5, #0x2a]
	movs r0, #7
	ands r0, r1
	cmp r0, #0
	bne _08082544
	ldr r5, _08082550 @ =0x08320436
	lsrs r0, r1, #3
	subs r4, r0, #1
	movs r1, #0x1f
	ands r4, r1
	adds r0, #0x1e
	movs r1, #0x28
	bl __modsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r2, #0
	ldr r1, _08082554 @ =gBg3Tm
	mov ip, r1
	lsls r4, r4, #6
	mov r7, ip
	movs r1, #0x27
	subs r1, r1, r0
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #2
	adds r3, r0, r5
	movs r0, #0xa0
	lsls r0, r0, #8
	adds r6, r0, #0
	adds r5, r4, #0
_0808251E:
	lsls r0, r2, #1
	adds r1, r4, r0
	adds r1, r1, r7
	adds r0, r0, r3
	ldrh r0, [r0]
	adds r0, r6, r0
	strh r0, [r1]
	adds r0, r2, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0x1d
	bls _0808251E
	mov r1, ip
	adds r0, r5, r1
	ldr r1, _08082558 @ =0x06007800
	adds r1, r5, r1
	movs r2, #0xf
	bl CpuFastSet
_08082544:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808254C: .4byte 0x0400001E
_08082550: .4byte 0x08320436
_08082554: .4byte gBg3Tm
_08082558: .4byte 0x06007800

	thumb_func_start nullsub_41
nullsub_41: @ 0x0808255C
	bx lr
	.align 2, 0

	thumb_func_start sub_8082560
sub_8082560: @ 0x08082560
	push {lr}
	ldr r0, _08082570 @ =0x0867968C
	movs r1, #0
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
_08082570: .4byte 0x0867968C

	thumb_func_start sub_8082574
sub_8082574: @ 0x08082574
	ldr r0, _0808258C @ =0x04000006
	ldrh r0, [r0]
	adds r3, r0, #0
	cmp r3, #0xa0
	bne _08082594
	movs r3, #0
	ldr r0, _08082590 @ =0x0201686C
	ldr r2, [r0]
	ldr r1, [r0, #4]
	str r1, [r0]
	str r2, [r0, #4]
	b _0808259C
	.align 2, 0
_0808258C: .4byte 0x04000006
_08082590: .4byte 0x0201686C
_08082594:
	ldr r0, _080825B0 @ =0x0201686C
	cmp r3, #0xa0
	bls _0808259C
	movs r3, #0
_0808259C:
	ldr r2, _080825B4 @ =0x04000042
	ldr r0, [r0]
	lsls r1, r3, #2
	adds r1, r1, r0
	ldrb r3, [r1]
	lsls r0, r3, #8
	ldrb r1, [r1, #1]
	orrs r0, r1
	strh r0, [r2]
	bx lr
	.align 2, 0
_080825B0: .4byte 0x0201686C
_080825B4: .4byte 0x04000042

	thumb_func_start sub_80825B8
sub_80825B8: @ 0x080825B8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r4, r0, #0
	ldr r2, _08082634 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	adds r0, r4, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	mov ip, r2
	cmp r0, #0
	bge _08082644
	movs r0, #0x96
	str r0, [r4, #0x2c]
	movs r3, #0
	ldr r0, _08082638 @ =0x0201636C
	mov sb, r0
	adds r4, #0x29
	mov r8, r4
	ldr r1, _0808263C @ =0x0201686C
	mov sl, r1
	mov r7, sb
	movs r4, #0
	movs r2, #0xf0
	movs r6, #0xa0
	lsls r6, r6, #2
	ldr r5, _08082640 @ =0x00000281
_08082606:
	lsls r0, r3, #2
	adds r0, r0, r7
	strb r4, [r0]
	strb r2, [r0, #1]
	adds r1, r0, r6
	strb r4, [r1]
	adds r0, r0, r5
	strb r2, [r0]
	adds r0, r3, #1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0x9f
	bls _08082606
	mov r1, ip
	adds r1, #0x2f
	movs r0, #0
	strb r0, [r1]
	adds r1, #4
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	b _0808268C
	.align 2, 0
_08082634: .4byte gDispIo
_08082638: .4byte 0x0201636C
_0808263C: .4byte 0x0201686C
_08082640: .4byte 0x00000281
_08082644:
	movs r0, #0
	str r0, [r4, #0x2c]
	movs r3, #0
	ldr r0, _080826F8 @ =0x0201636C
	mov sb, r0
	adds r4, #0x29
	mov r8, r4
	ldr r1, _080826FC @ =0x0201686C
	mov sl, r1
	mov r6, sb
	movs r2, #0x78
	movs r5, #0xa0
	lsls r5, r5, #2
	ldr r4, _08082700 @ =0x00000281
_08082660:
	lsls r0, r3, #2
	adds r0, r0, r6
	strb r2, [r0]
	strb r2, [r0, #1]
	adds r1, r0, r5
	strb r2, [r1]
	adds r0, r0, r4
	strb r2, [r0]
	adds r0, r3, #1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0x9f
	bls _08082660
	mov r2, ip
	adds r2, #0x2f
	movs r1, #0
	movs r0, #0x78
	strb r0, [r2]
	adds r2, #4
	strb r1, [r2]
	mov r1, ip
	adds r1, #0x2e
_0808268C:
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	mov r2, ip
	adds r2, #0x35
	movs r0, #1
	ldrb r1, [r2]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2]
	adds r2, #1
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2]
	movs r0, #0
	mov r1, r8
	strb r0, [r1]
	mov r0, sb
	mov r1, sl
	str r0, [r1]
	movs r0, #0xa0
	lsls r0, r0, #2
	add r0, sb
	str r0, [r1, #4]
	ldr r0, _08082704 @ =sub_8082574
	bl SetOnHBlankA
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080826F8: .4byte 0x0201636C
_080826FC: .4byte 0x0201686C
_08082700: .4byte 0x00000281
_08082704: .4byte sub_8082574

	thumb_func_start sub_8082708
sub_8082708: @ 0x08082708
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r6, r0, #0
	adds r0, #0x2a
	movs r1, #0
	ldrsb r1, [r0, r1]
	ldr r0, [r6, #0x2c]
	adds r0, r0, r1
	str r0, [r6, #0x2c]
	cmp r0, #0x96
	ble _08082726
	movs r0, #0x96
	str r0, [r6, #0x2c]
_08082726:
	ldr r0, [r6, #0x2c]
	cmp r0, #0
	bge _08082730
	movs r0, #0
	str r0, [r6, #0x2c]
_08082730:
	movs r1, #0
	movs r0, #0x29
	adds r0, r0, r6
	mov sb, r0
	ldr r7, _08082770 @ =0x0201686C
	movs r2, #0x78
	mov r8, r2
_0808273E:
	ldr r0, [r6, #0x2c]
	lsls r5, r1, #0x10
	cmp r0, #0
	ble _0808275E
	adds r4, r0, #0
	muls r4, r0, r4
	adds r0, r4, #0
	asrs r4, r5, #0x10
	adds r1, r4, #0
	subs r1, #0x50
	adds r2, r1, #0
	muls r2, r1, r2
	adds r1, r2, #0
	subs r0, r0, r1
	cmp r0, #0
	bge _08082774
_0808275E:
	ldr r0, [r7, #4]
	asrs r1, r5, #0xe
	adds r0, r1, r0
	mov r4, r8
	strb r4, [r0]
	ldr r0, [r7, #4]
	adds r1, r1, r0
	strb r4, [r1, #1]
	b _0808279A
	.align 2, 0
_08082770: .4byte 0x0201686C
_08082774:
	bl Sqrt
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x78
	ble _08082784
	movs r3, #0x78
_08082784:
	ldr r1, [r7, #4]
	lsls r2, r4, #2
	adds r1, r2, r1
	mov r4, r8
	subs r0, r4, r3
	strb r0, [r1]
	ldr r0, [r7, #4]
	adds r2, r2, r0
	adds r0, r3, #0
	adds r0, #0x78
	strb r0, [r2, #1]
_0808279A:
	movs r1, #0x80
	lsls r1, r1, #9
	adds r0, r5, r1
	lsrs r1, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x9f
	ble _0808273E
	mov r2, sb
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x28
	bne _080827BE
	adds r0, r6, #0
	bl Proc_Break
_080827BE:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80827CC
sub_80827CC: @ 0x080827CC
	push {lr}
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0

	thumb_func_start sub_80827D8
sub_80827D8: @ 0x080827D8
	push {r4, lr}
	adds r2, r0, #0
	lsls r4, r1, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080827F4 @ =0x086796C4
	adds r1, r2, #0
	bl SpawnProcLocking
	adds r1, r0, #0
	adds r1, #0x2a
	strb r4, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080827F4: .4byte 0x086796C4

	thumb_func_start sub_80827F8
sub_80827F8: @ 0x080827F8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r1, r0, #0
	adds r1, #0x29
	movs r7, #0
	strb r7, [r1]
	ldr r1, _08082890 @ =gDispIo
	mov ip, r1
	movs r3, #1
	ldrb r1, [r1, #1]
	orrs r1, r3
	movs r2, #2
	mov r8, r2
	mov r2, r8
	orrs r1, r2
	movs r6, #4
	orrs r1, r6
	movs r5, #8
	orrs r1, r5
	movs r4, #0x10
	orrs r1, r4
	movs r2, #0x21
	rsbs r2, r2, #0
	ands r1, r2
	movs r2, #0x40
	orrs r1, r2
	movs r2, #0x7f
	ands r1, r2
	mov r2, ip
	strb r1, [r2, #1]
	mov r1, ip
	adds r1, #0x35
	ldrb r2, [r1]
	orrs r3, r2
	mov r2, r8
	orrs r3, r2
	orrs r3, r6
	orrs r3, r5
	orrs r3, r4
	strb r3, [r1]
	mov r3, ip
	adds r3, #0x36
	movs r1, #2
	rsbs r1, r1, #0
	ldrb r2, [r3]
	ands r1, r2
	movs r2, #3
	rsbs r2, r2, #0
	ands r1, r2
	subs r2, #2
	ands r1, r2
	subs r2, #4
	ands r1, r2
	subs r2, #8
	ands r1, r2
	strb r1, [r3]
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble _08082894
	mov r0, ip
	adds r0, #0x2f
	strb r7, [r0]
	adds r0, #4
	strb r7, [r0]
	mov r1, ip
	adds r1, #0x2e
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	b _080828AE
	.align 2, 0
_08082890: .4byte gDispIo
_08082894:
	mov r1, ip
	adds r1, #0x2f
	movs r0, #0x78
	strb r0, [r1]
	mov r2, ip
	adds r2, #0x33
	movs r1, #0x50
	strb r1, [r2]
	subs r2, #5
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x32
	strb r1, [r0]
_080828AE:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80828B8
sub_80828B8: @ 0x080828B8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r0, #0
	adds r2, r7, #0
	adds r2, #0x29
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	ldr r5, _0808293C @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r5, #1]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r5, #1]
	ldrb r1, [r2]
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r4, r0, #8
	lsls r0, r0, #7
	muls r0, r1, r0
	movs r1, #0xf
	bl __divsi3
	subs r4, r4, r0
	adds r0, r4, #0
	movs r1, #0xf
	bl __divsi3
	asrs r6, r0, #4
	adds r0, r7, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r4, r5, #0
	cmp r0, #0
	ble _08082940
	lsls r1, r6, #1
	adds r2, r1, r6
	adds r0, r4, #0
	adds r0, #0x2f
	strb r2, [r0]
	adds r0, #4
	strb r1, [r0]
	movs r3, #0x10
	rsbs r3, r3, #0
	adds r0, r3, #0
	subs r0, r0, r2
	adds r2, r4, #0
	adds r2, #0x2e
	strb r0, [r2]
	movs r2, #0x60
	rsbs r2, r2, #0
	adds r0, r2, #0
	subs r0, r0, r1
	adds r1, r4, #0
	adds r1, #0x32
	strb r0, [r1]
	b _08082964
	.align 2, 0
_0808293C: .4byte gDispIo
_08082940:
	lsls r2, r6, #1
	adds r1, r2, r6
	movs r0, #0x78
	subs r0, r0, r1
	adds r3, r4, #0
	adds r3, #0x2f
	strb r0, [r3]
	movs r0, #0x50
	subs r0, r0, r2
	adds r3, #4
	strb r0, [r3]
	adds r1, #0x78
	adds r0, r4, #0
	adds r0, #0x2e
	strb r1, [r0]
	adds r2, #0x50
	adds r0, #4
	strb r2, [r0]
_08082964:
	adds r2, r4, #0
	adds r2, #0x35
	movs r0, #1
	ldrb r3, [r2]
	orrs r0, r3
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2]
	adds r1, r4, #0
	adds r1, #0x36
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r2, [r1]
	ands r0, r2
	movs r3, #3
	rsbs r3, r3, #0
	mov sl, r3
	ands r0, r3
	movs r2, #5
	rsbs r2, r2, #0
	mov sb, r2
	ands r0, r2
	subs r3, #6
	mov r8, r3
	ands r0, r3
	movs r5, #0x11
	rsbs r5, r5, #0
	ands r0, r5
	strb r0, [r1]
	cmp r6, #0x27
	ble _080829DA
	adds r0, r7, #0
	bl Proc_Break
	adds r0, r7, #0
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble _080829DA
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r4, #1]
	ands r0, r1
	mov r2, sl
	ands r0, r2
	mov r3, sb
	ands r0, r3
	mov r1, r8
	ands r0, r1
	ands r0, r5
	strb r0, [r4, #1]
_080829DA:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80829E8
sub_80829E8: @ 0x080829E8
	push {r4, lr}
	adds r2, r0, #0
	lsls r4, r1, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _08082A04 @ =0x086796F4
	adds r1, r2, #0
	bl SpawnProcLocking
	adds r1, r0, #0
	adds r1, #0x2a
	strb r4, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08082A04: .4byte 0x086796F4

	thumb_func_start sub_8082A08
sub_8082A08: @ 0x08082A08
	push {r4, lr}
	movs r4, #0
	bl GetSupplyItems
	adds r2, r0, #0
	movs r1, #0
	ldrh r0, [r2]
	cmp r0, #0
	beq _08082A38
	movs r4, #1
_08082A1C:
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0x63
	bhi _08082A38
	lsls r0, r1, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	cmp r0, #0
	beq _08082A38
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	b _08082A1C
_08082A38:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_8082A40
sub_8082A40: @ 0x08082A40
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	ldrh r1, [r4, #0x2c]
	cmp r0, r1
	bne _08082A6C
	ldr r2, _08082A78 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	adds r0, r4, #0
	bl Proc_Break
_08082A6C:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08082A78: .4byte gDispIo

	thumb_func_start sub_8082A7C
sub_8082A7C: @ 0x08082A7C
	push {r4, lr}
	adds r4, r0, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	ldr r0, _08082AB4 @ =0x0867971C
	bl SpawnProc
	movs r1, #0
	strh r1, [r0, #0x2c]
	strh r4, [r0, #0x2a]
	ldr r2, _08082AB8 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08082AB4: .4byte 0x0867971C
_08082AB8: .4byte gDispIo

	thumb_func_start sub_8082ABC
sub_8082ABC: @ 0x08082ABC
	adds r0, #0x28
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_8082AC8
sub_8082AC8: @ 0x08082AC8
	adds r1, r0, #0
	adds r1, #0x28
	ldrb r0, [r1]
	cmp r0, #0
	beq _08082AD6
	subs r0, #1
	strb r0, [r1]
_08082AD6:
	bx lr

	thumb_func_start sub_8082AD8
sub_8082AD8: @ 0x08082AD8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08082AFC @ =gKeySt
	ldr r1, [r0]
	movs r0, #0xf3
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08082AF4
	bl sub_807089C
	adds r0, r4, #0
	bl Proc_Break
_08082AF4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08082AFC: .4byte gKeySt

	thumb_func_start sub_8082B00
sub_8082B00: @ 0x08082B00
	push {r4, lr}
	adds r4, r3, #0
	bl sub_80706C8
	ldr r0, _08082B18 @ =0x0867973C
	adds r1, r4, #0
	bl SpawnProcLocking
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08082B18: .4byte 0x0867973C

	thumb_func_start sub_8082B1C
sub_8082B1C: @ 0x08082B1C
	push {r4, lr}
	adds r4, r1, #0
	bl CanUnitUseWeapon
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08082B3C
	adds r0, r4, #0
	bl GetItemAttributes
	movs r1, #0x80
	ands r1, r0
	cmp r1, #0
	bne _08082B3C
	movs r0, #1
	b _08082B3E
_08082B3C:
	movs r0, #0
_08082B3E:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_8082B44
sub_8082B44: @ 0x08082B44
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r6, #0
	movs r4, #0
_08082B4C:
	lsls r1, r4, #1
	adds r0, r5, #0
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r5, #0
	bl sub_8082B1C
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	bne _08082B66
	adds r6, #1
_08082B66:
	adds r4, #1
	cmp r4, #4
	ble _08082B4C
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_8082B74
sub_8082B74: @ 0x08082B74
	push {r4, lr}
	adds r4, r0, #0
	bl ArenaIsUnitAllowed
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08082B90
	adds r0, r4, #0
	bl sub_8082B44
	cmp r0, #0
	beq _08082B90
	movs r0, #1
	b _08082B92
_08082B90:
	movs r0, #0
_08082B92:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_8082B98
sub_8082B98: @ 0x08082B98
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r7, r1, #0
	adds r5, r2, #0
	adds r6, r3, #0
	cmp r4, r5
	beq _08082C2A
	movs r0, #8
	ldrh r1, [r4, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _08082BE6
	lsls r1, r7, #1
	adds r0, r4, #0
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r4, #0
	bl sub_8082B1C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08082BE6
	adds r0, r4, #0
	bl sub_8082B44
	cmp r0, #1
	bgt _08082BE6
	lsls r1, r6, #1
	adds r0, r5, #0
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r4, #0
	bl sub_8082B1C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08082C26
_08082BE6:
	movs r0, #8
	ldrh r1, [r5, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _08082C2A
	lsls r1, r6, #1
	adds r0, r5, #0
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r5, #0
	bl sub_8082B1C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08082C2A
	adds r0, r5, #0
	bl sub_8082B44
	cmp r0, #1
	bgt _08082C2A
	lsls r1, r7, #1
	adds r0, r4, #0
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r5, #0
	bl sub_8082B1C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08082C2A
_08082C26:
	movs r0, #0
	b _08082C2C
_08082C2A:
	movs r0, #1
_08082C2C:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8082C34
sub_8082C34: @ 0x08082C34
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r2, #0
	movs r0, #8
	ldrh r2, [r4, #0xc]
	ands r0, r2
	cmp r0, #0
	bne _08082C76
	lsls r1, r1, #1
	adds r0, r4, #0
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r4, #0
	bl sub_8082B1C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08082C76
	adds r0, r4, #0
	bl sub_8082B44
	cmp r0, #1
	bne _08082C76
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_8082B1C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08082C76
	movs r0, #0
	b _08082C78
_08082C76:
	movs r0, #1
_08082C78:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8082C80
sub_8082C80: @ 0x08082C80
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #8
	ldrh r2, [r4, #0xc]
	ands r0, r2
	cmp r0, #0
	bne _08082CB2
	lsls r1, r1, #1
	adds r0, r4, #0
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r1, [r0]
	adds r0, r4, #0
	bl sub_8082B1C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08082CB2
	adds r0, r4, #0
	bl sub_8082B44
	cmp r0, #1
	bne _08082CB2
	movs r0, #0
	b _08082CB4
_08082CB2:
	movs r0, #1
_08082CB4:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8082CBC
sub_8082CBC: @ 0x08082CBC
	push {r4, r5, lr}
	movs r1, #0
	ldr r4, _08082CE8 @ =gPlaySt
	ldr r3, _08082CEC @ =0x08321F24
	ldr r2, _08082CF0 @ =0x02016874
_08082CC6:
	ldrb r5, [r4, #0x1d]
	lsls r0, r5, #0x1c
	lsrs r0, r0, #0x1e
	lsls r0, r0, #4
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	strh r0, [r2]
	adds r2, #2
	adds r1, #1
	cmp r1, #0xf
	ble _08082CC6
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08082CE8: .4byte gPlaySt
_08082CEC: .4byte 0x08321F24
_08082CF0: .4byte 0x02016874

	thumb_func_start sub_8082CF4
sub_8082CF4: @ 0x08082CF4
	push {lr}
	adds r1, r0, #0
	ldr r0, _08082D04 @ =0x08679774
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
_08082D04: .4byte 0x08679774

	thumb_func_start sub_8082D08
sub_8082D08: @ 0x08082D08
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	lsls r4, r2, #0x10
	lsrs r4, r4, #0x10
	ldr r1, _08082D4C @ =0x06016000
	str r1, [r6, #0x2c]
	movs r5, #0xf
	ands r4, r5
	adds r4, #0x10
	adds r0, #0x30
	adds r2, r4, #0
	bl InitSpriteTextFont
	ldr r0, _08082D50 @ =Pal_TalkText
	lsls r1, r4, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	adds r0, r6, #0
	adds r0, #0x48
	bl InitSpriteText
	movs r0, #0
	bl SetTextFont
	ldrh r1, [r6, #0x2c]
	lsrs r0, r1, #5
	ands r4, r5
	lsls r4, r4, #0xc
	adds r0, r0, r4
	str r0, [r6, #0x50]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08082D4C: .4byte 0x06016000
_08082D50: .4byte Pal_TalkText

	thumb_func_start sub_8082D54
sub_8082D54: @ 0x08082D54
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r0, #0x30
	bl SetTextFont
	adds r4, #0x48
	adds r0, r4, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	movs r0, #1
	bl SetTextFontGlyphs
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetCursor
	ldr r0, _08082DA0 @ =0x08679754
	lsls r5, r5, #2
	adds r5, r5, r0
	ldr r0, [r5]
	bl DecodeMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	movs r0, #0
	bl SetTextFont
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08082DA0: .4byte 0x08679754

	thumb_func_start sub_8082DA4
sub_8082DA4: @ 0x08082DA4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	str r1, [sp, #4]
	adds r7, r2, #0
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov sl, r3
	str r0, [sp, #8]
	cmp r3, #0xf
	bls _08082E56
	adds r2, #8
	adds r0, r3, #0
	asrs r0, r0, #5
	subs r7, r2, r0
	ldr r4, _08082E68 @ =gSinLut
	movs r0, #0x80
	adds r0, r0, r4
	mov sb, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r3, #0
	ldrsh r0, [r4, r3]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r1, sl
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r2, sb
	movs r3, #0
	ldrsh r0, [r2, r3]
	lsls r0, r0, #4
	mov r1, sl
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #1
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	movs r5, #0
	ldr r6, _08082E6C @ =0x000001FF
	ldr r4, [sp, #4]
_08082E34:
	adds r1, r4, #0
	ands r1, r6
	lsls r2, r5, #2
	ldr r3, [sp, #8]
	ldr r0, [r3, #0x50]
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #0xc
	adds r2, r7, #0
	ands r2, r6
	ldr r3, _08082E70 @ =0x0867976C
	bl PutSpriteExt
	adds r4, #0x20
	adds r5, #1
	cmp r5, #7
	ble _08082E34
_08082E56:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08082E68: .4byte gSinLut
_08082E6C: .4byte 0x000001FF
_08082E70: .4byte 0x0867976C

	thumb_func_start sub_8082E74
sub_8082E74: @ 0x08082E74
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r7, r1, #0
	ldr r0, _08082EB0 @ =0x020168E8
	str r4, [r0]
	ldr r1, _08082EB4 @ =0x020168EC
	movs r0, #1
	lsls r0, r4
	subs r0, #1
	str r0, [r1]
	ldr r6, _08082EB8 @ =0x020168F0
	movs r0, #0x1c
	adds r1, r4, #0
	bl __divsi3
	adds r5, r0, #0
	str r5, [r6]
	movs r0, #0x1c
	adds r1, r4, #0
	bl __modsi3
	cmp r0, #0
	ble _08082EA6
	adds r0, r5, #1
	str r0, [r6]
_08082EA6:
	ldr r0, _08082EBC @ =0x020168F4
	str r7, [r0]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08082EB0: .4byte 0x020168E8
_08082EB4: .4byte 0x020168EC
_08082EB8: .4byte 0x020168F0
_08082EBC: .4byte 0x020168F4

	thumb_func_start sub_8082EC0
sub_8082EC0: @ 0x08082EC0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, _08082EE8 @ =0x020168E8
	ldr r4, [r0]
	adds r0, r5, #0
	adds r1, r4, #0
	bl __divsi3
	adds r6, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	bl __modsi3
	cmp r0, #0
	ble _08082EE0
	adds r6, #1
_08082EE0:
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_08082EE8: .4byte 0x020168E8

	thumb_func_start sub_8082EEC
sub_8082EEC: @ 0x08082EEC
	push {r4, r5, lr}
	ldr r5, _08082F14 @ =0x02016920
	ldr r0, [r5]
	lsls r4, r0, #4
	adds r4, r4, r0
	lsls r4, r4, #0x13
	lsrs r4, r4, #0x10
	adds r0, r4, #0
	movs r1, #0x47
	bl __udivsi3
	adds r4, r4, r0
	adds r4, #3
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	str r4, [r5]
	adds r0, r4, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08082F14: .4byte 0x02016920

	thumb_func_start sub_8082F18
sub_8082F18: @ 0x08082F18
	push {r4, r5, r6, lr}
	movs r4, #0
	ldr r1, _08082F4C @ =0x020168F0
	ldr r0, [r1]
	cmp r4, r0
	bge _08082F44
	ldr r6, _08082F50 @ =0x02016924
	adds r5, r1, #0
_08082F28:
	ldr r0, [r5]
	adds r0, r4, r0
	lsls r1, r4, #1
	adds r0, r0, r1
	adds r0, r0, r6
	ldrb r3, [r0]
	adds r2, r4, r6
	ldrb r1, [r2]
	strb r1, [r0]
	strb r3, [r2]
	adds r4, #1
	ldr r0, [r5]
	cmp r4, r0
	blt _08082F28
_08082F44:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08082F4C: .4byte 0x020168F0
_08082F50: .4byte 0x02016924

	thumb_func_start sub_8082F54
sub_8082F54: @ 0x08082F54
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	str r0, [sp]
	mov sl, r1
	mov r8, r2
	mov sb, r3
	bl sub_8082EEC
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	add r8, r0
	movs r0, #1
	mov r1, sb
	lsls r0, r1
	subs r0, #1
	mov r1, r8
	ands r1, r0
	mov r8, r1
	movs r2, #0
	cmp r2, sb
	bge _08082FD4
_08082F86:
	ldr r0, _08082FE4 @ =0x020168E8
	mov r1, sl
	ldr r6, [r1]
	ldr r4, [r0]
	adds r0, r6, #0
	adds r1, r4, #0
	str r2, [sp, #4]
	bl __divsi3
	ldr r1, [sp]
	adds r7, r1, r0
	movs r5, #1
	ldr r2, [sp, #4]
	lsls r5, r2
	mov r0, r8
	ands r5, r0
	asrs r5, r2
	adds r0, r6, #0
	adds r1, r4, #0
	bl __modsi3
	adds r1, r0, #0
	ldr r2, [sp, #4]
	cmp r1, #0
	bge _08082FBA
	adds r0, r1, #7
_08082FBA:
	asrs r0, r0, #3
	lsls r0, r0, #3
	subs r0, r1, r0
	lsls r5, r0
	ldrb r1, [r7]
	orrs r5, r1
	strb r5, [r7]
	adds r0, r6, #1
	mov r1, sl
	str r0, [r1]
	adds r2, #1
	cmp r2, sb
	blt _08082F86
_08082FD4:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08082FE4: .4byte 0x020168E8

	thumb_func_start sub_8082FE8
sub_8082FE8: @ 0x08082FE8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	str r0, [sp]
	mov r8, r1
	mov sb, r2
	movs r0, #0
	mov sl, r0
	movs r7, #0
	cmp sl, sb
	bge _0808304C
_08083004:
	ldr r0, _08083074 @ =0x020168E8
	mov r1, r8
	ldr r6, [r1]
	ldr r4, [r0]
	adds r0, r6, #0
	adds r1, r4, #0
	bl __divsi3
	ldr r2, [sp]
	adds r0, r2, r0
	ldrb r5, [r0]
	adds r0, r6, #0
	adds r1, r4, #0
	bl __modsi3
	adds r1, r0, #0
	cmp r1, #0
	bge _0808302A
	adds r0, r1, #7
_0808302A:
	asrs r0, r0, #3
	lsls r0, r0, #3
	subs r0, r1, r0
	movs r1, #1
	lsls r1, r0
	ands r5, r1
	asrs r5, r0
	lsls r5, r7
	mov r0, sl
	orrs r0, r5
	mov sl, r0
	adds r0, r6, #1
	mov r1, r8
	str r0, [r1]
	adds r7, #1
	cmp r7, sb
	blt _08083004
_0808304C:
	bl sub_8082EEC
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r2, sl
	subs r0, r2, r0
	movs r1, #1
	mov r2, sb
	lsls r1, r2
	subs r1, #1
	ands r0, r1
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_08083074: .4byte 0x020168E8

	thumb_func_start sub_8083078
sub_8083078: @ 0x08083078
	push {r4, lr}
	adds r4, r0, #0
	adds r3, r1, #0
	movs r2, #0
	movs r1, #0
	cmp r2, r3
	bge _08083098
_08083086:
	adds r0, r4, r1
	adds r1, #1
	ldrb r0, [r0]
	muls r0, r1, r0
	adds r0, r2, r0
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r1, r3
	blt _08083086
_08083098:
	lsrs r0, r2, #9
	adds r0, r2, r0
	ldr r2, _080830A8 @ =0x000001FF
	adds r1, r2, #0
	ands r0, r1
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080830A8: .4byte 0x000001FF

	thumb_func_start sub_80830AC
sub_80830AC: @ 0x080830AC
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	movs r6, #0
	ldr r0, _080830E4 @ =0x020168F0
	ldr r0, [r0]
	ldr r5, _080830E8 @ =0x02016924
	adds r0, r0, r5
	ldr r4, _080830EC @ =0x020169C4
	ldrh r1, [r4, #6]
	bl sub_8083078
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov sb, r0
	adds r7, r5, #0
	mov r8, r4
_080830D0:
	adds r0, r6, #0
	movs r1, #3
	bl __modsi3
	adds r5, r0, #0
	cmp r5, #0
	bne _080830F0
	mov r0, r8
	ldrh r4, [r0]
	b _08083108
	.align 2, 0
_080830E4: .4byte 0x020168F0
_080830E8: .4byte 0x02016924
_080830EC: .4byte 0x020169C4
_080830F0:
	cmp r5, #1
	bne _08083104
	mov r0, r8
	ldrh r4, [r0, #2]
	adds r0, r6, #0
	movs r1, #3
	bl __divsi3
	adds r1, r5, #0
	b _08083112
_08083104:
	mov r0, r8
	ldrh r4, [r0, #4]
_08083108:
	adds r0, r6, #0
	movs r1, #3
	bl __divsi3
	movs r1, #1
_08083112:
	lsls r1, r0
	ands r4, r1
	asrs r4, r0
	ldr r5, _08083170 @ =0x020168E8
	ldr r1, [r5]
	adds r0, r6, #0
	bl __modsi3
	lsls r4, r0
	ldrb r0, [r7]
	orrs r4, r0
	strb r4, [r7]
	adds r6, #1
	ldr r1, [r5]
	adds r0, r6, #0
	bl __modsi3
	cmp r0, #0
	bne _0808313A
	adds r7, #1
_0808313A:
	cmp r6, #0x1c
	bne _080830D0
	movs r2, #0
	ldr r3, _08083174 @ =0x020168F0
	ldr r0, [r3]
	cmp r2, r0
	bge _08083160
	ldr r5, _08083178 @ =0x02016924
	ldr r4, _0808317C @ =0x020168EC
_0808314C:
	adds r0, r2, r5
	ldrb r1, [r0]
	add r1, sb
	ldrb r6, [r4]
	ands r1, r6
	strb r1, [r0]
	adds r2, #1
	ldr r0, [r3]
	cmp r2, r0
	blt _0808314C
_08083160:
	bl sub_8082F18
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08083170: .4byte 0x020168E8
_08083174: .4byte 0x020168F0
_08083178: .4byte 0x02016924
_0808317C: .4byte 0x020168EC

	thumb_func_start sub_8083180
sub_8083180: @ 0x08083180
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	movs r0, #0
	mov sl, r0
	movs r7, #0
	bl sub_8082F18
	ldr r4, _08083218 @ =0x020168F0
	ldr r0, [r4]
	ldr r5, _0808321C @ =0x02016924
	adds r0, r0, r5
	ldr r1, _08083220 @ =0x020169C4
	ldrh r1, [r1, #6]
	bl sub_8083078
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	movs r2, #0
	ldr r0, [r4]
	cmp sl, r0
	bge _080831CA
	mov r8, r5
	ldr r5, _08083224 @ =0x020168EC
_080831B4:
	mov r1, r8
	adds r0, r2, r1
	ldrb r6, [r0]
	subs r1, r6, r3
	ldrb r6, [r5]
	ands r1, r6
	strb r1, [r0]
	adds r2, #1
	ldr r0, [r4]
	cmp r2, r0
	blt _080831B4
_080831CA:
	ldr r0, _08083220 @ =0x020169C4
	movs r1, #0
	strh r1, [r0]
	strh r1, [r0, #2]
	strh r1, [r0, #4]
	ldr r1, _0808321C @ =0x02016924
	ldr r2, _08083228 @ =0x020168E8
	mov sb, r2
	mov r8, r0
	mov r0, sl
	adds r6, r0, r1
_080831E0:
	adds r0, r7, #0
	movs r1, #3
	bl __modsi3
	adds r5, r0, #0
	cmp r5, #0
	bne _0808322C
	ldrb r4, [r6]
	mov r2, sb
	ldr r1, [r2]
	adds r0, r7, #0
	bl __modsi3
	asrs r4, r0
	movs r0, #1
	ands r4, r0
	adds r0, r7, #0
	movs r1, #3
	bl __divsi3
	lsls r4, r0
	mov r0, r8
	ldrh r0, [r0]
	orrs r4, r0
	mov r1, r8
	strh r4, [r1]
	b _0808327C
	.align 2, 0
_08083218: .4byte 0x020168F0
_0808321C: .4byte 0x02016924
_08083220: .4byte 0x020169C4
_08083224: .4byte 0x020168EC
_08083228: .4byte 0x020168E8
_0808322C:
	cmp r5, #1
	bne _08083256
	ldrb r4, [r6]
	mov r2, sb
	ldr r1, [r2]
	adds r0, r7, #0
	bl __modsi3
	asrs r4, r0
	ands r4, r5
	adds r0, r7, #0
	movs r1, #3
	bl __divsi3
	lsls r4, r0
	mov r0, r8
	ldrh r0, [r0, #2]
	orrs r4, r0
	mov r1, r8
	strh r4, [r1, #2]
	b _0808327C
_08083256:
	ldrb r4, [r6]
	mov r2, sb
	ldr r1, [r2]
	adds r0, r7, #0
	bl __modsi3
	asrs r4, r0
	movs r0, #1
	ands r4, r0
	adds r0, r7, #0
	movs r1, #3
	bl __divsi3
	lsls r4, r0
	mov r0, r8
	ldrh r0, [r0, #4]
	orrs r4, r0
	mov r1, r8
	strh r4, [r1, #4]
_0808327C:
	adds r7, #1
	mov r2, sb
	ldr r1, [r2]
	adds r0, r7, #0
	bl __modsi3
	cmp r0, #0
	bne _0808328E
	adds r6, #1
_0808328E:
	cmp r7, #0x1c
	bne _080831E0
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80832A0
sub_80832A0: @ 0x080832A0
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r3, r0, #0
	movs r0, #0
	str r0, [sp]
	ldr r6, _0808335C @ =0x02016924
	ldr r5, _08083360 @ =0x020168F0
	adds r2, r6, #0
	movs r1, #0
	adds r0, r6, #0
	adds r0, #0x9f
_080832B6:
	strb r1, [r0]
	subs r0, #1
	cmp r0, r2
	bge _080832B6
	ldr r1, [r5]
	adds r1, r1, r6
	mov r0, sp
	bl _call_via_r3
	ldr r0, [sp]
	bl sub_8082EC0
	ldr r4, _08083364 @ =0x020169C4
	strh r0, [r4, #6]
	ldr r0, [r5]
	adds r0, r0, r6
	ldrh r1, [r4, #6]
	bl sub_8083078
	strh r0, [r4, #2]
	bl GetGameTime
	lsrs r0, r0, #3
	ldrh r1, [r4, #2]
	adds r0, r1, r0
	ldr r1, _08083368 @ =0x000003FF
	ands r0, r1
	strh r0, [r4]
	ldr r1, _0808336C @ =0x02016920
	ldrh r0, [r4]
	str r0, [r1]
	bl sub_8082EEC
	ldrh r2, [r4, #2]
	adds r0, r0, r2
	ldr r2, _08083370 @ =0x000001FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r4, #2]
	movs r5, #0
	ldrh r4, [r4, #6]
	cmp r5, r4
	bge _08083330
	adds r4, r6, #0
_0808330E:
	bl sub_8082EEC
	ldr r1, _08083360 @ =0x020168F0
	ldr r2, [r1]
	adds r2, r5, r2
	adds r2, r2, r4
	ldrb r1, [r2]
	adds r0, r1, r0
	ldr r1, _08083374 @ =0x020168EC
	ldrb r1, [r1]
	ands r0, r1
	strb r0, [r2]
	adds r5, #1
	ldr r0, _08083364 @ =0x020169C4
	ldrh r0, [r0, #6]
	cmp r5, r0
	blt _0808330E
_08083330:
	ldr r0, _08083360 @ =0x020168F0
	ldr r0, [r0]
	ldr r1, _0808335C @ =0x02016924
	adds r0, r0, r1
	ldr r5, _08083364 @ =0x020169C4
	ldrh r1, [r5, #6]
	bl sub_8083078
	adds r4, r0, #0
	bl sub_8082EEC
	adds r4, r4, r0
	ldr r2, _08083370 @ =0x000001FF
	adds r0, r2, #0
	ands r4, r0
	strh r4, [r5, #4]
	bl sub_80830AC
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808335C: .4byte 0x02016924
_08083360: .4byte 0x020168F0
_08083364: .4byte 0x020169C4
_08083368: .4byte 0x000003FF
_0808336C: .4byte 0x02016920
_08083370: .4byte 0x000001FF
_08083374: .4byte 0x020168EC

	thumb_func_start sub_8083378
sub_8083378: @ 0x08083378
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #8
	mov sb, r0
	movs r0, #0
	str r0, [sp, #4]
	bl sub_8083180
	ldr r1, _08083424 @ =0x02016920
	ldr r4, _08083428 @ =0x020169C4
	ldrh r0, [r4]
	str r0, [r1]
	ldr r0, _0808342C @ =0x020168F0
	ldr r0, [r0]
	ldr r7, _08083430 @ =0x02016924
	adds r0, r0, r7
	ldrh r1, [r4, #6]
	bl sub_8083078
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	bl sub_8082EEC
	mov r1, sp
	strh r0, [r1]
	movs r5, #0
	add r0, sp, #4
	mov r8, r0
	ldrh r4, [r4, #6]
	cmp r5, r4
	bge _080833DE
	adds r4, r7, #0
_080833BC:
	bl sub_8082EEC
	ldr r1, _0808342C @ =0x020168F0
	ldr r2, [r1]
	adds r2, r5, r2
	adds r2, r2, r4
	ldrb r1, [r2]
	subs r0, r1, r0
	ldr r1, _08083434 @ =0x020168EC
	ldrb r1, [r1]
	ands r0, r1
	strb r0, [r2]
	adds r5, #1
	ldr r0, _08083428 @ =0x020169C4
	ldrh r0, [r0, #6]
	cmp r5, r0
	blt _080833BC
_080833DE:
	bl sub_8082EEC
	mov r1, sp
	strh r0, [r1, #2]
	ldr r5, _0808342C @ =0x020168F0
	ldr r1, [r5]
	ldr r4, _08083430 @ =0x02016924
	adds r1, r1, r4
	mov r0, r8
	bl _call_via_r9
	ldr r0, [r5]
	adds r0, r0, r4
	ldr r4, _08083428 @ =0x020169C4
	ldrh r1, [r4, #6]
	bl sub_8083078
	mov r1, sp
	ldrh r1, [r1]
	adds r0, r1, r0
	ldr r1, _08083438 @ =0x000001FF
	adds r2, r1, #0
	ands r0, r2
	mov r1, sp
	ldrh r1, [r1, #2]
	adds r6, r6, r1
	ands r6, r2
	ldrh r1, [r4, #2]
	cmp r1, r0
	bne _08083420
	ldrh r4, [r4, #4]
	cmp r4, r6
	beq _0808343C
_08083420:
	movs r0, #0
	b _0808343E
	.align 2, 0
_08083424: .4byte 0x02016920
_08083428: .4byte 0x020169C4
_0808342C: .4byte 0x020168F0
_08083430: .4byte 0x02016924
_08083434: .4byte 0x020168EC
_08083438: .4byte 0x000001FF
_0808343C:
	movs r0, #1
_0808343E:
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_808344C
sub_808344C: @ 0x0808344C
	adds r3, r0, #0
	movs r2, #0
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	beq _08083472
	ldrh r3, [r3]
_0808345A:
	ldrh r0, [r1]
	cmp r0, r3
	bne _08083466
	lsls r0, r2, #0x10
	lsrs r0, r0, #0x10
	b _08083474
_08083466:
	adds r1, #2
	adds r2, #1
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, #0
	bne _0808345A
_08083472:
	ldr r0, _08083478 @ =0x0000FFFF
_08083474:
	bx lr
	.align 2, 0
_08083478: .4byte 0x0000FFFF

	thumb_func_start sub_808347C
sub_808347C: @ 0x0808347C
	push {r4, r5, r6, lr}
	adds r2, r0, #0
	adds r6, r1, #0
	movs r5, #0
	movs r0, #0
	ldrsb r0, [r2, r0]
	cmp r0, #0
	beq _080834A8
	adds r4, r2, #0
_0808348E:
	adds r0, r4, #0
	adds r1, r6, #0
	bl sub_808344C
	ldr r1, _080834B0 @ =0x02016924
	adds r1, r5, r1
	strb r0, [r1]
	adds r4, #2
	adds r5, #1
	movs r0, #0
	ldrsb r0, [r4, r0]
	cmp r0, #0
	bne _0808348E
_080834A8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080834B0: .4byte 0x02016924

	thumb_func_start sub_80834B4
sub_80834B4: @ 0x080834B4
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r1, _08083570 @ =0x02016920
	ldr r0, _08083574 @ =0x020168F4
	ldr r0, [r0]
	str r0, [r1]
	ldr r6, _08083578 @ =0x030048C0
	ldrb r2, [r6, #0x11]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #1
	bl sub_8082F54
	bl sub_808F30C
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #0x10
	bl sub_8082F54
	bl sub_808F470
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #0x10
	bl sub_8082F54
	bl sub_808F4F0
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #7
	bl sub_8082F54
	bl sub_808F59C
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #0xc
	bl sub_8082F54
	bl sub_8017104
	adds r2, r0, #0
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #0x18
	bl sub_8082F54
	bl sub_808F648
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #0xc
	bl sub_8082F54
	ldrb r2, [r6, #0xe]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #0xa
	bl sub_8082F54
	ldrb r2, [r6, #0xf]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #6
	bl sub_8082F54
	ldrb r2, [r6, #0x10]
	adds r0, r4, #0
	adds r1, r5, #0
	movs r3, #6
	bl sub_8082F54
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08083570: .4byte 0x02016920
_08083574: .4byte 0x020168F4
_08083578: .4byte 0x030048C0

	thumb_func_start sub_808357C
sub_808357C: @ 0x0808357C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	ldr r1, _0808360C @ =0x02016920
	ldr r0, _08083610 @ =0x020168F4
	ldr r0, [r0]
	str r0, [r1]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #1
	bl sub_8082FE8
	ldr r4, _08083614 @ =0x030048C0
	strb r0, [r4, #0x11]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #0x10
	bl sub_8082FE8
	strh r0, [r4]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #0x10
	bl sub_8082FE8
	strh r0, [r4, #2]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #7
	bl sub_8082FE8
	strh r0, [r4, #4]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #0xc
	bl sub_8082FE8
	strh r0, [r4, #6]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #0x18
	bl sub_8082FE8
	str r0, [r4, #8]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #0xc
	bl sub_8082FE8
	strh r0, [r4, #0xc]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #0xa
	bl sub_8082FE8
	strb r0, [r4, #0xe]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #6
	bl sub_8082FE8
	strb r0, [r4, #0xf]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #6
	bl sub_8082FE8
	strb r0, [r4, #0x10]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808360C: .4byte 0x02016920
_08083610: .4byte 0x020168F4
_08083614: .4byte 0x030048C0

	thumb_func_start sub_8083618
sub_8083618: @ 0x08083618
	push {r4, lr}
	sub sp, #0xc
	bl sub_808F30C
	ldr r4, _08083654 @ =0x030048C0
	strh r0, [r4]
	bl sub_808F470
	strh r0, [r4, #2]
	bl sub_808F4F0
	strh r0, [r4, #4]
	bl sub_808F59C
	strh r0, [r4, #6]
	bl sub_8017104
	str r0, [r4, #8]
	bl sub_808F648
	strh r0, [r4, #0xc]
	ldr r1, _08083658 @ =gPlaySt
	movs r0, #0x40
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	beq _0808365C
	movs r0, #1
	b _0808365E
	.align 2, 0
_08083654: .4byte 0x030048C0
_08083658: .4byte gPlaySt
_0808365C:
	movs r0, #0
_0808365E:
	strb r0, [r4, #0x11]
	bl sub_808EC1C
	add r2, sp, #4
	add r3, sp, #8
	mov r1, sp
	bl FormatTime
	ldr r1, _08083684 @ =0x030048C0
	ldr r0, [sp]
	strb r0, [r1, #0xe]
	ldr r0, [sp, #4]
	strb r0, [r1, #0xf]
	ldr r0, [sp, #8]
	strb r0, [r1, #0x10]
	add sp, #0xc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08083684: .4byte 0x030048C0

	thumb_func_start sub_8083688
sub_8083688: @ 0x08083688
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	str r0, [sp, #0xc]
	mov r8, r1
	add r1, sp, #8
	movs r0, #0
	strb r0, [r1, #2]
	movs r0, #4
	bl EnableBgSync
	movs r0, #0
	str r0, [sp, #0x10]
	add r7, sp, #8
	movs r1, #0xe0
	lsls r1, r1, #1
	mov sl, r1
	mov sb, r0
	movs r6, #0
_080836B4:
	ldr r2, [sp, #0xc]
	adds r0, r2, r6
	bl ClearText
	movs r5, #2
	bl InitTalkTextFont
	movs r4, #0
_080836C4:
	mov r0, sb
	adds r2, r0, r4
	ldr r1, _08083740 @ =0x020169C4
	ldr r0, _08083744 @ =0x020168F0
	ldr r0, [r0]
	ldrh r1, [r1, #6]
	adds r0, r1, r0
	cmp r2, r0
	beq _08083730
	ldr r1, _08083748 @ =0x02016924
	adds r1, r2, r1
	ldrb r2, [r1]
	lsls r0, r2, #1
	add r0, r8
	ldrb r0, [r0]
	strb r0, [r7]
	ldrb r1, [r1]
	lsls r0, r1, #1
	add r0, r8
	ldrb r0, [r0, #1]
	strb r0, [r7, #1]
	movs r0, #0
	str r0, [sp]
	add r1, sp, #8
	str r1, [sp, #4]
	ldr r2, [sp, #0xc]
	adds r0, r2, r6
	ldr r1, _0808374C @ =0x02022B10
	add r1, sl
	movs r2, #1
	adds r3, r5, #0
	bl PutDrawText
	adds r5, #0xb
	adds r4, #1
	adds r0, r4, #0
	movs r1, #5
	bl __modsi3
	cmp r0, #0
	bne _08083718
	adds r5, #0xb
_08083718:
	cmp r4, #0xd
	ble _080836C4
	movs r0, #0xc0
	add sl, r0
	movs r1, #0xe
	add sb, r1
	adds r6, #8
	ldr r2, [sp, #0x10]
	adds r2, #1
	str r2, [sp, #0x10]
	cmp r2, #2
	ble _080836B4
_08083730:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08083740: .4byte 0x020169C4
_08083744: .4byte 0x020168F0
_08083748: .4byte 0x02016924
_0808374C: .4byte 0x02022B10

	thumb_func_start sub_8083750
sub_8083750: @ 0x08083750
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	adds r5, r0, #0
	lsls r4, r5, #6
	ldr r0, _080837C0 @ =0x02022B0C
	mov r8, r0
	adds r0, r4, r0
	ldr r6, _080837C4 @ =0x030048C0
	ldrh r2, [r6]
	movs r1, #2
	bl PutNumberOrBlank
	mov r0, r8
	adds r0, #8
	adds r0, r4, r0
	ldrh r2, [r6, #2]
	movs r1, #2
	bl PutNumberOrBlank
	mov r0, r8
	adds r0, #0x10
	adds r0, r4, r0
	ldrh r2, [r6, #4]
	movs r1, #2
	bl PutNumberOrBlank
	mov r0, r8
	adds r0, #0x18
	adds r0, r4, r0
	ldrh r2, [r6, #6]
	movs r1, #2
	bl PutNumberOrBlank
	movs r1, #0x28
	add r8, r1
	add r4, r8
	ldrh r2, [r6, #0xc]
	adds r0, r4, #0
	movs r1, #2
	bl PutNumberOrBlank
	adds r5, #2
	lsls r5, r5, #6
	add r5, r8
	ldr r2, [r6, #8]
	adds r0, r5, #0
	movs r1, #2
	bl PutNumberOrBlank
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080837C0: .4byte 0x02022B0C
_080837C4: .4byte 0x030048C0

	thumb_func_start sub_80837C8
sub_80837C8: @ 0x080837C8
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0
	bl InitBgs
	bl ResetTextFont
	bl ResetText
	movs r0, #0
	strh r0, [r6, #0x2a]
	ldr r4, _080838DC @ =gDispIo
	movs r2, #1
	ldrb r0, [r4, #1]
	orrs r0, r2
	movs r3, #2
	orrs r0, r3
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x11
	rsbs r1, r1, #0
	ands r0, r1
	strb r0, [r4, #1]
	adds r1, #0xd
	adds r0, r1, #0
	ldrb r5, [r4, #0xc]
	ands r0, r5
	orrs r0, r2
	strb r0, [r4, #0xc]
	adds r0, r1, #0
	ldrb r2, [r4, #0x10]
	ands r0, r2
	orrs r0, r3
	strb r0, [r4, #0x10]
	ldrb r5, [r4, #0x14]
	ands r1, r5
	strb r1, [r4, #0x14]
	movs r0, #3
	ldrb r1, [r4, #0x18]
	orrs r0, r1
	strb r0, [r4, #0x18]
	bl LoadUiFrameGraphics
	bl EnablePalSync
	ldr r0, _080838E0 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080838E4 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080838E8 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080838EC @ =gBg3Tm
	movs r1, #0
	bl TmFill
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r2, [r4, #1]
	ands r0, r2
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r4, #1]
	movs r0, #2
	str r0, [sp]
	movs r1, #6
	movs r2, #0x1a
	movs r3, #7
	bl sub_8041358
	movs r0, #0xf
	bl EnableBgSync
	ldr r5, _080838F0 @ =0x020168F8
	movs r4, #2
_0808389C:
	adds r0, r5, #0
	movs r1, #0x1b
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _0808389C
	bl sub_8083618
	movs r0, #5
	movs r1, #0xb
	bl sub_8082E74
	ldr r0, _080838F4 @ =sub_80834B4
	bl sub_80832A0
	ldr r0, _080838F0 @ =0x020168F8
	ldr r1, _080838F8 @ =0x0867978C
	bl sub_8083688
	movs r0, #0
	movs r1, #0
	movs r2, #0xa
	bl sub_806EA24
	str r0, [r6, #0x44]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080838DC: .4byte gDispIo
_080838E0: .4byte gBg0Tm
_080838E4: .4byte gBg1Tm
_080838E8: .4byte gBg2Tm
_080838EC: .4byte gBg3Tm
_080838F0: .4byte 0x020168F8
_080838F4: .4byte sub_80834B4
_080838F8: .4byte 0x0867978C

	thumb_func_start nullsub_42
nullsub_42: @ 0x080838FC
	bx lr
	.align 2, 0

	thumb_func_start sub_8083900
sub_8083900: @ 0x08083900
	push {lr}
	ldr r0, [r0, #0x44]
	bl Proc_End
	ldr r2, _0808392C @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	pop {r0}
	bx r0
	.align 2, 0
_0808392C: .4byte gDispIo

	thumb_func_start sub_8083930
sub_8083930: @ 0x08083930
	push {lr}
	adds r1, r0, #0
	ldr r0, _08083940 @ =0x086797D0
	bl SpawnProcLocking
	pop {r1}
	bx r1
	.align 2, 0
_08083940: .4byte 0x086797D0

	thumb_func_start sub_8083944
sub_8083944: @ 0x08083944
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	adds r7, r1, #0
	ldr r0, _08083A54 @ =0x02016920
	ldr r1, _08083A58 @ =0x020168F4
	ldr r1, [r1]
	str r1, [r0]
	ldr r0, _08083A5C @ =0x0203D4A0
	mov sl, r0
	movs r1, #0
	mov sb, r1
	mov r6, sl
_08083964:
	ldrb r2, [r6]
	adds r0, r7, #0
	mov r1, r8
	movs r3, #8
	bl sub_8082F54
	ldrb r2, [r6, #1]
	adds r0, r7, #0
	mov r1, r8
	movs r3, #1
	bl sub_8082F54
	ldrb r2, [r6, #2]
	adds r0, r7, #0
	mov r1, r8
	movs r3, #5
	bl sub_8082F54
	ldrb r2, [r6, #3]
	adds r0, r7, #0
	mov r1, r8
	movs r3, #6
	bl sub_8082F54
	ldrb r2, [r6, #4]
	adds r0, r7, #0
	mov r1, r8
	movs r3, #5
	bl sub_8082F54
	ldrb r2, [r6, #5]
	adds r0, r7, #0
	mov r1, r8
	movs r3, #5
	bl sub_8082F54
	ldrb r2, [r6, #6]
	adds r0, r7, #0
	mov r1, r8
	movs r3, #5
	bl sub_8082F54
	ldrb r2, [r6, #7]
	adds r0, r7, #0
	mov r1, r8
	movs r3, #5
	bl sub_8082F54
	ldrb r2, [r6, #8]
	adds r0, r7, #0
	mov r1, r8
	movs r3, #5
	bl sub_8082F54
	ldrb r2, [r6, #9]
	adds r0, r7, #0
	mov r1, r8
	movs r3, #5
	bl sub_8082F54
	ldrb r2, [r6, #0xa]
	adds r0, r7, #0
	mov r1, r8
	movs r3, #5
	bl sub_8082F54
	mov r0, sl
	adds r0, #0xb
	mov r1, sb
	adds r4, r1, r0
	movs r5, #7
_080839F2:
	ldrb r2, [r4]
	adds r0, r7, #0
	mov r1, r8
	movs r3, #3
	bl sub_8082F54
	adds r4, #1
	subs r5, #1
	cmp r5, #0
	bge _080839F2
	ldr r4, _08083A60 @ =0x0203D4B3
	add r4, sb
	movs r5, #4
_08083A0C:
	ldrb r2, [r4]
	adds r0, r7, #0
	mov r1, r8
	movs r3, #8
	bl sub_8082F54
	adds r4, #1
	subs r5, #1
	cmp r5, #0
	bge _08083A0C
	movs r0, #0x18
	add sb, r0
	adds r6, #0x18
	mov r0, sl
	adds r0, #0x60
	cmp r6, r0
	ble _08083964
	movs r4, #0
	ldr r5, _08083A64 @ =0x0203D518
_08083A32:
	adds r0, r4, r5
	ldrb r2, [r0]
	adds r0, r7, #0
	mov r1, r8
	movs r3, #2
	bl sub_8082F54
	adds r4, #1
	cmp r4, #9
	ble _08083A32
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08083A54: .4byte 0x02016920
_08083A58: .4byte 0x020168F4
_08083A5C: .4byte 0x0203D4A0
_08083A60: .4byte 0x0203D4B3
_08083A64: .4byte 0x0203D518

	thumb_func_start sub_8083A68
sub_8083A68: @ 0x08083A68
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	adds r7, r1, #0
	ldr r0, _08083B78 @ =0x02016920
	ldr r1, _08083B7C @ =0x020168F4
	ldr r1, [r1]
	str r1, [r0]
	ldr r0, _08083B80 @ =0x0203D4A0
	mov sl, r0
	movs r1, #0
	mov sb, r1
	mov r6, sl
_08083A88:
	adds r0, r7, #0
	mov r1, r8
	movs r2, #8
	bl sub_8082FE8
	strb r0, [r6]
	adds r0, r7, #0
	mov r1, r8
	movs r2, #1
	bl sub_8082FE8
	strb r0, [r6, #1]
	adds r0, r7, #0
	mov r1, r8
	movs r2, #5
	bl sub_8082FE8
	strb r0, [r6, #2]
	adds r0, r7, #0
	mov r1, r8
	movs r2, #6
	bl sub_8082FE8
	strb r0, [r6, #3]
	adds r0, r7, #0
	mov r1, r8
	movs r2, #5
	bl sub_8082FE8
	strb r0, [r6, #4]
	adds r0, r7, #0
	mov r1, r8
	movs r2, #5
	bl sub_8082FE8
	strb r0, [r6, #5]
	adds r0, r7, #0
	mov r1, r8
	movs r2, #5
	bl sub_8082FE8
	strb r0, [r6, #6]
	adds r0, r7, #0
	mov r1, r8
	movs r2, #5
	bl sub_8082FE8
	strb r0, [r6, #7]
	adds r0, r7, #0
	mov r1, r8
	movs r2, #5
	bl sub_8082FE8
	strb r0, [r6, #8]
	adds r0, r7, #0
	mov r1, r8
	movs r2, #5
	bl sub_8082FE8
	strb r0, [r6, #9]
	adds r0, r7, #0
	mov r1, r8
	movs r2, #5
	bl sub_8082FE8
	strb r0, [r6, #0xa]
	mov r0, sl
	adds r0, #0xb
	mov r1, sb
	adds r4, r1, r0
	movs r5, #7
_08083B16:
	adds r0, r7, #0
	mov r1, r8
	movs r2, #3
	bl sub_8082FE8
	strb r0, [r4]
	adds r4, #1
	subs r5, #1
	cmp r5, #0
	bge _08083B16
	ldr r4, _08083B84 @ =0x0203D4B3
	add r4, sb
	movs r5, #4
_08083B30:
	adds r0, r7, #0
	mov r1, r8
	movs r2, #8
	bl sub_8082FE8
	strb r0, [r4]
	adds r4, #1
	subs r5, #1
	cmp r5, #0
	bge _08083B30
	movs r0, #0x18
	add sb, r0
	adds r6, #0x18
	mov r0, sl
	adds r0, #0x60
	cmp r6, r0
	ble _08083A88
	movs r4, #0
	ldr r5, _08083B88 @ =0x0203D518
_08083B56:
	adds r0, r7, #0
	mov r1, r8
	movs r2, #2
	bl sub_8082FE8
	adds r1, r4, r5
	strb r0, [r1]
	adds r4, #1
	cmp r4, #9
	ble _08083B56
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08083B78: .4byte 0x02016920
_08083B7C: .4byte 0x020168F4
_08083B80: .4byte 0x0203D4A0
_08083B84: .4byte 0x0203D4B3
_08083B88: .4byte 0x0203D518

	thumb_func_start sub_8083B8C
sub_8083B8C: @ 0x08083B8C
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	movs r1, #0
	movs r0, #0
_08083B96:
	adds r3, r0, #1
	adds r2, r3, #0
	cmp r3, #4
	bgt _08083BB4
_08083B9E:
	cmp r0, r5
	bne _08083BAC
	cmp r2, r4
	bne _08083BAC
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	b _08083BBC
_08083BAC:
	adds r1, #1
	adds r2, #1
	cmp r2, #4
	ble _08083B9E
_08083BB4:
	adds r0, r3, #0
	cmp r0, #4
	ble _08083B96
	movs r0, #0
_08083BBC:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8083BC4
sub_8083BC4: @ 0x08083BC4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	str r0, [sp]
	str r1, [sp, #4]
	movs r0, #0
	str r0, [sp, #8]
	cmp r0, r1
	bge _08083CD8
	ldr r1, _08083E60 @ =0x0203D4A0
	mov sl, r1
	movs r3, #0x1f
	mov sb, r0
	ldr r5, [sp]
	str r0, [sp, #0x10]
	mov r7, sl
_08083BEA:
	ldr r0, [r5]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	strb r0, [r7]
	ldr r0, [r5]
	ldr r1, [r0]
	ldr r2, [r0, #4]
	ldr r0, [r1, #0x28]
	ldr r1, [r2, #0x24]
	orrs r0, r1
	lsrs r0, r0, #8
	movs r1, #1
	ands r0, r1
	strb r0, [r7, #1]
	ldr r1, [r5]
	adds r0, r3, #0
	ldrb r1, [r1, #8]
	ands r0, r1
	strb r0, [r7, #2]
	ldr r1, [r5]
	movs r0, #0x3f
	ldrb r1, [r1, #0x10]
	ands r0, r1
	strb r0, [r7, #3]
	ldr r1, [r5]
	adds r0, r3, #0
	ldrb r1, [r1, #0x12]
	ands r0, r1
	strb r0, [r7, #4]
	ldr r1, [r5]
	adds r0, r3, #0
	ldrb r1, [r1, #0x13]
	ands r0, r1
	strb r0, [r7, #5]
	ldr r1, [r5]
	adds r0, r3, #0
	ldrb r1, [r1, #0x14]
	ands r0, r1
	strb r0, [r7, #6]
	ldr r1, [r5]
	adds r0, r3, #0
	ldrb r1, [r1, #0x15]
	ands r0, r1
	strb r0, [r7, #7]
	ldr r1, [r5]
	adds r0, r3, #0
	ldrb r1, [r1, #0x16]
	ands r0, r1
	strb r0, [r7, #8]
	ldr r1, [r5]
	adds r0, r3, #0
	ldrb r1, [r1, #0x17]
	ands r0, r1
	strb r0, [r7, #9]
	ldr r1, [r5]
	ldr r2, [r1, #4]
	ldr r0, [r1]
	ldrb r2, [r2, #0x11]
	ldrb r0, [r0, #0x13]
	adds r0, r2, r0
	ldrb r1, [r1, #0x18]
	adds r0, r1, r0
	movs r1, #0x1f
	ands r0, r1
	strb r0, [r7, #0xa]
	movs r6, #0
	ldr r0, [sp, #0x10]
	mov r8, r0
	mov r0, sl
	adds r0, #0xb
	mov r1, sb
	adds r4, r1, r0
_08083C7A:
	ldr r0, [r5]
	adds r0, #0x26
	adds r0, r0, r6
	ldrb r0, [r0]
	str r3, [sp, #0x18]
	bl GetWeaponLevelFromExp
	movs r1, #7
	ands r0, r1
	strb r0, [r4]
	adds r4, #1
	adds r6, #1
	ldr r3, [sp, #0x18]
	cmp r6, #7
	ble _08083C7A
	movs r6, #0
	ldr r4, _08083E64 @ =0x0203D4B3
	add r4, sb
_08083C9E:
	ldr r0, [sp]
	add r0, r8
	ldr r0, [r0]
	lsls r1, r6, #1
	adds r0, #0x1c
	adds r0, r0, r1
	ldrh r0, [r0]
	str r3, [sp, #0x18]
	bl GetItemIid
	strb r0, [r4]
	adds r4, #1
	adds r6, #1
	ldr r3, [sp, #0x18]
	cmp r6, #4
	ble _08083C9E
	movs r0, #0x18
	add sb, r0
	adds r5, #4
	ldr r1, [sp, #0x10]
	adds r1, #4
	str r1, [sp, #0x10]
	adds r7, #0x18
	ldr r0, [sp, #8]
	adds r0, #1
	str r0, [sp, #8]
	ldr r1, [sp, #4]
	cmp r0, r1
	blt _08083BEA
_08083CD8:
	ldr r4, _08083E68 @ =0x02016920
	bl GetGameTime
	lsls r0, r0, #0xd
	lsrs r0, r0, #0x10
	str r0, [r4]
	ldr r0, [sp, #8]
	cmp r0, #4
	bgt _08083DA6
	ldr r1, _08083E60 @ =0x0203D4A0
	mov sl, r1
	movs r0, #0x1f
	mov r8, r0
	ldr r1, [sp, #8]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #3
	mov sb, r0
	mov r5, sb
	add r5, sl
_08083D00:
	movs r0, #0
	strb r0, [r5]
	bl sub_8082EEC
	movs r1, #1
	ands r1, r0
	strb r1, [r5, #1]
	bl sub_8082EEC
	mov r1, r8
	ands r0, r1
	strb r0, [r5, #2]
	bl sub_8082EEC
	movs r1, #0x3f
	ands r1, r0
	strb r1, [r5, #3]
	bl sub_8082EEC
	mov r1, r8
	ands r0, r1
	strb r0, [r5, #4]
	bl sub_8082EEC
	mov r1, r8
	ands r0, r1
	strb r0, [r5, #5]
	bl sub_8082EEC
	mov r1, r8
	ands r0, r1
	strb r0, [r5, #6]
	bl sub_8082EEC
	mov r1, r8
	ands r0, r1
	strb r0, [r5, #7]
	bl sub_8082EEC
	mov r1, r8
	ands r0, r1
	strb r0, [r5, #8]
	bl sub_8082EEC
	mov r1, r8
	ands r0, r1
	strb r0, [r5, #9]
	bl sub_8082EEC
	mov r1, r8
	ands r0, r1
	strb r0, [r5, #0xa]
	mov r0, sl
	adds r0, #0xb
	mov r1, sb
	adds r4, r1, r0
	movs r7, #7
	movs r6, #7
_08083D74:
	bl sub_8082EEC
	ands r0, r7
	strb r0, [r4]
	adds r4, #1
	subs r6, #1
	cmp r6, #0
	bge _08083D74
	ldr r4, _08083E64 @ =0x0203D4B3
	add r4, sb
	movs r6, #4
_08083D8A:
	bl sub_8082EEC
	strb r0, [r4]
	adds r4, #1
	subs r6, #1
	cmp r6, #0
	bge _08083D8A
	movs r0, #0x18
	add sb, r0
	adds r5, #0x18
	mov r0, sl
	adds r0, #0x60
	cmp r5, r0
	ble _08083D00
_08083DA6:
	ldr r1, _08083E6C @ =0x0203D518
	movs r2, #0
	adds r0, r1, #0
	adds r0, #9
_08083DAE:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge _08083DAE
	movs r1, #0
	str r1, [sp, #8]
	ldr r0, [sp, #4]
	cmp r1, r0
	bge _08083E50
_08083DC0:
	ldr r1, [sp, #8]
	lsls r0, r1, #2
	ldr r1, [sp]
	adds r4, r0, r1
	ldr r0, [r4]
	bl GetUnitSupportCount
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #0xc]
	movs r6, #0
	ldr r2, [sp, #8]
	adds r2, #1
	cmp r6, r0
	bge _08083E48
	mov r8, r4
_08083DE0:
	mov r1, r8
	ldr r0, [r1]
	adds r1, r6, #0
	str r2, [sp, #0x14]
	bl GetUnitSupportPid
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov sb, r0
	ldr r2, [sp, #0x14]
	adds r5, r2, #0
	adds r0, r6, #1
	mov sl, r0
	ldr r1, [sp, #4]
	cmp r2, r1
	bge _08083E40
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #3
	ldr r1, _08083E60 @ =0x0203D4A0
	adds r7, r0, r1
_08083E0A:
	ldrb r0, [r7]
	cmp r0, sb
	bne _08083E36
	ldr r0, [sp, #8]
	adds r1, r5, #0
	str r2, [sp, #0x14]
	bl sub_8083B8C
	adds r4, r0, #0
	mov r1, r8
	ldr r0, [r1]
	adds r1, r6, #0
	bl GetUnitSupportLevel
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r1, _08083E6C @ =0x0203D518
	adds r4, r4, r1
	movs r1, #3
	ands r0, r1
	strb r0, [r4]
	ldr r2, [sp, #0x14]
_08083E36:
	adds r7, #0x18
	adds r5, #1
	ldr r0, [sp, #4]
	cmp r5, r0
	blt _08083E0A
_08083E40:
	mov r6, sl
	ldr r1, [sp, #0xc]
	cmp r6, r1
	blt _08083DE0
_08083E48:
	str r2, [sp, #8]
	ldr r0, [sp, #4]
	cmp r2, r0
	blt _08083DC0
_08083E50:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08083E60: .4byte 0x0203D4A0
_08083E64: .4byte 0x0203D4B3
_08083E68: .4byte 0x02016920
_08083E6C: .4byte 0x0203D518

	thumb_func_start sub_8083E70
sub_8083E70: @ 0x08083E70
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	mov sl, r0
	str r1, [sp, #0xc]
	add r1, sp, #8
	movs r0, #0
	strb r0, [r1, #2]
	movs r0, #4
	bl EnableBgSync
	bl InitTalkTextFont
	movs r0, #0
	str r0, [sp, #0x10]
	add r7, sp, #8
	movs r1, #0xc0
	mov sb, r1
	mov r8, r0
	movs r6, #0
_08083E9E:
	mov r1, sl
	adds r0, r1, r6
	bl ClearText
	movs r5, #0
	movs r4, #0
_08083EAA:
	mov r0, r8
	adds r2, r0, r4
	ldr r1, _08083F30 @ =0x020169C4
	ldr r0, _08083F34 @ =0x020168F0
	ldr r0, [r0]
	ldrh r1, [r1, #6]
	adds r0, r1, r0
	cmp r2, r0
	beq _08083F1E
	ldr r0, _08083F38 @ =0x02016924
	adds r0, r2, r0
	ldrb r0, [r0]
	lsls r1, r0, #1
	ldr r0, [sp, #0xc]
	adds r1, r0, r1
	ldrb r0, [r1]
	strb r0, [r7]
	ldrb r0, [r1, #1]
	strb r0, [r7, #1]
	movs r1, #0
	str r1, [sp]
	add r0, sp, #8
	str r0, [sp, #4]
	mov r1, sl
	adds r0, r1, r6
	ldr r1, _08083F3C @ =0x02022B0C
	add r1, sb
	movs r2, #1
	adds r3, r5, #0
	bl PutDrawText
	adds r5, #0xa
	adds r4, #1
	adds r0, r4, #0
	movs r1, #6
	bl __modsi3
	cmp r0, #0
	bne _08083F06
	adds r0, r4, #0
	movs r1, #6
	bl __divsi3
	cmp r0, #2
	bgt _08083F06
	adds r5, #0xa
_08083F06:
	cmp r4, #0x12
	ble _08083EAA
	movs r0, #0xc0
	add sb, r0
	movs r1, #0x13
	add r8, r1
	adds r6, #8
	ldr r0, [sp, #0x10]
	adds r0, #1
	str r0, [sp, #0x10]
	cmp r0, #4
	ble _08083E9E
_08083F1E:
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08083F30: .4byte 0x020169C4
_08083F34: .4byte 0x020168F0
_08083F38: .4byte 0x02016924
_08083F3C: .4byte 0x02022B0C

	thumb_func_start sub_8083F40
sub_8083F40: @ 0x08083F40
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	lsls r4, r4, #6
	ldr r6, _08083FE8 @ =0x02022B0C
	adds r0, r4, r6
	ldr r5, _08083FEC @ =0x0203D4A0
	ldrb r2, [r5]
	movs r1, #2
	bl PutNumberOrBlank
	adds r0, r6, #4
	adds r0, r4, r0
	ldrb r2, [r5, #1]
	movs r1, #2
	bl PutNumberOrBlank
	adds r0, r6, #0
	adds r0, #0xa
	adds r0, r4, r0
	ldrb r2, [r5, #2]
	movs r1, #2
	bl PutNumberOrBlank
	adds r0, r6, #0
	adds r0, #0x10
	adds r0, r4, r0
	ldrb r2, [r5, #3]
	movs r1, #2
	bl PutNumberOrBlank
	adds r0, r6, #0
	adds r0, #0x16
	adds r0, r4, r0
	ldrb r2, [r5, #4]
	movs r1, #2
	bl PutNumberOrBlank
	adds r0, r6, #0
	adds r0, #0x1c
	adds r0, r4, r0
	ldrb r2, [r5, #5]
	movs r1, #2
	bl PutNumberOrBlank
	adds r0, r6, #0
	adds r0, #0x22
	adds r0, r4, r0
	ldrb r2, [r5, #6]
	movs r1, #2
	bl PutNumberOrBlank
	adds r0, r6, #0
	adds r0, #0x28
	adds r0, r4, r0
	ldrb r2, [r5, #7]
	movs r1, #2
	bl PutNumberOrBlank
	adds r0, r6, #0
	adds r0, #0x2e
	adds r0, r4, r0
	ldrb r2, [r5, #8]
	movs r1, #2
	bl PutNumberOrBlank
	adds r0, r6, #0
	adds r0, #0x34
	adds r0, r4, r0
	ldrb r2, [r5, #9]
	movs r1, #2
	bl PutNumberOrBlank
	adds r0, r6, #0
	adds r0, #0x3a
	adds r4, r4, r0
	ldrb r2, [r5, #0xa]
	adds r0, r4, #0
	movs r1, #2
	bl PutNumberOrBlank
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08083FE8: .4byte 0x02022B0C
_08083FEC: .4byte 0x0203D4A0

	thumb_func_start sub_8083FF0
sub_8083FF0: @ 0x08083FF0
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	movs r0, #0
	bl InitBgs
	bl ResetTextFont
	bl ResetText
	movs r0, #0
	strh r0, [r6, #0x2a]
	ldr r4, _08084110 @ =gDispIo
	movs r2, #1
	ldrb r0, [r4, #1]
	orrs r0, r2
	movs r3, #2
	orrs r0, r3
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x11
	rsbs r1, r1, #0
	ands r0, r1
	strb r0, [r4, #1]
	adds r1, #0xd
	adds r0, r1, #0
	ldrb r5, [r4, #0xc]
	ands r0, r5
	orrs r0, r2
	strb r0, [r4, #0xc]
	adds r0, r1, #0
	ldrb r2, [r4, #0x10]
	ands r0, r2
	orrs r0, r3
	strb r0, [r4, #0x10]
	ldrb r5, [r4, #0x14]
	ands r1, r5
	strb r1, [r4, #0x14]
	movs r0, #3
	ldrb r1, [r4, #0x18]
	orrs r0, r1
	strb r0, [r4, #0x18]
	bl LoadUiFrameGraphics
	bl EnablePalSync
	ldr r0, _08084114 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _08084118 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0808411C @ =gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r0, _08084120 @ =gBg3Tm
	movs r1, #0
	bl TmFill
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r2, _08084124 @ =0x0000FFF8
	movs r0, #1
	movs r1, #8
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r2, [r4, #1]
	ands r0, r2
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r4, #1]
	movs r0, #2
	str r0, [sp]
	movs r0, #0
	movs r1, #2
	movs r2, #0x1e
	movs r3, #0x10
	bl sub_8041358
	movs r0, #0xf
	bl EnableBgSync
	ldr r5, _08084128 @ =0x020168F8
	movs r4, #4
_080840C6:
	adds r0, r5, #0
	movs r1, #0x1c
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _080840C6
	adds r0, r6, #0
	adds r0, #0x30
	adds r1, r6, #0
	adds r1, #0x2c
	ldrb r1, [r1]
	bl sub_8083BC4
	movs r0, #7
	movs r1, #0xb
	bl sub_8082E74
	ldr r0, _0808412C @ =sub_8083944
	bl sub_80832A0
	ldr r0, _08084128 @ =0x020168F8
	ldr r1, _08084130 @ =0x08679820
	bl sub_8083E70
	movs r0, #0
	movs r1, #0
	movs r2, #0xa
	bl sub_806EA24
	str r0, [r6, #0x44]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08084110: .4byte gDispIo
_08084114: .4byte gBg0Tm
_08084118: .4byte gBg1Tm
_0808411C: .4byte gBg2Tm
_08084120: .4byte gBg3Tm
_08084124: .4byte 0x0000FFF8
_08084128: .4byte 0x020168F8
_0808412C: .4byte sub_8083944
_08084130: .4byte 0x08679820

	thumb_func_start nullsub_43
nullsub_43: @ 0x08084134
	bx lr
	.align 2, 0

	thumb_func_start sub_8084138
sub_8084138: @ 0x08084138
	push {lr}
	ldr r0, [r0, #0x44]
	bl Proc_End
	ldr r2, _08084164 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	pop {r0}
	bx r0
	.align 2, 0
_08084164: .4byte gDispIo

	thumb_func_start sub_8084168
sub_8084168: @ 0x08084168
	push {r4, r5, r6, r7, lr}
	adds r1, r0, #0
	ldr r0, _08084184 @ =0x08679924
	bl SpawnProcLocking
	adds r7, r0, #0
	adds r1, r7, #0
	adds r1, #0x2c
	movs r0, #0
	strb r0, [r1]
	movs r4, #0
	adds r6, r1, #0
	b _08084190
	.align 2, 0
_08084184: .4byte 0x08679924
_08084188:
	ldrb r0, [r6]
	adds r0, #1
	strb r0, [r6]
	adds r4, r5, #0
_08084190:
	cmp r4, #4
	bgt _080841AC
	adds r5, r4, #1
	adds r0, r5, #0
	bl GetUnit
	lsls r2, r4, #2
	adds r1, r7, #0
	adds r1, #0x30
	adds r1, r1, r2
	str r0, [r1]
	ldr r0, [r0]
	cmp r0, #0
	bne _08084188
_080841AC:
	adds r0, r7, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_80841B4
sub_80841B4: @ 0x080841B4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080841E8 @ =0x08679924
	bl SpawnProcLocking
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x2c
	movs r0, #0
	strb r0, [r1]
	movs r1, #4
	adds r0, r2, #0
	adds r0, #0x40
_080841CE:
	str r4, [r0]
	subs r0, #4
	subs r1, #1
	cmp r1, #0
	bge _080841CE
	adds r1, r2, #0
	adds r1, #0x2c
	movs r0, #5
	strb r0, [r1]
	adds r0, r2, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080841E8: .4byte 0x08679924

	thumb_func_start sub_80841EC
sub_80841EC: @ 0x080841EC
	ldr r0, _080841F4 @ =0x0203D524
	movs r1, #0
	strb r1, [r0]
	bx lr
	.align 2, 0
_080841F4: .4byte 0x0203D524

	thumb_func_start nullsub_44
nullsub_44: @ 0x080841F8
	bx lr
	.align 2, 0

	thumb_func_start sub_80841FC
sub_80841FC: @ 0x080841FC
	push {r4, r5, lr}
	sub sp, #8
	ldr r0, _08084254 @ =0x12345678
	str r0, [sp]
	ldr r0, _08084258 @ =0x87654321
	str r0, [sp, #4]
	bl SetSramFastFunc
	ldr r2, _0808425C @ =0x04000200
	ldrh r0, [r2]
	movs r3, #0x80
	lsls r3, r3, #6
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	ldr r5, _08084260 @ =0x08689DD8
	ldr r1, [r5]
	ldr r4, _08084264 @ =0x00006EF4
	adds r1, r1, r4
	mov r0, sp
	movs r2, #4
	bl WriteSramFast
	ldr r2, _08084268 @ =ReadSramFast
	ldr r0, [r5]
	adds r0, r0, r4
	add r1, sp, #4
	ldr r3, [r2]
	movs r2, #4
	bl _call_via_r3
	ldr r3, _0808426C @ =0x0203D52E
	movs r2, #0
	ldr r1, [sp, #4]
	ldr r0, [sp]
	cmp r1, r0
	bne _08084248
	movs r2, #1
_08084248:
	strb r2, [r3]
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08084254: .4byte 0x12345678
_08084258: .4byte 0x87654321
_0808425C: .4byte 0x04000200
_08084260: .4byte 0x08689DD8
_08084264: .4byte 0x00006EF4
_08084268: .4byte ReadSramFast
_0808426C: .4byte 0x0203D52E

	thumb_func_start IsSramWorking
IsSramWorking: @ 0x08084270
	ldr r0, _0808427C @ =0x0203D52E
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bx lr
	.align 2, 0
_0808427C: .4byte 0x0203D52E

	thumb_func_start sub_8084280
sub_8084280: @ 0x08084280
	push {r4, r5, r6, lr}
	sub sp, #0x40
	movs r1, #1
	rsbs r1, r1, #0
	add r0, sp, #0x3c
_0808428A:
	str r1, [r0]
	subs r0, #4
	cmp r0, sp
	bge _0808428A
	movs r4, #0
	ldr r6, _080842B4 @ =0x08689DD8
	ldr r5, _080842B8 @ =0x000001FF
_08084298:
	lsls r0, r4, #6
	ldr r1, [r6]
	adds r1, r1, r0
	mov r0, sp
	movs r2, #0x40
	bl WriteAndVerifySramFast
	adds r4, #1
	cmp r4, r5
	ble _08084298
	add sp, #0x40
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080842B4: .4byte 0x08689DD8
_080842B8: .4byte 0x000001FF

	thumb_func_start ComputeChecksum16
ComputeChecksum16: @ 0x080842BC
	push {r4, lr}
	adds r2, r0, #0
	movs r3, #0
	movs r4, #0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	cmp r3, r1
	bge _080842DC
_080842CE:
	ldrh r0, [r2]
	adds r3, r3, r0
	eors r4, r0
	adds r2, #2
	subs r1, #1
	cmp r1, #0
	bne _080842CE
_080842DC:
	adds r0, r3, r4
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start LoadGlobalSaveInfo
LoadGlobalSaveInfo: @ 0x080842E8
	push {r4, lr}
	sub sp, #0x20
	adds r4, r0, #0
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08084358
	cmp r4, #0
	bne _080842FE
	mov r4, sp
_080842FE:
	ldr r1, _08084344 @ =ReadSramFast
	ldr r0, _08084348 @ =0x08689DD8
	ldr r0, [r0]
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0x20
	bl _call_via_r3
	ldr r1, _0808434C @ =0x08327314
	adds r0, r4, #0
	bl StringEquals
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08084358
	ldr r1, [r4, #8]
	ldr r0, _08084350 @ =0x00011217
	cmp r1, r0
	bne _08084358
	ldr r0, _08084354 @ =0x0000200A
	ldrh r1, [r4, #0xc]
	cmp r1, r0
	bne _08084358
	adds r0, r4, #0
	movs r1, #0x1c
	bl ComputeChecksum16
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r4, [r4, #0x1c]
	cmp r4, r0
	bne _08084358
	movs r0, #1
	b _0808435A
	.align 2, 0
_08084344: .4byte ReadSramFast
_08084348: .4byte 0x08689DD8
_0808434C: .4byte 0x08327314
_08084350: .4byte 0x00011217
_08084354: .4byte 0x0000200A
_08084358:
	movs r0, #0
_0808435A:
	add sp, #0x20
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start SaveGlobalSaveInfo
SaveGlobalSaveInfo: @ 0x08084364
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #0x1c
	bl ComputeChecksum16
	strh r0, [r4, #0x1c]
	ldr r0, _08084384 @ =0x08689DD8
	ldr r1, [r0]
	adds r0, r4, #0
	movs r2, #0x20
	bl WriteAndVerifySramFast
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08084384: .4byte 0x08689DD8

	thumb_func_start sub_8084388
sub_8084388: @ 0x08084388
	push {lr}
	ldr r1, _08084398 @ =0x08689DD8
	ldr r1, [r1]
	movs r2, #0x20
	bl WriteAndVerifySramFast
	pop {r0}
	bx r0
	.align 2, 0
_08084398: .4byte 0x08689DD8

	thumb_func_start sub_808439C
sub_808439C: @ 0x0808439C
	push {lr}
	sub sp, #0x20
	bl sub_8084280
	ldr r1, _08084408 @ =0x08327314
	mov r0, sp
	bl StringCopy
	ldr r0, _0808440C @ =0x00011217
	str r0, [sp, #8]
	mov r1, sp
	movs r3, #0
	ldr r0, _08084410 @ =0x0000200A
	strh r0, [r1, #0xc]
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r2, [r1, #0xe]
	ands r0, r2
	strb r0, [r1, #0xe]
	mov r2, sp
	movs r1, #5
	rsbs r1, r1, #0
	ands r1, r0
	strb r1, [r2, #0xe]
	mov r0, sp
	movs r2, #3
	rsbs r2, r2, #0
	ands r2, r1
	strb r2, [r0, #0xe]
	mov r1, sp
	movs r0, #9
	rsbs r0, r0, #0
	ands r0, r2
	strb r0, [r1, #0xe]
	movs r0, #0xf
	ldrh r2, [r1, #0xe]
	ands r0, r2
	strh r0, [r1, #0xe]
	mov r0, sp
	strb r3, [r0, #0x1f]
	strb r3, [r0, #0x1e]
	add r1, sp, #0x10
	movs r2, #0
	adds r0, #0x1b
_080843F4:
	strb r2, [r0]
	subs r0, #1
	cmp r0, r1
	bge _080843F4
	mov r0, sp
	bl SaveGlobalSaveInfo
	add sp, #0x20
	pop {r0}
	bx r0
	.align 2, 0
_08084408: .4byte 0x08327314
_0808440C: .4byte 0x00011217
_08084410: .4byte 0x0000200A

	thumb_func_start sub_8084414
sub_8084414: @ 0x08084414
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldr r1, _08084424 @ =0x08689DD8
	ldr r1, [r1]
	adds r1, r1, r0
	adds r0, r1, #0
	bx lr
	.align 2, 0
_08084424: .4byte 0x08689DD8

	thumb_func_start sub_8084428
sub_8084428: @ 0x08084428
	ldr r1, _08084434 @ =0x08689DD8
	ldr r1, [r1]
	subs r0, r0, r1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	bx lr
	.align 2, 0
_08084434: .4byte 0x08689DD8

	thumb_func_start sub_8084438
sub_8084438: @ 0x08084438
	push {r4, r5, lr}
	sub sp, #0x10
	adds r4, r0, #0
	adds r5, r1, #0
	cmp r4, #0
	bne _08084446
	mov r4, sp
_08084446:
	ldr r2, _08084474 @ =ReadSramFast
	ldr r0, _08084478 @ =0x08689DD8
	lsls r1, r5, #4
	adds r1, #0x20
	ldr r0, [r0]
	adds r0, r0, r1
	ldr r3, [r2]
	adds r1, r4, #0
	movs r2, #0x10
	bl _call_via_r3
	ldr r0, _0808447C @ =0x0000200A
	ldrh r1, [r4, #4]
	cmp r1, r0
	bne _080844C8
	cmp r5, #6
	bhi _080844C8
	lsls r0, r5, #2
	ldr r1, _08084480 @ =_08084484
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08084474: .4byte ReadSramFast
_08084478: .4byte 0x08689DD8
_0808447C: .4byte 0x0000200A
_08084480: .4byte _08084484
_08084484: @ jump table
	.4byte _080844A0 @ case 0
	.4byte _080844A0 @ case 1
	.4byte _080844A0 @ case 2
	.4byte _080844A0 @ case 3
	.4byte _080844A0 @ case 4
	.4byte _080844A8 @ case 5
	.4byte _080844B0 @ case 6
_080844A0:
	ldr r1, _080844A4 @ =0x00011217
	b _080844B2
	.align 2, 0
_080844A4: .4byte 0x00011217
_080844A8:
	ldr r1, _080844AC @ =0x00020112
	b _080844B2
	.align 2, 0
_080844AC: .4byte 0x00020112
_080844B0:
	ldr r1, _080844C4 @ =0x00020223
_080844B2:
	ldr r0, [r4]
	cmp r0, r1
	bne _080844C8
	adds r0, r4, #0
	bl sub_8085F74
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	b _080844CA
	.align 2, 0
_080844C4: .4byte 0x00020223
_080844C8:
	movs r0, #0
_080844CA:
	add sp, #0x10
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80844D4
sub_80844D4: @ 0x080844D4
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	movs r7, #0
	movs r5, #0
	ldr r0, _08084504 @ =0x0000200A
	strh r0, [r4, #4]
	adds r0, r6, #0
	bl sub_8084560
	strh r0, [r4, #8]
	cmp r6, #6
	bgt _08084556
	ldrb r0, [r4, #6]
	cmp r0, #2
	beq _08084524
	cmp r0, #2
	bgt _08084508
	cmp r0, #0
	beq _08084512
	cmp r0, #1
	beq _0808451A
	b _08084556
	.align 2, 0
_08084504: .4byte 0x0000200A
_08084508:
	cmp r0, #3
	beq _08084530
	cmp r0, #0xff
	beq _08084538
	b _08084556
_08084512:
	movs r0, #0xdf
	lsls r0, r0, #4
	strh r0, [r4, #0xa]
	b _0808453E
_0808451A:
	ldr r0, _08084520 @ =0x00001DAC
	strh r0, [r4, #0xa]
	b _0808453E
	.align 2, 0
_08084520: .4byte 0x00001DAC
_08084524:
	ldr r0, _0808452C @ =0x0000093C
	strh r0, [r4, #0xa]
	b _0808453E
	.align 2, 0
_0808452C: .4byte 0x0000093C
_08084530:
	movs r0, #0x80
	lsls r0, r0, #5
	strh r0, [r4, #0xa]
	b _0808453E
_08084538:
	strh r5, [r4, #0xa]
	strh r5, [r4, #8]
	strh r5, [r4, #4]
_0808453E:
	adds r0, r4, #0
	bl sub_8085F98
	ldr r0, _0808455C @ =0x08689DD8
	lsls r2, r6, #4
	adds r2, #0x20
	ldr r1, [r0]
	adds r1, r1, r2
	adds r0, r4, #0
	movs r2, #0x10
	bl WriteAndVerifySramFast
_08084556:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808455C: .4byte 0x08689DD8

	thumb_func_start sub_8084560
sub_8084560: @ 0x08084560
	cmp r0, #6
	bhi _08084608
	lsls r0, r0, #2
	ldr r1, _08084570 @ =_08084574
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08084570: .4byte _08084574
_08084574: @ jump table
	.4byte _08084590 @ case 0
	.4byte _080845A4 @ case 1
	.4byte _080845B8 @ case 2
	.4byte _080845CC @ case 3
	.4byte _080845D8 @ case 4
	.4byte _080845EC @ case 5
	.4byte _08084600 @ case 6
_08084590:
	ldr r0, _0808459C @ =0x08689DD8
	ldr r0, [r0]
	ldr r1, _080845A0 @ =0x00003BE8
	adds r0, r0, r1
	b _0808460A
	.align 2, 0
_0808459C: .4byte 0x08689DD8
_080845A0: .4byte 0x00003BE8
_080845A4:
	ldr r0, _080845B0 @ =0x08689DD8
	ldr r0, [r0]
	ldr r1, _080845B4 @ =0x000049D8
	adds r0, r0, r1
	b _0808460A
	.align 2, 0
_080845B0: .4byte 0x08689DD8
_080845B4: .4byte 0x000049D8
_080845B8:
	ldr r0, _080845C4 @ =0x08689DD8
	ldr r0, [r0]
	ldr r1, _080845C8 @ =0x000057C8
	adds r0, r0, r1
	b _0808460A
	.align 2, 0
_080845C4: .4byte 0x08689DD8
_080845C8: .4byte 0x000057C8
_080845CC:
	ldr r0, _080845D4 @ =0x08689DD8
	ldr r0, [r0]
	adds r0, #0x90
	b _0808460A
	.align 2, 0
_080845D4: .4byte 0x08689DD8
_080845D8:
	ldr r0, _080845E4 @ =0x08689DD8
	ldr r0, [r0]
	ldr r1, _080845E8 @ =0x00001E3C
	adds r0, r0, r1
	b _0808460A
	.align 2, 0
_080845E4: .4byte 0x08689DD8
_080845E8: .4byte 0x00001E3C
_080845EC:
	ldr r0, _080845F8 @ =0x08689DD8
	ldr r0, [r0]
	ldr r1, _080845FC @ =0x000065B8
	adds r0, r0, r1
	b _0808460A
	.align 2, 0
_080845F8: .4byte 0x08689DD8
_080845FC: .4byte 0x000065B8
_08084600:
	ldr r0, _08084604 @ =0x0E007000
	b _0808460A
	.align 2, 0
_08084604: .4byte 0x0E007000
_08084608:
	movs r0, #0
_0808460A:
	bx lr

	thumb_func_start sub_808460C
sub_808460C: @ 0x0808460C
	push {lr}
	sub sp, #0x10
	adds r1, r0, #0
	mov r0, sp
	bl sub_8084438
	mov r0, sp
	ldrh r0, [r0, #8]
	bl sub_8084414
	add sp, #0x10
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8084628
sub_8084628: @ 0x08084628
	push {r4, r5, lr}
	adds r4, r0, #0
	bl GetChapterEidData
	adds r5, r0, #0
	bl sub_806BA9C
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	bl WriteAndVerifySramFast
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8084648
sub_8084648: @ 0x08084648
	push {r4, r5, lr}
	adds r4, r0, #0
	bl GetGlobalEidData
	adds r5, r0, #0
	bl sub_806BA90
	adds r2, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	bl WriteAndVerifySramFast
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8084668
sub_8084668: @ 0x08084668
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r4, _0808468C @ =ReadSramFast
	bl GetChapterEidData
	adds r5, r0, #0
	bl sub_806BA9C
	adds r2, r0, #0
	ldr r3, [r4]
	adds r0, r6, #0
	adds r1, r5, #0
	bl _call_via_r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808468C: .4byte ReadSramFast

	thumb_func_start sub_8084690
sub_8084690: @ 0x08084690
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r4, _080846B4 @ =ReadSramFast
	bl GetGlobalEidData
	adds r5, r0, #0
	bl sub_806BA90
	adds r2, r0, #0
	ldr r3, [r4]
	adds r0, r6, #0
	adds r1, r5, #0
	bl _call_via_r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080846B4: .4byte ReadSramFast

	thumb_func_start sub_80846B8
sub_80846B8: @ 0x080846B8
	push {r4, lr}
	adds r4, r0, #0
	bl GetSupplyItems
	adds r1, r4, #0
	movs r2, #0xc8
	bl WriteAndVerifySramFast
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80846D0
sub_80846D0: @ 0x080846D0
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _080846EC @ =ReadSramFast
	bl GetSupplyItems
	adds r1, r0, #0
	ldr r3, [r4]
	adds r0, r5, #0
	movs r2, #0xc8
	bl _call_via_r3
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080846EC: .4byte ReadSramFast

	thumb_func_start sub_80846F0
sub_80846F0: @ 0x080846F0
	push {lr}
	sub sp, #0x20
	mov r0, sp
	bl LoadGlobalSaveInfo
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08084704
	movs r0, #0
	b _0808470C
_08084704:
	mov r0, sp
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x1f
	lsrs r0, r0, #0x1f
_0808470C:
	add sp, #0x20
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8084714
sub_8084714: @ 0x08084714
	movs r0, #1
	bx lr

	thumb_func_start sub_8084718
sub_8084718: @ 0x08084718
	push {r4, lr}
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08084744
	movs r4, #0
_08084726:
	adds r0, r4, #0
	bl sub_8085290
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08084736
	movs r0, #1
	b _08084744
_08084736:
	adds r4, #1
	cmp r4, #2
	ble _08084726
	bl sub_8086558
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
_08084744:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_808474C
sub_808474C: @ 0x0808474C
	push {lr}
	bl sub_80846F0
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_808475C
sub_808475C: @ 0x0808475C
	push {r4, lr}
	sub sp, #0x20
	movs r4, #0
_08084762:
	adds r0, r4, #0
	bl sub_808525C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08084786
	adds r0, r4, #0
	mov r1, sp
	bl sub_8085270
	mov r1, sp
	movs r0, #0x20
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	beq _08084786
	movs r0, #1
	b _0808478E
_08084786:
	adds r4, #1
	cmp r4, #2
	ble _08084762
	movs r0, #0
_0808478E:
	add sp, #0x20
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8084798
sub_8084798: @ 0x08084798
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	mov r0, sp
	movs r4, #0
	strh r4, [r0]
	ldr r1, _080847FC @ =0x0203D534
	ldr r2, _08084800 @ =0x01000230
	bl CpuSet
	mov r0, sp
	adds r0, #2
	strh r4, [r0]
	ldr r1, _08084804 @ =0x0203D994
	ldr r2, _08084808 @ =0x01000040
	bl CpuSet
	ldr r0, _0808480C @ =0x00000908
	adds r4, r6, r0
	movs r5, #0x45
_080847C0:
	ldr r0, _080847FC @ =0x0203D534
	adds r1, r4, #0
	movs r2, #0x10
	bl WriteAndVerifySramFast
	adds r4, #0x10
	subs r5, #1
	cmp r5, #0
	bge _080847C0
	ldr r2, _08084810 @ =0x00000D68
	adds r4, r6, r2
	movs r5, #0x1f
_080847D8:
	ldr r0, _08084804 @ =0x0203D994
	adds r1, r4, #0
	movs r2, #4
	bl WriteAndVerifySramFast
	adds r4, #4
	subs r5, #1
	cmp r5, #0
	bge _080847D8
	ldr r1, _08084814 @ =0x0203D530
	ldr r2, _0808480C @ =0x00000908
	adds r0, r6, r2
	str r0, [r1]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080847FC: .4byte 0x0203D534
_08084800: .4byte 0x01000230
_08084804: .4byte 0x0203D994
_08084808: .4byte 0x01000040
_0808480C: .4byte 0x00000908
_08084810: .4byte 0x00000D68
_08084814: .4byte 0x0203D530

	thumb_func_start sub_8084818
sub_8084818: @ 0x08084818
	push {lr}
	sub sp, #4
	mov r1, sp
	movs r0, #0
	strh r0, [r1]
	ldr r1, _08084834 @ =0x0203D534
	ldr r2, _08084838 @ =0x01000230
	mov r0, sp
	bl CpuSet
	add sp, #4
	pop {r0}
	bx r0
	.align 2, 0
_08084834: .4byte 0x0203D534
_08084838: .4byte 0x01000230

	thumb_func_start sub_808483C
sub_808483C: @ 0x0808483C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0808485C @ =ReadSramFast
	ldr r1, _08084860 @ =0x0203D534
	movs r2, #0x8c
	lsls r2, r2, #3
	ldr r3, [r0]
	adds r0, r4, #0
	bl _call_via_r3
	ldr r0, _08084864 @ =0x0203D530
	str r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808485C: .4byte ReadSramFast
_08084860: .4byte 0x0203D534
_08084864: .4byte 0x0203D530

	thumb_func_start sub_8084868
sub_8084868: @ 0x08084868
	push {lr}
	ldr r2, _0808487C @ =ReadSramFast
	ldr r1, _08084880 @ =0x0203D994
	ldr r3, [r2]
	movs r2, #0x80
	bl _call_via_r3
	pop {r0}
	bx r0
	.align 2, 0
_0808487C: .4byte ReadSramFast
_08084880: .4byte 0x0203D994

	thumb_func_start sub_8084884
sub_8084884: @ 0x08084884
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080848A0 @ =0x0203D534
	movs r2, #0x8c
	lsls r2, r2, #3
	adds r1, r4, #0
	bl WriteAndVerifySramFast
	ldr r0, _080848A4 @ =0x0203D530
	str r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080848A0: .4byte 0x0203D534
_080848A4: .4byte 0x0203D530

	thumb_func_start sub_80848A8
sub_80848A8: @ 0x080848A8
	push {lr}
	adds r1, r0, #0
	ldr r0, _080848B8 @ =0x0203D994
	movs r2, #0x80
	bl WriteAndVerifySramFast
	pop {r0}
	bx r0
	.align 2, 0
_080848B8: .4byte 0x0203D994

	thumb_func_start sub_80848BC
sub_80848BC: @ 0x080848BC
	lsls r0, r0, #2
	ldr r1, _080848C4 @ =0x0203D994
	adds r0, r0, r1
	bx lr
	.align 2, 0
_080848C4: .4byte 0x0203D994

	thumb_func_start sub_80848C8
sub_80848C8: @ 0x080848C8
	ldr r1, _080848D8 @ =0x0000FFC0
	ldrh r0, [r0]
	ands r1, r0
	rsbs r0, r1, #0
	orrs r0, r1
	lsrs r0, r0, #0x1f
	bx lr
	.align 2, 0
_080848D8: .4byte 0x0000FFC0

	thumb_func_start sub_80848DC
sub_80848DC: @ 0x080848DC
	push {r4, lr}
	movs r0, #0
	bl sub_80848BC
	adds r1, r0, #0
	movs r2, #0
	ldr r3, _080848EC @ =0x0000FFC0
	b _080848F4
	.align 2, 0
_080848EC: .4byte 0x0000FFC0
_080848F0:
	adds r2, #1
	adds r1, #4
_080848F4:
	adds r0, r3, #0
	ldrh r4, [r1]
	ands r0, r4
	cmp r0, #0
	bne _080848F0
	adds r0, r2, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8084908
sub_8084908: @ 0x08084908
	push {r4, r5, lr}
	adds r5, r0, #0
	bl sub_80848DC
	bl sub_80848BC
	adds r4, r0, #0
	bl GetGameTime
	ldr r1, [r5, #4]
	subs r0, r0, r1
	movs r1, #0xb4
	bl __udivsi3
	adds r2, r0, #0
	ldr r0, _08084958 @ =0x0000EA60
	cmp r2, r0
	ble _0808492E
	adds r2, r0, #0
_0808492E:
	movs r1, #0x3f
	ldrb r0, [r5, #0xe]
	ands r1, r0
	movs r0, #0x40
	rsbs r0, r0, #0
	ldrb r3, [r4]
	ands r0, r3
	orrs r0, r1
	strb r0, [r4]
	ldrh r5, [r5, #0x10]
	lsls r1, r5, #6
	movs r0, #0x3f
	ldrh r3, [r4]
	ands r0, r3
	orrs r0, r1
	strh r0, [r4]
	strh r2, [r4, #2]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08084958: .4byte 0x0000EA60

	thumb_func_start sub_808495C
sub_808495C: @ 0x0808495C
	push {r4, lr}
	adds r1, r0, #0
	movs r0, #0xc0
	ldrb r2, [r1, #0xb]
	ands r0, r2
	cmp r0, #0
	bne _080849A6
	ldr r0, [r1]
	ldrb r0, [r0, #4]
	adds r4, r0, #0
	cmp r0, #0x45
	bhi _080849A6
	bl GetPersonInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080849A6
	lsls r1, r4, #4
	ldr r0, _080849AC @ =0x0203D524
	adds r2, r1, r0
	cmp r2, #0
	beq _080849A6
	ldrh r3, [r2, #0xa]
	lsls r0, r3, #0x12
	lsrs r1, r0, #0x14
	ldr r0, _080849B0 @ =0x00000F9F
	cmp r1, r0
	bgt _080849A6
	adds r0, r1, #1
	ldr r4, _080849B4 @ =0x00000FFF
	adds r1, r4, #0
	ands r0, r1
	lsls r0, r0, #2
	ldr r1, _080849B8 @ =0xFFFFC003
	ands r1, r3
	orrs r1, r0
	strh r1, [r2, #0xa]
_080849A6:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080849AC: .4byte 0x0203D524
_080849B0: .4byte 0x00000F9F
_080849B4: .4byte 0x00000FFF
_080849B8: .4byte 0xFFFFC003

	thumb_func_start sub_80849BC
sub_80849BC: @ 0x080849BC
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	cmp r0, #0x45
	bhi _080849F8
	bl GetPersonInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _080849F8
	lsls r1, r4, #4
	ldr r0, _08084A00 @ =0x0203D524
	adds r2, r1, r0
	cmp r2, #0
	beq _080849F8
	ldr r3, [r2, #8]
	lsls r0, r3, #0xe
	lsrs r1, r0, #0x16
	ldr r0, _08084A04 @ =0x000003E7
	cmp r1, r0
	bgt _080849F8
	adds r0, r1, #1
	ldr r1, _08084A08 @ =0x000003FF
	ands r0, r1
	lsls r0, r0, #8
	ldr r1, _08084A0C @ =0xFFFC00FF
	ands r1, r3
	orrs r1, r0
	str r1, [r2, #8]
_080849F8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08084A00: .4byte 0x0203D524
_08084A04: .4byte 0x000003E7
_08084A08: .4byte 0x000003FF
_08084A0C: .4byte 0xFFFC00FF

	thumb_func_start sub_8084A10
sub_8084A10: @ 0x08084A10
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r5, r4, #0
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08084AD0
	cmp r4, #0x45
	bhi _08084AD0
	adds r0, r4, #0
	bl GetPersonInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _08084AD0
	lsls r6, r5, #4
	ldr r0, _08084AD8 @ =0x0203D524
	adds r5, r6, r0
	cmp r5, #0
	beq _08084AD0
	ldr r1, _08084ADC @ =gBmSt
	adds r0, r1, #0
	adds r0, #0x3c
	ldrb r0, [r0]
	cmp r0, #1
	beq _08084AD0
	ldr r7, _08084AE0 @ =gPlaySt
	ldrb r3, [r7, #0x14]
	movs r0, #8
	ands r0, r3
	cmp r0, #0
	bne _08084AD0
	ldrb r1, [r1, #4]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	bne _08084AD0
	movs r2, #0x20
	adds r0, r2, #0
	ands r0, r1
	cmp r0, #0
	bne _08084AD0
	adds r0, r2, #0
	ands r0, r3
	cmp r0, #0
	bne _08084AD0
	ldrb r0, [r5]
	cmp r0, #0xc7
	bhi _08084AD0
	adds r0, #1
	strb r0, [r5]
	bl sub_8085EF4
	adds r4, r0, #0
	adds r4, #3
	adds r0, r4, #0
	bl sub_8084560
	adds r1, r0, #0
	ldr r2, _08084AE4 @ =0x000018B0
	adds r0, r6, r2
	adds r1, r1, r0
	adds r0, r5, #0
	movs r2, #1
	bl WriteAndVerifySramFast
	mov r0, sp
	adds r1, r4, #0
	bl sub_8084438
	mov r0, sp
	adds r1, r4, #0
	bl sub_80844D4
	ldrb r0, [r7, #0xc]
	bl sub_8084560
	adds r1, r0, #0
	ldr r2, _08084AE8 @ =0x000008F8
	adds r0, r6, r2
	adds r1, r1, r0
	adds r0, r5, #0
	movs r2, #1
	bl WriteAndVerifySramFast
	ldrb r1, [r7, #0xc]
	mov r0, sp
	bl sub_8084438
	ldrb r1, [r7, #0xc]
	mov r0, sp
	bl sub_80844D4
_08084AD0:
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08084AD8: .4byte 0x0203D524
_08084ADC: .4byte gBmSt
_08084AE0: .4byte gPlaySt
_08084AE4: .4byte 0x000018B0
_08084AE8: .4byte 0x000008F8

	thumb_func_start sub_8084AEC
sub_8084AEC: @ 0x08084AEC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r7, r2, #0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	lsls r1, r1, #0x18
	mov r8, r1
	lsrs r6, r1, #0x18
	cmp r0, #0x45
	bhi _08084B70
	bl GetPersonInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _08084B70
	lsls r1, r4, #4
	ldr r0, _08084B7C @ =0x0203D524
	adds r5, r1, r0
	cmp r5, #0
	beq _08084B70
	ldr r2, _08084B80 @ =gPlaySt
	movs r1, #0xe
	ldrsb r1, [r2, r1]
	movs r0, #0x3f
	ands r1, r0
	movs r0, #0x40
	rsbs r0, r0, #0
	ldrb r3, [r5, #3]
	ands r0, r3
	orrs r0, r1
	strb r0, [r5, #3]
	ldrh r3, [r2, #0x10]
	movs r4, #3
	adds r2, r3, #0
	ands r2, r4
	lsls r2, r2, #6
	movs r1, #0x3f
	ands r0, r1
	orrs r0, r2
	strb r0, [r5, #3]
	lsrs r3, r3, #2
	strb r3, [r5, #4]
	ands r6, r4
	lsls r0, r6, #6
	ldrb r2, [r5, #0xb]
	ands r1, r2
	orrs r1, r0
	strb r1, [r5, #0xb]
	mov r3, r8
	lsrs r1, r3, #0x1a
	movs r0, #0x80
	rsbs r0, r0, #0
	ldrb r2, [r5, #0xc]
	ands r0, r2
	orrs r0, r1
	strb r0, [r5, #0xc]
	movs r0, #0xf
	ands r7, r0
	movs r0, #0x10
	rsbs r0, r0, #0
	ldrb r3, [r5, #7]
	ands r0, r3
	orrs r0, r7
	strb r0, [r5, #7]
_08084B70:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08084B7C: .4byte 0x0203D524
_08084B80: .4byte gPlaySt

	thumb_func_start sub_8084B84
sub_8084B84: @ 0x08084B84
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	cmp r0, #0x45
	bhi _08084BAE
	bl GetPersonInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _08084BAE
	lsls r1, r4, #4
	ldr r0, _08084BB4 @ =0x0203D524
	adds r1, r1, r0
	cmp r1, #0
	beq _08084BAE
	ldrb r0, [r1, #1]
	cmp r0, #0xc7
	bhi _08084BAE
	adds r0, #1
	strb r0, [r1, #1]
_08084BAE:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08084BB4: .4byte 0x0203D524

	thumb_func_start sub_8084BB8
sub_8084BB8: @ 0x08084BB8
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	cmp r0, #0x45
	bhi _08084BE2
	bl GetPersonInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _08084BE2
	lsls r1, r4, #4
	ldr r0, _08084BE8 @ =0x0203D524
	adds r1, r1, r0
	cmp r1, #0
	beq _08084BE2
	ldrb r0, [r1, #2]
	cmp r0, #0xc7
	bhi _08084BE2
	adds r0, #1
	strb r0, [r1, #2]
_08084BE2:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08084BE8: .4byte 0x0203D524

	thumb_func_start sub_8084BEC
sub_8084BEC: @ 0x08084BEC
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	cmp r0, #0x45
	bhi _08084C26
	bl GetPersonInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _08084C26
	lsls r1, r4, #4
	ldr r0, _08084C2C @ =0x0203D524
	adds r2, r1, r0
	cmp r2, #0
	beq _08084C26
	ldrb r3, [r2, #5]
	lsls r0, r3, #0x1a
	lsrs r0, r0, #0x1a
	cmp r0, #0x31
	bgt _08084C26
	adds r1, r0, #1
	movs r0, #0x3f
	ands r1, r0
	movs r0, #0x40
	rsbs r0, r0, #0
	ands r0, r3
	orrs r0, r1
	strb r0, [r2, #5]
_08084C26:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08084C2C: .4byte 0x0203D524

	thumb_func_start PidStatsAddSquaresMoved
PidStatsAddSquaresMoved: @ 0x08084C30
	push {r4, r5, lr}
	adds r5, r1, #0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	cmp r0, #0x45
	bhi _08084C72
	bl GetPersonInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _08084C72
	lsls r1, r4, #4
	ldr r0, _08084C78 @ =0x0203D524
	adds r2, r1, r0
	cmp r2, #0
	beq _08084C72
	ldr r3, [r2, #4]
	lsls r0, r3, #8
	lsrs r0, r0, #0x16
	adds r0, r0, r5
	movs r1, #0xfa
	lsls r1, r1, #2
	cmp r0, r1
	ble _08084C64
	adds r0, r1, #0
_08084C64:
	ldr r1, _08084C7C @ =0x000003FF
	ands r1, r0
	lsls r1, r1, #0xe
	ldr r0, _08084C80 @ =0xFF003FFF
	ands r0, r3
	orrs r0, r1
	str r0, [r2, #4]
_08084C72:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08084C78: .4byte 0x0203D524
_08084C7C: .4byte 0x000003FF
_08084C80: .4byte 0xFF003FFF

	thumb_func_start PidStatsAddExpGained
PidStatsAddExpGained: @ 0x08084C84
	push {r4, r5, lr}
	adds r5, r1, #0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	cmp r0, #0x45
	bhi _08084CCE
	bl GetPersonInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _08084CCE
	lsls r1, r4, #4
	ldr r0, _08084CD4 @ =0x0203D524
	adds r3, r1, r0
	cmp r3, #0
	beq _08084CCE
	ldrb r4, [r3, #7]
	lsrs r1, r4, #4
	ldrb r2, [r3, #8]
	lsls r0, r2, #4
	orrs r0, r1
	adds r2, r0, r5
	movs r0, #0xfa
	lsls r0, r0, #4
	cmp r2, r0
	ble _08084CBC
	adds r2, r0, #0
_08084CBC:
	movs r0, #0xf
	adds r1, r2, #0
	ands r1, r0
	lsls r1, r1, #4
	ands r0, r4
	orrs r0, r1
	strb r0, [r3, #7]
	lsrs r0, r2, #4
	strb r0, [r3, #8]
_08084CCE:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08084CD4: .4byte 0x0203D524

	thumb_func_start sub_8084CD8
sub_8084CD8: @ 0x08084CD8
	push {r4, lr}
	movs r3, #0
	ldr r2, _08084CF8 @ =0x0203D534
	movs r1, #0x45
_08084CE0:
	ldrh r4, [r2, #0xa]
	lsls r0, r4, #0x12
	lsrs r0, r0, #0x14
	adds r3, r3, r0
	adds r2, #0x10
	subs r1, #1
	cmp r1, #0
	bge _08084CE0
	adds r0, r3, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08084CF8: .4byte 0x0203D534

	thumb_func_start sub_8084CFC
sub_8084CFC: @ 0x08084CFC
	movs r3, #0
	ldr r2, _08084D18 @ =0x0203D534
	movs r1, #0x45
_08084D02:
	ldr r0, [r2, #8]
	lsls r0, r0, #0xe
	lsrs r0, r0, #0x16
	adds r3, r3, r0
	adds r2, #0x10
	subs r1, #1
	cmp r1, #0
	bge _08084D02
	adds r0, r3, #0
	bx lr
	.align 2, 0
_08084D18: .4byte 0x0203D534

	thumb_func_start sub_8084D1C
sub_8084D1C: @ 0x08084D1C
	movs r0, #0
	ldr r2, _08084D30 @ =0x0203D534
	movs r1, #0x45
_08084D22:
	ldrb r3, [r2]
	adds r0, r3, r0
	adds r2, #0x10
	subs r1, #1
	cmp r1, #0
	bge _08084D22
	bx lr
	.align 2, 0
_08084D30: .4byte 0x0203D534

	thumb_func_start sub_8084D34
sub_8084D34: @ 0x08084D34
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r0, _08084D60 @ =0x0203D534
	adds r4, r0, #7
	movs r5, #0x45
_08084D3E:
	ldrb r0, [r4]
	lsrs r1, r0, #4
	ldrb r2, [r4, #1]
	lsls r0, r2, #4
	orrs r0, r1
	movs r1, #0x64
	bl __divsi3
	adds r6, r6, r0
	adds r4, #0x10
	subs r5, #1
	cmp r5, #0
	bge _08084D3E
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_08084D60: .4byte 0x0203D534

	thumb_func_start sub_8084D64
sub_8084D64: @ 0x08084D64
	push {r4, r5, r6, r7, lr}
	movs r7, #0
	movs r5, #0
	ldr r4, _08084DC0 @ =gBattleUnitA
	adds r0, r4, #0
	bl GetUnitCurrentHp
	cmp r0, #0
	bne _08084D7A
	adds r7, r4, #0
	ldr r5, _08084DC4 @ =gBattleUnitB
_08084D7A:
	ldr r6, _08084DC4 @ =gBattleUnitB
	adds r0, r6, #0
	bl GetUnitCurrentHp
	cmp r0, #0
	bne _08084D8A
	adds r7, r6, #0
	adds r5, r4, #0
_08084D8A:
	cmp r7, #0
	beq _08084DBA
	cmp r5, #0
	beq _08084DA4
	movs r0, #0xc0
	ldrb r1, [r5, #0xb]
	ands r0, r1
	cmp r0, #0
	bne _08084DA4
	ldr r0, [r5]
	ldrb r0, [r0, #4]
	bl sub_80849BC
_08084DA4:
	cmp r7, #0
	beq _08084DBA
	movs r0, #0xc0
	ldrb r1, [r7, #0xb]
	ands r0, r1
	cmp r0, #0
	bne _08084DBA
	ldr r0, [r7]
	ldrb r0, [r0, #4]
	bl sub_8084A10
_08084DBA:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08084DC0: .4byte gBattleUnitA
_08084DC4: .4byte gBattleUnitB

	thumb_func_start sub_8084DC8
sub_8084DC8: @ 0x08084DC8
	push {r4, r5, r6, lr}
	sub sp, #0x40
	adds r6, r0, #0
	mov r0, sp
	bl LoadGlobalSaveInfo
	movs r4, #0
	add r1, sp, #0x10
_08084DD8:
	adds r0, r1, r4
	ldrb r0, [r0]
	cmp r0, r6
	beq _08084E04
	adds r4, #1
	cmp r4, #0xb
	ble _08084DD8
	movs r4, #0
	add r5, sp, #0x20
_08084DEA:
	adds r0, r4, #0
	bl sub_808525C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08084E08
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_8085270
	ldrb r0, [r5, #0x18]
	cmp r0, r6
	bne _08084E08
_08084E04:
	movs r0, #0
	b _08084E10
_08084E08:
	adds r4, #1
	cmp r4, #2
	ble _08084DEA
	movs r0, #1
_08084E10:
	add sp, #0x40
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_8084E18
sub_8084E18: @ 0x08084E18
	push {r4, lr}
	movs r4, #1
_08084E1C:
	adds r0, r4, #0
	bl sub_8084DC8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08084E2C
	adds r0, r4, #0
	b _08084E32
_08084E2C:
	adds r4, #1
	cmp r4, #0xff
	ble _08084E1C
_08084E32:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start GetGlobalCompletedPlaythroughCount
GetGlobalCompletedPlaythroughCount: @ 0x08084E38
	push {r4, lr}
	sub sp, #0x20
	movs r4, #0
	mov r0, sp
	bl LoadGlobalSaveInfo
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08084E4E
	movs r0, #0
	b _08084E64
_08084E4E:
	movs r1, #0
	add r2, sp, #0x10
_08084E52:
	adds r0, r2, r1
	ldrb r0, [r0]
	cmp r0, #0
	beq _08084E5C
	adds r4, #1
_08084E5C:
	adds r1, #1
	cmp r1, #0xb
	ble _08084E52
	adds r0, r4, #0
_08084E64:
	add sp, #0x20
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start RegisterCompletedPlaythrough
RegisterCompletedPlaythrough: @ 0x08084E6C
	push {r4, lr}
	movs r3, #0
	adds r4, r0, #0
	adds r4, #0x10
	adds r2, r4, #0
_08084E76:
	adds r0, r2, r3
	ldrb r0, [r0]
	cmp r0, r1
	beq _08084E9A
	adds r3, #1
	cmp r3, #0xb
	ble _08084E76
	movs r3, #0
_08084E86:
	adds r2, r4, r3
	ldrb r0, [r2]
	cmp r0, #0
	bne _08084E94
	strb r1, [r2]
	movs r0, #1
	b _08084E9C
_08084E94:
	adds r3, #1
	cmp r3, #0xb
	ble _08084E86
_08084E9A:
	movs r0, #0
_08084E9C:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8084EA4
sub_8084EA4: @ 0x08084EA4
	push {r4, lr}
	sub sp, #0x20
	mov r0, sp
	bl LoadGlobalSaveInfo
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08084EBE
	bl sub_808439C
	mov r0, sp
	bl LoadGlobalSaveInfo
_08084EBE:
	ldr r4, _08084EFC @ =gPlaySt
	ldrb r1, [r4, #0x18]
	mov r0, sp
	bl RegisterCompletedPlaythrough
	mov r1, sp
	movs r0, #1
	ldrb r2, [r1, #0xe]
	orrs r2, r0
	strb r2, [r1, #0xe]
	movs r0, #0x40
	ldrb r1, [r4, #0x14]
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	rsbs r0, r0, #0
	asrs r1, r0, #0x1f
	movs r0, #2
	ands r1, r0
	ldrb r4, [r4, #0xe]
	cmp r4, #0x19
	bne _08084EEC
	adds r1, #1
_08084EEC:
	cmp r1, #2
	beq _08084F0C
	cmp r1, #2
	bgt _08084F00
	cmp r1, #1
	beq _08084F06
	b _08084F2C
	.align 2, 0
_08084EFC: .4byte gPlaySt
_08084F00:
	cmp r1, #3
	beq _08084F16
	b _08084F2C
_08084F06:
	mov r1, sp
	movs r0, #4
	b _08084F10
_08084F0C:
	mov r1, sp
	movs r0, #2
_08084F10:
	orrs r2, r0
	strb r2, [r1, #0xe]
	b _08084F2C
_08084F16:
	mov r1, sp
	movs r0, #8
	orrs r0, r2
	strb r0, [r1, #0xe]
	mov r2, sp
	movs r1, #2
	orrs r0, r1
	strb r0, [r2, #0xe]
	movs r1, #4
	orrs r0, r1
	strb r0, [r2, #0xe]
_08084F2C:
	mov r0, sp
	bl SaveGlobalSaveInfo
	ldr r0, _08084F44 @ =gPlaySt
	movs r1, #0x20
	ldrb r2, [r0, #0x14]
	orrs r1, r2
	strb r1, [r0, #0x14]
	add sp, #0x20
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08084F44: .4byte gPlaySt

	thumb_func_start nullsub_45
nullsub_45: @ 0x08084F48
	bx lr
	.align 2, 0

	thumb_func_start sub_8084F4C
sub_8084F4C: @ 0x08084F4C
	push {r4, lr}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r4, r0, #0
	cmp r4, #0x45
	bhi _08084F70
	adds r0, r4, #0
	bl GetPersonInfo
	ldrb r0, [r0, #9]
	cmp r0, #0
	beq _08084F70
	lsls r0, r4, #4
	ldr r1, _08084F6C @ =0x0203D524
	adds r0, r0, r1
	b _08084F72
	.align 2, 0
_08084F6C: .4byte 0x0203D524
_08084F70:
	movs r0, #0
_08084F72:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_8084F78
sub_8084F78: @ 0x08084F78
	push {r4, lr}
	sub sp, #0x20
	adds r4, r0, #0
	mov r0, sp
	bl LoadGlobalSaveInfo
	mov r0, sp
	strb r4, [r0, #0x1e]
	bl sub_8084388
	add sp, #0x20
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8084F94
sub_8084F94: @ 0x08084F94
	push {lr}
	sub sp, #0x20
	mov r0, sp
	bl LoadGlobalSaveInfo
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08084FB0
	mov r0, sp
	ldrb r0, [r0, #0x1e]
	cmp r0, #2
	bgt _08084FB0
	cmp r0, #0
	bge _08084FB2
_08084FB0:
	movs r0, #0
_08084FB2:
	add sp, #0x20
	pop {r1}
	bx r1

	thumb_func_start sub_8084FB8
sub_8084FB8: @ 0x08084FB8
	push {r4, r5, lr}
	sub sp, #0x30
	adds r5, r0, #0
	movs r0, #3
	bl sub_80859E0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08084FE0
	add r4, sp, #0x10
	movs r0, #3
	adds r1, r4, #0
	bl sub_8085A34
	ldrb r0, [r4, #0xc]
	cmp r0, r5
	bne _08084FE0
	movs r0, #3
	bl sub_8085788
_08084FE0:
	mov r1, sp
	movs r0, #0xff
	strb r0, [r1, #6]
	mov r0, sp
	adds r1, r5, #0
	bl sub_80844D4
	add sp, #0x30
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8084FF8
sub_8084FF8: @ 0x08084FF8
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	sub sp, #0x10
	mov sb, r1
	bl sub_808460C
	adds r6, r0, #0
	mov r0, sb
	bl sub_8084560
	mov r8, r0
	ldr r0, _08085050 @ =ReadSramFast
	ldr r4, _08085054 @ =gBuf
	movs r5, #0xdf
	lsls r5, r5, #4
	ldr r3, [r0]
	adds r0, r6, #0
	adds r1, r4, #0
	adds r2, r5, #0
	bl _call_via_r3
	adds r0, r4, #0
	mov r1, r8
	adds r2, r5, #0
	bl WriteAndVerifySramFast
	ldr r0, _08085058 @ =0x00011217
	str r0, [sp]
	mov r1, sp
	movs r0, #0
	strb r0, [r1, #6]
	mov r0, sp
	mov r1, sb
	bl sub_80844D4
	add sp, #0x10
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08085050: .4byte ReadSramFast
_08085054: .4byte gBuf
_08085058: .4byte 0x00011217

	thumb_func_start sub_808505C
sub_808505C: @ 0x0808505C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x3c
	adds r7, r0, #0
	adds r4, r1, #0
	bl sub_8084560
	adds r6, r0, #0
	adds r0, r4, #0
	bl InitPlayConfig
	bl InitUnits
	bl ClearSupplyItems
	bl sub_806BA34
	movs r0, #3
	bl sub_8085788
	bl sub_8084E18
	adds r1, r0, #0
	ldr r0, _08085100 @ =gPlaySt
	movs r4, #0
	strb r1, [r0, #0x18]
	strb r7, [r0, #0xc]
	adds r1, r6, #0
	movs r2, #0x20
	bl WriteAndVerifySramFast
	add r0, sp, #0x38
	strh r4, [r0]
	add r4, sp, #0x10
	ldr r2, _08085104 @ =0x01000014
	adds r1, r4, #0
	bl CpuSet
	mov r8, r4
	adds r4, r6, #0
	adds r4, #0x20
	movs r5, #0x33
_080850B2:
	mov r0, r8
	adds r1, r4, #0
	movs r2, #0x28
	bl WriteAndVerifySramFast
	adds r4, #0x28
	subs r5, #1
	cmp r5, #0
	bge _080850B2
	movs r4, #0
	movs r1, #0x84
	lsls r1, r1, #4
	adds r0, r6, r1
	bl sub_80846B8
	adds r0, r6, #0
	bl sub_8084798
	ldr r1, _08085108 @ =0x00000DE8
	adds r0, r6, r1
	bl sub_8084648
	ldr r0, _0808510C @ =0x00011217
	str r0, [sp]
	mov r0, sp
	strb r4, [r0, #6]
	adds r1, r7, #0
	bl sub_80844D4
	adds r0, r7, #0
	bl sub_8084F78
	add sp, #0x3c
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08085100: .4byte gPlaySt
_08085104: .4byte 0x01000014
_08085108: .4byte 0x00000DE8
_0808510C: .4byte 0x00011217

	thumb_func_start sub_8085110
sub_8085110: @ 0x08085110
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0x10
	mov r8, r0
	bl sub_8084560
	adds r7, r0, #0
	movs r0, #3
	bl sub_8085788
	ldr r4, _0808519C @ =gPlaySt
	mov r0, r8
	strb r0, [r4, #0xc]
	bl GetGameTime
	str r0, [r4]
	adds r0, r4, #0
	adds r1, r7, #0
	movs r2, #0x20
	bl WriteAndVerifySramFast
	adds r4, r7, #0
	adds r4, #0x20
	movs r6, #0
	movs r5, #0x33
_08085144:
	ldr r0, _080851A0 @ =gUnitArrayBlue
	adds r0, r6, r0
	adds r1, r4, #0
	bl sub_80852C4
	adds r4, #0x28
	adds r6, #0x48
	subs r5, #1
	cmp r5, #0
	bge _08085144
	movs r4, #0
	movs r1, #0x84
	lsls r1, r1, #4
	adds r0, r7, r1
	bl sub_80846B8
	ldr r1, _080851A4 @ =0x00000908
	adds r0, r7, r1
	bl sub_8084884
	ldr r1, _080851A8 @ =0x00000D68
	adds r0, r7, r1
	bl sub_80848A8
	ldr r1, _080851AC @ =0x00000DE8
	adds r0, r7, r1
	bl sub_8084648
	ldr r0, _080851B0 @ =0x00011217
	str r0, [sp]
	mov r0, sp
	strb r4, [r0, #6]
	mov r1, r8
	bl sub_80844D4
	mov r0, r8
	bl sub_8084F78
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808519C: .4byte gPlaySt
_080851A0: .4byte gUnitArrayBlue
_080851A4: .4byte 0x00000908
_080851A8: .4byte 0x00000D68
_080851AC: .4byte 0x00000DE8
_080851B0: .4byte 0x00011217

	thumb_func_start sub_80851B4
sub_80851B4: @ 0x080851B4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	bl sub_808460C
	adds r7, r0, #0
	ldr r1, _08085240 @ =gBmSt
	movs r0, #0x40
	ldrb r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	bne _080851D4
	movs r0, #3
	bl sub_8085788
_080851D4:
	ldr r0, _08085244 @ =ReadSramFast
	ldr r4, _08085248 @ =gPlaySt
	ldr r3, [r0]
	adds r0, r7, #0
	adds r1, r4, #0
	movs r2, #0x20
	bl _call_via_r3
	ldr r0, [r4]
	bl SetGameTime
	mov r0, r8
	strb r0, [r4, #0xc]
	bl InitUnits
	movs r6, #0
	adds r4, r7, #0
	adds r4, #0x20
	movs r5, #0x33
_080851FA:
	ldr r1, _0808524C @ =gUnitArrayBlue
	adds r1, r6, r1
	adds r0, r4, #0
	bl sub_80855C4
	adds r6, #0x48
	adds r4, #0x28
	subs r5, #1
	cmp r5, #0
	bge _080851FA
	movs r1, #0x84
	lsls r1, r1, #4
	adds r0, r7, r1
	bl sub_80846D0
	ldr r1, _08085250 @ =0x00000DE8
	adds r0, r7, r1
	bl sub_8084690
	ldr r1, _08085254 @ =0x00000908
	adds r0, r7, r1
	bl sub_808483C
	ldr r1, _08085258 @ =0x00000D68
	adds r0, r7, r1
	bl sub_8084868
	mov r0, r8
	bl sub_8084F78
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08085240: .4byte gBmSt
_08085244: .4byte ReadSramFast
_08085248: .4byte gPlaySt
_0808524C: .4byte gUnitArrayBlue
_08085250: .4byte 0x00000DE8
_08085254: .4byte 0x00000908
_08085258: .4byte 0x00000D68

	thumb_func_start sub_808525C
sub_808525C: @ 0x0808525C
	push {lr}
	adds r1, r0, #0
	movs r0, #0
	bl sub_8084438
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8085270
sub_8085270: @ 0x08085270
	push {r4, lr}
	adds r4, r1, #0
	bl sub_808460C
	ldr r1, _0808528C @ =ReadSramFast
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0x20
	bl _call_via_r3
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808528C: .4byte ReadSramFast

	thumb_func_start sub_8085290
sub_8085290: @ 0x08085290
	push {r4, lr}
	sub sp, #0x20
	adds r4, r0, #0
	bl sub_808525C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080852B8
	adds r0, r4, #0
	mov r1, sp
	bl sub_8085270
	mov r0, sp
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	ble _080852B8
	movs r0, #1
	b _080852BA
_080852B8:
	movs r0, #0
_080852BA:
	add sp, #0x20
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80852C4
sub_80852C4: @ 0x080852C4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x74
	adds r7, r0, #0
	mov sl, r1
	mov r2, sp
	ldr r0, [r7]
	movs r1, #0x7f
	ldrb r0, [r0, #4]
	ands r1, r0
	movs r5, #0x80
	rsbs r5, r5, #0
	adds r0, r5, #0
	ldrb r3, [r2]
	ands r0, r3
	orrs r0, r1
	strb r0, [r2]
	ldr r0, [r7, #4]
	movs r1, #0x7f
	ldrb r0, [r0, #4]
	ands r1, r0
	lsls r1, r1, #7
	ldr r4, _08085594 @ =0xFFFFC07F
	adds r0, r4, #0
	ldrh r6, [r2]
	ands r0, r6
	orrs r0, r1
	strh r0, [r2]
	ldr r0, [r7]
	cmp r0, #0
	bne _08085322
	add r7, sp, #0x28
	adds r0, r7, #0
	bl ClearUnit
	mov r1, sp
	adds r0, r5, #0
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r0, r4, #0
	ldrh r3, [r1]
	ands r0, r3
	strh r0, [r1]
_08085322:
	movs r1, #0x1f
	ldrb r5, [r7, #8]
	ands r1, r5
	lsls r1, r1, #0xe
	ldr r0, [sp]
	ldr r2, _08085598 @ =0xFFF83FFF
	ands r0, r2
	orrs r0, r1
	str r0, [sp]
	mov r2, sp
	ldrb r6, [r7, #9]
	lsls r3, r6, #1
	ldrb r1, [r2, #3]
	movs r0, #1
	mov sb, r0
	ands r0, r1
	orrs r0, r3
	strb r0, [r2, #3]
	movs r1, #0xe
	ldrsb r1, [r7, r1]
	movs r0, #0x3f
	ands r1, r0
	movs r0, #0x40
	rsbs r0, r0, #0
	ldrb r3, [r2, #4]
	ands r0, r3
	orrs r0, r1
	strb r0, [r2, #4]
	movs r1, #0xf
	ldrsb r1, [r7, r1]
	movs r5, #0x3f
	mov ip, r5
	mov r6, ip
	ands r1, r6
	lsls r1, r1, #6
	ldr r0, _0808559C @ =0xFFFFF03F
	ldrh r3, [r2, #4]
	ands r0, r3
	orrs r0, r1
	strh r0, [r2, #4]
	movs r2, #0x10
	ldrsb r2, [r7, r2]
	movs r5, #0x3f
	ands r2, r5
	lsls r2, r2, #0xc
	ldr r0, [sp, #4]
	ldr r1, _080855A0 @ =0xFFFC0FFF
	ands r0, r1
	orrs r0, r2
	str r0, [sp, #4]
	mov r2, sp
	movs r1, #0x12
	ldrsb r1, [r7, r1]
	movs r6, #0x1f
	ands r1, r6
	lsls r1, r1, #2
	movs r0, #0x7d
	rsbs r0, r0, #0
	ldrb r3, [r2, #6]
	ands r0, r3
	orrs r0, r1
	strb r0, [r2, #6]
	movs r1, #0x13
	ldrsb r1, [r7, r1]
	movs r4, #0x1f
	ands r1, r4
	lsls r1, r1, #7
	ldr r0, _080855A4 @ =0xFFFFF07F
	ldrh r3, [r2, #6]
	ands r0, r3
	orrs r0, r1
	strh r0, [r2, #6]
	mov r3, sp
	movs r2, #0x14
	ldrsb r2, [r7, r2]
	movs r0, #0xf
	mov r8, r0
	adds r1, r2, #0
	ands r1, r0
	lsls r1, r1, #4
	str r1, [sp, #0x70]
	ldrb r1, [r3, #7]
	ands r0, r1
	ldr r1, [sp, #0x70]
	orrs r0, r1
	strb r0, [r3, #7]
	lsrs r2, r2, #4
	mov r0, sb
	ands r2, r0
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r3, #8]
	ands r0, r1
	orrs r0, r2
	strb r0, [r3, #8]
	movs r1, #0x15
	ldrsb r1, [r7, r1]
	ands r1, r6
	lsls r1, r1, #1
	movs r2, #0x3f
	rsbs r2, r2, #0
	ands r0, r2
	orrs r0, r1
	strb r0, [r3, #8]
	mov r2, sp
	movs r1, #0x16
	ldrsb r1, [r7, r1]
	ands r1, r4
	lsls r1, r1, #6
	ldr r0, _080855A8 @ =0xFFFFF83F
	ldrh r3, [r2, #8]
	ands r0, r3
	orrs r0, r1
	strh r0, [r2, #8]
	movs r1, #0x17
	ldrsb r1, [r7, r1]
	lsls r1, r1, #3
	movs r0, #7
	ldrb r3, [r2, #9]
	ands r0, r3
	orrs r0, r1
	strb r0, [r2, #9]
	movs r1, #0x18
	ldrsb r1, [r7, r1]
	ands r1, r6
	movs r0, #0x20
	rsbs r0, r0, #0
	ldrb r6, [r2, #0xa]
	ands r0, r6
	orrs r0, r1
	strb r0, [r2, #0xa]
	movs r1, #0x1a
	ldrsb r1, [r7, r1]
	ands r1, r4
	lsls r1, r1, #5
	ldr r0, _080855AC @ =0xFFFFFC1F
	ldrh r3, [r2, #0xa]
	ands r0, r3
	orrs r0, r1
	strh r0, [r2, #0xa]
	mov r3, sp
	ldrh r2, [r7, #0x1c]
	adds r1, r2, #0
	ands r1, r5
	lsls r1, r1, #2
	movs r4, #3
	adds r0, r4, #0
	ldrb r6, [r3, #0xb]
	ands r0, r6
	orrs r0, r1
	strb r0, [r3, #0xb]
	lsrs r2, r2, #6
	strb r2, [r3, #0xc]
	ldr r3, _080855B0 @ =0x00003FFF
	adds r1, r3, #0
	ldrh r0, [r7, #0x1e]
	ands r1, r0
	lsls r1, r1, #8
	ldr r0, [sp, #0xc]
	ldr r2, _080855B4 @ =0xFFC000FF
	ands r0, r2
	orrs r0, r1
	str r0, [sp, #0xc]
	mov r2, sp
	ldrh r1, [r7, #0x20]
	ldr r0, _080855B8 @ =0x000003FF
	ands r0, r1
	lsls r0, r0, #6
	ldrh r6, [r2, #0xe]
	ands r5, r6
	orrs r5, r0
	strh r5, [r2, #0xe]
	lsrs r1, r1, #0xa
	mov r0, r8
	ands r1, r0
	movs r0, #0x10
	rsbs r0, r0, #0
	ldrb r5, [r2, #0x10]
	ands r0, r5
	orrs r0, r1
	strb r0, [r2, #0x10]
	ldrh r6, [r7, #0x22]
	ands r3, r6
	lsls r3, r3, #4
	ldr r0, [sp, #0x10]
	ldr r1, _080855BC @ =0xFFFC000F
	ands r0, r1
	orrs r0, r3
	str r0, [sp, #0x10]
	mov r1, sp
	ldrh r2, [r7, #0x24]
	lsls r0, r2, #2
	ldrh r3, [r1, #0x12]
	ands r4, r3
	orrs r4, r0
	strh r4, [r1, #0x12]
	ldrh r0, [r1, #2]
	ldr r4, _080855C0 @ =0xFFFFFE07
	adds r3, r4, #0
	ands r3, r0
	strh r3, [r1, #2]
	movs r5, #4
	adds r0, r5, #0
	ldrh r6, [r7, #0xc]
	ands r0, r6
	cmp r0, #0
	beq _080854D2
	mov r2, sp
	mov r1, sb
	mov r0, ip
	ands r1, r0
	lsls r1, r1, #3
	adds r0, r3, #0
	ands r0, r4
	orrs r0, r1
	strh r0, [r2, #2]
_080854D2:
	movs r6, #8
	adds r0, r6, #0
	ldrh r1, [r7, #0xc]
	ands r0, r1
	cmp r0, #0
	beq _080854FA
	mov r3, sp
	mov r0, sp
	ldrh r2, [r0, #2]
	lsls r1, r2, #0x17
	lsrs r1, r1, #0x1a
	movs r0, #2
	orrs r1, r0
	mov r0, ip
	ands r1, r0
	lsls r1, r1, #3
	adds r0, r4, #0
	ands r0, r2
	orrs r0, r1
	strh r0, [r3, #2]
_080854FA:
	movs r0, #0x80
	lsls r0, r0, #7
	ldrh r1, [r7, #0xc]
	ands r0, r1
	cmp r0, #0
	beq _08085520
	mov r3, sp
	mov r0, sp
	ldrh r2, [r0, #2]
	lsls r0, r2, #0x17
	lsrs r0, r0, #0x1a
	orrs r0, r5
	mov r5, ip
	ands r0, r5
	lsls r0, r0, #3
	adds r1, r4, #0
	ands r1, r2
	orrs r1, r0
	strh r1, [r3, #2]
_08085520:
	movs r0, #0x80
	lsls r0, r0, #8
	ldrh r1, [r7, #0xc]
	ands r0, r1
	cmp r0, #0
	beq _08085546
	mov r3, sp
	mov r0, sp
	ldrh r2, [r0, #2]
	lsls r0, r2, #0x17
	lsrs r0, r0, #0x1a
	orrs r0, r6
	mov r5, ip
	ands r0, r5
	lsls r0, r0, #3
	adds r1, r4, #0
	ands r1, r2
	orrs r1, r0
	strh r1, [r3, #2]
_08085546:
	movs r2, #0
	mov r5, sp
	adds r5, #0x1e
	adds r6, r7, #0
	adds r6, #0x30
	mov r4, sp
	adds r4, #0x16
	adds r3, r7, #0
	adds r3, #0x26
_08085558:
	adds r0, r4, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #7
	ble _08085558
	movs r2, #0
	adds r4, r5, #0
	adds r3, r6, #0
_0808556C:
	adds r0, r4, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #9
	ble _0808556C
	mov r0, sp
	mov r1, sl
	movs r2, #0x28
	bl WriteAndVerifySramFast
	add sp, #0x74
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08085594: .4byte 0xFFFFC07F
_08085598: .4byte 0xFFF83FFF
_0808559C: .4byte 0xFFFFF03F
_080855A0: .4byte 0xFFFC0FFF
_080855A4: .4byte 0xFFFFF07F
_080855A8: .4byte 0xFFFFF83F
_080855AC: .4byte 0xFFFFFC1F
_080855B0: .4byte 0x00003FFF
_080855B4: .4byte 0xFFC000FF
_080855B8: .4byte 0x000003FF
_080855BC: .4byte 0xFFFC000F
_080855C0: .4byte 0xFFFFFE07

	thumb_func_start sub_80855C4
sub_80855C4: @ 0x080855C4
	push {r4, r5, r6, r7, lr}
	sub sp, #0x28
	adds r4, r1, #0
	ldr r1, _08085784 @ =ReadSramFast
	ldr r3, [r1]
	mov r1, sp
	movs r2, #0x28
	bl _call_via_r3
	mov r0, sp
	ldrb r0, [r0]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x19
	bl GetPersonInfo
	str r0, [r4]
	mov r0, sp
	ldrh r0, [r0]
	lsls r0, r0, #0x12
	lsrs r0, r0, #0x19
	bl GetJobInfo
	str r0, [r4, #4]
	ldr r0, [sp]
	lsls r0, r0, #0xd
	lsrs r0, r0, #0x1b
	strb r0, [r4, #8]
	mov r0, sp
	ldrb r0, [r0, #3]
	lsrs r3, r0, #1
	strb r3, [r4, #9]
	mov r0, sp
	ldrb r0, [r0, #4]
	lsls r0, r0, #0x1a
	lsrs r0, r0, #0x1a
	strb r0, [r4, #0xe]
	mov r0, sp
	ldrh r0, [r0, #4]
	lsls r0, r0, #0x14
	lsrs r0, r0, #0x1a
	strb r0, [r4, #0xf]
	ldr r0, [sp, #4]
	lsls r0, r0, #0xe
	lsrs r0, r0, #0x1a
	strb r0, [r4, #0x10]
	mov r0, sp
	ldrb r0, [r0, #6]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x12]
	mov r0, sp
	ldrh r0, [r0, #6]
	lsls r0, r0, #0x14
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x13]
	mov r1, sp
	ldrb r0, [r1, #7]
	lsrs r2, r0, #4
	movs r5, #1
	adds r0, r5, #0
	ldrb r1, [r1, #8]
	ands r0, r1
	lsls r0, r0, #4
	orrs r0, r2
	strb r0, [r4, #0x14]
	mov r0, sp
	ldrb r0, [r0, #8]
	lsls r0, r0, #0x1a
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x15]
	mov r0, sp
	ldrh r0, [r0, #8]
	lsls r0, r0, #0x15
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x16]
	mov r0, sp
	ldrb r0, [r0, #9]
	lsrs r0, r0, #3
	strb r0, [r4, #0x17]
	mov r0, sp
	ldrb r0, [r0, #0xa]
	lsls r0, r0, #0x1b
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x18]
	mov r0, sp
	ldrh r0, [r0, #0xa]
	lsls r0, r0, #0x16
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x1a]
	mov r0, sp
	ldrb r2, [r0, #0xb]
	lsrs r1, r2, #2
	ldrb r0, [r0, #0xc]
	lsls r0, r0, #6
	orrs r0, r1
	strh r0, [r4, #0x1c]
	ldr r0, [sp, #0xc]
	lsls r0, r0, #0xa
	lsrs r0, r0, #0x12
	strh r0, [r4, #0x1e]
	mov r1, sp
	ldrh r0, [r1, #0xe]
	lsrs r2, r0, #6
	movs r0, #0xf
	ldrb r1, [r1, #0x10]
	ands r0, r1
	lsls r0, r0, #0xa
	orrs r0, r2
	strh r0, [r4, #0x20]
	ldr r0, [sp, #0x10]
	lsls r0, r0, #0xe
	lsrs r0, r0, #0x12
	strh r0, [r4, #0x22]
	mov r0, sp
	ldrh r0, [r0, #0x12]
	lsrs r0, r0, #2
	strh r0, [r4, #0x24]
	cmp r3, #0x63
	bls _080856B6
	movs r0, #0xff
	strb r0, [r4, #9]
_080856B6:
	movs r0, #0
	strh r0, [r4, #0xc]
	mov r0, sp
	ldrh r0, [r0, #2]
	lsls r0, r0, #0x17
	lsrs r0, r0, #0x1a
	ands r0, r5
	cmp r0, #0
	beq _080856CC
	movs r0, #5
	strh r0, [r4, #0xc]
_080856CC:
	mov r0, sp
	ldrh r0, [r0, #2]
	lsls r0, r0, #0x17
	lsrs r0, r0, #0x1a
	movs r1, #2
	ands r0, r1
	cmp r0, #0
	beq _080856E4
	movs r0, #9
	ldrh r1, [r4, #0xc]
	orrs r0, r1
	strh r0, [r4, #0xc]
_080856E4:
	mov r0, sp
	ldrh r0, [r0, #2]
	lsls r0, r0, #0x17
	lsrs r0, r0, #0x1a
	movs r1, #4
	ands r0, r1
	cmp r0, #0
	beq _08085700
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r2, #0
	ldrh r1, [r4, #0xc]
	orrs r0, r1
	strh r0, [r4, #0xc]
_08085700:
	mov r0, sp
	ldrh r0, [r0, #2]
	lsls r0, r0, #0x17
	lsrs r0, r0, #0x1a
	movs r1, #8
	ands r0, r1
	cmp r0, #0
	beq _0808571C
	movs r2, #0x80
	lsls r2, r2, #8
	adds r0, r2, #0
	ldrh r1, [r4, #0xc]
	orrs r0, r1
	strh r0, [r4, #0xc]
_0808571C:
	movs r2, #0
	adds r7, r4, #0
	adds r7, #0x30
	mov r6, sp
	adds r6, #0x1e
	adds r5, r4, #0
	adds r5, #0x26
	mov r3, sp
	adds r3, #0x16
_0808572E:
	adds r0, r5, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #7
	ble _0808572E
	movs r2, #0
	adds r5, r7, #0
	adds r3, r6, #0
_08085742:
	adds r0, r5, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #9
	ble _08085742
	adds r0, r4, #0
	bl GetUnitMaxHp
	adds r1, r0, #0
	adds r0, r4, #0
	bl SetUnitHp
	ldrb r0, [r4, #9]
	cmp r0, #0x7f
	bne _08085768
	movs r0, #0xff
	strb r0, [r4, #9]
_08085768:
	ldrb r0, [r4, #0xe]
	cmp r0, #0x3f
	bne _08085772
	movs r0, #0xff
	strb r0, [r4, #0xe]
_08085772:
	ldrb r0, [r4, #0xf]
	cmp r0, #0x3f
	bne _0808577C
	movs r0, #0xff
	strb r0, [r4, #0xf]
_0808577C:
	add sp, #0x28
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08085784: .4byte ReadSramFast

	thumb_func_start sub_8085788
sub_8085788: @ 0x08085788
	push {r4, lr}
	sub sp, #0x10
	adds r4, r0, #0
	mov r1, sp
	movs r0, #0xff
	strb r0, [r1, #6]
	mov r0, sp
	adds r1, r4, #0
	bl sub_80844D4
	cmp r4, #3
	bne _080857A8
	mov r0, sp
	movs r1, #4
	bl sub_80844D4
_080857A8:
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_80857B0
sub_80857B0: @ 0x080857B0
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0x10
	mov r8, r0
	ldr r4, _080858B8 @ =gPlaySt
	movs r0, #8
	ldrb r1, [r4, #0x14]
	ands r0, r1
	cmp r0, #0
	bne _080858AA
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080858AA
	bl sub_8085F14
	add r8, r0
	mov r0, r8
	bl sub_8084560
	adds r7, r0, #0
	bl GetGameTime
	str r0, [r4]
	adds r0, r4, #0
	adds r1, r7, #0
	movs r2, #0x20
	bl WriteAndVerifySramFast
	bl SaveActionRand
	ldr r0, _080858BC @ =gAction
	adds r1, r7, #0
	adds r1, #0x20
	movs r2, #0x18
	bl WriteAndVerifySramFast
	ldr r5, _080858C0 @ =gBuf
	ldr r6, _080858C4 @ =gUnitArrayBlue
	movs r4, #0x33
_08085806:
	adds r1, r5, #0
	adds r5, #0x34
	adds r0, r6, #0
	bl sub_8085A48
	adds r6, #0x48
	subs r4, #1
	cmp r4, #0
	bge _08085806
	movs r0, #0x38
	adds r0, r0, r7
	mov sb, r0
	ldr r6, _080858C8 @ =0x0202BCE8
	movs r4, #0x31
_08085822:
	adds r1, r5, #0
	adds r5, #0x34
	adds r0, r6, #0
	bl sub_8085A48
	adds r6, #0x48
	subs r4, #1
	cmp r4, #0
	bge _08085822
	ldr r6, _080858CC @ =0x0202CAF8
	movs r4, #9
_08085838:
	adds r1, r5, #0
	adds r5, #0x34
	adds r0, r6, #0
	bl sub_8085A48
	adds r6, #0x48
	subs r4, #1
	cmp r4, #0
	bge _08085838
	movs r4, #0
	ldr r0, _080858C0 @ =gBuf
	movs r2, #0xb6
	lsls r2, r2, #5
	mov r1, sb
	bl WriteSramFast
	movs r1, #0xed
	lsls r1, r1, #5
	adds r0, r7, r1
	bl sub_8084648
	ldr r1, _080858D0 @ =0x00001DA5
	adds r0, r7, r1
	bl sub_8084628
	ldr r1, _080858D4 @ =0x000017F8
	adds r0, r7, r1
	bl sub_80846B8
	movs r1, #0xc6
	lsls r1, r1, #5
	adds r0, r7, r1
	bl sub_8084884
	movs r1, #0xe9
	lsls r1, r1, #5
	adds r0, r7, r1
	bl sub_80848A8
	ldr r1, _080858D8 @ =0x000016F8
	adds r0, r7, r1
	bl sub_8085EB4
	ldr r0, _080858DC @ =0x00011217
	str r0, [sp]
	mov r1, sp
	movs r0, #1
	strb r0, [r1, #6]
	mov r0, sp
	mov r1, r8
	bl sub_80844D4
	ldr r0, _080858E0 @ =gBmSt
	adds r0, #0x3c
	strb r4, [r0]
	bl sub_8085F24
_080858AA:
	add sp, #0x10
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080858B8: .4byte gPlaySt
_080858BC: .4byte gAction
_080858C0: .4byte gBuf
_080858C4: .4byte gUnitArrayBlue
_080858C8: .4byte 0x0202BCE8
_080858CC: .4byte 0x0202CAF8
_080858D0: .4byte 0x00001DA5
_080858D4: .4byte 0x000017F8
_080858D8: .4byte 0x000016F8
_080858DC: .4byte 0x00011217
_080858E0: .4byte gBmSt

	thumb_func_start sub_80858E4
sub_80858E4: @ 0x080858E4
	push {r4, r5, r6, lr}
	ldr r1, _080859B0 @ =0x0203DA14
	ldrb r1, [r1]
	adds r0, r1, r0
	bl sub_808460C
	adds r6, r0, #0
	ldr r5, _080859B4 @ =ReadSramFast
	ldr r4, _080859B8 @ =gPlaySt
	ldr r3, [r5]
	adds r1, r4, #0
	movs r2, #0x20
	bl _call_via_r3
	ldr r0, [r4]
	bl SetGameTime
	adds r0, r6, #0
	adds r0, #0x20
	ldr r1, _080859BC @ =gAction
	ldr r3, [r5]
	movs r2, #0x18
	bl _call_via_r3
	bl RestoreActionRand
	bl InitUnits
	movs r4, #0
	movs r5, #0
_08085920:
	movs r0, #0x34
	muls r0, r4, r0
	adds r0, #0x38
	adds r0, r6, r0
	ldr r1, _080859C0 @ =gUnitArrayBlue
	adds r1, r5, r1
	bl sub_8085CE0
	adds r5, #0x48
	adds r4, #1
	cmp r4, #0x33
	ble _08085920
	movs r4, #0
	movs r5, #0
_0808593C:
	movs r0, #0x34
	muls r0, r4, r0
	ldr r1, _080859C4 @ =0x00000AC8
	adds r0, r0, r1
	adds r0, r6, r0
	ldr r1, _080859C8 @ =0x0202BCE8
	adds r1, r5, r1
	bl sub_8085CE0
	adds r5, #0x48
	adds r4, #1
	cmp r4, #0x31
	ble _0808593C
	movs r4, #0
	movs r5, #0
_0808595A:
	movs r0, #0x34
	muls r0, r4, r0
	ldr r1, _080859CC @ =0x000014F0
	adds r0, r0, r1
	adds r0, r6, r0
	ldr r1, _080859D0 @ =0x0202CAF8
	adds r1, r5, r1
	bl sub_8085CE0
	adds r5, #0x48
	adds r4, #1
	cmp r4, #9
	ble _0808595A
	movs r1, #0xc6
	lsls r1, r1, #5
	adds r0, r6, r1
	bl sub_808483C
	movs r1, #0xe9
	lsls r1, r1, #5
	adds r0, r6, r1
	bl sub_8084868
	ldr r1, _080859D4 @ =0x000017F8
	adds r0, r6, r1
	bl sub_80846D0
	movs r1, #0xed
	lsls r1, r1, #5
	adds r0, r6, r1
	bl sub_8084690
	ldr r1, _080859D8 @ =0x00001DA5
	adds r0, r6, r1
	bl sub_8084668
	ldr r1, _080859DC @ =0x000016F8
	adds r0, r6, r1
	bl sub_8085ED0
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080859B0: .4byte 0x0203DA14
_080859B4: .4byte ReadSramFast
_080859B8: .4byte gPlaySt
_080859BC: .4byte gAction
_080859C0: .4byte gUnitArrayBlue
_080859C4: .4byte 0x00000AC8
_080859C8: .4byte 0x0202BCE8
_080859CC: .4byte 0x000014F0
_080859D0: .4byte 0x0202CAF8
_080859D4: .4byte 0x000017F8
_080859D8: .4byte 0x00001DA5
_080859DC: .4byte 0x000016F8

	thumb_func_start sub_80859E0
sub_80859E0: @ 0x080859E0
	push {r4, lr}
	adds r4, r0, #0
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08085A24
	cmp r4, #3
	bne _08085A24
	ldr r4, _08085A28 @ =0x0203DA14
	bl sub_8085EF4
	strb r0, [r4]
	adds r1, r0, #0
	adds r1, #3
	movs r0, #0
	bl sub_8084438
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08085A2C
	bl sub_8085F14
	strb r0, [r4]
	adds r1, r0, #0
	adds r1, #3
	movs r0, #0
	bl sub_8084438
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08085A2C
	movs r0, #0x7f
	strb r0, [r4]
_08085A24:
	movs r0, #0
	b _08085A2E
	.align 2, 0
_08085A28: .4byte 0x0203DA14
_08085A2C:
	movs r0, #1
_08085A2E:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_8085A34
sub_8085A34: @ 0x08085A34
	push {lr}
	ldr r2, _08085A44 @ =0x0203DA14
	ldrb r2, [r2]
	adds r0, r2, r0
	bl sub_8085270
	pop {r0}
	bx r0
	.align 2, 0
_08085A44: .4byte 0x0203DA14

	thumb_func_start sub_8085A48
sub_8085A48: @ 0x08085A48
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x20
	adds r6, r0, #0
	mov ip, r1
	ldr r0, [r6]
	cmp r0, #0
	bne _08085A62
	strb r0, [r1]
	b _08085CAE
_08085A62:
	ldrb r0, [r0, #4]
	mov r1, ip
	strb r0, [r1]
	ldr r0, [r6, #4]
	ldrb r0, [r0, #4]
	strb r0, [r1, #1]
	movs r1, #8
	ldrsb r1, [r6, r1]
	mov r2, ip
	adds r2, #0x28
	movs r4, #0x1f
	ands r1, r4
	movs r3, #0x20
	rsbs r3, r3, #0
	adds r0, r3, #0
	ldrb r5, [r2]
	ands r0, r5
	orrs r0, r1
	strb r0, [r2]
	ldrb r0, [r6, #9]
	mov r7, ip
	strb r0, [r7, #0xe]
	ldrh r0, [r6, #0xc]
	strh r0, [r7, #4]
	movs r1, #0xe
	ldrsb r1, [r6, r1]
	movs r0, #0x3f
	ands r1, r0
	lsls r1, r1, #5
	ldr r0, _08085CC0 @ =0xFFFFF81F
	ldrh r2, [r7, #0x28]
	ands r0, r2
	orrs r0, r1
	strh r0, [r7, #0x28]
	movs r1, #0x3f
	ldrb r5, [r6, #0xf]
	ands r1, r5
	lsls r1, r1, #0xb
	ldr r0, [r7, #0x28]
	ldr r2, _08085CC4 @ =0xFFFE07FF
	ands r0, r2
	orrs r0, r1
	str r0, [r7, #0x28]
	ldrb r0, [r6, #0x10]
	strb r0, [r7, #0xc]
	ldrb r0, [r6, #0x11]
	strb r0, [r7, #0xd]
	movs r1, #0x12
	ldrsb r1, [r6, r1]
	mov r2, ip
	adds r2, #0x2a
	ands r1, r4
	lsls r1, r1, #1
	movs r0, #0x3f
	rsbs r0, r0, #0
	ldrb r7, [r2]
	ands r0, r7
	orrs r0, r1
	strb r0, [r2]
	movs r1, #0x13
	ldrsb r1, [r6, r1]
	movs r2, #0x1f
	ands r1, r2
	lsls r1, r1, #6
	ldr r0, _08085CC8 @ =0xFFFFF83F
	mov r5, ip
	ldrh r5, [r5, #0x2a]
	ands r0, r5
	orrs r0, r1
	mov r7, ip
	strh r0, [r7, #0x2a]
	movs r1, #0x14
	ldrsb r1, [r6, r1]
	movs r0, #0x2b
	add r0, ip
	mov r8, r0
	lsls r1, r1, #3
	movs r5, #7
	mov sb, r5
	movs r0, #7
	mov r7, r8
	ldrb r7, [r7]
	ands r0, r7
	orrs r0, r1
	mov r1, r8
	strb r0, [r1]
	movs r0, #0x15
	ldrsb r0, [r6, r0]
	mov r1, ip
	adds r1, #0x2c
	ands r0, r4
	ldrb r5, [r1]
	ands r3, r5
	orrs r3, r0
	strb r3, [r1]
	movs r1, #0x16
	ldrsb r1, [r6, r1]
	ands r1, r2
	lsls r1, r1, #5
	ldr r0, _08085CCC @ =0xFFFFFC1F
	mov r7, ip
	ldrh r7, [r7, #0x2c]
	ands r0, r7
	orrs r0, r1
	mov r1, ip
	strh r0, [r1, #0x2c]
	movs r1, #0x17
	ldrsb r1, [r6, r1]
	mov r2, ip
	adds r2, #0x2d
	ands r1, r4
	lsls r1, r1, #2
	movs r0, #0x7d
	rsbs r0, r0, #0
	ldrb r3, [r2]
	ands r0, r3
	orrs r0, r1
	strb r0, [r2]
	movs r2, #0x18
	ldrsb r2, [r6, r2]
	movs r3, #0x1f
	ands r2, r3
	lsls r2, r2, #0xf
	mov r4, ip
	ldr r0, [r4, #0x2c]
	ldr r1, _08085CD0 @ =0xFFF07FFF
	ands r0, r1
	orrs r0, r2
	str r0, [r4, #0x2c]
	adds r0, r6, #0
	adds r0, #0x2e
	ldrb r2, [r0]
	lsls r1, r2, #0x1c
	lsrs r1, r1, #0x1c
	adds r4, #0x2e
	mov r5, sb
	ands r1, r5
	lsls r1, r1, #4
	movs r0, #0x71
	rsbs r0, r0, #0
	ldrb r7, [r4]
	ands r0, r7
	orrs r0, r1
	strb r0, [r4]
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x1c
	movs r0, #7
	ands r2, r0
	lsls r2, r2, #7
	ldr r0, _08085CD4 @ =0xFFFFFC7F
	mov r1, ip
	ldrh r1, [r1, #0x2e]
	ands r0, r1
	orrs r0, r2
	mov r2, ip
	strh r0, [r2, #0x2e]
	adds r0, r6, #0
	adds r0, #0x2f
	ldrb r2, [r0]
	lsls r1, r2, #0x1c
	lsrs r1, r1, #0x1c
	adds r4, #1
	ands r1, r5
	lsls r1, r1, #2
	movs r0, #0x1d
	rsbs r0, r0, #0
	ldrb r5, [r4]
	ands r0, r5
	orrs r0, r1
	lsrs r2, r2, #4
	lsls r2, r2, #5
	ands r0, r3
	orrs r0, r2
	strb r0, [r4]
	ldrb r0, [r6, #0x19]
	mov r7, ip
	strb r0, [r7, #3]
	movs r1, #0x1a
	ldrsb r1, [r6, r1]
	mov r2, ip
	adds r2, #0x30
	movs r0, #0xf
	ands r1, r0
	movs r0, #0x10
	rsbs r0, r0, #0
	ldrb r3, [r2]
	ands r0, r3
	orrs r0, r1
	strb r0, [r2]
	ldrh r0, [r6, #0x1c]
	strh r0, [r7, #6]
	ldrh r0, [r6, #0x1e]
	strh r0, [r7, #8]
	ldrh r0, [r6, #0x20]
	strh r0, [r7, #0xa]
	ldr r1, _08085CD8 @ =0x00003FFF
	ldrh r4, [r6, #0x22]
	ands r1, r4
	lsls r1, r1, #4
	ldr r0, [r7, #0x30]
	ldr r2, _08085CDC @ =0xFFFC000F
	ands r0, r2
	orrs r0, r1
	str r0, [r7, #0x30]
	ldrh r5, [r6, #0x24]
	lsls r1, r5, #2
	movs r0, #3
	ldrh r7, [r7, #0x32]
	ands r0, r7
	orrs r0, r1
	mov r1, ip
	strh r0, [r1, #0x32]
	movs r2, #0
	mov r5, ip
	adds r5, #0x18
	adds r7, r6, #0
	adds r7, #0x30
	movs r3, #0x42
	adds r3, r3, r6
	mov r8, r3
	adds r4, r6, #0
	adds r4, #0x43
	str r4, [sp, #0xc]
	movs r0, #0x22
	add r0, ip
	mov sb, r0
	adds r1, r6, #0
	adds r1, #0x44
	str r1, [sp, #0x10]
	movs r3, #0x23
	add r3, ip
	mov sl, r3
	adds r4, #2
	str r4, [sp, #0x14]
	mov r0, ip
	adds r0, #0x26
	str r0, [sp]
	subs r1, #4
	str r1, [sp, #8]
	adds r3, r6, #0
	adds r3, #0x46
	str r3, [sp, #0x18]
	mov r4, ip
	adds r4, #0x27
	str r4, [sp, #4]
	ldrb r1, [r6, #0xa]
	mov r0, sp
	strb r1, [r0, #0x1c]
	subs r4, #0x17
	subs r3, #0x20
_08085C56:
	adds r0, r4, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #7
	ble _08085C56
	movs r2, #0
	adds r4, r5, #0
	adds r3, r7, #0
_08085C6A:
	adds r0, r4, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #9
	ble _08085C6A
	mov r2, r8
	ldrb r0, [r2]
	mov r3, ip
	strb r0, [r3, #2]
	ldr r4, [sp, #0xc]
	ldrb r0, [r4]
	mov r5, sb
	strb r0, [r5]
	ldr r7, [sp, #0x10]
	ldrb r0, [r7]
	mov r1, sl
	strb r0, [r1]
	ldr r2, [sp, #0x14]
	ldrb r0, [r2]
	ldr r3, [sp]
	strb r0, [r3]
	ldr r4, [sp, #8]
	ldrh r0, [r4]
	mov r5, ip
	strh r0, [r5, #0x24]
	ldr r7, [sp, #0x18]
	ldrb r0, [r7]
	ldr r1, [sp, #4]
	strb r0, [r1]
	mov r2, sp
	ldrb r2, [r2, #0x1c]
	strb r2, [r5, #0xf]
_08085CAE:
	add sp, #0x20
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08085CC0: .4byte 0xFFFFF81F
_08085CC4: .4byte 0xFFFE07FF
_08085CC8: .4byte 0xFFFFF83F
_08085CCC: .4byte 0xFFFFFC1F
_08085CD0: .4byte 0xFFF07FFF
_08085CD4: .4byte 0xFFFFFC7F
_08085CD8: .4byte 0x00003FFF
_08085CDC: .4byte 0xFFFC000F

	thumb_func_start sub_8085CE0
sub_8085CE0: @ 0x08085CE0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x48
	adds r4, r1, #0
	ldr r1, _08085EB0 @ =ReadSramFast
	ldr r3, [r1]
	mov r1, sp
	movs r2, #0x34
	bl _call_via_r3
	mov r0, sp
	ldrb r0, [r0]
	bl GetPersonInfo
	str r0, [r4]
	mov r0, sp
	ldrb r0, [r0, #1]
	bl GetJobInfo
	str r0, [r4, #4]
	add r0, sp, #0x28
	ldrb r0, [r0]
	lsls r0, r0, #0x1b
	lsrs r0, r0, #0x1b
	strb r0, [r4, #8]
	mov r0, sp
	ldrb r0, [r0, #0xe]
	strb r0, [r4, #9]
	mov r0, sp
	ldrh r0, [r0, #4]
	strh r0, [r4, #0xc]
	mov r0, sp
	ldrh r0, [r0, #0x28]
	lsls r0, r0, #0x15
	lsrs r0, r0, #0x1a
	strb r0, [r4, #0xe]
	ldr r0, [sp, #0x28]
	lsls r0, r0, #0xf
	lsrs r0, r0, #0x1a
	strb r0, [r4, #0xf]
	mov r0, sp
	ldrb r0, [r0, #0xc]
	strb r0, [r4, #0x10]
	mov r0, sp
	ldrb r0, [r0, #0xd]
	strb r0, [r4, #0x11]
	mov r0, sp
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x1a
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x12]
	mov r0, sp
	ldrh r0, [r0, #0x2a]
	lsls r0, r0, #0x15
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x13]
	mov r0, sp
	adds r0, #0x2b
	ldrb r0, [r0]
	lsrs r0, r0, #3
	strb r0, [r4, #0x14]
	add r0, sp, #0x2c
	ldrb r0, [r0]
	lsls r0, r0, #0x1b
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x15]
	mov r0, sp
	ldrh r0, [r0, #0x2c]
	lsls r0, r0, #0x16
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x16]
	mov r0, sp
	adds r0, #0x2d
	ldrb r0, [r0]
	lsls r0, r0, #0x19
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x17]
	ldr r0, [sp, #0x2c]
	lsls r0, r0, #0xc
	lsrs r0, r0, #0x1b
	strb r0, [r4, #0x18]
	mov r0, sp
	adds r0, #0x2e
	ldrb r0, [r0]
	lsls r1, r0, #0x19
	adds r2, r4, #0
	adds r2, #0x2e
	mov r0, sp
	ldrh r0, [r0, #0x2e]
	lsls r0, r0, #0x16
	lsrs r0, r0, #0x1d
	lsls r0, r0, #4
	lsrs r1, r1, #0x1d
	orrs r1, r0
	strb r1, [r2]
	mov r0, sp
	adds r0, #0x2f
	ldrb r0, [r0]
	lsls r1, r0, #0x1b
	adds r2, #1
	lsrs r0, r0, #5
	lsls r0, r0, #4
	lsrs r1, r1, #0x1d
	orrs r1, r0
	strb r1, [r2]
	mov r0, sp
	ldrb r0, [r0, #3]
	strb r0, [r4, #0x19]
	add r0, sp, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #0x1c
	lsrs r0, r0, #0x1c
	strb r0, [r4, #0x1a]
	mov r0, sp
	ldrh r0, [r0, #6]
	strh r0, [r4, #0x1c]
	mov r0, sp
	ldrh r0, [r0, #8]
	strh r0, [r4, #0x1e]
	mov r0, sp
	ldrh r0, [r0, #0xa]
	strh r0, [r4, #0x20]
	ldr r0, [sp, #0x30]
	lsls r0, r0, #0xe
	lsrs r0, r0, #0x12
	strh r0, [r4, #0x22]
	mov r0, sp
	ldrh r1, [r0, #0x32]
	lsrs r0, r1, #2
	strh r0, [r4, #0x24]
	movs r2, #0
	add r0, sp, #0x18
	mov sl, r0
	mov r1, sp
	adds r1, #0x22
	str r1, [sp, #0x34]
	mov r0, sp
	adds r0, #0x23
	str r0, [sp, #0x38]
	adds r1, #4
	str r1, [sp, #0x3c]
	adds r0, #4
	str r0, [sp, #0x40]
	adds r5, r4, #0
	adds r5, #0x26
	add r3, sp, #0x10
_08085E0C:
	adds r0, r5, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #7
	ble _08085E0C
	movs r2, #0
	movs r1, #0x42
	adds r1, r1, r4
	mov ip, r1
	adds r6, r4, #0
	adds r6, #0x43
	adds r7, r4, #0
	adds r7, #0x44
	movs r0, #0x45
	adds r0, r0, r4
	mov r8, r0
	movs r1, #0x40
	adds r1, r1, r4
	mov sb, r1
	adds r0, r4, #0
	adds r0, #0x46
	str r0, [sp, #0x44]
	adds r5, r4, #0
	adds r5, #0x30
	mov r3, sl
_08085E42:
	adds r0, r5, r2
	adds r1, r3, r2
	ldrb r1, [r1]
	strb r1, [r0]
	adds r2, #1
	cmp r2, #9
	ble _08085E42
	mov r0, sp
	ldrb r0, [r0, #2]
	mov r1, ip
	strb r0, [r1]
	ldr r1, [sp, #0x34]
	ldrb r0, [r1]
	strb r0, [r6]
	ldr r1, [sp, #0x38]
	ldrb r0, [r1]
	strb r0, [r7]
	ldr r1, [sp, #0x3c]
	ldrb r0, [r1]
	mov r1, r8
	strb r0, [r1]
	mov r0, sp
	ldrh r0, [r0, #0x24]
	mov r1, sb
	strh r0, [r1]
	ldr r1, [sp, #0x40]
	ldrb r0, [r1]
	ldr r1, [sp, #0x44]
	strb r0, [r1]
	mov r0, sp
	ldrb r0, [r0, #0xf]
	strb r0, [r4, #0xa]
	ldrb r0, [r4, #9]
	cmp r0, #0x7f
	bne _08085E8C
	movs r0, #0xff
	strb r0, [r4, #9]
_08085E8C:
	ldrb r0, [r4, #0xe]
	cmp r0, #0x3f
	bne _08085E96
	movs r0, #0xff
	strb r0, [r4, #0xe]
_08085E96:
	ldrb r0, [r4, #0xf]
	cmp r0, #0x3f
	bne _08085EA0
	movs r0, #0xff
	strb r0, [r4, #0xf]
_08085EA0:
	add sp, #0x48
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08085EB0: .4byte ReadSramFast

	thumb_func_start sub_8085EB4
sub_8085EB4: @ 0x08085EB4
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	bl GetTrap
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r4, #0
	bl WriteAndVerifySramFast
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8085ED0
sub_8085ED0: @ 0x08085ED0
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r4, _08085EF0 @ =ReadSramFast
	movs r0, #0
	bl GetTrap
	adds r1, r0, #0
	movs r2, #0x80
	lsls r2, r2, #1
	ldr r3, [r4]
	adds r0, r5, #0
	bl _call_via_r3
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08085EF0: .4byte ReadSramFast

	thumb_func_start sub_8085EF4
sub_8085EF4: @ 0x08085EF4
	push {lr}
	sub sp, #0x20
	mov r0, sp
	bl LoadGlobalSaveInfo
	mov r0, sp
	ldrb r0, [r0, #0x1f]
	cmp r0, #1
	beq _08085F0A
	movs r0, #0
	b _08085F0C
_08085F0A:
	movs r0, #1
_08085F0C:
	add sp, #0x20
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8085F14
sub_8085F14: @ 0x08085F14
	push {lr}
	bl sub_8085EF4
	adds r1, r0, #0
	movs r0, #1
	subs r0, r0, r1
	pop {r1}
	bx r1

	thumb_func_start sub_8085F24
sub_8085F24: @ 0x08085F24
	push {lr}
	sub sp, #0x20
	mov r0, sp
	bl LoadGlobalSaveInfo
	mov r1, sp
	movs r2, #0
	mov r0, sp
	ldrb r0, [r0, #0x1f]
	cmp r0, #0
	bne _08085F3C
	movs r2, #1
_08085F3C:
	strb r2, [r1, #0x1f]
	mov r0, sp
	bl sub_8084388
	add sp, #0x20
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8085F4C
sub_8085F4C: @ 0x08085F4C
	push {r4, r5, lr}
	adds r5, r1, #0
	ldr r1, _08085F6C @ =ReadSramFast
	ldr r4, _08085F70 @ =gBuf
	ldr r3, [r1]
	adds r1, r4, #0
	adds r2, r5, #0
	bl _call_via_r3
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_809FAB8
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08085F6C: .4byte ReadSramFast
_08085F70: .4byte gBuf

	thumb_func_start sub_8085F74
sub_8085F74: @ 0x08085F74
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r5, [r4, #0xa]
	ldrh r0, [r4, #8]
	bl sub_8084414
	adds r1, r5, #0
	bl sub_8085F4C
	ldr r1, [r4, #0xc]
	cmp r1, r0
	bne _08085F90
	movs r0, #1
	b _08085F92
_08085F90:
	movs r0, #0
_08085F92:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_8085F98
sub_8085F98: @ 0x08085F98
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r5, [r4, #0xa]
	ldrh r0, [r4, #8]
	bl sub_8084414
	adds r1, r5, #0
	bl sub_8085F4C
	str r0, [r4, #0xc]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8085FB4
sub_8085FB4: @ 0x08085FB4
	push {r4, r5, r6, lr}
	movs r6, #0
	ldr r4, _0808607C @ =gUnitArrayBlue
	movs r5, #0x33
_08085FBC:
	ldr r0, [r4]
	cmp r0, #0
	beq _08085FD4
	movs r0, #0
	str r0, [r4, #0x3c]
	adds r0, r4, #0
	movs r1, #0x24
	bl sub_8085F4C
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
_08085FD4:
	adds r4, #0x48
	subs r5, #1
	cmp r5, #0
	bge _08085FBC
	ldr r4, _08086080 @ =0x0202BCE8
	movs r5, #0x31
_08085FE0:
	ldr r0, [r4]
	cmp r0, #0
	beq _08085FF8
	movs r0, #0
	str r0, [r4, #0x3c]
	adds r0, r4, #0
	movs r1, #0x24
	bl sub_8085F4C
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
_08085FF8:
	adds r4, #0x48
	subs r5, #1
	cmp r5, #0
	bge _08085FE0
	ldr r4, _08086084 @ =0x0202CAF8
	movs r5, #9
_08086004:
	ldr r0, [r4]
	cmp r0, #0
	beq _0808601C
	movs r0, #0
	str r0, [r4, #0x3c]
	adds r0, r4, #0
	movs r1, #0x24
	bl sub_8085F4C
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
_0808601C:
	adds r4, #0x48
	subs r5, #1
	cmp r5, #0
	bge _08086004
	bl GetGlobalEidData
	adds r4, r0, #0
	bl sub_806BA90
	adds r1, r0, #0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	adds r0, r4, #0
	bl sub_8085F4C
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	bl GetChapterEidData
	adds r4, r0, #0
	bl sub_806BA9C
	adds r1, r0, #0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	adds r0, r4, #0
	bl sub_8085F4C
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	movs r0, #0
	bl GetTrap
	movs r1, #0x80
	bl sub_8085F4C
	adds r0, r6, r0
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	adds r0, r6, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0808607C: .4byte gUnitArrayBlue
_08086080: .4byte 0x0202BCE8
_08086084: .4byte 0x0202CAF8

	thumb_func_start sub_8086088
sub_8086088: @ 0x08086088
	sub sp, #8
	add sp, #8
	bx lr
	.align 2, 0

	thumb_func_start sub_8086090
sub_8086090: @ 0x08086090
	push {lr}
	adds r1, r0, #0
	movs r0, #0
	bl sub_8084438
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80860A4
sub_80860A4: @ 0x080860A4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x6c
	movs r0, #5
	bl sub_8084560
	mov r8, r0
	add r0, sp, #0x5c
	movs r4, #0
	strh r4, [r0]
	add r5, sp, #0x10
	ldr r2, _080861D8 @ =0x01000014
	adds r1, r5, #0
	bl CpuSet
	mov r0, sp
	adds r0, #0x5e
	strh r4, [r0]
	add r4, sp, #0x38
	ldr r2, _080861DC @ =0x01000007
	adds r1, r4, #0
	bl CpuSet
	movs r7, #0
	mov sb, r5
	add r0, sp, #0x60
	mov sl, r0
	mov r1, sp
	adds r1, #0x48
	str r1, [sp, #0x64]
	mov r3, sp
	adds r3, #0x4c
	str r3, [sp, #0x68]
	mov r6, r8
_080860EE:
	movs r0, #0xd8
	muls r0, r7, r0
	adds r0, #0x10
	mov r1, r8
	adds r4, r1, r0
	movs r5, #4
_080860FA:
	mov r0, sb
	adds r1, r4, #0
	movs r2, #0x28
	bl WriteAndVerifySramFast
	adds r4, #0x28
	subs r5, #1
	cmp r5, #0
	bge _080860FA
	add r0, sp, #0x38
	adds r1, r6, #0
	movs r2, #0xf
	bl WriteAndVerifySramFast
	adds r6, #0xd8
	adds r7, #1
	cmp r7, #9
	ble _080860EE
	movs r0, #7
	mov r3, sl
	strh r0, [r3]
	movs r1, #0x87
	lsls r1, r1, #4
	add r1, r8
	mov r0, sl
	movs r2, #2
	bl WriteAndVerifySramFast
	ldr r6, [sp, #0x64]
	mov sl, r6
	ldr r0, _080861E0 @ =0x0832731C
	movs r1, #3
	mov sb, r1
	ldr r5, _080861E4 @ =0x00000874
	add r5, r8
	adds r3, r0, #4
	mov r8, r3
	adds r4, r0, #0
	movs r7, #9
_08086148:
	ldrb r3, [r4]
	lsls r0, r3, #0x1e
	lsrs r0, r0, #0x1e
	mov r6, sb
	ands r0, r6
	movs r1, #4
	rsbs r1, r1, #0
	adds r2, r1, #0
	mov r6, sl
	ldrb r6, [r6]
	ands r2, r6
	orrs r2, r0
	lsls r0, r3, #0x1c
	lsrs r0, r0, #0x1e
	mov r1, sb
	ands r0, r1
	lsls r0, r0, #2
	movs r6, #0xd
	rsbs r6, r6, #0
	adds r1, r6, #0
	ands r2, r1
	orrs r2, r0
	movs r1, #0x10
	ands r1, r3
	movs r3, #0x11
	rsbs r3, r3, #0
	adds r0, r3, #0
	ands r2, r0
	orrs r2, r1
	mov r6, sl
	strb r2, [r6]
	ldr r2, [r4]
	lsrs r2, r2, #5
	lsls r2, r2, #5
	ldr r0, [sp, #0x48]
	movs r1, #0x1f
	ands r0, r1
	orrs r0, r2
	str r0, [sp, #0x48]
	mov r0, r8
	ldr r1, [sp, #0x68]
	bl sub_80368DC
	mov r0, sl
	adds r1, r5, #0
	movs r2, #0x14
	bl WriteAndVerifySramFast
	adds r5, #0x14
	movs r0, #0x14
	add r8, r0
	adds r4, #0x14
	subs r7, #1
	cmp r7, #0
	bge _08086148
	ldr r0, _080861E8 @ =0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl sub_80844D4
	add sp, #0x6c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080861D8: .4byte 0x01000014
_080861DC: .4byte 0x01000007
_080861E0: .4byte 0x0832731C
_080861E4: .4byte 0x00000874
_080861E8: .4byte 0x00020112

	thumb_func_start sub_80861EC
sub_80861EC: @ 0x080861EC
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	movs r0, #5
	bl sub_808460C
	ldr r2, _08086214 @ =ReadSramFast
	movs r1, #0xd8
	muls r1, r4, r1
	adds r0, r0, r1
	ldr r3, [r2]
	adds r1, r5, #0
	movs r2, #0xd8
	bl _call_via_r3
	ldrb r0, [r5]
	cmp r0, #0
	beq _08086218
	movs r0, #1
	b _0808621A
	.align 2, 0
_08086214: .4byte ReadSramFast
_08086218:
	movs r0, #0
_0808621A:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_8086220
sub_8086220: @ 0x08086220
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	movs r0, #5
	bl sub_808460C
	ldr r2, _08086254 @ =ReadSramFast
	movs r1, #0xd8
	muls r1, r4, r1
	adds r0, r0, r1
	ldr r4, _08086258 @ =0x0203DA18
	ldr r3, [r2]
	adds r1, r4, #0
	movs r2, #0xd8
	bl _call_via_r3
	ldrb r0, [r4]
	cmp r0, #0
	beq _0808625C
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_80368DC
	movs r0, #1
	b _0808625E
	.align 2, 0
_08086254: .4byte ReadSramFast
_08086258: .4byte 0x0203DA18
_0808625C:
	movs r0, #0
_0808625E:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_8086264
sub_8086264: @ 0x08086264
	push {r4, r5, r6, lr}
	sub sp, #0x14
	adds r6, r0, #0
	movs r0, #5
	bl sub_8084560
	adds r4, r0, #0
	add r0, sp, #0x10
	movs r1, #0
	strh r1, [r0]
	ldr r5, _080862AC @ =0x0203DA18
	ldr r2, _080862B0 @ =0x0100006C
	adds r1, r5, #0
	bl CpuSet
	movs r0, #0xd8
	muls r0, r6, r0
	adds r4, r4, r0
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #0xd8
	bl WriteAndVerifySramFast
	ldr r0, _080862B4 @ =0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl sub_80844D4
	add sp, #0x14
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080862AC: .4byte 0x0203DA18
_080862B0: .4byte 0x0100006C
_080862B4: .4byte 0x00020112

	thumb_func_start sub_80862B8
sub_80862B8: @ 0x080862B8
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	sub sp, #0x10
	adds r6, r0, #0
	mov sb, r1
	movs r0, #5
	bl sub_808460C
	adds r4, r0, #0
	movs r0, #5
	bl sub_8084560
	adds r5, r0, #0
	ldr r1, _08086324 @ =ReadSramFast
	movs r0, #0xd8
	mov r8, r0
	mov r0, r8
	muls r0, r6, r0
	adds r4, r4, r0
	ldr r6, _08086328 @ =0x0203DA18
	ldr r3, [r1]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #0xd8
	bl _call_via_r3
	mov r1, r8
	mov r0, sb
	muls r0, r1, r0
	adds r5, r5, r0
	adds r0, r6, #0
	adds r1, r5, #0
	movs r2, #0xd8
	bl WriteAndVerifySramFast
	ldr r0, _0808632C @ =0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl sub_80844D4
	add sp, #0x10
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08086324: .4byte ReadSramFast
_08086328: .4byte 0x0203DA18
_0808632C: .4byte 0x00020112

	thumb_func_start sub_8086330
sub_8086330: @ 0x08086330
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	mov r8, r0
	mov sl, r1
	movs r0, #5
	bl sub_808460C
	adds r5, r0, #0
	movs r0, #5
	bl sub_8084560
	adds r6, r0, #0
	ldr r0, _080863BC @ =ReadSramFast
	mov sb, r0
	movs r4, #0xd8
	mov r7, r8
	muls r7, r4, r7
	adds r0, r5, r7
	mov r1, sb
	ldr r3, [r1]
	ldr r1, _080863C0 @ =0x0203DA18
	movs r2, #0xd8
	bl _call_via_r3
	mov r0, sl
	muls r0, r4, r0
	adds r4, r0, #0
	adds r5, r5, r4
	ldr r1, _080863C4 @ =0x0203DAF0
	mov r8, r1
	mov r0, sb
	ldr r3, [r0]
	adds r0, r5, #0
	movs r2, #0xd8
	bl _call_via_r3
	adds r4, r6, r4
	ldr r0, _080863C0 @ =0x0203DA18
	adds r1, r4, #0
	movs r2, #0xd8
	bl WriteAndVerifySramFast
	adds r6, r6, r7
	mov r0, r8
	adds r1, r6, #0
	movs r2, #0xd8
	bl WriteAndVerifySramFast
	ldr r0, _080863C8 @ =0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl sub_80844D4
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080863BC: .4byte ReadSramFast
_080863C0: .4byte 0x0203DA18
_080863C4: .4byte 0x0203DAF0
_080863C8: .4byte 0x00020112

	thumb_func_start sub_80863CC
sub_80863CC: @ 0x080863CC
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #0x10
	adds r4, r0, #0
	mov r8, r1
	adds r6, r2, #0
	movs r0, #5
	bl sub_8084560
	adds r5, r0, #0
	movs r0, #0xd8
	muls r4, r0, r4
	adds r1, r5, r4
	adds r0, r6, #0
	movs r2, #0xf
	bl WriteAndVerifySramFast
	adds r4, #0x10
	adds r5, r5, r4
	mov r4, r8
	movs r6, #4
_080863F8:
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_80852C4
	adds r5, #0x28
	adds r4, #0x48
	subs r6, #1
	cmp r6, #0
	bge _080863F8
	ldr r0, _08086428 @ =0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl sub_80844D4
	add sp, #0x10
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08086428: .4byte 0x00020112

	thumb_func_start sub_808642C
sub_808642C: @ 0x0808642C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	adds r6, r1, #0
	adds r5, r2, #0
	movs r0, #5
	bl sub_808460C
	adds r7, r0, #0
	ldr r1, _08086480 @ =ReadSramFast
	movs r0, #0xd8
	mov r4, r8
	muls r4, r0, r4
	adds r0, r7, r4
	ldr r3, [r1]
	adds r1, r5, #0
	movs r2, #0xf
	bl _call_via_r3
	adds r4, #0x10
	adds r4, r7, r4
	movs r5, #4
_0808645A:
	adds r0, r4, #0
	adds r1, r6, #0
	bl sub_80855C4
	adds r6, #0x48
	adds r4, #0x28
	subs r5, #1
	cmp r5, #0
	bge _0808645A
	movs r0, #0xd8
	mov r1, r8
	muls r1, r0, r1
	adds r0, r1, #0
	adds r0, r7, r0
	ldrb r0, [r0]
	cmp r0, #0
	beq _08086484
	movs r0, #1
	b _08086486
	.align 2, 0
_08086480: .4byte ReadSramFast
_08086484:
	movs r0, #0
_08086486:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8086490
sub_8086490: @ 0x08086490
	push {r4, lr}
	sub sp, #0x10
	adds r4, r0, #0
	movs r0, #5
	bl sub_8084560
	adds r1, r0, #0
	ldr r0, _080864C4 @ =0x00000874
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #0xc8
	bl WriteAndVerifySramFast
	ldr r0, _080864C8 @ =0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl sub_80844D4
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080864C4: .4byte 0x00000874
_080864C8: .4byte 0x00020112

	thumb_func_start sub_80864CC
sub_80864CC: @ 0x080864CC
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #5
	bl sub_808460C
	ldr r1, _080864EC @ =ReadSramFast
	ldr r2, _080864F0 @ =0x00000874
	adds r0, r0, r2
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0xc8
	bl _call_via_r3
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080864EC: .4byte ReadSramFast
_080864F0: .4byte 0x00000874

	thumb_func_start sub_80864F4
sub_80864F4: @ 0x080864F4
	push {r4, lr}
	sub sp, #0x10
	adds r4, r0, #0
	movs r0, #5
	bl sub_8084560
	adds r1, r0, #0
	movs r0, #0x87
	lsls r0, r0, #4
	adds r1, r1, r0
	adds r0, r4, #0
	movs r2, #2
	bl WriteAndVerifySramFast
	ldr r0, _0808652C @ =0x00020112
	str r0, [sp]
	mov r1, sp
	movs r0, #2
	strb r0, [r1, #6]
	mov r0, sp
	movs r1, #5
	bl sub_80844D4
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808652C: .4byte 0x00020112

	thumb_func_start sub_8086530
sub_8086530: @ 0x08086530
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #5
	bl sub_808460C
	ldr r1, _08086554 @ =ReadSramFast
	movs r2, #0x87
	lsls r2, r2, #4
	adds r0, r0, r2
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #2
	bl _call_via_r3
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08086554: .4byte ReadSramFast

	thumb_func_start sub_8086558
sub_8086558: @ 0x08086558
	push {r4, lr}
	sub sp, #0x10
	movs r0, #5
	bl sub_8086090
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0808656E
	b _08086586
_0808656A:
	movs r0, #1
	b _08086588
_0808656E:
	movs r4, #0
_08086570:
	adds r0, r4, #0
	mov r1, sp
	bl sub_8086220
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _0808656A
	adds r4, #1
	cmp r4, #9
	ble _08086570
_08086586:
	movs r0, #0
_08086588:
	add sp, #0x10
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_8086590
sub_8086590: @ 0x08086590
	push {r4, r5, lr}
	ldr r1, _080865D0 @ =ReadSramFast
	ldr r5, _080865D4 @ =0x08689DDC
	ldr r0, [r5]
	ldr r4, _080865D8 @ =0x0203DBC8
	ldr r3, [r1]
	adds r1, r4, #0
	movs r2, #0x1c
	bl _call_via_r3
	ldr r1, [r4]
	ldr r0, _080865DC @ =0x50414D58
	cmp r1, r0
	bne _080865E4
	bl GetLang
	lsls r0, r0, #0x18
	ldr r1, _080865E0 @ =0x00020223
	adds r0, r0, r1
	ldr r1, [r4, #8]
	cmp r1, r0
	bne _080865E4
	ldr r0, [r4, #0x10]
	ldr r1, [r5]
	adds r0, r0, r1
	str r0, [r4, #0x10]
	ldr r0, [r4, #0x18]
	adds r0, r0, r1
	str r0, [r4, #0x18]
	movs r0, #1
	b _080865E6
	.align 2, 0
_080865D0: .4byte ReadSramFast
_080865D4: .4byte 0x08689DDC
_080865D8: .4byte 0x0203DBC8
_080865DC: .4byte 0x50414D58
_080865E0: .4byte 0x00020223
_080865E4:
	movs r0, #0
_080865E6:
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_80865EC
sub_80865EC: @ 0x080865EC
	ldr r2, _080865FC @ =0x0203DBC8
	ldr r1, [r2]
	ldr r0, _08086600 @ =0x50414D58
	cmp r1, r0
	bne _08086604
	ldr r0, [r2, #0x10]
	b _08086606
	.align 2, 0
_080865FC: .4byte 0x0203DBC8
_08086600: .4byte 0x50414D58
_08086604:
	movs r0, #0
_08086606:
	bx lr

	thumb_func_start sub_8086608
sub_8086608: @ 0x08086608
	ldr r2, _08086618 @ =0x0203DBC8
	ldr r1, [r2]
	ldr r0, _0808661C @ =0x50414D58
	cmp r1, r0
	bne _08086620
	movs r1, #0x14
	ldrsh r0, [r2, r1]
	b _08086622
	.align 2, 0
_08086618: .4byte 0x0203DBC8
_0808661C: .4byte 0x50414D58
_08086620:
	movs r0, #0
_08086622:
	bx lr

	thumb_func_start sub_8086624
sub_8086624: @ 0x08086624
	ldr r2, _08086634 @ =0x0203DBC8
	ldr r1, [r2]
	ldr r0, _08086638 @ =0x50414D58
	cmp r1, r0
	bne _0808663C
	ldr r0, [r2, #0x18]
	b _0808663E
	.align 2, 0
_08086634: .4byte 0x0203DBC8
_08086638: .4byte 0x50414D58
_0808663C:
	movs r0, #0
_0808663E:
	bx lr

	thumb_func_start sub_8086640
sub_8086640: @ 0x08086640
	ldr r2, _08086650 @ =0x0203DBC8
	ldr r1, [r2]
	ldr r0, _08086654 @ =0x50414D58
	cmp r1, r0
	bne _08086658
	movs r1, #0x16
	ldrsh r0, [r2, r1]
	b _0808665A
	.align 2, 0
_08086650: .4byte 0x0203DBC8
_08086654: .4byte 0x50414D58
_08086658:
	movs r0, #0
_0808665A:
	bx lr

	thumb_func_start sub_808665C
sub_808665C: @ 0x0808665C
	adds r2, r0, #0
	movs r3, #0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	cmp r3, r1
	bge _08086676
_0808666A:
	ldrh r0, [r2]
	adds r3, r0, r3
	adds r2, #2
	subs r1, #1
	cmp r1, #0
	bne _0808666A
_08086676:
	lsls r0, r3, #0x10
	lsrs r0, r0, #0x10
	bx lr

	thumb_func_start sub_808667C
sub_808667C: @ 0x0808667C
	push {r4, lr}
	ldr r4, _080866D0 @ =gBuf
	bl IsSramWorking
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080866E4
	ldr r1, _080866D4 @ =ReadSramFast
	ldr r0, _080866D8 @ =0x0E007000
	movs r2, #0x80
	lsls r2, r2, #5
	ldr r3, [r1]
	adds r1, r4, #0
	bl _call_via_r3
	ldr r1, [r4]
	ldr r0, _080866DC @ =0x50414D58
	cmp r1, r0
	bne _080866E4
	bl GetLang
	lsls r0, r0, #0x18
	ldr r1, _080866E0 @ =0x00020223
	adds r0, r0, r1
	ldr r1, [r4, #8]
	cmp r1, r0
	bne _080866E4
	ldrh r0, [r4, #4]
	cmp r0, #0
	beq _080866E4
	adds r0, r4, #0
	adds r0, #8
	ldrh r1, [r4, #4]
	bl sub_808665C
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrh r4, [r4, #6]
	cmp r4, r0
	bne _080866E4
	movs r0, #1
	b _080866E6
	.align 2, 0
_080866D0: .4byte gBuf
_080866D4: .4byte ReadSramFast
_080866D8: .4byte 0x0E007000
_080866DC: .4byte 0x50414D58
_080866E0: .4byte 0x00020223
_080866E4:
	movs r0, #0
_080866E6:
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_80866EC
sub_80866EC: @ 0x080866EC
	push {r4, r5, r6, lr}
	bl sub_8086590
	ldr r5, _08086754 @ =ReadSramFast
	bl sub_8086624
	adds r4, r0, #0
	ldr r6, _08086758 @ =gBuf
	bl sub_8086640
	adds r2, r0, #0
	ldr r3, [r5]
	adds r0, r4, #0
	adds r1, r6, #0
	bl _call_via_r3
	ldr r4, _0808675C @ =gTrialLoadInfo
	ldr r1, [r4]
	adds r0, r6, #0
	bl Decompress
	ldr r1, [r4]
	ldr r0, _08086760 @ =gPlaySt
	str r0, [r1, #0x18]
	ldr r0, _08086764 @ =gBmSt
	str r0, [r1, #0x1c]
	ldr r0, _08086768 @ =gActiveUnit
	str r0, [r1, #0x20]
	ldr r0, _0808676C @ =gUnitLut
	str r0, [r1, #0x24]
	ldr r0, _08086770 @ =gBattleUnitA
	str r0, [r1, #0x28]
	ldr r0, _08086774 @ =gBattleUnitB
	str r0, [r1, #0x2c]
	ldr r0, _08086778 @ =gBattleHits
	str r0, [r1, #0x30]
	movs r0, #0
	bl GetTrap
	ldr r1, [r4]
	str r0, [r1, #0x34]
	bl GetGlobalEidData
	ldr r1, [r4]
	str r0, [r1, #0x38]
	bl GetChapterEidData
	ldr r1, [r4]
	str r0, [r1, #0x3c]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08086754: .4byte ReadSramFast
_08086758: .4byte gBuf
_0808675C: .4byte gTrialLoadInfo
_08086760: .4byte gPlaySt
_08086764: .4byte gBmSt
_08086768: .4byte gActiveUnit
_0808676C: .4byte gUnitLut
_08086770: .4byte gBattleUnitA
_08086774: .4byte gBattleUnitB
_08086778: .4byte gBattleHits

	thumb_func_start sub_808677C
sub_808677C: @ 0x0808677C
	push {r4, lr}
	sub sp, #0x20
	adds r4, r0, #0
	mov r0, sp
	bl LoadGlobalSaveInfo
	movs r0, #0x28
	strb r0, [r4]
	adds r4, #1
	movs r0, #0x29
	strb r0, [r4]
	adds r4, #1
	mov r1, sp
	movs r0, #4
	ldrb r1, [r1, #0xe]
	ands r0, r1
	cmp r0, #0
	beq _080867A6
	movs r0, #0x2a
	strb r0, [r4]
	adds r4, #1
_080867A6:
	mov r1, sp
	movs r0, #2
	ldrb r1, [r1, #0xe]
	ands r0, r1
	cmp r0, #0
	beq _080867B8
	movs r0, #0x2b
	strb r0, [r4]
	adds r4, #1
_080867B8:
	mov r1, sp
	movs r0, #8
	ldrb r1, [r1, #0xe]
	ands r0, r1
	cmp r0, #0
	beq _080867CA
	movs r0, #0x2c
	strb r0, [r4]
	adds r4, #1
_080867CA:
	bl sub_808667C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080867E2
	bl sub_80866EC
	movs r1, #1
	rsbs r1, r1, #0
	adds r0, r1, #0
	strb r0, [r4]
	adds r4, #1
_080867E2:
	movs r0, #0
	strb r0, [r4]
	movs r0, #1
	add sp, #0x20
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_80867F0
sub_80867F0: @ 0x080867F0
	push {lr}
	bl GetChapterUnk_0802BBD0
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80867FC
sub_80867FC: @ 0x080867FC
	push {lr}
	movs r2, #0
	adds r0, #1
	cmp r0, #0x2d
	bls _08086808
	b _08086904
_08086808:
	lsls r0, r0, #2
	ldr r1, _08086814 @ =_08086818
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08086814: .4byte _08086818
_08086818: @ jump table
	.4byte _080868F8 @ case 0
	.4byte _08086904 @ case 1
	.4byte _08086904 @ case 2
	.4byte _08086904 @ case 3
	.4byte _08086904 @ case 4
	.4byte _08086904 @ case 5
	.4byte _08086904 @ case 6
	.4byte _08086904 @ case 7
	.4byte _08086904 @ case 8
	.4byte _08086904 @ case 9
	.4byte _08086904 @ case 10
	.4byte _08086904 @ case 11
	.4byte _08086904 @ case 12
	.4byte _08086904 @ case 13
	.4byte _08086904 @ case 14
	.4byte _08086904 @ case 15
	.4byte _08086904 @ case 16
	.4byte _08086904 @ case 17
	.4byte _08086904 @ case 18
	.4byte _08086904 @ case 19
	.4byte _08086904 @ case 20
	.4byte _08086904 @ case 21
	.4byte _08086904 @ case 22
	.4byte _08086904 @ case 23
	.4byte _08086904 @ case 24
	.4byte _08086904 @ case 25
	.4byte _08086904 @ case 26
	.4byte _08086904 @ case 27
	.4byte _08086904 @ case 28
	.4byte _08086904 @ case 29
	.4byte _08086904 @ case 30
	.4byte _08086904 @ case 31
	.4byte _08086904 @ case 32
	.4byte _08086904 @ case 33
	.4byte _08086904 @ case 34
	.4byte _08086904 @ case 35
	.4byte _08086904 @ case 36
	.4byte _08086904 @ case 37
	.4byte _08086904 @ case 38
	.4byte _08086904 @ case 39
	.4byte _08086904 @ case 40
	.4byte _080868D0 @ case 41
	.4byte _080868D8 @ case 42
	.4byte _080868E0 @ case 43
	.4byte _080868E8 @ case 44
	.4byte _080868F0 @ case 45
_080868D0:
	ldr r2, _080868D4 @ =0x00000C7C
	b _08086904
	.align 2, 0
_080868D4: .4byte 0x00000C7C
_080868D8:
	ldr r2, _080868DC @ =0x00000C7F
	b _08086904
	.align 2, 0
_080868DC: .4byte 0x00000C7F
_080868E0:
	ldr r2, _080868E4 @ =0x00000C82
	b _08086904
	.align 2, 0
_080868E4: .4byte 0x00000C82
_080868E8:
	ldr r2, _080868EC @ =0x00000C85
	b _08086904
	.align 2, 0
_080868EC: .4byte 0x00000C85
_080868F0:
	ldr r2, _080868F4 @ =0x00000C88
	b _08086904
	.align 2, 0
_080868F4: .4byte 0x00000C88
_080868F8:
	ldr r0, _08086900 @ =gTrialLoadInfo
	ldr r0, [r0]
	ldr r0, [r0, #0x10]
	b _0808690A
	.align 2, 0
_08086900: .4byte gTrialLoadInfo
_08086904:
	adds r0, r2, #0
	bl DecodeMsg
_0808690A:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8086910
sub_8086910: @ 0x08086910
	push {lr}
	movs r2, #0
	adds r0, #1
	cmp r0, #0x2d
	bls _0808691C
	b _08086A18
_0808691C:
	lsls r0, r0, #2
	ldr r1, _08086928 @ =_0808692C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08086928: .4byte _0808692C
_0808692C: @ jump table
	.4byte _08086A0C @ case 0
	.4byte _08086A18 @ case 1
	.4byte _08086A18 @ case 2
	.4byte _08086A18 @ case 3
	.4byte _08086A18 @ case 4
	.4byte _08086A18 @ case 5
	.4byte _08086A18 @ case 6
	.4byte _08086A18 @ case 7
	.4byte _08086A18 @ case 8
	.4byte _08086A18 @ case 9
	.4byte _08086A18 @ case 10
	.4byte _08086A18 @ case 11
	.4byte _08086A18 @ case 12
	.4byte _08086A18 @ case 13
	.4byte _08086A18 @ case 14
	.4byte _08086A18 @ case 15
	.4byte _08086A18 @ case 16
	.4byte _08086A18 @ case 17
	.4byte _08086A18 @ case 18
	.4byte _08086A18 @ case 19
	.4byte _08086A18 @ case 20
	.4byte _08086A18 @ case 21
	.4byte _08086A18 @ case 22
	.4byte _08086A18 @ case 23
	.4byte _08086A18 @ case 24
	.4byte _08086A18 @ case 25
	.4byte _08086A18 @ case 26
	.4byte _08086A18 @ case 27
	.4byte _08086A18 @ case 28
	.4byte _08086A18 @ case 29
	.4byte _08086A18 @ case 30
	.4byte _08086A18 @ case 31
	.4byte _08086A18 @ case 32
	.4byte _08086A18 @ case 33
	.4byte _08086A18 @ case 34
	.4byte _08086A18 @ case 35
	.4byte _08086A18 @ case 36
	.4byte _08086A18 @ case 37
	.4byte _08086A18 @ case 38
	.4byte _08086A18 @ case 39
	.4byte _08086A18 @ case 40
	.4byte _080869E4 @ case 41
	.4byte _080869EC @ case 42
	.4byte _080869F2 @ case 43
	.4byte _080869FC @ case 44
	.4byte _08086A04 @ case 45
_080869E4:
	ldr r2, _080869E8 @ =0x00000C7D
	b _08086A18
	.align 2, 0
_080869E8: .4byte 0x00000C7D
_080869EC:
	movs r2, #0xc8
	lsls r2, r2, #4
	b _08086A18
_080869F2:
	ldr r2, _080869F8 @ =0x00000C83
	b _08086A18
	.align 2, 0
_080869F8: .4byte 0x00000C83
_080869FC:
	ldr r2, _08086A00 @ =0x00000C86
	b _08086A18
	.align 2, 0
_08086A00: .4byte 0x00000C86
_08086A04:
	ldr r2, _08086A08 @ =0x00000C89
	b _08086A18
	.align 2, 0
_08086A08: .4byte 0x00000C89
_08086A0C:
	ldr r0, _08086A14 @ =gTrialLoadInfo
	ldr r0, [r0]
	ldr r0, [r0, #0x14]
	b _08086A1E
	.align 2, 0
_08086A14: .4byte gTrialLoadInfo
_08086A18:
	adds r0, r2, #0
	bl DecodeMsg
_08086A1E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start LoadTrialMapBonusUnits
LoadTrialMapBonusUnits: @ 0x08086A24
	push {r4, lr}
	bl GetGlobalCompletedPlaythroughCount
	adds r4, r0, #1
	ldr r1, _08086A88 @ =gMapHidden
	movs r0, #0
	str r0, [r1]
	cmp r4, #1
	ble _08086A3C
	ldr r0, _08086A8C @ =0x086876AC
	bl BatchCreateUnits
_08086A3C:
	cmp r4, #2
	ble _08086A46
	ldr r0, _08086A90 @ =0x086876CC
	bl BatchCreateUnits
_08086A46:
	cmp r4, #3
	ble _08086A50
	ldr r0, _08086A94 @ =0x086876EC
	bl BatchCreateUnits
_08086A50:
	cmp r4, #4
	ble _08086A5A
	ldr r0, _08086A98 @ =0x0868770C
	bl BatchCreateUnits
_08086A5A:
	cmp r4, #5
	ble _08086A64
	ldr r0, _08086A9C @ =0x0868772C
	bl BatchCreateUnits
_08086A64:
	cmp r4, #6
	ble _08086A6E
	ldr r0, _08086AA0 @ =0x0868774C
	bl BatchCreateUnits
_08086A6E:
	cmp r4, #7
	ble _08086A78
	ldr r0, _08086AA4 @ =0x0868776C
	bl BatchCreateUnits
_08086A78:
	cmp r4, #9
	ble _08086A82
	ldr r0, _08086AA8 @ =0x0868778C
	bl BatchCreateUnits
_08086A82:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08086A88: .4byte gMapHidden
_08086A8C: .4byte 0x086876AC
_08086A90: .4byte 0x086876CC
_08086A94: .4byte 0x086876EC
_08086A98: .4byte 0x0868770C
_08086A9C: .4byte 0x0868772C
_08086AA0: .4byte 0x0868774C
_08086AA4: .4byte 0x0868776C
_08086AA8: .4byte 0x0868778C

	thumb_func_start sub_8086AAC
sub_8086AAC: @ 0x08086AAC
	push {r4, r5, lr}
	bl GetGameTime
	ldr r4, _08086AF4 @ =gPlaySt
	ldr r1, [r4, #4]
	subs r0, r0, r1
	movs r1, #0xb4
	bl __udivsi3
	adds r3, r0, #0
	ldr r0, _08086AF8 @ =0x0000EA60
	cmp r3, r0
	ble _08086AC8
	adds r3, r0, #0
_08086AC8:
	ldr r0, _08086AFC @ =0x0203DBE4
	movs r2, #0x3f
	ldrb r1, [r4, #0xe]
	ands r2, r1
	movs r1, #0x40
	rsbs r1, r1, #0
	ldrb r5, [r0]
	ands r1, r5
	orrs r1, r2
	strb r1, [r0]
	ldrh r4, [r4, #0x10]
	lsls r2, r4, #6
	movs r1, #0x3f
	ldrh r4, [r0]
	ands r1, r4
	orrs r1, r2
	strh r1, [r0]
	strh r3, [r0, #2]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08086AF4: .4byte gPlaySt
_08086AF8: .4byte 0x0000EA60
_08086AFC: .4byte 0x0203DBE4

	thumb_func_start sub_8086B00
sub_8086B00: @ 0x08086B00
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r2, #0
	ldr r0, _08086B50 @ =gMapTerrain
	ldr r0, [r0]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	adds r5, r0, r4
	ldrb r3, [r5]
	ldr r0, [r1, #4]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, r3
	bne _08086B20
	movs r2, #1
_08086B20:
	lsls r2, r2, #1
	subs r0, r1, #4
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, r3
	bne _08086B30
	adds r2, #1
_08086B30:
	lsls r2, r2, #1
	ldrb r0, [r5, #1]
	cmp r0, r3
	bne _08086B3A
	adds r2, #1
_08086B3A:
	lsls r2, r2, #1
	subs r0, r5, #1
	ldrb r0, [r0]
	cmp r0, r3
	bne _08086B46
	adds r2, #1
_08086B46:
	adds r0, r2, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08086B50: .4byte gMapTerrain

	thumb_func_start sub_8086B54
sub_8086B54: @ 0x08086B54
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	movs r3, #0
	ldr r2, _08086BE4 @ =gMapTerrain
	ldr r1, [r2]
	lsls r0, r5, #2
	adds r0, r0, r1
	ldr r0, [r0, #4]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x10
	beq _08086B7A
	cmp r0, #0x15
	beq _08086B7A
	cmp r0, #0x16
	beq _08086B7A
	cmp r0, #0x13
	bne _08086B7C
_08086B7A:
	adds r3, #1
_08086B7C:
	lsls r3, r3, #1
	ldr r0, [r2]
	lsls r1, r5, #2
	adds r0, r1, r0
	subs r0, #4
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x10
	beq _08086B9C
	cmp r0, #0x15
	beq _08086B9C
	cmp r0, #0x16
	beq _08086B9C
	cmp r0, #0x13
	bne _08086B9E
_08086B9C:
	adds r3, #1
_08086B9E:
	lsls r3, r3, #1
	ldr r0, [r2]
	adds r0, r1, r0
	ldr r0, [r0]
	adds r0, r4, r0
	ldrb r0, [r0, #1]
	cmp r0, #0x10
	beq _08086BBA
	cmp r0, #0x15
	beq _08086BBA
	cmp r0, #0x16
	beq _08086BBA
	cmp r0, #0x13
	bne _08086BBC
_08086BBA:
	adds r3, #1
_08086BBC:
	lsls r3, r3, #1
	ldr r0, [r2]
	adds r0, r1, r0
	ldr r0, [r0]
	adds r0, r4, r0
	subs r0, #1
	ldrb r0, [r0]
	cmp r0, #0x10
	beq _08086BDA
	cmp r0, #0x15
	beq _08086BDA
	cmp r0, #0x16
	beq _08086BDA
	cmp r0, #0x13
	bne _08086BDC
_08086BDA:
	adds r3, #1
_08086BDC:
	adds r0, r3, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08086BE4: .4byte gMapTerrain

	thumb_func_start sub_8086BE8
sub_8086BE8: @ 0x08086BE8
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, _08086C20 @ =gMapTerrain
	ldr r0, [r0]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	adds r2, r0, r4
	ldrb r3, [r2]
	subs r0, r2, #1
	ldrb r6, [r0]
	cmp r6, r3
	beq _08086C08
	ldrb r5, [r2, #1]
	cmp r5, r3
	bne _08086C40
_08086C08:
	subs r0, r1, #4
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r2, [r0]
	adds r0, r2, #0
	subs r0, #0x15
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _08086C24
	movs r0, #4
	b _08086CFC
	.align 2, 0
_08086C20: .4byte gMapTerrain
_08086C24:
	ldr r0, [r1, #4]
	adds r0, r0, r4
	ldrb r0, [r0]
	subs r0, #0x15
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _08086C38
	movs r0, #0
	b _08086CFC
_08086C38:
	cmp r2, #0xf
	bne _08086CFA
	movs r0, #0xc
	b _08086CFC
_08086C40:
	subs r0, r1, #4
	ldr r0, [r0]
	adds r2, r0, r4
	ldrb r0, [r2]
	cmp r0, r3
	beq _08086C56
	ldr r0, [r1, #4]
	adds r1, r0, r4
	ldrb r0, [r1]
	cmp r0, r3
	bne _08086C82
_08086C56:
	adds r0, r5, #0
	subs r0, #0x15
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _08086C66
	movs r0, #2
	b _08086CFC
_08086C66:
	adds r0, r6, #0
	subs r0, #0x15
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _08086C76
	movs r0, #6
	b _08086CFC
_08086C76:
	cmp r5, #0xf
	bne _08086C7E
	movs r0, #0xd
	b _08086CFC
_08086C7E:
	movs r0, #9
	b _08086CFC
_08086C82:
	subs r0, r1, #1
	ldrb r5, [r0]
	cmp r5, r3
	beq _08086C90
	ldrb r4, [r2, #1]
	cmp r4, r3
	bne _08086CC0
_08086C90:
	subs r0, r2, #1
	ldrb r2, [r0]
	adds r0, r2, #0
	subs r0, #0x15
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _08086CA4
	movs r0, #5
	b _08086CFC
_08086CA4:
	ldrb r0, [r1, #1]
	subs r0, #0x15
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _08086CB4
	movs r0, #1
	b _08086CFC
_08086CB4:
	cmp r2, #0xf
	bne _08086CBC
	movs r0, #0xe
	b _08086CFC
_08086CBC:
	movs r0, #0xa
	b _08086CFC
_08086CC0:
	ldrb r1, [r1, #1]
	cmp r1, r3
	beq _08086CCE
	subs r0, r2, #1
	ldrb r0, [r0]
	cmp r0, r3
	bne _08086CFA
_08086CCE:
	adds r0, r4, #0
	subs r0, #0x15
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _08086CDE
	movs r0, #3
	b _08086CFC
_08086CDE:
	adds r0, r5, #0
	subs r0, #0x15
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _08086CEE
	movs r0, #7
	b _08086CFC
_08086CEE:
	cmp r4, #0xf
	bne _08086CF6
	movs r0, #0xf
	b _08086CFC
_08086CF6:
	movs r0, #0xb
	b _08086CFC
_08086CFA:
	movs r0, #8
_08086CFC:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8086D04
sub_8086D04: @ 0x08086D04
	adds r2, r0, #0
	ldr r0, _08086D3C @ =gMapTerrain
	ldr r0, [r0]
	lsls r1, r1, #2
	adds r1, r1, r0
	subs r0, r1, #4
	ldr r0, [r0]
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r0, #0x2d
	beq _08086D36
	ldr r0, [r1, #4]
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r0, #0x2d
	beq _08086D36
	ldr r0, [r1]
	adds r1, r2, r0
	subs r0, r1, #1
	ldrb r0, [r0]
	cmp r0, #0x2d
	beq _08086D36
	ldrb r1, [r1, #1]
	cmp r1, #0x2d
	bne _08086D40
_08086D36:
	movs r0, #0x12
	b _08086D42
	.align 2, 0
_08086D3C: .4byte gMapTerrain
_08086D40:
	movs r0, #0x11
_08086D42:
	bx lr

	thumb_func_start sub_8086D44
sub_8086D44: @ 0x08086D44
	ldr r2, _08086D5C @ =gMapTerrain
	ldr r2, [r2]
	lsls r1, r1, #2
	adds r1, r1, r2
	ldr r1, [r1]
	adds r0, r0, r1
	ldrb r1, [r0, #1]
	cmp r1, #0x1e
	bne _08086D60
	movs r0, #0x16
	b _08086D6E
	.align 2, 0
_08086D5C: .4byte gMapTerrain
_08086D60:
	subs r0, #1
	ldrb r0, [r0]
	cmp r0, #0x1e
	beq _08086D6C
	movs r0, #7
	b _08086D6E
_08086D6C:
	movs r0, #0x17
_08086D6E:
	bx lr

	thumb_func_start sub_8086D70
sub_8086D70: @ 0x08086D70
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	ldr r7, _08086DB8 @ =gMapTerrain
	ldr r0, [r7]
	lsls r6, r1, #2
	adds r2, r6, r0
	ldr r0, [r2]
	adds r0, r4, r0
	ldrb r1, [r0, #1]
	cmp r1, #0x13
	beq _08086DB4
	subs r0, #1
	ldrb r3, [r0]
	cmp r3, #0x13
	beq _08086DB4
	ldr r0, [r2, #4]
	adds r0, r0, r4
	ldrb r5, [r0]
	cmp r5, #0x13
	beq _08086DC4
	subs r0, r2, #4
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x13
	beq _08086DC4
	cmp r1, #0x10
	beq _08086DC4
	cmp r3, #0x10
	beq _08086DC4
	cmp r5, #0x10
	beq _08086DB4
	cmp r0, #0x10
	bne _08086DBC
_08086DB4:
	movs r0, #0x10
	b _08086DE4
	.align 2, 0
_08086DB8: .4byte gMapTerrain
_08086DBC:
	cmp r1, #0x16
	beq _08086DC4
	cmp r3, #0x16
	bne _08086DC8
_08086DC4:
	movs r0, #0x18
	b _08086DE4
_08086DC8:
	ldr r0, [r7]
	adds r1, r6, r0
	ldr r0, [r1, #4]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x16
	beq _08086DE2
	subs r0, r1, #4
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0x16
	bne _08086DE4
_08086DE2:
	movs r0, #0x10
_08086DE4:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8086DEC
sub_8086DEC: @ 0x08086DEC
	push {lr}
	adds r2, r0, #0
	adds r3, r1, #0
	ldr r0, _08086E10 @ =gMapTerrain
	ldr r1, [r0]
	lsls r0, r3, #2
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r2
	ldrb r0, [r0]
	cmp r0, #0x31
	bls _08086E06
	b _08086F86
_08086E06:
	lsls r0, r0, #2
	ldr r1, _08086E14 @ =_08086E18
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08086E10: .4byte gMapTerrain
_08086E14: .4byte _08086E18
_08086E18: @ jump table
	.4byte _08086F86 @ case 0
	.4byte _08086EE0 @ case 1
	.4byte _08086EE4 @ case 2
	.4byte _08086EF0 @ case 3
	.4byte _08086EF0 @ case 4
	.4byte _08086EF0 @ case 5
	.4byte _08086EF4 @ case 6
	.4byte _08086EF4 @ case 7
	.4byte _08086EF8 @ case 8
	.4byte _08086F86 @ case 9
	.4byte _08086EFC @ case 10
	.4byte _08086F00 @ case 11
	.4byte _08086F04 @ case 12
	.4byte _08086F08 @ case 13
	.4byte _08086F0C @ case 14
	.4byte _08086F0C @ case 15
	.4byte _08086F10 @ case 16
	.4byte _08086F1C @ case 17
	.4byte _08086F20 @ case 18
	.4byte _08086F24 @ case 19
	.4byte _08086F86 @ case 20
	.4byte _08086F2E @ case 21
	.4byte _08086F2E @ case 22
	.4byte _08086F3A @ case 23
	.4byte _08086F3A @ case 24
	.4byte _08086F76 @ case 25
	.4byte _08086F76 @ case 26
	.4byte _08086F76 @ case 27
	.4byte _08086F76 @ case 28
	.4byte _08086F3E @ case 29
	.4byte _08086F42 @ case 30
	.4byte _08086F4C @ case 31
	.4byte _08086F50 @ case 32
	.4byte _08086F50 @ case 33
	.4byte _08086F76 @ case 34
	.4byte _08086F86 @ case 35
	.4byte _08086F86 @ case 36
	.4byte _08086F54 @ case 37
	.4byte _08086F58 @ case 38
	.4byte _08086F64 @ case 39
	.4byte _08086F64 @ case 40
	.4byte _08086F64 @ case 41
	.4byte _08086F68 @ case 42
	.4byte _08086F76 @ case 43
	.4byte _08086F76 @ case 44
	.4byte _08086F6C @ case 45
	.4byte _08086F76 @ case 46
	.4byte _08086F2E @ case 47
	.4byte _08086F86 @ case 48
	.4byte _08086F82 @ case 49
_08086EE0:
	movs r0, #1
	b _08086F88
_08086EE4:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_8086B00
	adds r0, #0x40
	b _08086F88
_08086EF0:
	movs r0, #2
	b _08086F88
_08086EF4:
	movs r0, #3
	b _08086F88
_08086EF8:
	movs r0, #4
	b _08086F88
_08086EFC:
	movs r0, #5
	b _08086F88
_08086F00:
	movs r0, #6
	b _08086F88
_08086F04:
	movs r0, #8
	b _08086F88
_08086F08:
	movs r0, #9
	b _08086F88
_08086F0C:
	movs r0, #0xa
	b _08086F88
_08086F10:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_8086B54
	adds r0, #0x60
	b _08086F88
_08086F1C:
	movs r0, #0xb
	b _08086F88
_08086F20:
	movs r0, #0x14
	b _08086F88
_08086F24:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_8086D70
	b _08086F88
_08086F2E:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_8086B00
	adds r0, #0x30
	b _08086F88
_08086F3A:
	movs r0, #0xc
	b _08086F88
_08086F3E:
	movs r0, #0xd
	b _08086F88
_08086F42:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_8086D44
	b _08086F88
_08086F4C:
	movs r0, #0xe
	b _08086F88
_08086F50:
	movs r0, #0xf
	b _08086F88
_08086F54:
	movs r0, #0x1a
	b _08086F88
_08086F58:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_8086BE8
	adds r0, #0x50
	b _08086F88
_08086F64:
	movs r0, #0x13
	b _08086F88
_08086F68:
	movs r0, #0x3a
	b _08086F88
_08086F6C:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_8086D04
	b _08086F88
_08086F76:
	adds r0, r2, #0
	adds r1, r3, #0
	bl sub_8086B00
	adds r0, #0x20
	b _08086F88
_08086F82:
	movs r0, #0x19
	b _08086F88
_08086F86:
	movs r0, #0
_08086F88:
	pop {r1}
	bx r1

	thumb_func_start sub_8086F8C
sub_8086F8C: @ 0x08086F8C
	push {lr}
	bl sub_8086DEC
	lsls r0, r0, #5
	ldr r1, _08086F9C @ =gBuf
	adds r0, r0, r1
	pop {r1}
	bx r1
	.align 2, 0
_08086F9C: .4byte gBuf

	thumb_func_start sub_8086FA0
sub_8086FA0: @ 0x08086FA0
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r1, _08086FD4 @ =0x0832785C
	mov r0, sp
	movs r2, #3
	bl memcpy
	ldr r0, _08086FD8 @ =gMapUnit
	ldr r0, [r0]
	lsls r4, r4, #2
	adds r4, r4, r0
	ldr r0, [r4]
	adds r0, r0, r5
	ldrb r0, [r0]
	cmp r0, #0
	beq _08086FE0
	asrs r0, r0, #6
	add r0, sp
	ldrb r0, [r0]
	lsls r0, r0, #5
	ldr r1, _08086FDC @ =gBuf
	adds r0, r0, r1
	b _08086FE2
	.align 2, 0
_08086FD4: .4byte 0x0832785C
_08086FD8: .4byte gMapUnit
_08086FDC: .4byte gBuf
_08086FE0:
	ldr r0, _08086FEC @ =gBuf
_08086FE2:
	add sp, #4
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08086FEC: .4byte gBuf

	thumb_func_start sub_8086FF0
sub_8086FF0: @ 0x08086FF0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r4, r0, #0
	str r1, [sp]
	cmp r4, #0
	bne _08087006
	ldr r4, _08087018 @ =0x06000020
_08087006:
	lsls r0, r4, #0xf
	lsrs r7, r0, #0x14
	ldr r0, [sp]
	cmp r0, #0
	bge _08087014
	movs r1, #3
	str r1, [sp]
_08087014:
	movs r2, #0
	b _080871EA
	.align 2, 0
_08087018: .4byte 0x06000020
_0808701C:
	movs r6, #0
	movs r2, #0
	ldrsh r0, [r1, r2]
	mov r3, r8
	adds r3, #2
	str r3, [sp, #0xc]
	cmp r6, r0
	blt _0808702E
	b _080871E8
_0808702E:
	movs r0, #1
	add r0, r8
	mov sb, r0
	mov r1, r8
	lsrs r0, r1, #0x1f
	add r0, r8
	asrs r0, r0, #1
	lsls r0, r0, #5
	str r0, [sp, #4]
	movs r2, #1
	mov sl, r2
_08087044:
	adds r0, r6, #0
	mov r1, r8
	bl sub_8086F8C
	adds r5, r0, #0
	mov r0, sl
	mov r1, r8
	bl sub_8086F8C
	adds r1, r0, #0
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r5, #4]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1, #4]
	strh r0, [r4]
	adds r4, #2
	adds r0, r6, #0
	mov r1, sb
	bl sub_8086F8C
	adds r5, r0, #0
	mov r0, sl
	mov r1, sb
	bl sub_8086F8C
	adds r1, r0, #0
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r5, #4]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1, #4]
	strh r0, [r4]
	adds r4, #2
	ldr r0, _08087208 @ =gBg1Tm
	asrs r2, r6, #0x1f
	subs r1, r6, r2
	asrs r1, r1, #1
	ldr r3, [sp, #4]
	adds r1, r3, r1
	lsls r1, r1, #1
	adds r1, r1, r0
	ldr r3, [sp]
	lsls r0, r3, #0xc
	adds r0, r7, r0
	strh r0, [r1]
	adds r7, #1
	ldr r0, _0808720C @ =gMapUnit
	ldr r1, [r0]
	mov r3, r8
	lsls r0, r3, #2
	adds r3, r0, r1
	ldr r0, [r3]
	adds r1, r0, r6
	ldrb r0, [r1]
	str r2, [sp, #8]
	cmp r0, #0
	bne _08087122
	ldrb r0, [r1, #1]
	cmp r0, #0
	bne _08087122
	ldr r0, [r3, #4]
	adds r1, r0, r6
	ldrb r0, [r1]
	cmp r0, #0
	bne _08087122
	ldrb r0, [r1, #1]
	cmp r0, #0
	beq _080871D6
_08087122:
	adds r0, r6, #0
	mov r1, r8
	bl sub_8086FA0
	adds r5, r0, #0
	mov r0, sl
	mov r1, r8
	bl sub_8086FA0
	adds r1, r0, #0
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r5, #4]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1, #4]
	strh r0, [r4]
	adds r4, #2
	adds r0, r6, #0
	mov r1, sb
	bl sub_8086FA0
	adds r5, r0, #0
	mov r0, sl
	mov r1, sb
	bl sub_8086FA0
	adds r1, r0, #0
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	adds r5, #4
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	adds r1, #4
	ldrh r0, [r5]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r5, #4]
	strh r0, [r4]
	adds r4, #2
	ldrh r0, [r1, #4]
	strh r0, [r4]
	adds r4, #2
	ldr r0, _08087210 @ =gBg0Tm
	ldr r2, [sp, #8]
	subs r1, r6, r2
	asrs r1, r1, #1
	ldr r3, [sp, #4]
	adds r1, r3, r1
	lsls r1, r1, #1
	adds r1, r1, r0
	ldr r0, [sp]
	adds r0, #1
	lsls r0, r0, #0xc
	adds r0, r7, r0
	strh r0, [r1]
	adds r7, #1
_080871D6:
	movs r0, #2
	add sl, r0
	adds r6, #2
	ldr r0, _08087214 @ =gMapSize
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r6, r0
	bge _080871E8
	b _08087044
_080871E8:
	ldr r2, [sp, #0xc]
_080871EA:
	mov r8, r2
	ldr r1, _08087214 @ =gMapSize
	movs r3, #2
	ldrsh r0, [r1, r3]
	cmp r8, r0
	bge _080871F8
	b _0808701C
_080871F8:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08087208: .4byte gBg1Tm
_0808720C: .4byte gMapUnit
_08087210: .4byte gBg0Tm
_08087214: .4byte gMapSize

	thumb_func_start sub_8087218
sub_8087218: @ 0x08087218
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08087250 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808722C
	movs r0, #0x78
	bl m4aSongNumStart
_0808722C:
	adds r0, r4, #0
	bl sub_8087A88
	movs r4, #1
	rsbs r4, r4, #0
	adds r0, r4, #0
	bl sub_80877AC
	movs r0, #0
	adds r1, r4, #0
	bl sub_8086FF0
	movs r0, #3
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08087250: .4byte gPlaySt

	thumb_func_start sub_8087254
sub_8087254: @ 0x08087254
	ldr r0, _08087280 @ =0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r1, r0, #0x10
	ldr r3, _08087284 @ =0x02000508
	cmp r1, #0xa0
	bls _0808726C
	ldr r0, _08087288 @ =0x02000500
	ldr r0, [r0]
	str r0, [r3]
	movs r1, #0
_0808726C:
	ldr r2, _0808728C @ =0x04000040
	ldr r0, [r3]
	lsls r1, r1, #2
	adds r1, r1, r0
	ldrh r3, [r1]
	lsls r0, r3, #8
	ldrh r1, [r1, #2]
	adds r0, r1, r0
	strh r0, [r2]
	bx lr
	.align 2, 0
_08087280: .4byte 0x04000006
_08087284: .4byte 0x02000508
_08087288: .4byte 0x02000500
_0808728C: .4byte 0x04000040

	thumb_func_start sub_8087290
sub_8087290: @ 0x08087290
	ldr r2, _080872A0 @ =0x02000500
	ldr r3, [r2]
	ldr r1, _080872A4 @ =0x02000504
	ldr r0, [r1]
	str r0, [r2]
	str r3, [r1]
	bx lr
	.align 2, 0
_080872A0: .4byte 0x02000500
_080872A4: .4byte 0x02000504

	thumb_func_start sub_80872A8
sub_80872A8: @ 0x080872A8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r1, _080873A8 @ =0x02000500
	ldr r2, _080873AC @ =0x02000280
	str r2, [r1]
	ldr r3, _080873B0 @ =0x02000504
	ldr r4, _080873B4 @ =0xFFFFFD80
	adds r1, r2, r4
	str r1, [r3]
	ldr r1, _080873B8 @ =0x02000508
	str r2, [r1]
	ldr r7, _080873BC @ =gDispIo
	mov ip, r7
	movs r1, #0x20
	mov r8, r1
	mov r1, r8
	mov r2, ip
	ldrb r2, [r2, #1]
	orrs r1, r2
	movs r2, #0x41
	rsbs r2, r2, #0
	ands r1, r2
	movs r2, #0x7f
	ands r1, r2
	mov r3, ip
	strb r1, [r3, #1]
	movs r4, #0x34
	add r4, ip
	mov sb, r4
	movs r4, #1
	mov r7, sb
	ldrb r7, [r7]
	orrs r4, r7
	movs r1, #2
	orrs r4, r1
	movs r6, #4
	orrs r4, r6
	movs r5, #8
	orrs r4, r5
	movs r2, #0x10
	orrs r4, r2
	movs r1, #0x36
	add r1, ip
	mov sl, r1
	movs r3, #2
	rsbs r3, r3, #0
	ldrb r7, [r1]
	ands r3, r7
	movs r1, #3
	rsbs r1, r1, #0
	ands r3, r1
	orrs r3, r6
	orrs r3, r5
	orrs r3, r2
	mov r2, ip
	adds r2, #0x2d
	movs r5, #0
	movs r1, #0xf0
	strb r1, [r2]
	mov r1, ip
	adds r1, #0x31
	strb r5, [r1]
	subs r1, #5
	strb r5, [r1]
	adds r2, #3
	movs r1, #0xa0
	strb r1, [r2]
	mov r6, ip
	adds r6, #0x3c
	ldr r1, _080873C0 @ =0x0000FFE0
	mov r2, ip
	ldrh r2, [r2, #0x3c]
	ands r1, r2
	movs r2, #0xc
	orrs r1, r2
	ldr r2, _080873C4 @ =0x0000E0FF
	ands r1, r2
	movs r7, #0xf8
	lsls r7, r7, #5
	adds r2, r7, #0
	orrs r1, r2
	mov r2, ip
	strh r1, [r2, #0x3c]
	adds r2, #0x3d
	mov r1, r8
	ldrb r7, [r2]
	orrs r1, r7
	strb r1, [r2]
	movs r1, #0xc0
	ldrb r2, [r6]
	orrs r1, r2
	strb r1, [r6]
	mov r2, ip
	adds r2, #0x44
	movs r1, #0x10
	strb r1, [r2]
	mov r1, ip
	adds r1, #0x45
	strb r5, [r1]
	adds r1, #1
	strb r5, [r1]
	mov r7, r8
	orrs r4, r7
	mov r1, sb
	strb r4, [r1]
	subs r2, #0xf
	mov r1, r8
	ldrb r4, [r2]
	orrs r1, r4
	strb r1, [r2]
	orrs r3, r7
	mov r1, sl
	strb r3, [r1]
	adds r0, #0x4c
	strh r5, [r0]
	ldr r0, _080873C8 @ =sub_8087254
	bl SetOnHBlankA
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080873A8: .4byte 0x02000500
_080873AC: .4byte 0x02000280
_080873B0: .4byte 0x02000504
_080873B4: .4byte 0xFFFFFD80
_080873B8: .4byte 0x02000508
_080873BC: .4byte gDispIo
_080873C0: .4byte 0x0000FFE0
_080873C4: .4byte 0x0000E0FF
_080873C8: .4byte sub_8087254

	thumb_func_start sub_80873CC
sub_80873CC: @ 0x080873CC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	str r0, [sp, #0x14]
	ldr r2, _0808756C @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r3, [r1]
	orrs r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	movs r1, #0
	movs r4, #0x10
	strb r4, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r6, [sp, #0x14]
	adds r6, #0x4c
	movs r5, #0
	ldrsh r1, [r6, r5]
	cmp r1, #0
	bge _08087404
	adds r1, #3
_08087404:
	asrs r1, r1, #2
	adds r0, r2, #0
	adds r0, #0x46
	strb r1, [r0]
	movs r2, #0x80
	lsls r2, r2, #1
	movs r0, #0
	ldrsh r3, [r6, r0]
	str r4, [sp]
	movs r0, #5
	movs r1, #0
	bl Interpolate
	adds r7, r0, #0
	adds r1, r7, #0
	cmp r7, #0
	bge _08087428
	adds r1, r7, #3
_08087428:
	asrs r1, r1, #2
	subs r1, #0x40
	add r0, sp, #4
	ldr r3, [sp, #0x14]
	ldr r2, [r3, #0x34]
	rsbs r5, r2, #0
	strh r5, [r0]
	ldr r4, [r3, #0x38]
	rsbs r3, r4, #0
	strh r3, [r0, #2]
	strh r2, [r0, #4]
	strh r3, [r0, #6]
	strh r2, [r0, #8]
	strh r4, [r0, #0xa]
	strh r5, [r0, #0xc]
	strh r4, [r0, #0xe]
	str r6, [sp, #0x18]
	ldr r4, _08087570 @ =0x02000504
	mov sl, r4
	ldr r2, _08087574 @ =gSinLut
	movs r0, #0xff
	ands r1, r0
	adds r0, r1, #0
	adds r0, #0x40
	lsls r0, r0, #1
	adds r0, r0, r2
	mov sb, r0
	lsls r1, r1, #1
	adds r1, r1, r2
	mov r8, r1
	add r6, sp, #4
	movs r5, #3
	mov ip, r5
_0808746A:
	mov r0, sb
	movs r1, #0
	ldrsh r5, [r0, r1]
	movs r2, #0
	ldrsh r4, [r6, r2]
	adds r2, r5, #0
	muls r2, r4, r2
	mov r3, r8
	movs r0, #0
	ldrsh r1, [r3, r0]
	movs r0, #2
	ldrsh r3, [r6, r0]
	adds r0, r1, #0
	muls r0, r3, r0
	subs r2, r2, r0
	muls r1, r4, r1
	adds r0, r5, #0
	muls r0, r3, r0
	adds r1, r1, r0
	adds r0, r2, #0
	muls r0, r7, r0
	asrs r0, r0, #0x14
	adds r0, #0x78
	strh r0, [r6]
	adds r0, r1, #0
	muls r0, r7, r0
	asrs r0, r0, #0x14
	adds r0, #0x50
	strh r0, [r6, #2]
	adds r6, #4
	movs r1, #1
	rsbs r1, r1, #0
	add ip, r1
	mov r2, ip
	cmp r2, #0
	bge _0808746A
	mov r3, sl
	ldr r0, [r3]
	bl sub_8013EE4
	mov r4, sl
	ldr r0, [r4]
	add r1, sp, #4
	movs r5, #0
	ldrsh r1, [r1, r5]
	add r2, sp, #4
	movs r3, #2
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #4
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #6
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_8013F04
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #4
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #6
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #8
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #0xa
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_8013F04
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #8
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #0xa
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #0xc
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #0xe
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_8013F04
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #0xc
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #0xe
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #0
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #2
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_8013F04
	bl sub_8087290
	ldr r1, [sp, #0x18]
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x10
	ble _0808755C
	ldr r0, [sp, #0x14]
	bl Proc_Break
_0808755C:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808756C: .4byte gDispIo
_08087570: .4byte 0x02000504
_08087574: .4byte gSinLut

	thumb_func_start sub_8087578
sub_8087578: @ 0x08087578
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _080875D8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808758C
	movs r0, #0x79
	bl m4aSongNumStart
_0808758C:
	ldr r2, _080875DC @ =gDispIo+0x3C
	ldr r0, _080875E0 @ =0x0000FFE0
	ldrh r1, [r2]
	ands r0, r1
	movs r1, #0xc
	orrs r0, r1
	ldr r1, _080875E4 @ =0x0000E0FF
	ands r0, r1
	movs r3, #0xf8
	lsls r3, r3, #5
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	movs r0, #0xc0
	ldrb r5, [r2]
	orrs r0, r5
	strb r0, [r2]
	movs r3, #0
	movs r0, #0x10
	strb r0, [r2, #8]
	strb r3, [r2, #9]
	movs r0, #4
	strb r0, [r2, #0xa]
	ldr r0, _080875E8 @ =0x02000500
	ldr r1, _080875EC @ =0x02000280
	str r1, [r0]
	ldr r2, _080875F0 @ =0x02000504
	ldr r5, _080875F4 @ =0xFFFFFD80
	adds r0, r1, r5
	str r0, [r2]
	ldr r0, _080875F8 @ =0x02000508
	str r1, [r0]
	adds r0, r4, #0
	adds r0, #0x4c
	strh r3, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080875D8: .4byte gPlaySt
_080875DC: .4byte gDispIo+0x3C
_080875E0: .4byte 0x0000FFE0
_080875E4: .4byte 0x0000E0FF
_080875E8: .4byte 0x02000500
_080875EC: .4byte 0x02000280
_080875F0: .4byte 0x02000504
_080875F4: .4byte 0xFFFFFD80
_080875F8: .4byte 0x02000508

	thumb_func_start sub_80875FC
sub_80875FC: @ 0x080875FC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	str r0, [sp, #0x14]
	ldr r2, _080877A0 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0xc0
	ldrb r3, [r1]
	orrs r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	movs r1, #0
	movs r4, #0x10
	strb r4, [r0]
	adds r0, #1
	strb r1, [r0]
	ldr r6, [sp, #0x14]
	adds r6, #0x4c
	movs r5, #0
	ldrsh r1, [r6, r5]
	cmp r1, #0
	bge _08087634
	adds r1, #3
_08087634:
	asrs r1, r1, #2
	movs r0, #4
	subs r0, r0, r1
	adds r1, r2, #0
	adds r1, #0x46
	strb r0, [r1]
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0
	ldrsh r3, [r6, r0]
	str r4, [sp]
	movs r0, #2
	movs r2, #0
	bl Interpolate
	adds r7, r0, #0
	cmp r7, #0
	bge _0808765A
	adds r0, r7, #3
_0808765A:
	asrs r0, r0, #2
	movs r1, #0x40
	subs r1, r1, r0
	add r0, sp, #4
	ldr r3, [sp, #0x14]
	ldr r2, [r3, #0x34]
	rsbs r5, r2, #0
	strh r5, [r0]
	ldr r4, [r3, #0x38]
	rsbs r3, r4, #0
	strh r3, [r0, #2]
	strh r2, [r0, #4]
	strh r3, [r0, #6]
	strh r2, [r0, #8]
	strh r4, [r0, #0xa]
	strh r5, [r0, #0xc]
	strh r4, [r0, #0xe]
	str r6, [sp, #0x18]
	ldr r4, _080877A4 @ =0x02000504
	mov sl, r4
	ldr r2, _080877A8 @ =gSinLut
	movs r0, #0xff
	ands r1, r0
	adds r0, r1, #0
	adds r0, #0x40
	lsls r0, r0, #1
	adds r0, r0, r2
	mov sb, r0
	lsls r1, r1, #1
	adds r1, r1, r2
	mov r8, r1
	add r6, sp, #4
	movs r5, #3
	mov ip, r5
_0808769E:
	mov r0, sb
	movs r1, #0
	ldrsh r5, [r0, r1]
	movs r2, #0
	ldrsh r4, [r6, r2]
	adds r2, r5, #0
	muls r2, r4, r2
	mov r3, r8
	movs r0, #0
	ldrsh r1, [r3, r0]
	movs r0, #2
	ldrsh r3, [r6, r0]
	adds r0, r1, #0
	muls r0, r3, r0
	subs r2, r2, r0
	muls r1, r4, r1
	adds r0, r5, #0
	muls r0, r3, r0
	adds r1, r1, r0
	adds r0, r2, #0
	muls r0, r7, r0
	asrs r0, r0, #0x14
	adds r0, #0x78
	strh r0, [r6]
	adds r0, r1, #0
	muls r0, r7, r0
	asrs r0, r0, #0x14
	adds r0, #0x50
	strh r0, [r6, #2]
	adds r6, #4
	movs r1, #1
	rsbs r1, r1, #0
	add ip, r1
	mov r2, ip
	cmp r2, #0
	bge _0808769E
	mov r3, sl
	ldr r0, [r3]
	bl sub_8013EE4
	mov r4, sl
	ldr r0, [r4]
	add r1, sp, #4
	movs r5, #0
	ldrsh r1, [r1, r5]
	add r2, sp, #4
	movs r3, #2
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #4
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #6
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_8013F04
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #4
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #6
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #8
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #0xa
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_8013F04
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #8
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #0xa
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #0xc
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #0xe
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_8013F04
	mov r1, sl
	ldr r0, [r1]
	add r1, sp, #4
	movs r2, #0xc
	ldrsh r1, [r1, r2]
	add r2, sp, #4
	movs r3, #0xe
	ldrsh r2, [r2, r3]
	add r3, sp, #4
	movs r4, #0
	ldrsh r3, [r3, r4]
	add r4, sp, #4
	movs r5, #2
	ldrsh r4, [r4, r5]
	str r4, [sp]
	bl sub_8013F04
	bl sub_8087290
	ldr r1, [sp, #0x18]
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x10
	ble _08087790
	ldr r0, [sp, #0x14]
	bl Proc_Break
_08087790:
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080877A0: .4byte gDispIo
_080877A4: .4byte 0x02000504
_080877A8: .4byte gSinLut

	thumb_func_start sub_80877AC
sub_80877AC: @ 0x080877AC
	push {r4, lr}
	adds r4, r0, #0
	cmp r4, #0
	bge _080877B6
	movs r4, #3
_080877B6:
	ldr r0, _080877DC @ =0x083273E4
	ldr r1, _080877E0 @ =gBuf
	bl Decompress
	ldr r0, _080877E4 @ =0x083277BC
	lsls r1, r4, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080877E8 @ =0x083277DC
	adds r1, r4, #1
	lsls r1, r1, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080877DC: .4byte 0x083273E4
_080877E0: .4byte gBuf
_080877E4: .4byte 0x083277BC
_080877E8: .4byte 0x083277DC

	thumb_func_start sub_80877EC
sub_80877EC: @ 0x080877EC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r1, _0808786C @ =0x0200050C
	ldr r0, _08087870 @ =gBuf
	str r0, [r1]
	movs r2, #1
	ldr r0, _08087874 @ =gPal
	mov sl, r0
	movs r0, #0x1f
	mov r8, r0
	mov sb, r1
_08087808:
	adds r0, r2, #0
	adds r0, #0x40
	lsls r0, r0, #1
	add r0, sl
	ldrh r0, [r0]
	adds r5, r0, #0
	mov r1, r8
	ands r5, r1
	asrs r4, r0, #5
	ands r4, r1
	asrs r3, r0, #0xa
	ands r3, r1
	adds r0, r2, #1
	mov ip, r0
	lsls r6, r2, #1
	movs r7, #7
_08087828:
	mov r1, sb
	ldr r0, [r1]
	adds r0, r6, r0
	lsls r1, r3, #0xa
	lsls r2, r4, #5
	adds r1, r1, r2
	adds r1, r1, r5
	strh r1, [r0]
	adds r5, #3
	cmp r5, #0x1f
	ble _08087840
	movs r5, #0x1f
_08087840:
	adds r4, #3
	cmp r4, #0x1f
	ble _08087848
	movs r4, #0x1f
_08087848:
	adds r3, #3
	cmp r3, #0x1f
	ble _08087850
	movs r3, #0x1f
_08087850:
	adds r6, #0x20
	subs r7, #1
	cmp r7, #0
	bge _08087828
	mov r2, ip
	cmp r2, #0xf
	ble _08087808
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808786C: .4byte 0x0200050C
_08087870: .4byte gBuf
_08087874: .4byte gPal

	thumb_func_start sub_8087878
sub_8087878: @ 0x08087878
	push {lr}
	sub sp, #0x10
	ldr r1, _080878AC @ =0x0832785F
	mov r0, sp
	movs r2, #0x10
	bl memcpy
	bl GetGameTime
	lsrs r0, r0, #2
	movs r1, #0xf
	ands r0, r1
	add r0, sp
	ldr r1, _080878B0 @ =0x0200050C
	ldrb r0, [r0]
	lsls r2, r0, #5
	ldr r0, [r1]
	adds r0, r0, r2
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	add sp, #0x10
	pop {r0}
	bx r0
	.align 2, 0
_080878AC: .4byte 0x0832785F
_080878B0: .4byte 0x0200050C

	thumb_func_start sub_80878B4
sub_80878B4: @ 0x080878B4
	push {lr}
	sub sp, #0x20
	ldr r1, _080878F0 @ =0x0832786F
	mov r0, sp
	movs r2, #0x20
	bl memcpy
	bl GetGameTime
	movs r1, #0x1f
	ands r1, r0
	mov r2, sp
	adds r0, r2, r1
	ldrb r3, [r0]
	adds r3, #0x10
	ldr r2, _080878F4 @ =gPal
	lsls r0, r3, #0xa
	lsls r1, r3, #5
	adds r0, r0, r1
	adds r0, r0, r3
	movs r1, #0x87
	lsls r1, r1, #2
	adds r2, r2, r1
	strh r0, [r2]
	bl EnablePalSync
	add sp, #0x20
	pop {r0}
	bx r0
	.align 2, 0
_080878F0: .4byte 0x0832786F
_080878F4: .4byte gPal

	thumb_func_start sub_80878F8
sub_80878F8: @ 0x080878F8
	push {r4, lr}
	sub sp, #0x1c
	adds r4, r0, #0
	ldr r1, _0808793C @ =0x08327890
	mov r0, sp
	movs r2, #0x1a
	bl memcpy
	ldr r3, _08087940 @ =gBmSt
	movs r0, #0xc
	ldrsh r1, [r3, r0]
	cmp r1, #0
	bge _08087914
	adds r1, #3
_08087914:
	asrs r1, r1, #2
	ldr r0, [r4, #0x3c]
	adds r2, r0, r1
	movs r1, #0xe
	ldrsh r0, [r3, r1]
	cmp r0, #0
	bge _08087924
	adds r0, #3
_08087924:
	asrs r0, r0, #2
	ldr r1, [r4, #0x40]
	adds r1, r1, r0
	adds r0, r2, #0
	mov r2, sp
	movs r3, #0
	bl PutOamHiRam
	add sp, #0x1c
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808793C: .4byte 0x08327890
_08087940: .4byte gBmSt

	thumb_func_start sub_8087944
sub_8087944: @ 0x08087944
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r2, _080879B4 @ =gMapSize
	movs r0, #0
	ldrsh r1, [r2, r0]
	lsls r1, r1, #2
	movs r0, #0xf0
	subs r0, r0, r1
	asrs r5, r0, #1
	movs r1, #2
	ldrsh r0, [r2, r1]
	lsls r1, r0, #2
	movs r0, #0xa0
	subs r0, r0, r1
	asrs r4, r0, #1
	cmp r1, #0x90
	ble _08087988
	adds r4, r1, #0
	subs r4, #0x90
	ldr r1, _080879B8 @ =gBmSt
	ldrh r2, [r1, #0xe]
	lsls r0, r2, #0x10
	movs r2, #0x2a
	ldrsh r1, [r1, r2]
	bl __divsi3
	muls r0, r4, r0
	cmp r0, #0
	bge _08087982
	ldr r1, _080879BC @ =0x0000FFFF
	adds r0, r0, r1
_08087982:
	asrs r4, r0, #0x10
	movs r0, #8
	subs r4, r0, r4
_08087988:
	str r5, [r6, #0x3c]
	str r4, [r6, #0x40]
	rsbs r5, r5, #0
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	rsbs r4, r4, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	movs r0, #0
	adds r1, r5, #0
	adds r2, r4, #0
	bl SetBgOffset
	movs r0, #1
	adds r1, r5, #0
	adds r2, r4, #0
	bl SetBgOffset
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080879B4: .4byte gMapSize
_080879B8: .4byte gBmSt
_080879BC: .4byte 0x0000FFFF

	thumb_func_start sub_80879C0
sub_80879C0: @ 0x080879C0
	push {r4, r5, r6, r7, lr}
	adds r3, r0, #0
	ldr r1, _08087A80 @ =gBmSt
	movs r0, #0xc
	ldrsh r4, [r1, r0]
	movs r2, #0xe
	ldrsh r5, [r1, r2]
	movs r2, #0xf
	adds r0, r4, #0
	ands r0, r2
	adds r7, r1, #0
	cmp r0, #0
	bne _08087A4A
	adds r0, r5, #0
	ands r0, r2
	cmp r0, #0
	bne _08087A4A
	str r0, [r3, #0x2c]
	str r0, [r3, #0x30]
	ldr r2, _08087A84 @ =gKeySt
	ldr r1, [r2]
	movs r0, #0x20
	ldrh r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _08087A02
	movs r0, #8
	rsbs r0, r0, #0
	str r0, [r3, #0x2c]
	adds r1, r3, #0
	adds r1, #0x4a
	movs r0, #1
	strh r0, [r1]
_08087A02:
	ldr r1, [r2]
	movs r0, #0x10
	ldrh r2, [r1, #4]
	ands r0, r2
	adds r6, r1, #0
	cmp r0, #0
	beq _08087A1C
	movs r0, #8
	str r0, [r3, #0x2c]
	adds r2, r3, #0
	adds r2, #0x4a
	movs r0, #1
	strh r0, [r2]
_08087A1C:
	movs r0, #0x40
	ldrh r6, [r6, #4]
	ands r0, r6
	cmp r0, #0
	beq _08087A34
	movs r0, #8
	rsbs r0, r0, #0
	str r0, [r3, #0x30]
	adds r2, r3, #0
	adds r2, #0x4a
	movs r0, #1
	strh r0, [r2]
_08087A34:
	movs r0, #0x80
	ldrh r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _08087A4A
	movs r0, #8
	str r0, [r3, #0x30]
	adds r1, r3, #0
	adds r1, #0x4a
	movs r0, #1
	strh r0, [r1]
_08087A4A:
	ldr r0, [r3, #0x2c]
	adds r4, r4, r0
	ldr r0, [r3, #0x30]
	adds r5, r5, r0
	cmp r4, #0
	bge _08087A58
	movs r4, #0
_08087A58:
	adds r1, r7, #0
	movs r2, #0x28
	ldrsh r0, [r1, r2]
	cmp r4, r0
	ble _08087A64
	adds r4, r0, #0
_08087A64:
	cmp r5, #0
	bge _08087A6A
	movs r5, #0
_08087A6A:
	movs r2, #0x2a
	ldrsh r0, [r1, r2]
	cmp r5, r0
	ble _08087A74
	adds r5, r0, #0
_08087A74:
	strh r4, [r7, #0xc]
	strh r5, [r7, #0xe]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08087A80: .4byte gBmSt
_08087A84: .4byte gKeySt

	thumb_func_start sub_8087A88
sub_8087A88: @ 0x08087A88
	adds r2, r0, #0
	adds r2, #0x4a
	movs r1, #0
	strh r1, [r2]
	ldr r2, _08087AA4 @ =gMapSize
	movs r3, #0
	ldrsh r1, [r2, r3]
	lsls r1, r1, #1
	str r1, [r0, #0x34]
	movs r3, #2
	ldrsh r1, [r2, r3]
	lsls r1, r1, #1
	str r1, [r0, #0x38]
	bx lr
	.align 2, 0
_08087AA4: .4byte gMapSize

	thumb_func_start sub_8087AA8
sub_8087AA8: @ 0x08087AA8
	push {lr}
	adds r0, #0x4a
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _08087AD6
	ldr r1, _08087AE0 @ =gBmSt
	movs r2, #0xc
	ldrsh r0, [r1, r2]
	cmp r0, #0
	bge _08087AC0
	adds r0, #0xf
_08087AC0:
	asrs r0, r0, #4
	adds r0, #7
	movs r2, #0xe
	ldrsh r1, [r1, r2]
	cmp r1, #0
	bge _08087ACE
	adds r1, #0xf
_08087ACE:
	asrs r1, r1, #4
	adds r1, #5
	bl SetMapCursorPosition
_08087AD6:
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0
	.align 2, 0
_08087AE0: .4byte gBmSt

	thumb_func_start sub_8087AE4
sub_8087AE4: @ 0x08087AE4
	push {r4, r5, lr}
	adds r4, r0, #0
	bl sub_8087878
	adds r0, r4, #0
	bl sub_80878B4
	adds r0, r4, #0
	bl sub_8087944
	adds r0, r4, #0
	bl sub_80878F8
	adds r0, r4, #0
	bl sub_80879C0
	ldr r0, _08087B48 @ =gKeySt
	ldr r0, [r0]
	movs r3, #0xc0
	lsls r3, r3, #2
	ldrh r0, [r0, #4]
	ands r3, r0
	cmp r3, #0
	beq _08087B58
	ldr r2, _08087B4C @ =gDispIo+0x3C
	ldr r0, _08087B50 @ =0x0000FFE0
	ldrh r1, [r2]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	ldr r1, _08087B54 @ =0x0000E0FF
	ands r0, r1
	movs r3, #0xe0
	lsls r3, r3, #5
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	movs r0, #0x3f
	ldrb r5, [r2]
	ands r0, r5
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	movs r1, #0
	movs r0, #8
	strb r0, [r2, #8]
	strb r0, [r2, #9]
	strb r1, [r2, #0xa]
	b _08087B84
	.align 2, 0
_08087B48: .4byte gKeySt
_08087B4C: .4byte gDispIo+0x3C
_08087B50: .4byte 0x0000FFE0
_08087B54: .4byte 0x0000E0FF
_08087B58:
	ldr r2, _08087BAC @ =gDispIo+0x3C
	ldr r0, _08087BB0 @ =0x0000FFE0
	ldrh r1, [r2]
	ands r0, r1
	movs r1, #0xc
	orrs r0, r1
	ldr r1, _08087BB4 @ =0x0000E0FF
	ands r0, r1
	movs r5, #0xf8
	lsls r5, r5, #5
	adds r1, r5, #0
	orrs r0, r1
	strh r0, [r2]
	movs r0, #0xc0
	ldrb r1, [r2]
	orrs r0, r1
	strb r0, [r2]
	movs r0, #0x10
	strb r0, [r2, #8]
	strb r3, [r2, #9]
	movs r0, #4
	strb r0, [r2, #0xa]
_08087B84:
	ldr r0, _08087BB8 @ =gBmSt
	ldr r0, [r0, #0xc]
	ldr r1, _08087BBC @ =0x000F000F
	ands r0, r1
	cmp r0, #0
	bne _08087BA4
	ldr r0, _08087BC0 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0xa
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08087BA4
	adds r0, r4, #0
	bl Proc_Break
_08087BA4:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08087BAC: .4byte gDispIo+0x3C
_08087BB0: .4byte 0x0000FFE0
_08087BB4: .4byte 0x0000E0FF
_08087BB8: .4byte gBmSt
_08087BBC: .4byte 0x000F000F
_08087BC0: .4byte gKeySt

	thumb_func_start sub_8087BC4
sub_8087BC4: @ 0x08087BC4
	push {lr}
	ldr r0, _08087BD4 @ =0x08689DE4
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_08087BD4: .4byte 0x08689DE4

	thumb_func_start sub_8087BD8
sub_8087BD8: @ 0x08087BD8
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r4, r2, #0
	ldr r0, _08087C0C @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _08087C10 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	adds r0, r5, #0
	bl sub_8018784
	adds r0, r4, #0
	bl sub_80877AC
	adds r0, r6, #0
	adds r1, r4, #0
	bl sub_8086FF0
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08087C0C: .4byte gBg0Tm
_08087C10: .4byte gBg1Tm

	thumb_func_start sub_8087C14
sub_8087C14: @ 0x08087C14
	ldr r0, _08087C50 @ =0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0xa0
	bls _08087C24
	movs r3, #0
_08087C24:
	cmp r3, #0x3b
	bhi _08087C38
	ldr r1, _08087C54 @ =0x04000050
	movs r0, #0xc1
	strh r0, [r1]
	ldr r2, _08087C58 @ =0x04000054
	lsrs r1, r3, #2
	movs r0, #0xf
	subs r0, r0, r1
	strh r0, [r2]
_08087C38:
	cmp r3, #0x64
	bls _08087C4E
	ldr r1, _08087C54 @ =0x04000050
	movs r2, #0xa2
	lsls r2, r2, #1
	adds r0, r2, #0
	strh r0, [r1]
	adds r1, #2
	ldr r2, _08087C5C @ =0x0000100A
	adds r0, r2, #0
	strh r0, [r1]
_08087C4E:
	bx lr
	.align 2, 0
_08087C50: .4byte 0x04000006
_08087C54: .4byte 0x04000050
_08087C58: .4byte 0x04000054
_08087C5C: .4byte 0x0000100A

	thumb_func_start sub_8087C60
sub_8087C60: @ 0x08087C60
	push {lr}
	movs r1, #0x10
	bl Proc_Goto
	movs r0, #0x80
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl StartBgmVolumeChange
	pop {r0}
	bx r0

	thumb_func_start sub_8087C78
sub_8087C78: @ 0x08087C78
	push {r4, r5, lr}
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	movs r3, #0
	movs r2, #0
	movs r4, #1
	adds r1, #1
_08087C86:
	adds r0, r5, #0
	asrs r0, r2
	ands r0, r4
	cmp r0, #0
	beq _08087CA0
	adds r3, #1
	cmp r1, r3
	bne _08087CA0
	adds r0, r4, #0
	lsls r0, r2
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	b _08087CA8
_08087CA0:
	adds r2, #1
	cmp r2, #7
	ble _08087C86
	movs r0, #0xff
_08087CA8:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8087CB0
sub_8087CB0: @ 0x08087CB0
	lsls r0, r0, #0x18
	lsrs r2, r0, #0x18
	movs r1, #0
	movs r3, #1
_08087CB8:
	adds r0, r2, #0
	asrs r0, r1
	ands r0, r3
	cmp r0, #0
	beq _08087CC8
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	b _08087CD0
_08087CC8:
	adds r1, #1
	cmp r1, #7
	ble _08087CB8
	movs r0, #0xff
_08087CD0:
	bx lr
	.align 2, 0

	thumb_func_start sub_8087CD4
sub_8087CD4: @ 0x08087CD4
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	beq _08087CEC
	adds r0, r4, #0
	adds r0, #0x36
	ldrb r1, [r0]
	adds r2, r0, #0
	cmp r1, #0
	bne _08087CFA
_08087CEC:
	bl sub_807089C
	adds r1, r4, #0
	adds r1, #0x3e
	movs r0, #0
	strb r0, [r1]
	b _08087D38
_08087CFA:
	adds r0, r4, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0x10
	beq _08087D12
	cmp r0, #0x10
	bgt _08087D0E
	cmp r0, #2
	beq _08087D12
	b _08087D38
_08087D0E:
	cmp r0, #0x20
	bne _08087D38
_08087D12:
	adds r0, r4, #0
	adds r0, #0x3d
	ldrb r0, [r0]
	cmp r0, #0
	beq _08087D38
	ldrb r0, [r2]
	cmp r0, #0
	beq _08087D38
	adds r4, #0x3e
	ldrb r0, [r4]
	cmp r0, #0
	bne _08087D38
	ldr r2, _08087D40 @ =0x000006C3
	movs r0, #0x30
	movs r1, #0x30
	bl sub_8070804
	movs r0, #1
	strb r0, [r4]
_08087D38:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08087D40: .4byte 0x000006C3

	thumb_func_start sub_8087D44
sub_8087D44: @ 0x08087D44
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x2e
	ldrb r0, [r4]
	cmp r0, #0x80
	bne _08087D6A
	bl GetCurrentBgmSong
	cmp r0, #1
	beq _08087D70
	bl GetCurrentBgmSong
	cmp r0, #0x44
	beq _08087D70
	bl GetCurrentBgmSong
	cmp r0, #1
	beq _08087D70
_08087D6A:
	ldrb r4, [r4]
	cmp r4, #0x40
	bne _08087D80
_08087D70:
	movs r0, #0x80
	lsls r0, r0, #1
	movs r1, #0x80
	movs r2, #0x20
	movs r3, #0
	bl StartBgmVolumeChange
	b _08087D9E
_08087D80:
	adds r0, r5, #0
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #1
	beq _08087D9E
	movs r0, #1
	movs r1, #0
	bl StartBgmCore
	movs r0, #0
	movs r1, #0x80
	movs r2, #0x3c
	movs r3, #0
	bl StartBgmVolumeChange
_08087D9E:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8087DA4
sub_8087DA4: @ 0x08087DA4
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _08087E64 @ =0x08689E84
	bl InitBgs
	ldr r2, _08087E68 @ =gDispIo
	movs r0, #8
	rsbs r0, r0, #0
	ldrb r1, [r2]
	ands r0, r1
	movs r3, #1
	orrs r0, r3
	strb r0, [r2]
	movs r0, #0x3f
	ldrb r5, [r2, #0x15]
	ands r0, r5
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x21
	rsbs r1, r1, #0
	ands r0, r1
	strb r0, [r2, #0x15]
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #3
	ldrb r5, [r2, #0xc]
	orrs r0, r5
	strb r0, [r2, #0xc]
	adds r1, #0xd
	adds r0, r1, #0
	ldrb r5, [r2, #0x10]
	ands r0, r5
	strb r0, [r2, #0x10]
	adds r0, r1, #0
	ldrb r5, [r2, #0x14]
	ands r0, r5
	orrs r0, r3
	strb r0, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	ands r1, r0
	orrs r1, r3
	strb r1, [r2, #0x18]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _08087E6C @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _08087E70 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _08087E74 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r0, _08087E78 @ =gBg3Tm
	movs r1, #0
	bl TmFill
	adds r0, r4, #0
	bl sub_8087D44
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08087E64: .4byte 0x08689E84
_08087E68: .4byte gDispIo
_08087E6C: .4byte gBg0Tm
_08087E70: .4byte gBg1Tm
_08087E74: .4byte gBg2Tm
_08087E78: .4byte gBg3Tm

	thumb_func_start sub_8087E7C
sub_8087E7C: @ 0x08087E7C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r5, r0, #0
	bl ResetTextFont
	bl ApplySystemObjectsGraphics
	ldr r0, _08087F20 @ =0x083278AC
	movs r1, #0x40
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r4, _08087F24 @ =0x08336D5C
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, _08087F28 @ =gBg0Tm
	ldr r1, _08087F2C @ =0x083278EC
	movs r2, #0
	bl TmApplyTsa_t
	ldr r0, _08087F30 @ =0x0832BDE8
	movs r1, #0x88
	lsls r1, r1, #2
	movs r2, #0x80
	lsls r2, r2, #1
	bl ApplyPaletteExt
	ldr r4, _08087F34 @ =0x06013800
	adds r0, r4, #0
	movs r1, #9
	bl sub_8070E70
	ldr r0, _08087F38 @ =0x0832C35C
	ldr r1, _08087F3C @ =0x02000404
	movs r2, #2
	bl sub_80895A0
	movs r0, #0xf
	bl EnableBgSync
	adds r1, r5, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	ldr r2, _08087F40 @ =gDispIo
	adds r3, r2, #0
	adds r3, #0x34
	movs r0, #0x20
	ldrb r1, [r3]
	orrs r1, r0
	strb r1, [r3]
	adds r2, #0x35
	ldrb r1, [r2]
	orrs r0, r1
	strb r0, [r2]
	ldr r0, _08087F44 @ =0x0832A29C
	ldr r1, _08087F48 @ =0x06011000
	bl Decompress
	adds r0, r5, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0x40
	bne _08087F4C
	adds r0, r4, #0
	movs r1, #9
	bl sub_8070E70
	b _08087F54
	.align 2, 0
_08087F20: .4byte 0x083278AC
_08087F24: .4byte 0x08336D5C
_08087F28: .4byte gBg0Tm
_08087F2C: .4byte 0x083278EC
_08087F30: .4byte 0x0832BDE8
_08087F34: .4byte 0x06013800
_08087F38: .4byte 0x0832C35C
_08087F3C: .4byte 0x02000404
_08087F40: .4byte gDispIo
_08087F44: .4byte 0x0832A29C
_08087F48: .4byte 0x06011000
_08087F4C:
	ldr r0, _08087F74 @ =0x0832B554
	adds r1, r4, #0
	bl Decompress
_08087F54:
	adds r0, r5, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0x20
	bne _08087F7C
	adds r0, r5, #0
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #1
	bne _08087FB4
	ldr r0, _08087F78 @ =0x06014000
	movs r1, #9
	bl sub_8070E70
	b _08087FB4
	.align 2, 0
_08087F74: .4byte 0x0832B554
_08087F78: .4byte 0x06014000
_08087F7C:
	cmp r0, #0x40
	bne _08087F94
	adds r1, r5, #0
	adds r1, #0x2d
	movs r0, #4
	strb r0, [r1]
	bl sub_8084F94
	adds r1, r5, #0
	adds r1, #0x2b
	strb r0, [r1]
	b _08087FA4
_08087F94:
	adds r2, r5, #0
	adds r2, #0x2d
	movs r1, #0
	movs r0, #1
	strb r0, [r2]
	adds r0, r5, #0
	adds r0, #0x2b
	strb r1, [r0]
_08087FA4:
	adds r0, r5, #0
	adds r0, #0x2a
	movs r1, #0
	strb r1, [r0]
	adds r0, #0xa
	strb r1, [r0]
	adds r0, #0xe
	strh r1, [r0]
_08087FB4:
	adds r1, r5, #0
	adds r1, #0x36
	movs r0, #0
	strb r0, [r1]
	subs r1, #0xa
	movs r0, #0xff
	strb r0, [r1]
	adds r1, #0x11
	movs r0, #1
	strb r0, [r1]
	bl sub_808A4F0
	movs r2, #0
	mov r8, r2
	adds r3, r5, #0
	adds r3, #0x40
	str r3, [sp, #0xc]
	adds r0, r5, #0
	adds r0, #0x3f
	str r0, [sp, #8]
	adds r5, #0x3e
	str r5, [sp, #4]
	ldr r1, _08088088 @ =gSinLut
	mov sb, r1
	movs r2, #0x80
	add r2, sb
	mov sl, r2
	movs r7, #0x80
	lsls r7, r7, #1
_08087FEE:
	mov r3, sl
	movs r1, #0
	ldrsh r0, [r3, r1]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	mov r2, sb
	movs r3, #0
	ldrsh r0, [r2, r3]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	mov r1, sb
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r3, sl
	movs r1, #0
	ldrsh r0, [r3, r1]
	lsls r0, r0, #4
	adds r1, r7, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	mov r0, r8
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	movs r2, #1
	add r8, r2
	mov r3, r8
	cmp r3, #3
	ble _08087FEE
	movs r1, #0
	movs r2, #0
	movs r0, #0x80
	lsls r0, r0, #1
	ldr r3, [sp, #0xc]
	strh r0, [r3]
	movs r0, #0xff
	ldr r3, [sp, #8]
	strb r0, [r3]
	ldr r0, [sp, #4]
	strb r1, [r0]
	ldr r0, _0808808C @ =0x02000000
	strh r2, [r0]
	ldr r0, _08088090 @ =sub_8087C14
	bl SetOnHBlankA
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08088088: .4byte gSinLut
_0808808C: .4byte 0x02000000
_08088090: .4byte sub_8087C14

	thumb_func_start sub_8088094
sub_8088094: @ 0x08088094
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r2, _0808810C @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	ldr r4, _08088110 @ =0x083280B0
	movs r0, #2
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, _08088114 @ =gBg3Tm
	ldr r1, _08088118 @ =0x0832A130
	movs r2, #0
	movs r3, #5
	bl sub_8001B8C
	movs r0, #8
	bl EnableBgSync
	movs r4, #0
_080880DC:
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	adds r1, r5, #0
	bl sub_808A918
	adds r4, #1
	cmp r4, #3
	ble _080880DC
	bl sub_808A42C
	adds r4, r5, #0
	adds r4, #0x2e
	ldrb r2, [r4]
	cmp r2, #0x40
	bne _0808811C
	adds r0, r5, #0
	adds r0, #0x30
	movs r1, #0
	strb r2, [r0]
	strb r2, [r4]
	adds r0, #1
	strb r1, [r0]
	b _0808814A
	.align 2, 0
_0808810C: .4byte gDispIo
_08088110: .4byte 0x083280B0
_08088114: .4byte gBg3Tm
_08088118: .4byte 0x0832A130
_0808811C:
	adds r0, r5, #0
	bl sub_808A524
	ldrb r1, [r4]
	cmp r1, #0x20
	bne _08088138
	movs r0, #0x20
	adds r1, r5, #0
	bl sub_808AA54
	adds r1, r5, #0
	adds r1, #0x2a
	strb r0, [r1]
	b _0808814A
_08088138:
	adds r0, r5, #0
	adds r0, #0x30
	ldrb r0, [r0]
	adds r1, r5, #0
	adds r1, #0x2a
	ldrb r1, [r1]
	bl sub_8087C78
	strb r0, [r4]
_0808814A:
	movs r0, #2
	bl EnableBgSync
	ldr r2, _080881B0 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	ldr r1, _080881B4 @ =gPal
	movs r0, #0
	strh r0, [r1]
	bl EnablePalSync
	adds r0, r5, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl sub_808A9F4
	adds r0, r5, #0
	bl sub_808A14C
	str r0, [r5, #0x54]
	adds r0, r5, #0
	bl sub_808A210
	str r0, [r5, #0x58]
	adds r2, r5, #0
	adds r2, #0x2d
	ldrb r0, [r2]
	cmp r0, #1
	bne _0808819C
	adds r1, r5, #0
	adds r1, #0x2f
	movs r0, #0
	strb r0, [r1]
_0808819C:
	ldrb r2, [r2]
	cmp r2, #4
	bne _080881AA
	adds r1, r5, #0
	adds r1, #0x2f
	movs r0, #0xdc
	strb r0, [r1]
_080881AA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080881B0: .4byte gDispIo
_080881B4: .4byte gPal

	thumb_func_start sub_80881B8
sub_80881B8: @ 0x080881B8
	push {lr}
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	bl Proc_Goto
	pop {r0}
	bx r0

	thumb_func_start sub_80881C8
sub_80881C8: @ 0x080881C8
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x2d
	movs r0, #1
	strb r0, [r1]
	ldr r0, _080881F8 @ =gKeySt
	ldr r3, [r0]
	ldrh r1, [r3, #6]
	movs r2, #0x40
	adds r0, r2, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _08088210
	adds r1, r4, #0
	adds r1, #0x2a
	ldrb r0, [r1]
	cmp r0, #0
	beq _080881FC
	subs r0, #1
	b _0808822E
	.align 2, 0
_080881F8: .4byte gKeySt
_080881FC:
	adds r0, r2, #0
	ldrh r3, [r3, #8]
	ands r0, r3
	cmp r0, #0
	beq _08088264
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	subs r0, #1
	b _0808822E
_08088210:
	movs r6, #0x80
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08088264
	adds r1, r4, #0
	adds r1, #0x2a
	ldrb r2, [r1]
	adds r0, r4, #0
	adds r0, #0x31
	ldrb r0, [r0]
	subs r0, #1
	cmp r2, r0
	bge _08088248
	adds r0, r2, #1
_0808822E:
	strb r0, [r1]
	ldr r0, _08088244 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08088264
	movs r0, #0x66
	bl m4aSongNumStart
	b _08088264
	.align 2, 0
_08088244: .4byte gPlaySt
_08088248:
	adds r0, r6, #0
	ldrh r3, [r3, #8]
	ands r0, r3
	cmp r0, #0
	beq _08088264
	strb r5, [r1]
	ldr r0, _080882B8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08088264
	movs r0, #0x66
	bl m4aSongNumStart
_08088264:
	ldr r0, _080882BC @ =gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	bne _08088274
	b _080883D2
_08088274:
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x2a
	ldrb r1, [r1]
	bl sub_8087C78
	adds r5, r4, #0
	adds r5, #0x2e
	strb r0, [r5]
	ldr r0, _080882B8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808829A
	movs r0, #0x6a
	bl m4aSongNumStart
_0808829A:
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	ldrb r0, [r5]
	subs r0, #1
	cmp r0, #0x1f
	bls _080882AC
	b _080883FA
_080882AC:
	lsls r0, r0, #2
	ldr r1, _080882C0 @ =_080882C4
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_080882B8: .4byte gPlaySt
_080882BC: .4byte gKeySt
_080882C0: .4byte _080882C4
_080882C4: @ jump table
	.4byte _08088344 @ case 0
	.4byte _08088352 @ case 1
	.4byte _080883FA @ case 2
	.4byte _0808836A @ case 3
	.4byte _080883FA @ case 4
	.4byte _080883FA @ case 5
	.4byte _080883FA @ case 6
	.4byte _08088382 @ case 7
	.4byte _080883FA @ case 8
	.4byte _080883FA @ case 9
	.4byte _080883FA @ case 10
	.4byte _080883FA @ case 11
	.4byte _080883FA @ case 12
	.4byte _080883FA @ case 13
	.4byte _080883FA @ case 14
	.4byte _0808839A @ case 15
	.4byte _080883FA @ case 16
	.4byte _080883FA @ case 17
	.4byte _080883FA @ case 18
	.4byte _080883FA @ case 19
	.4byte _080883FA @ case 20
	.4byte _080883FA @ case 21
	.4byte _080883FA @ case 22
	.4byte _080883FA @ case 23
	.4byte _080883FA @ case 24
	.4byte _080883FA @ case 25
	.4byte _080883FA @ case 26
	.4byte _080883FA @ case 27
	.4byte _080883FA @ case 28
	.4byte _080883FA @ case 29
	.4byte _080883FA @ case 30
	.4byte _080883B4 @ case 31
_08088344:
	adds r0, r4, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	adds r1, r4, #0
	adds r1, #0x2b
	strb r0, [r1]
	b _080883AA
_08088352:
	bl sub_8084F94
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r1, #1
	movs r2, #1
	bl sub_808A658
	adds r1, r4, #0
	adds r1, #0x2b
	strb r0, [r1]
	b _080883AA
_0808836A:
	bl sub_8084F94
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r1, #1
	movs r2, #1
	bl sub_808A658
	adds r1, r4, #0
	adds r1, #0x2b
	strb r0, [r1]
	b _080883AA
_08088382:
	bl sub_8084F94
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r1, #1
	movs r2, #1
	bl sub_808A658
	adds r1, r4, #0
	adds r1, #0x2b
	strb r0, [r1]
	b _080883AA
_0808839A:
	adds r5, r4, #0
	adds r5, #0x2b
	ldrb r0, [r5]
	movs r1, #0
	movs r2, #1
	bl sub_808A658
	strb r0, [r5]
_080883AA:
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
	b _080883FA
_080883B4:
	adds r1, r4, #0
	adds r1, #0x34
	adds r0, r4, #0
	adds r0, #0x33
	ldrb r2, [r1]
	ldrb r0, [r0]
	cmp r2, r0
	blo _080883C8
	movs r0, #0
	strb r0, [r1]
_080883C8:
	adds r0, r4, #0
	movs r1, #7
	bl Proc_Goto
	b _080883FA
_080883D2:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080883FA
	ldr r0, _08088400 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080883EA
	movs r0, #0x6b
	bl m4aSongNumStart
_080883EA:
	adds r0, r4, #0
	movs r1, #0x10
	bl Proc_Goto
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0x80
	strb r0, [r1]
_080883FA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08088400: .4byte gPlaySt

	thumb_func_start sub_8088404
sub_8088404: @ 0x08088404
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x36
	ldrb r1, [r5]
	cmp r1, #0
	bne _080884AC
	ldr r0, _0808843C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08088422
	movs r0, #0x6a
	bl m4aSongNumStart
_08088422:
	adds r0, r4, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #8
	beq _08088486
	cmp r0, #8
	bgt _08088440
	cmp r0, #2
	beq _08088494
	cmp r0, #4
	beq _08088454
	b _080884A4
	.align 2, 0
_0808843C: .4byte gPlaySt
_08088440:
	cmp r0, #0x20
	beq _08088494
	cmp r0, #0x20
	bgt _0808844E
	cmp r0, #0x10
	beq _08088494
	b _080884A4
_0808844E:
	cmp r0, #0x40
	beq _08088494
	b _080884A4
_08088454:
	adds r1, r4, #0
	adds r1, #0x2c
	ldrb r0, [r1]
	cmp r0, #0xff
	bne _08088470
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #1
	bl sub_808A6C8
	b _080885D2
_08088470:
	ldrb r0, [r1]
	adds r1, r4, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	bl sub_8084FF8
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
	b _080885D2
_08088486:
	movs r0, #2
	strb r0, [r5]
	adds r0, r4, #0
	movs r1, #1
	bl sub_808A4B8
	b _080884A4
_08088494:
	adds r1, r4, #0
	adds r1, #0x36
	movs r0, #2
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #1
	bl sub_808A4B8
_080884A4:
	adds r0, r4, #0
	bl sub_8087CD4
	b _080885D2
_080884AC:
	adds r0, r4, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0x10
	beq _08088514
	cmp r0, #0x10
	bgt _080884C4
	cmp r0, #2
	beq _080884EA
	cmp r0, #8
	beq _08088542
	b _080885C4
_080884C4:
	cmp r0, #0x20
	beq _080884CE
	cmp r0, #0x40
	beq _08088588
	b _080885C4
_080884CE:
	cmp r1, #1
	bne _08088570
	adds r1, r4, #0
	adds r1, #0x40
	movs r0, #0xf0
	strh r0, [r1]
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl sub_80851B4
	adds r0, r4, #0
	movs r1, #0xd
	b _08088554
_080884EA:
	cmp r1, #1
	bne _08088570
	adds r1, r4, #0
	adds r1, #0x40
	movs r0, #0xf0
	strh r0, [r1]
	ldr r0, _08088510 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08088506
	movs r0, #0x6a
	bl m4aSongNumStart
_08088506:
	adds r0, r4, #0
	bl sub_8087C60
	b _080885C4
	.align 2, 0
_08088510: .4byte gPlaySt
_08088514:
	cmp r1, #1
	bne _08088570
	adds r0, r4, #0
	adds r0, #0x3d
	ldrb r0, [r0]
	cmp r0, #1
	bne _08088530
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	movs r1, #0
	bl sub_808505C
	b _08088596
_08088530:
	cmp r0, #2
	bne _08088596
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	movs r1, #1
	bl sub_808505C
	b _08088596
_08088542:
	cmp r1, #1
	bne _08088570
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl sub_8084FB8
	adds r0, r4, #0
	movs r1, #5
_08088554:
	bl Proc_Goto
	ldr r0, _0808856C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080885C4
	movs r0, #0x6a
	bl m4aSongNumStart
	b _080885C4
	.align 2, 0
_0808856C: .4byte gPlaySt
_08088570:
	ldr r0, _08088584 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080885C4
	movs r0, #0x6b
	bl m4aSongNumStart
	b _080885C4
	.align 2, 0
_08088584: .4byte gPlaySt
_08088588:
	cmp r1, #1
	bne _080885B4
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl sub_8085110
_08088596:
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
	ldr r0, _080885B0 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080885C4
	movs r0, #0x60
	bl m4aSongNumStart
	b _080885C4
	.align 2, 0
_080885B0: .4byte gPlaySt
_080885B4:
	ldr r0, _080885D8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080885C4
	movs r0, #0x6b
	bl m4aSongNumStart
_080885C4:
	adds r0, r4, #0
	movs r1, #0
	bl sub_808A4B8
	adds r0, r4, #0
	bl sub_8087CD4
_080885D2:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080885D8: .4byte gPlaySt

	thumb_func_start sub_80885DC
sub_80885DC: @ 0x080885DC
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x2d
	movs r0, #4
	strb r0, [r1]
	adds r3, r4, #0
	adds r3, #0x36
	ldrb r1, [r3]
	cmp r1, #0
	bne _08088638
	ldr r0, _08088608 @ =gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0808860C
	movs r1, #1
	rsbs r1, r1, #0
	adds r0, r4, #0
	b _08088618
	.align 2, 0
_08088608: .4byte gKeySt
_0808860C:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _08088696
	adds r0, r4, #0
	movs r1, #1
_08088618:
	bl sub_808A6C8
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08088696
	ldr r0, _08088634 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08088696
	movs r0, #0x66
	bl m4aSongNumStart
	b _08088696
	.align 2, 0
_08088634: .4byte gPlaySt
_08088638:
	ldr r0, _08088668 @ =gKeySt
	ldr r0, [r0]
	ldrh r2, [r0, #8]
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	beq _08088670
	cmp r1, #1
	beq _08088696
	movs r0, #1
	strb r0, [r3]
	ldr r0, _0808866C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808865E
	movs r0, #0x67
	bl m4aSongNumStart
_0808865E:
	adds r0, r4, #0
	bl sub_8087CD4
	b _08088696
	.align 2, 0
_08088668: .4byte gKeySt
_0808866C: .4byte gPlaySt
_08088670:
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	beq _08088696
	cmp r1, #2
	beq _08088696
	movs r0, #2
	strb r0, [r3]
	ldr r0, _080886C8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08088690
	movs r0, #0x67
	bl m4aSongNumStart
_08088690:
	adds r0, r4, #0
	bl sub_8087CD4
_08088696:
	ldr r0, _080886CC @ =gKeySt
	ldr r0, [r0]
	ldrh r2, [r0, #8]
	movs r6, #1
	movs r1, #1
	ands r1, r2
	cmp r1, #0
	bne _080886A8
	b _080887D4
_080886A8:
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #4
	beq _08088784
	cmp r0, #4
	bgt _080886D0
	cmp r0, #1
	beq _080886EE
	cmp r0, #2
	beq _080886E4
	b _0808884C
	.align 2, 0
_080886C8: .4byte gPlaySt
_080886CC: .4byte gKeySt
_080886D0:
	cmp r0, #0x10
	beq _0808870C
	cmp r0, #0x10
	bgt _080886DE
	cmp r0, #8
	beq _08088784
	b _0808884C
_080886DE:
	cmp r0, #0x40
	beq _08088784
	b _0808884C
_080886E4:
	adds r0, r4, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	bne _08088784
_080886EE:
	ldr r0, _08088708 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080886FE
	movs r0, #0x6a
	bl m4aSongNumStart
_080886FE:
	adds r0, r4, #0
	bl sub_8087C60
	b _0808884C
	.align 2, 0
_08088708: .4byte gPlaySt
_0808870C:
	adds r0, r4, #0
	adds r0, #0x3d
	ldrb r1, [r0]
	adds r5, r0, #0
	cmp r1, #0
	bne _08088744
	subs r0, #7
	ldrb r0, [r0]
	cmp r0, #1
	bne _08088724
	strb r6, [r5]
	b _08088728
_08088724:
	movs r0, #2
	strb r0, [r5]
_08088728:
	adds r0, r4, #0
	movs r1, #0
	bl sub_808A4B8
	adds r0, r4, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	beq _08088774
	adds r0, r4, #0
	movs r1, #6
	bl Proc_Goto
	b _0808884C
_08088744:
	bl sub_80846F0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08088774
	adds r1, r4, #0
	adds r1, #0x36
	ldrb r0, [r1]
	cmp r0, #0
	bne _08088774
	strb r0, [r5]
	strb r6, [r1]
	ldr r0, _0808878C @ =0x08336C60
	movs r1, #1
	bl sub_808A454
	ldr r0, _08088790 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08088774
	movs r0, #0x6a
	bl m4aSongNumStart
_08088774:
	ldrb r1, [r5]
	cmp r1, #0
	beq _0808884C
	adds r0, r4, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	beq _08088794
_08088784:
	adds r0, r4, #0
	bl sub_8088404
	b _0808884C
	.align 2, 0
_0808878C: .4byte 0x08336C60
_08088790: .4byte gPlaySt
_08088794:
	cmp r1, #1
	bne _080887A6
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	movs r1, #0
	bl sub_808505C
	b _080887B6
_080887A6:
	cmp r1, #2
	bne _080887B6
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	movs r1, #1
	bl sub_808505C
_080887B6:
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
	ldr r0, _080887D0 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808884C
	movs r0, #0x60
	bl m4aSongNumStart
	b _0808884C
	.align 2, 0
_080887D0: .4byte gPlaySt
_080887D4:
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _0808884C
	adds r0, r4, #0
	adds r0, #0x29
	strb r1, [r0]
	ldr r0, _08088814 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080887F2
	movs r0, #0x6b
	bl m4aSongNumStart
_080887F2:
	adds r0, r4, #0
	adds r0, #0x36
	ldrb r0, [r0]
	cmp r0, #0
	beq _08088818
	adds r0, r4, #0
	adds r0, #0x3d
	strb r6, [r0]
	adds r0, r4, #0
	movs r1, #0
	bl sub_808A4B8
	adds r0, r4, #0
	bl sub_8087CD4
	b _0808884C
	.align 2, 0
_08088814: .4byte gPlaySt
_08088818:
	adds r2, r4, #0
	adds r2, #0x2c
	ldrb r1, [r2]
	adds r0, r1, #0
	cmp r0, #0xff
	beq _08088830
	adds r0, r4, #0
	adds r0, #0x2b
	strb r1, [r0]
	movs r0, #0xff
	strb r0, [r2]
	b _0808884C
_08088830:
	adds r0, r4, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0x40
	bne _08088844
	adds r0, r4, #0
	movs r1, #0xf
	bl Proc_Goto
	b _0808884C
_08088844:
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
_0808884C:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8088854
sub_8088854: @ 0x08088854
	push {lr}
	bl sub_8088404
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8088860
sub_8088860: @ 0x08088860
	adds r3, r0, #0
	adds r3, #0x2d
	movs r2, #0
	movs r1, #5
	strb r1, [r3]
	adds r0, #0x29
	strb r2, [r0]
	bx lr

	thumb_func_start sub_8088870
sub_8088870: @ 0x08088870
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	adds r3, r7, #0
	adds r3, #0x29
	ldrb r0, [r3]
	cmp r0, #8
	bne _080888E8
	adds r4, r7, #0
	adds r4, #0x2b
	ldrb r0, [r4]
	adds r1, r7, #0
	bl sub_808A918
	movs r0, #4
	adds r1, r7, #0
	bl sub_808A918
	ldrb r1, [r4]
	adds r0, r7, #0
	adds r0, #0x37
	adds r2, r0, r1
	ldrb r0, [r2]
	cmp r0, #0xff
	beq _080888C4
	lsls r0, r1, #0xb
	movs r1, #0xb4
	lsls r1, r1, #9
	adds r0, r0, r1
	ldr r1, _080888C0 @ =0x0001FFFF
	ands r0, r1
	lsrs r0, r0, #5
	ldrb r1, [r2]
	bl sub_8070D08
	b _080888DA
	.align 2, 0
_080888C0: .4byte 0x0001FFFF
_080888C4:
	lsls r0, r1, #0xb
	movs r2, #0xb4
	lsls r2, r2, #9
	adds r0, r0, r2
	ldr r1, _080888E4 @ =0x0001FFFF
	ands r0, r1
	lsrs r0, r0, #5
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8070D08
_080888DA:
	ldrb r0, [r4]
	bl sub_808A9F4
	b _080889A8
	.align 2, 0
_080888E4: .4byte 0x0001FFFF
_080888E8:
	cmp r0, #0x20
	bne _0808895E
	adds r0, r7, #0
	bl sub_808A524
	adds r0, r7, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0x10
	bne _08088912
	adds r0, r7, #0
	movs r1, #0x10
	bl Proc_Goto
	movs r0, #0x80
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl StartBgmVolumeChange
	b _080889A8
_08088912:
	cmp r0, #0x40
	bne _08088920
	adds r0, r7, #0
	movs r1, #0xf
	bl Proc_Goto
	b _080889A8
_08088920:
	adds r0, r7, #0
	bl sub_808A79C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080889A8
	adds r2, r7, #0
	adds r2, #0x2c
	ldrb r1, [r2]
	adds r0, r1, #0
	cmp r0, #0xff
	beq _08088944
	adds r0, r7, #0
	adds r0, #0x2b
	strb r1, [r0]
	movs r0, #0xff
	strb r0, [r2]
	b _08088954
_08088944:
	adds r4, r7, #0
	adds r4, #0x2b
	ldrb r0, [r4]
	movs r1, #1
	movs r2, #1
	bl sub_808A658
	strb r0, [r4]
_08088954:
	adds r0, r7, #0
	movs r1, #4
	bl Proc_Goto
	b _080889A8
_0808895E:
	cmp r0, #0x30
	bne _080889A8
	adds r0, r7, #0
	adds r0, #0x2b
	movs r1, #0
	strb r1, [r0]
	adds r2, r7, #0
	adds r2, #0x2c
	movs r0, #0xff
	strb r0, [r2]
	strb r1, [r3]
	adds r0, r7, #0
	adds r0, #0x2a
	strb r1, [r0]
	adds r0, #6
	ldrb r0, [r0]
	bl sub_8087C78
	adds r1, r7, #0
	adds r1, #0x2e
	strb r0, [r1]
	ldr r0, _080889A4 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08088998
	movs r0, #0x6b
	bl m4aSongNumStart
_08088998:
	adds r0, r7, #0
	movs r1, #3
	bl Proc_Goto
	b _08088B2C
	.align 2, 0
_080889A4: .4byte gPlaySt
_080889A8:
	adds r0, r7, #0
	adds r0, #0x29
	ldrb r1, [r0]
	mov sl, r0
	cmp r1, #0x10
	bne _08088A20
	ldr r4, _08088A1C @ =gSinLut
	movs r3, #0x80
	adds r3, r3, r4
	mov sb, r3
	movs r1, #0
	ldrsh r0, [r3, r1]
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r3, #0
	ldrsh r0, [r4, r3]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r2, sb
	movs r3, #0
	ldrsh r0, [r2, r3]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r1, r7, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	str r0, [sp]
	adds r0, r1, #0
	adds r1, r6, #0
	b _08088A98
	.align 2, 0
_08088A1C: .4byte gSinLut
_08088A20:
	cmp r1, #7
	bhi _08088AA8
	ldr r4, _08088AA4 @ =gSinLut
	movs r0, #0x80
	adds r0, r0, r4
	mov sb, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	movs r6, #0x80
	lsls r6, r6, #1
	adds r1, r6, #0
	bl Div
	mov r8, r0
	mov r2, r8
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	mov r8, r2
	movs r3, #0
	ldrsh r0, [r4, r3]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r2, sl
	ldrb r2, [r2]
	lsls r1, r2, #5
	subs r1, r6, r1
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r3, #0
	ldrsh r0, [r4, r3]
	lsls r0, r0, #4
	adds r1, r6, #0
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, sb
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r3, sl
	ldrb r3, [r3]
	lsls r1, r3, #5
	subs r6, r6, r1
	adds r1, r6, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r1, r7, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	str r0, [sp]
	adds r0, r1, #0
	mov r1, r8
_08088A98:
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	b _08088B24
	.align 2, 0
_08088AA4: .4byte gSinLut
_08088AA8:
	cmp r1, #0xf
	bhi _08088B24
	ldr r4, _08088B3C @ =gSinLut
	movs r0, #0x80
	adds r0, r0, r4
	mov sb, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	movs r2, #0x80
	lsls r2, r2, #1
	mov r8, r2
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r3, #0
	ldrsh r0, [r4, r3]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r2, sl
	ldrb r2, [r2]
	lsls r1, r2, #5
	subs r1, #0xe0
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r3, #0
	ldrsh r0, [r4, r3]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, sb
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r3, sl
	ldrb r3, [r3]
	lsls r1, r3, #5
	subs r1, #0xe0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r1, r7, #0
	adds r1, #0x2b
	ldrb r1, [r1]
	str r0, [sp]
	adds r0, r1, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
_08088B24:
	mov r1, sl
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_08088B2C:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08088B3C: .4byte gSinLut

	thumb_func_start sub_8088B40
sub_8088B40: @ 0x08088B40
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r1, r6, #0
	adds r1, #0x2d
	movs r0, #2
	strb r0, [r1]
	adds r5, r6, #0
	adds r5, #0x29
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	ldrb r1, [r5]
	lsls r4, r1, #3
	subs r4, r4, r1
	lsls r4, r4, #3
	subs r4, r4, r1
	lsls r4, r4, #3
	movs r0, #0xdc
	muls r0, r1, r0
	muls r0, r1, r0
	movs r1, #0xe
	bl __divsi3
	subs r4, r4, r0
	adds r0, r4, #0
	movs r1, #0xe
	bl __divsi3
	adds r1, r6, #0
	adds r1, #0x2f
	strb r0, [r1]
	ldrb r5, [r5]
	cmp r5, #0xe
	bne _08088B92
	ldr r0, _08088B98 @ =0x06013800
	movs r1, #9
	bl sub_8070E70
	adds r0, r6, #0
	bl Proc_Break
_08088B92:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08088B98: .4byte 0x06013800

	thumb_func_start sub_8088B9C
sub_8088B9C: @ 0x08088B9C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r1, r6, #0
	adds r1, #0x2d
	movs r0, #3
	strb r0, [r1]
	adds r5, r6, #0
	adds r5, #0x29
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	ldrb r1, [r5]
	lsls r4, r1, #3
	subs r4, r4, r1
	lsls r4, r4, #3
	subs r4, r4, r1
	lsls r4, r4, #3
	movs r0, #0xdc
	muls r0, r1, r0
	muls r0, r1, r0
	movs r1, #0xe
	bl __divsi3
	subs r4, r4, r0
	adds r0, r4, #0
	movs r1, #0xe
	bl __divsi3
	movs r2, #0x24
	rsbs r2, r2, #0
	adds r1, r2, #0
	subs r1, r1, r0
	adds r0, r6, #0
	adds r0, #0x2f
	strb r1, [r0]
	ldrb r5, [r5]
	cmp r5, #0xe
	bne _08088BF6
	ldr r0, _08088BFC @ =0x0832B554
	ldr r1, _08088C00 @ =0x06013800
	bl Decompress
	adds r0, r6, #0
	bl Proc_Break
_08088BF6:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08088BFC: .4byte 0x0832B554
_08088C00: .4byte 0x06013800

	thumb_func_start sub_8088C04
sub_8088C04: @ 0x08088C04
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r1, r6, #0
	adds r1, #0x2d
	movs r0, #7
	strb r0, [r1]
	adds r5, r6, #0
	adds r5, #0x29
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	ldrb r1, [r5]
	lsls r4, r1, #3
	subs r4, r4, r1
	lsls r4, r4, #3
	subs r4, r4, r1
	lsls r4, r4, #3
	movs r0, #0xdc
	muls r0, r1, r0
	muls r0, r1, r0
	movs r1, #0xe
	bl __divsi3
	subs r4, r4, r0
	adds r0, r4, #0
	movs r1, #0xe
	bl __divsi3
	adds r1, r6, #0
	adds r1, #0x42
	strh r0, [r1]
	ldrb r5, [r5]
	cmp r5, #0xe
	bne _08088C50
	adds r0, r6, #0
	movs r1, #9
	bl Proc_Goto
_08088C50:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8088C58
sub_8088C58: @ 0x08088C58
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r1, r6, #0
	adds r1, #0x2d
	movs r0, #7
	strb r0, [r1]
	adds r5, r6, #0
	adds r5, #0x29
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	ldrb r1, [r5]
	lsls r4, r1, #3
	subs r4, r4, r1
	lsls r4, r4, #3
	subs r4, r4, r1
	lsls r4, r4, #3
	movs r0, #0xdc
	muls r0, r1, r0
	muls r0, r1, r0
	movs r1, #0xe
	bl __divsi3
	subs r4, r4, r0
	adds r0, r4, #0
	movs r1, #0xe
	bl __divsi3
	movs r1, #0xdc
	subs r1, r1, r0
	adds r0, r6, #0
	adds r0, #0x42
	strh r1, [r0]
	ldrb r5, [r5]
	cmp r5, #0xe
	bne _08088CA8
	adds r0, r6, #0
	movs r1, #1
	bl Proc_Goto
_08088CA8:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8088CB0
sub_8088CB0: @ 0x08088CB0
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r1, r6, #0
	adds r1, #0x2d
	movs r0, #0xb
	strb r0, [r1]
	adds r5, r6, #0
	adds r5, #0x29
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	ldrb r1, [r5]
	lsls r4, r1, #3
	subs r4, r4, r1
	lsls r4, r4, #3
	subs r4, r4, r1
	lsls r4, r4, #3
	movs r0, #0xdc
	muls r0, r1, r0
	muls r0, r1, r0
	movs r1, #0xe
	bl __divsi3
	subs r4, r4, r0
	adds r0, r4, #0
	movs r1, #0xe
	bl __divsi3
	adds r0, #0xdc
	adds r1, r6, #0
	adds r1, #0x42
	strh r0, [r1]
	adds r0, #0x24
	subs r1, #0x13
	strb r0, [r1]
	ldrb r5, [r5]
	cmp r5, #0xe
	bne _08088D04
	adds r0, r6, #0
	movs r1, #0xa
	bl Proc_Goto
_08088D04:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8088D0C
sub_8088D0C: @ 0x08088D0C
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r1, r6, #0
	adds r1, #0x2d
	movs r0, #0xc
	strb r0, [r1]
	adds r5, r6, #0
	adds r5, #0x29
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	ldrb r1, [r5]
	lsls r4, r1, #3
	subs r4, r4, r1
	lsls r4, r4, #3
	subs r4, r4, r1
	lsls r4, r4, #3
	movs r0, #0xdc
	muls r0, r1, r0
	muls r0, r1, r0
	movs r1, #0xe
	bl __divsi3
	subs r4, r4, r0
	adds r0, r4, #0
	movs r1, #0xe
	bl __divsi3
	movs r2, #0xdc
	lsls r2, r2, #1
	adds r1, r2, #0
	subs r1, r1, r0
	adds r0, r6, #0
	adds r0, #0x42
	strh r1, [r0]
	adds r1, #0x24
	subs r0, #0x13
	strb r1, [r0]
	ldrb r5, [r5]
	cmp r5, #0xe
	bne _08088D66
	adds r0, r6, #0
	movs r1, #9
	bl Proc_Goto
_08088D66:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_8088D6C
sub_8088D6C: @ 0x08088D6C
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r2, r4, #0
	adds r2, #0x34
	ldrb r7, [r2]
	adds r1, r4, #0
	adds r1, #0x2d
	movs r0, #9
	strb r0, [r1]
	ldr r0, _08088DB0 @ =gKeySt
	ldr r3, [r0]
	ldrh r1, [r3, #6]
	movs r6, #0x40
	adds r0, r6, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _08088DB4
	ldrb r0, [r2]
	cmp r0, #0
	bne _08088DA8
	adds r0, r6, #0
	ldrh r3, [r3, #8]
	ands r0, r3
	cmp r0, #0
	beq _08088DDE
	adds r0, r4, #0
	adds r0, #0x33
	ldrb r0, [r0]
_08088DA8:
	subs r0, #1
	strb r0, [r2]
	b _08088DDE
	.align 2, 0
_08088DB0: .4byte gKeySt
_08088DB4:
	movs r6, #0x80
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _08088DDE
	ldrb r1, [r2]
	adds r0, r4, #0
	adds r0, #0x33
	ldrb r0, [r0]
	subs r0, #1
	cmp r1, r0
	bge _08088DD2
	adds r0, r1, #1
	strb r0, [r2]
	b _08088DDE
_08088DD2:
	adds r0, r6, #0
	ldrh r3, [r3, #8]
	ands r0, r3
	cmp r0, #0
	beq _08088DDE
	strb r5, [r2]
_08088DDE:
	adds r0, r4, #0
	adds r0, #0x34
	adds r5, r0, #0
	ldrb r0, [r5]
	cmp r7, r0
	beq _08088DFA
	ldr r0, _08088E4C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08088DFA
	movs r0, #0x66
	bl m4aSongNumStart
_08088DFA:
	ldr r0, _08088E50 @ =gKeySt
	ldr r0, [r0]
	ldrh r2, [r0, #8]
	movs r1, #1
	ands r1, r2
	cmp r1, #0
	beq _08088E86
	adds r0, r4, #0
	adds r0, #0x32
	ldrb r0, [r0]
	ldrb r1, [r5]
	bl sub_8087C78
	adds r5, r4, #0
	adds r5, #0x35
	strb r0, [r5]
	ldr r0, _08088E4C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08088E2A
	movs r0, #0x6a
	bl m4aSongNumStart
_08088E2A:
	adds r1, r4, #0
	adds r1, #0x29
	movs r0, #0
	strb r0, [r1]
	ldrb r0, [r5]
	cmp r0, #1
	beq _08088E54
	cmp r0, #8
	beq _08088E7C
	adds r0, r4, #0
	bl sub_8087C60
	adds r0, r4, #0
	movs r1, #0x10
	bl Proc_Goto
	b _08088EAC
	.align 2, 0
_08088E4C: .4byte gPlaySt
_08088E50: .4byte gKeySt
_08088E54:
	bl sub_8084F94
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r1, #1
	movs r2, #1
	bl sub_808A658
	adds r1, r4, #0
	adds r1, #0x2b
	strb r0, [r1]
	adds r0, r4, #0
	movs r1, #0
	bl sub_8088EB8
	adds r0, r4, #0
	movs r1, #0xb
	bl Proc_Goto
	b _08088EAC
_08088E7C:
	adds r0, r4, #0
	movs r1, #0xd
	bl Proc_Goto
	b _08088EAC
_08088E86:
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _08088EAC
	adds r0, r4, #0
	adds r0, #0x29
	strb r1, [r0]
	adds r0, r4, #0
	movs r1, #8
	bl Proc_Goto
	ldr r0, _08088EB4 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08088EAC
	movs r0, #0x6b
	bl m4aSongNumStart
_08088EAC:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08088EB4: .4byte gPlaySt

	thumb_func_start sub_8088EB8
sub_8088EB8: @ 0x08088EB8
	push {r4, r5, r6, r7, lr}
	adds r3, r0, #0
	adds r0, #0x2b
	ldrb r7, [r0]
	cmp r1, #0
	bne _08088EDA
	adds r1, r3, #0
	adds r1, #0x3a
	adds r1, r1, r7
	movs r0, #1
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	beq _08088ED8
_08088ED4:
	movs r0, #1
	b _08088F5A
_08088ED8:
	movs r1, #1
_08088EDA:
	cmp r1, #0
	ble _08088F0E
	movs r5, #0
	adds r2, r3, #0
	adds r2, #0x2b
	adds r4, r2, #0
	movs r6, #0
	adds r3, #0x3a
_08088EEA:
	ldrb r0, [r4]
	cmp r0, #1
	bhi _08088EF6
	adds r0, #1
	strb r0, [r2]
	b _08088EF8
_08088EF6:
	strb r6, [r2]
_08088EF8:
	ldrb r0, [r4]
	adds r1, r0, r3
	movs r0, #1
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _08088F3C
	adds r5, #1
	cmp r5, #2
	ble _08088EEA
	b _08088F3C
_08088F0E:
	movs r5, #0
	adds r2, r3, #0
	adds r2, #0x2b
	adds r4, r2, #0
	movs r6, #2
	adds r3, #0x3a
_08088F1A:
	ldrb r0, [r4]
	cmp r0, #0
	bne _08088F24
	strb r6, [r2]
	b _08088F28
_08088F24:
	subs r0, #1
	strb r0, [r2]
_08088F28:
	ldrb r0, [r4]
	adds r1, r0, r3
	movs r0, #1
	ldrb r1, [r1]
	ands r0, r1
	cmp r0, #0
	bne _08088F3C
	adds r5, #1
	cmp r5, #2
	ble _08088F1A
_08088F3C:
	ldrb r2, [r2]
	cmp r7, r2
	beq _08088F58
	ldr r0, _08088F54 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08088ED4
	movs r0, #0x66
	bl m4aSongNumStart
	b _08088ED4
	.align 2, 0
_08088F54: .4byte gPlaySt
_08088F58:
	movs r0, #0
_08088F5A:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8088F60
sub_8088F60: @ 0x08088F60
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x2d
	movs r0, #4
	strb r0, [r1]
	adds r3, r4, #0
	adds r3, #0x36
	ldrb r1, [r3]
	cmp r1, #0
	bne _08088FA6
	ldr r0, _08088F90 @ =gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _08088F94
	movs r1, #1
	rsbs r1, r1, #0
	adds r0, r4, #0
	bl sub_8088EB8
	b _08088FF8
	.align 2, 0
_08088F90: .4byte gKeySt
_08088F94:
	movs r0, #0x80
	ands r0, r1
	cmp r0, #0
	beq _08088FF8
	adds r0, r4, #0
	movs r1, #1
	bl sub_8088EB8
	b _08088FF8
_08088FA6:
	ldr r0, _08088FD0 @ =gKeySt
	ldr r0, [r0]
	ldrh r2, [r0, #8]
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	beq _08088FD8
	cmp r1, #1
	beq _08088FF8
	movs r0, #1
	strb r0, [r3]
	ldr r0, _08088FD4 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08088FF8
	movs r0, #0x67
	bl m4aSongNumStart
	b _08088FF8
	.align 2, 0
_08088FD0: .4byte gKeySt
_08088FD4: .4byte gPlaySt
_08088FD8:
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	beq _08088FF8
	cmp r1, #2
	beq _08088FF8
	movs r0, #2
	strb r0, [r3]
	ldr r0, _08089034 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08088FF8
	movs r0, #0x67
	bl m4aSongNumStart
_08088FF8:
	ldr r0, _08089038 @ =gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0808905C
	adds r0, r4, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0xff
	bne _0808903C
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	bl sub_80851B4
	adds r0, r4, #0
	movs r1, #0xd
	bl Proc_Goto
	ldr r0, _08089034 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _080890AA
	movs r0, #0x6a
	bl m4aSongNumStart
	b _080890AA
	.align 2, 0
_08089034: .4byte gPlaySt
_08089038: .4byte gKeySt
_0808903C:
	adds r0, r4, #0
	adds r0, #0x3e
	ldrb r0, [r0]
	cmp r0, #0
	bne _0808904E
	ldr r0, _08089058 @ =0x06014000
	movs r1, #9
	bl sub_8070E70
_0808904E:
	adds r0, r4, #0
	bl sub_8088404
	b _080890AA
	.align 2, 0
_08089058: .4byte 0x06014000
_0808905C:
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _080890AA
	ldr r0, _08089090 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _08089074
	movs r0, #0x6b
	bl m4aSongNumStart
_08089074:
	adds r0, r4, #0
	adds r0, #0x36
	ldrb r5, [r0]
	cmp r5, #0
	beq _08089094
	adds r0, r4, #0
	movs r1, #0
	bl sub_808A4B8
	adds r0, r4, #0
	bl sub_8087CD4
	b _080890AA
	.align 2, 0
_08089090: .4byte gPlaySt
_08089094:
	ldr r0, _080890B0 @ =0x0832B554
	ldr r1, _080890B4 @ =0x06013800
	bl Decompress
	adds r0, r4, #0
	adds r0, #0x29
	strb r5, [r0]
	adds r0, r4, #0
	movs r1, #0xc
	bl Proc_Goto
_080890AA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080890B0: .4byte 0x0832B554
_080890B4: .4byte 0x06013800

	thumb_func_start sub_80890B8
sub_80890B8: @ 0x080890B8
	push {r4, lr}
	adds r4, r0, #0
	movs r1, #1
	movs r2, #2
	bl sub_808A8B4
	adds r0, r4, #0
	bl Proc_Break
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_80890D0
sub_80890D0: @ 0x080890D0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x5c]
	cmp r0, #0
	beq _080890DE
	bl EndAnimProc
_080890DE:
	ldr r0, [r4, #0x54]
	bl Proc_End
	ldr r0, [r4, #0x58]
	bl Proc_End
	movs r0, #0
	bl SetOnHBlankA
	adds r0, r4, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0x20
	bne _0808912C
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #4
	beq _0808911C
	cmp r0, #4
	bgt _0808910E
	cmp r0, #2
	beq _08089114
	b _0808917A
_0808910E:
	cmp r0, #8
	beq _08089124
	b _0808917A
_08089114:
	movs r0, #5
	bl SetNextGameAction
	b _0808917A
_0808911C:
	movs r0, #8
	bl SetNextGameAction
	b _0808917A
_08089124:
	movs r0, #7
	bl SetNextGameAction
	b _0808917A
_0808912C:
	cmp r0, #0x40
	beq _0808917A
	cmp r0, #1
	bne _08089142
	movs r0, #3
	bl sub_80858E4
	movs r0, #3
	bl SetNextGameAction
	b _0808917A
_08089142:
	cmp r0, #2
	bne _08089156
	adds r4, #0x2b
	ldrb r0, [r4]
	bl sub_80851B4
	ldrb r0, [r4]
	bl SetNextGameAction
	b _0808917A
_08089156:
	cmp r0, #0x10
	bne _08089162
	movs r0, #0
	bl SetNextGameAction
	b _0808917A
_08089162:
	cmp r0, #0x80
	bne _0808917A
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #0x80
	movs r2, #0x10
	movs r3, #0
	bl StartBgmVolumeChange
	movs r0, #4
	bl SetNextGameAction
_0808917A:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8089180
sub_8089180: @ 0x08089180
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0x20
	strb r0, [r1]
	ldr r0, [r4, #0x54]
	bl Proc_End
	ldr r0, [r4, #0x58]
	bl Proc_End
	movs r0, #0
	bl SetOnHBlankA
	ldr r0, [r4, #0x5c]
	cmp r0, #0
	beq _080891A8
	bl EndAnimProc
_080891A8:
	adds r0, r4, #0
	adds r0, #0x35
	ldrb r0, [r0]
	cmp r0, #1
	beq _080891B8
	cmp r0, #8
	beq _080891C2
	b _080891D4
_080891B8:
	movs r0, #0
	adds r1, r4, #0
	bl sub_808B578
	b _080891D4
_080891C2:
	movs r0, #0x80
	movs r1, #0
	movs r2, #0x20
	movs r3, #0
	bl StartBgmVolumeChange
	adds r0, r4, #0
	bl sub_808BD58
_080891D4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80891DC
sub_80891DC: @ 0x080891DC
	push {lr}
	adds r1, r0, #0
	adds r1, #0x35
	ldrb r1, [r1]
	cmp r1, #1
	beq _080891EE
	cmp r1, #8
	beq _080891F6
	b _080891FC
_080891EE:
	movs r1, #0xa
	bl Proc_Goto
	b _080891FC
_080891F6:
	movs r1, #9
	bl Proc_Goto
_080891FC:
	pop {r0}
	bx r0

	thumb_func_start sub_8089200
sub_8089200: @ 0x08089200
	push {lr}
	adds r1, r0, #0
	ldr r0, _0808922C @ =0x08689E9C
	bl SpawnProcLocking
	adds r3, r0, #0
	adds r3, #0x2e
	movs r2, #0
	movs r1, #0x80
	strb r1, [r3]
	adds r0, #0x35
	strb r2, [r0]
	ldr r2, _08089230 @ =gPlaySt
	movs r0, #0x61
	rsbs r0, r0, #0
	ldrb r1, [r2, #0x1c]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2, #0x1c]
	pop {r0}
	bx r0
	.align 2, 0
_0808922C: .4byte 0x08689E9C
_08089230: .4byte gPlaySt

	thumb_func_start sub_8089234
sub_8089234: @ 0x08089234
	push {lr}
	adds r1, r0, #0
	ldr r0, _08089250 @ =0x08689E9C
	bl SpawnProcLocking
	adds r3, r0, #0
	adds r3, #0x2e
	movs r2, #0
	movs r1, #0x40
	strb r1, [r3]
	adds r0, #0x35
	strb r2, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_08089250: .4byte 0x08689E9C

	thumb_func_start sub_8089254
sub_8089254: @ 0x08089254
	adds r0, #0x29
	movs r1, #0
	strb r1, [r0]
	ldr r3, _08089274 @ =gPal
	ldr r2, _08089278 @ =0x02000002
	movs r1, #0x80
	lsls r1, r1, #2
_08089262:
	ldrh r0, [r3]
	strh r0, [r2]
	adds r3, #2
	adds r2, #2
	subs r1, #1
	cmp r1, #0
	bne _08089262
	bx lr
	.align 2, 0
_08089274: .4byte gPal
_08089278: .4byte 0x02000002

	thumb_func_start sub_808927C
sub_808927C: @ 0x0808927C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	adds r0, #0x29
	ldrb r5, [r0]
	movs r6, #0
	ldr r0, _08089304 @ =gPal
	mov sl, r0
	movs r4, #0xf8
	lsls r4, r4, #7
	mov sb, r4
	ldr r0, _08089308 @ =0x02000002
	mov ip, r0
_0808929C:
	lsls r7, r6, #1
	mov r4, ip
	ldrh r1, [r4]
	mov r0, sb
	ands r0, r1
	muls r0, r5, r0
	asrs r2, r0, #4
	mov r0, sb
	ands r2, r0
	movs r4, #0xf8
	lsls r4, r4, #2
	adds r0, r4, #0
	ands r0, r1
	muls r0, r5, r0
	asrs r3, r0, #4
	ands r3, r4
	movs r4, #0x1f
	adds r0, r4, #0
	ands r0, r1
	muls r0, r5, r0
	asrs r0, r0, #4
	ands r0, r4
	mov r4, sl
	adds r1, r7, r4
	orrs r2, r3
	orrs r2, r0
	strh r2, [r1]
	movs r0, #2
	add ip, r0
	adds r6, #1
	ldr r0, _0808930C @ =0x000001FF
	cmp r6, r0
	ble _0808929C
	bl EnablePalSync
	mov r1, r8
	adds r1, #0x29
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	cmp r5, #0x10
	bne _080892F6
	mov r0, r8
	bl Proc_Break
_080892F6:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08089304: .4byte gPal
_08089308: .4byte 0x02000002
_0808930C: .4byte 0x000001FF

	thumb_func_start sub_8089310
sub_8089310: @ 0x08089310
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sb, r0
	mov r1, sb
	adds r1, #0x29
	movs r0, #0x10
	ldrb r1, [r1]
	subs r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	movs r6, #0
	ldr r0, _080893C0 @ =gPal
	mov sl, r0
	movs r1, #0xf8
	lsls r1, r1, #7
	mov r8, r1
	ldr r4, _080893C4 @ =0x02000002
	mov ip, r4
_0808933A:
	lsls r7, r6, #1
	mov r0, ip
	ldrh r1, [r0]
	mov r0, r8
	ands r0, r1
	muls r0, r5, r0
	asrs r2, r0, #4
	mov r4, r8
	ands r2, r4
	movs r4, #0xf8
	lsls r4, r4, #2
	adds r0, r4, #0
	ands r0, r1
	muls r0, r5, r0
	asrs r3, r0, #4
	ands r3, r4
	movs r4, #0x1f
	adds r0, r4, #0
	ands r0, r1
	muls r0, r5, r0
	asrs r0, r0, #4
	ands r0, r4
	mov r4, sl
	adds r1, r7, r4
	orrs r2, r3
	orrs r2, r0
	strh r2, [r1]
	movs r0, #2
	add ip, r0
	adds r6, #1
	ldr r0, _080893C8 @ =0x000001FF
	cmp r6, r0
	ble _0808933A
	bl EnablePalSync
	mov r1, sb
	adds r1, #0x29
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	cmp r5, #0
	bne _080893B2
	ldr r2, _080893CC @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	mov r0, sb
	bl Proc_Break
_080893B2:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080893C0: .4byte gPal
_080893C4: .4byte 0x02000002
_080893C8: .4byte 0x000001FF
_080893CC: .4byte gDispIo

	thumb_func_start sub_80893D0
sub_80893D0: @ 0x080893D0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sb, r0
	mov r1, sb
	adds r1, #0x29
	movs r0, #0x20
	ldrb r1, [r1]
	subs r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	movs r6, #0
	ldr r0, _08089480 @ =gPal
	mov sl, r0
	movs r1, #0xf8
	lsls r1, r1, #7
	mov r8, r1
	ldr r4, _08089484 @ =0x02000002
	mov ip, r4
_080893FA:
	lsls r7, r6, #1
	mov r0, ip
	ldrh r1, [r0]
	mov r0, r8
	ands r0, r1
	muls r0, r5, r0
	asrs r2, r0, #5
	mov r4, r8
	ands r2, r4
	movs r4, #0xf8
	lsls r4, r4, #2
	adds r0, r4, #0
	ands r0, r1
	muls r0, r5, r0
	asrs r3, r0, #5
	ands r3, r4
	movs r4, #0x1f
	adds r0, r4, #0
	ands r0, r1
	muls r0, r5, r0
	asrs r0, r0, #5
	ands r0, r4
	mov r4, sl
	adds r1, r7, r4
	orrs r2, r3
	orrs r2, r0
	strh r2, [r1]
	movs r0, #2
	add ip, r0
	adds r6, #1
	ldr r0, _08089488 @ =0x000001FF
	cmp r6, r0
	ble _080893FA
	bl EnablePalSync
	mov r1, sb
	adds r1, #0x29
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	cmp r5, #0
	bne _08089472
	ldr r2, _0808948C @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	mov r0, sb
	bl Proc_Break
_08089472:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08089480: .4byte gPal
_08089484: .4byte 0x02000002
_08089488: .4byte 0x000001FF
_0808948C: .4byte gDispIo

	thumb_func_start sub_8089490
sub_8089490: @ 0x08089490
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sb, r0
	mov r1, sb
	adds r1, #0x29
	movs r0, #0x40
	ldrb r1, [r1]
	subs r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	movs r6, #0
	ldr r0, _08089540 @ =gPal
	mov sl, r0
	movs r1, #0xf8
	lsls r1, r1, #7
	mov r8, r1
	ldr r4, _08089544 @ =0x02000002
	mov ip, r4
_080894BA:
	lsls r7, r6, #1
	mov r0, ip
	ldrh r1, [r0]
	mov r0, r8
	ands r0, r1
	muls r0, r5, r0
	asrs r2, r0, #6
	mov r4, r8
	ands r2, r4
	movs r4, #0xf8
	lsls r4, r4, #2
	adds r0, r4, #0
	ands r0, r1
	muls r0, r5, r0
	asrs r3, r0, #6
	ands r3, r4
	movs r4, #0x1f
	adds r0, r4, #0
	ands r0, r1
	muls r0, r5, r0
	asrs r0, r0, #6
	ands r0, r4
	mov r4, sl
	adds r1, r7, r4
	orrs r2, r3
	orrs r2, r0
	strh r2, [r1]
	movs r0, #2
	add ip, r0
	adds r6, #1
	ldr r0, _08089548 @ =0x000001FF
	cmp r6, r0
	ble _080894BA
	bl EnablePalSync
	mov r1, sb
	adds r1, #0x29
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	cmp r5, #0
	bne _08089532
	ldr r2, _0808954C @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	mov r0, sb
	bl Proc_Break
_08089532:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08089540: .4byte gPal
_08089544: .4byte 0x02000002
_08089548: .4byte 0x000001FF
_0808954C: .4byte gDispIo

	thumb_func_start sub_8089550
sub_8089550: @ 0x08089550
	push {lr}
	adds r1, r0, #0
	ldr r0, _08089560 @ =0x0868A09C
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
_08089560: .4byte 0x0868A09C

	thumb_func_start sub_8089564
sub_8089564: @ 0x08089564
	push {lr}
	adds r1, r0, #0
	ldr r0, _08089574 @ =0x0868A0B4
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
_08089574: .4byte 0x0868A0B4

	thumb_func_start sub_8089578
sub_8089578: @ 0x08089578
	push {lr}
	adds r1, r0, #0
	ldr r0, _08089588 @ =0x0868A0CC
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
_08089588: .4byte 0x0868A0CC

	thumb_func_start sub_808958C
sub_808958C: @ 0x0808958C
	push {lr}
	adds r1, r0, #0
	ldr r0, _0808959C @ =0x0868A0E4
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
_0808959C: .4byte 0x0868A0E4

	thumb_func_start sub_80895A0
sub_80895A0: @ 0x080895A0
	lsls r2, r2, #4
	cmp r2, #0
	ble _080895B6
	adds r3, r0, #0
_080895A8:
	ldrh r0, [r3]
	strh r0, [r1]
	adds r3, #2
	adds r1, #2
	subs r2, #1
	cmp r2, #0
	bne _080895A8
_080895B6:
	bx lr

	thumb_func_start sub_80895B8
sub_80895B8: @ 0x080895B8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r5, r0, #0
	movs r0, #0x3f
	ands r5, r0
	movs r1, #0x20
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _080895D8
	movs r0, #0x1f
	ands r0, r5
	subs r5, r1, r0
_080895D8:
	movs r0, #1
	mov ip, r0
	ldr r0, _0808967C @ =0x02000404
	movs r2, #0xf8
	lsls r2, r2, #7
	mov sb, r2
	subs r6, r1, r5
	movs r7, #0xf8
	lsls r7, r7, #2
	adds r0, #0x22
	mov r8, r0
	movs r4, #0x1f
	mov sl, r4
_080895F2:
	mov r0, ip
	subs r0, #8
	cmp r0, #2
	bls _0808965C
	movs r0, #0x90
	lsls r0, r0, #1
	add r0, ip
	lsls r0, r0, #1
	ldr r1, _08089680 @ =gPal
	adds r0, r0, r1
	ldrh r1, [r0]
	mov r2, r8
	ldrh r4, [r2]
	adds r0, r1, #0
	mov r2, sb
	ands r0, r2
	adds r3, r0, #0
	muls r3, r6, r3
	adds r0, r4, #0
	ands r0, r2
	muls r0, r5, r0
	adds r3, r3, r0
	asrs r3, r3, #5
	ands r3, r2
	adds r0, r1, #0
	ands r0, r7
	adds r2, r0, #0
	muls r2, r6, r2
	adds r0, r4, #0
	ands r0, r7
	muls r0, r5, r0
	adds r2, r2, r0
	asrs r2, r2, #5
	ands r2, r7
	mov r0, sl
	ands r1, r0
	muls r1, r6, r1
	ands r4, r0
	adds r0, r4, #0
	muls r0, r5, r0
	adds r1, r1, r0
	asrs r1, r1, #5
	movs r4, #0x1f
	ands r1, r4
	movs r0, #0x88
	lsls r0, r0, #1
	add r0, ip
	lsls r0, r0, #1
	ldr r4, _08089680 @ =gPal
	adds r0, r0, r4
	orrs r3, r2
	orrs r1, r3
	strh r1, [r0]
_0808965C:
	movs r0, #2
	add r8, r0
	movs r1, #1
	add ip, r1
	mov r2, ip
	cmp r2, #0xf
	ble _080895F2
	bl EnablePalSync
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808967C: .4byte 0x02000404
_08089680: .4byte gPal

	thumb_func_start sub_8089684
sub_8089684: @ 0x08089684
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	ldr r4, [r0, #0x14]
	adds r0, r4, #0
	adds r0, #0x2f
	ldrb r0, [r0]
	lsls r0, r0, #5
	movs r1, #0xdc
	bl __divsi3
	movs r1, #0x20
	subs r1, r1, r0
	lsls r1, r1, #0x18
	movs r0, #0x90
	lsls r0, r0, #0x18
	adds r1, r1, r0
	lsrs r1, r1, #0x18
	mov sl, r1
	movs r1, #0x90
	mov sb, r1
	adds r0, r4, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #1
	bne _080896D2
	ldr r0, [r4, #0x50]
	mov r4, sp
	adds r4, #6
	add r5, sp, #8
	add r1, sp, #4
	adds r2, r4, #0
	adds r3, r5, #0
	bl FormatTime
	b _080896F2
_080896D2:
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r1, r0, #2
	adds r0, r4, #0
	adds r0, #0x44
	adds r0, r0, r1
	ldr r0, [r0]
	mov r4, sp
	adds r4, #6
	add r5, sp, #8
	add r1, sp, #4
	adds r2, r4, #0
	adds r3, r5, #0
	bl FormatTime
_080896F2:
	mov r1, sb
	adds r1, #0x10
	mov r4, sl
	subs r4, #0xe
	ldr r3, _08089884 @ =0x0868A160
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #0xd
	adds r2, r4, #0
	bl PutSpriteExt
	mov r1, sb
	adds r1, #0x14
	ldr r3, _08089888 @ =0x0868A224
	movs r0, #0xa0
	lsls r0, r0, #7
	mov r8, r0
	str r0, [sp]
	movs r0, #0xd
	adds r2, r4, #0
	bl PutSpriteExt
	add r0, sp, #4
	mov r7, sl
	subs r7, #8
	ldrh r0, [r0]
	cmp r0, #0x63
	bls _0808976C
	mov r5, sb
	adds r5, #0x12
	ldr r4, _0808988C @ =0x0868A260
	add r0, sp, #4
	ldrh r0, [r0]
	movs r6, #0x64
	movs r1, #0x64
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r4
	ldr r3, [r0]
	mov r1, r8
	str r1, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	bl PutSpriteExt
	add r5, sp, #4
	adds r0, r5, #0
	ldrh r4, [r0]
	adds r0, r4, #0
	movs r1, #0x64
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	muls r0, r6, r0
	subs r4, r4, r0
	strh r4, [r5]
_0808976C:
	add r0, sp, #4
	ldrh r0, [r0]
	cmp r0, #9
	bls _0808979A
	mov r5, sb
	adds r5, #0x1a
	ldr r4, _0808988C @ =0x0868A260
	add r0, sp, #4
	ldrh r0, [r0]
	movs r1, #0xa
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	bl PutSpriteExt
_0808979A:
	mov r5, sb
	adds r5, #0x22
	ldr r4, _0808988C @ =0x0868A260
	add r0, sp, #4
	ldrh r0, [r0]
	movs r1, #0xa
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r4
	ldr r3, [r0]
	mov r1, r8
	str r1, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	bl PutSpriteExt
	mov r1, sb
	adds r1, #0x2a
	mov r2, sl
	subs r2, #7
	ldr r3, [r4, #0x28]
	mov r0, r8
	str r0, [sp]
	movs r0, #0xd
	bl PutSpriteExt
	adds r5, #0x10
	mov r1, sp
	ldrh r0, [r1, #6]
	movs r1, #0xa
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	bl PutSpriteExt
	adds r5, #8
	mov r1, sp
	ldrh r0, [r1, #6]
	movs r1, #0xa
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	adds r2, r7, #0
	bl PutSpriteExt
	mov r1, sb
	adds r1, #0x42
	mov r2, sl
	adds r2, #1
	ldr r4, _08089890 @ =0x0868A234
	ldr r3, [r4, #0x28]
	mov r0, r8
	str r0, [sp]
	movs r0, #0xd
	bl PutSpriteExt
	adds r5, #0x10
	mov r1, sp
	ldrh r0, [r1, #8]
	movs r1, #0xa
	bl __udivsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	mov r2, sl
	bl PutSpriteExt
	adds r5, #8
	mov r1, sp
	ldrh r0, [r1, #8]
	movs r1, #0xa
	bl __umodsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0xe
	adds r0, r0, r4
	ldr r3, [r0]
	mov r0, r8
	str r0, [sp]
	movs r0, #0xd
	adds r1, r5, #0
	mov r2, sl
	bl PutSpriteExt
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08089884: .4byte 0x0868A160
_08089888: .4byte 0x0868A224
_0808988C: .4byte 0x0868A260
_08089890: .4byte 0x0868A234

	thumb_func_start sub_8089894
sub_8089894: @ 0x08089894
	push {r4, r5, r6, lr}
	sub sp, #0x14
	adds r6, r0, #0
	adds r5, r1, #0
	ldr r0, [sp, #0x24]
	ldr r4, [sp, #0x28]
	ldr r1, [sp, #0x2c]
	lsls r6, r6, #0x18
	lsrs r6, r6, #0x18
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	str r3, [sp]
	str r0, [sp, #4]
	mov r0, sp
	asrs r5, r5, #8
	strh r5, [r0, #8]
	asrs r2, r2, #8
	strh r2, [r0, #0xa]
	mov r5, sp
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	movs r0, #0x80
	lsls r0, r0, #9
	bl __divsi3
	strh r0, [r5, #0xc]
	mov r1, sp
	strh r0, [r1, #0xe]
	mov r0, sp
	lsls r4, r4, #6
	strh r4, [r0, #0x10]
	ldr r1, _080898EC @ =0x03002708
	cmp r6, #2
	bne _080898DA
	subs r1, #0x10
_080898DA:
	mov r0, sp
	movs r2, #1
	bl BgAffineSet
	add sp, #0x14
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080898EC: .4byte 0x03002708

	thumb_func_start sub_80898F0
sub_80898F0: @ 0x080898F0
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r6, r0, #0
	movs r1, #0
	movs r0, #0
	strh r0, [r6, #0x2c]
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r6, #0x2e]
	adds r0, r6, #0
	adds r0, #0x3a
	strb r1, [r0]
	adds r1, r6, #0
	adds r1, #0x3b
	movs r0, #0x28
	strb r0, [r1]
	movs r0, #0xac
	lsls r0, r0, #4
	bl sub_8070D48
	movs r4, #0
	ldr r5, _0808993C @ =0x0001FFFF
_0808991C:
	ldr r0, [r6, #0x14]
	adds r0, #0x37
	adds r1, r0, r4
	ldrb r0, [r1]
	cmp r0, #0xff
	beq _08089940
	lsls r0, r4, #0xb
	movs r2, #0xb4
	lsls r2, r2, #9
	adds r0, r0, r2
	ands r0, r5
	lsrs r0, r0, #5
	ldrb r1, [r1]
	bl sub_8070D08
	b _08089954
	.align 2, 0
_0808993C: .4byte 0x0001FFFF
_08089940:
	lsls r0, r4, #0xb
	movs r1, #0xb4
	lsls r1, r1, #9
	adds r0, r0, r1
	ands r0, r5
	lsrs r0, r0, #5
	movs r1, #1
	rsbs r1, r1, #0
	bl sub_8070D08
_08089954:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	cmp r4, #2
	bls _0808991C
	movs r5, #0
	movs r7, #0
	strh r7, [r6, #0x30]
	adds r0, r6, #0
	adds r0, #0x32
	strb r5, [r0]
	movs r4, #0x80
	lsls r4, r4, #1
	str r4, [sp]
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl SetObjAffine
	str r4, [sp]
	movs r0, #1
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl SetObjAffine
	str r4, [sp]
	movs r0, #2
	adds r1, r4, #0
	movs r2, #0
	movs r3, #0
	bl SetObjAffine
	strh r7, [r6, #0x2a]
	adds r0, r6, #0
	bl sub_808A418
	str r0, [r6, #0x34]
	adds r0, r6, #0
	adds r0, #0x39
	strb r5, [r0]
	ldr r1, [r6, #0x14]
	adds r2, r1, #0
	adds r2, #0x3f
	ldrb r0, [r2]
	cmp r0, #0xff
	bne _080899B8
	str r7, [r1, #0x5c]
	b _080899D6
_080899B8:
	ldr r0, _080899EC @ =0x0832C39C
	movs r1, #0xa0
	lsls r1, r1, #1
	ldrb r2, [r2]
	lsls r2, r2, #5
	adds r2, #0x30
	movs r3, #0xd0
	lsls r3, r3, #1
	str r7, [sp]
	movs r4, #4
	str r4, [sp, #4]
	bl StartAnimProc
	ldr r1, [r6, #0x14]
	str r0, [r1, #0x5c]
_080899D6:
	ldr r0, [r6, #0x14]
	adds r0, #0x2b
	ldrb r1, [r0]
	adds r0, r6, #0
	adds r0, #0x3c
	strb r1, [r0]
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080899EC: .4byte 0x0832C39C

	thumb_func_start sub_80899F0
sub_80899F0: @ 0x080899F0
	push {lr}
	lsls r1, r1, #0x10
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08089A1C
	ldr r2, _08089A18 @ =gPal
	lsrs r0, r1, #0x12
	movs r1, #0xf
	ands r0, r1
	movs r1, #0xc8
	lsls r1, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r0, [r0]
	movs r1, #0xb4
	lsls r1, r1, #2
	adds r2, r2, r1
	strh r0, [r2]
	b _08089A2A
	.align 2, 0
_08089A18: .4byte gPal
_08089A1C:
	ldr r0, _08089A34 @ =gPal
	ldr r2, _08089A38 @ =0x0000033A
	adds r1, r0, r2
	ldrh r1, [r1]
	subs r2, #0x6a
	adds r0, r0, r2
	strh r1, [r0]
_08089A2A:
	bl EnablePalSync
	pop {r0}
	bx r0
	.align 2, 0
_08089A34: .4byte gPal
_08089A38: .4byte 0x0000033A

	thumb_func_start sub_8089A3C
sub_8089A3C: @ 0x08089A3C
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, sb
	mov r4, r8
	push {r4, r5, r6}
	sub sp, #4
	adds r6, r1, #0
	mov r8, r2
	adds r4, r3, #0
	ldr r0, [sp, #0x20]
	ldr r5, [sp, #0x24]
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r1, _08089AB0 @ =0x000001FF
	mov sl, r1
	adds r1, r6, #0
	mov r2, sl
	ands r1, r2
	ldr r3, _08089AB4 @ =0x0868A0FC
	movs r2, #0xf
	mov sb, r2
	ands r0, r2
	lsls r0, r0, #0xc
	str r0, [sp]
	movs r0, #4
	mov r2, r8
	bl PutSpriteExt
	ldr r0, _08089AB8 @ =0x0868A518
	lsls r4, r4, #3
	adds r4, r4, r0
	ldrb r0, [r4, #4]
	adds r0, #8
	adds r6, r6, r0
	mov r0, sl
	ands r6, r0
	movs r1, #8
	add r8, r1
	ldr r3, [r4]
	mov r2, sb
	ands r5, r2
	lsls r5, r5, #0xc
	str r5, [sp]
	movs r0, #4
	adds r1, r6, #0
	mov r2, r8
	bl PutSpriteExt
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08089AB0: .4byte 0x000001FF
_08089AB4: .4byte 0x0868A0FC
_08089AB8: .4byte 0x0868A518

	thumb_func_start sub_8089ABC
sub_8089ABC: @ 0x08089ABC
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, sb
	mov r4, r8
	push {r4, r5, r6}
	sub sp, #4
	adds r6, r1, #0
	mov r8, r2
	adds r4, r3, #0
	ldr r0, [sp, #0x20]
	ldr r5, [sp, #0x24]
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r1, _08089B30 @ =0x000001FF
	mov sl, r1
	adds r1, r6, #0
	mov r2, sl
	ands r1, r2
	ldr r3, _08089B34 @ =0x0868A0FC
	movs r2, #0xf
	mov sb, r2
	ands r0, r2
	lsls r0, r0, #0xc
	str r0, [sp]
	movs r0, #4
	mov r2, r8
	bl PutSpriteExt
	ldr r0, _08089B38 @ =0x0868A4F8
	lsls r4, r4, #3
	adds r4, r4, r0
	ldrb r0, [r4, #4]
	adds r0, #8
	adds r6, r6, r0
	mov r0, sl
	ands r6, r0
	movs r1, #8
	add r8, r1
	ldr r3, [r4]
	mov r2, sb
	ands r5, r2
	lsls r5, r5, #0xc
	str r5, [sp]
	movs r0, #4
	adds r1, r6, #0
	mov r2, r8
	bl PutSpriteExt
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08089B30: .4byte 0x000001FF
_08089B34: .4byte 0x0868A0FC
_08089B38: .4byte 0x0868A4F8

	thumb_func_start sub_8089B3C
sub_8089B3C: @ 0x08089B3C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r7, r0, #0
	adds r4, r7, #0
	adds r4, #0x3c
	ldr r0, [r7, #0x14]
	adds r0, #0x2b
	ldrb r1, [r4]
	ldrb r2, [r0]
	cmp r1, r2
	beq _08089B66
	ldrb r0, [r0]
	bl sub_808A9F4
	ldr r0, [r7, #0x14]
	adds r0, #0x2b
	ldrb r0, [r0]
	strb r0, [r4]
_08089B66:
	ldr r2, _08089BAC @ =gPal
	ldr r3, _08089BB0 @ =0x02000404
	ldrh r1, [r7, #0x2a]
	lsrs r0, r1, #2
	movs r1, #0xf
	ands r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	movs r1, #0x8d
	lsls r1, r1, #2
	adds r2, r2, r1
	strh r0, [r2]
	bl EnablePalSync
	ldr r1, [r7, #0x14]
	adds r4, r1, #0
	adds r4, #0x3f
	ldrb r3, [r4]
	adds r0, r3, #0
	cmp r0, #0xff
	beq _08089C52
	adds r5, r1, #0
	adds r5, #0x40
	ldrh r2, [r5]
	adds r1, r2, #0
	movs r0, #0x80
	lsls r0, r0, #1
	cmp r1, r0
	beq _08089C52
	cmp r1, #0xf
	bhi _08089BB4
	movs r0, #0xff
	strb r0, [r4]
	b _08089C48
	.align 2, 0
_08089BAC: .4byte gPal
_08089BB0: .4byte 0x02000404
_08089BB4:
	ldr r0, _08089C6C @ =gSinLut
	mov sb, r0
	movs r4, #0xff
	adds r0, r4, #0
	ands r0, r2
	adds r0, #0x40
	lsls r0, r0, #1
	add r0, sb
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	ldrh r1, [r5]
	bl Div
	mov r8, r0
	mov r2, r8
	lsls r2, r2, #0x10
	asrs r2, r2, #0x10
	mov r8, r2
	ldr r1, [r7, #0x14]
	adds r1, #0x40
	adds r0, r4, #0
	ldrh r2, [r1]
	ands r0, r2
	lsls r0, r0, #1
	add r0, sb
	movs r2, #0
	ldrsh r0, [r0, r2]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	ldrh r1, [r1]
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	ldr r1, [r7, #0x14]
	adds r1, #0x40
	adds r0, r4, #0
	ldrh r2, [r1]
	ands r0, r2
	lsls r0, r0, #1
	add r0, sb
	movs r2, #0
	ldrsh r0, [r0, r2]
	lsls r0, r0, #4
	ldrh r1, [r1]
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	ldr r1, [r7, #0x14]
	adds r1, #0x40
	ldrh r0, [r1]
	ands r4, r0
	adds r4, #0x40
	lsls r4, r4, #1
	add r4, sb
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	ldrh r1, [r1]
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #3
	mov r1, r8
	adds r2, r6, #0
	adds r3, r5, #0
	bl SetObjAffine
_08089C48:
	ldr r0, [r7, #0x14]
	adds r0, #0x40
	ldrh r1, [r0]
	subs r1, #0x10
	strh r1, [r0]
_08089C52:
	ldrh r0, [r7, #0x2a]
	bl sub_80895B8
	ldrh r0, [r7, #0x2a]
	adds r0, #1
	strh r0, [r7, #0x2a]
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08089C6C: .4byte gSinLut

	thumb_func_start sub_8089C70
sub_8089C70: @ 0x08089C70
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	ldr r1, [r4, #0x14]
	adds r1, #0x2f
	ldrb r2, [r1]
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #4
	movs r1, #0xdc
	bl __divsi3
	movs r1, #0xe8
	lsls r1, r1, #1
	adds r5, r0, r1
	ldr r2, _08089CE4 @ =0x000001FF
	adds r0, r2, #0
	ands r5, r0
	ldr r3, _08089CE8 @ =0x0868A0FC
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #0x38
	adds r2, r5, #0
	bl PutSpriteExt
	ldr r1, [r4, #0x14]
	adds r0, r1, #0
	adds r0, #0x42
	ldrh r0, [r0]
	cmp r0, #0
	beq _08089CF4
	adds r0, r1, #0
	adds r0, #0x35
	ldrb r0, [r0]
	bl sub_8087CB0
	lsls r0, r0, #0x18
	ldr r1, _08089CEC @ =0x0868A518
	lsrs r0, r0, #0x15
	adds r1, r0, r1
	ldrb r1, [r1, #4]
	adds r1, #0x40
	adds r2, r5, #0
	adds r2, #8
	ldr r3, _08089CE4 @ =0x000001FF
	ands r2, r3
	ldr r3, _08089CF0 @ =0x0868A4F8
	adds r0, r0, r3
	ldr r3, [r0]
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
	b _08089D20
	.align 2, 0
_08089CE4: .4byte 0x000001FF
_08089CE8: .4byte 0x0868A0FC
_08089CEC: .4byte 0x0868A518
_08089CF0: .4byte 0x0868A4F8
_08089CF4:
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	bl sub_8087CB0
	lsls r0, r0, #0x18
	ldr r1, _08089D28 @ =0x0868A518
	lsrs r0, r0, #0x15
	adds r0, r0, r1
	ldrb r1, [r0, #4]
	adds r1, #0x40
	adds r2, r5, #0
	adds r2, #8
	ldr r3, _08089D2C @ =0x000001FF
	ands r2, r3
	ldr r3, [r0]
	movs r0, #0xc0
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
_08089D20:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08089D28: .4byte 0x0868A518
_08089D2C: .4byte 0x000001FF

	thumb_func_start sub_8089D30
sub_8089D30: @ 0x08089D30
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov r8, r0
	ldr r2, [r0, #0x14]
	adds r0, r2, #0
	adds r0, #0x2e
	ldrb r1, [r0]
	lsls r0, r1, #0x18
	cmp r0, #0
	blt _08089D66
	lsrs r0, r0, #0x18
	cmp r0, #0x20
	bne _08089D60
	adds r0, r2, #0
	adds r0, #0x35
	ldrb r0, [r0]
	mov r1, r8
	adds r1, #0x33
	strb r0, [r1]
	b _08089D66
_08089D60:
	mov r0, r8
	adds r0, #0x33
	strb r1, [r0]
_08089D66:
	mov r0, r8
	ldr r3, [r0, #0x14]
	adds r0, r3, #0
	adds r0, #0x2f
	adds r1, r3, #0
	adds r1, #0x42
	ldrh r1, [r1]
	ldrb r0, [r0]
	adds r5, r1, r0
	cmp r5, #0xdb
	bgt _08089E24
	adds r0, r3, #0
	adds r0, #0x31
	ldrb r1, [r0]
	movs r0, #6
	subs r0, r0, r1
	lsls r0, r0, #0x1b
	lsrs r4, r0, #0x18
	movs r7, #0
	cmp r7, r1
	bhs _08089DFE
	movs r6, #0x38
_08089D92:
	adds r0, r3, #0
	adds r0, #0x30
	ldrb r0, [r0]
	adds r1, r7, #0
	bl sub_8087C78
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	adds r0, r3, #0
	bl sub_8087CB0
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	mov r1, r8
	ldr r0, [r1, #0x14]
	adds r0, #0x2a
	ldrb r0, [r0]
	cmp r7, r0
	bne _08089DD2
	lsls r2, r7, #1
	adds r2, r2, r7
	lsls r2, r2, #3
	adds r2, r4, r2
	movs r0, #1
	str r0, [sp]
	movs r0, #3
	str r0, [sp, #4]
	mov r0, r8
	subs r1, r6, r5
	bl sub_8089A3C
	b _08089DEA
_08089DD2:
	lsls r2, r7, #1
	adds r2, r2, r7
	lsls r2, r2, #3
	adds r2, r4, r2
	movs r0, #4
	str r0, [sp]
	movs r0, #8
	str r0, [sp, #4]
	mov r0, r8
	subs r1, r6, r5
	bl sub_8089A3C
_08089DEA:
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	mov r2, r8
	ldr r3, [r2, #0x14]
	adds r0, r3, #0
	adds r0, #0x31
	ldrb r0, [r0]
	cmp r7, r0
	blo _08089D92
_08089DFE:
	mov r3, r8
	ldr r0, [r3, #0x14]
	adds r1, r0, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	cmp r1, #1
	bne _08089E24
	adds r0, #0x2a
	ldrb r1, [r0]
	lsls r2, r1, #1
	adds r2, r2, r1
	lsls r2, r2, #3
	adds r2, r4, r2
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #0
	movs r1, #0x24
	bl sub_808A3C8
_08089E24:
	mov r3, r8
	ldr r2, [r3, #0x14]
	adds r0, r2, #0
	adds r0, #0x42
	ldrh r0, [r0]
	subs r0, #1
	lsls r0, r0, #0x10
	movs r1, #0xdb
	lsls r1, r1, #0x11
	cmp r0, r1
	bhi _08089EF8
	adds r0, r2, #0
	adds r0, #0x33
	ldrb r1, [r0]
	movs r0, #6
	subs r0, r0, r1
	lsls r0, r0, #0x1b
	lsrs r4, r0, #0x18
	movs r7, #0
	cmp r7, r1
	bhs _08089ED0
_08089E4E:
	adds r0, r2, #0
	adds r0, #0x32
	ldrb r0, [r0]
	adds r1, r7, #0
	bl sub_8087C78
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	adds r0, r3, #0
	bl sub_8087CB0
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	mov r0, r8
	ldr r1, [r0, #0x14]
	adds r0, r1, #0
	adds r0, #0x34
	ldrb r0, [r0]
	cmp r7, r0
	bne _08089E9A
	adds r0, r1, #0
	adds r0, #0x42
	movs r1, #0x8a
	lsls r1, r1, #1
	ldrh r0, [r0]
	subs r1, r1, r0
	movs r0, #0x1a
	adds r2, r7, #0
	muls r2, r0, r2
	adds r2, r4, r2
	movs r0, #1
	str r0, [sp]
	movs r0, #3
	str r0, [sp, #4]
	mov r0, r8
	bl sub_8089ABC
	b _08089EBC
_08089E9A:
	adds r0, r1, #0
	adds r0, #0x42
	movs r1, #0x8a
	lsls r1, r1, #1
	ldrh r0, [r0]
	subs r1, r1, r0
	movs r0, #0x1a
	adds r2, r7, #0
	muls r2, r0, r2
	adds r2, r4, r2
	movs r0, #4
	str r0, [sp]
	movs r0, #8
	str r0, [sp, #4]
	mov r0, r8
	bl sub_8089ABC
_08089EBC:
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	mov r1, r8
	ldr r2, [r1, #0x14]
	adds r0, r2, #0
	adds r0, #0x33
	ldrb r0, [r0]
	cmp r7, r0
	blo _08089E4E
_08089ED0:
	mov r2, r8
	ldr r1, [r2, #0x14]
	adds r0, r1, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	cmp r0, #9
	bne _08089EF8
	adds r1, #0x34
	movs r0, #0x1a
	ldrb r1, [r1]
	adds r2, r1, #0
	muls r2, r0, r2
	adds r2, r4, r2
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	movs r0, #0
	movs r1, #0x24
	mov r3, r8
	bl sub_808A3C8
_08089EF8:
	mov r3, r8
	ldr r0, [r3, #0x14]
	adds r0, #0x2f
	ldrb r0, [r0]
	cmp r0, #0
	bne _08089F06
	b _0808A07C
_08089F06:
	mov r0, r8
	bl sub_8089684
	mov r0, r8
	bl sub_8089C70
	movs r7, #0
	ldr r0, _08089FEC @ =0x000001FF
	mov sl, r0
	movs r1, #0xf
	mov sb, r1
_08089F1C:
	mov r2, r8
	ldr r0, [r2, #0x14]
	adds r1, r0, #0
	adds r1, #0x2d
	movs r2, #0
	ldrb r1, [r1]
	cmp r1, #5
	bne _08089F38
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r0, r7
	bne _08089F38
	movs r2, #0x80
	lsls r2, r2, #1
_08089F38:
	mov r3, r8
	ldr r0, [r3, #0x14]
	adds r0, #0x2f
	movs r3, #0xf4
	ldrb r0, [r0]
	subs r1, r3, r0
	mov r0, sl
	ands r1, r0
	lsls r5, r7, #5
	adds r5, #0x20
	adds r5, r2, r5
	ldr r0, _08089FF0 @ =0x0868A55C
	lsls r6, r7, #2
	adds r0, r6, r0
	ldr r3, [r0]
	lsls r4, r7, #1
	adds r0, r4, #0
	adds r0, #0xa
	mov r2, sb
	ands r0, r2
	lsls r0, r0, #0xc
	str r0, [sp]
	movs r0, #4
	adds r2, r5, #0
	bl PutSpriteExt
	mov r3, r8
	ldr r0, [r3, #0x14]
	adds r0, #0x2f
	movs r2, #0xf4
	ldrb r0, [r0]
	subs r1, r2, r0
	mov r3, sl
	ands r1, r3
	adds r5, #8
	ldr r0, _08089FF4 @ =0x0868A550
	adds r6, r6, r0
	ldr r3, [r6]
	adds r4, #0xb
	mov r0, sb
	ands r4, r0
	lsls r4, r4, #0xc
	str r4, [sp]
	movs r0, #4
	adds r2, r5, #0
	bl PutSpriteExt
	adds r0, r7, #1
	lsls r0, r0, #0x18
	lsrs r7, r0, #0x18
	cmp r7, #2
	bls _08089F1C
	mov r1, r8
	ldr r2, [r1, #0x14]
	adds r3, r2, #0
	adds r3, #0x3f
	ldrb r0, [r3]
	cmp r0, #0xff
	beq _0808A07C
	adds r1, r2, #0
	adds r1, #0x40
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r1]
	cmp r1, r0
	beq _0808A01C
	ldr r0, [r2, #0x5c]
	cmp r0, #0
	beq _08089FCE
	bl EndAnimProc
	mov r2, r8
	ldr r1, [r2, #0x14]
	movs r0, #0
	str r0, [r1, #0x5c]
_08089FCE:
	mov r3, r8
	ldr r0, [r3, #0x14]
	adds r1, r0, #0
	adds r1, #0x2e
	ldrb r1, [r1]
	cmp r1, #1
	bne _08089FFC
	adds r0, #0x3f
	ldrb r0, [r0]
	lsls r2, r0, #5
	adds r2, #0x1e
	ldr r3, _08089FF8 @ =0x0868A158
	movs r0, #0
	b _0808A00A
	.align 2, 0
_08089FEC: .4byte 0x000001FF
_08089FF0: .4byte 0x0868A55C
_08089FF4: .4byte 0x0868A550
_08089FF8: .4byte 0x0868A158
_08089FFC:
	adds r0, #0x3f
	ldrb r0, [r0]
	lsls r2, r0, #5
	adds r2, #0x1e
	ldr r3, _0808A018 @ =0x0868A158
	movs r0, #0xc0
	lsls r0, r0, #7
_0808A00A:
	str r0, [sp]
	movs r0, #4
	movs r1, #0xc2
	bl PutSpriteExt
	b _0808A07C
	.align 2, 0
_0808A018: .4byte 0x0868A158
_0808A01C:
	adds r0, r2, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #1
	bne _0808A042
	ldr r0, [r2, #0x5c]
	adds r2, #0x2f
	movs r1, #0xd6
	lsls r1, r1, #1
	ldrb r2, [r2]
	subs r1, r1, r2
	ldrb r3, [r3]
	lsls r2, r3, #5
	adds r2, #0x34
	movs r3, #0xd0
	lsls r3, r3, #1
	bl SetAnimProcParams
	b _0808A07C
_0808A042:
	ldr r0, [r2, #0x5c]
	movs r1, #0xa0
	lsls r1, r1, #1
	ldrb r3, [r3]
	lsls r2, r3, #5
	adds r2, #0x34
	movs r3, #0xd0
	lsls r3, r3, #1
	bl SetAnimProcParams
	mov r1, r8
	ldr r0, [r1, #0x14]
	adds r2, r0, #0
	adds r2, #0x2f
	movs r1, #0xcf
	lsls r1, r1, #1
	ldrb r2, [r2]
	subs r1, r1, r2
	adds r0, #0x3f
	ldrb r0, [r0]
	lsls r2, r0, #5
	adds r2, #0x1e
	ldr r3, _0808A0EC @ =0x0868A158
	movs r0, #0xc0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
_0808A07C:
	mov r2, r8
	ldr r1, [r2, #0x14]
	adds r0, r1, #0
	adds r0, #0x2d
	ldrb r0, [r0]
	subs r0, #4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #1
	bhi _0808A134
	adds r0, r1, #0
	adds r0, #0x36
	ldrb r0, [r0]
	cmp r0, #0
	beq _0808A0F4
	ldr r3, _0808A0F0 @ =0x0868A116
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #0x28
	movs r2, #0x80
	bl PutSpriteExt
	mov r3, r8
	ldr r0, [r3, #0x14]
	adds r0, #0x36
	ldrb r1, [r0]
	subs r1, #1
	lsrs r0, r1, #0x1f
	adds r0, r1, r0
	asrs r0, r0, #1
	lsls r0, r0, #1
	subs r1, r1, r0
	lsls r0, r1, #2
	adds r0, r0, r1
	lsls r0, r0, #3
	adds r0, #0x34
	movs r1, #0x88
	bl sub_80415CC
	mov r1, r8
	ldr r0, [r1, #0x14]
	adds r0, #0x2b
	ldrb r0, [r0]
	lsls r2, r0, #0x1d
	movs r3, #0x80
	lsls r3, r3, #0x16
	adds r2, r2, r3
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r1, #0xc
	mov r3, r8
	bl sub_808A3C8
	b _0808A112
	.align 2, 0
_0808A0EC: .4byte 0x0868A158
_0808A0F0: .4byte 0x0868A116
_0808A0F4:
	adds r1, #0x2b
	ldrb r0, [r1]
	cmp r0, #0xff
	beq _0808A112
	ldrb r1, [r1]
	lsls r2, r1, #0x1d
	movs r0, #0x80
	lsls r0, r0, #0x16
	adds r2, r2, r0
	lsrs r2, r2, #0x18
	movs r0, #1
	movs r1, #0xc
	mov r3, r8
	bl sub_808A3C8
_0808A112:
	mov r1, r8
	ldr r0, [r1, #0x14]
	adds r1, r0, #0
	adds r1, #0x2c
	ldrb r0, [r1]
	cmp r0, #0xff
	beq _0808A134
	ldrb r1, [r1]
	lsls r1, r1, #0x1d
	movs r2, #0x80
	lsls r2, r2, #0x16
	adds r1, r1, r2
	lsrs r1, r1, #0x18
	movs r0, #1
	mov r2, r8
	bl sub_808A3E8
_0808A134:
	mov r0, r8
	bl sub_8089B3C
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808A14C
sub_808A14C: @ 0x0808A14C
	push {lr}
	adds r1, r0, #0
	ldr r0, _0808A15C @ =0x0868A28C
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
_0808A15C: .4byte 0x0868A28C

	thumb_func_start sub_808A160
sub_808A160: @ 0x0808A160
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x39
	movs r0, #0
	strb r0, [r1]
	movs r1, #0
	strh r0, [r2, #0x2a]
	adds r0, r2, #0
	adds r0, #0x35
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #2
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #2
	strb r1, [r0]
	subs r0, #9
	strb r1, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_808A194
sub_808A194: @ 0x0808A194
	push {r4, r5, lr}
	sub sp, #0x14
	adds r4, r0, #0
	ldr r1, _0808A204 @ =0x08336C74
	add r0, sp, #0xc
	movs r2, #8
	bl memcpy
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	movs r1, #0xf0
	lsls r1, r1, #7
	movs r2, #0xa0
	lsls r2, r2, #9
	movs r3, #0x98
	lsls r3, r3, #7
	str r3, [sp]
	movs r5, #0x2c
	ldrsh r0, [r4, r5]
	str r0, [sp, #4]
	movs r0, #0xc0
	lsls r0, r0, #1
	str r0, [sp, #8]
	movs r0, #2
	bl sub_8089894
	ldr r2, _0808A208 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x4a
	ldrh r3, [r1]
	lsls r0, r3, #1
	strh r0, [r1]
	adds r1, #4
	ldrh r5, [r1]
	lsls r0, r5, #1
	strh r0, [r1]
	ldr r1, _0808A20C @ =0x04000020
	ldr r0, [r2, #0x48]
	str r0, [r1]
	adds r1, #4
	ldr r0, [r2, #0x4c]
	str r0, [r1]
	adds r1, #4
	ldr r0, [r2, #0x50]
	str r0, [r1]
	adds r1, #4
	ldr r0, [r2, #0x54]
	str r0, [r1]
	add sp, #0x14
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808A204: .4byte 0x08336C74
_0808A208: .4byte gDispIo
_0808A20C: .4byte 0x04000020

	thumb_func_start sub_808A210
sub_808A210: @ 0x0808A210
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0808A224 @ =0x0868A2AC
	movs r1, #0
	bl SpawnProc
	str r4, [r0, #0x30]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0808A224: .4byte 0x0868A2AC

	thumb_func_start sub_808A228
sub_808A228: @ 0x0808A228
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x31
	movs r0, #0
	strb r0, [r1]
	movs r1, #0
	strh r0, [r2, #0x2a]
	adds r0, r2, #0
	adds r0, #0x2d
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #2
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #2
	strb r1, [r0]
	subs r0, #9
	strb r1, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_808A25C
sub_808A25C: @ 0x0808A25C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r7, r0, #0
	ldr r1, _0808A2D4 @ =0x08336C74
	add r0, sp, #4
	movs r2, #8
	bl memcpy
	ldrh r0, [r7, #0x2a]
	adds r0, #1
	strh r0, [r7, #0x2a]
	adds r2, r7, #0
	adds r2, #0x2c
	ldrb r0, [r2]
	cmp r0, #3
	bhi _0808A288
	adds r0, #1
	strb r0, [r2]
_0808A288:
	adds r0, r7, #0
	adds r0, #0x31
	ldrb r1, [r0]
	str r0, [sp, #0xc]
	cmp r1, #0
	beq _0808A370
	adds r1, r7, #0
	adds r1, #0x2f
	ldrb r0, [r1]
	mov r8, r0
	adds r0, r7, #0
	adds r0, #0x2d
	ldrb r5, [r0]
	mov sb, r1
	mov sl, r0
	adds r3, r7, #0
	adds r3, #0x30
	adds r4, r7, #0
	adds r4, #0x2e
	ldrb r2, [r2]
	cmp r2, #3
	bhi _0808A2C2
	ldrb r0, [r3]
	add r0, r8
	lsrs r0, r0, #1
	mov r8, r0
	ldrb r1, [r4]
	adds r0, r1, r5
	lsrs r5, r0, #1
_0808A2C2:
	adds r0, r7, #0
	adds r0, #0x35
	ldrb r1, [r0]
	adds r2, r0, #0
	cmp r1, #0
	bne _0808A2D8
	adds r0, r5, #0
	adds r0, #0x86
	b _0808A2DC
	.align 2, 0
_0808A2D4: .4byte 0x08336C74
_0808A2D8:
	adds r0, r5, #0
	adds r0, #0xb8
_0808A2DC:
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	mov r1, sb
	ldrb r0, [r1]
	strb r0, [r3]
	mov r1, sl
	ldrb r0, [r1]
	strb r0, [r4]
	ldrb r0, [r2]
	cmp r0, #0
	bne _0808A340
	ldrh r2, [r7, #0x2a]
	lsrs r0, r2, #3
	movs r1, #7
	mov sb, r1
	mov r2, sb
	ands r0, r2
	add r0, sp
	adds r0, #4
	ldrb r2, [r0]
	add r2, r8
	ldr r0, _0808A33C @ =0x0868A150
	mov sl, r0
	movs r4, #0x80
	lsls r4, r4, #5
	str r4, [sp]
	movs r0, #4
	adds r1, r5, #0
	mov r3, sl
	bl PutSpriteExt
	orrs r6, r4
	ldrh r1, [r7, #0x2a]
	lsrs r0, r1, #3
	mov r2, sb
	ands r0, r2
	add r0, sp
	adds r0, #4
	ldrb r2, [r0]
	add r2, r8
	str r4, [sp]
	movs r0, #4
	adds r1, r6, #0
	mov r3, sl
	bl PutSpriteExt
	b _0808A360
	.align 2, 0
_0808A33C: .4byte 0x0868A150
_0808A340:
	ldrh r1, [r7, #0x2a]
	lsrs r0, r1, #3
	movs r1, #7
	ands r0, r1
	add r0, sp
	adds r0, #4
	ldrb r2, [r0]
	add r2, r8
	ldr r3, _0808A36C @ =0x0868A150
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	bl PutSpriteExt
_0808A360:
	adds r1, r7, #0
	adds r1, #0x2c
	movs r0, #0
	strb r0, [r1]
	b _0808A37C
	.align 2, 0
_0808A36C: .4byte 0x0868A150
_0808A370:
	ldrb r2, [r2]
	cmp r2, #4
	bne _0808A37C
	movs r0, #0
	ldr r2, [sp, #0xc]
	strb r0, [r2]
_0808A37C:
	adds r4, r7, #0
	adds r4, #0x33
	ldrb r0, [r4]
	cmp r0, #0
	beq _0808A39C
	adds r0, r7, #0
	adds r0, #0x32
	ldrb r2, [r0]
	ldr r3, _0808A3C4 @ =0x0868A150
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [sp]
	movs r0, #4
	movs r1, #0xc
	bl PutSpriteExt
_0808A39C:
	adds r1, r7, #0
	adds r1, #0x34
	ldrb r0, [r1]
	cmp r0, #0
	beq _0808A3AA
	movs r0, #0
	strb r0, [r4]
_0808A3AA:
	movs r0, #0
	ldr r2, [sp, #0xc]
	strb r0, [r2]
	movs r0, #1
	strb r0, [r1]
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808A3C4: .4byte 0x0868A150

	thumb_func_start sub_808A3C8
sub_808A3C8: @ 0x0808A3C8
	push {r4, lr}
	ldr r3, [r3, #0x34]
	movs r4, #0x2f
	strb r2, [r4, r3]
	adds r2, r3, #0
	adds r2, #0x2d
	strb r1, [r2]
	adds r2, #4
	movs r1, #1
	strb r1, [r2]
	adds r1, r3, #0
	adds r1, #0x35
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_808A3E8
sub_808A3E8: @ 0x0808A3E8
	push {r4, lr}
	ldr r3, [r2, #0x34]
	movs r2, #0x32
	adds r2, r2, r3
	mov ip, r2
	movs r2, #0
	mov r4, ip
	strb r1, [r4]
	movs r1, #0x33
	adds r1, r1, r3
	mov ip, r1
	movs r1, #1
	mov r4, ip
	strb r1, [r4]
	adds r1, r3, #0
	adds r1, #0x35
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x34
	strb r2, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808A418
sub_808A418: @ 0x0808A418
	push {lr}
	adds r1, r0, #0
	ldr r0, _0808A428 @ =0x0868A2CC
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
_0808A428: .4byte 0x0868A2CC

	thumb_func_start sub_808A42C
sub_808A42C: @ 0x0808A42C
	push {lr}
	ldr r0, _0808A448 @ =0x02000444
	ldr r1, _0808A44C @ =0x0600C020
	movs r2, #1
	movs r3, #0
	bl InitTextFont
	ldr r0, _0808A450 @ =0x0200045C
	movs r1, #0xa
	bl InitText
	pop {r0}
	bx r0
	.align 2, 0
_0808A448: .4byte 0x02000444
_0808A44C: .4byte 0x0600C020
_0808A450: .4byte 0x0200045C

	thumb_func_start sub_808A454
sub_808A454: @ 0x0808A454
	push {r4, r5, lr}
	adds r5, r0, #0
	lsls r1, r1, #0x18
	cmp r1, #0
	beq _0808A49C
	ldr r0, _0808A490 @ =0x02000444
	bl SetTextFont
	ldr r4, _0808A494 @ =0x0200045C
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	adds r0, r4, #0
	adds r1, r5, #0
	bl Text_DrawString
	ldr r1, _0808A498 @ =0x02022756
	adds r0, r4, #0
	bl PutText
	b _0808A4A8
	.align 2, 0
_0808A490: .4byte 0x02000444
_0808A494: .4byte 0x0200045C
_0808A498: .4byte 0x02022756
_0808A49C:
	ldr r0, _0808A4B4 @ =0x02022756
	movs r1, #0xa
	movs r2, #1
	movs r3, #0
	bl TmFillRect_t
_0808A4A8:
	movs r0, #2
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808A4B4: .4byte 0x02022756

	thumb_func_start sub_808A4B8
sub_808A4B8: @ 0x0808A4B8
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	lsls r4, r1, #0x18
	lsrs r4, r4, #0x18
	ldr r5, _0808A4EC @ =0x0868A2EC
	adds r0, #0x2e
	ldrb r0, [r0]
	bl sub_8087CB0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x16
	adds r0, r0, r5
	ldr r0, [r0]
	lsls r4, r4, #0x18
	asrs r4, r4, #0x18
	adds r1, r4, #0
	bl sub_808A454
	cmp r4, #0
	bne _0808A4E6
	adds r0, r6, #0
	adds r0, #0x36
	strb r4, [r0]
_0808A4E6:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808A4EC: .4byte 0x0868A2EC

	thumb_func_start sub_808A4F0
sub_808A4F0: @ 0x0808A4F0
	push {r4, r5, lr}
	sub sp, #8
	movs r4, #0
	str r4, [sp]
	ldr r1, _0808A518 @ =0x06008000
	ldr r5, _0808A51C @ =0x01000200
	mov r0, sp
	adds r2, r5, #0
	bl CpuFastSet
	str r4, [sp, #4]
	add r0, sp, #4
	ldr r1, _0808A520 @ =0x0600C000
	adds r2, r5, #0
	bl CpuFastSet
	add sp, #8
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808A518: .4byte 0x06008000
_0808A51C: .4byte 0x01000200
_0808A520: .4byte 0x0600C000

	thumb_func_start sub_808A524
sub_808A524: @ 0x0808A524
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	movs r6, #0
	adds r3, r4, #0
	adds r3, #0x31
	strb r6, [r3]
	adds r2, r4, #0
	adds r2, #0x30
	strb r6, [r2]
	adds r5, r4, #0
	adds r5, #0x32
	strb r6, [r5]
	adds r0, #0x33
	strb r6, [r0]
	adds r1, r4, #0
	adds r1, #0x40
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r1]
	cmp r1, r0
	bne _0808A55C
	movs r0, #1
	ldrb r1, [r2]
	orrs r0, r1
	strb r0, [r2]
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
_0808A55C:
	movs r1, #0
	adds r2, r4, #0
	adds r2, #0x37
_0808A562:
	adds r0, r2, r1
	ldrb r0, [r0]
	cmp r0, #0xff
	beq _0808A56C
	adds r6, #1
_0808A56C:
	adds r1, #1
	cmp r1, #2
	ble _0808A562
	cmp r6, #0
	ble _0808A5AE
	adds r2, r4, #0
	adds r2, #0x30
	movs r0, #2
	movs r3, #0
	ldrb r7, [r2]
	orrs r0, r7
	strb r0, [r2]
	adds r1, r4, #0
	adds r1, #0x31
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	cmp r6, #2
	bgt _0808A5A0
	movs r0, #4
	ldrb r7, [r2]
	orrs r0, r7
	strb r0, [r2]
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_0808A5A0:
	movs r0, #8
	ldrb r3, [r2]
	orrs r0, r3
	strb r0, [r2]
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_0808A5AE:
	cmp r6, #2
	bgt _0808A5C6
	adds r1, r4, #0
	adds r1, #0x30
	movs r0, #0x10
	ldrb r7, [r1]
	orrs r0, r7
	strb r0, [r1]
	adds r1, #1
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_0808A5C6:
	bl sub_8084714
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808A5E2
	movs r0, #4
	ldrb r1, [r5]
	orrs r0, r1
	strb r0, [r5]
	adds r1, r4, #0
	adds r1, #0x33
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_0808A5E2:
	bl sub_8084718
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808A5FE
	movs r0, #2
	ldrb r2, [r5]
	orrs r0, r2
	strb r0, [r5]
	adds r1, r4, #0
	adds r1, #0x33
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_0808A5FE:
	bl sub_808474C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808A61A
	movs r0, #8
	ldrb r3, [r5]
	orrs r0, r3
	strb r0, [r5]
	adds r1, r4, #0
	adds r1, #0x33
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_0808A61A:
	bl sub_808475C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808A636
	movs r0, #1
	ldrb r7, [r5]
	orrs r0, r7
	strb r0, [r5]
	adds r1, r4, #0
	adds r1, #0x33
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_0808A636:
	ldrb r0, [r5]
	cmp r0, #0
	beq _0808A650
	adds r1, r4, #0
	adds r1, #0x30
	movs r0, #0x20
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	adds r1, #1
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_0808A650:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808A658
sub_808A658: @ 0x0808A658
	push {r4, r5, r6, lr}
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	lsls r2, r2, #0x18
	cmp r2, #0
	ble _0808A696
	movs r5, #0
	lsls r6, r1, #0x18
_0808A66C:
	adds r0, r4, #0
	bl sub_808525C
	lsls r0, r0, #0x18
	cmp r0, r6
	beq _0808A692
	cmp r4, #2
	bne _0808A680
	movs r4, #0
	b _0808A686
_0808A680:
	adds r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_0808A686:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _0808A66C
	b _0808A6BE
_0808A692:
	adds r0, r4, #0
	b _0808A6C0
_0808A696:
	movs r5, #0
	lsls r6, r1, #0x18
_0808A69A:
	adds r0, r4, #0
	bl sub_808525C
	lsls r0, r0, #0x18
	cmp r0, r6
	beq _0808A692
	cmp r4, #0
	bne _0808A6AE
	movs r4, #2
	b _0808A6B4
_0808A6AE:
	subs r0, r4, #1
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
_0808A6B4:
	adds r0, r5, #1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	cmp r5, #2
	bls _0808A69A
_0808A6BE:
	movs r0, #0xff
_0808A6C0:
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_808A6C8
sub_808A6C8: @ 0x0808A6C8
	push {r4, r5, r6, lr}
	adds r3, r0, #0
	lsls r1, r1, #0x18
	lsrs r4, r1, #0x18
	movs r2, #0
	adds r0, #0x2b
	ldrb r6, [r0]
	adds r0, #3
	ldrb r0, [r0]
	subs r0, #1
	cmp r0, #0xf
	bhi _0808A742
	lsls r0, r0, #2
	ldr r1, _0808A6EC @ =_0808A6F0
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0808A6EC: .4byte _0808A6F0
_0808A6F0: @ jump table
	.4byte _0808A794 @ case 0
	.4byte _0808A73C @ case 1
	.4byte _0808A742 @ case 2
	.4byte _0808A730 @ case 3
	.4byte _0808A742 @ case 4
	.4byte _0808A742 @ case 5
	.4byte _0808A742 @ case 6
	.4byte _0808A73C @ case 7
	.4byte _0808A742 @ case 8
	.4byte _0808A742 @ case 9
	.4byte _0808A742 @ case 10
	.4byte _0808A742 @ case 11
	.4byte _0808A742 @ case 12
	.4byte _0808A742 @ case 13
	.4byte _0808A742 @ case 14
	.4byte _0808A740 @ case 15
_0808A730:
	adds r0, r3, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	movs r2, #0
	cmp r0, #0xff
	bne _0808A742
_0808A73C:
	movs r2, #1
	b _0808A742
_0808A740:
	movs r2, #0
_0808A742:
	lsls r0, r4, #0x18
	adds r5, r0, #0
	cmp r5, #0
	ble _0808A75E
	adds r0, r3, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	adds r4, r0, #0
	cmp r1, #2
	bne _0808A75A
	movs r0, #0
	b _0808A770
_0808A75A:
	adds r0, r1, #1
	b _0808A770
_0808A75E:
	adds r0, r3, #0
	adds r0, #0x2b
	ldrb r1, [r0]
	adds r4, r0, #0
	cmp r1, #0
	bne _0808A76E
	movs r0, #2
	b _0808A770
_0808A76E:
	subs r0, r1, #1
_0808A770:
	strb r0, [r4]
	adds r0, r3, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0x40
	beq _0808A790
	ldrb r0, [r4]
	adds r1, r2, #0
	asrs r2, r5, #0x18
	bl sub_808A658
	strb r0, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r6, r0
	beq _0808A794
_0808A790:
	movs r0, #1
	b _0808A796
_0808A794:
	movs r0, #0
_0808A796:
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_808A79C
sub_808A79C: @ 0x0808A79C
	adds r1, r0, #0
	adds r1, #0x2e
	adds r0, #0x30
	ldrb r1, [r1]
	ldrb r0, [r0]
	ands r1, r0
	adds r0, r1, #0
	cmp r0, #0
	bne _0808A7B2
	movs r0, #0
	b _0808A7B4
_0808A7B2:
	movs r0, #1
_0808A7B4:
	bx lr
	.align 2, 0

	thumb_func_start sub_808A7B8
sub_808A7B8: @ 0x0808A7B8
	push {r4, lr}
	mov ip, r0
	mov r2, ip
	adds r2, #0x29
	adds r0, #0x2b
	ldrb r1, [r2]
	ldrb r0, [r0]
	adds r0, r1, r0
	strb r0, [r2]
	ldr r3, _0808A828 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r4, [r3, #1]
	ands r0, r4
	movs r1, #0x40
	orrs r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	mov r0, ip
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	ble _0808A82C
	ldrb r1, [r2]
	lsls r0, r1, #1
	adds r0, r0, r1
	adds r1, r3, #0
	adds r1, #0x2f
	strb r0, [r1]
	ldrb r4, [r2]
	lsls r0, r4, #1
	adds r1, #4
	strb r0, [r1]
	ldrb r1, [r2]
	lsls r0, r1, #1
	adds r0, r0, r1
	movs r4, #0x10
	rsbs r4, r4, #0
	adds r1, r4, #0
	subs r1, r1, r0
	adds r0, r3, #0
	adds r0, #0x2e
	strb r1, [r0]
	ldrb r2, [r2]
	lsls r1, r2, #1
	movs r2, #0x60
	rsbs r2, r2, #0
	adds r0, r2, #0
	subs r0, r0, r1
	adds r1, r3, #0
	adds r1, #0x32
	b _0808A860
	.align 2, 0
_0808A828: .4byte gDispIo
_0808A82C:
	ldrb r4, [r2]
	lsls r0, r4, #1
	adds r0, r0, r4
	movs r1, #0x78
	subs r1, r1, r0
	adds r0, r3, #0
	adds r0, #0x2f
	strb r1, [r0]
	ldrb r0, [r2]
	lsls r1, r0, #1
	movs r0, #0x50
	subs r0, r0, r1
	adds r1, r3, #0
	adds r1, #0x33
	strb r0, [r1]
	ldrb r1, [r2]
	lsls r0, r1, #1
	adds r0, r0, r1
	adds r0, #0x78
	adds r1, r3, #0
	adds r1, #0x2e
	strb r0, [r1]
	ldrb r2, [r2]
	lsls r0, r2, #1
	adds r0, #0x50
	adds r1, #4
_0808A860:
	strb r0, [r1]
	adds r2, r3, #0
	adds r2, #0x35
	movs r0, #1
	ldrb r4, [r2]
	orrs r0, r4
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2]
	adds r2, #1
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x29
	ldrb r0, [r0]
	cmp r0, #0x27
	bls _0808A8AC
	mov r0, ip
	bl Proc_Break
_0808A8AC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808A8B4
sub_808A8B4: @ 0x0808A8B4
	push {r4, r5, lr}
	adds r3, r0, #0
	adds r4, r1, #0
	adds r5, r2, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	lsls r5, r5, #0x18
	lsrs r5, r5, #0x18
	ldr r0, _0808A8E4 @ =0x0868A308
	adds r1, r3, #0
	bl SpawnProcLocking
	adds r2, r0, #0
	adds r2, #0x2a
	movs r1, #0
	strb r4, [r2]
	adds r2, #1
	strb r5, [r2]
	adds r0, #0x29
	strb r1, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808A8E4: .4byte 0x0868A308

	thumb_func_start sub_808A8E8
sub_808A8E8: @ 0x0808A8E8
	push {lr}
	ldr r0, _0808A8FC @ =gBg2Tm
	ldr r1, _0808A900 @ =0x06007000
	movs r2, #0x80
	lsls r2, r2, #4
	bl RegisterDataMove
	pop {r0}
	bx r0
	.align 2, 0
_0808A8FC: .4byte gBg2Tm
_0808A900: .4byte 0x06007000

	thumb_func_start sub_808A904
sub_808A904: @ 0x0808A904
	push {lr}
	adds r1, r0, #0
	ldr r0, _0808A914 @ =0x0868A328
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
_0808A914: .4byte 0x0868A328

	thumb_func_start sub_808A918
sub_808A918: @ 0x0808A918
	push {r4, r5, r6, lr}
	sub sp, #0x20
	adds r5, r1, #0
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	adds r6, r4, #0
	cmp r4, #2
	bhi _0808A9B4
	adds r0, r4, #0
	bl sub_808525C
	lsls r0, r0, #0x18
	asrs r2, r0, #0x18
	cmp r2, #0
	beq _0808A98C
	adds r0, r4, #0
	mov r1, sp
	bl sub_8085270
	mov r0, sp
	bl sub_8070E0C
	adds r1, r5, #0
	adds r1, #0x37
	adds r1, r1, r4
	strb r0, [r1]
	lsls r1, r4, #2
	adds r0, r5, #0
	adds r0, #0x44
	adds r0, r0, r1
	ldr r1, [sp]
	str r1, [r0]
	mov r1, sp
	movs r0, #0x20
	ldrb r1, [r1, #0x14]
	ands r0, r1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #0
	beq _0808A972
	adds r0, r5, #0
	adds r0, #0x3a
	adds r0, r0, r4
	movs r1, #1
	b _0808A978
_0808A972:
	adds r0, r5, #0
	adds r0, #0x3a
	adds r0, r0, r4
_0808A978:
	strb r1, [r0]
	ldr r0, _0808A988 @ =0x02000464
	adds r0, r6, r0
	mov r1, sp
	ldrb r1, [r1, #0x14]
	strb r1, [r0]
	b _0808A9EA
	.align 2, 0
_0808A988: .4byte 0x02000464
_0808A98C:
	adds r0, r5, #0
	adds r0, #0x37
	adds r0, r0, r6
	movs r1, #0xff
	strb r1, [r0]
	adds r0, r5, #0
	adds r0, #0x3a
	adds r0, r0, r6
	strb r2, [r0]
	lsls r1, r6, #2
	adds r0, r5, #0
	adds r0, #0x44
	adds r0, r0, r1
	str r2, [r0]
	ldr r0, _0808A9B0 @ =0x02000464
	adds r0, r6, r0
	strb r2, [r0]
	b _0808A9EA
	.align 2, 0
_0808A9B0: .4byte 0x02000464
_0808A9B4:
	adds r4, r5, #0
	adds r4, #0x40
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r4]
	cmp r1, r0
	bne _0808A9EA
	movs r0, #3
	bl sub_80859E0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808A9E6
	movs r0, #3
	mov r1, sp
	bl sub_8085A34
	mov r0, sp
	ldrb r0, [r0, #0xc]
	adds r1, r5, #0
	adds r1, #0x3f
	strb r0, [r1]
	ldr r0, [sp]
	str r0, [r5, #0x50]
	b _0808A9EA
_0808A9E6:
	movs r0, #0xf0
	strh r0, [r4]
_0808A9EA:
	add sp, #0x20
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808A9F4
sub_808A9F4: @ 0x0808A9F4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	movs r5, #0
	movs r7, #0x1b
	movs r6, #0x1a
_0808AA06:
	ldr r0, _0808AA50 @ =0x02000464
	adds r0, r5, r0
	movs r1, #0x40
	ldrb r0, [r0]
	ands r1, r0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	rsbs r1, r1, #0
	asrs r4, r1, #0x1f
	movs r0, #4
	ands r4, r0
	cmp r5, r8
	beq _0808AA24
	movs r0, #2
	orrs r4, r0
_0808AA24:
	movs r1, #1
	adds r0, r4, #0
	orrs r0, r1
	adds r1, r6, #0
	bl sub_8070CB4
	adds r0, r4, #0
	adds r1, r7, #0
	bl sub_8070CB4
	adds r7, #2
	adds r6, #2
	adds r5, #1
	cmp r5, #2
	ble _0808AA06
	bl EnablePalSync
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808AA50: .4byte 0x02000464

	thumb_func_start sub_808AA54
sub_808AA54: @ 0x0808AA54
	push {r4, lr}
	adds r4, r1, #0
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	movs r1, #0
	movs r2, #1
	cmp r2, r3
	bge _0808AA7A
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r4, [r0]
_0808AA6A:
	adds r0, r4, #0
	ands r0, r2
	cmp r0, #0
	beq _0808AA74
	adds r1, #1
_0808AA74:
	lsls r2, r2, #1
	cmp r2, r3
	blt _0808AA6A
_0808AA7A:
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_808AA84
sub_808AA84: @ 0x0808AA84
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x46
	ldrb r0, [r1]
	subs r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	cmp r0, #0
	bgt _0808AB34
	movs r0, #4
	strb r0, [r1]
	ldr r0, _0808AAD0 @ =0x0203DBE8
	bl SetTextFont
	movs r0, #1
	bl SetTextFontGlyphs
	movs r6, #0
	adds r0, r4, #0
	adds r0, #0x45
	adds r7, r0, #0
	ldrb r0, [r7]
	cmp r6, r0
	bge _0808AB2E
	adds r5, r4, #0
	adds r5, #0x44
_0808AABA:
	ldr r0, [r4, #0x40]
	ldrb r2, [r0]
	adds r3, r0, #0
	cmp r2, #3
	bgt _0808AAD4
	cmp r2, #1
	bge _0808AAE4
	cmp r2, #0
	beq _0808AADA
	b _0808AB06
	.align 2, 0
_0808AAD0: .4byte 0x0203DBE8
_0808AAD4:
	cmp r2, #4
	beq _0808AB00
	b _0808AB06
_0808AADA:
	movs r0, #0
	bl SetTextFont
	movs r0, #1
	b _0808AB36
_0808AAE4:
	adds r0, r3, #1
	str r0, [r4, #0x40]
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
	adds r1, r4, #0
	adds r1, #0x46
	movs r0, #8
	strb r0, [r1]
	ldrb r1, [r5]
	cmp r1, #5
	bne _0808AB26
	movs r0, #1
	b _0808AB36
_0808AB00:
	adds r0, r3, #1
	str r0, [r4, #0x40]
	b _0808AB26
_0808AB06:
	ldrb r1, [r5]
	lsls r0, r1, #3
	ldr r1, _0808AB3C @ =0x0203DC10
	adds r0, r0, r1
	adds r1, r3, #0
	bl Text_DrawCharacter
	str r0, [r4, #0x40]
	ldr r0, _0808AB40 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808AB26
	movs r0, #0x6e
	bl m4aSongNumStart
_0808AB26:
	adds r6, #1
	ldrb r0, [r7]
	cmp r6, r0
	blt _0808AABA
_0808AB2E:
	movs r0, #0
	bl SetTextFont
_0808AB34:
	movs r0, #0
_0808AB36:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0808AB3C: .4byte 0x0203DC10
_0808AB40: .4byte gPlaySt

	thumb_func_start sub_808AB44
sub_808AB44: @ 0x0808AB44
	ldr r0, _0808AB60 @ =0x04000006
	ldrh r0, [r0]
	adds r1, r0, #0
	cmp r0, #0x20
	bne _0808AB6C
	ldr r1, _0808AB64 @ =0x04000050
	movs r0, #0xcf
	strh r0, [r1]
	adds r1, #4
	ldr r0, _0808AB68 @ =0x0203DC6C
	ldrb r0, [r0]
	lsrs r0, r0, #1
	b _0808ABC8
	.align 2, 0
_0808AB60: .4byte 0x04000006
_0808AB64: .4byte 0x04000050
_0808AB68: .4byte 0x0203DC6C
_0808AB6C:
	cmp r0, #0x78
	bne _0808AB7C
	ldr r1, _0808AB78 @ =0x04000050
	movs r0, #0
	b _0808ABC8
	.align 2, 0
_0808AB78: .4byte 0x04000050
_0808AB7C:
	cmp r0, #0x84
	bne _0808ABB8
	ldr r1, _0808ABA8 @ =0x04000050
	movs r0, #0xcf
	strh r0, [r1]
	ldr r3, _0808ABAC @ =0x04000040
	ldr r0, _0808ABB0 @ =0x0203DC6D
	ldrb r2, [r0]
	movs r0, #0xa
	subs r0, r0, r2
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #0xa
	lsls r0, r2, #1
	adds r0, r0, r2
	lsls r0, r0, #2
	adds r0, #0x78
	adds r1, r1, r0
	strh r1, [r3]
	ldr r1, _0808ABB4 @ =0x0400004A
	movs r0, #0xf
	b _0808ABC8
	.align 2, 0
_0808ABA8: .4byte 0x04000050
_0808ABAC: .4byte 0x04000040
_0808ABB0: .4byte 0x0203DC6D
_0808ABB4: .4byte 0x0400004A
_0808ABB8:
	cmp r1, #0x98
	bne _0808ABCA
	ldr r1, _0808ABCC @ =0x04000050
	movs r0, #0
	strh r0, [r1]
	subs r1, #6
	ldr r2, _0808ABD0 @ =0x0000FFFF
	adds r0, r2, #0
_0808ABC8:
	strh r0, [r1]
_0808ABCA:
	bx lr
	.align 2, 0
_0808ABCC: .4byte 0x04000050
_0808ABD0: .4byte 0x0000FFFF

	thumb_func_start sub_808ABD4
sub_808ABD4: @ 0x0808ABD4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x1c
	adds r7, r0, #0
	movs r0, #0
	bl InitBgs
	bl ResetTextFont
	bl ResetText
	bl ApplySystemObjectsGraphics
	bl LoadUiFrameGraphics
	bl InitSystemTextFont
	ldr r0, _0808AD70 @ =gDispIo
	mov ip, r0
	movs r3, #1
	ldrb r2, [r0, #1]
	orrs r2, r3
	movs r4, #2
	orrs r2, r4
	movs r1, #4
	mov r8, r1
	mov r5, r8
	orrs r2, r5
	movs r6, #8
	mov sl, r6
	mov r0, sl
	orrs r2, r0
	movs r1, #0x10
	mov sb, r1
	mov r5, sb
	orrs r2, r5
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	mov r6, ip
	ldrb r6, [r6, #0xc]
	ands r0, r6
	mov r5, ip
	strb r0, [r5, #0xc]
	adds r0, r1, #0
	ldrb r6, [r5, #0x10]
	ands r0, r6
	orrs r0, r4
	strb r0, [r5, #0x10]
	ldrb r0, [r5, #0x14]
	ands r1, r0
	orrs r1, r3
	strb r1, [r5, #0x14]
	movs r0, #3
	ldrb r1, [r5, #0x18]
	orrs r0, r1
	strb r0, [r5, #0x18]
	movs r0, #0x20
	orrs r2, r0
	movs r0, #0x41
	rsbs r0, r0, #0
	ands r2, r0
	movs r0, #0x7f
	ands r2, r0
	strb r2, [r5, #1]
	mov r1, ip
	adds r1, #0x34
	ldrb r0, [r1]
	orrs r0, r3
	orrs r0, r4
	mov r2, r8
	orrs r0, r2
	mov r5, sl
	orrs r0, r5
	mov r6, sb
	orrs r0, r6
	strb r0, [r1]
	subs r1, #7
	movs r0, #0
	strb r0, [r1]
	adds r1, #4
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x36
	ldrb r1, [r0]
	orrs r3, r1
	orrs r3, r4
	orrs r3, r2
	orrs r3, r5
	orrs r3, r6
	strb r3, [r0]
	movs r0, #0
	bl SetBlankChr
	ldr r0, _0808AD74 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0808AD78 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0808AD7C @ =gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0808AD80 @ =0x0832BF28
	ldr r1, _0808AD84 @ =0x06011000
	bl Decompress
	ldr r0, _0808AD88 @ =0x0832C33C
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #0xf
	bl EnableBgSync
	ldr r4, _0808AD8C @ =0x0203DC3C
	movs r6, #5
_0808ACD8:
	adds r0, r4, #0
	movs r1, #0xa
	bl InitText
	adds r0, r4, #0
	bl ClearText
	adds r4, #8
	subs r6, #1
	cmp r6, #0
	bge _0808ACD8
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r1, _0808AD90 @ =0x0000FFF8
	movs r0, #2
	movs r2, #0
	bl SetBgOffset
	adds r4, r7, #0
	adds r4, #0x38
	adds r0, r4, #0
	bl sub_808677C
	adds r1, r7, #0
	adds r1, #0x2b
	movs r0, #0
	strb r0, [r1]
	movs r6, #0
	movs r0, #0
	ldrsb r0, [r4, r0]
	mov sb, r4
	mov r8, r1
	adds r5, r7, #0
	adds r5, #0x2a
	movs r2, #0x2c
	adds r2, r2, r7
	mov sl, r2
	adds r1, #2
	str r1, [sp, #8]
	adds r2, r7, #0
	adds r2, #0x2e
	str r2, [sp, #0xc]
	adds r1, #0x11
	str r1, [sp, #0x10]
	adds r2, #0x11
	str r2, [sp, #0x14]
	adds r1, #8
	str r1, [sp, #0x18]
	cmp r0, #0
	beq _0808AD94
	movs r0, #1
	mov r2, r8
	strb r0, [r2]
	mov r2, sb
	mov r1, r8
_0808AD56:
	adds r6, #1
	cmp r6, #5
	bgt _0808AD94
	adds r0, r2, r6
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0808AD94
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	b _0808AD56
	.align 2, 0
_0808AD70: .4byte gDispIo
_0808AD74: .4byte gBg0Tm
_0808AD78: .4byte gBg1Tm
_0808AD7C: .4byte gBg2Tm
_0808AD80: .4byte 0x0832BF28
_0808AD84: .4byte 0x06011000
_0808AD88: .4byte 0x0832C33C
_0808AD8C: .4byte 0x0203DC3C
_0808AD90: .4byte 0x0000FFF8
_0808AD94:
	mov r6, r8
	ldrb r6, [r6]
	lsls r3, r6, #1
	adds r3, #2
	movs r0, #1
	str r0, [sp]
	movs r0, #0
	movs r1, #5
	movs r2, #0xc
	bl sub_8041358
	ldr r4, _0808AED4 @ =gBg1Tm
	ldr r1, _0808AED8 @ =gBg2Tm
	adds r0, r4, #0
	movs r2, #0xc
	movs r3, #0x13
	bl TmCopyRect_t
	adds r0, r4, #0
	movs r1, #0xc
	movs r2, #0x13
	movs r3, #0
	bl TmFillRect_t
	movs r0, #1
	movs r1, #0x26
	movs r2, #0xa
	bl sub_804169C
	mov r1, sb
	movs r0, #0
	ldrsb r0, [r1, r0]
	ldr r1, _0808AEDC @ =0x06002000
	movs r2, #0xa
	bl sub_8087BD8
	ldr r2, _0808AEE0 @ =gMapSize
	movs r6, #0
	ldrsh r1, [r2, r6]
	lsls r1, r1, #1
	adds r0, r1, #0
	subs r0, #0x40
	str r0, [r7, #0x30]
	movs r0, #2
	ldrsh r2, [r2, r0]
	lsls r2, r2, #1
	adds r0, r2, #0
	subs r0, #0x40
	str r0, [r7, #0x34]
	subs r1, #0xac
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	subs r2, #0x5c
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #1
	bl SetBgOffset
	movs r0, #0
	strb r0, [r5]
	movs r6, #0
	mov r1, r8
	ldrb r1, [r1]
	cmp r6, r1
	bge _0808AE60
	movs r5, #0xc0
	lsls r5, r5, #1
_0808AE1A:
	lsls r4, r6, #3
	ldr r0, _0808AEE4 @ =0x0203DC3C
	adds r4, r4, r0
	mov r2, sb
	adds r2, r2, r6
	str r2, [sp, #4]
	ldrb r0, [r2]
	lsls r2, r0, #0x18
	asrs r2, r2, #0x1f
	movs r0, #4
	ands r2, r0
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetParams
	ldr r1, [sp, #4]
	movs r0, #0
	ldrsb r0, [r1, r0]
	bl sub_80867F0
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	ldr r1, _0808AEE8 @ =0x02021B0C
	adds r1, r5, r1
	adds r0, r4, #0
	bl PutText
	adds r5, #0x80
	adds r6, #1
	mov r2, r8
	ldrb r2, [r2]
	cmp r6, r2
	blt _0808AE1A
_0808AE60:
	movs r4, #0
	mov r5, sl
	strb r4, [r5]
	ldr r6, [sp, #8]
	strb r4, [r6]
	ldr r0, [sp, #0xc]
	strb r4, [r0]
	ldr r1, [sp, #0x10]
	strb r4, [r1]
	movs r0, #1
	ldr r2, [sp, #0x14]
	strb r0, [r2]
	movs r0, #4
	ldr r5, [sp, #0x18]
	strb r0, [r5]
	adds r0, r7, #0
	bl sub_808B7A0
	ldr r6, _0808AEEC @ =0x0831B0A8
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r6, #0
	bl Decompress
	ldr r0, _0808AEF0 @ =0x08320D98
	movs r1, #0xf0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	adds r0, r7, #0
	bl sub_808B928
	str r0, [r7, #0x4c]
	ldr r0, _0808AEF4 @ =0x0203DC6C
	strb r4, [r0]
	ldr r0, _0808AEF8 @ =0x0203DC6D
	strb r4, [r0]
	adds r0, r7, #0
	bl sub_808AEFC
	adds r0, r7, #0
	bl StartGreenText
	add sp, #0x1c
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808AED4: .4byte gBg1Tm
_0808AED8: .4byte gBg2Tm
_0808AEDC: .4byte 0x06002000
_0808AEE0: .4byte gMapSize
_0808AEE4: .4byte 0x0203DC3C
_0808AEE8: .4byte 0x02021B0C
_0808AEEC: .4byte 0x0831B0A8
_0808AEF0: .4byte 0x08320D98
_0808AEF4: .4byte 0x0203DC6C
_0808AEF8: .4byte 0x0203DC6D

	thumb_func_start sub_808AEFC
sub_808AEFC: @ 0x0808AEFC
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r5, _0808AF48 @ =0x0203DBE8
	adds r0, r5, #0
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	adds r5, #0x18
	adds r0, r5, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	adds r0, r5, #0
	movs r1, #2
	bl Text_SetColor
	adds r0, r4, #0
	adds r0, #0x2a
	adds r4, #0x38
	ldrb r0, [r0]
	adds r4, r0, r4
	movs r0, #0
	ldrsb r0, [r4, r0]
	bl sub_80867F0
	adds r1, r0, #0
	adds r0, r5, #0
	bl Text_DrawString
	movs r0, #0
	bl SetTextFont
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808AF48: .4byte 0x0203DBE8

	thumb_func_start sub_808AF4C
sub_808AF4C: @ 0x0808AF4C
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldr r4, _0808B010 @ =0x0203DBE8
	adds r0, r4, #0
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	adds r5, r4, #0
	adds r5, #0x18
	movs r4, #6
_0808AF64:
	adds r0, r5, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _0808AF64
	ldr r4, _0808B014 @ =0x0203DC08
	ldr r1, _0808B018 @ =0x08336CD0
	adds r0, r4, #0
	bl Text_DrawString
	adds r0, r4, #0
	movs r1, #0x80
	bl Text_SetCursor
	ldr r1, _0808B01C @ =0x08336CF0
	adds r0, r4, #0
	bl Text_DrawString
	adds r0, r4, #0
	movs r1, #0xa0
	bl Text_SetCursor
	ldr r1, _0808B020 @ =0x08336CF8
	adds r0, r4, #0
	bl Text_DrawString
	subs r4, #8
	adds r0, r4, #0
	movs r1, #2
	bl Text_SetColor
	adds r6, r7, #0
	adds r6, #0x2a
	adds r5, r7, #0
	adds r5, #0x38
	ldrb r1, [r6]
	adds r0, r1, r5
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_80867F0
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	adds r0, r4, #0
	movs r1, #0x58
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	ldr r1, _0808B024 @ =0x08336D00
	adds r0, r4, #0
	bl Text_DrawString
	adds r0, r4, #0
	movs r1, #0x70
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #2
	bl Text_SetColor
	ldrb r6, [r6]
	adds r5, r6, r5
	movs r0, #0
	ldrsb r0, [r5, r0]
	bl sub_80867FC
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	movs r0, #0
	bl SetTextFont
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808B010: .4byte 0x0203DBE8
_0808B014: .4byte 0x0203DC08
_0808B018: .4byte 0x08336CD0
_0808B01C: .4byte 0x08336CF0
_0808B020: .4byte 0x08336CF8
_0808B024: .4byte 0x08336D00

	thumb_func_start sub_808B028
sub_808B028: @ 0x0808B028
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r4, r0, #0
	adds r5, r4, #0
	adds r5, #0x2a
	ldrb r7, [r5]
	ldr r0, _0808B0C8 @ =gKeySt
	ldr r1, [r0]
	ldrh r2, [r1, #8]
	movs r6, #1
	movs r0, #1
	ands r0, r2
	cmp r0, #0
	beq _0808B0D4
	movs r0, #1
	bl SetTextFontGlyphs
	adds r0, r4, #0
	bl sub_808AF4C
	adds r0, r4, #0
	adds r0, #0x38
	ldrb r5, [r5]
	adds r0, r5, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl sub_8086910
	str r0, [r4, #0x40]
	add r2, sp, #4
	mov r1, sp
	bl sub_8071C00
	ldr r1, [sp]
	movs r0, #0xf0
	subs r0, r0, r1
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	adds r1, r4, #0
	adds r1, #0x47
	movs r5, #0
	strb r0, [r1]
	ldr r1, [sp, #4]
	movs r0, #0x58
	subs r0, r0, r1
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	adds r1, r4, #0
	adds r1, #0x48
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x44
	strb r5, [r0]
	adds r0, #1
	strb r6, [r0]
	ldr r0, _0808B0CC @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808B0AC
	movs r0, #0x6a
	bl m4aSongNumStart
_0808B0AC:
	adds r0, r4, #0
	adds r0, #0x3e
	strb r6, [r0]
	adds r0, #1
	strb r5, [r0]
	ldr r0, _0808B0D0 @ =sub_808AB44
	bl SetOnHBlankA
	adds r0, r4, #0
	movs r1, #1
	bl Proc_Goto
	b _0808B156
	.align 2, 0
_0808B0C8: .4byte gKeySt
_0808B0CC: .4byte gPlaySt
_0808B0D0: .4byte sub_808AB44
_0808B0D4:
	ldrh r1, [r1, #6]
	movs r6, #0x40
	adds r0, r6, #0
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	cmp r3, #0
	beq _0808B108
	cmp r7, #0
	beq _0808B0EC
	subs r0, r7, #1
	b _0808B0FC
_0808B0EC:
	adds r0, r6, #0
	ands r0, r2
	cmp r0, #0
	beq _0808B0FE
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	subs r0, #1
_0808B0FC:
	strb r0, [r5]
_0808B0FE:
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #0xff
	strb r0, [r1]
	b _0808B156
_0808B108:
	movs r6, #0x80
	adds r0, r6, #0
	ands r0, r1
	cmp r0, #0
	beq _0808B136
	adds r1, r7, #1
	adds r0, r4, #0
	adds r0, #0x2b
	ldrb r0, [r0]
	cmp r1, r0
	bge _0808B122
	strb r1, [r5]
	b _0808B12C
_0808B122:
	adds r0, r6, #0
	ands r0, r2
	cmp r0, #0
	beq _0808B12C
	strb r3, [r5]
_0808B12C:
	adds r1, r4, #0
	adds r1, #0x2e
	movs r0, #1
	strb r0, [r1]
	b _0808B156
_0808B136:
	movs r0, #2
	ands r0, r2
	cmp r0, #0
	beq _0808B156
	ldr r0, _0808B190 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808B14E
	movs r0, #0x6b
	bl m4aSongNumStart
_0808B14E:
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
_0808B156:
	adds r5, r4, #0
	adds r5, #0x2a
	ldrb r0, [r5]
	cmp r0, r7
	beq _0808B186
	lsls r1, r7, #1
	adds r1, #0x26
	movs r0, #1
	movs r2, #0xa
	bl sub_8041728
	ldrb r5, [r5]
	lsls r1, r5, #1
	adds r1, #0x26
	movs r0, #1
	movs r2, #0xa
	bl sub_804169C
	movs r0, #4
	bl EnableBgSync
	adds r0, r4, #0
	bl Proc_Break
_0808B186:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808B190: .4byte gPlaySt

	thumb_func_start sub_808B194
sub_808B194: @ 0x0808B194
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	adds r0, #0x2c
	ldrb r0, [r0]
	cmp r0, #0
	bne _0808B1B4
	ldr r0, _0808B2A4 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808B1B4
	movs r0, #0x66
	bl m4aSongNumStart
_0808B1B4:
	adds r5, r4, #0
	adds r5, #0x2c
	ldrb r0, [r5]
	adds r0, #2
	movs r1, #0
	mov r8, r1
	strb r0, [r5]
	adds r7, r4, #0
	adds r7, #0x2d
	ldrb r0, [r7]
	adds r0, #1
	strb r0, [r7]
	ldr r0, [r4, #0x30]
	subs r0, #0x6c
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov ip, r0
	ldr r0, [r4, #0x34]
	adds r6, r0, #0
	subs r6, #0x1c
	adds r0, r4, #0
	adds r0, #0x2e
	movs r3, #0
	ldrsb r3, [r0, r3]
	ldrb r0, [r7]
	lsls r2, r0, #7
	lsls r1, r0, #3
	muls r0, r1, r0
	subs r0, r2, r0
	cmp r0, #0
	bge _0808B1F4
	adds r0, #7
_0808B1F4:
	asrs r0, r0, #3
	adds r2, r3, #0
	muls r2, r0, r2
	adds r2, r6, r2
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #1
	mov r1, ip
	bl SetBgOffset
	ldr r3, _0808B2A8 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	ldrb r2, [r5]
	movs r0, #0x10
	subs r0, r0, r2
	adds r1, r3, #0
	adds r1, #0x44
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	mov r5, r8
	strb r5, [r0]
	ldr r0, _0808B2AC @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	ldr r1, _0808B2B0 @ =0x0000E0FF
	ands r0, r1
	movs r5, #0x80
	lsls r5, r5, #4
	adds r1, r5, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	cmp r2, #0x10
	bne _0808B298
	adds r0, r4, #0
	bl Proc_Break
	adds r1, r4, #0
	adds r1, #0x2a
	adds r0, r4, #0
	adds r0, #0x38
	ldrb r1, [r1]
	adds r0, r1, r0
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	ldr r1, _0808B2B4 @ =0x06002000
	movs r2, #0xa
	bl sub_8087BD8
	ldr r1, _0808B2B8 @ =gMapSize
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #1
	subs r0, #0x40
	str r0, [r4, #0x30]
	movs r5, #2
	ldrsh r0, [r1, r5]
	lsls r0, r0, #1
	subs r0, #0x40
	str r0, [r4, #0x34]
	adds r0, r4, #0
	bl sub_808AEFC
	movs r0, #2
	bl EnableBgSync
	mov r0, r8
	strb r0, [r7]
_0808B298:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808B2A4: .4byte gPlaySt
_0808B2A8: .4byte gDispIo
_0808B2AC: .4byte 0x0000FFE0
_0808B2B0: .4byte 0x0000E0FF
_0808B2B4: .4byte 0x06002000
_0808B2B8: .4byte gMapSize

	thumb_func_start sub_808B2BC
sub_808B2BC: @ 0x0808B2BC
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x2c
	ldrb r0, [r4]
	subs r0, #2
	strb r0, [r4]
	adds r7, r5, #0
	adds r7, #0x2d
	ldrb r0, [r7]
	adds r0, #1
	strb r0, [r7]
	ldr r0, [r5, #0x30]
	subs r0, #0x6c
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov ip, r0
	ldr r1, [r5, #0x34]
	adds r0, r5, #0
	adds r0, #0x2e
	movs r3, #0
	ldrsb r3, [r0, r3]
	lsls r0, r3, #6
	rsbs r0, r0, #0
	subs r0, #0x1c
	adds r6, r1, r0
	ldrb r0, [r7]
	lsls r2, r0, #7
	lsls r1, r0, #3
	muls r0, r1, r0
	subs r0, r2, r0
	cmp r0, #0
	bge _0808B300
	adds r0, #7
_0808B300:
	asrs r0, r0, #3
	adds r2, r3, #0
	muls r2, r0, r2
	adds r2, r6, r2
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #1
	mov r1, ip
	bl SetBgOffset
	ldr r3, _0808B36C @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	ldrb r2, [r4]
	movs r0, #0x10
	subs r0, r0, r2
	adds r1, r3, #0
	adds r1, #0x44
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r1, #2
	movs r0, #0
	strb r0, [r1]
	ldr r0, _0808B370 @ =0x0000FFE0
	ldrh r4, [r3, #0x3c]
	ands r0, r4
	movs r1, #2
	orrs r0, r1
	ldr r1, _0808B374 @ =0x0000E0FF
	ands r0, r1
	movs r4, #0x80
	lsls r4, r4, #4
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	lsls r2, r2, #0x18
	lsrs r4, r2, #0x18
	cmp r4, #0
	bne _0808B366
	adds r0, r5, #0
	bl Proc_Break
	strb r4, [r7]
_0808B366:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808B36C: .4byte gDispIo
_0808B370: .4byte 0x0000FFE0
_0808B374: .4byte 0x0000E0FF

	thumb_func_start sub_808B378
sub_808B378: @ 0x0808B378
	push {lr}
	adds r3, r0, #0
	ldr r2, _0808B3B0 @ =0x0203DC6C
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	ldr r0, _0808B3B4 @ =gKeySt
	ldr r1, [r0]
	movs r0, #3
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0808B39E
	adds r1, r3, #0
	adds r1, #0x45
	movs r0, #0xff
	strb r0, [r1]
	movs r0, #0x14
	strb r0, [r2]
_0808B39E:
	ldrb r2, [r2]
	cmp r2, #0x13
	bls _0808B3AA
	adds r0, r3, #0
	bl Proc_Break
_0808B3AA:
	pop {r0}
	bx r0
	.align 2, 0
_0808B3B0: .4byte 0x0203DC6C
_0808B3B4: .4byte gKeySt

	thumb_func_start sub_808B3B8
sub_808B3B8: @ 0x0808B3B8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0808B404 @ =gKeySt
	ldr r1, [r0]
	movs r0, #3
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0808B3D2
	adds r1, r4, #0
	adds r1, #0x45
	movs r0, #0xff
	strb r0, [r1]
_0808B3D2:
	adds r0, r4, #0
	bl sub_808AA84
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808B3FC
	ldr r0, _0808B408 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808B3EE
	movs r0, #0x6a
	bl m4aSongNumStart
_0808B3EE:
	adds r1, r4, #0
	adds r1, #0x3e
	movs r0, #2
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0808B3FC:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808B404: .4byte gKeySt
_0808B408: .4byte gPlaySt

	thumb_func_start sub_808B40C
sub_808B40C: @ 0x0808B40C
	push {lr}
	adds r2, r0, #0
	ldr r1, _0808B42C @ =0x0203DC6D
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xa
	bne _0808B426
	adds r0, r2, #0
	bl Proc_Break
_0808B426:
	pop {r0}
	bx r0
	.align 2, 0
_0808B42C: .4byte 0x0203DC6D

	thumb_func_start sub_808B430
sub_808B430: @ 0x0808B430
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	adds r7, r4, #0
	adds r7, #0x3f
	ldrb r2, [r7]
	ldr r0, _0808B464 @ =gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #8]
	movs r6, #0x30
	ands r6, r1
	cmp r6, #0
	beq _0808B46C
	adds r0, r2, #1
	movs r1, #1
	ands r0, r1
	strb r0, [r7]
	ldr r0, _0808B468 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808B520
	movs r0, #0x67
	bl m4aSongNumStart
	b _0808B520
	.align 2, 0
_0808B464: .4byte gKeySt
_0808B468: .4byte gPlaySt
_0808B46C:
	movs r0, #2
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r5, r0, #0x10
	cmp r5, #0
	beq _0808B4B4
	ldr r0, _0808B4A8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808B488
	movs r0, #0x6b
	bl m4aSongNumStart
_0808B488:
	adds r0, r4, #0
	adds r0, #0x3e
	strb r6, [r0]
	movs r0, #0
	bl SetOnHBlankA
	ldr r0, _0808B4AC @ =0x0203DC6C
	strb r6, [r0]
	ldr r0, _0808B4B0 @ =0x0203DC6D
	strb r6, [r0]
	adds r0, r4, #0
	bl Proc_Break
	movs r0, #1
	strb r0, [r7]
	b _0808B520
	.align 2, 0
_0808B4A8: .4byte gPlaySt
_0808B4AC: .4byte 0x0203DC6C
_0808B4B0: .4byte 0x0203DC6D
_0808B4B4:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0808B520
	cmp r2, #0
	beq _0808B4F8
	ldr r0, _0808B4EC @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808B4D0
	movs r0, #0x6b
	bl m4aSongNumStart
_0808B4D0:
	adds r0, r4, #0
	adds r0, #0x3e
	strb r5, [r0]
	movs r0, #0
	bl SetOnHBlankA
	ldr r0, _0808B4F0 @ =0x0203DC6C
	strb r5, [r0]
	ldr r0, _0808B4F4 @ =0x0203DC6D
	strb r5, [r0]
	adds r0, r4, #0
	bl Proc_Break
	b _0808B520
	.align 2, 0
_0808B4EC: .4byte gPlaySt
_0808B4F0: .4byte 0x0203DC6C
_0808B4F4: .4byte 0x0203DC6D
_0808B4F8:
	ldr r1, _0808B528 @ =gPlaySt
	adds r2, r4, #0
	adds r2, #0x2a
	adds r0, r4, #0
	adds r0, #0x38
	ldrb r2, [r2]
	adds r0, r2, r0
	ldrb r0, [r0]
	strb r0, [r1, #0xe]
	ldrb r1, [r1, #0x1d]
	lsls r0, r1, #0x1e
	cmp r0, #0
	blt _0808B518
	movs r0, #0x6a
	bl m4aSongNumStart
_0808B518:
	adds r0, r4, #0
	movs r1, #3
	bl Proc_Goto
_0808B520:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808B528: .4byte gPlaySt

	thumb_func_start sub_808B52C
sub_808B52C: @ 0x0808B52C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x4c]
	bl Proc_End
	adds r0, r4, #0
	adds r0, #0x3f
	ldrb r0, [r0]
	cmp r0, #0
	bne _0808B560
	movs r0, #0x80
	movs r1, #0
	movs r2, #0x10
	movs r3, #0
	bl StartBgmVolumeChange
	movs r0, #6
	bl SetNextGameAction
	ldr r0, [r4, #0x14]
	bl Proc_End
	movs r0, #0
	bl SetOnHBlankA
	b _0808B564
_0808B560:
	bl ForceEnableSounds
_0808B564:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808B56C
sub_808B56C: @ 0x0808B56C
	push {lr}
	bl EndGreenText
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808B578
sub_808B578: @ 0x0808B578
	push {r4, lr}
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _0808B594 @ =0x0868A58C
	bl SpawnProcLocking
	adds r1, r0, #0
	adds r0, #0x29
	strb r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808B594: .4byte 0x0868A58C

	thumb_func_start sub_808B598
sub_808B598: @ 0x0808B598
	push {r4, r5, r6, r7, lr}
	ldr r7, _0808B60C @ =0x06012000
	ldr r5, _0808B610 @ =0x0203DBE8
	adds r0, r5, #0
	adds r1, r7, #0
	movs r2, #5
	bl InitSpriteTextFont
	ldr r0, _0808B614 @ =Pal_SystemText
	movs r4, #0xa8
	lsls r4, r4, #2
	adds r1, r4, #0
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, _0808B618 @ =gPal
	adds r0, r0, r4
	movs r1, #0
	strh r1, [r0]
	adds r0, r5, #0
	bl SetTextFont
	movs r5, #0
_0808B5C6:
	lsls r4, r5, #3
	ldr r6, _0808B61C @ =0x0203DC00
	adds r4, r4, r6
	adds r0, r4, #0
	bl InitSpriteText
	adds r0, r4, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	adds r5, #1
	cmp r5, #6
	ble _0808B5C6
	movs r0, #0
	bl SetTextFont
	ldr r0, _0808B620 @ =0x0001FFFF
	ands r0, r7
	lsrs r0, r0, #5
	ldr r2, _0808B624 @ =0x000003FF
	adds r1, r2, #0
	ands r0, r1
	movs r2, #0xa0
	lsls r2, r2, #7
	adds r1, r2, #0
	adds r0, r0, r1
	strh r0, [r6, #0x38]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808B60C: .4byte 0x06012000
_0808B610: .4byte 0x0203DBE8
_0808B614: .4byte Pal_SystemText
_0808B618: .4byte gPal
_0808B61C: .4byte 0x0203DC00
_0808B620: .4byte 0x0001FFFF
_0808B624: .4byte 0x000003FF

	thumb_func_start sub_808B628
sub_808B628: @ 0x0808B628
	push {lr}
	ldr r1, [r0, #0x14]
	str r1, [r0, #0x2c]
	adds r1, #0x2a
	ldrb r2, [r1]
	adds r1, r0, #0
	adds r1, #0x30
	strb r2, [r1]
	bl sub_808B598
	pop {r0}
	bx r0

	thumb_func_start sub_808B640
sub_808B640: @ 0x0808B640
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov sb, r0
	movs r4, #0
	movs r5, #0x80
	lsls r5, r5, #7
_0808B654:
	lsls r1, r4, #5
	str r5, [sp]
	movs r0, #0xb
	movs r2, #0
	ldr r3, _0808B680 @ =0x0868A568
	bl PutSprite
	adds r4, #1
	cmp r4, #7
	ble _0808B654
	mov r1, sb
	ldr r0, [r1, #0x2c]
	adds r1, r0, #0
	adds r1, #0x3e
	ldrb r1, [r1]
	cmp r1, #1
	beq _0808B712
	cmp r1, #1
	bgt _0808B684
	cmp r1, #0
	beq _0808B68A
	b _0808B786
	.align 2, 0
_0808B680: .4byte 0x0868A568
_0808B684:
	cmp r1, #2
	beq _0808B6E0
	b _0808B786
_0808B68A:
	ldr r3, _0808B6D4 @ =0x0868A570
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xb
	movs r1, #4
	movs r2, #4
	bl PutSprite
	mov r3, sb
	ldr r0, [r3, #0x2c]
	adds r0, #0x2a
	ldrb r0, [r0]
	lsls r1, r0, #4
	adds r1, #0x30
	movs r0, #0xe
	bl sub_80415CC
	movs r4, #0
	ldr r6, _0808B6D8 @ =0x0203DC38
	movs r5, #0x98
_0808B6B4:
	lsls r0, r4, #2
	ldrh r7, [r6]
	adds r0, r7, r0
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #4
	ldr r3, _0808B6DC @ =Sprite_32x16
	bl PutSpriteExt
	adds r5, #0x20
	adds r4, #1
	cmp r4, #6
	ble _0808B6B4
	b _0808B786
	.align 2, 0
_0808B6D4: .4byte 0x0868A570
_0808B6D8: .4byte 0x0203DC38
_0808B6DC: .4byte Sprite_32x16
_0808B6E0:
	adds r0, #0x3f
	ldrb r0, [r0]
	lsls r0, r0, #5
	adds r0, #0x94
	movs r1, #0x86
	bl sub_80415CC
	movs r4, #0
	ldr r6, _0808B798 @ =0x0203DC38
	movs r5, #0x18
_0808B6F4:
	lsls r0, r4, #2
	ldrh r1, [r6]
	adds r0, r1, r0
	adds r0, #0x40
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #0x86
	ldr r3, _0808B79C @ =Sprite_32x16
	bl PutSprite
	adds r5, #0x20
	adds r4, #1
	cmp r4, #5
	ble _0808B6F4
_0808B712:
	movs r4, #0
	ldr r6, _0808B798 @ =0x0203DC38
	movs r5, #0x10
_0808B718:
	lsls r0, r4, #2
	ldrh r3, [r6]
	adds r0, r3, r0
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	movs r2, #4
	ldr r3, _0808B79C @ =Sprite_32x16
	bl PutSpriteExt
	adds r5, #0x20
	adds r4, #1
	cmp r4, #6
	ble _0808B718
	movs r0, #0
	ldr r7, _0808B798 @ =0x0203DC38
	mov r8, r7
_0808B73A:
	movs r4, #0
	lsls r6, r0, #4
	adds r5, r0, #2
	adds r0, #1
	mov sl, r0
_0808B744:
	mov r1, sb
	ldr r0, [r1, #0x2c]
	adds r2, r0, #0
	adds r2, #0x47
	lsls r1, r4, #5
	ldrb r2, [r2]
	adds r1, r2, r1
	adds r0, #0x48
	ldrb r0, [r0]
	adds r2, r0, r6
	movs r3, #0x84
	lsls r3, r3, #3
	adds r2, r2, r3
	lsls r0, r4, #2
	mov r7, r8
	ldrh r7, [r7]
	adds r0, r7, r0
	lsls r3, r5, #6
	adds r0, r0, r3
	movs r3, #0x80
	lsls r3, r3, #5
	adds r0, r0, r3
	str r0, [sp]
	movs r0, #4
	ldr r3, _0808B79C @ =Sprite_32x16
	bl PutSprite
	adds r4, #1
	cmp r4, #5
	ble _0808B744
	mov r0, sl
	cmp r0, #4
	ble _0808B73A
_0808B786:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808B798: .4byte 0x0203DC38
_0808B79C: .4byte Sprite_32x16

	thumb_func_start sub_808B7A0
sub_808B7A0: @ 0x0808B7A0
	push {lr}
	adds r1, r0, #0
	ldr r0, _0808B7B0 @ =0x0868A634
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_0808B7B0: .4byte 0x0868A634

	thumb_func_start sub_808B7B4
sub_808B7B4: @ 0x0808B7B4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov r8, r0
	ldr r4, _0808B848 @ =gBg3Tm
	adds r0, r4, #0
	movs r1, #0
	bl TmFill
	movs r0, #0
	movs r1, #0x2c
	add r1, r8
	mov sb, r1
	movs r3, #0x1d
	mov ip, r3
	movs r1, #0x27
	mov sl, r1
	adds r7, r4, #0
	movs r3, #0xf4
	lsls r3, r3, #8
	adds r6, r3, #0
_0808B7E2:
	movs r2, #0
	adds r5, r0, #1
	lsls r4, r0, #6
	mov r3, sl
	subs r1, r3, r0
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #2
	ldr r1, _0808B84C @ =0x08320436
	adds r3, r0, r1
_0808B7F6:
	mov r0, ip
	subs r1, r0, r2
	lsls r1, r1, #1
	adds r1, r4, r1
	adds r1, r1, r7
	lsls r0, r2, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	adds r0, r6, r0
	strh r0, [r1]
	adds r0, r2, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0x1d
	bls _0808B7F6
	lsls r0, r5, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x1f
	bls _0808B7E2
	movs r0, #8
	bl EnableBgSync
	movs r4, #0
	mov r1, sb
	strb r4, [r1]
	mov r3, r8
	strh r4, [r3, #0x2a]
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _0808B850 @ =0x0400001E
	strh r4, [r0]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808B848: .4byte gBg3Tm
_0808B84C: .4byte 0x08320436
_0808B850: .4byte 0x0400001E

	thumb_func_start sub_808B854
sub_808B854: @ 0x0808B854
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r6, r5, #0
	adds r6, #0x2c
	ldrb r0, [r6]
	cmp r0, #3
	bne _0808B896
	ldrh r0, [r5, #0x2a]
	adds r0, #1
	strh r0, [r5, #0x2a]
	lsls r0, r0, #0x10
	movs r1, #0xa0
	lsls r1, r1, #0x13
	cmp r0, r1
	bne _0808B87A
	movs r0, #0
	strh r0, [r5, #0x2a]
_0808B87A:
	movs r4, #0xff
	adds r2, r4, #0
	ldrh r1, [r5, #0x2a]
	ands r2, r1
	movs r0, #3
	movs r1, #0
	bl SetBgOffset
	ldr r0, _0808B918 @ =0x0400001E
	ldrh r1, [r5, #0x2a]
	ands r4, r1
	strh r4, [r0]
	movs r0, #0
	strb r0, [r6]
_0808B896:
	adds r1, r5, #0
	adds r1, #0x2c
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldrh r1, [r5, #0x2a]
	movs r0, #7
	ands r0, r1
	cmp r0, #0
	bne _0808B90E
	ldr r5, _0808B91C @ =0x08320436
	lsrs r0, r1, #3
	subs r4, r0, #1
	movs r1, #0x1f
	ands r4, r1
	adds r0, #0x1e
	movs r1, #0x28
	bl __modsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r2, #0
	ldr r1, _0808B920 @ =gBg3Tm
	mov r8, r1
	movs r1, #0x1d
	mov ip, r1
	lsls r4, r4, #6
	movs r1, #0x27
	subs r1, r1, r0
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #2
	adds r3, r0, r5
	mov r7, r8
	movs r0, #0xf4
	lsls r0, r0, #8
	adds r6, r0, #0
	adds r5, r4, #0
_0808B8E2:
	mov r0, ip
	subs r1, r0, r2
	lsls r1, r1, #1
	adds r1, r4, r1
	adds r1, r1, r7
	lsls r0, r2, #1
	adds r0, r0, r3
	ldrh r0, [r0]
	adds r0, r6, r0
	strh r0, [r1]
	adds r0, r2, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r2, #0x1d
	bls _0808B8E2
	mov r1, r8
	adds r0, r5, r1
	ldr r1, _0808B924 @ =0x06007800
	adds r1, r5, r1
	movs r2, #0xf
	bl CpuFastSet
_0808B90E:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808B918: .4byte 0x0400001E
_0808B91C: .4byte 0x08320436
_0808B920: .4byte gBg3Tm
_0808B924: .4byte 0x06007800

	thumb_func_start sub_808B928
sub_808B928: @ 0x0808B928
	push {lr}
	ldr r0, _0808B938 @ =0x0868A644
	movs r1, #0
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
_0808B938: .4byte 0x0868A644

	thumb_func_start sub_808B93C
sub_808B93C: @ 0x0808B93C
	push {r4, r5, r6, lr}
	adds r1, r0, #0
	movs r1, #0xa
	bl __modsi3
	adds r1, r0, #0
	movs r4, #0
	ldr r5, _0808B9A8 @ =0x020004AC
	ldr r6, _0808B9AC @ =0x0868A998
_0808B94E:
	lsrs r0, r4, #0x1f
	adds r0, r4, r0
	asrs r0, r0, #1
	lsls r0, r0, #1
	subs r0, r4, r0
	adds r0, r0, r5
	ldrb r0, [r0]
	cmp r0, r1
	bne _0808B96A
	adds r0, r1, #1
	movs r1, #0xa
	bl __modsi3
	adds r1, r0, #0
_0808B96A:
	adds r4, #1
	cmp r4, #2
	ble _0808B94E
	ldrb r0, [r5]
	strb r0, [r5, #1]
	strb r1, [r5]
	lsls r0, r1, #3
	adds r0, r0, r6
	ldr r4, [r0]
	movs r0, #2
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r0, _0808B9B0 @ =0x06002800
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldrb r5, [r5]
	lsls r0, r5, #3
	adds r1, r6, #4
	adds r0, r0, r1
	ldr r0, [r0]
	movs r1, #0xc0
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808B9A8: .4byte 0x020004AC
_0808B9AC: .4byte 0x0868A998
_0808B9B0: .4byte 0x06002800

	thumb_func_start sub_808B9B4
sub_808B9B4: @ 0x0808B9B4
	movs r2, #0
	ldr r1, _0808B9C4 @ =0x0868A664
_0808B9B8:
	ldr r0, [r1]
	cmp r0, #0
	blt _0808B9C8
	adds r1, #0xc
	adds r2, #1
	b _0808B9B8
	.align 2, 0
_0808B9C4: .4byte 0x0868A664
_0808B9C8:
	adds r0, r2, #0
	bx lr

	thumb_func_start sub_808B9CC
sub_808B9CC: @ 0x0808B9CC
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r7, r0, #0
	movs r0, #0
	bl InitBgs
	bl ResetTextFont
	bl ResetText
	bl ApplySystemObjectsGraphics
	bl InitSystemTextFont
	ldr r3, _0808BB78 @ =gDispIo
	movs r5, #1
	ldrb r2, [r3, #1]
	orrs r2, r5
	movs r4, #2
	orrs r2, r4
	movs r0, #4
	orrs r2, r0
	movs r0, #8
	orrs r2, r0
	movs r0, #0x10
	orrs r2, r0
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r6, [r3, #0xc]
	ands r0, r6
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r6, [r3, #0x10]
	ands r0, r6
	orrs r0, r4
	strb r0, [r3, #0x10]
	ldrb r0, [r3, #0x14]
	ands r1, r0
	orrs r1, r5
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #0x21
	rsbs r0, r0, #0
	ands r2, r0
	subs r0, #0x20
	ands r2, r0
	movs r0, #0x7f
	ands r2, r0
	strb r2, [r3, #1]
	movs r0, #0
	bl SetBlankChr
	ldr r0, _0808BB7C @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r6, _0808BB80 @ =gBg1Tm
	adds r0, r6, #0
	movs r1, #0
	bl TmFill
	ldr r2, _0808BB84 @ =gBg2Tm
	mov r8, r2
	mov r0, r8
	movs r1, #0
	bl TmFill
	ldr r0, _0808BB88 @ =gBg3Tm
	mov sb, r0
	movs r1, #0
	bl TmFill
	movs r0, #0xf
	bl EnableBgSync
	movs r3, #0
	str r3, [r7, #0x34]
	str r3, [r7, #0x30]
	ldr r1, _0808BB8C @ =0x020004AC
	movs r0, #0xff
	ldrb r2, [r1, #1]
	orrs r2, r0
	strb r2, [r1, #1]
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	adds r1, r7, #0
	adds r1, #0x29
	movs r0, #1
	strb r0, [r1]
	movs r1, #0
	strh r3, [r7, #0x2c]
	adds r0, r7, #0
	adds r0, #0x38
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r0, #7
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	bl sub_808BE70
	adds r0, r7, #0
	bl sub_808BF00
	bl sub_808BFF0
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r4, _0808BB90 @ =0x08345934
	movs r0, #1
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r5, #0xc0
	lsls r5, r5, #0x13
	adds r1, r1, r5
	adds r0, r4, #0
	bl Decompress
	ldr r0, _0808BB94 @ =0x08346184
	movs r1, #0x80
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r1, _0808BB98 @ =0x0832C5E8
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r6, #0
	bl TmApplyTsa_t
	ldr r1, _0808BB9C @ =0x0000FF98
	ldr r2, _0808BBA0 @ =0x0000FFC0
	movs r0, #2
	bl SetBgOffset
	bl GetGameTime
	bl sub_808B93C
	ldr r1, _0808BBA4 @ =0x00006140
	mov r0, r8
	movs r2, #0xf
	movs r3, #0xa
	bl sub_808FDE8
	ldr r4, _0808BBA8 @ =0x0831B0A8
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	adds r1, r1, r5
	adds r0, r4, #0
	bl Decompress
	ldr r0, _0808BBAC @ =0x0832CA9C
	movs r1, #0xe0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r1, _0808BBB0 @ =0x08345440
	movs r2, #0xe0
	lsls r2, r2, #7
	mov r0, sb
	bl TmApplyTsa_t
	ldr r0, _0808BBB4 @ =0x0832CAFC
	ldr r1, _0808BBB8 @ =0x06012000
	bl Decompress
	ldr r0, _0808BBBC @ =0x0832CC90
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0808BBC0 @ =0x08320EEC
	ldr r1, _0808BBC4 @ =0x06017000
	bl Decompress
	ldr r0, _0808BBC8 @ =0x08319E88
	movs r1, #0xa8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r7, #0x2e]
	adds r0, r7, #0
	bl sub_808C32C
	str r0, [r7, #0x3c]
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808BB78: .4byte gDispIo
_0808BB7C: .4byte gBg0Tm
_0808BB80: .4byte gBg1Tm
_0808BB84: .4byte gBg2Tm
_0808BB88: .4byte gBg3Tm
_0808BB8C: .4byte 0x020004AC
_0808BB90: .4byte 0x08345934
_0808BB94: .4byte 0x08346184
_0808BB98: .4byte 0x0832C5E8
_0808BB9C: .4byte 0x0000FF98
_0808BBA0: .4byte 0x0000FFC0
_0808BBA4: .4byte 0x00006140
_0808BBA8: .4byte 0x0831B0A8
_0808BBAC: .4byte 0x0832CA9C
_0808BBB0: .4byte 0x08345440
_0808BBB4: .4byte 0x0832CAFC
_0808BBB8: .4byte 0x06012000
_0808BBBC: .4byte 0x0832CC90
_0808BBC0: .4byte 0x08320EEC
_0808BBC4: .4byte 0x06017000
_0808BBC8: .4byte 0x08319E88

	thumb_func_start sub_808BBCC
sub_808BBCC: @ 0x0808BBCC
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r0, _0808BC10 @ =gKeySt
	ldr r2, [r0]
	ldrh r1, [r2, #6]
	movs r0, #0x20
	ands r0, r1
	lsls r0, r0, #0x10
	lsrs r6, r0, #0x10
	cmp r6, #0
	beq _0808BC18
	adds r0, r5, #0
	movs r1, #2
	bl Proc_Goto
	ldr r0, _0808BC14 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808BBFA
	movs r0, #0x67
	bl m4aSongNumStart
_0808BBFA:
	ldr r0, [r5, #0x30]
	cmp r0, #0
	bgt _0808BC04
	bl sub_808B9B4
_0808BC04:
	subs r0, #1
	str r0, [r5, #0x30]
	adds r1, r5, #0
	adds r1, #0x38
	b _0808BC78
	.align 2, 0
_0808BC10: .4byte gKeySt
_0808BC14: .4byte gPlaySt
_0808BC18:
	movs r0, #0x10
	ands r0, r1
	cmp r0, #0
	beq _0808BC58
	adds r0, r5, #0
	movs r1, #2
	bl Proc_Goto
	ldr r0, _0808BC48 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808BC38
	movs r0, #0x67
	bl m4aSongNumStart
_0808BC38:
	ldr r4, [r5, #0x30]
	adds r4, #1
	bl sub_808B9B4
	cmp r4, r0
	bne _0808BC4C
	str r6, [r5, #0x30]
	b _0808BC52
	.align 2, 0
_0808BC48: .4byte gPlaySt
_0808BC4C:
	ldr r0, [r5, #0x30]
	adds r0, #1
	str r0, [r5, #0x30]
_0808BC52:
	adds r1, r5, #0
	adds r1, #0x39
	b _0808BC78
_0808BC58:
	adds r4, r5, #0
	adds r4, #0x40
	ldrb r0, [r4]
	cmp r0, #0
	bne _0808BCB4
	ldrh r1, [r2, #8]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0808BC7E
	movs r0, #1
	rsbs r0, r0, #0
	bl FadeBgmOut
	adds r1, r5, #0
	adds r1, #0x29
_0808BC78:
	movs r0, #1
	strb r0, [r1]
	b _0808BCB4
_0808BC7E:
	movs r0, #1
	ands r0, r1
	cmp r0, #0
	beq _0808BC92
	adds r0, r5, #0
	bl sub_808BE5C
	movs r0, #1
	strb r0, [r4]
	b _0808BCB4
_0808BC92:
	movs r0, #8
	ands r0, r1
	cmp r0, #0
	beq _0808BCB4
	adds r0, r5, #0
	movs r1, #3
	bl Proc_Goto
	bl IsBgmPlaying
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808BCB4
	movs r0, #1
	rsbs r0, r0, #0
	bl FadeBgmOut
_0808BCB4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808BCBC
sub_808BCBC: @ 0x0808BCBC
	push {r4, r5, lr}
	adds r5, r0, #0
	ldrh r4, [r5, #0x2c]
	adds r4, #1
	strh r4, [r5, #0x2c]
	movs r0, #6
	subs r0, r0, r4
	lsls r0, r0, #8
	movs r1, #6
	bl __divsi3
	strh r0, [r5, #0x2e]
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	cmp r4, #6
	bne _0808BCE8
	adds r0, r5, #0
	bl sub_808BF00
	adds r0, r5, #0
	bl Proc_Break
_0808BCE8:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808BCF0
sub_808BCF0: @ 0x0808BCF0
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldrh r4, [r5, #0x2c]
	subs r4, #1
	movs r6, #0
	strh r4, [r5, #0x2c]
	movs r0, #6
	subs r0, r0, r4
	lsls r0, r0, #8
	movs r1, #6
	bl __divsi3
	strh r0, [r5, #0x2e]
	lsls r4, r4, #0x10
	cmp r4, #0
	bne _0808BD20
	adds r0, r5, #0
	bl Proc_Break
	adds r0, r5, #0
	adds r0, #0x38
	strb r6, [r0]
	adds r0, #1
	strb r6, [r0]
_0808BD20:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808BD28
sub_808BD28: @ 0x0808BD28
	push {lr}
	ldr r3, _0808BD54 @ =gDispIo
	movs r1, #2
	rsbs r1, r1, #0
	ldrb r2, [r3, #1]
	ands r1, r2
	movs r2, #3
	rsbs r2, r2, #0
	ands r1, r2
	subs r2, #2
	ands r1, r2
	subs r2, #4
	ands r1, r2
	subs r2, #8
	ands r1, r2
	strb r1, [r3, #1]
	ldr r0, [r0, #0x3c]
	bl Proc_End
	pop {r0}
	bx r0
	.align 2, 0
_0808BD54: .4byte gDispIo

	thumb_func_start sub_808BD58
sub_808BD58: @ 0x0808BD58
	push {lr}
	adds r1, r0, #0
	ldr r0, _0808BD68 @ =0x0868AA08
	bl SpawnProcLocking
	pop {r1}
	bx r1
	.align 2, 0
_0808BD68: .4byte 0x0868AA08

	thumb_func_start sub_808BD6C
sub_808BD6C: @ 0x0808BD6C
	movs r1, #0
	strh r1, [r0, #0x2c]
	ldr r1, [r0, #0x14]
	ldr r1, [r1, #0x30]
	str r1, [r0, #0x30]
	bx lr

	thumb_func_start sub_808BD78
sub_808BD78: @ 0x0808BD78
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldrh r4, [r6, #0x2c]
	adds r4, #1
	movs r3, #0
	strh r4, [r6, #0x2c]
	ldr r5, _0808BDEC @ =gDispIo
	adds r2, r5, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x80
	orrs r0, r1
	strb r0, [r2]
	adds r0, r5, #0
	adds r0, #0x44
	strb r3, [r0]
	adds r0, #1
	strb r3, [r0]
	ldrh r0, [r6, #0x2c]
	movs r1, #3
	bl __udivsi3
	adds r1, r5, #0
	adds r1, #0x46
	strb r0, [r1]
	ldr r0, _0808BDF0 @ =0x0000FFE0
	ldrh r1, [r5, #0x3c]
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	strh r0, [r5, #0x3c]
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	cmp r4, #0x30
	bne _0808BDE4
	ldr r2, _0808BDF4 @ =0x0868A664
	ldr r1, [r6, #0x30]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r0, [r0]
	movs r1, #0
	bl StartBgm
	bl GetGameTime
	bl sub_808B93C
	adds r0, r6, #0
	bl Proc_Break
_0808BDE4:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808BDEC: .4byte gDispIo
_0808BDF0: .4byte 0x0000FFE0
_0808BDF4: .4byte 0x0868A664

	thumb_func_start sub_808BDF8
sub_808BDF8: @ 0x0808BDF8
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	ldrh r4, [r6, #0x2c]
	subs r4, #1
	movs r7, #0
	strh r4, [r6, #0x2c]
	ldr r5, _0808BE54 @ =gDispIo
	adds r2, r5, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x80
	orrs r0, r1
	strb r0, [r2]
	adds r0, r5, #0
	adds r0, #0x44
	strb r7, [r0]
	adds r0, #1
	strb r7, [r0]
	ldrh r0, [r6, #0x2c]
	movs r1, #3
	bl __udivsi3
	adds r1, r5, #0
	adds r1, #0x46
	strb r0, [r1]
	ldr r0, _0808BE58 @ =0x0000FFE0
	ldrh r1, [r5, #0x3c]
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	strh r0, [r5, #0x3c]
	lsls r4, r4, #0x10
	cmp r4, #0
	bne _0808BE4C
	adds r0, r6, #0
	bl Proc_Break
	ldr r0, [r6, #0x14]
	adds r0, #0x40
	strb r7, [r0]
_0808BE4C:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808BE54: .4byte gDispIo
_0808BE58: .4byte 0x0000FFE0

	thumb_func_start sub_808BE5C
sub_808BE5C: @ 0x0808BE5C
	push {lr}
	adds r1, r0, #0
	ldr r0, _0808BE6C @ =0x0868AA80
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
_0808BE6C: .4byte 0x0868AA80

	thumb_func_start sub_808BE70
sub_808BE70: @ 0x0808BE70
	push {r4, r5, r6, lr}
	ldr r6, _0808BEE8 @ =0x06014000
	ldr r4, _0808BEEC @ =0x02000468
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #5
	bl InitSpriteTextFont
	ldr r0, _0808BEF0 @ =Pal_SystemText
	movs r5, #0xd0
	lsls r5, r5, #2
	adds r1, r5, #0
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, _0808BEF4 @ =gPal
	adds r0, r0, r5
	movs r1, #0
	strh r1, [r0]
	bl EnablePalSync
	adds r0, r4, #0
	bl SetTextFont
	adds r0, r4, #0
	adds r0, #0x18
	bl InitSpriteText
	adds r0, r4, #0
	adds r0, #0x20
	bl InitSpriteText
	adds r4, #0x28
	movs r5, #2
_0808BEB4:
	adds r0, r4, #0
	bl InitSpriteText
	adds r4, #8
	subs r5, #1
	cmp r5, #0
	bge _0808BEB4
	movs r0, #0
	bl SetTextFont
	ldr r2, _0808BEEC @ =0x02000468
	ldr r0, _0808BEF8 @ =0x0001FFFF
	ands r0, r6
	lsrs r0, r0, #5
	ldr r3, _0808BEFC @ =0x000003FF
	adds r1, r3, #0
	ands r0, r1
	movs r3, #0xa0
	lsls r3, r3, #8
	adds r1, r3, #0
	adds r0, r0, r1
	adds r2, #0x40
	strh r0, [r2]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808BEE8: .4byte 0x06014000
_0808BEEC: .4byte 0x02000468
_0808BEF0: .4byte Pal_SystemText
_0808BEF4: .4byte gPal
_0808BEF8: .4byte 0x0001FFFF
_0808BEFC: .4byte 0x000003FF

	thumb_func_start sub_808BF00
sub_808BF00: @ 0x0808BF00
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	adds r7, r0, #0
	ldr r0, [r7, #0x30]
	mov r8, r0
	ldr r6, _0808BF90 @ =0x02000468
	adds r0, r6, #0
	bl SetTextFont
	movs r0, #1
	bl SetTextFontGlyphs
	mov r1, r8
	lsls r0, r1, #1
	add r0, r8
	lsls r0, r0, #2
	mov sb, r0
	ldr r5, _0808BF94 @ =0x0868A664
	adds r5, #4
	add r5, sb
	ldr r0, [r5]
	bl DecodeMsg
	add r1, sp, #4
	mov sl, r1
	mov r1, sp
	mov r2, sl
	bl sub_8071C00
	adds r4, r6, #0
	adds r4, #0x18
	adds r0, r4, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	ldr r0, [sp]
	movs r1, #0xb0
	subs r1, r1, r0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	adds r0, r4, #0
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	ldr r0, [r5]
	bl DecodeMsg
	adds r1, r0, #0
	adds r0, r4, #0
	bl Text_DrawString
	adds r6, #0x20
	adds r0, r6, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	mov r0, r8
	cmp r0, #0
	bne _0808BF98
	adds r1, r7, #0
	adds r1, #0x41
	movs r0, #1
	strb r0, [r1]
	b _0808BFD6
	.align 2, 0
_0808BF90: .4byte 0x02000468
_0808BF94: .4byte 0x0868A664
_0808BF98:
	adds r1, r7, #0
	adds r1, #0x41
	movs r0, #0
	strb r0, [r1]
	ldr r4, _0808BFEC @ =0x0868A664
	adds r4, #8
	add r4, sb
	ldr r0, [r4]
	bl DecodeMsg
	mov r1, sp
	mov r2, sl
	bl sub_8071C00
	ldr r0, [sp]
	movs r1, #0xa8
	subs r1, r1, r0
	adds r0, r6, #0
	bl Text_SetCursor
	adds r0, r6, #0
	movs r1, #0
	bl Text_SetColor
	ldr r0, [r4]
	bl DecodeMsg
	adds r1, r0, #0
	adds r0, r6, #0
	bl Text_DrawString
_0808BFD6:
	movs r0, #0
	bl SetTextFont
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808BFEC: .4byte 0x0868A664

	thumb_func_start sub_808BFF0
sub_808BFF0: @ 0x0808BFF0
	push {r4, r5, lr}
	ldr r5, _0808C074 @ =0x02000468
	adds r0, r5, #0
	bl SetTextFont
	movs r0, #0
	bl SetTextFontGlyphs
	adds r4, r5, #0
	adds r4, #0x28
	adds r0, r4, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	ldr r1, _0808C078 @ =0x08336D3C
	adds r0, r4, #0
	bl Text_DrawString
	adds r4, #8
	adds r0, r4, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetCursor
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	ldr r1, _0808C07C @ =0x08336D48
	adds r0, r4, #0
	bl Text_DrawString
	adds r5, #0x38
	adds r0, r5, #0
	movs r1, #0
	bl SpriteText_DrawBackgroundExt
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetCursor
	adds r0, r5, #0
	movs r1, #0
	bl Text_SetColor
	ldr r1, _0808C080 @ =0x08336D54
	adds r0, r5, #0
	bl Text_DrawString
	movs r0, #0
	bl SetTextFont
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808C074: .4byte 0x02000468
_0808C078: .4byte 0x08336D3C
_0808C07C: .4byte 0x08336D48
_0808C080: .4byte 0x08336D54

	thumb_func_start sub_808C084
sub_808C084: @ 0x0808C084
	ldr r1, [r0, #0x14]
	str r1, [r0, #0x2c]
	adds r1, r0, #0
	adds r1, #0x30
	movs r2, #0
	strb r2, [r1]
	adds r0, #0x31
	strb r2, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_808C098
sub_808C098: @ 0x0808C098
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	str r0, [sp, #4]
	ldr r3, _0808C300 @ =0x0868A9E8
	movs r4, #0x80
	lsls r4, r4, #7
	str r4, [sp]
	movs r0, #0xb
	movs r1, #0x14
	movs r2, #0x4d
	bl PutSprite
	ldr r3, _0808C304 @ =0x0868A9F0
	str r4, [sp]
	movs r0, #0xb
	movs r1, #0x14
	movs r2, #0x61
	bl PutSprite
	ldr r3, _0808C308 @ =0x0868A9F8
	str r4, [sp]
	movs r0, #0xb
	movs r1, #0x14
	movs r2, #0x75
	bl PutSprite
	ldr r6, _0808C30C @ =0x0868A988
	ldr r0, [sp, #4]
	adds r0, #0x30
	ldrb r0, [r0]
	lsrs r0, r0, #3
	movs r1, #6
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r4, #0xa0
	lsls r4, r4, #7
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #0xb
	movs r1, #0x1a
	movs r2, #0x1a
	adds r3, r6, #0
	bl PutSpriteExt
	ldr r5, _0808C310 @ =0x000010CE
	ldr r0, [sp, #4]
	adds r0, #0x31
	ldrb r0, [r0]
	lsrs r0, r0, #3
	movs r1, #6
	bl __umodsi3
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #0xb
	adds r1, r5, #0
	movs r2, #0x1a
	adds r3, r6, #0
	bl PutSpriteExt
	ldr r1, [sp, #4]
	ldr r0, [r1, #0x2c]
	ldrh r0, [r0, #0x2e]
	cmp r0, #0x30
	bhi _0808C12C
	b _0808C246
_0808C12C:
	ldr r4, _0808C314 @ =gSinLut
	movs r2, #0x80
	adds r2, r2, r4
	mov sb, r2
	movs r3, #0
	ldrsh r0, [r2, r3]
	lsls r0, r0, #4
	movs r1, #0x80
	lsls r1, r1, #1
	mov r8, r1
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	ldr r3, [sp, #4]
	ldr r1, [r3, #0x2c]
	ldrh r1, [r1, #0x2e]
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r2, sb
	movs r3, #0
	ldrsh r0, [r2, r3]
	lsls r0, r0, #4
	ldr r2, [sp, #4]
	ldr r1, [r2, #0x2c]
	ldrh r1, [r1, #0x2e]
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	ldr r3, [sp, #4]
	ldr r0, [r3, #0x2c]
	adds r0, #0x41
	ldrb r0, [r0]
	movs r4, #0x18
	cmp r0, #0
	bne _0808C1F6
	movs r4, #0x10
	ldr r0, _0808C318 @ =0x020004A8
	mov r8, r0
	movs r7, #0x40
	movs r6, #0x20
	movs r5, #4
_0808C1B2:
	mov r1, r8
	ldrh r1, [r1]
	adds r0, r1, r7
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r0, r2
	str r0, [sp]
	movs r0, #4
	adds r1, r6, #0
	movs r3, #0x88
	lsls r3, r3, #1
	adds r2, r4, r3
	ldr r3, _0808C31C @ =Sprite_32x16
	bl PutSpriteExt
	adds r7, #4
	adds r6, #0x20
	subs r5, #1
	cmp r5, #0
	bge _0808C1B2
	movs r0, #0x88
	lsls r0, r0, #1
	adds r2, r4, r0
	ldr r3, _0808C320 @ =Sprite_16x16
	ldr r0, _0808C324 @ =0x02000468
	adds r0, #0x40
	ldrh r0, [r0]
	ldr r1, _0808C328 @ =0x00001054
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #4
	movs r1, #0xc0
	bl PutSpriteExt
_0808C1F6:
	movs r5, #0
	ldr r7, _0808C318 @ =0x020004A8
	movs r6, #0x20
_0808C1FC:
	lsls r0, r5, #2
	ldrh r2, [r7]
	adds r0, r2, r0
	movs r3, #0x80
	lsls r3, r3, #5
	adds r0, r0, r3
	str r0, [sp]
	movs r0, #4
	adds r1, r6, #0
	movs r3, #0x80
	lsls r3, r3, #1
	adds r2, r4, r3
	ldr r3, _0808C31C @ =Sprite_32x16
	bl PutSpriteExt
	adds r6, #0x20
	adds r5, #1
	cmp r5, #4
	ble _0808C1FC
	lsls r1, r5, #5
	adds r1, #0x20
	movs r0, #0x80
	lsls r0, r0, #1
	adds r2, r4, r0
	ldr r3, _0808C320 @ =Sprite_16x16
	ldr r4, _0808C324 @ =0x02000468
	adds r4, #0x40
	lsls r0, r5, #2
	ldrh r4, [r4]
	adds r0, r4, r0
	movs r4, #0x80
	lsls r4, r4, #5
	adds r0, r0, r4
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
_0808C246:
	movs r4, #0
	ldr r0, [sp, #4]
	adds r0, #0x30
	str r0, [sp, #8]
	ldr r1, [sp, #4]
	adds r1, #0x31
	str r1, [sp, #0xc]
	ldr r2, _0808C318 @ =0x020004A8
	mov sl, r2
_0808C258:
	asrs r1, r4, #1
	lsls r0, r4, #2
	lsls r7, r4, #6
	adds r3, r4, #1
	mov sb, r3
	adds r0, r0, r4
	lsls r0, r0, #2
	mov r8, r0
	movs r6, #0x80
	lsls r1, r1, #4
	adds r4, r1, #0
	adds r4, #0x28
	movs r5, #1
_0808C272:
	mov r1, sl
	ldrh r1, [r1]
	adds r0, r1, r6
	adds r0, r0, r7
	str r0, [sp]
	movs r0, #4
	adds r1, r4, #0
	mov r2, r8
	adds r2, #0x4c
	ldr r3, _0808C31C @ =Sprite_32x16
	bl PutSpriteExt
	adds r6, #4
	adds r4, #0x20
	subs r5, #1
	cmp r5, #0
	bge _0808C272
	mov r4, sb
	cmp r4, #2
	ble _0808C258
	ldr r1, [sp, #8]
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	ldr r2, [sp, #0xc]
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	ldr r3, [sp, #4]
	ldr r0, [r3, #0x2c]
	adds r0, #0x38
	ldrb r0, [r0]
	cmp r0, #0
	beq _0808C2BC
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_0808C2BC:
	ldr r4, [sp, #4]
	ldr r0, [r4, #0x2c]
	adds r0, #0x39
	ldrb r0, [r0]
	cmp r0, #0
	beq _0808C2CE
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
_0808C2CE:
	ldr r0, [sp, #8]
	ldrb r1, [r0]
	lsrs r0, r1, #3
	cmp r0, #5
	bls _0808C2E0
	adds r0, r1, #0
	subs r0, #0x30
	ldr r1, [sp, #8]
	strb r0, [r1]
_0808C2E0:
	ldr r2, [sp, #0xc]
	ldrb r1, [r2]
	lsrs r0, r1, #3
	cmp r0, #5
	bls _0808C2F0
	adds r0, r1, #0
	subs r0, #0x30
	strb r0, [r2]
_0808C2F0:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808C300: .4byte 0x0868A9E8
_0808C304: .4byte 0x0868A9F0
_0808C308: .4byte 0x0868A9F8
_0808C30C: .4byte 0x0868A988
_0808C310: .4byte 0x000010CE
_0808C314: .4byte gSinLut
_0808C318: .4byte 0x020004A8
_0808C31C: .4byte Sprite_32x16
_0808C320: .4byte Sprite_16x16
_0808C324: .4byte 0x02000468
_0808C328: .4byte 0x00001054

	thumb_func_start sub_808C32C
sub_808C32C: @ 0x0808C32C
	push {lr}
	adds r1, r0, #0
	ldr r0, _0808C33C @ =0x0868AAA8
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
_0808C33C: .4byte 0x0868AAA8

	thumb_func_start sub_808C340
sub_808C340: @ 0x0808C340
	ldr r0, _0808C34C @ =0x0868AAC8
	ldr r0, [r0]
	ldrh r0, [r0, #0x2a]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	bx lr
	.align 2, 0
_0808C34C: .4byte 0x0868AAC8

	thumb_func_start sub_808C350
sub_808C350: @ 0x0808C350
	push {lr}
	ldr r1, _0808C378 @ =0x0868AAE4
	ldr r0, _0808C37C @ =0x0868AAC8
	ldr r2, [r0]
	movs r3, #0x32
	ldrsh r0, [r2, r3]
	lsls r0, r0, #3
	adds r1, #4
	adds r0, r0, r1
	movs r3, #0x2a
	ldrsh r1, [r2, r3]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_808CAF0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0
_0808C378: .4byte 0x0868AAE4
_0808C37C: .4byte 0x0868AAC8

	thumb_func_start sub_808C380
sub_808C380: @ 0x0808C380
	push {lr}
	ldr r0, _0808C38C @ =0x0868AB22
	bl InitBgs
	pop {r0}
	bx r0
	.align 2, 0
_0808C38C: .4byte 0x0868AB22

	thumb_func_start sub_808C390
sub_808C390: @ 0x0808C390
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	ldr r4, _0808C410 @ =gBg3Tm
	cmp r5, #0
	bne _0808C3AA
	movs r0, #3
	bl GetBgChrOffset
	movs r1, #0xc0
	lsls r1, r1, #0x13
	adds r5, r0, r1
_0808C3AA:
	cmp r6, #0
	bge _0808C3B0
	movs r6, #0xe
_0808C3B0:
	ldr r0, _0808C414 @ =0x08336D5C
	adds r1, r5, #0
	bl Decompress
	ldr r0, _0808C418 @ =0x0833BFDC
	lsls r1, r6, #5
	movs r2, #0x40
	bl ApplyPaletteExt
	movs r0, #3
	bl GetBgChrOffset
	subs r0, r5, r0
	lsls r0, r0, #0xf
	lsrs r0, r0, #0x14
	movs r1, #0xf
	ands r1, r6
	lsls r1, r1, #0xc
	adds r1, r0, r1
	movs r2, #0
	ldr r3, _0808C41C @ =0x0000027F
_0808C3DA:
	adds r0, r2, r1
	strh r0, [r4]
	adds r4, #2
	adds r2, #1
	cmp r2, r3
	ble _0808C3DA
	ldr r4, _0808C420 @ =0x020233C8
	ldr r3, _0808C424 @ =0x086773D8
	movs r5, #0x80
	lsls r5, r5, #5
	adds r1, r5, #0
	movs r2, #0xe0
	lsls r2, r2, #1
_0808C3F4:
	ldrh r5, [r4]
	adds r0, r1, r5
	strh r0, [r4]
	adds r4, #2
	subs r2, #1
	cmp r2, #0
	bne _0808C3F4
	adds r0, r3, #0
	adds r1, r7, #0
	bl SpawnProc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808C410: .4byte gBg3Tm
_0808C414: .4byte 0x08336D5C
_0808C418: .4byte 0x0833BFDC
_0808C41C: .4byte 0x0000027F
_0808C420: .4byte 0x020233C8
_0808C424: .4byte 0x086773D8

	thumb_func_start sub_808C428
sub_808C428: @ 0x0808C428
	push {r4, r5, lr}
	lsls r3, r0, #1
	adds r3, r3, r1
	lsls r3, r3, #5
	ldr r4, _0808C490 @ =0x0868AB3C
	ldr r2, _0808C494 @ =0x0868AAE4
	ldr r1, _0808C498 @ =0x0868AAC8
	ldr r1, [r1]
	movs r5, #0x32
	ldrsh r1, [r1, r5]
	lsls r1, r1, #3
	adds r2, #4
	adds r1, r1, r2
	ldr r1, [r1]
	adds r1, r1, r0
	movs r0, #0x2c
	ldrb r1, [r1]
	muls r0, r1, r0
	adds r0, r0, r4
	adds r0, #0x24
	ldrb r2, [r0]
	movs r1, #0x84
	lsls r1, r1, #7
	adds r1, r2, r1
	ldr r4, _0808C49C @ =gBg2Tm
	adds r0, r3, #2
	lsls r0, r0, #1
	adds r0, r0, r4
	strh r1, [r0]
	adds r0, r3, #3
	lsls r0, r0, #1
	adds r0, r0, r4
	ldr r5, _0808C4A0 @ =0x00004201
	adds r1, r2, r5
	strh r1, [r0]
	adds r0, r3, #0
	adds r0, #0x22
	lsls r0, r0, #1
	adds r0, r0, r4
	adds r5, #0x1f
	adds r1, r2, r5
	strh r1, [r0]
	adds r3, #0x23
	lsls r3, r3, #1
	adds r3, r3, r4
	ldr r0, _0808C4A4 @ =0x00004221
	adds r2, r2, r0
	strh r2, [r3]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808C490: .4byte 0x0868AB3C
_0808C494: .4byte 0x0868AAE4
_0808C498: .4byte 0x0868AAC8
_0808C49C: .4byte gBg2Tm
_0808C4A0: .4byte 0x00004201
_0808C4A4: .4byte 0x00004221

	thumb_func_start sub_808C4A8
sub_808C4A8: @ 0x0808C4A8
	push {r4, r5, r6, lr}
	sub sp, #8
	ldr r4, _0808C504 @ =0x0868AAC8
	ldr r0, [r4]
	adds r0, #0xa8
	bl ClearText
	ldr r5, _0808C508 @ =0x0868AB3C
	bl sub_808C350
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x15
	ldr r2, _0808C50C @ =0x0868AAE4
	ldr r3, [r4]
	movs r6, #0x32
	ldrsh r1, [r3, r6]
	lsls r1, r1, #3
	adds r2, #4
	adds r1, r1, r2
	movs r6, #0x2a
	ldrsh r2, [r3, r6]
	ldr r1, [r1]
	adds r1, r1, r2
	movs r2, #0x2c
	ldrb r1, [r1]
	muls r1, r2, r1
	adds r0, r0, r1
	adds r0, r0, r5
	ldrh r0, [r0, #4]
	bl DecodeMsg
	adds r3, r0, #0
	ldr r0, [r4]
	adds r0, #0xa8
	ldr r1, _0808C510 @ =0x02021F50
	movs r2, #0x16
	str r2, [sp]
	str r3, [sp, #4]
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808C504: .4byte 0x0868AAC8
_0808C508: .4byte 0x0868AB3C
_0808C50C: .4byte 0x0868AAE4
_0808C510: .4byte 0x02021F50

	thumb_func_start sub_808C514
sub_808C514: @ 0x0808C514
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #8
	mov r8, r0
	adds r4, r1, #0
	adds r5, r2, #0
	ldr r6, _0808C57C @ =0x0868AAC8
	lsls r4, r4, #3
	adds r4, #0x38
	ldr r0, [r6]
	adds r0, r0, r4
	bl ClearText
	ldr r2, _0808C580 @ =0x0868AB3C
	ldr r1, _0808C584 @ =0x0868AAE4
	ldr r0, [r6]
	movs r3, #0x32
	ldrsh r0, [r0, r3]
	lsls r0, r0, #3
	adds r1, #4
	adds r0, r0, r1
	ldr r0, [r0]
	add r0, r8
	movs r1, #0x2c
	ldrb r0, [r0]
	muls r0, r1, r0
	adds r0, r0, r2
	ldrh r0, [r0]
	bl DecodeMsg
	adds r2, r0, #0
	ldr r0, [r6]
	adds r0, r0, r4
	lsls r5, r5, #6
	ldr r1, _0808C588 @ =0x02022B10
	adds r5, r5, r1
	movs r1, #9
	str r1, [sp]
	str r2, [sp, #4]
	adds r1, r5, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808C57C: .4byte 0x0868AAC8
_0808C580: .4byte 0x0868AB3C
_0808C584: .4byte 0x0868AAE4
_0808C588: .4byte 0x02022B10

	thumb_func_start sub_808C58C
sub_808C58C: @ 0x0808C58C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	adds r3, r0, #0
	str r1, [sp]
	str r2, [sp, #4]
	ldr r2, _0808C658 @ =0x0868AAE4
	ldr r0, _0808C65C @ =0x0868AAC8
	ldr r0, [r0]
	movs r4, #0x32
	ldrsh r1, [r0, r4]
	lsls r1, r1, #3
	adds r2, #4
	adds r1, r1, r2
	ldr r1, [r1]
	adds r1, r1, r3
	ldrb r1, [r1]
	mov sb, r1
	ldr r2, _0808C660 @ =0x0868AB3C
	movs r1, #0x2c
	mov r3, sb
	muls r3, r1, r3
	adds r1, r3, #0
	adds r4, r1, r2
	ldrb r1, [r4, #8]
	lsrs r1, r1, #3
	str r1, [sp, #8]
	ldr r2, [sp]
	lsls r1, r2, #3
	adds r5, r1, #0
	adds r5, #0x70
	adds r0, r0, r5
	bl ClearText
	movs r3, #0
	mov r8, r3
	ldrh r0, [r4, #6]
	cmp r0, #0
	beq _0808C628
	mov sl, r5
_0808C5E2:
	ldr r0, _0808C65C @ =0x0868AAC8
	ldr r0, [r0]
	mov r1, sl
	adds r7, r0, r1
	ldrb r6, [r4, #8]
	subs r6, #0x78
	mov r2, sb
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
	bl sub_808CAF0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r5, #1
	cmp r8, r0
	bne _0808C604
	movs r5, #2
_0808C604:
	ldrh r0, [r4, #6]
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r7, #0
	adds r1, r6, #0
	adds r2, r5, #0
	bl Text_InsertDrawString
	adds r4, #8
	movs r3, #1
	add r8, r3
	mov r0, r8
	cmp r0, #3
	bgt _0808C628
	ldrh r0, [r4, #6]
	cmp r0, #0
	bne _0808C5E2
_0808C628:
	ldr r0, _0808C65C @ =0x0868AAC8
	ldr r2, [sp]
	lsls r1, r2, #3
	adds r1, #0x70
	ldr r0, [r0]
	adds r0, r0, r1
	ldr r3, [sp, #4]
	lsls r1, r3, #5
	ldr r4, [sp, #8]
	adds r1, r1, r4
	lsls r1, r1, #1
	ldr r2, _0808C664 @ =gBg2Tm
	adds r1, r1, r2
	bl PutText
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808C658: .4byte 0x0868AAE4
_0808C65C: .4byte 0x0868AAC8
_0808C660: .4byte 0x0868AB3C
_0808C664: .4byte gBg2Tm

	thumb_func_start sub_808C668
sub_808C668: @ 0x0808C668
	push {lr}
	movs r0, #1
	movs r1, #0x12
	bl ApplyIconPalette
	movs r0, #0x80
	movs r1, #3
	bl sub_809777C
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808C680
sub_808C680: @ 0x0808C680
	push {lr}
	bl sub_808C340
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0808C6A2
	bl sub_808C350
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	bne _0808C6A2
	movs r0, #0xc0
	movs r1, #0x20
	movs r2, #0x12
	bl PutSysAButton
_0808C6A2:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808C6A8
sub_808C6A8: @ 0x0808C6A8
	push {r4, r5, r6, lr}
	ldr r1, _0808C74C @ =0x0868AAE4
	ldr r6, _0808C750 @ =0x0868AAC8
	ldr r2, [r6]
	movs r3, #0x32
	ldrsh r0, [r2, r3]
	lsls r0, r0, #3
	adds r1, #4
	adds r0, r0, r1
	movs r3, #0x2a
	ldrsh r1, [r2, r3]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r5, [r0]
	ldr r2, _0808C754 @ =0x0868AAFC
	movs r3, #0x83
	lsls r3, r3, #6
	movs r0, #0x22
	movs r1, #8
	bl PutOamHiRam
	ldr r0, [r6]
	movs r1, #0x2a
	ldrsh r4, [r0, r1]
	movs r2, #0x2c
	ldrsh r0, [r0, r2]
	subs r4, r4, r0
	lsls r4, r4, #4
	adds r4, #0x20
	movs r0, #0x10
	adds r1, r4, #0
	bl sub_804163C
	adds r0, r5, #0
	bl sub_808CAF0
	ldr r2, _0808C758 @ =0x0868AB3C
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x15
	movs r1, #0x2c
	muls r1, r5, r1
	adds r0, r0, r1
	adds r0, r0, r2
	ldrb r0, [r0, #8]
	subs r0, #2
	adds r1, r4, #0
	bl sub_80415CC
	ldr r1, [r6]
	movs r3, #0x34
	ldrsh r0, [r1, r3]
	cmp r0, #6
	ble _0808C746
	movs r2, #0x2c
	ldrsh r0, [r1, r2]
	cmp r0, #0
	beq _0808C728
	movs r2, #0xc2
	lsls r2, r2, #6
	movs r0, #0x64
	movs r1, #0x1d
	movs r3, #1
	bl sub_80977C0
_0808C728:
	ldr r0, [r6]
	movs r3, #0x2c
	ldrsh r1, [r0, r3]
	movs r2, #0x34
	ldrsh r0, [r0, r2]
	subs r0, #6
	cmp r1, r0
	bge _0808C746
	movs r2, #0xc2
	lsls r2, r2, #6
	movs r0, #0x64
	movs r1, #0x7d
	movs r3, #0
	bl sub_80977C0
_0808C746:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808C74C: .4byte 0x0868AAE4
_0808C750: .4byte 0x0868AAC8
_0808C754: .4byte 0x0868AAFC
_0808C758: .4byte 0x0868AB3C

	thumb_func_start sub_808C75C
sub_808C75C: @ 0x0808C75C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sb, r0
	ldr r0, _0808C964 @ =0x0868AAC8
	mov sl, r0
	ldr r0, [r0]
	movs r4, #0
	strh r4, [r0, #0x32]
	bl sub_80846F0
	cmp r0, #0
	beq _0808C784
	mov r2, sl
	ldr r1, [r2]
	ldrh r0, [r1, #0x32]
	adds r0, #1
	strh r0, [r1, #0x32]
_0808C784:
	mov r3, sl
	ldr r1, [r3]
	ldr r2, _0808C968 @ =0x0868AAE4
	movs r3, #0x32
	ldrsh r0, [r1, r3]
	lsls r0, r0, #3
	adds r0, r0, r2
	ldrb r0, [r0]
	strh r0, [r1, #0x34]
	strh r4, [r1, #0x2a]
	strh r4, [r1, #0x2c]
	mov r0, sb
	strh r4, [r0, #0x2e]
	strh r4, [r0, #0x30]
	adds r0, #0x36
	movs r1, #0
	strb r1, [r0]
	bl LoadUiFrameGraphics
	ldr r7, _0808C96C @ =gDispIo
	movs r4, #1
	ldrb r0, [r7, #1]
	orrs r0, r4
	movs r2, #2
	mov r8, r2
	mov r3, r8
	orrs r0, r3
	movs r1, #4
	orrs r0, r1
	movs r6, #8
	orrs r0, r6
	movs r5, #0x10
	orrs r0, r5
	strb r0, [r7, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	mov r3, sb
	ldrh r2, [r3, #0x2e]
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #0x20
	ldrb r1, [r7, #1]
	orrs r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	adds r0, r7, #0
	adds r0, #0x2d
	movs r2, #0
	strb r2, [r0]
	adds r1, r7, #0
	adds r1, #0x31
	movs r0, #0x20
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x80
	strb r0, [r1]
	adds r1, #4
	ldrb r0, [r1]
	orrs r0, r4
	mov r3, r8
	orrs r0, r3
	movs r2, #4
	orrs r0, r2
	orrs r0, r6
	orrs r0, r5
	strb r0, [r1]
	adds r1, #2
	ldrb r3, [r1]
	orrs r4, r3
	mov r0, r8
	orrs r4, r0
	movs r0, #5
	rsbs r0, r0, #0
	ands r4, r0
	orrs r4, r6
	orrs r4, r5
	strb r4, [r1]
	ldr r0, _0808C970 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r5, _0808C974 @ =gBg1Tm
	adds r0, r5, #0
	movs r1, #0
	bl TmFill
	ldr r0, _0808C978 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0808C97C @ =gBg3Tm
	movs r1, #0
	bl TmFill
	ldr r4, _0808C980 @ =0x0833C03C
	adds r0, r4, #0
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r1, #0x90
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0808C984 @ =0x0833B958
	ldr r1, _0808C988 @ =0x06011800
	bl Decompress
	ldr r0, _0808C98C @ =0x0833BB28
	ldr r1, _0808C990 @ =0x06004000
	bl Decompress
	ldr r4, _0808C994 @ =0x0833BB14
	movs r0, #2
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r2, _0808C998 @ =0x06005000
	adds r1, r1, r2
	adds r0, r4, #0
	bl Decompress
	ldr r1, _0808C99C @ =0x0833BE84
	movs r4, #0x80
	lsls r4, r4, #5
	adds r0, r5, #0
	adds r2, r4, #0
	bl TmApplyTsa_t
	ldr r3, _0808C9A0 @ =0x00000404
	adds r5, r5, r3
	ldr r1, _0808C9A4 @ =0x0833BF08
	adds r0, r5, #0
	adds r2, r4, #0
	bl TmApplyTsa_t
	bl ResetTextFont
	mov r1, sl
	ldr r0, [r1]
	adds r0, #0xa8
	movs r1, #0x16
	bl InitText
	bl sub_808C4A8
	mov r2, sl
	ldr r0, [r2]
	adds r0, #0x68
	movs r1, #9
	bl InitText
	mov r3, sl
	ldr r0, [r3]
	adds r0, #0xa0
	movs r1, #0xe
	bl InitText
	movs r4, #0
	mov r8, sl
	movs r7, #0x70
	movs r6, #0x38
	movs r5, #4
_0808C8FA:
	adds r0, r4, #0
	movs r1, #4
	bl sub_808C428
	mov r1, r8
	ldr r0, [r1]
	adds r0, r0, r6
	movs r1, #9
	bl InitText
	mov r2, r8
	ldr r0, [r2]
	adds r0, r0, r7
	movs r1, #0xe
	bl InitText
	adds r0, r4, #0
	adds r1, r4, #0
	adds r2, r5, #0
	bl sub_808C514
	adds r0, r4, #0
	adds r1, r4, #0
	adds r2, r5, #0
	bl sub_808C58C
	adds r7, #8
	adds r6, #8
	adds r5, #2
	adds r4, #1
	cmp r4, #5
	ble _0808C8FA
	movs r2, #1
	rsbs r2, r2, #0
	mov r0, sb
	movs r1, #0
	bl sub_808C390
	ldr r0, _0808C9A8 @ =0x0868ADC4
	mov r1, sb
	bl SpawnProc
	movs r0, #0xf
	bl EnableBgSync
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808C964: .4byte 0x0868AAC8
_0808C968: .4byte 0x0868AAE4
_0808C96C: .4byte gDispIo
_0808C970: .4byte gBg0Tm
_0808C974: .4byte gBg1Tm
_0808C978: .4byte gBg2Tm
_0808C97C: .4byte gBg3Tm
_0808C980: .4byte 0x0833C03C
_0808C984: .4byte 0x0833B958
_0808C988: .4byte 0x06011800
_0808C98C: .4byte 0x0833BB28
_0808C990: .4byte 0x06004000
_0808C994: .4byte 0x0833BB14
_0808C998: .4byte 0x06005000
_0808C99C: .4byte 0x0833BE84
_0808C9A0: .4byte 0x00000404
_0808C9A4: .4byte 0x0833BF08
_0808C9A8: .4byte 0x0868ADC4

	thumb_func_start sub_808C9AC
sub_808C9AC: @ 0x0808C9AC
	push {lr}
	bl sub_808CA14
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808C9C0
	movs r0, #1
	rsbs r0, r0, #0
	bl sub_8041308
_0808C9C0:
	movs r0, #0
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_808C9C8
sub_808C9C8: @ 0x0808C9C8
	push {lr}
	bl sub_808CA14
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808CA0C
	ldr r1, _0808CA00 @ =0x0868AAE4
	ldr r0, _0808CA04 @ =0x0868AAC8
	ldr r2, [r0]
	movs r3, #0x32
	ldrsh r0, [r2, r3]
	lsls r0, r0, #3
	adds r1, #4
	adds r0, r0, r1
	movs r3, #0x2a
	ldrsh r1, [r2, r3]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	bl sub_808CAF0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808CA08
	movs r0, #1
	bl FadeBgmOut
	b _0808CA0C
	.align 2, 0
_0808CA00: .4byte 0x0868AAE4
_0808CA04: .4byte 0x0868AAC8
_0808CA08:
	bl StartMapSongBgm
_0808CA0C:
	movs r0, #0
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_808CA14
sub_808CA14: @ 0x0808CA14
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	mov r8, r0
	movs r7, #0
	ldr r0, _0808CA70 @ =0x0868AAC8
	ldr r0, [r0]
	movs r1, #0x2a
	ldrsh r5, [r0, r1]
	ldr r1, _0808CA74 @ =0x0868AAE4
	movs r2, #0x32
	ldrsh r0, [r0, r2]
	lsls r0, r0, #3
	adds r1, #4
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r5
	ldrb r4, [r0]
	adds r6, r4, #0
	bl sub_808C350
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	ldr r0, _0808CA78 @ =gKeySt
	ldr r0, [r0]
	ldrh r1, [r0, #6]
	movs r0, #0x30
	ands r0, r1
	cmp r0, #0
	beq _0808CAD8
	movs r0, #0x20
	ands r0, r1
	cmp r0, #0
	beq _0808CA7C
	cmp r3, #0
	beq _0808CAA2
	subs r0, r3, #1
	lsls r0, r0, #0x18
	lsrs r3, r0, #0x18
	adds r0, r4, #0
	adds r1, r3, #0
	bl sub_808CC18
	movs r7, #1
	b _0808CAA6
	.align 2, 0
_0808CA70: .4byte 0x0868AAC8
_0808CA74: .4byte 0x0868AAE4
_0808CA78: .4byte gKeySt
_0808CA7C:
	ldr r2, _0808CAE4 @ =0x0868AB3C
	adds r4, r3, #1
	lsls r0, r4, #3
	movs r1, #0x2c
	muls r1, r6, r1
	adds r0, r0, r1
	adds r0, r0, r2
	ldrh r0, [r0, #6]
	cmp r0, #0
	beq _0808CAA2
	cmp r3, #2
	bhi _0808CAA2
	lsls r0, r4, #0x18
	lsrs r3, r0, #0x18
	adds r0, r6, #0
	adds r1, r3, #0
	bl sub_808CC18
	movs r7, #1
_0808CAA2:
	cmp r7, #0
	beq _0808CAD8
_0808CAA6:
	ldr r0, _0808CAE8 @ =0x0868ADA4
	mov r1, r8
	bl SpawnProc
	adds r0, r5, #0
	movs r1, #7
	bl __modsi3
	adds r1, r0, #0
	lsls r2, r5, #1
	adds r2, #4
	adds r0, r5, #0
	bl sub_808C58C
	movs r0, #5
	bl EnableBgSync
	ldr r0, _0808CAEC @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808CAD8
	movs r0, #0x67
	bl m4aSongNumStart
_0808CAD8:
	adds r0, r7, #0
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0808CAE4: .4byte 0x0868AB3C
_0808CAE8: .4byte 0x0868ADA4
_0808CAEC: .4byte gPlaySt

	thumb_func_start sub_808CAF0
sub_808CAF0: @ 0x0808CAF0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	movs r2, #0
	cmp r0, #0xd
	bls _0808CAFC
	b _0808CC10
_0808CAFC:
	lsls r0, r0, #2
	ldr r1, _0808CB08 @ =_0808CB0C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0808CB08: .4byte _0808CB0C
_0808CB0C: @ jump table
	.4byte _0808CB44 @ case 0
	.4byte _0808CB7A @ case 1
	.4byte _0808CB88 @ case 2
	.4byte _0808CB94 @ case 3
	.4byte _0808CBA0 @ case 4
	.4byte _0808CBB0 @ case 5
	.4byte _0808CBBC @ case 6
	.4byte _0808CBC8 @ case 7
	.4byte _0808CBD4 @ case 8
	.4byte _0808CC10 @ case 9
	.4byte _0808CBE0 @ case 10
	.4byte _0808CBF0 @ case 11
	.4byte _0808CBFC @ case 12
	.4byte _0808CC08 @ case 13
_0808CB44:
	ldr r0, _0808CB5C @ =gPlaySt
	ldrb r0, [r0, #0x1e]
	lsls r0, r0, #0x1e
	lsrs r0, r0, #0x1e
	cmp r0, #1
	beq _0808CB72
	cmp r0, #1
	bgt _0808CB60
	cmp r0, #0
	beq _0808CB6A
	b _0808CB7A
	.align 2, 0
_0808CB5C: .4byte gPlaySt
_0808CB60:
	cmp r0, #2
	beq _0808CB76
	cmp r0, #3
	beq _0808CB6E
	b _0808CB7A
_0808CB6A:
	movs r0, #0
	b _0808CC12
_0808CB6E:
	movs r0, #1
	b _0808CC12
_0808CB72:
	movs r0, #2
	b _0808CC12
_0808CB76:
	movs r0, #3
	b _0808CC12
_0808CB7A:
	ldr r0, _0808CB84 @ =gPlaySt
	ldrb r0, [r0, #0x1c]
	lsls r0, r0, #0x1e
	b _0808CC0E
	.align 2, 0
_0808CB84: .4byte gPlaySt
_0808CB88:
	ldr r0, _0808CB90 @ =gPlaySt
	ldrb r0, [r0, #0x1c]
	b _0808CBE4
	.align 2, 0
_0808CB90: .4byte gPlaySt
_0808CB94:
	ldr r0, _0808CB9C @ =gPlaySt
	ldrb r0, [r0, #0x1c]
	lsls r0, r0, #0x1b
	b _0808CC0E
	.align 2, 0
_0808CB9C: .4byte gPlaySt
_0808CBA0:
	ldr r0, _0808CBAC @ =gPlaySt
	ldrb r0, [r0, #0x1c]
	lsls r0, r0, #0x19
	lsrs r2, r0, #0x1e
	b _0808CC10
	.align 2, 0
_0808CBAC: .4byte gPlaySt
_0808CBB0:
	ldr r0, _0808CBB8 @ =gPlaySt
	ldrb r0, [r0, #0x1c]
	lsrs r2, r0, #7
	b _0808CC10
	.align 2, 0
_0808CBB8: .4byte gPlaySt
_0808CBBC:
	ldr r0, _0808CBC4 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	b _0808CC0C
	.align 2, 0
_0808CBC4: .4byte gPlaySt
_0808CBC8:
	ldr r0, _0808CBD0 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	b _0808CC0E
	.align 2, 0
_0808CBD0: .4byte gPlaySt
_0808CBD4:
	ldr r0, _0808CBDC @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	b _0808CBE4
	.align 2, 0
_0808CBDC: .4byte gPlaySt
_0808CBE0:
	ldr r0, _0808CBEC @ =gPlaySt
	ldrb r0, [r0, #0x1e]
_0808CBE4:
	lsls r0, r0, #0x1c
	lsrs r2, r0, #0x1e
	b _0808CC10
	.align 2, 0
_0808CBEC: .4byte gPlaySt
_0808CBF0:
	ldr r0, _0808CBF8 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsrs r2, r0, #7
	b _0808CC10
	.align 2, 0
_0808CBF8: .4byte gPlaySt
_0808CBFC:
	ldr r0, _0808CC04 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x19
	b _0808CC0E
	.align 2, 0
_0808CC04: .4byte gPlaySt
_0808CC08:
	ldr r0, _0808CC14 @ =gPlaySt
	ldrb r0, [r0, #0x1c]
_0808CC0C:
	lsls r0, r0, #0x1f
_0808CC0E:
	lsrs r2, r0, #0x1f
_0808CC10:
	adds r0, r2, #0
_0808CC12:
	bx lr
	.align 2, 0
_0808CC14: .4byte gPlaySt

	thumb_func_start sub_808CC18
sub_808CC18: @ 0x0808CC18
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r3, r1, #0x18
	cmp r0, #0xd
	bls _0808CC26
	b _0808CDC4
_0808CC26:
	lsls r0, r0, #2
	ldr r1, _0808CC30 @ =_0808CC34
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0808CC30: .4byte _0808CC34
_0808CC34: @ jump table
	.4byte _0808CC6C @ case 0
	.4byte _0808CCD4 @ case 1
	.4byte _0808CCE8 @ case 2
	.4byte _0808CCFC @ case 3
	.4byte _0808CD10 @ case 4
	.4byte _0808CD24 @ case 5
	.4byte _0808CD30 @ case 6
	.4byte _0808CD44 @ case 7
	.4byte _0808CD58 @ case 8
	.4byte _0808CDC4 @ case 9
	.4byte _0808CD6C @ case 10
	.4byte _0808CD88 @ case 11
	.4byte _0808CD94 @ case 12
	.4byte _0808CDB0 @ case 13
_0808CC6C:
	cmp r3, #1
	beq _0808CC98
	cmp r3, #1
	bgt _0808CC7A
	cmp r3, #0
	beq _0808CC84
	b _0808CCD4
_0808CC7A:
	cmp r3, #2
	beq _0808CCA8
	cmp r3, #3
	beq _0808CCBC
	b _0808CCD4
_0808CC84:
	ldr r1, _0808CC94 @ =gPlaySt
	movs r0, #4
	rsbs r0, r0, #0
	ldrb r2, [r1, #0x1e]
	ands r0, r2
	strb r0, [r1, #0x1e]
	b _0808CDC4
	.align 2, 0
_0808CC94: .4byte gPlaySt
_0808CC98:
	ldr r1, _0808CCA4 @ =gPlaySt
	movs r0, #3
	ldrb r3, [r1, #0x1e]
	orrs r0, r3
	strb r0, [r1, #0x1e]
	b _0808CDC4
	.align 2, 0
_0808CCA4: .4byte gPlaySt
_0808CCA8:
	ldr r0, _0808CCB8 @ =gPlaySt
	movs r1, #4
	rsbs r1, r1, #0
	ldrb r2, [r0, #0x1e]
	ands r1, r2
	movs r2, #1
	b _0808CCC8
	.align 2, 0
_0808CCB8: .4byte gPlaySt
_0808CCBC:
	ldr r0, _0808CCD0 @ =gPlaySt
	movs r1, #4
	rsbs r1, r1, #0
	ldrb r3, [r0, #0x1e]
	ands r1, r3
	movs r2, #2
_0808CCC8:
	orrs r1, r2
	strb r1, [r0, #0x1e]
	b _0808CDC4
	.align 2, 0
_0808CCD0: .4byte gPlaySt
_0808CCD4:
	ldr r2, _0808CCE4 @ =gPlaySt
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #1
	movs r0, #3
	rsbs r0, r0, #0
	b _0808CDBC
	.align 2, 0
_0808CCE4: .4byte gPlaySt
_0808CCE8:
	ldr r2, _0808CCF8 @ =gPlaySt
	movs r0, #3
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #2
	movs r0, #0xd
	rsbs r0, r0, #0
	b _0808CDBC
	.align 2, 0
_0808CCF8: .4byte gPlaySt
_0808CCFC:
	ldr r2, _0808CD0C @ =gPlaySt
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #4
	movs r0, #0x11
	rsbs r0, r0, #0
	b _0808CDBC
	.align 2, 0
_0808CD0C: .4byte gPlaySt
_0808CD10:
	ldr r2, _0808CD20 @ =gPlaySt
	movs r0, #3
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #5
	movs r0, #0x61
	rsbs r0, r0, #0
	b _0808CDBC
	.align 2, 0
_0808CD20: .4byte gPlaySt
_0808CD24:
	ldr r2, _0808CD2C @ =gPlaySt
	lsls r1, r3, #7
	movs r0, #0x7f
	b _0808CDBC
	.align 2, 0
_0808CD2C: .4byte gPlaySt
_0808CD30:
	ldr r2, _0808CD40 @ =gPlaySt
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	movs r0, #2
	rsbs r0, r0, #0
	b _0808CDA2
	.align 2, 0
_0808CD40: .4byte gPlaySt
_0808CD44:
	ldr r2, _0808CD54 @ =gPlaySt
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #1
	movs r0, #3
	rsbs r0, r0, #0
	b _0808CDA2
	.align 2, 0
_0808CD54: .4byte gPlaySt
_0808CD58:
	ldr r2, _0808CD68 @ =gPlaySt
	movs r0, #3
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #2
	movs r0, #0xd
	rsbs r0, r0, #0
	b _0808CDA2
	.align 2, 0
_0808CD68: .4byte gPlaySt
_0808CD6C:
	ldr r2, _0808CD84 @ =gPlaySt
	movs r0, #3
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #2
	movs r0, #0xd
	rsbs r0, r0, #0
	ldrb r3, [r2, #0x1e]
	ands r0, r3
	orrs r0, r1
	strb r0, [r2, #0x1e]
	b _0808CDC4
	.align 2, 0
_0808CD84: .4byte gPlaySt
_0808CD88:
	ldr r2, _0808CD90 @ =gPlaySt
	lsls r1, r3, #7
	movs r0, #0x7f
	b _0808CDA2
	.align 2, 0
_0808CD90: .4byte gPlaySt
_0808CD94:
	ldr r2, _0808CDAC @ =gPlaySt
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	lsls r1, r1, #6
	movs r0, #0x41
	rsbs r0, r0, #0
_0808CDA2:
	ldrb r3, [r2, #0x1d]
	ands r0, r3
	orrs r0, r1
	strb r0, [r2, #0x1d]
	b _0808CDC4
	.align 2, 0
_0808CDAC: .4byte gPlaySt
_0808CDB0:
	ldr r2, _0808CDC8 @ =gPlaySt
	movs r0, #1
	adds r1, r3, #0
	ands r1, r0
	movs r0, #2
	rsbs r0, r0, #0
_0808CDBC:
	ldrb r3, [r2, #0x1c]
	ands r0, r3
	orrs r0, r1
	strb r0, [r2, #0x1c]
_0808CDC4:
	bx lr
	.align 2, 0
_0808CDC8: .4byte gPlaySt

	thumb_func_start sub_808CDCC
sub_808CDCC: @ 0x0808CDCC
	push {r4, r5, r6, r7, lr}
	adds r5, r1, #0
	adds r7, r2, #0
	lsls r0, r5, #1
	adds r6, r0, #4
	lsls r0, r6, #5
	ldr r2, _0808CE44 @ =gBg2Tm
	movs r4, #0
	adds r1, r0, #0
	adds r1, #0x22
	adds r0, #2
	movs r3, #0x1a
	lsls r0, r0, #1
	adds r0, r0, r2
	lsls r1, r1, #1
	adds r1, r1, r2
_0808CDEC:
	strh r4, [r0]
	strh r4, [r1]
	adds r1, #2
	adds r0, #2
	subs r3, #1
	cmp r3, #0
	bge _0808CDEC
	adds r0, r5, #0
	movs r1, #7
	bl __modsi3
	adds r4, r0, #0
	adds r0, r5, #0
	movs r1, #4
	bl sub_808C428
	adds r0, r5, #0
	adds r1, r4, #0
	adds r2, r6, #0
	bl sub_808C514
	adds r0, r5, #0
	adds r1, r4, #0
	adds r2, r6, #0
	bl sub_808C58C
	ldr r1, _0808CE48 @ =gBg0Tm
	movs r2, #0
	adds r0, r7, #0
	adds r0, #0x62
	movs r3, #0x1a
	lsls r0, r0, #1
	adds r0, r0, r1
_0808CE2E:
	strh r2, [r0]
	adds r0, #2
	subs r3, #1
	cmp r3, #0
	bge _0808CE2E
	movs r0, #5
	bl EnableBgSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808CE44: .4byte gBg2Tm
_0808CE48: .4byte gBg0Tm

	thumb_func_start sub_808CE4C
sub_808CE4C: @ 0x0808CE4C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	movs r3, #0
	movs r1, #0x30
	ldrsh r0, [r4, r1]
	cmp r0, #6
	bls _0808CE5C
	b _0808D06C
_0808CE5C:
	lsls r0, r0, #2
	ldr r1, _0808CE68 @ =_0808CE6C
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0808CE68: .4byte _0808CE6C
_0808CE6C: @ jump table
	.4byte _0808CE88 @ case 0
	.4byte _0808D048 @ case 1
	.4byte _0808D048 @ case 2
	.4byte _0808D048 @ case 3
	.4byte _0808D058 @ case 4
	.4byte _0808D058 @ case 5
	.4byte _0808D058 @ case 6
_0808CE88:
	ldr r0, _0808CEA8 @ =gKeySt
	ldr r2, [r0]
	ldrh r1, [r2, #8]
	movs r0, #2
	ands r0, r1
	cmp r0, #0
	beq _0808CEB0
	ldr r0, _0808CEAC @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808CF02
	movs r0, #0x6b
	bl m4aSongNumStart
	b _0808CF02
	.align 2, 0
_0808CEA8: .4byte gKeySt
_0808CEAC: .4byte gPlaySt
_0808CEB0:
	movs r5, #1
	adds r0, r5, #0
	ands r0, r1
	cmp r0, #0
	beq _0808CF18
	ldr r1, _0808CF0C @ =0x0868AAE4
	ldr r0, _0808CF10 @ =0x0868AAC8
	ldr r2, [r0]
	movs r3, #0x32
	ldrsh r0, [r2, r3]
	lsls r0, r0, #3
	adds r1, #4
	adds r0, r0, r1
	movs r5, #0x2a
	ldrsh r1, [r2, r5]
	ldr r0, [r0]
	adds r0, r0, r1
	ldrb r0, [r0]
	cmp r0, #0
	beq _0808CEDA
	b _0808D06C
_0808CEDA:
	movs r0, #0
	bl sub_808CAF0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #3
	beq _0808CEEA
	b _0808D06C
_0808CEEA:
	ldr r0, _0808CF14 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808CEFA
	movs r0, #0x6a
	bl m4aSongNumStart
_0808CEFA:
	adds r1, r4, #0
	adds r1, #0x36
	movs r0, #1
	strb r0, [r1]
_0808CF02:
	adds r0, r4, #0
	bl Proc_Break
	b _0808D06C
	.align 2, 0
_0808CF0C: .4byte 0x0868AAE4
_0808CF10: .4byte 0x0868AAC8
_0808CF14: .4byte gPlaySt
_0808CF18:
	ldrh r1, [r2, #6]
	movs r0, #0xc0
	ands r0, r1
	cmp r0, #0
	beq _0808CFF8
	movs r0, #0x40
	ands r0, r1
	cmp r0, #0
	beq _0808CF78
	ldr r0, _0808CF74 @ =0x0868AAC8
	ldr r2, [r0]
	ldrh r1, [r2, #0x2a]
	movs r6, #0x2a
	ldrsh r0, [r2, r6]
	cmp r0, #0
	beq _0808CFC6
	subs r0, r1, #1
	strh r0, [r2, #0x2a]
	movs r1, #0x2a
	ldrsh r0, [r2, r1]
	movs r3, #0x2c
	ldrsh r1, [r2, r3]
	subs r0, r0, r1
	cmp r0, #0
	bgt _0808CF6E
	ldrh r1, [r2, #0x2c]
	movs r6, #0x2c
	ldrsh r0, [r2, r6]
	cmp r0, #0
	beq _0808CF6E
	subs r0, r1, #1
	strh r0, [r2, #0x2c]
	movs r0, #0x2a
	ldrsh r1, [r2, r0]
	subs r1, #1
	adds r0, r4, #0
	movs r2, #0
	bl sub_808CDCC
	ldrh r0, [r4, #0x2e]
	subs r0, #4
	strh r0, [r4, #0x2e]
	strh r5, [r4, #0x30]
_0808CF6E:
	movs r3, #1
	b _0808CFCA
	.align 2, 0
_0808CF74: .4byte 0x0868AAC8
_0808CF78:
	ldr r0, _0808CFEC @ =0x0868AAC8
	ldr r2, [r0]
	movs r5, #0x2a
	ldrsh r1, [r2, r5]
	movs r6, #0x34
	ldrsh r0, [r2, r6]
	subs r0, #1
	cmp r1, r0
	bge _0808CFC6
	ldrh r0, [r2, #0x2a]
	adds r0, #1
	strh r0, [r2, #0x2a]
	movs r0, #0x2a
	ldrsh r1, [r2, r0]
	movs r3, #0x2c
	ldrsh r0, [r2, r3]
	subs r0, r1, r0
	cmp r0, #4
	ble _0808CFC4
	movs r5, #0x34
	ldrsh r0, [r2, r5]
	subs r0, #1
	cmp r1, r0
	bge _0808CFC4
	ldrh r0, [r2, #0x2c]
	adds r0, #1
	strh r0, [r2, #0x2c]
	adds r1, #1
	movs r2, #0xa0
	lsls r2, r2, #1
	adds r0, r4, #0
	bl sub_808CDCC
	ldrh r0, [r4, #0x2e]
	adds r0, #4
	strh r0, [r4, #0x2e]
	movs r0, #4
	strh r0, [r4, #0x30]
_0808CFC4:
	movs r3, #1
_0808CFC6:
	cmp r3, #0
	beq _0808CFF8
_0808CFCA:
	ldr r0, _0808CFF0 @ =0x0868ADA4
	adds r1, r4, #0
	bl SpawnProc
	movs r0, #5
	bl EnableBgSync
	ldr r0, _0808CFF4 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808D06C
	movs r0, #0x66
	bl m4aSongNumStart
	b _0808D06C
	.align 2, 0
_0808CFEC: .4byte 0x0868AAC8
_0808CFF0: .4byte 0x0868ADA4
_0808CFF4: .4byte gPlaySt
_0808CFF8:
	ldr r0, _0808D038 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0x30
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0808D06C
	ldr r3, _0808D03C @ =0x0868AB3C
	ldr r1, _0808D040 @ =0x0868AAE4
	ldr r0, _0808D044 @ =0x0868AAC8
	ldr r2, [r0]
	movs r5, #0x32
	ldrsh r0, [r2, r5]
	lsls r0, r0, #3
	adds r1, #4
	adds r0, r0, r1
	movs r6, #0x2a
	ldrsh r1, [r2, r6]
	ldr r0, [r0]
	adds r0, r0, r1
	movs r1, #0x2c
	ldrb r0, [r0]
	muls r0, r1, r0
	adds r3, #0x28
	adds r0, r0, r3
	ldr r1, [r0]
	cmp r1, #0
	beq _0808D06C
	adds r0, r4, #0
	bl _call_via_r1
	b _0808D06C
	.align 2, 0
_0808D038: .4byte gKeySt
_0808D03C: .4byte 0x0868AB3C
_0808D040: .4byte 0x0868AAE4
_0808D044: .4byte 0x0868AAC8
_0808D048:
	ldrh r0, [r4, #0x2e]
	subs r0, #4
	strh r0, [r4, #0x2e]
	ldrh r0, [r4, #0x30]
	cmp r0, #3
	bne _0808D068
	movs r0, #0
	b _0808D06A
_0808D058:
	ldrh r0, [r4, #0x2e]
	adds r0, #4
	strh r0, [r4, #0x2e]
	ldrh r0, [r4, #0x30]
	cmp r0, #6
	bne _0808D068
	movs r0, #0
	b _0808D06A
_0808D068:
	adds r0, #1
_0808D06A:
	strh r0, [r4, #0x30]
_0808D06C:
	ldrh r2, [r4, #0x2e]
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_808D07C
sub_808D07C: @ 0x0808D07C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_806EABC
	ldr r0, _0808D0A0 @ =0x0868ADC4
	bl Proc_EndEach
	ldr r0, _0808D0A4 @ =0x0868ADA4
	bl Proc_EndEach
	adds r0, r4, #0
	adds r0, #0x36
	ldrb r0, [r0]
	cmp r0, #0
	bne _0808D0A8
	movs r0, #1
	b _0808D0B8
	.align 2, 0
_0808D0A0: .4byte 0x0868ADC4
_0808D0A4: .4byte 0x0868ADA4
_0808D0A8:
	adds r0, r4, #0
	bl sub_80762B4
	adds r0, r4, #0
	movs r1, #0
	bl Proc_Goto
	movs r0, #0
_0808D0B8:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_808D0C0
sub_808D0C0: @ 0x0808D0C0
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0808D0F0 @ =0x02021B60
	movs r1, #6
	movs r2, #0xe
	movs r3, #0
	bl TmFillRect_t
	ldr r0, _0808D0F4 @ =0x0202231E
	movs r1, #8
	movs r2, #0x10
	movs r3, #0
	bl TmFillRect_t
	adds r0, r4, #0
	bl sub_80419CC
	movs r0, #3
	bl EnableBgSync
	movs r0, #1
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0808D0F0: .4byte 0x02021B60
_0808D0F4: .4byte 0x0202231E

	thumb_func_start sub_808D0F8
sub_808D0F8: @ 0x0808D0F8
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	ldr r0, _0808D148 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0xc
	ble _0808D15E
	movs r2, #0
	ldr r7, _0808D14C @ =0x0868AF74
_0808D10C:
	ldrb r0, [r7, #1]
	str r2, [sp]
	bl GetUnitByPid
	ldr r2, [sp]
	cmp r0, #0
	beq _0808D156
	movs r4, #1
	adds r6, r7, #0
	movs r1, #1
	adds r0, r2, #0
	eors r0, r1
	lsls r5, r0, #0x18
_0808D126:
	adds r0, r4, #0
	str r2, [sp]
	bl GetUnit
	ldr r2, [sp]
	cmp r0, #0
	beq _0808D150
	ldr r0, [r0]
	cmp r0, #0
	beq _0808D150
	ldrb r0, [r0, #4]
	ldrb r1, [r6, #1]
	cmp r0, r1
	bne _0808D150
	lsrs r0, r5, #0x18
	b _0808D160
	.align 2, 0
_0808D148: .4byte gPlaySt
_0808D14C: .4byte 0x0868AF74
_0808D150:
	adds r4, #1
	cmp r4, #0x3f
	ble _0808D126
_0808D156:
	adds r7, #0x10
	adds r2, #1
	cmp r2, #1
	ble _0808D10C
_0808D15E:
	movs r0, #0xff
_0808D160:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_808D168
sub_808D168: @ 0x0808D168
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	bl SetInitTalkTextFont
	bl ClearTalkText
	bl EndTalk
	adds r0, r4, #0
	bl DecodeMsg
	adds r2, r0, #0
	movs r0, #0xa
	movs r1, #0xe
	adds r3, r5, #0
	bl StartTalkExt
	movs r0, #1
	bl SetTalkPrintColor
	movs r0, #1
	bl SetTalkFlag
	movs r0, #2
	bl SetTalkFlag
	movs r0, #4
	bl SetTalkFlag
	movs r0, #3
	bl SetTalkPrintDelay
	movs r0, #1
	bl SetActiveTalkFace
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808D1B8
sub_808D1B8: @ 0x0808D1B8
	push {r4, lr}
	adds r4, r0, #0
	bl SetInitTalkTextFont
	bl ClearTalkText
	bl EndTalk
	adds r0, r4, #0
	bl DecodeMsg
	adds r2, r0, #0
	movs r0, #0xa
	movs r1, #0xe
	bl StartTalk
	movs r0, #1
	bl SetTalkPrintColor
	movs r0, #1
	bl SetTalkFlag
	movs r0, #2
	bl SetTalkFlag
	movs r0, #4
	bl SetTalkFlag
	movs r0, #3
	bl SetTalkPrintDelay
	movs r0, #1
	bl SetActiveTalkFace
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808D204
sub_808D204: @ 0x0808D204
	push {lr}
	ldr r0, _0808D210 @ =0x0868AFBE
	bl InitBgs
	pop {r0}
	bx r0
	.align 2, 0
_0808D210: .4byte 0x0868AFBE

	thumb_func_start sub_808D214
sub_808D214: @ 0x0808D214
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sl, r0
	ldr r5, _0808D2FC @ =gDispIo
	adds r2, r5, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r5, #0
	adds r1, #0x44
	movs r3, #0
	movs r7, #0x10
	mov sb, r7
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	movs r2, #1
	movs r0, #1
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x46
	strb r3, [r0]
	ldr r0, _0808D300 @ =0x0000FFE0
	ldrh r1, [r5, #0x3c]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	ldr r1, _0808D304 @ =0x0000E0FF
	ands r0, r1
	movs r3, #0x80
	lsls r3, r3, #4
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r5, #0x3c]
	movs r7, #0x20
	mov r8, r7
	mov r0, r8
	ldrb r1, [r5, #1]
	orrs r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r5, #1]
	adds r1, r5, #0
	adds r1, #0x2d
	movs r0, #0x40
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x68
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x98
	strb r0, [r1]
	adds r6, r5, #0
	adds r6, #0x34
	ldrb r0, [r6]
	orrs r0, r2
	movs r4, #2
	orrs r0, r4
	movs r3, #4
	orrs r0, r3
	movs r1, #8
	orrs r0, r1
	mov r7, sb
	orrs r0, r7
	adds r5, #0x36
	ldrb r7, [r5]
	orrs r2, r7
	orrs r2, r4
	orrs r2, r3
	orrs r2, r1
	mov r1, sb
	orrs r2, r1
	mov r3, r8
	orrs r0, r3
	strb r0, [r6]
	movs r0, #0x21
	rsbs r0, r0, #0
	ands r2, r0
	strb r2, [r5]
	movs r0, #9
	movs r1, #0xd
	movs r2, #0x14
	movs r3, #6
	bl PutTalkBubbleTm
	movs r0, #8
	movs r1, #0x10
	movs r2, #2
	bl PutTalkBubbleTail
	movs r0, #2
	bl EnableBgSync
	mov r0, sl
	bl sub_808D954
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808D2FC: .4byte gDispIo
_0808D300: .4byte 0x0000FFE0
_0808D304: .4byte 0x0000E0FF

	thumb_func_start sub_808D308
sub_808D308: @ 0x0808D308
	push {lr}
	ldr r1, _0808D334 @ =0x0868AF58
	ldr r0, _0808D338 @ =0x020169CC
	movs r2, #0
	ldrsh r0, [r0, r2]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrb r2, [r0]
	lsls r1, r2, #3
	subs r1, #2
	ldrb r0, [r0, #1]
	lsls r2, r0, #3
	ldr r0, _0808D33C @ =0x020169DC
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #1
	beq _0808D340
	cmp r0, #2
	beq _0808D34A
	b _0808D352
	.align 2, 0
_0808D334: .4byte 0x0868AF58
_0808D338: .4byte 0x020169CC
_0808D33C: .4byte 0x020169DC
_0808D340:
	adds r0, r1, #0
	adds r1, r2, #0
	bl sub_80415CC
	b _0808D352
_0808D34A:
	adds r0, r1, #0
	adds r1, r2, #0
	bl sub_804163C
_0808D352:
	ldr r2, _0808D364 @ =0x0868AFA4
	movs r3, #0x82
	lsls r3, r3, #6
	movs r0, #0x20
	movs r1, #8
	bl PutOamHiRam
	pop {r0}
	bx r0
	.align 2, 0
_0808D364: .4byte 0x0868AFA4

	thumb_func_start sub_808D368
sub_808D368: @ 0x0808D368
	ldr r1, _0808D370 @ =0x020169DC
	movs r0, #1
	strb r0, [r1]
	bx lr
	.align 2, 0
_0808D370: .4byte 0x020169DC

	thumb_func_start sub_808D374
sub_808D374: @ 0x0808D374
	push {r4, r5, r6, lr}
	sub sp, #8
	ldr r0, _0808D544 @ =0x020169CE
	movs r1, #0
	strh r1, [r0]
	ldr r0, _0808D548 @ =0x020169DC
	strb r1, [r0]
	bl sub_808D0F8
	ldr r1, _0808D54C @ =0x020169DB
	strb r0, [r1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xff
	bne _0808D396
	movs r0, #2
	strb r0, [r1]
_0808D396:
	bl ResetText
	bl LoadUiFrameGraphics
	ldr r2, _0808D550 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _0808D554 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r5, _0808D558 @ =gBg1Tm
	adds r0, r5, #0
	movs r1, #0
	bl TmFill
	ldr r6, _0808D55C @ =gBg3Tm
	adds r0, r6, #0
	movs r1, #0
	bl TmFill
	ldr r4, _0808D560 @ =0x0833C01C
	adds r0, r4, #0
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	adds r4, #0x20
	movs r1, #0x90
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0808D564 @ =0x0833C09C
	ldr r1, _0808D568 @ =0x06011000
	bl Decompress
	ldr r4, _0808D56C @ =0x08336D5C
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r1, r2
	adds r0, r4, #0
	bl Decompress
	ldr r0, _0808D570 @ =0x06003000
	bl sub_80412B0
	bl LoadUiFrameGraphics
	ldr r1, _0808D574 @ =0x0833C1D8
	movs r4, #0x8c
	lsls r4, r4, #5
	adds r0, r5, #0
	adds r2, r4, #0
	bl TmApplyTsa_t
	adds r5, #0x56
	ldr r1, _0808D578 @ =0x0833C234
	adds r0, r5, #0
	adds r2, r4, #0
	bl TmApplyTsa_t
	movs r1, #0x80
	lsls r1, r1, #7
	adds r0, r6, #0
	bl sub_8090854
	bl ResetTextFont
	movs r6, #0
_0808D460:
	lsls r5, r6, #3
	ldr r0, _0808D57C @ =0x020169E0
	adds r5, r5, r0
	adds r0, r5, #0
	movs r1, #6
	bl InitText
	adds r0, r5, #0
	bl ClearText
	ldr r0, _0808D580 @ =0x0868AEB4
	lsls r4, r6, #2
	adds r0, r4, r0
	ldr r0, [r0]
	bl DecodeMsg
	ldr r1, _0808D584 @ =0x0868AF58
	adds r4, r4, r1
	ldrb r2, [r4, #1]
	lsls r1, r2, #5
	ldrb r4, [r4]
	adds r1, r4, r1
	lsls r1, r1, #1
	ldr r2, _0808D554 @ =gBg0Tm
	adds r1, r1, r2
	movs r2, #6
	str r2, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	adds r6, #1
	cmp r6, #6
	ble _0808D460
	ldr r1, _0808D588 @ =0x020169CC
	movs r0, #0
	strh r0, [r1]
	movs r0, #0
	movs r1, #0
	bl sub_808D6D4
	movs r0, #0x80
	lsls r0, r0, #2
	movs r1, #2
	movs r2, #1
	bl InitTalk
	ldr r1, _0808D58C @ =0x0868AF74
	ldr r0, _0808D54C @ =0x020169DB
	ldrb r0, [r0]
	lsls r0, r0, #4
	adds r0, r0, r1
	ldrb r0, [r0]
	movs r1, #1
	str r1, [sp]
	movs r1, #0x20
	movs r2, #0x50
	movs r3, #3
	bl StartTalkFace
	ldr r0, _0808D590 @ =0x0868AFD8
	movs r1, #3
	bl SpawnProc
	movs r0, #0xb
	bl EnableBgSync
	bl sub_808F33C
	ldr r5, _0808D594 @ =0x02016A2E
	ldr r4, _0808D598 @ =0x020169D4
	strb r0, [r4, #1]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	strh r0, [r5]
	bl sub_808F490
	strb r0, [r4, #2]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	strh r0, [r5, #2]
	bl sub_808F524
	strb r0, [r4, #3]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	strh r0, [r5, #4]
	bl sub_808F5AC
	strb r0, [r4, #4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	strh r0, [r5, #6]
	bl sub_808F600
	strb r0, [r4, #5]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	strh r0, [r5, #8]
	bl sub_808F68C
	strb r0, [r4, #6]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	strh r0, [r5, #0xa]
	bl sub_808F6E0
	strb r0, [r4]
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808D544: .4byte 0x020169CE
_0808D548: .4byte 0x020169DC
_0808D54C: .4byte 0x020169DB
_0808D550: .4byte gDispIo
_0808D554: .4byte gBg0Tm
_0808D558: .4byte gBg1Tm
_0808D55C: .4byte gBg3Tm
_0808D560: .4byte 0x0833C01C
_0808D564: .4byte 0x0833C09C
_0808D568: .4byte 0x06011000
_0808D56C: .4byte 0x08336D5C
_0808D570: .4byte 0x06003000
_0808D574: .4byte 0x0833C1D8
_0808D578: .4byte 0x0833C234
_0808D57C: .4byte 0x020169E0
_0808D580: .4byte 0x0868AEB4
_0808D584: .4byte 0x0868AF58
_0808D588: .4byte 0x020169CC
_0808D58C: .4byte 0x0868AF74
_0808D590: .4byte 0x0868AFD8
_0808D594: .4byte 0x02016A2E
_0808D598: .4byte 0x020169D4

	thumb_func_start sub_808D59C
sub_808D59C: @ 0x0808D59C
	push {r4, lr}
	adds r4, r0, #0
	ldr r3, _0808D5B0 @ =0x020169CE
	ldrh r1, [r3]
	cmp r1, #0
	beq _0808D5B4
	cmp r1, #1
	beq _0808D5D0
	b _0808D62A
	.align 2, 0
_0808D5B0: .4byte 0x020169CE
_0808D5B4:
	ldr r0, _0808D5C8 @ =0x020169D0
	strh r1, [r0]
	ldr r1, _0808D5CC @ =0x020169D2
	movs r0, #0x10
	strh r0, [r1]
	ldrh r0, [r3]
	adds r0, #1
	strh r0, [r3]
	b _0808D62A
	.align 2, 0
_0808D5C8: .4byte 0x020169D0
_0808D5CC: .4byte 0x020169D2
_0808D5D0:
	ldr r2, _0808D614 @ =0x020169D2
	ldrh r0, [r2]
	lsrs r1, r0, #2
	cmp r1, #0
	bne _0808D5DC
	movs r1, #1
_0808D5DC:
	cmp r0, #1
	bls _0808D620
	ldr r0, _0808D618 @ =0x020169D0
	ldrh r4, [r0]
	adds r3, r4, r1
	strh r3, [r0]
	ldrh r0, [r2]
	subs r4, r0, r1
	strh r4, [r2]
	ldr r1, _0808D61C @ =gDispIo
	mov ip, r1
	mov r2, ip
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x44
	movs r1, #0
	strb r3, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r0, #1
	strb r1, [r0]
	b _0808D62A
	.align 2, 0
_0808D614: .4byte 0x020169D2
_0808D618: .4byte 0x020169D0
_0808D61C: .4byte gDispIo
_0808D620:
	movs r0, #0
	strh r0, [r3]
	adds r0, r4, #0
	bl Proc_Break
_0808D62A:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_808D630
sub_808D630: @ 0x0808D630
	push {r4, r5, lr}
	ldr r5, _0808D640 @ =0x020169CE
	ldrh r1, [r5]
	cmp r1, #0
	beq _0808D644
	cmp r1, #1
	beq _0808D678
	b _0808D6CE
	.align 2, 0
_0808D640: .4byte 0x020169CE
_0808D644:
	bl IsTalkActive
	lsls r0, r0, #0x18
	asrs r4, r0, #0x18
	cmp r4, #0
	bne _0808D6CE
	bl ClearTalkText
	bl EndTalk
	movs r0, #1
	bl EnableBgSync
	ldr r1, _0808D670 @ =0x020169D0
	movs r0, #0x10
	strh r0, [r1]
	ldr r0, _0808D674 @ =0x020169D2
	strh r4, [r0]
	ldrh r0, [r5]
	adds r0, #1
	strh r0, [r5]
	b _0808D6CE
	.align 2, 0
_0808D670: .4byte 0x020169D0
_0808D674: .4byte 0x020169D2
_0808D678:
	ldr r3, _0808D6BC @ =0x020169D0
	ldrh r4, [r3]
	lsrs r1, r4, #2
	cmp r1, #0
	bne _0808D684
	movs r1, #1
_0808D684:
	adds r2, r4, #0
	cmp r2, #0
	beq _0808D6C8
	subs r4, r4, r1
	strh r4, [r3]
	ldr r0, _0808D6C0 @ =0x020169D2
	ldrh r2, [r0]
	adds r3, r2, r1
	strh r3, [r0]
	ldr r0, _0808D6C4 @ =gDispIo
	mov ip, r0
	mov r2, ip
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x44
	movs r1, #0
	strb r4, [r0]
	adds r0, #1
	strb r3, [r0]
	adds r0, #1
	strb r1, [r0]
	b _0808D6CE
	.align 2, 0
_0808D6BC: .4byte 0x020169D0
_0808D6C0: .4byte 0x020169D2
_0808D6C4: .4byte gDispIo
_0808D6C8:
	strh r2, [r5]
	bl Proc_Break
_0808D6CE:
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_808D6D4
sub_808D6D4: @ 0x0808D6D4
	push {r4, r5, r6, r7, lr}
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r5, r1, #0x10
	adds r6, r5, #0
	ldr r2, _0808D79C @ =0x000011DE
	ldr r3, _0808D7A0 @ =0x000011DD
	cmp r0, #3
	bhi _0808D6EE
	adds r1, r2, #0
	adds r2, r3, #0
	adds r3, r1, #0
_0808D6EE:
	ldr r7, _0808D7A4 @ =0x0868AF58
	lsls r0, r0, #2
	adds r0, r0, r7
	ldrb r1, [r0, #1]
	adds r1, #1
	lsls r1, r1, #5
	ldrb r0, [r0]
	adds r1, r0, r1
	subs r0, r1, #1
	ldr r4, _0808D7A8 @ =gBg1Tm
	lsls r0, r0, #1
	adds r0, r0, r4
	strh r2, [r0]
	lsls r0, r1, #1
	adds r0, r0, r4
	strh r3, [r0]
	adds r0, r1, #1
	lsls r0, r0, #1
	adds r0, r0, r4
	strh r2, [r0]
	adds r0, r1, #2
	lsls r0, r0, #1
	adds r0, r0, r4
	strh r3, [r0]
	adds r0, r1, #3
	lsls r0, r0, #1
	adds r0, r0, r4
	strh r2, [r0]
	adds r0, r1, #4
	lsls r0, r0, #1
	adds r0, r0, r4
	strh r3, [r0]
	adds r1, #5
	lsls r1, r1, #1
	adds r1, r1, r4
	strh r2, [r1]
	ldr r2, _0808D7AC @ =0x000011F8
	ldr r3, _0808D7B0 @ =0x000011FB
	cmp r5, #3
	bhi _0808D744
	adds r1, r2, #0
	adds r2, r3, #0
	adds r3, r1, #0
_0808D744:
	lsls r0, r6, #2
	adds r0, r0, r7
	ldrb r1, [r0, #1]
	adds r1, #1
	lsls r1, r1, #5
	ldrb r0, [r0]
	adds r1, r0, r1
	subs r0, r1, #1
	lsls r0, r0, #1
	adds r0, r0, r4
	strh r2, [r0]
	adds r2, #1
	adds r3, #1
	lsls r0, r1, #1
	adds r0, r0, r4
	strh r2, [r0]
	adds r0, r1, #1
	lsls r0, r0, #1
	adds r0, r0, r4
	strh r3, [r0]
	adds r0, r1, #2
	lsls r0, r0, #1
	adds r0, r0, r4
	strh r2, [r0]
	adds r0, r1, #3
	lsls r0, r0, #1
	adds r0, r0, r4
	strh r3, [r0]
	adds r0, r1, #4
	lsls r0, r0, #1
	adds r0, r0, r4
	strh r2, [r0]
	adds r3, #1
	adds r1, #5
	lsls r1, r1, #1
	adds r1, r1, r4
	strh r3, [r1]
	movs r0, #2
	bl EnableBgSync
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808D79C: .4byte 0x000011DE
_0808D7A0: .4byte 0x000011DD
_0808D7A4: .4byte 0x0868AF58
_0808D7A8: .4byte gBg1Tm
_0808D7AC: .4byte 0x000011F8
_0808D7B0: .4byte 0x000011FB

	thumb_func_start sub_808D7B4
sub_808D7B4: @ 0x0808D7B4
	push {lr}
	ldr r0, _0808D7E8 @ =0x0868AF74
	ldr r1, _0808D7EC @ =0x020169DB
	ldrb r1, [r1]
	lsls r1, r1, #4
	adds r0, #0xc
	adds r1, r1, r0
	ldr r0, _0808D7F0 @ =0x020169CC
	movs r2, #0
	ldrsh r0, [r0, r2]
	ldr r1, [r1]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	bl sub_808D1B8
	ldr r0, _0808D7F4 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808D7E4
	movs r0, #0x66
	bl m4aSongNumStart
_0808D7E4:
	pop {r0}
	bx r0
	.align 2, 0
_0808D7E8: .4byte 0x0868AF74
_0808D7EC: .4byte 0x020169DB
_0808D7F0: .4byte 0x020169CC
_0808D7F4: .4byte gPlaySt

	thumb_func_start sub_808D7F8
sub_808D7F8: @ 0x0808D7F8
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	movs r2, #4
	ldr r0, _0808D820 @ =gKeySt
	ldr r1, [r0]
	ldrh r0, [r1, #8]
	cmp r0, #1
	beq _0808D828
	cmp r0, #2
	beq _0808D858
	ldr r0, _0808D824 @ =0x020169CC
	movs r3, #0
	ldrsh r4, [r0, r3]
	ldrh r1, [r1, #6]
	adds r6, r0, #0
	cmp r1, #0x20
	beq _0808D8D0
	cmp r1, #0x20
	bgt _0808D89A
	b _0808D894
	.align 2, 0
_0808D820: .4byte gKeySt
_0808D824: .4byte 0x020169CC
_0808D828:
	bl ClearTalkText
	bl EndTalk
	ldr r1, _0808D850 @ =0x020169DC
	movs r0, #2
	strb r0, [r1]
	ldr r0, _0808D854 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808D846
	movs r0, #0x6a
	bl m4aSongNumStart
_0808D846:
	adds r0, r5, #0
	movs r1, #3
	bl Proc_Goto
	b _0808D8FA
	.align 2, 0
_0808D850: .4byte 0x020169DC
_0808D854: .4byte gPlaySt
_0808D858:
	bl ClearTalkText
	bl EndTalk
	ldr r0, _0808D88C @ =0x02022658
	movs r1, #0x15
	movs r2, #6
	movs r3, #0
	bl TmFillRect_t
	movs r0, #2
	bl EnableBgSync
	ldr r0, _0808D890 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808D882
	movs r0, #0x6b
	bl m4aSongNumStart
_0808D882:
	adds r0, r5, #0
	movs r1, #4
	bl Proc_Goto
	b _0808D8FA
	.align 2, 0
_0808D88C: .4byte 0x02022658
_0808D890: .4byte gPlaySt
_0808D894:
	cmp r1, #0x10
	beq _0808D8D0
	b _0808D8E0
_0808D89A:
	cmp r1, #0x40
	beq _0808D8A4
	cmp r1, #0x80
	beq _0808D8B8
	b _0808D8E0
_0808D8A4:
	cmp r4, #4
	bge _0808D8B0
	cmp r4, #0
	bne _0808D8B4
	movs r4, #3
	b _0808D8E0
_0808D8B0:
	cmp r4, #4
	ble _0808D8DA
_0808D8B4:
	subs r4, #1
	b _0808D8E0
_0808D8B8:
	cmp r4, #4
	bge _0808D8C4
	cmp r4, #3
	blt _0808D8C8
	movs r4, #0
	b _0808D8E0
_0808D8C4:
	cmp r4, #5
	bgt _0808D8CC
_0808D8C8:
	adds r4, #1
	b _0808D8E0
_0808D8CC:
	movs r4, #4
	b _0808D8E0
_0808D8D0:
	cmp r4, r2
	bge _0808D8DE
	adds r4, r4, r2
	cmp r4, #6
	ble _0808D8E0
_0808D8DA:
	movs r4, #6
	b _0808D8E0
_0808D8DE:
	subs r4, r4, r2
_0808D8E0:
	movs r1, #0
	ldrsh r0, [r6, r1]
	cmp r0, r4
	beq _0808D8FA
	ldrh r0, [r6]
	lsls r1, r4, #0x10
	lsrs r1, r1, #0x10
	bl sub_808D6D4
	strh r4, [r6]
	adds r0, r5, #0
	bl sub_808D7B4
_0808D8FA:
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_808D900
sub_808D900: @ 0x0808D900
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0808D91C @ =gKeySt
	ldr r1, [r0]
	movs r0, #2
	ldrh r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _0808D920
	adds r0, r4, #0
	movs r1, #4
	bl Proc_Goto
	b _0808D930
	.align 2, 0
_0808D91C: .4byte gKeySt
_0808D920:
	bl IsTalkActive
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0808D930
	adds r0, r4, #0
	bl Proc_Break
_0808D930:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808D938
sub_808D938: @ 0x0808D938
	push {r4, lr}
	adds r4, r0, #0
	bl IsTalkActive
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _0808D94C
	adds r0, r4, #0
	bl Proc_Break
_0808D94C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808D954
sub_808D954: @ 0x0808D954
	push {lr}
	adds r1, r0, #0
	ldr r2, _0808D970 @ =0x0868AF74
	ldr r0, _0808D974 @ =0x020169DB
	ldrb r0, [r0]
	lsls r0, r0, #4
	adds r2, #4
	adds r0, r0, r2
	ldr r0, [r0]
	ldr r0, [r0]
	bl sub_808D168
	pop {r0}
	bx r0
	.align 2, 0
_0808D970: .4byte 0x0868AF74
_0808D974: .4byte 0x020169DB

	thumb_func_start sub_808D978
sub_808D978: @ 0x0808D978
	push {lr}
	adds r1, r0, #0
	ldr r2, _0808D994 @ =0x0868AF74
	ldr r0, _0808D998 @ =0x020169DB
	ldrb r0, [r0]
	lsls r0, r0, #4
	adds r2, #4
	adds r0, r0, r2
	ldr r0, [r0]
	ldr r0, [r0, #4]
	bl sub_808D168
	pop {r0}
	bx r0
	.align 2, 0
_0808D994: .4byte 0x0868AF74
_0808D998: .4byte 0x020169DB

	thumb_func_start sub_808D99C
sub_808D99C: @ 0x0808D99C
	push {lr}
	adds r1, r0, #0
	ldr r0, _0808D9AC @ =0x000006FF
	bl sub_808D168
	pop {r0}
	bx r0
	.align 2, 0
_0808D9AC: .4byte 0x000006FF

	thumb_func_start sub_808D9B0
sub_808D9B0: @ 0x0808D9B0
	push {r4, lr}
	adds r1, r0, #0
	ldr r0, _0808D9E0 @ =0x0868AF74
	ldr r2, _0808D9E4 @ =0x020169DB
	ldrb r2, [r2]
	lsls r2, r2, #4
	adds r0, #8
	adds r2, r2, r0
	ldr r3, _0808D9E8 @ =0x020169D4
	ldr r0, _0808D9EC @ =0x020169CC
	movs r4, #0
	ldrsh r0, [r0, r4]
	adds r0, r0, r3
	ldr r2, [r2]
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r0, [r0]
	bl sub_808D168
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808D9E0: .4byte 0x0868AF74
_0808D9E4: .4byte 0x020169DB
_0808D9E8: .4byte 0x020169D4
_0808D9EC: .4byte 0x020169CC

	thumb_func_start sub_808D9F0
sub_808D9F0: @ 0x0808D9F0
	push {lr}
	adds r1, r0, #0
	ldr r2, _0808DA0C @ =0x0868AF74
	ldr r0, _0808DA10 @ =0x020169DB
	ldrb r0, [r0]
	lsls r0, r0, #4
	adds r2, #4
	adds r0, r0, r2
	ldr r0, [r0]
	ldr r0, [r0, #8]
	bl sub_808D168
	pop {r0}
	bx r0
	.align 2, 0
_0808DA0C: .4byte 0x0868AF74
_0808DA10: .4byte 0x020169DB

	thumb_func_start sub_808DA14
sub_808DA14: @ 0x0808DA14
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	mov sb, r0
	adds r4, r1, #0
	mov r8, r2
	adds r7, r3, #0
	ldr r0, [sp, #0x1c]
	lsls r0, r0, #5
	movs r1, #0x10
	bl Div
	adds r6, r0, #0
	mov r5, r8
	adds r0, r5, r7
	cmp r5, r0
	bge _0808DA84
	movs r0, #0x1f
	mov ip, r0
	lsls r1, r5, #1
	lsls r0, r4, #5
	add r0, sb
	adds r4, r1, r0
_0808DA44:
	ldrh r1, [r4]
	movs r3, #0x1f
	ands r3, r1
	lsls r1, r1, #0x10
	lsrs r2, r1, #0x15
	mov r0, ip
	ands r2, r0
	lsrs r1, r1, #0x1a
	ands r1, r0
	adds r0, r3, #0
	muls r0, r6, r0
	asrs r0, r0, #5
	subs r3, r3, r0
	adds r0, r2, #0
	muls r0, r6, r0
	asrs r0, r0, #5
	subs r2, r2, r0
	adds r0, r1, #0
	muls r0, r6, r0
	asrs r0, r0, #5
	subs r1, r1, r0
	lsls r2, r2, #5
	orrs r3, r2
	lsls r1, r1, #0xa
	orrs r3, r1
	strh r3, [r4]
	adds r4, #2
	adds r5, #1
	mov r1, r8
	adds r0, r1, r7
	cmp r5, r0
	blt _0808DA44
_0808DA84:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_808DA90
sub_808DA90: @ 0x0808DA90
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sl, r0
	adds r4, r1, #0
	mov sb, r2
	mov r8, r3
	ldr r0, [sp, #0x20]
	lsls r0, r0, #5
	movs r1, #0x10
	bl Div
	adds r7, r0, #0
	mov r5, sb
	mov r1, r8
	adds r0, r5, r1
	cmp r5, r0
	bge _0808DB06
	movs r0, #0x1f
	mov ip, r0
	movs r6, #0x1f
	lsls r1, r5, #1
	lsls r0, r4, #5
	add r0, sl
	adds r4, r1, r0
_0808DAC6:
	ldrh r1, [r4]
	adds r3, r6, #0
	ands r3, r1
	lsls r1, r1, #0x10
	lsrs r2, r1, #0x15
	mov r0, ip
	ands r2, r0
	lsrs r1, r1, #0x1a
	ands r1, r0
	subs r0, r6, r3
	muls r0, r7, r0
	asrs r0, r0, #5
	adds r3, r3, r0
	subs r0, r6, r2
	muls r0, r7, r0
	asrs r0, r0, #5
	adds r2, r2, r0
	subs r0, r6, r1
	muls r0, r7, r0
	asrs r0, r0, #5
	adds r1, r1, r0
	lsls r2, r2, #5
	orrs r3, r2
	lsls r1, r1, #0xa
	orrs r3, r1
	strh r3, [r4]
	adds r4, #2
	adds r5, #1
	mov r0, sb
	add r0, r8
	cmp r5, r0
	blt _0808DAC6
_0808DB06:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_808DB14
sub_808DB14: @ 0x0808DB14
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	adds r5, r0, #0
	adds r6, r1, #0
	mov r8, r2
	mov sb, r3
	ldr r7, [sp, #0x20]
	movs r4, #0x37
	str r4, [sp]
	movs r0, #1
	adds r1, r5, #0
	adds r2, r6, #0
	adds r3, r7, #0
	bl Interpolate
	adds r6, r0, #0
	str r4, [sp]
	movs r0, #1
	mov r1, r8
	mov r2, sb
	adds r3, r7, #0
	bl Interpolate
	adds r5, r0, #0
	ldr r0, _0808DB88 @ =0x0833C01C
	ldr r4, _0808DB8C @ =0x02021788
	adds r1, r4, #0
	movs r2, #8
	bl CpuFastSet
	subs r4, #0x80
	str r6, [sp]
	adds r0, r4, #0
	movs r1, #4
	movs r2, #0xa
	movs r3, #5
	bl sub_808DA90
	str r5, [sp]
	adds r0, r4, #0
	movs r1, #4
	movs r2, #2
	movs r3, #8
	bl sub_808DA14
	bl EnablePalSync
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808DB88: .4byte 0x0833C01C
_0808DB8C: .4byte 0x02021788

	thumb_func_start sub_808DB90
sub_808DB90: @ 0x0808DB90
	movs r1, #0
	strh r1, [r0, #0x2a]
	strh r1, [r0, #0x2c]
	bx lr

	thumb_func_start sub_808DB98
sub_808DB98: @ 0x0808DB98
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	movs r0, #0x2c
	ldrsh r5, [r4, r0]
	cmp r5, #5
	beq _0808DBDA
	cmp r5, #5
	bgt _0808DBB0
	cmp r5, #0
	beq _0808DBB6
	b _0808DC20
_0808DBB0:
	cmp r5, #0xa
	beq _0808DC1C
	b _0808DC20
_0808DBB6:
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #0
	movs r1, #5
	movs r2, #0
	movs r3, #4
	bl sub_808DB14
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x37
	ble _0808DC26
	strh r5, [r4, #0x2a]
	b _0808DC20
_0808DBDA:
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
	str r0, [sp]
	movs r0, #5
	movs r1, #0
	movs r2, #4
	movs r3, #0
	bl sub_808DB14
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x37
	ble _0808DC26
	movs r0, #0
	strh r0, [r4, #0x2a]
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	ldr r0, _0808DC18 @ =0x02016A18
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0808DC26
	adds r0, r4, #0
	bl Proc_Break
	b _0808DC26
	.align 2, 0
_0808DC18: .4byte 0x02016A18
_0808DC1C:
	movs r0, #0
	b _0808DC24
_0808DC20:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
_0808DC24:
	strh r0, [r4, #0x2c]
_0808DC26:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808DC30
sub_808DC30: @ 0x0808DC30
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r5, #0
	strh r5, [r4, #0x2a]
	bl GetCurrentBgmSong
	str r0, [r4, #0x30]
	ldr r0, _0808DC48 @ =0x02016A18
	strh r5, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0808DC48: .4byte 0x02016A18

	thumb_func_start sub_808DC4C
sub_808DC4C: @ 0x0808DC4C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0808DC6C @ =0x020169DB
	ldrb r0, [r0]
	cmp r0, #0
	bne _0808DCA6
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
	cmp r0, #0x1e
	beq _0808DC84
	cmp r0, #0x1e
	bgt _0808DC70
	cmp r0, #0
	beq _0808DC76
	b _0808DCFC
	.align 2, 0
_0808DC6C: .4byte 0x020169DB
_0808DC70:
	cmp r0, #0xd2
	beq _0808DC9C
	b _0808DCCA
_0808DC76:
	ldr r0, _0808DC80 @ =0x0868AFF0
	movs r1, #3
	bl SpawnProc
	b _0808DCFC
	.align 2, 0
_0808DC80: .4byte 0x0868AFF0
_0808DC84:
	ldr r0, _0808DC98 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808DCFC
	movs r0, #0x41
	bl m4aSongNumStart
	b _0808DCFC
	.align 2, 0
_0808DC98: .4byte gPlaySt
_0808DC9C:
	movs r0, #1
	rsbs r0, r0, #0
	bl FadeBgmOut
	b _0808DCFC
_0808DCA6:
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
	cmp r0, #0x69
	beq _0808DCD8
	cmp r0, #0x69
	bgt _0808DCBC
	cmp r0, #0
	beq _0808DCD0
	cmp r0, #0x41
	beq _0808DCD8
	b _0808DCFC
_0808DCBC:
	cmp r0, #0x96
	beq _0808DCD8
	cmp r0, #0x96
	bgt _0808DCCA
	cmp r0, #0x73
	beq _0808DCD8
	b _0808DCFC
_0808DCCA:
	cmp r0, #0xe6
	beq _0808DCF4
	b _0808DCFC
_0808DCD0:
	ldr r0, _0808DCEC @ =0x0868AFF0
	movs r1, #3
	bl SpawnProc
_0808DCD8:
	ldr r0, _0808DCF0 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0808DCFC
	movs r0, #0xee
	bl m4aSongNumStart
	b _0808DCFC
	.align 2, 0
_0808DCEC: .4byte 0x0868AFF0
_0808DCF0: .4byte gPlaySt
_0808DCF4:
	ldr r1, _0808DD20 @ =0x02016A18
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
_0808DCFC:
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	ldr r0, _0808DD20 @ =0x02016A18
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #0
	beq _0808DD1A
	ldr r0, [r4, #0x30]
	movs r1, #0
	bl StartBgm
	adds r0, r4, #0
	bl Proc_Break
_0808DD1A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808DD20: .4byte 0x02016A18

	thumb_func_start sub_808DD24
sub_808DD24: @ 0x0808DD24
	push {lr}
	bl ClearPutTalkText
	bl EndTalk
	bl ClearTalk
	ldr r0, _0808DD3C @ =0x0868AFD8
	bl Proc_EndEach
	pop {r0}
	bx r0
	.align 2, 0
_0808DD3C: .4byte 0x0868AFD8

	thumb_func_start sub_808DD40
sub_808DD40: @ 0x0808DD40
	push {r4, r5, r6, lr}
	movs r5, #0
	ldr r6, _0808DD70 @ =0x0868B3FC
	ldr r0, _0808DD74 @ =0x0868B420
	adds r4, r0, #0
	adds r4, #0xc
_0808DD4C:
	ldr r2, [r6]
	lsls r3, r5, #1
	adds r0, r2, #0
	adds r0, #0x42
	adds r0, r0, r3
	ldrb r1, [r4]
	strh r1, [r0]
	adds r2, #0x50
	adds r2, r2, r3
	ldrb r0, [r4, #1]
	strh r0, [r2]
	adds r4, #0x10
	adds r5, #1
	cmp r5, #6
	ble _0808DD4C
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808DD70: .4byte 0x0868B3FC
_0808DD74: .4byte 0x0868B420

	thumb_func_start sub_808DD78
sub_808DD78: @ 0x0808DD78
	push {r4, r5, r6, lr}
	movs r4, #0
	ldr r6, _0808DDF8 @ =0x0868B3FC
	ldr r0, _0808DDFC @ =0x0868B490
	adds r5, r0, #0
	adds r5, #0xc
_0808DD84:
	ldr r2, [r6]
	lsls r3, r4, #1
	adds r0, r2, #0
	adds r0, #0x42
	adds r0, r0, r3
	ldrb r1, [r5]
	strh r1, [r0]
	adds r2, #0x50
	adds r2, r2, r3
	ldrb r0, [r5, #1]
	strh r0, [r2]
	adds r5, #0x10
	adds r4, #1
	cmp r4, #3
	ble _0808DD84
	bl sub_808F3E8
	ldr r5, _0808DE00 @ =0x02016A2E
	ldr r4, _0808DDF8 @ =0x0868B3FC
	ldr r1, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, #0x6c
	strh r0, [r1]
	strh r0, [r5]
	bl sub_808F550
	ldr r1, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, #0x6e
	strh r0, [r1]
	strh r0, [r5, #2]
	bl sub_808F4B8
	ldr r1, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, #0x70
	strh r0, [r1]
	strh r0, [r5, #4]
	bl sub_808F73C
	ldr r1, [r4]
	adds r1, #0x72
	strh r0, [r1]
	movs r4, #0
_0808DDE2:
	adds r0, r4, #0
	movs r1, #0
	bl sub_808DF78
	adds r4, #1
	cmp r4, #3
	ble _0808DDE2
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808DDF8: .4byte 0x0868B3FC
_0808DDFC: .4byte 0x0868B490
_0808DE00: .4byte 0x02016A2E

	thumb_func_start sub_808DE04
sub_808DE04: @ 0x0808DE04
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	mov r8, r3
	movs r0, #8
	str r0, [sp]
	movs r0, #1
	adds r1, r4, #0
	adds r2, r5, #0
	adds r3, r6, #0
	bl Interpolate
	adds r5, r0, #0
	ldr r0, _0808DE54 @ =0x08342AB8
	mov r2, r8
	lsls r1, r2, #5
	ldr r4, _0808DE58 @ =gPal
	adds r1, r1, r4
	movs r2, #8
	bl CpuFastSet
	adds r0, r4, #0
	mov r1, r8
	movs r2, #1
	adds r3, r5, #0
	bl sub_805B644
	bl EnablePalSync
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808DE54: .4byte 0x08342AB8
_0808DE58: .4byte gPal

	thumb_func_start sub_808DE5C
sub_808DE5C: @ 0x0808DE5C
	movs r1, #0
	strh r1, [r0, #0x2a]
	strh r1, [r0, #0x2c]
	ldr r1, _0808DE6C @ =0x0868B5E0
	ldrb r1, [r1]
	strh r1, [r0, #0x2e]
	bx lr
	.align 2, 0
_0808DE6C: .4byte 0x0868B5E0

	thumb_func_start sub_808DE70
sub_808DE70: @ 0x0808DE70
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0x2a
	ldrsh r2, [r4, r0]
	ldrh r3, [r4, #0x36]
	adds r3, #0x14
	movs r0, #8
	movs r1, #0x10
	bl sub_808DE04
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #8
	ble _0808DE9C
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
_0808DE9C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808DEA4
sub_808DEA4: @ 0x0808DEA4
	push {r4, lr}
	sub sp, #0x48
	adds r4, r0, #0
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
	cmp r0, #8
	bgt _0808DEC6
	adds r2, r0, #0
	ldrh r3, [r4, #0x36]
	adds r3, #0x14
	movs r0, #0x10
	movs r1, #0
	bl sub_808DE04
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
_0808DEC6:
	movs r0, #0
	str r0, [sp, #0x1c]
	ldr r0, _0808DF30 @ =0x0868B5C8
	str r0, [sp, #0x3c]
	mov r1, sp
	movs r2, #0x32
	ldrsh r0, [r4, r2]
	adds r0, #7
	lsls r0, r0, #3
	strh r0, [r1, #2]
	movs r3, #0x34
	ldrsh r0, [r4, r3]
	adds r0, #1
	lsls r0, r0, #3
	strh r0, [r1, #4]
	mov r2, sp
	movs r1, #0x2c
	ldrsh r0, [r4, r1]
	lsls r0, r0, #2
	movs r3, #0x80
	lsls r3, r3, #1
	adds r0, r0, r3
	ldr r3, _0808DF34 @ =0xFFFFC000
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2, #8]
	mov r0, sp
	bl BasPutOam
	ldrh r0, [r4, #0x2e]
	subs r0, #1
	strh r0, [r4, #0x2e]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0808DF28
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	ldr r1, _0808DF38 @ =0x0868B5E0
	movs r2, #0x2c
	ldrsh r0, [r4, r2]
	adds r0, r0, r1
	ldrb r0, [r0]
	strh r0, [r4, #0x2e]
	cmp r0, #0
	bne _0808DF28
	adds r0, r4, #0
	bl Proc_Break
_0808DF28:
	add sp, #0x48
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808DF30: .4byte 0x0868B5C8
_0808DF34: .4byte 0xFFFFC000
_0808DF38: .4byte 0x0868B5E0

	thumb_func_start sub_808DF3C
sub_808DF3C: @ 0x0808DF3C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	lsls r6, r6, #0x10
	lsrs r6, r6, #0x10
	ldr r0, _0808DF70 @ =0x08342AD8
	movs r1, #0xe0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0808DF74 @ =0x0868B5E8
	movs r1, #3
	bl SpawnProc
	strh r4, [r0, #0x36]
	strh r5, [r0, #0x32]
	strh r6, [r0, #0x34]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808DF70: .4byte 0x08342AD8
_0808DF74: .4byte 0x0868B5E8

	thumb_func_start sub_808DF78
sub_808DF78: @ 0x0808DF78
	push {lr}
	adds r3, r0, #0
	ldr r0, _0808DFB8 @ =0x0868B3FC
	ldr r0, [r0]
	mov ip, r0
	lsls r2, r3, #1
	adds r0, #0x5e
	adds r0, r0, r2
	strh r1, [r0]
	lsls r0, r3, #2
	mov r2, ip
	adds r2, #0x7c
	adds r2, r2, r0
	ldr r0, _0808DFBC @ =0x0868B4D0
	lsls r1, r1, #3
	adds r1, r1, r0
	ldr r0, [r1]
	str r0, [r2]
	mov r0, ip
	adds r0, #0x98
	adds r0, r0, r3
	ldrb r1, [r1, #4]
	strb r1, [r0]
	ldr r0, _0808DFC0 @ =0x08342AB8
	adds r3, #0x14
	lsls r3, r3, #5
	adds r1, r3, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r0}
	bx r0
	.align 2, 0
_0808DFB8: .4byte 0x0868B3FC
_0808DFBC: .4byte 0x0868B4D0
_0808DFC0: .4byte 0x08342AB8

	thumb_func_start sub_808DFC4
sub_808DFC4: @ 0x0808DFC4
	movs r1, #0
	strh r1, [r0, #0x2a]
	bx lr
	.align 2, 0

	thumb_func_start sub_808DFCC
sub_808DFCC: @ 0x0808DFCC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	movs r0, #0x80
	lsls r0, r0, #1
	mov r8, r0
	movs r1, #0x2a
	ldrsh r3, [r7, r1]
	movs r2, #8
	str r2, [sp]
	movs r0, #5
	movs r1, #2
	mov r2, r8
	bl Interpolate
	mov sb, r0
	ldr r4, _0808E0A0 @ =gSinLut
	movs r0, #0x80
	adds r0, r0, r4
	mov sl, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r2, sl
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0x1f
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	ldr r0, _0808E0A4 @ =gKeySt
	ldr r1, [r0]
	movs r0, #1
	ldrh r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _0808E068
	ldrh r0, [r7, #0x2a]
	adds r0, #1
	strh r0, [r7, #0x2a]
_0808E068:
	ldrh r0, [r7, #0x2a]
	adds r1, r0, #1
	strh r1, [r7, #0x2a]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #7
	ble _0808E0CA
	movs r2, #8
	strh r2, [r7, #0x2a]
	ldr r0, _0808E0A8 @ =0x0868B3FC
	ldr r1, [r0]
	adds r0, r7, #0
	adds r0, #0x9f
	ldrb r3, [r0]
	lsls r2, r3, #1
	adds r0, r1, #0
	adds r0, #0x5e
	adds r0, r0, r2
	adds r1, #0x6c
	adds r1, r1, r2
	ldrh r0, [r0]
	ldrh r1, [r1]
	cmp r0, r1
	bhs _0808E0AC
	adds r0, r7, #0
	bl Proc_Break
	b _0808E0CA
	.align 2, 0
_0808E0A0: .4byte gSinLut
_0808E0A4: .4byte gKeySt
_0808E0A8: .4byte 0x0868B3FC
_0808E0AC:
	cmp r3, #5
	bhi _0808E0C2
	cmp r0, #3
	bls _0808E0C2
	movs r0, #0x32
	ldrsh r1, [r7, r0]
	movs r0, #0x34
	ldrsh r2, [r7, r0]
	adds r0, r3, #0
	bl sub_808DF3C
_0808E0C2:
	adds r0, r7, #0
	movs r1, #1
	bl Proc_Goto
_0808E0CA:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808E0DC
sub_808E0DC: @ 0x0808E0DC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	movs r0, #0x80
	lsls r0, r0, #1
	mov r8, r0
	movs r1, #0x2a
	ldrsh r0, [r7, r1]
	movs r3, #0x11
	subs r3, r3, r0
	movs r0, #8
	str r0, [sp]
	movs r0, #5
	movs r1, #2
	mov r2, r8
	bl Interpolate
	mov sb, r0
	ldr r4, _0808E1C4 @ =gSinLut
	movs r2, #0x80
	adds r2, r2, r4
	mov sl, r2
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r2, sl
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0x1f
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	ldr r0, _0808E1C8 @ =gKeySt
	ldr r1, [r0]
	movs r0, #1
	ldrh r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _0808E17C
	ldrh r0, [r7, #0x2a]
	adds r0, #1
	strh r0, [r7, #0x2a]
_0808E17C:
	ldrh r0, [r7, #0x2a]
	adds r1, r0, #1
	strh r1, [r7, #0x2a]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xf
	ble _0808E1B4
	movs r0, #0x10
	strh r0, [r7, #0x2a]
	ldr r0, _0808E1CC @ =0x0868B3FC
	ldr r0, [r0]
	adds r1, r7, #0
	adds r1, #0x9f
	ldrb r2, [r1]
	lsls r1, r2, #1
	adds r0, #0x5e
	adds r0, r0, r1
	ldrh r1, [r0]
	cmp r1, #5
	bgt _0808E1B4
	adds r1, #1
	adds r0, r2, #0
	bl sub_808DF78
	adds r0, r7, #0
	movs r1, #0
	bl Proc_Goto
_0808E1B4:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808E1C4: .4byte gSinLut
_0808E1C8: .4byte gKeySt
_0808E1CC: .4byte 0x0868B3FC

	thumb_func_start sub_808E1D0
sub_808E1D0: @ 0x0808E1D0
	ldr r0, _0808E1E0 @ =0x0868B3FC
	ldr r0, [r0]
	adds r0, #0x9f
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	bx lr
	.align 2, 0
_0808E1E0: .4byte 0x0868B3FC

	thumb_func_start sub_808E1E4
sub_808E1E4: @ 0x0808E1E4
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	sub sp, #4
	ldr r4, _0808E260 @ =gSinLut
	movs r0, #0x80
	adds r0, r0, r4
	mov sb, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	movs r1, #2
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	movs r1, #0x80
	lsls r1, r1, #1
	mov r8, r1
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	movs r1, #2
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, sb
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0x1f
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808E260: .4byte gSinLut

	thumb_func_start sub_808E264
sub_808E264: @ 0x0808E264
	push {lr}
	adds r1, r0, #0
	ldr r0, _0808E280 @ =0x0868B3FC
	ldr r0, [r0]
	adds r0, #0x9f
	ldrb r0, [r0]
	cmp r0, #4
	bhi _0808E27C
	adds r0, r1, #0
	movs r1, #2
	bl Proc_Goto
_0808E27C:
	pop {r0}
	bx r0
	.align 2, 0
_0808E280: .4byte 0x0868B3FC

	thumb_func_start sub_808E284
sub_808E284: @ 0x0808E284
	push {r4, lr}
	adds r1, r0, #0
	ldr r0, _0808E2C8 @ =0x0868B610
	bl SpawnProcLocking
	ldr r2, _0808E2CC @ =0x0868B3FC
	ldr r1, [r2]
	adds r1, #0x9f
	ldrb r1, [r1]
	adds r3, r0, #0
	adds r3, #0x9f
	strb r1, [r3]
	ldr r3, [r2]
	movs r1, #0x9f
	adds r1, r1, r3
	mov ip, r1
	ldrb r4, [r1]
	lsls r2, r4, #1
	adds r1, r3, #0
	adds r1, #0x42
	adds r1, r1, r2
	ldrh r1, [r1]
	strh r1, [r0, #0x32]
	mov r1, ip
	ldrb r1, [r1]
	lsls r2, r1, #1
	adds r1, r3, #0
	adds r1, #0x50
	adds r1, r1, r2
	ldrh r1, [r1]
	strh r1, [r0, #0x34]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808E2C8: .4byte 0x0868B610
_0808E2CC: .4byte 0x0868B3FC

	thumb_func_start sub_808E2D0
sub_808E2D0: @ 0x0808E2D0
	push {lr}
	adds r1, r0, #0
	ldr r0, _0808E2EC @ =0x0868B3FC
	ldr r0, [r0]
	adds r0, #0x9f
	ldrb r0, [r0]
	cmp r0, #5
	bls _0808E2E8
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Goto
_0808E2E8:
	pop {r0}
	bx r0
	.align 2, 0
_0808E2EC: .4byte 0x0868B3FC

	thumb_func_start nullsub_46
nullsub_46: @ 0x0808E2F0
	bx lr
	.align 2, 0

	thumb_func_start sub_808E2F4
sub_808E2F4: @ 0x0808E2F4
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	sub sp, #4
	movs r0, #0x80
	lsls r0, r0, #1
	mov r8, r0
	str r0, [sp]
	movs r0, #0xa
	mov r1, r8
	movs r2, #0
	movs r3, #0
	bl SetObjAffine
	ldr r4, _0808E388 @ =gSinLut
	movs r1, #0x80
	adds r1, r1, r4
	mov sb, r1
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	movs r1, #2
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	movs r1, #2
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, sb
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0x1f
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	ldr r0, _0808E38C @ =0x0868B648
	movs r1, #3
	bl SpawnProc
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808E388: .4byte gSinLut
_0808E38C: .4byte 0x0868B648

	thumb_func_start sub_808E390
sub_808E390: @ 0x0808E390
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	movs r6, #0
	ldr r1, _0808E41C @ =0x0868B3FC
	ldr r0, [r1]
	adds r0, #0x9f
	ldrb r0, [r0]
	adds r0, #1
	cmp r6, r0
	bge _0808E414
	adds r7, r1, #0
_0808E3A6:
	ldr r3, [r7]
	lsls r1, r6, #1
	adds r0, r3, #0
	adds r0, #0x42
	adds r0, r0, r1
	movs r2, #0
	ldrsh r0, [r0, r2]
	adds r0, #6
	lsls r5, r0, #3
	adds r0, r3, #0
	adds r0, #0x50
	adds r0, r0, r1
	movs r2, #0
	ldrsh r0, [r0, r2]
	lsls r4, r0, #3
	adds r0, r3, #0
	adds r0, #0x9f
	ldrb r0, [r0]
	cmp r6, r0
	bne _0808E3DA
	movs r0, #0xf8
	lsls r0, r0, #6
	orrs r5, r0
	movs r0, #0x80
	lsls r0, r0, #1
	orrs r4, r0
_0808E3DA:
	adds r0, r3, #0
	adds r0, #0x5e
	adds r0, r0, r1
	ldrh r0, [r0]
	lsls r2, r0, #1
	adds r2, #0xc0
	lsls r1, r6, #2
	adds r0, r3, #0
	adds r0, #0x7c
	adds r0, r0, r1
	ldr r3, [r0]
	adds r0, r6, #4
	movs r1, #0xf
	ands r0, r1
	lsls r0, r0, #0xc
	orrs r0, r2
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	adds r2, r4, #0
	bl PutSpriteExt
	adds r6, #1
	ldr r0, [r7]
	adds r0, #0x9f
	ldrb r0, [r0]
	adds r0, #1
	cmp r6, r0
	blt _0808E3A6
_0808E414:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808E41C: .4byte 0x0868B3FC

	thumb_func_start sub_808E420
sub_808E420: @ 0x0808E420
	movs r1, #0
	strh r1, [r0, #0x2a]
	ldr r1, _0808E430 @ =0x02016A28
	ldrh r1, [r1]
	subs r1, #1
	strh r1, [r0, #0x2c]
	bx lr
	.align 2, 0
_0808E430: .4byte 0x02016A28

	thumb_func_start sub_808E434
sub_808E434: @ 0x0808E434
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldrh r0, [r7, #0x2a]
	adds r1, r0, #1
	strh r1, [r7, #0x2a]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #7
	ble _0808E456
	adds r0, r7, #0
	bl Proc_Break
_0808E456:
	movs r0, #0x80
	lsls r0, r0, #1
	mov r8, r0
	movs r1, #0x2a
	ldrsh r3, [r7, r1]
	movs r0, #8
	str r0, [sp]
	movs r0, #5
	movs r1, #2
	mov r2, r8
	bl Interpolate
	mov sl, r0
	ldr r4, _0808E4E4 @ =gSinLut
	movs r2, #0x80
	adds r2, r2, r4
	mov sb, r2
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r1, sl
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r2, sb
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	mov r1, sl
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	movs r2, #0x2c
	ldrsh r1, [r7, r2]
	str r0, [sp]
	adds r0, r1, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808E4E4: .4byte gSinLut

	thumb_func_start sub_808E4E8
sub_808E4E8: @ 0x0808E4E8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r1, _0808E5DC @ =0x02016A28
	movs r0, #0
	strh r0, [r1]
	movs r0, #0
	strh r0, [r7, #0x2c]
	strh r0, [r7, #0x2e]
	ldr r1, _0808E5E0 @ =0x0868B5B0
	ldr r0, _0808E5E4 @ =0x02016A2A
	ldrh r0, [r0]
	lsls r0, r0, #3
	adds r0, r0, r1
	ldr r2, [r0]
	movs r1, #0x2e
	ldrsh r0, [r7, r1]
	lsls r0, r0, #2
	adds r0, r0, r2
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	movs r1, #1
	rsbs r1, r1, #0
	cmp r0, r1
	beq _0808E53C
_0808E524:
	ldrh r0, [r7, #0x2e]
	adds r0, #1
	strh r0, [r7, #0x2e]
	movs r3, #0x2e
	ldrsh r0, [r7, r3]
	lsls r0, r0, #2
	adds r0, r0, r2
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, r1
	bne _0808E524
_0808E53C:
	movs r0, #0
	mov r8, r0
	movs r1, #0x2e
	ldrsh r0, [r7, r1]
	cmp r8, r0
	bge _0808E5CC
	movs r2, #0x80
	lsls r2, r2, #1
	mov sb, r2
	ldr r3, _0808E5E8 @ =gSinLut
	mov sl, r3
_0808E552:
	mov r0, sb
	str r0, [sp]
	mov r0, r8
	mov r1, sb
	movs r2, #0
	movs r3, #0
	bl SetObjAffine
	ldr r1, _0808E5EC @ =gSinLut+0x80
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	mov r3, sl
	movs r1, #0
	ldrsh r0, [r3, r1]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	movs r1, #2
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	mov r2, sl
	movs r3, #0
	ldrsh r0, [r2, r3]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	ldr r1, _0808E5EC @ =gSinLut+0x80
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	movs r1, #2
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	mov r0, r8
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	movs r3, #1
	add r8, r3
	movs r1, #0x2e
	ldrsh r0, [r7, r1]
	cmp r8, r0
	blt _0808E552
_0808E5CC:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808E5DC: .4byte 0x02016A28
_0808E5E0: .4byte 0x0868B5B0
_0808E5E4: .4byte 0x02016A2A
_0808E5E8: .4byte gSinLut
_0808E5EC: .4byte gSinLut+0x80

	thumb_func_start sub_808E5F0
sub_808E5F0: @ 0x0808E5F0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r4, r0, #0
	movs r7, #0
	ldr r1, _0808E6B8 @ =0x02016A1E
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r1, [r1]
	subs r1, r0, r1
	ldr r0, _0808E6BC @ =0x02016A2A
	ldrh r0, [r0]
	cmp r0, #0
	bne _0808E61E
	adds r1, #0x80
	ldr r0, _0808E6C0 @ =0x000001FF
	ands r1, r0
	ldr r2, _0808E6C4 @ =0x0868B720
	ldr r3, _0808E6C8 @ =0x00002084
	movs r0, #0xa2
	bl PutOamHiRam
_0808E61E:
	ldrh r0, [r4, #0x2c]
	adds r0, #1
	strh r0, [r4, #0x2c]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xe
	bgt _0808E646
	strh r7, [r4, #0x2c]
	ldr r2, _0808E6CC @ =0x02016A28
	ldrh r1, [r2]
	movs r3, #0x2e
	ldrsh r0, [r4, r3]
	cmp r1, r0
	bge _0808E646
	adds r0, r1, #1
	strh r0, [r2]
	ldr r0, _0808E6D0 @ =0x0868B700
	movs r1, #3
	bl SpawnProc
_0808E646:
	ldr r2, _0808E6D4 @ =0x0868B5B0
	ldr r0, _0808E6BC @ =0x02016A2A
	ldrh r0, [r0]
	lsls r0, r0, #3
	adds r0, r0, r2
	ldr r1, [r0]
	movs r6, #0
	ldr r0, _0808E6CC @ =0x02016A28
	ldrh r0, [r0]
	cmp r6, r0
	bge _0808E6AA
	mov r8, r2
	adds r4, r1, #0
_0808E660:
	ldr r0, _0808E6BC @ =0x02016A2A
	ldrh r0, [r0]
	lsls r1, r0, #3
	add r1, r8
	ldrb r0, [r1, #4]
	adds r2, r0, r7
	lsls r0, r6, #9
	adds r3, r2, r0
	ldrb r1, [r1, #5]
	movs r0, #0x84
	lsls r0, r0, #1
	adds r2, r1, r0
	ldrb r0, [r4, #2]
	ldr r5, _0808E6D8 @ =0x0868B410
	cmp r0, #0
	beq _0808E682
	ldr r5, _0808E6DC @ =0x0868B418
_0808E682:
	movs r0, #0
	ldrsb r0, [r4, r0]
	lsls r0, r0, #1
	movs r1, #0xc6
	lsls r1, r1, #6
	adds r0, r0, r1
	str r0, [sp]
	movs r0, #4
	adds r1, r3, #0
	adds r3, r5, #0
	bl PutSpriteExt
	ldrb r3, [r4, #1]
	adds r7, r3, r7
	adds r4, #4
	adds r6, #1
	ldr r0, _0808E6CC @ =0x02016A28
	ldrh r0, [r0]
	cmp r6, r0
	blt _0808E660
_0808E6AA:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808E6B8: .4byte 0x02016A1E
_0808E6BC: .4byte 0x02016A2A
_0808E6C0: .4byte 0x000001FF
_0808E6C4: .4byte 0x0868B720
_0808E6C8: .4byte 0x00002084
_0808E6CC: .4byte 0x02016A28
_0808E6D0: .4byte 0x0868B700
_0808E6D4: .4byte 0x0868B5B0
_0808E6D8: .4byte 0x0868B410
_0808E6DC: .4byte 0x0868B418

	thumb_func_start sub_808E6E0
sub_808E6E0: @ 0x0808E6E0
	push {lr}
	ldr r2, _0808E6F4 @ =0x0868B720
	ldr r3, _0808E6F8 @ =0x00002084
	movs r0, #0x58
	movs r1, #0x3e
	bl PutOamHiRam
	pop {r0}
	bx r0
	.align 2, 0
_0808E6F4: .4byte 0x0868B720
_0808E6F8: .4byte 0x00002084

	thumb_func_start sub_808E6FC
sub_808E6FC: @ 0x0808E6FC
	push {lr}
	ldr r0, _0808E70C @ =0x0868B750
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_0808E70C: .4byte 0x0868B750

	thumb_func_start sub_808E710
sub_808E710: @ 0x0808E710
	ldr r2, _0808E72C @ =0x0868B3FC
	ldr r0, [r2]
	movs r1, #0
	str r1, [r0, #0x38]
	str r1, [r0, #0x3c]
	adds r0, #0x40
	strb r1, [r0]
	ldr r0, [r2]
	adds r0, #0x41
	strb r1, [r0]
	ldr r0, [r2]
	adds r0, #0x9f
	strb r1, [r0]
	bx lr
	.align 2, 0
_0808E72C: .4byte 0x0868B3FC

	thumb_func_start sub_808E730
sub_808E730: @ 0x0808E730
	push {r4, lr}
	ldr r3, _0808E798 @ =0x0868B3FC
	ldr r0, [r3]
	adds r0, #0x40
	ldrb r1, [r0]
	adds r1, #3
	strb r1, [r0]
	ldr r0, [r3]
	adds r0, #0x41
	ldrb r1, [r0]
	adds r1, #1
	strb r1, [r0]
	ldr r0, [r3]
	mov ip, r0
	mov r2, ip
	adds r2, #0x40
	ldrb r4, [r2]
	lsrs r1, r4, #2
	mov r4, ip
	ldr r0, [r4, #0x38]
	adds r0, r0, r1
	str r0, [r4, #0x38]
	mov r0, ip
	adds r0, #0x41
	ldrb r0, [r0]
	lsrs r1, r0, #2
	ldr r0, [r4, #0x3c]
	adds r0, r0, r1
	str r0, [r4, #0x3c]
	movs r1, #3
	adds r0, r1, #0
	ldrb r4, [r2]
	ands r0, r4
	strb r0, [r2]
	ldr r0, [r3]
	adds r0, #0x41
	ldrb r2, [r0]
	ands r1, r2
	strb r1, [r0]
	ldr r2, [r3]
	ldr r1, [r2, #0x38]
	movs r0, #0xff
	ands r1, r0
	ldr r2, [r2, #0x3c]
	ands r2, r0
	movs r0, #2
	bl SetBgOffset
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808E798: .4byte 0x0868B3FC

	thumb_func_start sub_808E79C
sub_808E79C: @ 0x0808E79C
	push {r4, r5, r6, lr}
	ldr r6, _0808E7C8 @ =0x0868B3FC
	movs r5, #0xa0
	movs r4, #7
_0808E7A4:
	ldr r0, [r6]
	adds r0, r0, r5
	movs r1, #0xf
	bl InitText
	adds r5, #8
	subs r4, #1
	cmp r4, #0
	bge _0808E7A4
	ldr r0, _0808E7C8 @ =0x0868B3FC
	ldr r0, [r0]
	adds r0, #0xe0
	movs r1, #3
	bl InitText
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808E7C8: .4byte 0x0868B3FC

	thumb_func_start sub_808E7CC
sub_808E7CC: @ 0x0808E7CC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x14
	mov sb, r0
	mov r8, r1
	lsls r2, r2, #0x18
	lsrs r4, r2, #0x18
	str r4, [sp, #0x10]
	movs r6, #0
	cmp r1, #0x32
	bne _0808E818
	ldr r7, _0808E814 @ =0x00000BA1
	adds r0, r7, #0
	bl DecodeMsg
	bl GetStringTextLen
	adds r5, r0, #0
	cmp r4, #0
	beq _0808E800
	movs r0, #0x30
	subs r0, r0, r5
	asrs r6, r0, #1
_0808E800:
	adds r0, r7, #0
	bl DecodeMsg
	adds r3, r0, #0
	mov r0, sb
	adds r1, r6, #0
	movs r2, #0
	bl Text_InsertDrawString
	b _0808E91E
	.align 2, 0
_0808E814: .4byte 0x00000BA1
_0808E818:
	ldr r0, _0808E930 @ =0x00000B9E
	bl DecodeMsg
	bl GetStringTextLen
	str r0, [sp]
	adds r5, r0, #0
	mov r0, r8
	asrs r4, r0, #1
	adds r0, r4, #0
	movs r1, #0xa
	bl __divsi3
	adds r7, r0, #0
	adds r0, r4, #0
	movs r1, #0xa
	bl __modsi3
	adds r4, r0, #0
	cmp r7, #0
	beq _0808E858
	ldr r1, _0808E934 @ =0x0868B788
	lsls r0, r7, #1
	adds r0, r0, r1
	ldrh r0, [r0]
	bl DecodeMsg
	bl GetStringTextLen
	subs r0, #1
	str r0, [sp, #4]
	adds r5, r5, r0
_0808E858:
	lsls r0, r4, #1
	ldr r1, _0808E934 @ =0x0868B788
	adds r0, r0, r1
	mov sl, r0
	ldrh r0, [r0]
	bl DecodeMsg
	bl GetStringTextLen
	subs r0, #1
	str r0, [sp, #8]
	adds r5, r5, r0
	ldr r0, _0808E938 @ =0x00000B9F
	bl DecodeMsg
	bl GetStringTextLen
	str r0, [sp, #0xc]
	adds r5, r5, r0
	movs r4, #1
	mov r0, r8
	ands r4, r0
	cmp r4, #0
	beq _0808E896
	movs r0, #0xba
	lsls r0, r0, #4
	bl DecodeMsg
	bl GetStringTextLen
	adds r5, r5, r0
_0808E896:
	ldr r1, [sp, #0x10]
	cmp r1, #0
	beq _0808E8A2
	movs r0, #0x30
	subs r0, r0, r5
	asrs r6, r0, #1
_0808E8A2:
	ldr r0, _0808E930 @ =0x00000B9E
	bl DecodeMsg
	adds r3, r0, #0
	mov r0, sb
	adds r1, r6, #0
	movs r2, #0
	bl Text_InsertDrawString
	ldr r0, [sp]
	adds r6, r6, r0
	cmp r7, #0
	beq _0808E8D8
	lsls r0, r7, #1
	ldr r1, _0808E934 @ =0x0868B788
	adds r0, r0, r1
	ldrh r0, [r0]
	bl DecodeMsg
	adds r3, r0, #0
	mov r0, sb
	adds r1, r6, #0
	movs r2, #0
	bl Text_InsertDrawString
	ldr r0, [sp, #4]
	adds r6, r6, r0
_0808E8D8:
	mov r1, sl
	ldrh r0, [r1]
	bl DecodeMsg
	adds r3, r0, #0
	mov r0, sb
	adds r1, r6, #0
	movs r2, #0
	bl Text_InsertDrawString
	ldr r0, [sp, #8]
	adds r6, r6, r0
	ldr r0, _0808E938 @ =0x00000B9F
	bl DecodeMsg
	adds r3, r0, #0
	mov r0, sb
	adds r1, r6, #0
	movs r2, #0
	bl Text_InsertDrawString
	ldr r0, [sp, #0xc]
	adds r6, r6, r0
	cmp r4, #0
	beq _0808E91E
	movs r0, #0xba
	lsls r0, r0, #4
	bl DecodeMsg
	adds r3, r0, #0
	mov r0, sb
	adds r1, r6, #0
	movs r2, #0
	bl Text_InsertDrawString
_0808E91E:
	adds r0, r5, #0
	add sp, #0x14
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0808E930: .4byte 0x00000B9E
_0808E934: .4byte 0x0868B788
_0808E938: .4byte 0x00000B9F

	thumb_func_start sub_808E93C
sub_808E93C: @ 0x0808E93C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov sl, r0
	ldr r7, _0808E95C @ =0x02016A24
	ldrh r4, [r7]
	bl sub_80848DC
	cmp r4, r0
	blt _0808E960
	movs r0, #1
	b _0808EA58
	.align 2, 0
_0808E95C: .4byte 0x02016A24
_0808E960:
	ldrh r0, [r7]
	bl sub_80848BC
	mov sb, r0
	movs r6, #7
	ldrh r0, [r7]
	ands r6, r0
	ldr r1, _0808EA68 @ =0x0868B3FC
	mov r8, r1
	lsls r6, r6, #3
	adds r6, #0xa0
	ldr r0, [r1]
	adds r0, r0, r6
	bl ClearText
	mov r2, r8
	ldr r0, [r2]
	adds r0, #0xe0
	bl ClearText
	mov r3, sb
	ldr r0, [r3]
	lsls r0, r0, #0x1a
	lsrs r0, r0, #0x1a
	bl GetChapterInfo
	adds r0, #0x3e
	ldrb r1, [r0]
	mov r2, r8
	ldr r0, [r2]
	adds r0, r0, r6
	movs r2, #1
	bl sub_808E7CC
	mov r3, sb
	ldr r0, [r3]
	lsls r0, r0, #0x1a
	lsrs r0, r0, #0x1a
	bl GetChapterInfo
	ldrh r0, [r0, #0x38]
	bl DecodeMsg
	bl GetStringTextLen
	movs r4, #0x46
	subs r4, r4, r0
	lsrs r0, r4, #0x1f
	adds r4, r4, r0
	asrs r4, r4, #1
	mov r0, r8
	ldr r5, [r0]
	adds r5, r5, r6
	adds r4, #0x28
	mov r1, sb
	ldr r0, [r1]
	lsls r0, r0, #0x1a
	lsrs r0, r0, #0x1a
	bl GetChapterInfo
	ldrh r0, [r0, #0x38]
	bl DecodeMsg
	adds r3, r0, #0
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #0
	bl Text_InsertDrawString
	mov r2, r8
	ldr r0, [r2]
	adds r0, r0, r6
	mov r3, sl
	lsls r5, r3, #6
	ldr r4, _0808EA6C @ =0x02021B0A
	adds r1, r5, r4
	bl PutText
	adds r0, r4, #0
	adds r0, #0x1e
	adds r0, r5, r0
	mov r1, sb
	ldr r2, [r1]
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x16
	movs r1, #2
	bl PutNumber
	ldr r0, _0808EA70 @ =0x00000725
	bl DecodeMsg
	adds r3, r0, #0
	mov r2, r8
	ldr r0, [r2]
	adds r0, #0xe0
	adds r1, r4, #0
	adds r1, #0x20
	adds r1, r5, r1
	movs r2, #3
	str r2, [sp]
	str r3, [sp, #4]
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	adds r4, #0x26
	adds r5, r5, r4
	movs r0, #0xb4
	mov r3, sb
	ldrh r3, [r3, #2]
	adds r2, r3, #0
	muls r2, r0, r2
	adds r0, r5, #0
	movs r1, #2
	movs r3, #1
	bl PutTime
	ldrh r0, [r7]
	adds r0, #1
	strh r0, [r7]
	movs r0, #1
	bl EnableBgSync
	movs r0, #0
_0808EA58:
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0808EA68: .4byte 0x0868B3FC
_0808EA6C: .4byte 0x02021B0A
_0808EA70: .4byte 0x00000725

	thumb_func_start sub_808EA74
sub_808EA74: @ 0x0808EA74
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	adds r7, r0, #0
	bl sub_808F33C
	ldr r6, _0808EB84 @ =0x02016A2E
	ldr r4, _0808EB88 @ =0x0868B3FC
	ldr r1, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, #0x6c
	strh r0, [r1]
	strh r0, [r6]
	bl sub_808F490
	ldr r1, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, #0x6e
	strh r0, [r1]
	strh r0, [r6, #2]
	bl sub_808F524
	ldr r1, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, #0x70
	strh r0, [r1]
	strh r0, [r6, #4]
	bl sub_808F5AC
	ldr r1, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, #0x72
	strh r0, [r1]
	strh r0, [r6, #6]
	bl sub_808F600
	ldr r1, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, #0x74
	strh r0, [r1]
	strh r0, [r6, #8]
	bl sub_808F68C
	ldr r1, [r4]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, #0x76
	strh r0, [r1]
	strh r0, [r6, #0xa]
	movs r6, #0
_0808EAE6:
	adds r0, r6, #0
	movs r1, #0
	bl sub_808DF78
	adds r6, #1
	cmp r6, #5
	ble _0808EAE6
	bl sub_808F6E0
	ldr r4, _0808EB88 @ =0x0868B3FC
	ldr r1, [r4]
	adds r1, #0x78
	strh r0, [r1]
	movs r0, #6
	movs r1, #0
	bl sub_808DF78
	movs r6, #0
	subs r7, #6
	mov sb, r7
	mov r8, r4
	ldr r5, _0808EB8C @ =0x0868B420
	movs r7, #0xe8
_0808EB14:
	mov r1, r8
	ldr r0, [r1]
	adds r0, r0, r7
	movs r1, #6
	bl InitText
	mov r2, r8
	ldr r0, [r2]
	adds r0, r0, r7
	bl ClearText
	ldrh r0, [r5]
	bl DecodeMsg
	str r0, [sp, #8]
	mov r4, r8
	ldr r3, [r4]
	adds r0, r3, r7
	lsls r4, r6, #1
	adds r1, r3, #0
	adds r1, #0x50
	adds r1, r1, r4
	movs r2, #0
	ldrsh r1, [r1, r2]
	add r1, sb
	movs r2, #0x1f
	ands r1, r2
	lsls r1, r1, #5
	adds r3, #0x42
	adds r3, r3, r4
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r1, r1, r2
	lsls r1, r1, #1
	ldr r2, _0808EB90 @ =gBg0Tm
	adds r1, r1, r2
	ldr r2, [r5, #4]
	movs r3, #6
	str r3, [sp]
	ldr r3, [sp, #8]
	str r3, [sp, #4]
	movs r3, #0
	bl PutDrawText
	adds r5, #0x10
	adds r7, #8
	adds r6, #1
	cmp r6, #6
	ble _0808EB14
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808EB84: .4byte 0x02016A2E
_0808EB88: .4byte 0x0868B3FC
_0808EB8C: .4byte 0x0868B420
_0808EB90: .4byte gBg0Tm

	thumb_func_start sub_808EB94
sub_808EB94: @ 0x0808EB94
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	sub sp, #8
	adds r6, r0, #0
	movs r0, #6
	mov sb, r0
	adds r6, #0x16
	ldr r4, _0808EC10 @ =0x0868B3FC
	movs r5, #0x8c
	lsls r5, r5, #1
	ldr r0, [r4]
	adds r0, r0, r5
	movs r1, #6
	bl InitText
	ldr r0, [r4]
	adds r0, r0, r5
	bl ClearText
	ldr r2, _0808EC14 @ =0x0868B420
	mov r8, r2
	mov r0, r8
	adds r0, #0x60
	ldrh r0, [r0]
	bl DecodeMsg
	ldr r3, [r4]
	adds r5, r3, r5
	adds r1, r3, #0
	adds r1, #0x5c
	movs r4, #0
	ldrsh r1, [r1, r4]
	adds r1, r1, r6
	movs r2, #0x1f
	ands r1, r2
	lsls r1, r1, #5
	adds r3, #0x4e
	movs r4, #0
	ldrsh r2, [r3, r4]
	adds r1, r1, r2
	lsls r1, r1, #1
	ldr r2, _0808EC18 @ =gBg0Tm
	adds r1, r1, r2
	mov r3, r8
	ldr r2, [r3, #0x64]
	mov r4, sb
	str r4, [sp]
	str r0, [sp, #4]
	adds r0, r5, #0
	movs r3, #0
	bl PutDrawText
	add sp, #8
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808EC10: .4byte 0x0868B3FC
_0808EC14: .4byte 0x0868B420
_0808EC18: .4byte gBg0Tm

	thumb_func_start sub_808EC1C
sub_808EC1C: @ 0x0808EC1C
	push {r4, r5, r6, r7, lr}
	movs r6, #0
	bl sub_80848DC
	adds r5, r0, #0
	movs r4, #0
	cmp r6, r5
	bge _0808EC40
	movs r7, #0xb4
_0808EC2E:
	adds r0, r4, #0
	bl sub_80848BC
	ldrh r0, [r0, #2]
	muls r0, r7, r0
	adds r6, r6, r0
	adds r4, #1
	cmp r4, r5
	blt _0808EC2E
_0808EC40:
	adds r0, r6, #0
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_808EC48
sub_808EC48: @ 0x0808EC48
	push {r4, lr}
	adds r4, r0, #0
	bl sub_808EC1C
	adds r2, r0, #0
	adds r4, #3
	movs r0, #0x1f
	ands r4, r0
	lsls r4, r4, #6
	ldr r0, _0808EC74 @ =0x02021B30
	adds r4, r4, r0
	adds r0, r4, #0
	movs r1, #2
	movs r3, #1
	bl PutTime
	movs r0, #1
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808EC74: .4byte 0x02021B30

	thumb_func_start sub_808EC78
sub_808EC78: @ 0x0808EC78
	push {r4, r5, r6, lr}
	subs r0, #0x50
	lsls r0, r0, #2
	movs r2, #0xf0
	lsls r2, r2, #2
	ands r0, r2
	adds r1, r0, #0
	adds r1, #0x40
	ands r1, r2
	ldr r2, _0808ECCC @ =gBg0Tm
	movs r5, #0
	adds r3, r1, #0
	adds r3, #0x20
	lsls r1, r1, #1
	adds r4, r1, r2
	adds r1, r0, #0
	adds r1, #0x20
	lsls r0, r0, #1
	adds r0, r0, r2
	movs r6, #0x1f
	lsls r1, r1, #1
	adds r1, r1, r2
	lsls r3, r3, #1
	adds r3, r3, r2
_0808ECA8:
	strh r5, [r0]
	strh r5, [r1]
	strh r5, [r4]
	strh r5, [r3]
	adds r3, #2
	adds r4, #2
	adds r1, #2
	adds r0, #2
	subs r6, #1
	cmp r6, #0
	bge _0808ECA8
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808ECCC: .4byte gBg0Tm

	thumb_func_start sub_808ECD0
sub_808ECD0: @ 0x0808ECD0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x28
	str r0, [sp]
	lsls r2, r2, #0x10
	movs r3, #0
	lsrs r2, r2, #4
	mov ip, r2
_0808ECE6:
	movs r2, #0
	lsls r0, r3, #8
	str r0, [sp, #0x10]
	adds r3, #1
	str r3, [sp, #8]
_0808ECF0:
	lsls r0, r2, #3
	ldr r3, [sp, #0x10]
	adds r0, r3, r0
	movs r6, #0
	str r6, [sp, #4]
	adds r2, #1
	str r2, [sp, #0xc]
	lsls r2, r0, #1
	adds r0, r2, #0
	adds r0, #0xc0
	ldr r7, [sp]
	adds r0, r0, r7
	str r0, [sp, #0x14]
	adds r0, r2, #0
	adds r0, #0x80
	adds r0, r0, r7
	str r0, [sp, #0x18]
	adds r0, r2, #0
	adds r0, #0x40
	adds r0, r0, r7
	str r0, [sp, #0x1c]
	adds r2, r2, r7
	mov r0, ip
	adds r0, #0xe0
	adds r0, r0, r1
	mov sl, r0
	mov r0, ip
	adds r0, #0xc0
	adds r0, r0, r1
	mov sb, r0
	mov r0, ip
	adds r0, #0xa0
	adds r0, r0, r1
	mov r8, r0
	mov r0, ip
	adds r0, #0x80
	adds r0, r1, r0
	str r0, [sp, #0x20]
	mov r0, ip
	adds r0, #0x60
	adds r0, r1, r0
	str r0, [sp, #0x24]
	mov r0, ip
	adds r0, #0x40
	adds r5, r1, r0
	subs r0, #0x20
	adds r4, r1, r0
	mov r0, ip
	adds r3, r1, r0
_0808ED52:
	strh r3, [r2]
	ldr r6, [sp, #0x1c]
	strh r4, [r6]
	ldr r7, [sp, #0x18]
	strh r5, [r7]
	mov r0, sp
	ldrh r6, [r0, #0x24]
	ldr r0, [sp, #0x14]
	strh r6, [r0]
	movs r7, #0x80
	lsls r7, r7, #1
	adds r0, r2, r7
	mov r6, sp
	ldrh r6, [r6, #0x20]
	strh r6, [r0]
	adds r7, #0x40
	adds r0, r2, r7
	mov r6, r8
	strh r6, [r0]
	adds r7, #0x40
	adds r0, r2, r7
	mov r6, sb
	strh r6, [r0]
	adds r7, #0x40
	adds r0, r2, r7
	mov r6, sl
	strh r6, [r0]
	ldr r7, [sp, #0x14]
	adds r7, #2
	str r7, [sp, #0x14]
	ldr r0, [sp, #0x18]
	adds r0, #2
	str r0, [sp, #0x18]
	ldr r6, [sp, #0x1c]
	adds r6, #2
	str r6, [sp, #0x1c]
	adds r2, #2
	movs r7, #1
	add sl, r7
	movs r0, #1
	add sb, r0
	add r8, r0
	ldr r6, [sp, #0x20]
	adds r6, #1
	str r6, [sp, #0x20]
	ldr r7, [sp, #0x24]
	adds r7, #1
	str r7, [sp, #0x24]
	adds r5, #1
	adds r4, #1
	adds r3, #1
	ldr r0, [sp, #4]
	adds r0, #1
	str r0, [sp, #4]
	cmp r0, #7
	ble _0808ED52
	ldr r2, [sp, #0xc]
	cmp r2, #3
	ble _0808ECF0
	ldr r3, [sp, #8]
	cmp r3, #3
	ble _0808ECE6
	add sp, #0x28
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808EDE0
sub_808EDE0: @ 0x0808EDE0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	bl ResetText
	bl LoadUiFrameGraphics
	bl ResetTextFont
	bl sub_808E79C
	ldr r7, _0808EFE8 @ =gDispIo
	movs r4, #1
	ldrb r0, [r7, #1]
	orrs r0, r4
	movs r1, #2
	mov sb, r1
	mov r2, sb
	orrs r0, r2
	movs r5, #4
	mov sl, r5
	mov r1, sl
	orrs r0, r1
	movs r2, #8
	orrs r0, r2
	movs r5, #0x10
	mov r8, r5
	mov r1, r8
	orrs r0, r1
	strb r0, [r7, #1]
	ldr r0, _0808EFEC @ =0x02016A24
	movs r6, #0
	strh r6, [r0]
	ldr r0, _0808EFF0 @ =0x02016A26
	strh r6, [r0]
	ldr r0, _0808EFF4 @ =0x02016A2C
	strb r6, [r0]
	ldr r1, _0808EFF8 @ =0x02016A1C
	movs r0, #0x80
	strh r0, [r1]
	ldr r5, _0808EFFC @ =0x02016A1E
	movs r0, #0xe0
	strh r0, [r5]
	ldr r1, _0808F000 @ =0x02016A20
	movs r0, #0xff
	strh r0, [r1]
	movs r0, #0
	movs r1, #0
	movs r2, #0x80
	bl SetBgOffset
	ldrh r2, [r5]
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r2, #0x20
	ldrb r0, [r7, #1]
	orrs r0, r2
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	adds r0, r7, #0
	adds r0, #0x2d
	strb r6, [r0]
	adds r1, r7, #0
	adds r1, #0x31
	movs r0, #0x18
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x88
	strb r0, [r1]
	adds r1, #4
	ldrb r5, [r1]
	orrs r4, r5
	mov r0, sb
	orrs r4, r0
	mov r5, sl
	orrs r4, r5
	movs r0, #8
	orrs r4, r0
	mov r5, r8
	orrs r4, r5
	adds r3, r7, #0
	adds r3, #0x36
	subs r0, #0xa
	ldrb r5, [r3]
	ands r0, r5
	mov r5, sb
	orrs r0, r5
	mov r5, sl
	orrs r0, r5
	movs r5, #8
	orrs r0, r5
	mov r5, r8
	orrs r0, r5
	orrs r4, r2
	strb r4, [r1]
	orrs r0, r2
	strb r0, [r3]
	ldr r0, _0808F004 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r5, _0808F008 @ =gBg1Tm
	adds r0, r5, #0
	movs r1, #0
	bl TmFill
	ldr r0, _0808F00C @ =gBg2Tm
	mov r8, r0
	movs r1, #0
	bl TmFill
	ldr r1, _0808F010 @ =gBg3Tm
	mov sl, r1
	mov r0, sl
	movs r1, #0
	bl TmFill
	adds r2, r7, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r7, #0
	adds r1, #0x44
	movs r0, #6
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x46
	strb r6, [r0]
	ldr r0, _0808F014 @ =0x0000FFE0
	ldrh r2, [r7, #0x3c]
	ands r0, r2
	movs r1, #4
	orrs r0, r1
	ldr r1, _0808F018 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r7, #0x3c]
	bl sub_808DD40
	ldr r0, _0808F01C @ =0x0834138C
	movs r1, #0x80
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, _0808F020 @ =0x08341DA0
	movs r1, #0xc0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0808F024 @ =0x0833C03C
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r4, _0808F028 @ =0x08342A98
	movs r1, #0x98
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r1, #0xd8
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0808F02C @ =0x083092CC
	ldr r1, _0808F030 @ =0x06011000
	bl Decompress
	ldr r0, _0808F034 @ =0x08342438
	ldr r1, _0808F038 @ =0x06011800
	bl Decompress
	ldr r0, _0808F03C @ =0x08341DC0
	ldr r1, _0808F040 @ =0x06013000
	bl Decompress
	ldr r0, _0808F044 @ =0x083413CC
	ldr r1, _0808F048 @ =0x0600D000
	bl Decompress
	ldr r4, _0808F04C @ =0x0833C984
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r1, _0808F050 @ =0x00000426
	adds r5, r5, r1
	ldr r1, _0808F054 @ =0x08342AF8
	movs r2, #0x80
	lsls r2, r2, #5
	adds r0, r5, #0
	bl TmApplyTsa_t
	movs r1, #0xa0
	lsls r1, r1, #2
	mov r0, r8
	movs r2, #6
	bl sub_808ECD0
	ldr r1, _0808F058 @ =0x08340ED8
	movs r2, #0x80
	lsls r2, r2, #7
	mov r0, sl
	bl TmApplyTsa_t
	ldr r0, _0808F05C @ =0x0868B768
	movs r1, #3
	bl SpawnProc
	movs r0, #0xf
	bl EnableBgSync
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808EFE8: .4byte gDispIo
_0808EFEC: .4byte 0x02016A24
_0808EFF0: .4byte 0x02016A26
_0808EFF4: .4byte 0x02016A2C
_0808EFF8: .4byte 0x02016A1C
_0808EFFC: .4byte 0x02016A1E
_0808F000: .4byte 0x02016A20
_0808F004: .4byte gBg0Tm
_0808F008: .4byte gBg1Tm
_0808F00C: .4byte gBg2Tm
_0808F010: .4byte gBg3Tm
_0808F014: .4byte 0x0000FFE0
_0808F018: .4byte 0x0000E0FF
_0808F01C: .4byte 0x0834138C
_0808F020: .4byte 0x08341DA0
_0808F024: .4byte 0x0833C03C
_0808F028: .4byte 0x08342A98
_0808F02C: .4byte 0x083092CC
_0808F030: .4byte 0x06011000
_0808F034: .4byte 0x08342438
_0808F038: .4byte 0x06011800
_0808F03C: .4byte 0x08341DC0
_0808F040: .4byte 0x06013000
_0808F044: .4byte 0x083413CC
_0808F048: .4byte 0x0600D000
_0808F04C: .4byte 0x0833C984
_0808F050: .4byte 0x00000426
_0808F054: .4byte 0x08342AF8
_0808F058: .4byte 0x08340ED8
_0808F05C: .4byte 0x0868B768

	thumb_func_start sub_808F060
sub_808F060: @ 0x0808F060
	push {r4, lr}
	movs r4, #0
	movs r1, #4
	strh r1, [r0, #0x2e]
	strh r4, [r0, #0x30]
	ldr r2, _0808F08C @ =0x02016A1C
	ldr r1, _0808F090 @ =0x02016A22
	movs r0, #0x7a
	strh r0, [r1]
	strh r0, [r2]
	movs r0, #0
	bl sub_808E93C
	ldr r0, _0808F094 @ =0x02016A24
	strh r4, [r0]
	movs r0, #1
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808F08C: .4byte 0x02016A1C
_0808F090: .4byte 0x02016A22
_0808F094: .4byte 0x02016A24

	thumb_func_start sub_808F098
sub_808F098: @ 0x0808F098
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	movs r1, #0x30
	ldrsh r0, [r4, r1]
	cmp r0, #0
	beq _0808F0B0
	ldr r0, _0808F12C @ =0x02016A1C
	ldrh r0, [r0]
	bl sub_808EC78
	movs r0, #0
	strh r0, [r4, #0x30]
_0808F0B0:
	ldr r7, _0808F130 @ =0x02016A26
	ldrh r0, [r7]
	cmp r0, #8
	bhi _0808F0CC
	ldrh r0, [r4, #0x2e]
	adds r1, r0, #1
	strh r1, [r4, #0x2e]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #3
	bgt _0808F0C8
	b _0808F220
_0808F0C8:
	movs r0, #0
	strh r0, [r4, #0x2e]
_0808F0CC:
	ldr r5, _0808F12C @ =0x02016A1C
	ldrh r2, [r5]
	adds r2, #1
	strh r2, [r5]
	movs r6, #0xff
	ands r2, r6
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	ldrh r1, [r7]
	cmp r1, #0xc
	bls _0808F0F8
	ldr r0, _0808F134 @ =0x02016A1E
	ldrh r2, [r0]
	adds r2, #1
	strh r2, [r0]
	ands r2, r6
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
_0808F0F8:
	ldr r2, _0808F138 @ =0x02016A22
	ldrh r5, [r5]
	ldrh r1, [r2]
	subs r0, r5, r1
	movs r1, #0xf0
	ands r0, r1
	asrs r1, r0, #3
	ldr r0, _0808F13C @ =0x02016A20
	adds r3, r0, #0
	ldrh r0, [r3]
	cmp r1, r0
	bne _0808F112
	b _0808F220
_0808F112:
	strh r1, [r3]
	movs r0, #1
	strh r0, [r4, #0x30]
	ldrh r0, [r7]
	cmp r0, #0xe
	bls _0808F120
	b _0808F218
_0808F120:
	lsls r0, r0, #2
	ldr r1, _0808F140 @ =_0808F144
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_0808F12C: .4byte 0x02016A1C
_0808F130: .4byte 0x02016A26
_0808F134: .4byte 0x02016A1E
_0808F138: .4byte 0x02016A22
_0808F13C: .4byte 0x02016A20
_0808F140: .4byte _0808F144
_0808F144: @ jump table
	.4byte _0808F180 @ case 0
	.4byte _0808F218 @ case 1
	.4byte _0808F218 @ case 2
	.4byte _0808F218 @ case 3
	.4byte _0808F218 @ case 4
	.4byte _0808F218 @ case 5
	.4byte _0808F218 @ case 6
	.4byte _0808F218 @ case 7
	.4byte _0808F18E @ case 8
	.4byte _0808F1A4 @ case 9
	.4byte _0808F218 @ case 10
	.4byte _0808F1BC @ case 11
	.4byte _0808F218 @ case 12
	.4byte _0808F1C4 @ case 13
	.4byte _0808F1EC @ case 14
_0808F180:
	ldrh r0, [r3]
	bl sub_808E93C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _0808F220
	b _0808F218
_0808F18E:
	ldr r0, _0808F1A0 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl EnableBgSync
	b _0808F218
	.align 2, 0
_0808F1A0: .4byte gBg0Tm
_0808F1A4:
	movs r1, #0x80
	strh r1, [r2]
	ldr r0, _0808F1B8 @ =0x02016A1C
	strh r1, [r0]
	movs r0, #0
	strh r0, [r3]
	bl sub_808EA74
	b _0808F218
	.align 2, 0
_0808F1B8: .4byte 0x02016A1C
_0808F1BC:
	ldrh r0, [r3]
	bl sub_808EB94
	b _0808F218
_0808F1C4:
	ldrh r0, [r3]
	bl sub_808EC48
	ldr r2, _0808F1E8 @ =gDispIo
	adds r2, #0x36
	movs r0, #1
	ldrb r1, [r2]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2]
	b _0808F218
	.align 2, 0
_0808F1E8: .4byte gDispIo
_0808F1EC:
	ldr r1, _0808F20C @ =0x02016A2A
	movs r0, #0
	strh r0, [r1]
	ldr r0, _0808F210 @ =0x0868B730
	movs r1, #3
	bl SpawnProc
	ldr r0, _0808F214 @ =0x0868B6D8
	movs r1, #3
	bl SpawnProc
	adds r0, r4, #0
	bl Proc_Break
	b _0808F220
	.align 2, 0
_0808F20C: .4byte 0x02016A2A
_0808F210: .4byte 0x0868B730
_0808F214: .4byte 0x0868B6D8
_0808F218:
	ldr r1, _0808F228 @ =0x02016A26
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
_0808F220:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808F228: .4byte 0x02016A26

	thumb_func_start sub_808F22C
sub_808F22C: @ 0x0808F22C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0808F254 @ =gKeySt
	ldr r1, [r0]
	movs r0, #3
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0808F25C
	ldr r0, _0808F258 @ =0x0868B3FC
	ldr r0, [r0]
	adds r0, #0x9f
	ldrb r0, [r0]
	cmp r0, #6
	bne _0808F25C
	adds r0, r4, #0
	bl Proc_Break
	b _0808F270
	.align 2, 0
_0808F254: .4byte gKeySt
_0808F258: .4byte 0x0868B3FC
_0808F25C:
	bl sub_8036DEC
	cmp r0, #0
	beq _0808F270
	ldr r1, _0808F278 @ =0x02016A2C
	movs r0, #1
	strb r0, [r1]
	adds r0, r4, #0
	bl Proc_Break
_0808F270:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808F278: .4byte 0x02016A2C

	thumb_func_start sub_808F27C
sub_808F27C: @ 0x0808F27C
	push {lr}
	ldr r0, _0808F298 @ =0x0868B5E8
	bl Proc_EndEach
	ldr r0, _0808F29C @ =0x0868B88C
	bl Proc_EndEach
	ldr r0, _0808F2A0 @ =0x0868B610
	bl Proc_EndEach
	bl EndGreenText
	pop {r0}
	bx r0
	.align 2, 0
_0808F298: .4byte 0x0868B5E8
_0808F29C: .4byte 0x0868B88C
_0808F2A0: .4byte 0x0868B610

	thumb_func_start sub_808F2A4
sub_808F2A4: @ 0x0808F2A4
	push {lr}
	ldr r0, _0808F2D4 @ =0x0868B648
	bl Proc_EndEach
	ldr r0, _0808F2D8 @ =0x0868B768
	bl Proc_EndEach
	ldr r0, _0808F2DC @ =0x0868B730
	bl Proc_EndEach
	ldr r0, _0808F2E0 @ =0x0868B6D8
	bl Proc_EndEach
	ldr r0, _0808F2E4 @ =0x0868B80C
	bl Proc_EndEach
	ldr r0, _0808F2E8 @ =0x0868B8AC
	bl Proc_EndEach
	ldr r0, _0808F2EC @ =0x0868B750
	bl Proc_EndEach
	pop {r0}
	bx r0
	.align 2, 0
_0808F2D4: .4byte 0x0868B648
_0808F2D8: .4byte 0x0868B768
_0808F2DC: .4byte 0x0868B730
_0808F2E0: .4byte 0x0868B6D8
_0808F2E4: .4byte 0x0868B80C
_0808F2E8: .4byte 0x0868B8AC
_0808F2EC: .4byte 0x0868B750

	thumb_func_start sub_808F2F0
sub_808F2F0: @ 0x0808F2F0
	push {lr}
	adds r1, r0, #0
	ldr r0, _0808F308 @ =0x02016A2C
	ldrb r0, [r0]
	cmp r0, #0
	bne _0808F304
	adds r0, r1, #0
	movs r1, #1
	bl Proc_Goto
_0808F304:
	pop {r0}
	bx r0
	.align 2, 0
_0808F308: .4byte 0x02016A2C

	thumb_func_start sub_808F30C
sub_808F30C: @ 0x0808F30C
	push {r4, r5, r6, lr}
	movs r6, #0
	bl sub_80848DC
	adds r5, r0, #0
	movs r4, #0
	cmp r6, r5
	bge _0808F330
_0808F31C:
	adds r0, r4, #0
	bl sub_80848BC
	ldr r0, [r0]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x16
	adds r6, r6, r0
	adds r4, #1
	cmp r4, r5
	blt _0808F31C
_0808F330:
	lsls r0, r6, #0x10
	lsrs r0, r0, #0x10
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_808F33C
sub_808F33C: @ 0x0808F33C
	push {r4, r5, r6, r7, lr}
	sub sp, #0x10
	bl sub_808F30C
	lsls r0, r0, #0x10
	lsrs r7, r0, #0x10
	movs r1, #0
	add r0, sp, #0xc
_0808F34C:
	str r1, [r0]
	subs r0, #4
	cmp r0, sp
	bge _0808F34C
	bl sub_80848DC
	adds r6, r0, #0
	movs r4, #0
	cmp r4, r6
	bge _0808F3C6
	ldr r5, _0808F3E4 @ =ChapterInfoTable
_0808F362:
	adds r0, r4, #0
	bl sub_80848BC
	ldr r2, [r0]
	lsls r2, r2, #0x1a
	lsrs r2, r2, #0x1a
	lsls r1, r2, #4
	adds r1, r1, r2
	lsls r1, r1, #2
	adds r1, r1, r5
	ldr r2, [sp]
	ldrb r1, [r1, #0x1e]
	adds r2, r1, r2
	str r2, [sp]
	ldr r2, [r0]
	lsls r2, r2, #0x1a
	lsrs r2, r2, #0x1a
	lsls r1, r2, #4
	adds r1, r1, r2
	lsls r1, r1, #2
	adds r1, r1, r5
	ldr r2, [sp, #4]
	ldrb r1, [r1, #0x1d]
	adds r2, r1, r2
	str r2, [sp, #4]
	ldr r2, [r0]
	lsls r2, r2, #0x1a
	lsrs r2, r2, #0x1a
	lsls r1, r2, #4
	adds r1, r1, r2
	lsls r1, r1, #2
	adds r1, r1, r5
	ldr r2, [sp, #8]
	ldrb r1, [r1, #0x1c]
	adds r2, r1, r2
	str r2, [sp, #8]
	ldr r1, [r0]
	lsls r1, r1, #0x1a
	lsrs r1, r1, #0x1a
	lsls r0, r1, #4
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r1, [sp, #0xc]
	ldrb r0, [r0, #0x1b]
	adds r1, r0, r1
	str r1, [sp, #0xc]
	adds r4, #1
	cmp r4, r6
	blt _0808F362
_0808F3C6:
	movs r4, #0
	mov r1, sp
_0808F3CA:
	ldr r0, [r1]
	cmp r7, r0
	bgt _0808F3D8
	adds r1, #4
	adds r4, #1
	cmp r4, #3
	ble _0808F3CA
_0808F3D8:
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	add sp, #0x10
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0808F3E4: .4byte ChapterInfoTable

	thumb_func_start sub_808F3E8
sub_808F3E8: @ 0x0808F3E8
	push {lr}
	sub sp, #0x10
	bl sub_8086AAC
	ldr r3, _0808F44C @ =ChapterInfoTable
	ldr r2, [r0]
	lsls r2, r2, #0x1a
	lsrs r2, r2, #0x1a
	lsls r1, r2, #4
	adds r1, r1, r2
	lsls r1, r1, #2
	adds r1, r1, r3
	ldrb r1, [r1, #0x1e]
	str r1, [sp]
	ldr r2, [r0]
	lsls r2, r2, #0x1a
	lsrs r2, r2, #0x1a
	lsls r1, r2, #4
	adds r1, r1, r2
	lsls r1, r1, #2
	adds r1, r1, r3
	ldrb r1, [r1, #0x1d]
	str r1, [sp, #4]
	ldr r2, [r0]
	lsls r2, r2, #0x1a
	lsrs r2, r2, #0x1a
	lsls r1, r2, #4
	adds r1, r1, r2
	lsls r1, r1, #2
	adds r1, r1, r3
	ldrb r1, [r1, #0x1c]
	str r1, [sp, #8]
	ldr r2, [r0]
	lsls r2, r2, #0x1a
	lsrs r2, r2, #0x1a
	lsls r1, r2, #4
	adds r1, r1, r2
	lsls r1, r1, #2
	adds r1, r1, r3
	ldrb r1, [r1, #0x1b]
	str r1, [sp, #0xc]
	ldr r0, [r0]
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x16
	ldr r0, _0808F450 @ =0x02016A2D
	ldrb r0, [r0]
	cmp r0, #0
	bne _0808F454
	movs r0, #0
	b _0808F46A
	.align 2, 0
_0808F44C: .4byte ChapterInfoTable
_0808F450: .4byte 0x02016A2D
_0808F454:
	movs r2, #0
	mov r1, sp
_0808F458:
	ldr r0, [r1]
	cmp r3, r0
	bgt _0808F466
	adds r1, #4
	adds r2, #1
	cmp r2, #3
	ble _0808F458
_0808F466:
	lsls r0, r2, #0x18
	lsrs r0, r0, #0x18
_0808F46A:
	add sp, #0x10
	pop {r1}
	bx r1

	thumb_func_start sub_808F470
sub_808F470: @ 0x0808F470
	push {r4, lr}
	bl sub_8084CD8
	adds r4, r0, #0
	bl sub_8084CFC
	movs r1, #0x64
	muls r0, r1, r0
	adds r1, r4, #0
	bl __divsi3
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	pop {r4}
	pop {r1}
	bx r1

	thumb_func_start sub_808F490
sub_808F490: @ 0x0808F490
	push {lr}
	bl sub_808F470
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r1, #0
	ldr r3, _0808F4B4 @ =0x0868B79C
_0808F49E:
	adds r0, r1, r3
	ldrb r0, [r0]
	cmp r2, r0
	blt _0808F4AC
	adds r1, #1
	cmp r1, #3
	ble _0808F49E
_0808F4AC:
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0
_0808F4B4: .4byte 0x0868B79C

	thumb_func_start sub_808F4B8
sub_808F4B8: @ 0x0808F4B8
	push {r4, lr}
	bl sub_8084CD8
	adds r4, r0, #0
	bl sub_8084CFC
	movs r1, #0x64
	muls r0, r1, r0
	adds r1, r4, #0
	bl __divsi3
	adds r2, r0, #0
	movs r1, #0
	ldr r3, _0808F4EC @ =0x0868B79C
_0808F4D4:
	adds r0, r1, r3
	ldrb r0, [r0]
	cmp r2, r0
	blt _0808F4E2
	adds r1, #1
	cmp r1, #3
	ble _0808F4D4
_0808F4E2:
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0808F4EC: .4byte 0x0868B79C

	thumb_func_start sub_808F4F0
sub_808F4F0: @ 0x0808F4F0
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #1
_0808F4F6:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0808F514
	ldr r0, [r1]
	cmp r0, #0
	beq _0808F514
	movs r0, #4
	ldrh r1, [r1, #0xc]
	ands r0, r1
	cmp r0, #0
	beq _0808F514
	adds r5, #1
_0808F514:
	adds r4, #1
	cmp r4, #0x3f
	ble _0808F4F6
	lsls r0, r5, #0x10
	lsrs r0, r0, #0x10
	pop {r4, r5}
	pop {r1}
	bx r1

	thumb_func_start sub_808F524
sub_808F524: @ 0x0808F524
	push {lr}
	bl sub_808F4F0
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	movs r1, #0
	ldr r3, _0808F54C @ =0x0868B7A0
_0808F532:
	adds r0, r1, r3
	ldrb r0, [r0]
	cmp r2, r0
	bge _0808F544
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _0808F532
_0808F544:
	adds r0, r1, #0
	pop {r1}
	bx r1
	.align 2, 0
_0808F54C: .4byte 0x0868B7A0

	thumb_func_start sub_808F550
sub_808F550: @ 0x0808F550
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #1
_0808F556:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _0808F574
	ldr r0, [r1]
	cmp r0, #0
	beq _0808F574
	movs r0, #4
	ldrh r1, [r1, #0xc]
	ands r0, r1
	cmp r0, #0
	beq _0808F574
	adds r5, #1
_0808F574:
	adds r4, #1
	cmp r4, #0x3f
	ble _0808F556
	movs r1, #0
	ldr r2, _0808F598 @ =0x0868B7A4
_0808F57E:
	adds r0, r1, r2
	ldrb r0, [r0]
	cmp r5, r0
	bge _0808F590
	adds r0, r1, #1
	lsls r0, r0, #0x18
	lsrs r1, r0, #0x18
	cmp r1, #3
	bls _0808F57E
_0808F590:
	adds r0, r1, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0808F598: .4byte 0x0868B7A4

	thumb_func_start sub_808F59C
sub_808F59C: @ 0x0808F59C
	push {lr}
	bl sub_8084D34
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_808F5AC
sub_808F5AC: @ 0x0808F5AC
	push {r4, lr}
	bl sub_808F59C
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	bl sub_80848DC
	subs r0, #1
	bl sub_80848BC
	ldr r1, [r0]
	lsls r1, r1, #0x1a
	lsrs r1, r1, #0x1a
	movs r3, #0
	ldr r2, _0808F5FC @ =ChapterInfoTable
	lsls r0, r1, #4
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	ldrh r1, [r0, #0x26]
	cmp r4, r1
	ble _0808F5F2
	movs r3, #1
	ldrh r1, [r0, #0x24]
	cmp r4, r1
	ble _0808F5F2
	movs r3, #2
	ldrh r1, [r0, #0x22]
	cmp r4, r1
	ble _0808F5F2
	movs r3, #3
	ldrh r0, [r0, #0x20]
	cmp r4, r0
	ble _0808F5F2
	movs r3, #4
_0808F5F2:
	adds r0, r3, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0808F5FC: .4byte ChapterInfoTable

	thumb_func_start sub_808F600
sub_808F600: @ 0x0808F600
	push {r4, lr}
	bl sub_8017104
	adds r4, r0, #0
	bl sub_80848DC
	bl sub_80848BC
	ldr r0, _0808F640 @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterInfo
	adds r0, #0x3e
	ldrb r0, [r0]
	lsrs r3, r0, #1
	movs r1, #0
	ldr r2, _0808F644 @ =0x0868B7A8
_0808F626:
	ldr r0, [r2]
	muls r0, r3, r0
	cmp r4, r0
	blo _0808F636
	adds r2, #4
	adds r1, #1
	cmp r1, #3
	ble _0808F626
_0808F636:
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0808F640: .4byte gPlaySt
_0808F644: .4byte 0x0868B7A8

	thumb_func_start sub_808F648
sub_808F648: @ 0x0808F648
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #1
_0808F64E:
	adds r0, r4, #0
	bl GetUnit
	adds r2, r0, #0
	cmp r2, #0
	beq _0808F67A
	ldr r1, [r2]
	cmp r1, #0
	beq _0808F67A
	ldr r0, [r2, #4]
	ldr r1, [r1, #0x28]
	ldr r0, [r0, #0x24]
	orrs r1, r0
	movs r0, #0x80
	lsls r0, r0, #1
	ands r1, r0
	cmp r1, #0
	beq _0808F674
	adds r5, #0x14
_0808F674:
	movs r0, #8
	ldrsb r0, [r2, r0]
	adds r5, r5, r0
_0808F67A:
	adds r4, #1
	cmp r4, #0x3f
	ble _0808F64E
	lsls r0, r5, #0x10
	lsrs r0, r0, #0x10
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_808F68C
sub_808F68C: @ 0x0808F68C
	push {r4, lr}
	bl sub_808F648
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	bl sub_80848DC
	subs r0, #1
	bl sub_80848BC
	ldr r1, [r0]
	lsls r1, r1, #0x1a
	lsrs r1, r1, #0x1a
	movs r3, #0
	ldr r2, _0808F6DC @ =ChapterInfoTable
	lsls r0, r1, #4
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	ldrh r1, [r0, #0x2e]
	cmp r4, r1
	ble _0808F6D2
	movs r3, #1
	ldrh r1, [r0, #0x2c]
	cmp r4, r1
	ble _0808F6D2
	movs r3, #2
	ldrh r1, [r0, #0x2a]
	cmp r4, r1
	ble _0808F6D2
	movs r3, #3
	ldrh r0, [r0, #0x28]
	cmp r4, r0
	ble _0808F6D2
	movs r3, #4
_0808F6D2:
	adds r0, r3, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_0808F6DC: .4byte ChapterInfoTable

	thumb_func_start sub_808F6E0
sub_808F6E0: @ 0x0808F6E0
	push {r4, r5, r6, lr}
	movs r4, #0
	ldr r5, _0808F72C @ =0x0868B7B8
	movs r3, #0
	ldr r1, _0808F730 @ =0x02016A2E
	movs r2, #5
_0808F6EC:
	ldrh r6, [r1]
	adds r0, r6, r3
	adds r0, r0, r5
	ldrb r0, [r0]
	adds r0, r0, r4
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	adds r3, #5
	adds r1, #2
	subs r2, #1
	cmp r2, #0
	bge _0808F6EC
	movs r2, #0
	ldr r0, _0808F734 @ =0x0868B7D6
_0808F708:
	ldrh r1, [r0]
	cmp r4, r1
	blo _0808F724
	adds r0, #2
	adds r2, #1
	cmp r2, #4
	ble _0808F708
	ldr r1, _0808F738 @ =gPlaySt
	movs r0, #0x40
	ldrb r1, [r1, #0x14]
	ands r0, r1
	cmp r0, #0
	beq _0808F724
	adds r2, #1
_0808F724:
	adds r0, r2, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_0808F72C: .4byte 0x0868B7B8
_0808F730: .4byte 0x02016A2E
_0808F734: .4byte 0x0868B7D6
_0808F738: .4byte gPlaySt

	thumb_func_start sub_808F73C
sub_808F73C: @ 0x0808F73C
	push {r4, r5, lr}
	movs r3, #0
	ldr r4, _0808F774 @ =0x0868B7E2
	ldr r2, _0808F778 @ =0x02016A2E
	movs r1, #2
_0808F746:
	ldrh r5, [r2]
	adds r0, r5, r4
	ldrb r0, [r0]
	adds r0, r0, r3
	lsls r0, r0, #0x10
	lsrs r3, r0, #0x10
	adds r2, #2
	subs r1, #1
	cmp r1, #0
	bge _0808F746
	movs r1, #0
	ldr r0, _0808F77C @ =0x0868B7E8
_0808F75E:
	ldrh r2, [r0]
	cmp r3, r2
	blo _0808F76C
	adds r0, #2
	adds r1, #1
	cmp r1, #4
	ble _0808F75E
_0808F76C:
	adds r0, r1, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_0808F774: .4byte 0x0868B7E2
_0808F778: .4byte 0x02016A2E
_0808F77C: .4byte 0x0868B7E8

	thumb_func_start sub_808F780
sub_808F780: @ 0x0808F780
	push {lr}
	ldr r0, _0808F78C @ =0x0868B7F4
	bl InitBgs
	pop {r0}
	bx r0
	.align 2, 0
_0808F78C: .4byte 0x0868B7F4

	thumb_func_start sub_808F790
sub_808F790: @ 0x0808F790
	push {lr}
	adds r1, r0, #0
	ldr r0, _0808F7AC @ =0x0868B3FC
	ldr r0, [r0]
	adds r0, #0x9f
	ldrb r0, [r0]
	cmp r0, #2
	bls _0808F7A8
	adds r0, r1, #0
	movs r1, #3
	bl Proc_Goto
_0808F7A8:
	pop {r0}
	bx r0
	.align 2, 0
_0808F7AC: .4byte 0x0868B3FC

	thumb_func_start sub_808F7B0
sub_808F7B0: @ 0x0808F7B0
	push {lr}
	adds r1, r0, #0
	ldr r0, _0808F7CC @ =0x0868B3FC
	ldr r0, [r0]
	adds r0, #0x9f
	ldrb r0, [r0]
	cmp r0, #1
	bhi _0808F7C8
	adds r0, r1, #0
	movs r1, #2
	bl Proc_Goto
_0808F7C8:
	pop {r0}
	bx r0
	.align 2, 0
_0808F7CC: .4byte 0x0868B3FC

	thumb_func_start sub_808F7D0
sub_808F7D0: @ 0x0808F7D0
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	ldr r4, [sp, #0x18]
	ldr r6, [sp, #0x1c]
	str r4, [sp]
	bl Interpolate
	adds r5, r0, #0
	ldr r2, _0808F810 @ =0x08343358
	ldr r7, _0808F814 @ =0x02016A2D
	ldrb r0, [r7]
	cmp r0, #0
	bne _0808F7EC
	adds r2, #0x20
_0808F7EC:
	lsls r1, r6, #5
	ldr r4, _0808F818 @ =gPal
	adds r1, r1, r4
	adds r0, r2, #0
	movs r2, #8
	bl CpuFastSet
	ldrb r0, [r7]
	cmp r0, #0
	beq _0808F81C
	str r5, [sp]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #1
	movs r3, #7
	bl sub_808DA90
	b _0808F82A
	.align 2, 0
_0808F810: .4byte 0x08343358
_0808F814: .4byte 0x02016A2D
_0808F818: .4byte gPal
_0808F81C:
	str r5, [sp]
	adds r0, r4, #0
	adds r1, r6, #0
	movs r2, #1
	movs r3, #0xb
	bl sub_808DA14
_0808F82A:
	bl EnablePalSync
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808F838
sub_808F838: @ 0x0808F838
	movs r1, #0
	strh r1, [r0, #0x2a]
	strh r1, [r0, #0x2c]
	strh r1, [r0, #0x2e]
	bx lr
	.align 2, 0

	thumb_func_start sub_808F844
sub_808F844: @ 0x0808F844
	push {r4, lr}
	sub sp, #8
	adds r4, r0, #0
	movs r1, #0x2e
	ldrsh r0, [r4, r1]
	cmp r0, #2
	beq _0808F87C
	cmp r0, #2
	bgt _0808F85C
	cmp r0, #0
	beq _0808F862
	b _0808F8A4
_0808F85C:
	cmp r0, #0x11
	beq _0808F8A0
	b _0808F8A4
_0808F862:
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
	cmp r0, #0x59
	bgt _0808F8A4
	adds r3, r0, #0
	movs r0, #0x5a
	str r0, [sp]
	movs r0, #0x13
	str r0, [sp, #4]
	movs r0, #0
	movs r1, #0
	movs r2, #0xf
	b _0808F894
_0808F87C:
	movs r1, #0x2a
	ldrsh r0, [r4, r1]
	cmp r0, #0x77
	bgt _0808F8A4
	adds r3, r0, #0
	movs r0, #0x78
	str r0, [sp]
	movs r0, #0x13
	str r0, [sp, #4]
	movs r0, #0
	movs r1, #0xf
	movs r2, #0
_0808F894:
	bl sub_808F7D0
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	b _0808F8AE
_0808F8A0:
	movs r0, #0
	b _0808F8AC
_0808F8A4:
	movs r0, #0
	strh r0, [r4, #0x2a]
	ldrh r0, [r4, #0x2e]
	adds r0, #1
_0808F8AC:
	strh r0, [r4, #0x2e]
_0808F8AE:
	add sp, #8
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_808F8B8
sub_808F8B8: @ 0x0808F8B8
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	sub sp, #4
	movs r0, #0x80
	lsls r0, r0, #1
	mov r8, r0
	str r0, [sp]
	movs r0, #0xa
	mov r1, r8
	movs r2, #0
	movs r3, #0
	bl SetObjAffine
	ldr r4, _0808F96C @ =gSinLut
	movs r1, #0x80
	adds r1, r1, r4
	mov sb, r1
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	movs r1, #2
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	movs r1, #2
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, sb
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0x1f
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	ldr r2, _0808F970 @ =0x02016A2A
	ldr r0, _0808F974 @ =0x02016A2D
	ldrb r0, [r0]
	movs r1, #2
	cmp r0, #0
	beq _0808F944
	movs r1, #1
_0808F944:
	strh r1, [r2]
	ldr r0, _0808F978 @ =0x0868B730
	movs r1, #3
	bl SpawnProc
	ldr r0, _0808F97C @ =0x0868B80C
	movs r1, #3
	bl SpawnProc
	ldr r0, _0808F980 @ =0x0868B88C
	movs r1, #3
	bl SpawnProc
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0808F96C: .4byte gSinLut
_0808F970: .4byte 0x02016A2A
_0808F974: .4byte 0x02016A2D
_0808F978: .4byte 0x0868B730
_0808F97C: .4byte 0x0868B80C
_0808F980: .4byte 0x0868B88C

	thumb_func_start sub_808F984
sub_808F984: @ 0x0808F984
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	movs r6, #0
	ldr r1, _0808FA10 @ =0x0868B3FC
	ldr r0, [r1]
	adds r0, #0x9f
	ldrb r0, [r0]
	adds r0, #1
	cmp r6, r0
	bge _0808FA08
	adds r7, r1, #0
_0808F99A:
	ldr r3, [r7]
	lsls r1, r6, #1
	adds r0, r3, #0
	adds r0, #0x42
	adds r0, r0, r1
	movs r2, #0
	ldrsh r0, [r0, r2]
	adds r0, #6
	lsls r5, r0, #3
	adds r0, r3, #0
	adds r0, #0x50
	adds r0, r0, r1
	movs r2, #0
	ldrsh r0, [r0, r2]
	lsls r4, r0, #3
	adds r0, r3, #0
	adds r0, #0x9f
	ldrb r0, [r0]
	cmp r6, r0
	bne _0808F9CE
	movs r0, #0xf8
	lsls r0, r0, #6
	orrs r5, r0
	movs r0, #0x80
	lsls r0, r0, #1
	orrs r4, r0
_0808F9CE:
	adds r0, r3, #0
	adds r0, #0x5e
	adds r0, r0, r1
	ldrh r0, [r0]
	lsls r2, r0, #1
	adds r2, #0xc0
	lsls r1, r6, #2
	adds r0, r3, #0
	adds r0, #0x7c
	adds r0, r0, r1
	ldr r3, [r0]
	adds r0, r6, #4
	movs r1, #0xf
	ands r0, r1
	lsls r0, r0, #0xc
	orrs r0, r2
	str r0, [sp]
	movs r0, #4
	adds r1, r5, #0
	adds r2, r4, #0
	bl PutSpriteExt
	adds r6, #1
	ldr r0, [r7]
	adds r0, #0x9f
	ldrb r0, [r0]
	adds r0, #1
	cmp r6, r0
	blt _0808F99A
_0808FA08:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808FA10: .4byte 0x0868B3FC

	thumb_func_start sub_808FA14
sub_808FA14: @ 0x0808FA14
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	bl HasNextChapter
	ldr r1, _0808FCA0 @ =0x02016A2D
	strb r0, [r1]
	bl ResetText
	bl LoadUiFrameGraphics
	bl ResetTextFont
	bl sub_808E79C
	ldr r7, _0808FCA4 @ =gDispIo
	movs r4, #1
	ldrb r0, [r7, #1]
	orrs r0, r4
	movs r2, #2
	mov sb, r2
	mov r6, sb
	orrs r0, r6
	movs r1, #4
	mov r8, r1
	mov r2, r8
	orrs r0, r2
	movs r6, #8
	orrs r0, r6
	movs r5, #0x10
	orrs r0, r5
	strb r0, [r7, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r2, #0x20
	ldrb r0, [r7, #1]
	orrs r0, r2
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r7, #1]
	adds r0, r7, #0
	adds r0, #0x2d
	movs r1, #0
	mov sl, r1
	mov r6, sl
	strb r6, [r0]
	adds r1, r7, #0
	adds r1, #0x31
	movs r0, #0x18
	strb r0, [r1]
	subs r1, #5
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0x88
	strb r0, [r1]
	adds r1, #4
	ldrb r0, [r1]
	orrs r4, r0
	mov r6, sb
	orrs r4, r6
	mov r0, r8
	orrs r4, r0
	movs r6, #8
	orrs r4, r6
	orrs r4, r5
	adds r3, r7, #0
	adds r3, #0x36
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r6, [r3]
	ands r0, r6
	mov r6, sb
	orrs r0, r6
	mov r6, r8
	orrs r0, r6
	movs r6, #8
	orrs r0, r6
	orrs r0, r5
	orrs r4, r2
	strb r4, [r1]
	orrs r0, r2
	strb r0, [r3]
	ldr r0, _0808FCA8 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _0808FCAC @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r5, _0808FCB0 @ =gBg2Tm
	adds r0, r5, #0
	movs r1, #0
	bl TmFill
	ldr r6, _0808FCB4 @ =gBg3Tm
	adds r0, r6, #0
	movs r1, #0
	bl TmFill
	adds r2, r7, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r7, #0
	adds r1, #0x44
	movs r0, #6
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x46
	mov r2, sl
	strb r2, [r0]
	ldr r0, _0808FCB8 @ =0x0000FFE0
	ldrh r1, [r7, #0x3c]
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	ldr r1, _0808FCBC @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r7, #0x3c]
	bl sub_808DD78
	ldr r0, _0808FCC0 @ =0x0834138C
	movs r1, #0x80
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, _0808FCC4 @ =0x08341DA0
	movs r1, #0xc0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0808FCC8 @ =0x0833C03C
	movs r1, #0x90
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r2, _0808FCCC @ =0x08343358
	ldr r1, _0808FCA0 @ =0x02016A2D
	ldrb r0, [r1]
	cmp r0, #0
	bne _0808FB7C
	adds r2, #0x20
_0808FB7C:
	movs r1, #0x98
	lsls r1, r1, #2
	adds r0, r2, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0808FCD0 @ =0x08342A98
	movs r1, #0xd8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0808FCD4 @ =0x083092CC
	ldr r1, _0808FCD8 @ =0x06011000
	bl Decompress
	ldr r0, _0808FCDC @ =0x08342438
	ldr r1, _0808FCE0 @ =0x06011800
	bl Decompress
	ldr r0, _0808FCE4 @ =0x08342B54
	ldr r1, _0808FCE8 @ =0x06013000
	bl Decompress
	ldr r0, _0808FCEC @ =0x083413CC
	ldr r1, _0808FCF0 @ =0x0600D000
	bl Decompress
	ldr r4, _0808FCF4 @ =0x0833C984
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r1, r2
	adds r0, r4, #0
	bl Decompress
	movs r1, #0xa0
	lsls r1, r1, #2
	adds r0, r5, #0
	movs r2, #6
	bl sub_808ECD0
	ldr r1, _0808FCF8 @ =0x08340ED8
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r6, #0
	bl TmApplyTsa_t
	ldr r5, _0808FCFC @ =0x0868B3FC
	movs r4, #0xe8
	movs r6, #3
_0808FBE8:
	ldr r0, [r5]
	adds r0, r0, r4
	movs r1, #6
	bl InitText
	adds r4, #8
	subs r6, #1
	cmp r6, #0
	bge _0808FBE8
	bl sub_8086AAC
	adds r5, r0, #0
	ldr r4, _0808FD00 @ =0x02021CD2
	ldr r2, [r5]
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x16
	adds r0, r4, #0
	movs r1, #2
	bl PutNumber
	ldr r0, _0808FD04 @ =0x00000725
	bl DecodeMsg
	adds r1, r4, #2
	movs r2, #6
	str r2, [sp]
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #0
	movs r3, #0
	bl PutDrawText
	adds r4, #0x1a
	movs r0, #0xb4
	ldrh r5, [r5, #2]
	adds r2, r5, #0
	muls r2, r0, r2
	adds r0, r4, #0
	movs r1, #2
	movs r3, #1
	bl PutTime
	movs r7, #0xe8
	ldr r5, _0808FD08 @ =0x0868B490
	movs r6, #3
_0808FC42:
	ldrh r0, [r5]
	bl DecodeMsg
	adds r4, r0, #0
	ldr r0, _0808FCFC @ =0x0868B3FC
	ldr r0, [r0]
	adds r0, r0, r7
	ldrb r2, [r5, #0xd]
	lsls r1, r2, #5
	subs r1, #1
	ldrb r2, [r5, #0xc]
	adds r1, r2, r1
	lsls r1, r1, #1
	ldr r2, _0808FCA8 @ =gBg0Tm
	adds r1, r1, r2
	ldr r2, [r5, #4]
	movs r3, #6
	str r3, [sp]
	str r4, [sp, #4]
	movs r3, #0
	bl PutDrawText
	adds r7, #8
	adds r5, #0x10
	subs r6, #1
	cmp r6, #0
	bge _0808FC42
	ldr r0, _0808FD0C @ =0x0868B768
	movs r1, #3
	bl SpawnProc
	ldr r0, _0808FD10 @ =0x0868B8AC
	movs r1, #3
	bl SpawnProc
	movs r0, #0xf
	bl EnableBgSync
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808FCA0: .4byte 0x02016A2D
_0808FCA4: .4byte gDispIo
_0808FCA8: .4byte gBg0Tm
_0808FCAC: .4byte gBg1Tm
_0808FCB0: .4byte gBg2Tm
_0808FCB4: .4byte gBg3Tm
_0808FCB8: .4byte 0x0000FFE0
_0808FCBC: .4byte 0x0000E0FF
_0808FCC0: .4byte 0x0834138C
_0808FCC4: .4byte 0x08341DA0
_0808FCC8: .4byte 0x0833C03C
_0808FCCC: .4byte 0x08343358
_0808FCD0: .4byte 0x08342A98
_0808FCD4: .4byte 0x083092CC
_0808FCD8: .4byte 0x06011000
_0808FCDC: .4byte 0x08342438
_0808FCE0: .4byte 0x06011800
_0808FCE4: .4byte 0x08342B54
_0808FCE8: .4byte 0x06013000
_0808FCEC: .4byte 0x083413CC
_0808FCF0: .4byte 0x0600D000
_0808FCF4: .4byte 0x0833C984
_0808FCF8: .4byte 0x08340ED8
_0808FCFC: .4byte 0x0868B3FC
_0808FD00: .4byte 0x02021CD2
_0808FD04: .4byte 0x00000725
_0808FD08: .4byte 0x0868B490
_0808FD0C: .4byte 0x0868B768
_0808FD10: .4byte 0x0868B8AC

	thumb_func_start sub_808FD14
sub_808FD14: @ 0x0808FD14
	push {lr}
	adds r2, r0, #0
	ldr r0, _0808FD3C @ =gKeySt
	ldr r1, [r0]
	movs r0, #3
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0808FD38
	ldr r0, _0808FD40 @ =0x0868B3FC
	ldr r0, [r0]
	adds r0, #0x9f
	ldrb r0, [r0]
	cmp r0, #3
	bne _0808FD38
	adds r0, r2, #0
	bl Proc_Break
_0808FD38:
	pop {r0}
	bx r0
	.align 2, 0
_0808FD3C: .4byte gKeySt
_0808FD40: .4byte 0x0868B3FC

	thumb_func_start sub_808FD44
sub_808FD44: @ 0x0808FD44
	push {lr}
	adds r1, r0, #0
	cmp r1, #0
	bne _0808FD5C
	ldr r0, _0808FD58 @ =0x0868B8E4
	movs r1, #3
	bl SpawnProc
	b _0808FD62
	.align 2, 0
_0808FD58: .4byte 0x0868B8E4
_0808FD5C:
	ldr r0, _0808FD68 @ =0x0868B8E4
	bl SpawnProcLocking
_0808FD62:
	pop {r0}
	bx r0
	.align 2, 0
_0808FD68: .4byte 0x0868B8E4

	thumb_func_start sub_808FD6C
sub_808FD6C: @ 0x0808FD6C
	push {lr}
	adds r1, r0, #0
	cmp r1, #0
	bne _0808FD84
	ldr r0, _0808FD80 @ =0x0868B99C
	movs r1, #3
	bl SpawnProc
	b _0808FD8A
	.align 2, 0
_0808FD80: .4byte 0x0868B99C
_0808FD84:
	ldr r0, _0808FD90 @ =0x0868B99C
	bl SpawnProcLocking
_0808FD8A:
	pop {r0}
	bx r0
	.align 2, 0
_0808FD90: .4byte 0x0868B99C

	thumb_func_start sub_808FD94
sub_808FD94: @ 0x0808FD94
	push {r4, lr}
	ldr r4, _0808FDCC @ =0x083442C4
	adds r0, r4, #0
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r1, #0xa0
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0808FDD0 @ =0x08343398
	ldr r1, _0808FDD4 @ =0x06015000
	bl Decompress
	ldr r0, _0808FDD8 @ =0x08343A80
	ldr r1, _0808FDDC @ =0x06014000
	bl Decompress
	ldr r0, _0808FDE0 @ =0x08343FAC
	ldr r1, _0808FDE4 @ =0x06001000
	bl Decompress
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808FDCC: .4byte 0x083442C4
_0808FDD0: .4byte 0x08343398
_0808FDD4: .4byte 0x06015000
_0808FDD8: .4byte 0x08343A80
_0808FDDC: .4byte 0x06014000
_0808FDE0: .4byte 0x08343FAC
_0808FDE4: .4byte 0x06001000

	thumb_func_start sub_808FDE8
sub_808FDE8: @ 0x0808FDE8
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	lsls r1, r1, #0x10
	lsrs r4, r1, #0x10
	lsls r2, r2, #0x18
	lsrs r6, r2, #0x18
	lsls r3, r3, #0x18
	lsrs r5, r3, #0x18
	adds r3, r5, #0
	lsls r0, r3, #0x10
	cmp r0, #0
	beq _0808FE30
_0808FE00:
	asrs r0, r0, #0x10
	subs r0, r5, r0
	lsls r0, r0, #6
	adds r2, r7, r0
	lsls r1, r6, #0x10
	lsls r3, r3, #0x10
	cmp r1, #0
	beq _0808FE24
_0808FE10:
	strh r4, [r2]
	adds r2, #2
	adds r0, r4, #1
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	ldr r0, _0808FE38 @ =0xFFFF0000
	adds r1, r1, r0
	asrs r0, r1, #0x10
	cmp r0, #0
	bgt _0808FE10
_0808FE24:
	ldr r1, _0808FE38 @ =0xFFFF0000
	adds r0, r3, r1
	lsrs r3, r0, #0x10
	lsls r0, r3, #0x10
	cmp r0, #0
	bgt _0808FE00
_0808FE30:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0808FE38: .4byte 0xFFFF0000

	thumb_func_start sub_808FE3C
sub_808FE3C: @ 0x0808FE3C
	push {r4, lr}
	adds r4, r0, #0
	bl LoadUiFrameGraphics
	adds r4, #0x64
	movs r3, #0
	movs r0, #0
	strh r0, [r4]
	ldr r0, _0808FEA4 @ =0x02016A3C
	strb r3, [r0]
	ldr r0, _0808FEA8 @ =0x02016A3D
	strb r3, [r0]
	ldr r0, _0808FEAC @ =0x02016A3F
	strb r3, [r0]
	ldr r0, _0808FEB0 @ =0x02016A40
	strb r3, [r0]
	ldr r4, _0808FEB4 @ =gDispIo
	adds r2, r4, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x44
	strb r3, [r0]
	adds r1, r4, #0
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x46
	strb r3, [r0]
	ldr r0, _0808FEB8 @ =0x0000FFE0
	ldrh r2, [r4, #0x3c]
	ands r0, r2
	movs r1, #3
	orrs r0, r1
	ldr r1, _0808FEBC @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r4, #0x3c]
	bl sub_808FD94
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0808FEA4: .4byte 0x02016A3C
_0808FEA8: .4byte 0x02016A3D
_0808FEAC: .4byte 0x02016A3F
_0808FEB0: .4byte 0x02016A40
_0808FEB4: .4byte gDispIo
_0808FEB8: .4byte 0x0000FFE0
_0808FEBC: .4byte 0x0000E0FF

	thumb_func_start sub_808FEC0
sub_808FEC0: @ 0x0808FEC0
	push {lr}
	ldr r2, _0808FED4 @ =0x02016A41
	movs r1, #1
	strb r1, [r2]
	bl sub_808FE3C
	bl sub_8091588
	pop {r0}
	bx r0
	.align 2, 0
_0808FED4: .4byte 0x02016A41

	thumb_func_start sub_808FED8
sub_808FED8: @ 0x0808FED8
	push {lr}
	ldr r2, _0808FEEC @ =0x02016A41
	movs r1, #2
	strb r1, [r2]
	bl sub_808FE3C
	bl sub_8091588
	pop {r0}
	bx r0
	.align 2, 0
_0808FEEC: .4byte 0x02016A41

	thumb_func_start sub_808FEF0
sub_808FEF0: @ 0x0808FEF0
	push {lr}
	ldr r2, _0808FF00 @ =0x02016A41
	movs r1, #0
	strb r1, [r2]
	bl sub_808FE3C
	pop {r0}
	bx r0
	.align 2, 0
_0808FF00: .4byte 0x02016A41

	thumb_func_start sub_808FF04
sub_808FF04: @ 0x0808FF04
	push {r4, r5, lr}
	adds r3, r0, #0
	adds r5, r1, #0
	adds r4, r2, #0
	ldr r0, _0808FF34 @ =0x02016A42
	ldrb r0, [r0]
	cmp r0, #0x13
	bhi _0808FF40
	ldr r1, _0808FF38 @ =0x02016A43
	adds r2, r3, #0
	adds r2, #0x4c
	movs r3, #0
	ldrsh r0, [r2, r3]
	adds r0, r0, r1
	movs r1, #0x16
	strb r1, [r0]
	ldr r1, _0808FF3C @ =0x02016AC3
	movs r3, #0
	ldrsh r0, [r2, r3]
	adds r0, r0, r1
	asrs r1, r4, #1
	strb r1, [r0]
	b _0808FF8C
	.align 2, 0
_0808FF34: .4byte 0x02016A42
_0808FF38: .4byte 0x02016A43
_0808FF3C: .4byte 0x02016AC3
_0808FF40:
	ldr r1, _0808FF5C @ =0x02016AC3
	adds r0, r3, #0
	adds r0, #0x4c
	movs r2, #0
	ldrsh r4, [r0, r2]
	adds r3, r4, r1
	ldrb r1, [r3]
	adds r2, r0, #0
	cmp r1, #0
	beq _0808FF60
	subs r0, r1, #1
	strb r0, [r3]
	b _0808FF8C
	.align 2, 0
_0808FF5C: .4byte 0x02016AC3
_0808FF60:
	ldr r3, _0808FF88 @ =0x02016A43
	adds r0, r4, r3
	ldrb r1, [r0]
	adds r1, #4
	strb r1, [r0]
	movs r1, #0
	ldrsh r0, [r2, r1]
	adds r0, r0, r3
	ldrb r1, [r0]
	cmp r1, r5
	ble _0808FF78
	strb r5, [r0]
_0808FF78:
	ldrh r0, [r2]
	adds r1, r0, #1
	strh r1, [r2]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r0, r0, r3
	ldrb r0, [r0]
	b _0808FF94
	.align 2, 0
_0808FF88: .4byte 0x02016A43
_0808FF8C:
	ldrh r0, [r2]
	adds r0, #1
	strh r0, [r2]
	movs r0, #0xf0
_0808FF94:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_808FF9C
sub_808FF9C: @ 0x0808FF9C
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r6, r1, #0
	adds r5, r2, #0
	ldr r2, _0808FFC8 @ =0x0868BB1C
	ldrb r0, [r2]
	cmp r0, #0
	beq _0808FFD8
	movs r1, #0
	adds r3, r2, #0
_0808FFB0:
	ldrb r0, [r3]
	cmp r0, r6
	bne _0808FFCC
	ldrb r0, [r3, #1]
	cmp r0, r5
	bne _0808FFCC
	ldrb r3, [r3, #2]
	adds r0, r3, r4
	adds r4, r0, #0
	subs r4, #8
	b _0808FFD8
	.align 2, 0
_0808FFC8: .4byte 0x0868BB1C
_0808FFCC:
	adds r1, #4
	adds r3, #4
	adds r0, r1, r2
	ldrb r0, [r0]
	cmp r0, #0
	bne _0808FFB0
_0808FFD8:
	adds r0, r4, #0
	pop {r4, r5, r6}
	pop {r1}
	bx r1

	thumb_func_start sub_808FFE0
sub_808FFE0: @ 0x0808FFE0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0xc
	str r0, [sp]
	mov r8, r1
	ldr r2, _08090050 @ =0x0866354C
	lsls r0, r1, #1
	add r0, r8
	lsls r4, r0, #2
	adds r1, r4, r2
	ldrb r3, [r1, #8]
	lsls r0, r3, #3
	adds r5, r0, #0
	adds r5, #0x16
	ldrb r0, [r1, #9]
	adds r0, #2
	lsls r7, r0, #3
	movs r6, #0
	str r6, [sp, #8]
	movs r3, #0
	mov ip, r3
	ldr r1, _08090054 @ =0x02016A3C
	ldrb r6, [r1]
	lsls r0, r6, #1
	adds r0, r0, r6
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r0, [r0]
	subs r0, #1
	cmp r0, #1
	bhi _08090026
	b _080902D0
_08090026:
	ldr r0, [sp]
	adds r0, #0x4c
	mov r1, sp
	ldrh r1, [r1, #8]
	strh r1, [r0]
	ldr r0, _08090058 @ =0x02016A3F
	ldrb r0, [r0]
	cmp r0, #0
	bne _0809003A
	b _080902D0
_0809003A:
	movs r6, #0
	str r6, [sp, #4]
	cmp r0, #1
	bne _08090048
	movs r0, #0x80
	lsls r0, r0, #3
	str r0, [sp, #4]
_08090048:
	adds r0, r2, #4
	adds r0, r4, r0
	ldr r0, [r0]
	b _080902BA
	.align 2, 0
_08090050: .4byte 0x0866354C
_08090054: .4byte 0x02016A3C
_08090058: .4byte 0x02016A3F
_0809005C:
	mov r0, sl
	subs r0, #0xa
	cmp r0, #0x24
	bls _08090066
	b _0809017C
_08090066:
	lsls r0, r0, #2
	ldr r1, _08090070 @ =_08090074
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08090070: .4byte _08090074
_08090074: @ jump table
	.4byte _08090108 @ case 0
	.4byte _0809017C @ case 1
	.4byte _0809017C @ case 2
	.4byte _0809017C @ case 3
	.4byte _0809017C @ case 4
	.4byte _0809017C @ case 5
	.4byte _0809017C @ case 6
	.4byte _0809017C @ case 7
	.4byte _0809017C @ case 8
	.4byte _0809017C @ case 9
	.4byte _0809017C @ case 10
	.4byte _0809017C @ case 11
	.4byte _0809017C @ case 12
	.4byte _0809017C @ case 13
	.4byte _0809017C @ case 14
	.4byte _0809017C @ case 15
	.4byte _0809017C @ case 16
	.4byte _0809017C @ case 17
	.4byte _0809017C @ case 18
	.4byte _0809017C @ case 19
	.4byte _0809017C @ case 20
	.4byte _0809017C @ case 21
	.4byte _08090128 @ case 22
	.4byte _0809017C @ case 23
	.4byte _0809017C @ case 24
	.4byte _0809017C @ case 25
	.4byte _0809017C @ case 26
	.4byte _0809017C @ case 27
	.4byte _0809012C @ case 28
	.4byte _0809017C @ case 29
	.4byte _0809017C @ case 30
	.4byte _0809017C @ case 31
	.4byte _0809017C @ case 32
	.4byte _0809017C @ case 33
	.4byte _08090130 @ case 34
	.4byte _0809017C @ case 35
	.4byte _08090134 @ case 36
_08090108:
	adds r7, #0x10
	ldr r1, _08090124 @ =0x0866354C
	mov r3, r8
	lsls r2, r3, #1
	adds r0, r2, r3
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrb r0, [r0, #8]
	lsls r0, r0, #3
	adds r5, r0, #0
	adds r5, #0x16
	movs r3, #0
	b _080902A2
	.align 2, 0
_08090124: .4byte 0x0866354C
_08090128:
	adds r5, #7
	b _0809029E
_0809012C:
	movs r4, #0x1c
	b _08090136
_08090130:
	movs r4, #0x1a
	b _08090136
_08090134:
	movs r4, #0x1b
_08090136:
	ldr r0, [sp]
	adds r1, r5, #0
	adds r2, r7, #0
	bl sub_808FF04
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r7, #0
	ldr r6, [sp, #4]
	orrs r1, r6
	ldr r2, _08090174 @ =Sprite_16x16
	lsls r3, r4, #1
	movs r4, #0xa8
	lsls r4, r4, #2
	adds r3, r3, r4
	movs r4, #0x80
	lsls r4, r4, #7
	orrs r3, r4
	bl PutOamHiRam
	adds r2, r5, #1
	ldr r1, _08090178 @ =0x0868BA3C
	adds r0, r1, #0
	adds r0, #0xd0
	ldrb r0, [r0]
	adds r5, r0, r2
	adds r1, #0xd2
	ldrb r3, [r1]
	mov r6, r8
	lsls r2, r6, #1
	b _080902A2
	.align 2, 0
_08090174: .4byte Sprite_16x16
_08090178: .4byte 0x0868BA3C
_0809017C:
	cmp r4, #0x60
	bgt _08090214
	subs r4, #0x41
	movs r0, #0
	mov sb, r0
	cmp r4, #0xf
	ble _0809018E
	movs r1, #0x20
	mov sb, r1
_0809018E:
	cmp r3, #0
	beq _080901B4
	ldr r0, _080901B0 @ =0x0868BA3C
	lsls r1, r4, #3
	adds r0, r1, r0
	ldrb r0, [r0, #1]
	adds r2, r0, r3
	movs r0, #0xff
	ands r2, r0
	adds r6, r1, #0
	cmp r2, #0x7f
	bgt _080901C8
	movs r0, #0xf
	ands r2, r0
	asrs r0, r2, #1
	subs r5, r5, r0
	b _080901C8
	.align 2, 0
_080901B0: .4byte 0x0868BA3C
_080901B4:
	ldr r0, _0809020C @ =0x0868BA3C
	lsls r2, r4, #3
	adds r0, r2, r0
	movs r1, #0x40
	ldrb r0, [r0, #1]
	ands r1, r0
	adds r6, r2, #0
	cmp r1, #0
	beq _080901C8
	subs r5, #2
_080901C8:
	adds r0, r5, #0
	mov r1, ip
	mov r2, sl
	bl sub_808FF9C
	adds r5, r0, #0
	ldr r0, [sp]
	adds r1, r5, #0
	adds r2, r7, #0
	bl sub_808FF04
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r7, #0
	ldr r2, [sp, #4]
	orrs r1, r2
	ldr r2, _08090210 @ =Sprite_16x16
	lsls r3, r4, #1
	movs r4, #0xa0
	lsls r4, r4, #2
	add r4, sb
	adds r3, r3, r4
	movs r4, #0x80
	lsls r4, r4, #7
	orrs r3, r4
	bl PutOamHiRam
	adds r1, r5, #1
	ldr r0, _0809020C @ =0x0868BA3C
	adds r0, r6, r0
	ldrb r3, [r0]
	adds r5, r3, r1
	ldrb r3, [r0, #2]
	b _0809029E
	.align 2, 0
_0809020C: .4byte 0x0868BA3C
_08090210: .4byte Sprite_16x16
_08090214:
	subs r4, #0x61
	movs r6, #0
	mov sb, r6
	cmp r4, #0xf
	ble _08090222
	movs r0, #0x20
	mov sb, r0
_08090222:
	cmp r3, #0
	beq _08090248
	ldr r0, _08090244 @ =0x0868BA3C
	lsls r1, r4, #3
	adds r0, r1, r0
	ldrb r0, [r0, #4]
	adds r2, r0, r3
	movs r0, #0xff
	ands r2, r0
	adds r6, r1, #0
	cmp r2, #0x7f
	bgt _0809025C
	movs r0, #0xf
	ands r2, r0
	asrs r0, r2, #1
	subs r5, r5, r0
	b _0809025C
	.align 2, 0
_08090244: .4byte 0x0868BA3C
_08090248:
	ldr r0, _080902E0 @ =0x0868BA3C
	lsls r2, r4, #3
	adds r0, r2, r0
	movs r1, #0x40
	ldrb r0, [r0, #4]
	ands r1, r0
	adds r6, r2, #0
	cmp r1, #0
	beq _0809025C
	subs r5, #2
_0809025C:
	adds r0, r5, #0
	mov r1, ip
	mov r2, sl
	bl sub_808FF9C
	adds r5, r0, #0
	ldr r0, [sp]
	adds r1, r5, #0
	adds r2, r7, #0
	bl sub_808FF04
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r7, #1
	ldr r2, [sp, #4]
	orrs r1, r2
	ldr r2, _080902E4 @ =Sprite_16x16
	lsls r3, r4, #1
	movs r4, #0x80
	lsls r4, r4, #2
	add r4, sb
	adds r3, r3, r4
	movs r4, #0x80
	lsls r4, r4, #7
	orrs r3, r4
	bl PutOamHiRam
	adds r1, r5, #1
	ldr r0, _080902E0 @ =0x0868BA3C
	adds r0, r6, r0
	ldrb r3, [r0, #3]
	adds r5, r3, r1
	ldrb r3, [r0, #5]
_0809029E:
	mov r4, r8
	lsls r2, r4, #1
_080902A2:
	mov ip, sl
	ldr r6, [sp, #8]
	adds r6, #1
	str r6, [sp, #8]
	ldr r1, _080902E8 @ =0x0866354C
	mov r4, r8
	adds r0, r2, r4
	lsls r0, r0, #2
	adds r1, #4
	adds r0, r0, r1
	ldr r0, [r0]
	adds r0, r0, r6
_080902BA:
	ldrb r4, [r0]
	mov sl, r4
	cmp r4, #0
	beq _080902C4
	b _0809005C
_080902C4:
	ldr r1, _080902EC @ =0x02016A42
	ldrb r0, [r1]
	cmp r0, #0x13
	bhi _080902D0
	adds r0, #1
	strb r0, [r1]
_080902D0:
	add sp, #0xc
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080902E0: .4byte 0x0868BA3C
_080902E4: .4byte Sprite_16x16
_080902E8: .4byte 0x0866354C
_080902EC: .4byte 0x02016A42

	thumb_func_start sub_80902F0
sub_80902F0: @ 0x080902F0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r5, r0, #0
	ldr r4, _08090374 @ =0x0866354C
	lsls r0, r5, #1
	adds r0, r0, r5
	lsls r0, r0, #2
	adds r0, r0, r4
	mov r8, r0
	ldrb r6, [r0, #8]
	adds r6, #1
	ldrb r1, [r0, #9]
	lsls r1, r1, #5
	mov sl, r1
	movs r0, #0
	mov sb, r0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _08090378 @ =0x02016A42
	mov r1, sb
	strb r1, [r0]
	cmp r5, #0
	beq _0809035E
	subs r1, r5, #1
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r4
	ldrb r0, [r0, #9]
	lsls r4, r0, #6
	ldr r0, _0809037C @ =gBg0Tm
	adds r0, r4, r0
	movs r1, #0x1e
	movs r2, #2
	movs r3, #0
	bl TmFillRect_t
	ldr r0, _08090380 @ =gBg1Tm
	adds r4, r4, r0
	adds r0, r4, #0
	movs r1, #0x1e
	movs r2, #2
	movs r3, #0
	bl TmFillRect_t
_0809035E:
	movs r7, #0x81
	lsls r7, r7, #7
	mov r1, r8
	ldr r0, [r1]
	cmp r0, #0
	bne _0809036C
	b _080904D6
_0809036C:
	ldr r1, _0809037C @ =gBg0Tm
	mov r8, r1
	b _080904CE
	.align 2, 0
_08090374: .4byte 0x0866354C
_08090378: .4byte 0x02016A42
_0809037C: .4byte gBg0Tm
_08090380: .4byte gBg1Tm
_08090384:
	adds r0, r4, #0
	subs r0, #0xa
	cmp r0, #0x24
	bls _0809038E
	b _0809049C
_0809038E:
	lsls r0, r0, #2
	ldr r1, _0809039C @ =_080903A0
	adds r0, r0, r1
	ldr r0, [r0]
	lsls r2, r5, #1
	mov pc, r0
	.align 2, 0
_0809039C: .4byte _080903A0
_080903A0: @ jump table
	.4byte _08090434 @ case 0
	.4byte _0809049C @ case 1
	.4byte _0809049C @ case 2
	.4byte _0809049C @ case 3
	.4byte _0809049C @ case 4
	.4byte _0809049C @ case 5
	.4byte _0809049C @ case 6
	.4byte _0809049C @ case 7
	.4byte _0809049C @ case 8
	.4byte _0809049C @ case 9
	.4byte _0809049C @ case 10
	.4byte _0809049C @ case 11
	.4byte _0809049C @ case 12
	.4byte _0809049C @ case 13
	.4byte _0809049C @ case 14
	.4byte _0809049C @ case 15
	.4byte _0809049C @ case 16
	.4byte _0809049C @ case 17
	.4byte _0809049C @ case 18
	.4byte _0809049C @ case 19
	.4byte _0809049C @ case 20
	.4byte _0809049C @ case 21
	.4byte _080904B4 @ case 22
	.4byte _0809049C @ case 23
	.4byte _0809049C @ case 24
	.4byte _0809049C @ case 25
	.4byte _0809049C @ case 26
	.4byte _0809049C @ case 27
	.4byte _08090468 @ case 28
	.4byte _0809049C @ case 29
	.4byte _0809049C @ case 30
	.4byte _0809049C @ case 31
	.4byte _0809049C @ case 32
	.4byte _0809049C @ case 33
	.4byte _08090494 @ case 34
	.4byte _0809049C @ case 35
	.4byte _08090498 @ case 36
_08090434:
	ldr r0, _08090460 @ =0x0866354C
	lsls r4, r5, #1
	adds r1, r4, r5
	lsls r1, r1, #2
	adds r1, r1, r0
	ldrb r6, [r1, #8]
	adds r6, #1
	movs r0, #0
	movs r1, #0
	movs r2, #0xa
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0xfe
	bl SetBgOffset
	ldr r0, _08090464 @ =gBg1Tm
	mov r8, r0
	adds r2, r4, #0
	b _080904B4
	.align 2, 0
_08090460: .4byte 0x0866354C
_08090464: .4byte gBg1Tm
_08090468:
	lsls r2, r6, #0x10
	asrs r2, r2, #0x10
	mov r0, sl
	adds r1, r0, r2
	lsls r1, r1, #1
	add r1, r8
	adds r0, r7, #0
	adds r0, #0x1c
	strh r0, [r1]
	adds r0, #1
	strh r0, [r1, #2]
	adds r3, r1, #0
	adds r3, #0x40
	adds r0, #0x1f
	strh r0, [r3]
	adds r1, #0x42
	adds r0, #1
	strh r0, [r1]
	adds r2, #1
	lsls r2, r2, #0x10
	lsrs r6, r2, #0x10
	b _080904B2
_08090494:
	movs r4, #0x1a
	b _0809049E
_08090498:
	movs r4, #0x1b
	b _0809049E
_0809049C:
	subs r4, #0x41
_0809049E:
	lsls r0, r6, #0x10
	asrs r0, r0, #0x10
	add r0, sl
	lsls r0, r0, #1
	add r0, r8
	adds r1, r7, r4
	strh r1, [r0]
	adds r0, #0x40
	adds r1, #0x20
	strh r1, [r0]
_080904B2:
	lsls r2, r5, #1
_080904B4:
	lsls r0, r6, #0x10
	movs r1, #0x80
	lsls r1, r1, #9
	adds r0, r0, r1
	lsrs r6, r0, #0x10
	movs r0, #1
	add sb, r0
	ldr r1, _080904EC @ =0x0866354C
	adds r0, r2, r5
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r0, [r0]
	add r0, sb
_080904CE:
	ldrb r4, [r0]
	cmp r4, #0
	beq _080904D6
	b _08090384
_080904D6:
	movs r0, #3
	bl EnableBgSync
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080904EC: .4byte 0x0866354C

	thumb_func_start sub_80904F0
sub_80904F0: @ 0x080904F0
	adds r1, r0, #0
	adds r1, #0x64
	movs r2, #0
	strh r2, [r1]
	adds r0, #0x66
	strh r2, [r0]
	ldr r1, _08090504 @ =0x02016A3F
	movs r0, #1
	strb r0, [r1]
	bx lr
	.align 2, 0
_08090504: .4byte 0x02016A3F

	thumb_func_start sub_8090508
sub_8090508: @ 0x08090508
	push {r4, lr}
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x66
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	movs r1, #7
	ands r0, r1
	cmp r0, #0
	bne _08090578
	adds r4, r2, #0
	adds r4, #0x64
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xf
	ble _08090536
	adds r0, r2, #0
	bl Proc_Break
_08090536:
	ldr r3, _08090580 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	ldrh r1, [r4]
	adds r0, r3, #0
	adds r0, #0x44
	strb r1, [r0]
	movs r0, #0x10
	subs r0, r0, r1
	adds r1, r3, #0
	adds r1, #0x45
	strb r0, [r1]
	adds r1, #1
	movs r0, #0
	strb r0, [r1]
	ldr r0, _08090584 @ =0x0000FFE0
	ldrh r2, [r3, #0x3c]
	ands r0, r2
	movs r1, #3
	orrs r0, r1
	ldr r1, _08090588 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xc0
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
_08090578:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08090580: .4byte gDispIo
_08090584: .4byte 0x0000FFE0
_08090588: .4byte 0x0000E0FF

	thumb_func_start sub_809058C
sub_809058C: @ 0x0809058C
	push {lr}
	ldr r0, _0809059C @ =0x0868BB3C
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_0809059C: .4byte 0x0868BB3C

	thumb_func_start sub_80905A0
sub_80905A0: @ 0x080905A0
	push {r4, r5, lr}
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x66
	ldrh r0, [r1]
	adds r0, #1
	movs r5, #0
	strh r0, [r1]
	movs r1, #3
	ands r0, r1
	cmp r0, #0
	bne _080905FC
	adds r4, r2, #0
	adds r4, #0x64
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xf
	ble _080905D4
	adds r0, r2, #0
	bl Proc_Break
	ldr r0, _08090604 @ =0x02016A3F
	strb r5, [r0]
_080905D4:
	ldr r3, _08090608 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	ldrh r2, [r4]
	movs r0, #0x10
	subs r0, r0, r2
	adds r1, r3, #0
	adds r1, #0x44
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r5, [r0]
_080905FC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08090604: .4byte 0x02016A3F
_08090608: .4byte gDispIo

	thumb_func_start sub_809060C
sub_809060C: @ 0x0809060C
	push {lr}
	ldr r0, _0809061C @ =0x0868BB5C
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_0809061C: .4byte 0x0868BB5C

	thumb_func_start sub_8090620
sub_8090620: @ 0x08090620
	ldr r1, _0809062C @ =0x02016A40
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	bx lr
	.align 2, 0
_0809062C: .4byte 0x02016A40

	thumb_func_start sub_8090630
sub_8090630: @ 0x08090630
	movs r1, #0
	ldr r0, _08090640 @ =0x02016A3C
	ldrb r0, [r0]
	cmp r0, #0x31
	bls _0809063C
	movs r1, #1
_0809063C:
	adds r0, r1, #0
	bx lr
	.align 2, 0
_08090640: .4byte 0x02016A3C

	thumb_func_start sub_8090644
sub_8090644: @ 0x08090644
	push {lr}
	ldr r1, _08090658 @ =0x02016A3F
	movs r0, #0xff
	strb r0, [r1]
	ldr r0, _0809065C @ =0x02016A3C
	ldrb r0, [r0]
	bl sub_80902F0
	pop {r0}
	bx r0
	.align 2, 0
_08090658: .4byte 0x02016A3F
_0809065C: .4byte 0x02016A3C

	thumb_func_start sub_8090660
sub_8090660: @ 0x08090660
	push {lr}
	ldr r1, _08090670 @ =0x02016A3C
	ldrb r1, [r1]
	bl sub_808FFE0
	pop {r0}
	bx r0
	.align 2, 0
_08090670: .4byte 0x02016A3C

	thumb_func_start sub_8090674
sub_8090674: @ 0x08090674
	push {r4, lr}
	adds r0, #0x64
	movs r4, #0
	movs r1, #0
	strh r1, [r0]
	ldr r0, _08090704 @ =0x0868BA24
	bl InitBgs
	ldr r2, _08090708 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	ldr r0, _0809070C @ =0x0000FFE0
	ldrh r1, [r2, #0x3c]
	ands r0, r1
	ldr r1, _08090710 @ =0x0000E0FF
	ands r0, r1
	strh r0, [r2, #0x3c]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r0, _08090714 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _08090718 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	bl sub_808FD94
	ldr r0, _0809071C @ =0x0868BB7C
	movs r1, #3
	bl SpawnProc
	movs r0, #3
	bl EnableBgSync
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08090704: .4byte 0x0868BA24
_08090708: .4byte gDispIo
_0809070C: .4byte 0x0000FFE0
_08090710: .4byte 0x0000E0FF
_08090714: .4byte gBg0Tm
_08090718: .4byte gBg1Tm
_0809071C: .4byte 0x0868BB7C

	thumb_func_start sub_8090720
sub_8090720: @ 0x08090720
	push {lr}
	adds r2, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	adds r1, #1
	strh r1, [r0]
	lsls r1, r1, #0x10
	movs r0, #0x96
	lsls r0, r0, #0x11
	cmp r1, r0
	ble _0809073C
	adds r0, r2, #0
	bl Proc_Break
_0809073C:
	pop {r0}
	bx r0

	thumb_func_start sub_8090740
sub_8090740: @ 0x08090740
	push {lr}
	ldr r1, _08090760 @ =0x02016A3F
	movs r0, #0
	strb r0, [r1]
	ldr r0, _08090764 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	movs r0, #1
	bl EnableBgSync
	ldr r0, _08090768 @ =0x0868BB7C
	bl Proc_EndEach
	pop {r0}
	bx r0
	.align 2, 0
_08090760: .4byte 0x02016A3F
_08090764: .4byte gBg0Tm
_08090768: .4byte 0x0868BB7C

	thumb_func_start sub_809076C
sub_809076C: @ 0x0809076C
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _08090814 @ =0x0868BA24
	bl InitBgs
	adds r4, #0x4e
	movs r2, #0
	movs r0, #0x8c
	lsls r0, r0, #2
	strh r0, [r4]
	ldr r3, _08090818 @ =gDispIo
	movs r0, #1
	ldrb r1, [r3, #1]
	orrs r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r3, #1]
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r4, [r1]
	ands r0, r4
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x44
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	ldr r0, _0809081C @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	ldr r1, _08090820 @ =0x0000E0FF
	ands r0, r1
	strh r0, [r3, #0x3c]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r4, _08090824 @ =gBg0Tm
	adds r0, r4, #0
	movs r1, #0
	bl TmFill
	ldr r0, _08090828 @ =0x08345420
	movs r1, #0x40
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r5, _0809082C @ =0x08344CD0
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r5, #0
	bl Decompress
	movs r1, #0xa3
	lsls r1, r1, #1
	adds r4, r4, r1
	ldr r1, _08090830 @ =0x0834523C
	movs r2, #0x80
	lsls r2, r2, #6
	adds r0, r4, #0
	bl TmApplyTsa_t
	movs r0, #1
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08090814: .4byte 0x0868BA24
_08090818: .4byte gDispIo
_0809081C: .4byte 0x0000FFE0
_08090820: .4byte 0x0000E0FF
_08090824: .4byte gBg0Tm
_08090828: .4byte 0x08345420
_0809082C: .4byte 0x08344CD0
_08090830: .4byte 0x0834523C

	thumb_func_start sub_8090834
sub_8090834: @ 0x08090834
	push {lr}
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x4e
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _0809084E
	adds r0, r2, #0
	bl Proc_Break
_0809084E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8090854
sub_8090854: @ 0x08090854
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r1, #0
	movs r0, #0
_0809085C:
	movs r3, #0
	adds r4, r0, #1
	lsls r1, r0, #5
	lsls r0, r0, #6
	adds r2, r0, r6
_08090866:
	adds r0, r1, r3
	orrs r0, r5
	strh r0, [r2]
	adds r2, #2
	adds r3, #1
	cmp r3, #0x1f
	ble _08090866
	adds r0, r4, #0
	cmp r0, #0x13
	ble _0809085C
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_8090880
sub_8090880: @ 0x08090880
	push {lr}
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r1, _080908A0 @ =gDispIo
	adds r1, #0x3d
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_080908A0: .4byte gDispIo

	thumb_func_start sub_80908A4
sub_80908A4: @ 0x080908A4
	push {r4, r5, r6, lr}
	adds r0, #0x64
	movs r4, #0
	movs r1, #0
	strh r1, [r0]
	ldr r0, _080909DC @ =0x0868BA24
	bl InitBgs
	ldr r3, _080909E0 @ =gDispIo
	movs r0, #1
	ldrb r1, [r3, #1]
	orrs r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x11
	rsbs r1, r1, #0
	ands r0, r1
	strb r0, [r3, #1]
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r0, #0xa
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	ldr r0, _080909E4 @ =0x0000FFE0
	ldrh r2, [r3, #0x3c]
	ands r0, r2
	movs r1, #0x18
	orrs r0, r1
	ldr r1, _080909E8 @ =0x0000E0FF
	ands r0, r1
	strh r0, [r3, #0x3c]
	adds r1, r3, #0
	adds r1, #0x3d
	movs r0, #0x20
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	movs r0, #0
	movs r1, #4
	movs r2, #4
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r6, _080909EC @ =gBg0Tm
	adds r0, r6, #0
	movs r1, #0
	bl TmFill
	ldr r5, _080909F0 @ =gBg3Tm
	adds r0, r5, #0
	movs r1, #0
	bl TmFill
	ldr r0, _080909F4 @ =0x08344CB0
	movs r1, #0xc0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080909F8 @ =0x08320D98
	movs r1, #0x80
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, _080909FC @ =0x08344304
	ldr r1, _08090A00 @ =0x06001000
	bl Decompress
	ldr r4, _08090A04 @ =0x0831B0A8
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r1, _08090A08 @ =0x08345440
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r5, #0
	bl TmApplyTsa_t
	movs r3, #0xc1
	lsls r3, r3, #7
	movs r2, #0
_0809097C:
	ldr r1, _08090A0C @ =0x00000107
	adds r0, r2, r1
	lsls r0, r0, #1
	adds r0, r0, r6
	adds r1, r3, r2
	strh r1, [r0]
	ldr r0, _08090A10 @ =0x00000127
	adds r1, r2, r0
	lsls r1, r1, #1
	adds r1, r1, r6
	adds r0, r3, #0
	adds r0, #0x20
	adds r0, r0, r2
	strh r0, [r1]
	ldr r0, _08090A14 @ =0x00000147
	adds r1, r2, r0
	lsls r1, r1, #1
	adds r1, r1, r6
	adds r0, r3, #0
	adds r0, #0x40
	adds r0, r0, r2
	strh r0, [r1]
	ldr r0, _08090A18 @ =0x00000167
	adds r1, r2, r0
	lsls r1, r1, #1
	adds r1, r1, r6
	adds r0, r3, #0
	adds r0, #0x60
	adds r0, r0, r2
	strh r0, [r1]
	ldr r0, _08090A1C @ =0x00000187
	adds r1, r2, r0
	lsls r1, r1, #1
	adds r1, r1, r6
	adds r0, r3, #0
	adds r0, #0x80
	adds r0, r0, r2
	strh r0, [r1]
	adds r2, #1
	cmp r2, #0x10
	ble _0809097C
	movs r0, #9
	bl EnableBgSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080909DC: .4byte 0x0868BA24
_080909E0: .4byte gDispIo
_080909E4: .4byte 0x0000FFE0
_080909E8: .4byte 0x0000E0FF
_080909EC: .4byte gBg0Tm
_080909F0: .4byte gBg3Tm
_080909F4: .4byte 0x08344CB0
_080909F8: .4byte 0x08320D98
_080909FC: .4byte 0x08344304
_08090A00: .4byte 0x06001000
_08090A04: .4byte 0x0831B0A8
_08090A08: .4byte 0x08345440
_08090A0C: .4byte 0x00000107
_08090A10: .4byte 0x00000127
_08090A14: .4byte 0x00000147
_08090A18: .4byte 0x00000167
_08090A1C: .4byte 0x00000187

	thumb_func_start sub_8090A20
sub_8090A20: @ 0x08090A20
	push {lr}
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x64
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xf0
	ble _08090A3C
	adds r0, r2, #0
	bl Proc_Break
_08090A3C:
	pop {r0}
	bx r0

	thumb_func_start sub_8090A40
sub_8090A40: @ 0x08090A40
	push {r4, r5, r6, lr}
	adds r0, #0x64
	movs r4, #0
	movs r1, #0
	strh r1, [r0]
	ldr r0, _08090B54 @ =0x0868BA24
	bl InitBgs
	ldr r2, _08090B58 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	ldr r0, _08090B5C @ =0x0000FFE0
	ldrh r1, [r2, #0x3c]
	ands r0, r1
	ldr r1, _08090B60 @ =0x0000E0FF
	ands r0, r1
	strh r0, [r2, #0x3c]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r6, _08090B64 @ =gBg0Tm
	adds r0, r6, #0
	movs r1, #0
	bl TmFill
	ldr r5, _08090B68 @ =gBg3Tm
	adds r0, r5, #0
	movs r1, #0
	bl TmFill
	ldr r0, _08090B6C @ =0x0833BFDC
	movs r1, #0x80
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08090B70 @ =0x08344CB0
	movs r1, #0xc0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08090B74 @ =0x083449F8
	ldr r1, _08090B78 @ =0x06001000
	bl Decompress
	ldr r4, _08090B7C @ =0x08336D5C
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r3, #0xc0
	lsls r3, r3, #0x13
	adds r1, r1, r3
	adds r0, r4, #0
	bl Decompress
	movs r1, #0x80
	lsls r1, r1, #7
	adds r0, r5, #0
	bl sub_8090854
	movs r3, #0xc1
	lsls r3, r3, #7
	movs r2, #0
_08090AFC:
	movs r1, #0x86
	lsls r1, r1, #1
	adds r0, r2, r1
	lsls r0, r0, #1
	adds r0, r0, r6
	adds r1, r3, r2
	strh r1, [r0]
	movs r0, #0x96
	lsls r0, r0, #1
	adds r1, r2, r0
	lsls r1, r1, #1
	adds r1, r1, r6
	adds r0, r3, #0
	adds r0, #0x20
	adds r0, r0, r2
	strh r0, [r1]
	movs r0, #0xa6
	lsls r0, r0, #1
	adds r1, r2, r0
	lsls r1, r1, #1
	adds r1, r1, r6
	adds r0, r3, #0
	adds r0, #0x40
	adds r0, r0, r2
	strh r0, [r1]
	movs r0, #0xb6
	lsls r0, r0, #1
	adds r1, r2, r0
	lsls r1, r1, #1
	adds r1, r1, r6
	adds r0, r3, #0
	adds r0, #0x60
	adds r0, r0, r2
	strh r0, [r1]
	adds r2, #1
	cmp r2, #5
	ble _08090AFC
	movs r0, #9
	bl EnableBgSync
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08090B54: .4byte 0x0868BA24
_08090B58: .4byte gDispIo
_08090B5C: .4byte 0x0000FFE0
_08090B60: .4byte 0x0000E0FF
_08090B64: .4byte gBg0Tm
_08090B68: .4byte gBg3Tm
_08090B6C: .4byte 0x0833BFDC
_08090B70: .4byte 0x08344CB0
_08090B74: .4byte 0x083449F8
_08090B78: .4byte 0x06001000
_08090B7C: .4byte 0x08336D5C

	thumb_func_start sub_8090B80
sub_8090B80: @ 0x08090B80
	push {lr}
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x64
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xf0
	ble _08090B9C
	adds r0, r2, #0
	bl Proc_Break
_08090B9C:
	pop {r0}
	bx r0

	thumb_func_start sub_8090BA0
sub_8090BA0: @ 0x08090BA0
	ldr r1, _08090BBC @ =0x02016A3D
	ldrb r0, [r1]
	cmp r0, #0xc
	bhi _08090BC4
	ldr r0, _08090BC0 @ =0x0868BCE4
	ldrb r1, [r1]
	lsls r1, r1, #4
	adds r1, r1, r0
	ldr r0, [r1]
	cmp r0, #0
	beq _08090BC4
	movs r0, #1
	b _08090BC6
	.align 2, 0
_08090BBC: .4byte 0x02016A3D
_08090BC0: .4byte 0x0868BCE4
_08090BC4:
	movs r0, #0
_08090BC6:
	bx lr

	thumb_func_start sub_8090BC8
sub_8090BC8: @ 0x08090BC8
	push {r4, r5, lr}
	movs r5, #0
	adds r0, #0x64
	movs r4, #0
	strh r5, [r0]
	ldr r0, _08090C48 @ =0x0868BA24
	bl InitBgs
	ldr r2, _08090C4C @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	ldr r0, _08090C50 @ =0x0000FFE0
	ldrh r1, [r2, #0x3c]
	ands r0, r1
	ldr r1, _08090C54 @ =0x0000E0FF
	ands r0, r1
	strh r0, [r2, #0x3c]
	ldr r2, _08090C58 @ =0x0000FFFC
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	ldr r0, _08090C5C @ =gBg2Tm
	movs r1, #0
	bl TmFill
	ldr r0, _08090C60 @ =0x02016A3D
	ldrb r0, [r0]
	cmp r0, #0xa
	beq _08090C64
	cmp r0, #0xa
	blt _08090C96
	cmp r0, #0xb
	beq _08090C74
	cmp r0, #0xc
	beq _08090C88
	b _08090C96
	.align 2, 0
_08090C48: .4byte 0x0868BA24
_08090C4C: .4byte gDispIo
_08090C50: .4byte 0x0000FFE0
_08090C54: .4byte 0x0000E0FF
_08090C58: .4byte 0x0000FFFC
_08090C5C: .4byte gBg2Tm
_08090C60: .4byte 0x02016A3D
_08090C64:
	movs r0, #0x6b
	bl CheckFlag
	movs r1, #0
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08090C84
	b _08090C82
_08090C74:
	bl GetEndingId
	movs r1, #0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #2
	bne _08090C84
_08090C82:
	movs r1, #1
_08090C84:
	adds r5, r1, #0
	b _08090C96
_08090C88:
	bl GetEndingId
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	rsbs r1, r0, #0
	orrs r1, r0
	lsrs r5, r1, #0x1f
_08090C96:
	lsls r0, r5, #0x18
	adds r5, r0, #0
	cmp r5, #0
	beq _08090CB8
	ldr r0, _08090CB0 @ =0x0868BCE4
	ldr r1, _08090CB4 @ =0x02016A3D
	ldrb r1, [r1]
	lsls r1, r1, #4
	adds r0, #8
	adds r1, r1, r0
	ldr r4, [r1]
	b _08090CC4
	.align 2, 0
_08090CB0: .4byte 0x0868BCE4
_08090CB4: .4byte 0x02016A3D
_08090CB8:
	ldr r1, _08090CE8 @ =0x0868BCE4
	ldr r0, _08090CEC @ =0x02016A3D
	ldrb r0, [r0]
	lsls r0, r0, #4
	adds r0, r0, r1
	ldr r4, [r0]
_08090CC4:
	movs r0, #2
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r3, _08090CF0 @ =0x06002800
	adds r1, r1, r3
	adds r0, r4, #0
	bl Decompress
	cmp r5, #0
	beq _08090CF4
	ldr r0, _08090CE8 @ =0x0868BCE4
	ldr r1, _08090CEC @ =0x02016A3D
	ldrb r1, [r1]
	lsls r1, r1, #4
	adds r0, #0xc
	b _08090CFE
	.align 2, 0
_08090CE8: .4byte 0x0868BCE4
_08090CEC: .4byte 0x02016A3D
_08090CF0: .4byte 0x06002800
_08090CF4:
	ldr r0, _08090D24 @ =0x0868BCE4
	ldr r1, _08090D28 @ =0x02016A3D
	ldrb r1, [r1]
	lsls r1, r1, #4
	adds r0, #4
_08090CFE:
	adds r1, r1, r0
	ldr r0, [r1]
	movs r1, #0xc0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08090D2C @ =0x02022C56
	ldr r1, _08090D30 @ =0x00006140
	movs r2, #0xf
	movs r3, #0xa
	bl sub_808FDE8
	movs r0, #4
	bl EnableBgSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08090D24: .4byte 0x0868BCE4
_08090D28: .4byte 0x02016A3D
_08090D2C: .4byte 0x02022C56
_08090D30: .4byte 0x00006140

	thumb_func_start sub_8090D34
sub_8090D34: @ 0x08090D34
	push {lr}
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x64
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xf0
	ble _08090D50
	adds r0, r2, #0
	bl Proc_Break
_08090D50:
	pop {r0}
	bx r0

	thumb_func_start sub_8090D54
sub_8090D54: @ 0x08090D54
	ldr r0, _08090D60 @ =0x02016A40
	ldrb r0, [r0]
	cmp r0, #1
	bls _08090D64
	movs r0, #0
	b _08090D66
	.align 2, 0
_08090D60: .4byte 0x02016A40
_08090D64:
	movs r0, #1
_08090D66:
	bx lr

	thumb_func_start sub_8090D68
sub_8090D68: @ 0x08090D68
	push {lr}
	adds r0, #0x64
	movs r1, #0
	strh r1, [r0]
	bl MU_EndAll
	pop {r0}
	bx r0

	thumb_func_start sub_8090D78
sub_8090D78: @ 0x08090D78
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x64
	movs r1, #0
	ldrsh r0, [r0, r1]
	cmp r0, #7
	bls _08090D88
	b _08090F2A
_08090D88:
	lsls r0, r0, #2
	ldr r1, _08090D94 @ =_08090D98
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08090D94: .4byte _08090D98
_08090D98: @ jump table
	.4byte _08090DB8 @ case 0
	.4byte _08090E84 @ case 1
	.4byte _08090EC0 @ case 2
	.4byte _08090ED0 @ case 3
	.4byte _08090EDC @ case 4
	.4byte _08090EF2 @ case 5
	.4byte _08090F1C @ case 6
	.4byte _08090F24 @ case 7
_08090DB8:
	ldr r0, _08090DD0 @ =0x02016A3E
	movs r1, #0
	strb r1, [r0]
	bl sub_8090630
	cmp r0, #1
	bne _08090DD4
	adds r1, r4, #0
	adds r1, #0x64
	movs r0, #2
	strh r0, [r1]
	b _08090F2A
	.align 2, 0
_08090DD0: .4byte 0x02016A3E
_08090DD4:
	ldr r2, _08090DFC @ =0x0866354C
	ldr r1, _08090E00 @ =0x02016A3C
	ldrb r3, [r1]
	lsls r0, r3, #1
	adds r0, r0, r3
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r0, [r0]
	cmp r0, #1
	bne _08090E0C
	ldr r0, _08090E04 @ =0x02016A41
	ldrb r0, [r0]
	cmp r0, #0
	beq _08090E68
	ldr r0, _08090E08 @ =0x0868BC44
	adds r1, r4, #0
	bl SpawnProcLocking
	b _08090E68
	.align 2, 0
_08090DFC: .4byte 0x0866354C
_08090E00: .4byte 0x02016A3C
_08090E04: .4byte 0x02016A41
_08090E08: .4byte 0x0868BC44
_08090E0C:
	cmp r0, #2
	bne _08090E60
	bl sub_809164C
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x3f
	bhi _08090E38
	ldr r0, _08090E30 @ =0x02016A41
	ldrb r0, [r0]
	cmp r0, #0
	beq _08090E38
	ldr r0, _08090E34 @ =0x0868BE74
	adds r1, r4, #0
	bl SpawnProcLocking
	b _08090E4A
	.align 2, 0
_08090E30: .4byte 0x02016A41
_08090E34: .4byte 0x0868BE74
_08090E38:
	bl sub_8090BA0
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08090E4A
	ldr r0, _08090E58 @ =0x0868BDB4
	adds r1, r4, #0
	bl SpawnProcLocking
_08090E4A:
	ldr r1, _08090E5C @ =0x02016A3E
	movs r0, #2
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	b _08090E68
	.align 2, 0
_08090E58: .4byte 0x0868BDB4
_08090E5C: .4byte 0x02016A3E
_08090E60:
	ldr r0, _08090E7C @ =0x0868BB9C
	adds r1, r4, #0
	bl SpawnProcLocking
_08090E68:
	ldr r1, _08090E80 @ =0x02016A3E
	movs r0, #1
	ldrb r3, [r1]
	orrs r0, r3
	strb r0, [r1]
	adds r1, r4, #0
	adds r1, #0x64
	movs r0, #1
	strh r0, [r1]
	b _08090F2A
	.align 2, 0
_08090E7C: .4byte 0x0868BB9C
_08090E80: .4byte 0x02016A3E
_08090E84:
	ldr r2, _08090EB4 @ =0x02016A3E
	movs r0, #1
	ldrb r1, [r2]
	ands r0, r1
	cmp r0, #0
	beq _08090E98
	ldr r1, _08090EB8 @ =0x02016A3C
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_08090E98:
	movs r0, #2
	ldrb r2, [r2]
	ands r0, r2
	cmp r0, #0
	beq _08090EAA
	ldr r1, _08090EBC @ =0x02016A3D
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
_08090EAA:
	adds r1, r4, #0
	adds r1, #0x64
	movs r0, #0
	strh r0, [r1]
	b _08090F2A
	.align 2, 0
_08090EB4: .4byte 0x02016A3E
_08090EB8: .4byte 0x02016A3C
_08090EBC: .4byte 0x02016A3D
_08090EC0:
	ldr r0, _08090ECC @ =0x0868BBEC
_08090EC2:
	adds r1, r4, #0
	bl SpawnProcLocking
	b _08090F10
	.align 2, 0
_08090ECC: .4byte 0x0868BBEC
_08090ED0:
	bl sub_806DEB4
	ldr r0, _08090ED8 @ =0x0868B8E4
	b _08090EC2
	.align 2, 0
_08090ED8: .4byte 0x0868B8E4
_08090EDC:
	movs r0, #0x36
	movs r1, #0
	bl StartBgm
	bl sub_8091588
	adds r1, r4, #0
	adds r1, #0x64
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
_08090EF2:
	movs r0, #0
	bl sub_80916AC
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0x3f
	bhi _08090F10
	ldr r0, _08090F0C @ =0x0868BF3C
	adds r1, r4, #0
	bl SpawnProcLocking
	b _08090F2A
	.align 2, 0
_08090F0C: .4byte 0x0868BF3C
_08090F10:
	adds r1, r4, #0
	adds r1, #0x64
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	b _08090F2A
_08090F1C:
	ldr r0, _08090F30 @ =0x0868BC8C
	adds r1, r4, #0
	bl SpawnProcLocking
_08090F24:
	adds r0, r4, #0
	bl Proc_Break
_08090F2A:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08090F30: .4byte 0x0868BC8C

	thumb_func_start sub_8090F34
sub_8090F34: @ 0x08090F34
	push {lr}
	adds r1, r0, #0
	ldr r0, _08090F44 @ =0x0868BDF4
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
_08090F44: .4byte 0x0868BDF4

	thumb_func_start sub_8090F48
sub_8090F48: @ 0x08090F48
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _08090F68 @ =0x0866354C
	ldr r3, _08090F6C @ =0x02016A3C
	ldrb r2, [r3]
	lsls r1, r2, #1
	adds r1, r1, r2
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	subs r0, #1
	cmp r0, #1
	bhi _08090F70
	adds r0, r2, #1
	strb r0, [r3]
	b _08090FFC
	.align 2, 0
_08090F68: .4byte 0x0866354C
_08090F6C: .4byte 0x02016A3C
_08090F70:
	adds r0, r5, #0
	adds r0, #0x64
	movs r4, #0
	ldrsh r1, [r0, r4]
	adds r4, r0, #0
	cmp r1, #0xb4
	beq _08090FEC
	cmp r1, #0xb4
	bgt _08090F88
	cmp r1, #0x3c
	beq _08090F98
	b _08090FEC
_08090F88:
	movs r0, #0xd2
	lsls r0, r0, #1
	cmp r1, r0
	beq _08090FA4
	adds r0, #0x78
	cmp r1, r0
	beq _08090FAA
	b _08090FEC
_08090F98:
	adds r0, r2, #0
	bl sub_80902F0
	bl sub_809058C
	b _08090FEC
_08090FA4:
	bl sub_809060C
	b _08090FEC
_08090FAA:
	movs r0, #0
	strh r0, [r4]
	ldrb r0, [r3]
	adds r0, #1
	strb r0, [r3]
	ldr r0, _08090FE0 @ =0x02016A40
	ldrb r0, [r0]
	cmp r0, #0
	beq _08090FF2
	ldr r0, _08090FE4 @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _08090FE8 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	movs r0, #3
	bl EnableBgSync
	adds r0, r5, #0
	bl Proc_Break
	bl sub_8090620
	b _08090FF2
	.align 2, 0
_08090FE0: .4byte 0x02016A40
_08090FE4: .4byte gBg0Tm
_08090FE8: .4byte gBg1Tm
_08090FEC:
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
_08090FF2:
	ldr r0, _08091004 @ =0x02016A3C
	ldrb r1, [r0]
	adds r0, r5, #0
	bl sub_808FFE0
_08090FFC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08091004: .4byte 0x02016A3C

	thumb_func_start sub_8091008
sub_8091008: @ 0x08091008
	push {lr}
	ldr r0, _08091018 @ =0x0868BE2C
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_08091018: .4byte 0x0868BE2C

	thumb_func_start sub_809101C
sub_809101C: @ 0x0809101C
	push {r4, r5, lr}
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	movs r0, #1
	bl GetUnitByPid
	adds r5, r0, #0
	adds r1, r4, #0
	bl GetUnitSupportNumByPid
	adds r1, r0, #0
	adds r0, r5, #0
	bl GetUnitSupportLevel
	cmp r0, #2
	bgt _08091042
	movs r0, #0
	b _08091044
_08091042:
	movs r0, #1
_08091044:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_809104C
sub_809104C: @ 0x0809104C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	movs r4, #1
	ldr r3, _080910B8 @ =0x02016B94
	ldr r2, _080910BC @ =gPal
_0809105A:
	lsls r1, r4, #1
	adds r1, r1, r3
	adds r0, r4, #0
	adds r0, #0x20
	lsls r0, r0, #1
	adds r0, r0, r2
	ldrh r1, [r1]
	ldrh r0, [r0]
	cmp r1, r0
	beq _080910C8
	movs r4, #0
	ldr r7, _080910C0 @ =0x02021748
	ldr r0, _080910B8 @ =0x02016B94
	mov r8, r0
	ldr r5, _080910C4 @ =0x02016C94
	mov sb, r5
	mov r6, r8
_0809107C:
	adds r0, r7, #0
	adds r1, r6, #0
	movs r2, #8
	bl CpuFastSet
	mov r0, r8
	adds r1, r4, #0
	movs r2, #1
	adds r3, r4, #0
	bl sub_805B5C8
	adds r0, r7, #0
	adds r0, #0x20
	adds r1, r5, #0
	movs r2, #8
	bl CpuFastSet
	mov r0, sb
	adds r1, r4, #0
	movs r2, #1
	adds r3, r4, #0
	bl sub_805B5C8
	adds r5, #0x20
	adds r6, #0x20
	adds r4, #1
	cmp r4, #7
	ble _0809107C
	b _080910CE
	.align 2, 0
_080910B8: .4byte 0x02016B94
_080910BC: .4byte gPal
_080910C0: .4byte 0x02021748
_080910C4: .4byte 0x02016C94
_080910C8:
	adds r4, #1
	cmp r4, #0xf
	ble _0809105A
_080910CE:
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80910DC
sub_80910DC: @ 0x080910DC
	push {r4, r5, lr}
	movs r2, #0
	ldr r0, _080910F4 @ =0x04000006
	ldrh r0, [r0]
	cmp r0, #0x18
	beq _080910FE
	cmp r0, #0x18
	bgt _080910F8
	cmp r0, #0
	beq _0809110C
	b _08091110
	.align 2, 0
_080910F4: .4byte 0x04000006
_080910F8:
	cmp r0, #0x30
	beq _0809110C
	b _08091110
_080910FE:
	ldr r1, _08091108 @ =0x04000012
	movs r0, #4
	strh r0, [r1]
	b _08091110
	.align 2, 0
_08091108: .4byte 0x04000012
_0809110C:
	ldr r0, _08091134 @ =0x04000012
	strh r2, [r0]
_08091110:
	ldr r0, _08091138 @ =0x04000006
	ldrh r0, [r0]
	cmp r0, #0x3c
	beq _08091186
	cmp r0, #0x3c
	bgt _08091156
	cmp r0, #0x34
	beq _0809118E
	cmp r0, #0x34
	bgt _08091142
	cmp r0, #0x30
	beq _08091192
	cmp r0, #0x30
	bgt _0809113C
	cmp r0, #0
	beq _08091194
	b _080911BA
	.align 2, 0
_08091134: .4byte 0x04000012
_08091138: .4byte 0x04000006
_0809113C:
	cmp r0, #0x32
	beq _08091190
	b _080911BA
_08091142:
	cmp r0, #0x38
	beq _0809118A
	cmp r0, #0x38
	bgt _08091150
	cmp r0, #0x36
	beq _0809118C
	b _080911BA
_08091150:
	cmp r0, #0x3a
	beq _08091188
	b _080911BA
_08091156:
	cmp r0, #0x96
	beq _0809118E
	cmp r0, #0x96
	bgt _08091172
	cmp r0, #0x92
	beq _0809118A
	cmp r0, #0x92
	bgt _0809116C
	cmp r0, #0x90
	beq _08091188
	b _080911BA
_0809116C:
	cmp r0, #0x94
	beq _0809118C
	b _080911BA
_08091172:
	cmp r0, #0x9a
	beq _08091192
	cmp r0, #0x9a
	bgt _08091180
	cmp r0, #0x98
	beq _08091190
	b _080911BA
_08091180:
	cmp r0, #0x9c
	beq _08091194
	b _080911BA
_08091186:
	adds r2, #1
_08091188:
	adds r2, #1
_0809118A:
	adds r2, #1
_0809118C:
	adds r2, #1
_0809118E:
	adds r2, #1
_08091190:
	adds r2, #1
_08091192:
	adds r2, #1
_08091194:
	lsls r0, r2, #5
	ldr r2, _080911C0 @ =0x02016B94
	ldr r1, _080911C4 @ =0x02016C94
	adds r3, r0, r1
	ldr r5, _080911C8 @ =0x05000060
	adds r1, r0, r2
	ldr r4, _080911CC @ =0x05000040
	movs r2, #0xf
_080911A4:
	ldrh r0, [r1]
	strh r0, [r4]
	ldrh r0, [r3]
	strh r0, [r5]
	adds r3, #2
	adds r5, #2
	adds r1, #2
	adds r4, #2
	subs r2, #1
	cmp r2, #0
	bge _080911A4
_080911BA:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080911C0: .4byte 0x02016B94
_080911C4: .4byte 0x02016C94
_080911C8: .4byte 0x05000060
_080911CC: .4byte 0x05000040

	thumb_func_start sub_80911D0
sub_80911D0: @ 0x080911D0
	push {r4, r5, lr}
	movs r3, #0
	ldr r4, _08091210 @ =0x04000006
	ldrh r0, [r4]
	cmp r0, #0
	bne _080911E8
	ldr r2, _08091214 @ =0x04000010
	ldr r0, _08091218 @ =0x02016B90
	ldrh r1, [r0]
	strh r1, [r2]
	ldr r0, _0809121C @ =0x04000014
	strh r1, [r0]
_080911E8:
	ldrh r0, [r4]
	cmp r0, #0x50
	bne _080911FA
	ldr r2, _08091214 @ =0x04000010
	ldr r0, _08091218 @ =0x02016B90
	ldrh r1, [r0, #2]
	strh r1, [r2]
	ldr r0, _0809121C @ =0x04000014
	strh r1, [r0]
_080911FA:
	ldrh r0, [r4]
	cmp r0, #0x2a
	beq _0809124C
	cmp r0, #0x2a
	bgt _08091220
	cmp r0, #0
	beq _08091234
	cmp r0, #0x18
	beq _08091240
	b _08091252
	.align 2, 0
_08091210: .4byte 0x04000006
_08091214: .4byte 0x04000010
_08091218: .4byte 0x02016B90
_0809121C: .4byte 0x04000014
_08091220:
	cmp r0, #0x68
	beq _08091240
	cmp r0, #0x68
	bgt _0809122E
	cmp r0, #0x50
	beq _08091234
	b _08091252
_0809122E:
	cmp r0, #0x7a
	beq _0809124C
	b _08091252
_08091234:
	ldr r1, _0809123C @ =0x04000012
	movs r0, #0
	b _08091250
	.align 2, 0
_0809123C: .4byte 0x04000012
_08091240:
	ldr r1, _08091248 @ =0x04000012
	movs r0, #4
	b _08091250
	.align 2, 0
_08091248: .4byte 0x04000012
_0809124C:
	ldr r1, _08091268 @ =0x04000012
	movs r0, #5
_08091250:
	strh r0, [r1]
_08091252:
	ldr r0, _0809126C @ =0x04000006
	ldrh r0, [r0]
	subs r0, #9
	cmp r0, #0x86
	bls _0809125E
	b _080914C4
_0809125E:
	lsls r0, r0, #2
	ldr r1, _08091270 @ =_08091274
	adds r0, r0, r1
	ldr r0, [r0]
	mov pc, r0
	.align 2, 0
_08091268: .4byte 0x04000012
_0809126C: .4byte 0x04000006
_08091270: .4byte _08091274
_08091274: @ jump table
	.4byte _0809149E @ case 0
	.4byte _080914C4 @ case 1
	.4byte _080914C4 @ case 2
	.4byte _080914C4 @ case 3
	.4byte _080914C4 @ case 4
	.4byte _080914C4 @ case 5
	.4byte _080914C4 @ case 6
	.4byte _080914C4 @ case 7
	.4byte _080914C4 @ case 8
	.4byte _0809149C @ case 9
	.4byte _080914C4 @ case 10
	.4byte _080914C4 @ case 11
	.4byte _080914C4 @ case 12
	.4byte _080914C4 @ case 13
	.4byte _080914C4 @ case 14
	.4byte _080914C4 @ case 15
	.4byte _080914C4 @ case 16
	.4byte _080914C4 @ case 17
	.4byte _0809149A @ case 18
	.4byte _080914C4 @ case 19
	.4byte _080914C4 @ case 20
	.4byte _080914C4 @ case 21
	.4byte _080914C4 @ case 22
	.4byte _080914C4 @ case 23
	.4byte _080914C4 @ case 24
	.4byte _080914C4 @ case 25
	.4byte _080914C4 @ case 26
	.4byte _08091498 @ case 27
	.4byte _080914C4 @ case 28
	.4byte _080914C4 @ case 29
	.4byte _080914C4 @ case 30
	.4byte _080914C4 @ case 31
	.4byte _080914C4 @ case 32
	.4byte _080914C4 @ case 33
	.4byte _080914C4 @ case 34
	.4byte _080914C4 @ case 35
	.4byte _08091496 @ case 36
	.4byte _080914C4 @ case 37
	.4byte _080914C4 @ case 38
	.4byte _080914C4 @ case 39
	.4byte _080914C4 @ case 40
	.4byte _080914C4 @ case 41
	.4byte _080914C4 @ case 42
	.4byte _080914C4 @ case 43
	.4byte _080914C4 @ case 44
	.4byte _08091494 @ case 45
	.4byte _080914C4 @ case 46
	.4byte _080914C4 @ case 47
	.4byte _080914C4 @ case 48
	.4byte _080914C4 @ case 49
	.4byte _080914C4 @ case 50
	.4byte _080914C4 @ case 51
	.4byte _080914C4 @ case 52
	.4byte _080914C4 @ case 53
	.4byte _08091492 @ case 54
	.4byte _080914C4 @ case 55
	.4byte _080914C4 @ case 56
	.4byte _080914C4 @ case 57
	.4byte _080914C4 @ case 58
	.4byte _080914C4 @ case 59
	.4byte _080914C4 @ case 60
	.4byte _080914C4 @ case 61
	.4byte _080914C4 @ case 62
	.4byte _08091490 @ case 63
	.4byte _080914C4 @ case 64
	.4byte _080914C4 @ case 65
	.4byte _080914C4 @ case 66
	.4byte _080914C4 @ case 67
	.4byte _080914C4 @ case 68
	.4byte _080914C4 @ case 69
	.4byte _080914C4 @ case 70
	.4byte _080914C4 @ case 71
	.4byte _080914C4 @ case 72
	.4byte _080914C4 @ case 73
	.4byte _080914C4 @ case 74
	.4byte _080914C4 @ case 75
	.4byte _080914C4 @ case 76
	.4byte _080914C4 @ case 77
	.4byte _080914C4 @ case 78
	.4byte _080914C4 @ case 79
	.4byte _08091492 @ case 80
	.4byte _080914C4 @ case 81
	.4byte _080914C4 @ case 82
	.4byte _080914C4 @ case 83
	.4byte _080914C4 @ case 84
	.4byte _080914C4 @ case 85
	.4byte _080914C4 @ case 86
	.4byte _080914C4 @ case 87
	.4byte _080914C4 @ case 88
	.4byte _08091494 @ case 89
	.4byte _080914C4 @ case 90
	.4byte _080914C4 @ case 91
	.4byte _080914C4 @ case 92
	.4byte _080914C4 @ case 93
	.4byte _080914C4 @ case 94
	.4byte _080914C4 @ case 95
	.4byte _080914C4 @ case 96
	.4byte _080914C4 @ case 97
	.4byte _08091496 @ case 98
	.4byte _080914C4 @ case 99
	.4byte _080914C4 @ case 100
	.4byte _080914C4 @ case 101
	.4byte _080914C4 @ case 102
	.4byte _080914C4 @ case 103
	.4byte _080914C4 @ case 104
	.4byte _080914C4 @ case 105
	.4byte _080914C4 @ case 106
	.4byte _08091498 @ case 107
	.4byte _080914C4 @ case 108
	.4byte _080914C4 @ case 109
	.4byte _080914C4 @ case 110
	.4byte _080914C4 @ case 111
	.4byte _080914C4 @ case 112
	.4byte _080914C4 @ case 113
	.4byte _080914C4 @ case 114
	.4byte _080914C4 @ case 115
	.4byte _0809149A @ case 116
	.4byte _080914C4 @ case 117
	.4byte _080914C4 @ case 118
	.4byte _080914C4 @ case 119
	.4byte _080914C4 @ case 120
	.4byte _080914C4 @ case 121
	.4byte _080914C4 @ case 122
	.4byte _080914C4 @ case 123
	.4byte _080914C4 @ case 124
	.4byte _0809149C @ case 125
	.4byte _080914C4 @ case 126
	.4byte _080914C4 @ case 127
	.4byte _080914C4 @ case 128
	.4byte _080914C4 @ case 129
	.4byte _080914C4 @ case 130
	.4byte _080914C4 @ case 131
	.4byte _080914C4 @ case 132
	.4byte _080914C4 @ case 133
	.4byte _0809149E @ case 134
_08091490:
	adds r3, #1
_08091492:
	adds r3, #1
_08091494:
	adds r3, #1
_08091496:
	adds r3, #1
_08091498:
	adds r3, #1
_0809149A:
	adds r3, #1
_0809149C:
	adds r3, #1
_0809149E:
	lsls r0, r3, #5
	ldr r2, _080914CC @ =0x02016B94
	ldr r1, _080914D0 @ =0x02016C94
	adds r3, r0, r1
	ldr r5, _080914D4 @ =0x05000060
	adds r1, r0, r2
	ldr r4, _080914D8 @ =0x05000040
	movs r2, #0xf
_080914AE:
	ldrh r0, [r1]
	strh r0, [r4]
	ldrh r0, [r3]
	strh r0, [r5]
	adds r3, #2
	adds r5, #2
	adds r1, #2
	adds r4, #2
	subs r2, #1
	cmp r2, #0
	bge _080914AE
_080914C4:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080914CC: .4byte 0x02016B94
_080914D0: .4byte 0x02016C94
_080914D4: .4byte 0x05000060
_080914D8: .4byte 0x05000040

	thumb_func_start sub_80914DC
sub_80914DC: @ 0x080914DC
	push {r4, r5, r6, lr}
	movs r5, #0
	movs r6, #0
	movs r4, #1
_080914E4:
	adds r0, r4, #0
	bl GetUnit
	adds r1, r0, #0
	cmp r1, #0
	beq _08091520
	ldr r0, [r1]
	cmp r0, #0
	beq _08091520
	movs r0, #8
	ldrh r1, [r1, #0xc]
	ands r0, r1
	cmp r0, #0
	bne _08091514
	cmp r5, #0xd
	bgt _08091520
	ldr r0, _08091510 @ =0x0203DCA7
	adds r0, r5, r0
	strb r4, [r0]
	adds r5, #1
	b _08091520
	.align 2, 0
_08091510: .4byte 0x0203DCA7
_08091514:
	cmp r6, #0x35
	bgt _08091520
	ldr r0, _08091544 @ =0x0203DC70
	adds r0, r6, r0
	strb r4, [r0]
	adds r6, #1
_08091520:
	adds r4, #1
	cmp r4, #0x3f
	ble _080914E4
	ldr r0, _08091548 @ =0x0203DCA7
	adds r0, r5, r0
	movs r2, #0xff
	ldrb r1, [r0]
	orrs r1, r2
	strb r1, [r0]
	ldr r0, _08091544 @ =0x0203DC70
	adds r0, r6, r0
	ldrb r1, [r0]
	orrs r2, r1
	strb r2, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08091544: .4byte 0x0203DC70
_08091548: .4byte 0x0203DCA7

	thumb_func_start sub_809154C
sub_809154C: @ 0x0809154C
	push {r4, r5, lr}
	movs r5, #0
	movs r4, #1
_08091552:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _0809156E
	ldr r0, [r0]
	cmp r0, #0
	beq _0809156E
	cmp r5, #0x35
	bgt _0809156E
	ldr r0, _08091584 @ =0x0203DC70
	adds r0, r5, r0
	strb r4, [r0]
	adds r5, #1
_0809156E:
	adds r4, #1
	cmp r4, #0x3f
	ble _08091552
	ldr r0, _08091584 @ =0x0203DC70
	adds r0, r5, r0
	movs r1, #0xff
	strb r1, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08091584: .4byte 0x0203DC70

	thumb_func_start sub_8091588
sub_8091588: @ 0x08091588
	ldr r0, _08091594 @ =0x02016B88
	movs r1, #1
	strb r1, [r0]
	ldr r0, _08091598 @ =0x02016B89
	strb r1, [r0]
	bx lr
	.align 2, 0
_08091594: .4byte 0x02016B88
_08091598: .4byte 0x02016B89

	thumb_func_start sub_809159C
sub_809159C: @ 0x0809159C
	push {lr}
	sub sp, #0x18
	ldr r1, _08091624 @ =0x08346574
	mov r0, sp
	movs r2, #0x18
	bl memcpy
	mov r0, sp
	bl InitBgs
	ldr r2, _08091628 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r1, #8
	movs r0, #0
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	ldr r0, _0809162C @ =0x0000FFE0
	ldrh r1, [r2, #0x3c]
	ands r0, r1
	ldr r1, _08091630 @ =0x0000E0FF
	ands r0, r1
	strh r0, [r2, #0x3c]
	bl InitFaces
	bl ResetText
	ldr r0, _08091634 @ =0x08320D98
	movs r1, #0x40
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, _08091638 @ =0x0831B0A8
	ldr r1, _0809163C @ =0x06008000
	bl Decompress
	ldr r0, _08091640 @ =0x08346184
	movs r1, #0x80
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, _08091644 @ =0x08345934
	ldr r1, _08091648 @ =0x06006000
	bl Decompress
	add sp, #0x18
	pop {r0}
	bx r0
	.align 2, 0
_08091624: .4byte 0x08346574
_08091628: .4byte gDispIo
_0809162C: .4byte 0x0000FFE0
_08091630: .4byte 0x0000E0FF
_08091634: .4byte 0x08320D98
_08091638: .4byte 0x0831B0A8
_0809163C: .4byte 0x06008000
_08091640: .4byte 0x08346184
_08091644: .4byte 0x08345934
_08091648: .4byte 0x06006000

	thumb_func_start sub_809164C
sub_809164C: @ 0x0809164C
	push {r4, r5, lr}
	ldr r0, _080916A4 @ =0x02016B88
	movs r4, #0
	ldrsb r4, [r0, r4]
	cmp r4, #0x3f
	bgt _08091698
	movs r5, #1
	rsbs r5, r5, #0
_0809165C:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _08091692
	ldr r0, [r0]
	cmp r0, #0
	beq _08091692
	ldrb r0, [r0, #4]
	cmp r0, #0x42
	beq _08091692
	ldr r1, _080916A8 @ =0x0203DCA7
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, r5
	beq _08091692
	movs r2, #1
	rsbs r2, r2, #0
_08091680:
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, r4
	beq _08091698
	adds r1, #1
	movs r0, #0
	ldrsb r0, [r1, r0]
	cmp r0, r2
	bne _08091680
_08091692:
	adds r4, #1
	cmp r4, #0x3f
	ble _0809165C
_08091698:
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_080916A4: .4byte 0x02016B88
_080916A8: .4byte 0x0203DCA7

	thumb_func_start sub_80916AC
sub_80916AC: @ 0x080916AC
	push {r4, r5, r6, lr}
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080916BC
	ldr r0, _080916B8 @ =0x02016B88
	b _080916BE
	.align 2, 0
_080916B8: .4byte 0x02016B88
_080916BC:
	ldr r0, _08091724 @ =0x02016B89
_080916BE:
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	adds r4, r0, #0
	cmp r4, #0x3f
	bgt _08091718
	movs r6, #1
	rsbs r6, r6, #0
_080916CE:
	adds r0, r4, #0
	bl GetUnit
	cmp r0, #0
	beq _08091712
	ldr r0, [r0]
	cmp r0, #0
	beq _08091712
	ldrb r0, [r0, #4]
	cmp r0, #0x42
	beq _08091712
	movs r2, #0
	ldr r0, _08091728 @ =0x0203DC70
	movs r1, #0
	ldrsb r1, [r0, r1]
	adds r3, r0, #0
	cmp r1, r6
	beq _08091712
	adds r5, r3, #0
	movs r1, #1
	rsbs r1, r1, #0
_080916F8:
	adds r0, r2, r5
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, r4
	beq _08091718
	adds r2, #1
	adds r0, r2, r3
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, r1
	bne _080916F8
_08091712:
	adds r4, #1
	cmp r4, #0x3f
	ble _080916CE
_08091718:
	lsls r0, r4, #0x18
	lsrs r0, r0, #0x18
	pop {r4, r5, r6}
	pop {r1}
	bx r1
	.align 2, 0
_08091724: .4byte 0x02016B89
_08091728: .4byte 0x0203DC70

	thumb_func_start sub_809172C
sub_809172C: @ 0x0809172C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	str r0, [sp]
	ldr r0, _08091808 @ =0x02016B88
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, #1
	bl GetUnit
	str r0, [sp, #4]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	mov r8, r0
	bl sub_8084F4C
	mov sl, r0
	ldr r0, _0809180C @ =0x08677FD0
	movs r1, #3
	bl SpawnProc
	adds r6, r0, #0
	movs r5, #0
	movs r7, #0xe0
	lsls r7, r7, #1
_08091766:
	lsls r0, r5, #3
	ldr r1, _08091810 @ =0x02016B48
	mov sb, r1
	adds r4, r0, r1
	movs r1, #0x1e
	cmp r5, #1
	bgt _08091776
	movs r1, #0x14
_08091776:
	adds r0, r4, #0
	bl InitText
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	ldr r1, _08091814 @ =0x02021B0A
	adds r1, r7, r1
	adds r0, r4, #0
	bl PutText
	lsls r1, r5, #2
	adds r0, r6, #0
	adds r0, #0x34
	adds r0, r0, r1
	str r4, [r0]
	adds r7, #0x80
	adds r5, #1
	cmp r5, #5
	ble _08091766
	movs r0, #4
	ldr r2, [sp, #4]
	ldrh r2, [r2, #0xc]
	ands r0, r2
	cmp r0, #0
	beq _08091818
	mov r1, sl
	ldrb r1, [r1, #3]
	lsls r0, r1, #0x1a
	lsrs r0, r0, #0x1a
	bl GetChapterInfo
	adds r0, #0x3e
	ldrb r1, [r0]
	mov r0, sb
	movs r2, #0
	bl sub_808E7CC
	adds r1, r0, #0
	ldr r2, [sp]
	str r1, [r2, #0x54]
	adds r1, #3
	mov r0, sb
	bl Text_SetCursor
	mov r1, sl
	ldrb r1, [r1, #3]
	lsls r0, r1, #0x1a
	lsrs r0, r0, #0x1a
	bl GetChapterInfo
	ldrh r0, [r0, #0x38]
	bl DecodeMsg
	str r0, [r6, #0x2c]
	mov r2, sl
	ldrb r2, [r2, #3]
	lsls r0, r2, #0x1a
	lsrs r0, r0, #0x1a
	bl GetChapterInfo
	ldrh r0, [r0, #0x38]
	bl DecodeMsg
	bl GetStringTextLen
	ldr r2, [sp]
	ldr r1, [r2, #0x54]
	adds r1, #6
	adds r1, r1, r0
	str r1, [r2, #0x54]
	b _08091848
	.align 2, 0
_08091808: .4byte 0x02016B88
_0809180C: .4byte 0x08677FD0
_08091810: .4byte 0x02016B48
_08091814: .4byte 0x02021B0A
_08091818:
	mov r0, r8
	bl sub_809101C
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _08091838
	ldr r0, _08091834 @ =0x0868BFCC
	mov r2, r8
	lsls r1, r2, #3
	adds r1, r1, r0
	ldrh r0, [r1, #2]
	bl DecodeMsg
	b _08091846
	.align 2, 0
_08091834: .4byte 0x0868BFCC
_08091838:
	ldr r0, _0809187C @ =0x0868BFCC
	mov r2, r8
	lsls r1, r2, #3
	adds r1, r1, r0
	ldrh r0, [r1]
	bl DecodeMsg
_08091846:
	str r0, [r6, #0x2c]
_08091848:
	adds r0, r6, #0
	adds r0, #0x5c
	movs r2, #0
	strh r2, [r0]
	str r2, [r6, #0x30]
	adds r1, r6, #0
	adds r1, #0x60
	movs r0, #4
	strh r0, [r1]
	adds r1, #2
	movs r0, #1
	strh r0, [r1]
	adds r0, r6, #0
	adds r0, #0x5e
	strh r2, [r0]
	movs r0, #1
	bl EnableBgSync
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809187C: .4byte 0x0868BFCC

	thumb_func_start sub_8091880
sub_8091880: @ 0x08091880
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, _08091908 @ =0x02016B88
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, #1
	bl GetUnit
	movs r1, #4
	ldrh r0, [r0, #0xc]
	ands r1, r0
	cmp r1, #0
	beq _080918FC
	ldr r4, _0809190C @ =0x08677FD0
	adds r0, r4, #0
	bl Proc_Find
	cmp r0, #0
	bne _08091902
	adds r0, r4, #0
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	ldr r0, _08091910 @ =0x02016B48
	movs r3, #5
	adds r2, r0, #0
	adds r2, #0x28
	adds r1, r5, #0
	adds r1, #0x48
_080918BE:
	str r2, [r1]
	subs r2, #8
	subs r1, #4
	subs r3, #1
	cmp r3, #0
	bge _080918BE
	movs r4, #0
	ldr r1, [r6, #0x54]
	bl Text_SetCursor
	ldr r0, _08091914 @ =0x00000A6E
	bl DecodeMsg
	str r0, [r5, #0x2c]
	adds r0, r5, #0
	adds r0, #0x5c
	strh r4, [r0]
	str r4, [r5, #0x30]
	adds r1, r5, #0
	adds r1, #0x60
	movs r0, #4
	strh r0, [r1]
	adds r1, #2
	movs r0, #1
	strh r0, [r1]
	adds r0, r5, #0
	adds r0, #0x5e
	strh r4, [r0]
	movs r0, #1
	bl EnableBgSync
_080918FC:
	adds r0, r6, #0
	bl Proc_Break
_08091902:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08091908: .4byte 0x02016B88
_0809190C: .4byte 0x08677FD0
_08091910: .4byte 0x02016B48
_08091914: .4byte 0x00000A6E

	thumb_func_start sub_8091918
sub_8091918: @ 0x08091918
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0809193C @ =0x02016B88
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, #1
	bl GetUnit
	movs r1, #4
	ldrh r0, [r0, #0xc]
	ands r1, r0
	cmp r1, #0
	beq _08091940
	movs r0, #0x96
	lsls r0, r0, #1
	b _08091942
	.align 2, 0
_0809193C: .4byte 0x02016B88
_08091940:
	ldr r0, _08091954 @ =0x00000352
_08091942:
	str r0, [r4, #0x30]
	ldr r0, _08091958 @ =0x0868BE4C
	movs r1, #3
	bl SpawnProc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08091954: .4byte 0x00000352
_08091958: .4byte 0x0868BE4C

	thumb_func_start sub_809195C
sub_809195C: @ 0x0809195C
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #8
	mov r8, r0
	bl sub_809164C
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	ldr r2, _080919E8 @ =0x02016B88
	adds r1, r0, #1
	strb r1, [r2]
	bl GetUnit
	adds r6, r0, #0
	bl GetUnitFid
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	bl ResetText
	ldr r0, _080919EC @ =gBg3Tm
	ldr r1, _080919F0 @ =0x08345440
	movs r2, #0x80
	lsls r2, r2, #6
	bl TmApplyTsa_t
	movs r5, #0
	str r5, [sp, #4]
	ldr r1, _080919F4 @ =0x0600D800
	ldr r2, _080919F8 @ =0x01000800
	add r0, sp, #4
	bl CpuFastSet
	movs r0, #0x42
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0xbe
	movs r3, #2
	bl StartFace
	movs r0, #0
	movs r1, #0
	adds r2, r6, #0
	movs r3, #0
	bl sub_80920B4
	mov r0, r8
	str r5, [r0, #0x2c]
	ldr r0, _080919FC @ =0x02016B44
	strb r5, [r0]
	ldr r0, _08091A00 @ =0x0868BFAC
	movs r1, #0
	bl SpawnProc
	ldr r0, _08091A04 @ =sub_80910DC
	bl SetOnHBlankA
	movs r0, #3
	bl EnableBgSync
	add sp, #8
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080919E8: .4byte 0x02016B88
_080919EC: .4byte gBg3Tm
_080919F0: .4byte 0x08345440
_080919F4: .4byte 0x0600D800
_080919F8: .4byte 0x01000800
_080919FC: .4byte 0x02016B44
_08091A00: .4byte 0x0868BFAC
_08091A04: .4byte sub_80910DC

	thumb_func_start sub_8091A08
sub_8091A08: @ 0x08091A08
	push {lr}
	adds r2, r0, #0
	ldr r0, [r2, #0x2c]
	adds r0, #1
	str r0, [r2, #0x2c]
	ldr r1, [r2, #0x30]
	cmp r0, r1
	bne _08091A1E
	adds r0, r2, #0
	bl Proc_Break
_08091A1E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8091A24
sub_8091A24: @ 0x08091A24
	push {lr}
	movs r0, #0
	bl EndFaceById
	ldr r0, _08091A44 @ =0x08677FD0
	bl Proc_EndEach
	ldr r0, _08091A48 @ =0x0868BFAC
	bl Proc_EndEach
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0
	.align 2, 0
_08091A44: .4byte 0x08677FD0
_08091A48: .4byte 0x0868BFAC

	thumb_func_start sub_8091A4C
sub_8091A4C: @ 0x08091A4C
	push {lr}
	ldr r0, _08091A60 @ =0x0868BE74
	bl Proc_Find
	cmp r0, #0
	beq _08091A5A
	movs r0, #1
_08091A5A:
	pop {r1}
	bx r1
	.align 2, 0
_08091A60: .4byte 0x0868BE74

	thumb_func_start sub_8091A64
sub_8091A64: @ 0x08091A64
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov sl, r0
	ldr r0, _08091B3C @ =0x02016B88
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, #1
	bl GetUnit
	str r0, [sp]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	str r0, [sp, #4]
	bl sub_8084F4C
	mov sb, r0
	ldr r0, _08091B40 @ =0x08677FD0
	movs r1, #3
	bl SpawnProc
	adds r6, r0, #0
	movs r5, #0
	movs r7, #0xc0
	lsls r7, r7, #1
_08091A9E:
	lsls r4, r5, #3
	ldr r0, _08091B44 @ =0x02016B48
	mov r8, r0
	add r4, r8
	adds r0, r4, #0
	movs r1, #0x14
	bl InitText
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	ldr r1, _08091B48 @ =0x02021B0C
	adds r1, r7, r1
	adds r0, r4, #0
	bl PutText
	lsls r1, r5, #2
	adds r0, r6, #0
	adds r0, #0x34
	adds r0, r0, r1
	str r4, [r0]
	adds r7, #0x80
	adds r5, #1
	cmp r5, #1
	ble _08091A9E
	movs r0, #4
	ldr r1, [sp]
	ldrh r1, [r1, #0xc]
	ands r0, r1
	cmp r0, #0
	beq _08091B4C
	mov r2, sb
	ldrb r2, [r2, #3]
	lsls r0, r2, #0x1a
	lsrs r0, r0, #0x1a
	bl GetChapterInfo
	adds r0, #0x3e
	ldrb r1, [r0]
	mov r0, r8
	movs r2, #0
	bl sub_808E7CC
	adds r1, r0, #0
	mov r0, sl
	str r1, [r0, #0x54]
	adds r1, #3
	mov r0, r8
	bl Text_SetCursor
	mov r1, sb
	ldrb r1, [r1, #3]
	lsls r0, r1, #0x1a
	lsrs r0, r0, #0x1a
	bl GetChapterInfo
	ldrh r0, [r0, #0x38]
	bl DecodeMsg
	str r0, [r6, #0x2c]
	mov r2, sb
	ldrb r2, [r2, #3]
	lsls r0, r2, #0x1a
	lsrs r0, r0, #0x1a
	bl GetChapterInfo
	ldrh r0, [r0, #0x38]
	bl DecodeMsg
	bl GetStringTextLen
	mov r2, sl
	ldr r1, [r2, #0x54]
	adds r1, #6
	adds r1, r1, r0
	str r1, [r2, #0x54]
	b _08091B5C
	.align 2, 0
_08091B3C: .4byte 0x02016B88
_08091B40: .4byte 0x08677FD0
_08091B44: .4byte 0x02016B48
_08091B48: .4byte 0x02021B0C
_08091B4C:
	ldr r1, _08091B90 @ =0x0868BFCC
	ldr r2, [sp, #4]
	lsls r0, r2, #3
	adds r0, r0, r1
	ldrh r0, [r0, #4]
	bl DecodeMsg
	str r0, [r6, #0x2c]
_08091B5C:
	adds r0, r6, #0
	adds r0, #0x5c
	movs r2, #0
	strh r2, [r0]
	str r2, [r6, #0x30]
	adds r1, r6, #0
	adds r1, #0x60
	movs r0, #4
	strh r0, [r1]
	adds r1, #2
	movs r0, #1
	strh r0, [r1]
	adds r0, r6, #0
	adds r0, #0x5e
	strh r2, [r0]
	movs r0, #1
	bl EnableBgSync
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08091B90: .4byte 0x0868BFCC

	thumb_func_start sub_8091B94
sub_8091B94: @ 0x08091B94
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, _08091C1C @ =0x02016B88
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, #1
	bl GetUnit
	movs r1, #4
	ldrh r0, [r0, #0xc]
	ands r1, r0
	cmp r1, #0
	beq _08091C10
	ldr r4, _08091C20 @ =0x08677FD0
	adds r0, r4, #0
	bl Proc_Find
	cmp r0, #0
	bne _08091C16
	adds r0, r4, #0
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	ldr r0, _08091C24 @ =0x02016B48
	movs r3, #1
	adds r2, r0, #0
	adds r2, #8
	adds r1, r5, #0
	adds r1, #0x38
_08091BD2:
	str r2, [r1]
	subs r2, #8
	subs r1, #4
	subs r3, #1
	cmp r3, #0
	bge _08091BD2
	movs r4, #0
	ldr r1, [r6, #0x54]
	bl Text_SetCursor
	ldr r0, _08091C28 @ =0x00000A6E
	bl DecodeMsg
	str r0, [r5, #0x2c]
	adds r0, r5, #0
	adds r0, #0x5c
	strh r4, [r0]
	str r4, [r5, #0x30]
	adds r1, r5, #0
	adds r1, #0x60
	movs r0, #4
	strh r0, [r1]
	adds r1, #2
	movs r0, #1
	strh r0, [r1]
	adds r0, r5, #0
	adds r0, #0x5e
	strh r4, [r0]
	movs r0, #1
	bl EnableBgSync
_08091C10:
	adds r0, r6, #0
	bl Proc_Break
_08091C16:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08091C1C: .4byte 0x02016B88
_08091C20: .4byte 0x08677FD0
_08091C24: .4byte 0x02016B48
_08091C28: .4byte 0x00000A6E

	thumb_func_start sub_8091C2C
sub_8091C2C: @ 0x08091C2C
	push {lr}
	ldr r0, _08091C3C @ =0x0868BEEC
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_08091C3C: .4byte 0x0868BEEC

	thumb_func_start sub_8091C40
sub_8091C40: @ 0x08091C40
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov sl, r0
	ldr r0, _08091D18 @ =0x02016B89
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, #1
	bl GetUnit
	str r0, [sp]
	ldr r0, [r0]
	ldrb r0, [r0, #4]
	str r0, [sp, #4]
	bl sub_8084F4C
	mov sb, r0
	ldr r0, _08091D1C @ =0x08677FD0
	movs r1, #3
	bl SpawnProc
	adds r6, r0, #0
	movs r5, #0
	movs r7, #0x80
	lsls r7, r7, #3
_08091C7A:
	lsls r4, r5, #3
	ldr r0, _08091D20 @ =0x02016B78
	mov r8, r0
	add r4, r8
	adds r0, r4, #0
	movs r1, #0x14
	bl InitText
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetColor
	ldr r1, _08091D24 @ =0x02021B22
	adds r1, r7, r1
	adds r0, r4, #0
	bl PutText
	lsls r1, r5, #2
	adds r0, r6, #0
	adds r0, #0x34
	adds r0, r0, r1
	str r4, [r0]
	adds r7, #0x80
	adds r5, #1
	cmp r5, #1
	ble _08091C7A
	movs r0, #4
	ldr r1, [sp]
	ldrh r1, [r1, #0xc]
	ands r0, r1
	cmp r0, #0
	beq _08091D28
	mov r2, sb
	ldrb r2, [r2, #3]
	lsls r0, r2, #0x1a
	lsrs r0, r0, #0x1a
	bl GetChapterInfo
	adds r0, #0x3e
	ldrb r1, [r0]
	mov r0, r8
	movs r2, #0
	bl sub_808E7CC
	adds r1, r0, #0
	mov r0, sl
	str r1, [r0, #0x54]
	adds r1, #3
	mov r0, r8
	bl Text_SetCursor
	mov r1, sb
	ldrb r1, [r1, #3]
	lsls r0, r1, #0x1a
	lsrs r0, r0, #0x1a
	bl GetChapterInfo
	ldrh r0, [r0, #0x38]
	bl DecodeMsg
	str r0, [r6, #0x2c]
	mov r2, sb
	ldrb r2, [r2, #3]
	lsls r0, r2, #0x1a
	lsrs r0, r0, #0x1a
	bl GetChapterInfo
	ldrh r0, [r0, #0x38]
	bl DecodeMsg
	bl GetStringTextLen
	mov r2, sl
	ldr r1, [r2, #0x54]
	adds r1, #6
	adds r1, r1, r0
	str r1, [r2, #0x54]
	b _08091D38
	.align 2, 0
_08091D18: .4byte 0x02016B89
_08091D1C: .4byte 0x08677FD0
_08091D20: .4byte 0x02016B78
_08091D24: .4byte 0x02021B22
_08091D28:
	ldr r1, _08091D6C @ =0x0868BFCC
	ldr r2, [sp, #4]
	lsls r0, r2, #3
	adds r0, r0, r1
	ldrh r0, [r0, #4]
	bl DecodeMsg
	str r0, [r6, #0x2c]
_08091D38:
	adds r0, r6, #0
	adds r0, #0x5c
	movs r2, #0
	strh r2, [r0]
	str r2, [r6, #0x30]
	adds r1, r6, #0
	adds r1, #0x60
	movs r0, #4
	strh r0, [r1]
	adds r1, #2
	movs r0, #1
	strh r0, [r1]
	adds r0, r6, #0
	adds r0, #0x5e
	strh r2, [r0]
	movs r0, #1
	bl EnableBgSync
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08091D6C: .4byte 0x0868BFCC

	thumb_func_start sub_8091D70
sub_8091D70: @ 0x08091D70
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, _08091DF8 @ =0x02016B89
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r0, #1
	bl GetUnit
	movs r1, #4
	ldrh r0, [r0, #0xc]
	ands r1, r0
	cmp r1, #0
	beq _08091DEC
	ldr r4, _08091DFC @ =0x08677FD0
	adds r0, r4, #0
	bl Proc_Find
	cmp r0, #0
	bne _08091DF2
	adds r0, r4, #0
	movs r1, #3
	bl SpawnProc
	adds r5, r0, #0
	ldr r0, _08091E00 @ =0x02016B78
	movs r3, #1
	adds r2, r0, #0
	adds r2, #8
	adds r1, r5, #0
	adds r1, #0x38
_08091DAE:
	str r2, [r1]
	subs r2, #8
	subs r1, #4
	subs r3, #1
	cmp r3, #0
	bge _08091DAE
	movs r4, #0
	ldr r1, [r6, #0x54]
	bl Text_SetCursor
	ldr r0, _08091E04 @ =0x00000A6E
	bl DecodeMsg
	str r0, [r5, #0x2c]
	adds r0, r5, #0
	adds r0, #0x5c
	strh r4, [r0]
	str r4, [r5, #0x30]
	adds r1, r5, #0
	adds r1, #0x60
	movs r0, #4
	strh r0, [r1]
	adds r1, #2
	movs r0, #1
	strh r0, [r1]
	adds r0, r5, #0
	adds r0, #0x5e
	strh r4, [r0]
	movs r0, #1
	bl EnableBgSync
_08091DEC:
	adds r0, r6, #0
	bl Proc_Break
_08091DF2:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08091DF8: .4byte 0x02016B89
_08091DFC: .4byte 0x08677FD0
_08091E00: .4byte 0x02016B78
_08091E04: .4byte 0x00000A6E

	thumb_func_start sub_8091E08
sub_8091E08: @ 0x08091E08
	push {lr}
	ldr r0, _08091E20 @ =0x02016B8A
	ldrb r0, [r0]
	cmp r0, #1
	bne _08091E1A
	ldr r0, _08091E24 @ =0x0868BF14
	movs r1, #3
	bl SpawnProc
_08091E1A:
	pop {r0}
	bx r0
	.align 2, 0
_08091E20: .4byte 0x02016B8A
_08091E24: .4byte 0x0868BF14

	thumb_func_start sub_8091E28
sub_8091E28: @ 0x08091E28
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov sb, r0
	ldr r7, _08091F3C @ =0x02016B8A
	movs r0, #1
	mov sl, r0
	strb r0, [r7]
	movs r0, #0
	bl sub_80916AC
	lsls r0, r0, #0x18
	lsrs r4, r0, #0x18
	ldr r1, _08091F40 @ =0x02016B88
	adds r0, r4, #1
	strb r0, [r1]
	movs r0, #1
	bl sub_80916AC
	lsls r0, r0, #0x18
	lsrs r6, r0, #0x18
	cmp r6, #0x3f
	ble _08091E60
	movs r0, #0
	strb r0, [r7]
_08091E60:
	ldr r1, _08091F44 @ =0x02016B89
	adds r0, r6, #1
	strb r0, [r1]
	bl ResetText
	ldr r0, _08091F48 @ =gBg3Tm
	ldr r1, _08091F4C @ =0x08345440
	movs r2, #0x80
	lsls r2, r2, #6
	bl TmApplyTsa_t
	movs r1, #0
	mov r8, r1
	str r1, [sp, #4]
	ldr r1, _08091F50 @ =0x0600D800
	ldr r2, _08091F54 @ =0x01000800
	add r0, sp, #4
	bl CpuFastSet
	adds r0, r4, #0
	bl GetUnit
	adds r5, r0, #0
	bl GetUnitFid
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	movs r1, #0xff
	lsls r1, r1, #8
	movs r0, #0
	movs r2, #0
	bl SetBgOffset
	movs r2, #0xdf
	lsls r2, r2, #1
	movs r0, #0x42
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	movs r3, #0
	bl StartFace
	ldr r1, _08091F58 @ =0x030048D4
	str r0, [r1]
	movs r0, #0
	movs r1, #0
	adds r2, r5, #0
	movs r3, #1
	bl sub_80920B4
	ldrb r7, [r7]
	cmp r7, #1
	bne _08091F0C
	adds r0, r6, #0
	bl GetUnit
	adds r5, r0, #0
	bl GetUnitFid
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	movs r1, #0x80
	lsls r1, r1, #1
	movs r0, #1
	movs r2, #0
	bl SetBgOffset
	movs r2, #0xce
	rsbs r2, r2, #0
	movs r0, #0x43
	str r0, [sp]
	movs r0, #1
	adds r1, r4, #0
	movs r3, #0x50
	bl StartFace
	ldr r1, _08091F5C @ =0x02016B8C
	str r0, [r1]
	movs r0, #0xb
	movs r1, #0xa
	adds r2, r5, #0
	movs r3, #1
	bl sub_80920B4
_08091F0C:
	mov r0, r8
	mov r1, sb
	str r0, [r1, #0x2c]
	ldr r0, _08091F60 @ =0x02016B44
	mov r1, sl
	strb r1, [r0]
	ldr r0, _08091F64 @ =0x0868BFAC
	movs r1, #0
	bl SpawnProc
	ldr r0, _08091F68 @ =sub_80911D0
	bl SetOnHBlankA
	movs r0, #3
	bl EnableBgSync
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08091F3C: .4byte 0x02016B8A
_08091F40: .4byte 0x02016B88
_08091F44: .4byte 0x02016B89
_08091F48: .4byte gBg3Tm
_08091F4C: .4byte 0x08345440
_08091F50: .4byte 0x0600D800
_08091F54: .4byte 0x01000800
_08091F58: .4byte 0x030048D4
_08091F5C: .4byte 0x02016B8C
_08091F60: .4byte 0x02016B44
_08091F64: .4byte 0x0868BFAC
_08091F68: .4byte sub_80911D0

	thumb_func_start sub_8091F6C
sub_8091F6C: @ 0x08091F6C
	push {r4, lr}
	adds r4, r0, #0
	ldr r1, [r4, #0x2c]
	cmp r1, #0x3c
	beq _08091FDE
	cmp r1, #0x3c
	bgt _08091F80
	cmp r1, #0x2d
	beq _08091FC8
	b _08091F8C
_08091F80:
	cmp r1, #0xc8
	beq _08091FE4
	movs r0, #0xf0
	lsls r0, r0, #1
	cmp r1, r0
	beq _08091FEA
_08091F8C:
	ldr r0, [r4, #0x2c]
	cmp r0, #0x2c
	bgt _08091FF0
	ldr r0, _08091FB8 @ =0x030048D4
	ldr r1, [r0]
	ldr r2, _08091FBC @ =0x02016B90
	movs r0, #0xbe
	ldrh r3, [r2]
	subs r0, r0, r3
	strh r0, [r1, #0x2e]
	ldr r0, _08091FC0 @ =0x02016B8A
	ldrb r0, [r0]
	cmp r0, #1
	bne _08091FF0
	ldr r0, _08091FC4 @ =0x02016B8C
	ldr r1, [r0]
	movs r0, #0x32
	ldrh r2, [r2, #2]
	subs r0, r0, r2
	strh r0, [r1, #0x2e]
	b _08091FF0
	.align 2, 0
_08091FB8: .4byte 0x030048D4
_08091FBC: .4byte 0x02016B90
_08091FC0: .4byte 0x02016B8A
_08091FC4: .4byte 0x02016B8C
_08091FC8:
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	b _08091FF0
_08091FDE:
	bl sub_8091C2C
	b _08091FF0
_08091FE4:
	bl sub_8091E08
	b _08091FF0
_08091FEA:
	adds r0, r4, #0
	bl Proc_Break
_08091FF0:
	ldr r0, [r4, #0x2c]
	adds r0, #1
	str r0, [r4, #0x2c]
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8091FFC
sub_8091FFC: @ 0x08091FFC
	push {lr}
	movs r0, #0
	bl EndFaceById
	movs r0, #1
	bl EndFaceById
	ldr r0, _08092020 @ =0x08677FD0
	bl Proc_EndEach
	ldr r0, _08092024 @ =0x0868BFAC
	bl Proc_EndEach
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0
	.align 2, 0
_08092020: .4byte 0x08677FD0
_08092024: .4byte 0x0868BFAC

	thumb_func_start sub_8092028
sub_8092028: @ 0x08092028
	push {lr}
	ldr r0, _0809203C @ =0x0868BF3C
	bl Proc_Find
	cmp r0, #0
	beq _08092036
	movs r0, #1
_08092036:
	pop {r1}
	bx r1
	.align 2, 0
_0809203C: .4byte 0x0868BF3C

	thumb_func_start sub_8092040
sub_8092040: @ 0x08092040
	ldr r0, _08092050 @ =0x02016B90
	movs r1, #0xff
	lsls r1, r1, #8
	strh r1, [r0]
	movs r1, #0x80
	lsls r1, r1, #1
	strh r1, [r0, #2]
	bx lr
	.align 2, 0
_08092050: .4byte 0x02016B90

	thumb_func_start sub_8092054
sub_8092054: @ 0x08092054
	push {r4, r5, r6, lr}
	sub sp, #4
	ldr r0, _080920A4 @ =0x02016B44
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08092098
	ldr r6, _080920A8 @ =0x02016B90
	ldrh r0, [r6, #2]
	cmp r0, #0
	beq _08092098
	ldr r0, _080920AC @ =0x0868BF3C
	bl Proc_Find
	adds r5, r0, #0
	ldr r1, _080920B0 @ =0xFFFFFF00
	ldr r3, [r5, #0x2c]
	movs r4, #0x2d
	str r4, [sp]
	movs r0, #4
	movs r2, #0
	bl Interpolate
	strh r0, [r6]
	movs r1, #0x80
	lsls r1, r1, #1
	ldr r3, [r5, #0x2c]
	str r4, [sp]
	movs r0, #4
	movs r2, #0
	bl Interpolate
	strh r0, [r6, #2]
_08092098:
	bl sub_809104C
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080920A4: .4byte 0x02016B44
_080920A8: .4byte 0x02016B90
_080920AC: .4byte 0x0868BF3C
_080920B0: .4byte 0xFFFFFF00

	thumb_func_start sub_80920B4
sub_80920B4: @ 0x080920B4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r7, r2, #0
	adds r4, r3, #0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov sb, r1
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, [r7]
	ldrb r0, [r0, #4]
	bl sub_8084F4C
	mov sl, r0
	ldr r0, [r7]
	ldrb r6, [r0, #4]
	cmp r4, #0
	bne _08092128
	ldr r4, _08092118 @ =gBg1Tm
	ldr r1, _0809211C @ =0x083461C4
	movs r5, #0x86
	lsls r5, r5, #7
	adds r0, r4, #0
	adds r2, r5, #0
	bl TmApplyTsa_t
	movs r1, #0xd1
	lsls r1, r1, #1
	adds r0, r4, r1
	ldr r1, _08092120 @ =0x08346330
	adds r2, r5, #0
	bl TmApplyTsa_t
	movs r0, #0x98
	lsls r0, r0, #3
	adds r4, r4, r0
	ldr r1, _08092124 @ =0x083463B4
	adds r0, r4, #0
	adds r2, r5, #0
	bl TmApplyTsa_t
	b _0809213E
	.align 2, 0
_08092118: .4byte gBg1Tm
_0809211C: .4byte 0x083461C4
_08092120: .4byte 0x08346330
_08092124: .4byte 0x083463B4
_08092128:
	mov r1, sb
	lsls r0, r1, #5
	add r0, r8
	lsls r0, r0, #1
	ldr r1, _0809225C @ =gBg1Tm
	adds r0, r0, r1
	ldr r1, _08092260 @ =0x083463F4
	movs r2, #0x86
	lsls r2, r2, #7
	bl TmApplyTsa_t
_0809213E:
	ldr r0, _08092264 @ =0x0868BFCC
	lsls r4, r6, #3
	adds r4, r4, r0
	ldrh r0, [r4, #6]
	bl DecodeMsg
	bl GetStringTextLen
	movs r1, #0x48
	subs r1, r1, r0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r6, r1, #1
	ldrh r0, [r4, #6]
	bl DecodeMsg
	mov r4, sb
	adds r4, #1
	lsls r4, r4, #5
	adds r1, r4, #2
	add r1, r8
	lsls r1, r1, #1
	ldr r5, _08092268 @ =gBg0Tm
	adds r1, r1, r5
	movs r2, #9
	str r2, [sp]
	str r0, [sp, #4]
	movs r0, #0
	movs r2, #0
	adds r3, r6, #0
	bl PutDrawText
	ldr r0, [r7]
	ldrh r0, [r0]
	bl DecodeMsg
	bl GetStringTextLen
	movs r1, #0x28
	subs r1, r1, r0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r6, r1, #1
	ldr r0, [r7]
	ldrh r0, [r0]
	bl DecodeMsg
	adds r4, #0xb
	add r4, r8
	lsls r4, r4, #1
	adds r4, r4, r5
	movs r1, #5
	str r1, [sp]
	str r0, [sp, #4]
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0
	adds r3, r6, #0
	bl PutDrawText
	add r0, sp, #8
	movs r1, #0xf
	bl InitText
	mov r1, sb
	adds r1, #4
	lsls r1, r1, #5
	adds r1, #2
	add r1, r8
	lsls r1, r1, #1
	adds r1, r1, r5
	add r0, sp, #8
	bl PutText
	mov r0, sl
	ldrh r0, [r0, #0xa]
	lsls r3, r0, #0x12
	lsrs r3, r3, #0x14
	add r0, sp, #8
	movs r1, #0x1e
	movs r2, #0
	bl Text_InsertDrawNumberOrBlank
	ldr r0, _0809226C @ =0x000009C6
	bl DecodeMsg
	adds r3, r0, #0
	add r0, sp, #8
	movs r1, #0x26
	movs r2, #0
	bl Text_InsertDrawString
	movs r4, #0
	mov r1, sl
	ldrb r1, [r1]
	cmp r1, #0x63
	bhi _08092202
	movs r4, #6
_08092202:
	adds r1, r4, #0
	adds r1, #0x3f
	mov r0, sl
	ldr r3, [r0, #8]
	lsls r3, r3, #0xe
	lsrs r3, r3, #0x16
	add r0, sp, #8
	movs r2, #0
	bl Text_InsertDrawNumberOrBlank
	adds r4, #0x47
	ldr r0, _08092270 @ =0x000009C7
	bl DecodeMsg
	adds r3, r0, #0
	add r0, sp, #8
	adds r1, r4, #0
	movs r2, #0
	bl Text_InsertDrawString
	mov r1, sl
	ldrb r3, [r1]
	add r0, sp, #8
	movs r1, #0x5f
	movs r2, #0
	bl Text_InsertDrawNumberOrBlank
	ldr r0, _08092274 @ =0x000009C8
	bl DecodeMsg
	adds r3, r0, #0
	add r0, sp, #8
	movs r1, #0x67
	movs r2, #0
	bl Text_InsertDrawString
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809225C: .4byte gBg1Tm
_08092260: .4byte 0x083463F4
_08092264: .4byte 0x0868BFCC
_08092268: .4byte gBg0Tm
_0809226C: .4byte 0x000009C6
_08092270: .4byte 0x000009C7
_08092274: .4byte 0x000009C8

	thumb_func_start sub_8092278
sub_8092278: @ 0x08092278
	ldr r2, _08092288 @ =0x0868C2DC
	lsls r0, r0, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r0, [r0]
	bx lr
	.align 2, 0
_08092288: .4byte 0x0868C2DC

	thumb_func_start sub_809228C
sub_809228C: @ 0x0809228C
	push {r4, lr}
	bl sub_8092278
	ldr r4, _080922AC @ =gBuf
	adds r1, r4, #0
	bl Decompress
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r4, #0
	movs r1, #0
	bl ApplyPaletteExt
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080922AC: .4byte gBuf

	thumb_func_start sub_80922B0
sub_80922B0: @ 0x080922B0
	push {lr}
	ldr r0, _080922C0 @ =0x0868C324
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_080922C0: .4byte 0x0868C324

	thumb_func_start sub_80922C4
sub_80922C4: @ 0x080922C4
	push {lr}
	ldr r0, _080922D4 @ =0x0868C324
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_080922D4: .4byte 0x0868C324

	thumb_func_start sub_80922D8
sub_80922D8: @ 0x080922D8
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	mov ip, r0
	ldr r3, _080923C0 @ =gDispIo
	movs r4, #8
	rsbs r4, r4, #0
	ldrb r0, [r3]
	ands r4, r0
	movs r2, #4
	orrs r4, r2
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r3, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	orrs r0, r2
	subs r1, #6
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r3, #1]
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r2, [r3, #0xc]
	ands r0, r2
	strb r0, [r3, #0xc]
	adds r0, r1, #0
	ldrb r5, [r3, #0x10]
	ands r0, r5
	movs r2, #1
	orrs r0, r2
	strb r0, [r3, #0x10]
	ldrb r7, [r3, #0x14]
	ands r1, r7
	movs r0, #2
	orrs r1, r0
	strb r1, [r3, #0x14]
	movs r0, #3
	ldrb r1, [r3, #0x18]
	orrs r0, r1
	strb r0, [r3, #0x18]
	movs r0, #0x11
	rsbs r0, r0, #0
	ands r4, r0
	strb r4, [r3]
	movs r1, #0
	mov r2, ip
	str r1, [r2, #0x2c]
	str r1, [r2, #0x30]
	movs r0, #0xf0
	lsls r0, r0, #6
	str r0, [r2, #0x34]
	movs r0, #0xa0
	lsls r0, r0, #6
	str r0, [r2, #0x38]
	str r1, [r2, #0x44]
	mov r5, ip
	adds r5, #0x48
	movs r2, #0
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r5]
	mov r6, ip
	adds r6, #0x4a
	strh r0, [r6]
	mov r0, ip
	adds r0, #0x4c
	strh r1, [r0]
	adds r0, #6
	strb r2, [r0]
	subs r0, #4
	strh r1, [r0]
	adds r0, #5
	strb r2, [r0]
	subs r0, #3
	strh r1, [r0]
	adds r0, #4
	strb r2, [r0]
	mov r3, ip
	ldr r0, [r3, #0x2c]
	ldr r1, [r3, #0x30]
	ldr r2, [r3, #0x34]
	ldr r3, [r3, #0x38]
	mov r7, ip
	ldr r4, [r7, #0x44]
	str r4, [sp]
	movs r7, #0
	ldrsh r4, [r5, r7]
	str r4, [sp, #4]
	movs r5, #0
	ldrsh r4, [r6, r5]
	str r4, [sp, #8]
	bl sub_8092EB0
	movs r0, #0
	movs r1, #1
	bl sub_809228C
	movs r0, #0
	movs r1, #0
	bl sub_8092278
	movs r1, #0xc0
	lsls r1, r1, #0x13
	bl Decompress
	bl sub_8092838
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080923C0: .4byte gDispIo

	thumb_func_start nullsub_9
nullsub_9: @ 0x080923C4
	bx lr
	.align 2, 0

	thumb_func_start sub_80923C8
sub_80923C8: @ 0x080923C8
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r7, r2, #0
	mov r8, r3
	ldr r0, _080923F4 @ =0x0868C37C
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	bl sub_8092854
	adds r1, r0, #0
	str r1, [r4, #0x58]
	cmp r1, #0
	bne _080923F8
	adds r0, r4, #0
	bl Proc_End
	b _0809241A
	.align 2, 0
_080923F4: .4byte 0x0868C37C
_080923F8:
	movs r0, #1
	strb r0, [r1]
	ldr r0, [r4, #0x58]
	strb r5, [r0, #1]
	ldr r0, [r4, #0x58]
	strb r6, [r0, #5]
	ldr r1, [r4, #0x58]
	adds r0, r1, #0
	adds r0, #0xd4
	str r7, [r0]
	adds r0, #4
	mov r2, r8
	str r2, [r0]
	ldr r0, [sp, #0x18]
	str r0, [r1, #0xc]
	ldr r0, [sp, #0x1c]
	str r0, [r1, #8]
_0809241A:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8092424
sub_8092424: @ 0x08092424
	push {lr}
	ldr r0, _08092430 @ =0x0868C37C
	bl Proc_EndEach
	pop {r0}
	bx r0
	.align 2, 0
_08092430: .4byte 0x0868C37C

	thumb_func_start sub_8092434
sub_8092434: @ 0x08092434
	push {lr}
	ldr r0, _08092444 @ =0x0868C37C
	bl Proc_Find
	cmp r0, #0
	bne _08092448
	movs r0, #0
	b _0809244A
	.align 2, 0
_08092444: .4byte 0x0868C37C
_08092448:
	movs r0, #1
_0809244A:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8092450
sub_8092450: @ 0x08092450
	ldr r1, [r0, #0x58]
	movs r0, #0
	strb r0, [r1]
	bx lr

	thumb_func_start sub_8092458
sub_8092458: @ 0x08092458
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	ldr r7, [r0, #0x58]
	ldrb r0, [r7, #1]
	bl sub_809325C
	bl sub_8093284
	movs r1, #0
	strb r0, [r7, #4]
	str r1, [r7, #0x14]
	movs r3, #0
	cmp r3, r0
	bge _080924CE
_0809247C:
	ldrb r0, [r7, #1]
	str r3, [sp]
	bl sub_809325C
	ldr r3, [sp]
	adds r1, r3, #0
	bl sub_8093288
	ldr r3, [sp]
	lsls r4, r3, #2
	adds r2, r7, #0
	adds r2, #0x74
	adds r2, r2, r4
	adds r1, r7, #0
	adds r1, #0xd4
	ldr r1, [r1]
	adds r0, r0, r1
	lsls r0, r0, #8
	str r0, [r2]
	ldrb r0, [r7, #1]
	str r3, [sp]
	bl sub_809325C
	ldr r3, [sp]
	adds r1, r3, #0
	bl sub_80932D8
	adds r2, r7, #0
	adds r2, #0xa4
	adds r2, r2, r4
	adds r1, r7, #0
	adds r1, #0xd8
	ldr r1, [r1]
	adds r0, r0, r1
	lsls r0, r0, #8
	str r0, [r2]
	ldr r3, [sp]
	adds r3, #1
	ldrb r1, [r7, #4]
	cmp r3, r1
	blt _0809247C
_080924CE:
	movs r3, #1
	movs r0, #0x14
	adds r0, r0, r7
	mov sb, r0
	ldrb r1, [r7, #4]
	cmp r3, r1
	bge _08092556
	movs r0, #0x74
	adds r0, r0, r7
	mov sl, r0
	movs r1, #0
	mov r8, r1
_080924E6:
	lsls r6, r3, #2
	mov r0, sl
	ldr r5, [r0, #4]
	adds r1, r0, #0
	adds r1, #4
	mov sl, r1
	subs r1, #4
	ldm r1!, {r0}
	subs r5, r5, r0
	adds r0, r7, #0
	adds r0, #0xa4
	adds r1, r0, r6
	add r0, r8
	ldr r4, [r1]
	ldr r0, [r0]
	subs r4, r4, r0
	adds r0, r5, #0
	muls r0, r5, r0
	adds r1, r4, #0
	muls r1, r4, r1
	adds r0, r0, r1
	str r3, [sp]
	bl Sqrt
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov r1, sb
	adds r2, r1, r6
	add r1, r8
	ldr r1, [r1]
	adds r1, r1, r0
	str r1, [r2]
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	adds r0, r5, #0
	adds r1, r4, #0
	bl ArcTan2
	adds r4, r7, #0
	adds r4, #0x44
	adds r4, r4, r6
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	movs r1, #0x3f
	bl __divsi3
	str r0, [r4]
	movs r0, #4
	add r8, r0
	ldr r3, [sp]
	adds r3, #1
	ldrb r1, [r7, #4]
	cmp r3, r1
	blt _080924E6
_08092556:
	ldrb r0, [r7, #4]
	subs r0, #1
	lsls r0, r0, #2
	add r0, sb
	ldr r0, [r0]
	str r0, [r7, #0x10]
	ldr r1, [r7, #8]
	bl __divsi3
	adds r0, #1
	strb r0, [r7, #3]
	movs r3, #0
	ldrb r1, [r7, #3]
	cmp r3, r1
	bge _080925B2
	movs r6, #0
_08092576:
	lsls r5, r3, #2
	movs r0, #0x91
	lsls r0, r0, #2
	adds r4, r7, r0
	adds r4, r4, r5
	ldr r0, [r7, #0xc]
	muls r0, r3, r0
	subs r1, #1
	str r3, [sp]
	bl __divsi3
	str r0, [r4]
	adds r0, r7, #0
	adds r0, #0xdc
	ldr r3, [sp]
	adds r0, r0, r3
	strb r6, [r0]
	movs r1, #0xb9
	lsls r1, r1, #2
	adds r0, r7, r1
	adds r0, r0, r5
	str r6, [r0]
	adds r0, r7, #0
	adds r0, #0xf0
	adds r0, r0, r3
	strb r6, [r0]
	adds r3, #1
	ldrb r1, [r7, #3]
	cmp r3, r1
	blt _08092576
_080925B2:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80925C4
sub_80925C4: @ 0x080925C4
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r5, r0, #0
	lsls r7, r1, #2
	movs r2, #0xa5
	lsls r2, r2, #2
	adds r0, r5, r2
	adds r0, r0, r7
	ldr r0, [r0]
	adds r0, #0x20
	ldr r2, _08092640 @ =0x000003FF
	ands r0, r2
	asrs r2, r0, #6
	asrs r0, r0, #8
	lsls r3, r0, #8
	movs r0, #3
	ands r2, r0
	lsls r6, r2, #1
	ldrb r0, [r5, #3]
	subs r0, #1
	cmp r1, r0
	bne _08092648
	ldrb r0, [r5, #2]
	movs r4, #0x80
	lsls r4, r4, #1
	adds r1, r4, #0
	adds r2, r4, #0
	bl sub_8093064
	movs r0, #0xf
	ldrb r1, [r5, #5]
	ands r0, r1
	lsls r0, r0, #0xc
	movs r1, #0xc4
	lsls r1, r1, #2
	adds r0, r0, r1
	adds r6, r6, r0
	movs r2, #0x82
	lsls r2, r2, #1
	adds r0, r5, r2
	adds r0, r0, r7
	ldr r1, [r0]
	lsls r1, r1, #0xf
	lsrs r1, r1, #0x17
	ldrb r2, [r5, #2]
	lsls r0, r2, #9
	orrs r1, r0
	movs r2, #0xaa
	lsls r2, r2, #1
	adds r0, r5, r2
	adds r0, r0, r7
	ldr r2, [r0]
	asrs r2, r2, #8
	movs r0, #0xff
	ands r2, r0
	orrs r2, r4
	ldr r3, _08092644 @ =0x0868C2D4
	str r6, [sp]
	movs r0, #0xc
	bl PutSpriteExt
	b _0809267A
	.align 2, 0
_08092640: .4byte 0x000003FF
_08092644: .4byte 0x0868C2D4
_08092648:
	movs r0, #0xf
	ldrb r1, [r5, #5]
	ands r0, r1
	lsls r0, r0, #0xc
	ldr r1, _08092684 @ =0x00000323
	adds r6, r0, r1
	movs r2, #0x82
	lsls r2, r2, #1
	adds r0, r5, r2
	adds r0, r0, r7
	ldr r1, [r0]
	lsls r1, r1, #0xf
	lsrs r1, r1, #0x17
	adds r2, #0x50
	adds r0, r5, r2
	adds r0, r0, r7
	ldr r2, [r0]
	asrs r2, r2, #8
	movs r0, #0xff
	ands r2, r0
	ldr r3, _08092688 @ =0x0868C2CC
	str r6, [sp]
	movs r0, #0xc
	bl PutSpriteExt
_0809267A:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08092684: .4byte 0x00000323
_08092688: .4byte 0x0868C2CC

	thumb_func_start sub_809268C
sub_809268C: @ 0x0809268C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r4, [r0, #0x58]
	movs r0, #0
	mov sl, r0
	ldrb r1, [r4, #3]
	cmp sl, r1
	blt _080926A4
	b _08092828
_080926A4:
	movs r2, #0xf0
	adds r2, r2, r4
	mov sb, r2
	mov r8, r0
_080926AC:
	mov r1, sb
	ldrb r0, [r1]
	cmp r0, #1
	beq _0809276E
	cmp r0, #1
	bgt _080926BE
	cmp r0, #0
	beq _080926C6
	b _08092816
_080926BE:
	cmp r0, #0x63
	bne _080926C4
	b _0809280E
_080926C4:
	b _08092816
_080926C6:
	adds r0, r4, #0
	adds r0, #0xdc
	add r0, sl
	ldrb r6, [r0]
	movs r2, #0x82
	lsls r2, r2, #1
	adds r1, r4, r2
	add r1, r8
	lsls r2, r6, #2
	adds r0, r4, #0
	adds r0, #0x74
	adds r0, r0, r2
	ldr r0, [r0]
	str r0, [r1]
	movs r0, #0xaa
	lsls r0, r0, #1
	adds r1, r4, r0
	add r1, r8
	adds r0, r4, #0
	adds r0, #0xa4
	adds r0, r0, r2
	ldr r0, [r0]
	str r0, [r1]
	movs r1, #0xa5
	lsls r1, r1, #2
	adds r0, r4, r1
	mov r2, r8
	adds r7, r0, r2
	adds r1, r6, #1
	lsls r1, r1, #2
	adds r0, r4, #0
	adds r0, #0x44
	adds r0, r0, r1
	ldr r1, [r0]
	str r1, [r7]
	movs r2, #0xd2
	lsls r2, r2, #1
	adds r0, r4, r2
	mov r2, r8
	adds r5, r0, r2
	movs r2, #0x91
	lsls r2, r2, #2
	adds r0, r4, r2
	mov r2, r8
	adds r3, r0, r2
	ldr r0, _080927E4 @ =0x08353328
	mov ip, r0
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r1, r2
	ldr r6, _080927E8 @ =0x000003FF
	ands r1, r6
	lsls r1, r1, #2
	add r1, ip
	ldr r2, [r3]
	ldr r0, [r1]
	muls r0, r2, r0
	cmp r0, #0
	bge _08092740
	ldr r1, _080927EC @ =0x00007FFF
	adds r0, r0, r1
_08092740:
	asrs r0, r0, #0xf
	str r0, [r5]
	movs r2, #0xfa
	lsls r2, r2, #1
	adds r0, r4, r2
	mov r1, r8
	adds r2, r0, r1
	ldr r0, [r7]
	ands r0, r6
	lsls r0, r0, #2
	add r0, ip
	ldr r1, [r3]
	ldr r0, [r0]
	muls r0, r1, r0
	cmp r0, #0
	bge _08092764
	ldr r1, _080927EC @ =0x00007FFF
	adds r0, r0, r1
_08092764:
	asrs r0, r0, #0xf
	str r0, [r2]
	movs r0, #1
	mov r2, sb
	strb r0, [r2]
_0809276E:
	adds r0, r4, #0
	mov r1, sl
	bl sub_80925C4
	adds r0, r4, #0
	adds r0, #0xdc
	mov r1, sl
	adds r7, r0, r1
	ldrb r6, [r7]
	movs r0, #0x82
	lsls r0, r0, #1
	adds r2, r4, r0
	add r2, r8
	movs r1, #0xd2
	lsls r1, r1, #1
	adds r0, r4, r1
	add r0, r8
	ldr r1, [r2]
	ldr r0, [r0]
	adds r1, r1, r0
	str r1, [r2]
	movs r0, #0xaa
	lsls r0, r0, #1
	adds r2, r4, r0
	add r2, r8
	movs r1, #0xfa
	lsls r1, r1, #1
	adds r0, r4, r1
	add r0, r8
	ldr r1, [r2]
	ldr r0, [r0]
	adds r1, r1, r0
	str r1, [r2]
	movs r2, #0xb9
	lsls r2, r2, #2
	adds r1, r4, r2
	add r1, r8
	subs r2, #0xa0
	adds r0, r4, r2
	add r0, r8
	ldr r2, [r1]
	ldr r0, [r0]
	adds r5, r2, r0
	str r5, [r1]
	ldr r0, [r4, #0x10]
	mov r1, sl
	muls r1, r0, r1
	adds r0, r1, #0
	ldrb r1, [r4, #3]
	subs r1, #1
	bl __divsi3
	cmp r5, r0
	blt _080927F0
	movs r0, #0x63
	mov r2, sb
	strb r0, [r2]
	b _08092816
	.align 2, 0
_080927E4: .4byte 0x08353328
_080927E8: .4byte 0x000003FF
_080927EC: .4byte 0x00007FFF
_080927F0:
	adds r0, r6, #1
	lsls r0, r0, #2
	adds r1, r4, #0
	adds r1, #0x14
	adds r1, r1, r0
	ldr r0, [r1]
	cmp r5, r0
	blt _08092816
	ldrb r0, [r7]
	adds r0, #1
	movs r1, #0
	strb r0, [r7]
	mov r0, sb
	strb r1, [r0]
	b _08092816
_0809280E:
	adds r0, r4, #0
	mov r1, sl
	bl sub_80925C4
_08092816:
	movs r1, #1
	add sb, r1
	movs r2, #4
	add r8, r2
	add sl, r1
	ldrb r0, [r4, #3]
	cmp sl, r0
	bge _08092828
	b _080926AC
_08092828:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8092838
sub_8092838: @ 0x08092838
	movs r1, #0
	movs r3, #0
	ldr r0, _08092850 @ =0x030048E0
	movs r2, #0xcd
	lsls r2, r2, #2
_08092842:
	strb r3, [r0]
	strb r1, [r0, #2]
	adds r0, r0, r2
	adds r1, #1
	cmp r1, #2
	ble _08092842
	bx lr
	.align 2, 0
_08092850: .4byte 0x030048E0

	thumb_func_start sub_8092854
sub_8092854: @ 0x08092854
	ldr r1, _0809286C @ =0x030048E0
	movs r0, #0xcd
	lsls r0, r0, #3
	adds r3, r1, r0
	movs r2, #0xcd
	lsls r2, r2, #2
_08092860:
	ldrb r0, [r1]
	cmp r0, #0
	bne _08092870
	adds r0, r1, #0
	b _08092878
	.align 2, 0
_0809286C: .4byte 0x030048E0
_08092870:
	adds r1, r1, r2
	cmp r1, r3
	ble _08092860
	movs r0, #0
_08092878:
	bx lr
	.align 2, 0

	thumb_func_start sub_809287C
sub_809287C: @ 0x0809287C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08092898 @ =0x0868C3AC
	movs r1, #3
	bl SpawnProc
	str r4, [r0, #0x2c]
	adds r0, #0x66
	movs r1, #0
	strh r1, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08092898: .4byte 0x0868C3AC

	thumb_func_start sub_809289C
sub_809289C: @ 0x0809289C
	push {lr}
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x66
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	movs r0, #0
	ldrsh r1, [r1, r0]
	ldr r0, [r2, #0x2c]
	cmp r1, r0
	bne _080928BA
	adds r0, r2, #0
	bl Proc_Break
_080928BA:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80928C0
sub_80928C0: @ 0x080928C0
	push {lr}
	ldr r0, _080928D0 @ =0x0868C3AC
	bl Proc_Find
	cmp r0, #0
	bne _080928D4
	movs r0, #0
	b _080928D6
	.align 2, 0
_080928D0: .4byte 0x0868C3AC
_080928D4:
	movs r0, #1
_080928D6:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80928DC
sub_80928DC: @ 0x080928DC
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	adds r6, r1, #0
	adds r1, r2, #0
	ldr r0, _08092904 @ =0x0868C3C4
	bl SpawnProc
	adds r4, r0, #0
	ldr r0, _08092908 @ =0x0868C324
	bl Proc_Find
	str r0, [r4, #0x4c]
	lsls r5, r5, #8
	str r5, [r4, #0x2c]
	lsls r6, r6, #8
	str r6, [r4, #0x30]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08092904: .4byte 0x0868C3C4
_08092908: .4byte 0x0868C324

	thumb_func_start sub_809290C
sub_809290C: @ 0x0809290C
	adds r2, r0, #0
	adds r2, #0x66
	movs r1, #0
	strh r1, [r2]
	adds r0, #0x68
	strh r1, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_809291C
sub_809291C: @ 0x0809291C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	adds r7, r0, #0
	ldr r4, [r7, #0x4c]
	ldr r0, [r7, #0x2c]
	str r0, [r4, #0x3c]
	ldr r1, [r7, #0x30]
	str r1, [r4, #0x40]
	movs r2, #0x66
	adds r2, r2, r7
	mov r8, r2
	movs r3, #0
	ldrsh r5, [r2, r3]
	cmp r5, #1
	beq _0809296A
	cmp r5, #1
	bgt _08092948
	cmp r5, #0
	beq _0809294E
	b _08092960
_08092948:
	cmp r5, #2
	beq _080929C8
	b _08092960
_0809294E:
	bl sub_8092A9C
	mov r1, r8
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	adds r0, r7, #0
	adds r0, #0x68
	strh r5, [r0]
_08092960:
	adds r6, r4, #0
	adds r6, #0x4a
	adds r5, r4, #0
	adds r5, #0x48
	b _08092A68
_0809296A:
	movs r1, #0x80
	lsls r1, r1, #1
	movs r2, #0x80
	lsls r2, r2, #2
	adds r7, #0x68
	movs r5, #0
	ldrsh r3, [r7, r5]
	movs r0, #0x20
	str r0, [sp]
	movs r0, #5
	bl Interpolate
	adds r2, r4, #0
	adds r2, #0x4a
	strh r0, [r2]
	adds r1, r4, #0
	adds r1, #0x48
	strh r0, [r1]
	ldr r0, [r4, #0x3c]
	ldr r3, _080929C0 @ =0xFFFF8800
	adds r0, r0, r3
	str r0, [r4, #0x34]
	ldr r0, [r4, #0x40]
	ldr r5, _080929C4 @ =0xFFFFB000
	adds r0, r0, r5
	str r0, [r4, #0x38]
	ldrh r0, [r7]
	adds r0, #1
	strh r0, [r7]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r6, r2, #0
	adds r5, r1, #0
	cmp r0, #0x21
	bne _08092A68
	mov r1, r8
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	movs r0, #0
	strh r0, [r7]
	b _08092A68
	.align 2, 0
_080929C0: .4byte 0xFFFF8800
_080929C4: .4byte 0xFFFFB000
_080929C8:
	adds r0, r7, #0
	adds r0, #0x68
	movs r5, #1
	ldrh r2, [r0]
	ands r5, r2
	mov r8, r0
	cmp r5, #0
	beq _08092A14
	movs r0, #1
	movs r1, #1
	bl sub_809228C
	movs r1, #0
	str r1, [r4, #0x2c]
	str r1, [r4, #0x30]
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r4, #0x34]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [r4, #0x38]
	str r1, [r4, #0x44]
	adds r3, r4, #0
	adds r3, #0x48
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r3]
	adds r2, r4, #0
	adds r2, #0x4a
	strh r0, [r2]
	ldr r1, _08092A10 @ =gDispIo
	movs r0, #0x10
	ldrb r5, [r1]
	orrs r0, r5
	b _08092A4C
	.align 2, 0
_08092A10: .4byte gDispIo
_08092A14:
	movs r0, #0
	movs r1, #1
	bl sub_809228C
	str r5, [r4, #0x2c]
	str r5, [r4, #0x30]
	ldr r0, [r4, #0x3c]
	ldr r1, _08092A90 @ =0xFFFF8800
	adds r0, r0, r1
	str r0, [r4, #0x34]
	ldr r0, [r4, #0x40]
	ldr r2, _08092A94 @ =0xFFFFB000
	adds r0, r0, r2
	str r0, [r4, #0x38]
	str r5, [r4, #0x44]
	adds r3, r4, #0
	adds r3, #0x48
	movs r0, #0x80
	lsls r0, r0, #2
	strh r0, [r3]
	adds r2, r4, #0
	adds r2, #0x4a
	strh r0, [r2]
	ldr r1, _08092A98 @ =gDispIo
	movs r0, #0x11
	rsbs r0, r0, #0
	ldrb r5, [r1]
	ands r0, r5
_08092A4C:
	strb r0, [r1]
	adds r6, r2, #0
	adds r5, r3, #0
	mov r1, r8
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #8
	bne _08092A68
	adds r0, r7, #0
	bl Proc_Break
_08092A68:
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	ldr r2, [r4, #0x34]
	ldr r3, [r4, #0x38]
	ldr r4, [r4, #0x44]
	str r4, [sp]
	movs r7, #0
	ldrsh r4, [r5, r7]
	str r4, [sp, #4]
	movs r5, #0
	ldrsh r4, [r6, r5]
	str r4, [sp, #8]
	bl sub_8092EB0
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08092A90: .4byte 0xFFFF8800
_08092A94: .4byte 0xFFFFB000
_08092A98: .4byte gDispIo

	thumb_func_start sub_8092A9C
sub_8092A9C: @ 0x08092A9C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x18
	adds r2, r0, #0
	adds r3, r1, #0
	asrs r0, r2, #8
	adds r2, r0, #0
	subs r2, #0x78
	asrs r0, r3, #8
	adds r3, r0, #0
	subs r3, #0x50
	movs r1, #0xf0
	subs r0, r1, r2
	lsls r0, r0, #0x10
	lsrs r4, r0, #0x10
	mov sb, r4
	asrs r0, r0, #0x10
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	str r1, [sp, #0x14]
	movs r1, #0xa0
	subs r4, r1, r3
	lsls r4, r4, #0x10
	lsrs r5, r4, #0x10
	asrs r4, r4, #0x10
	subs r1, r1, r4
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov r8, r1
	adds r0, r0, r2
	subs r0, #0xf0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	mov sl, r0
	mov r0, r8
	str r0, [sp, #8]
	ldr r1, [sp, #0x14]
	str r1, [sp]
	adds r0, r4, r3
	subs r0, #0xa0
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp, #0xc]
	mov r2, sl
	str r2, [sp, #4]
	str r0, [sp, #0x10]
	movs r0, #1
	movs r1, #0
	bl sub_8092278
	ldr r1, _08092CD0 @ =0x02000000
	bl Decompress
	movs r2, #0
	cmp r2, r4
	bge _08092B66
	ldr r4, [sp, #8]
	lsls r0, r4, #0x10
	asrs r7, r0, #0x10
	ldr r1, [sp, #0x14]
	lsls r0, r1, #0x10
	asrs r6, r0, #0x10
_08092B20:
	lsls r0, r2, #0x10
	asrs r4, r0, #0x10
	lsls r0, r4, #4
	subs r0, r0, r4
	lsls r0, r0, #4
	ldr r2, _08092CD4 @ =0x0600A000
	adds r3, r0, r2
	adds r1, r7, r4
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r6
	ldr r1, _08092CD0 @ =0x02000000
	adds r1, r0, r1
	mov r2, sb
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge _08092B48
	adds r0, #3
_08092B48:
	lsls r2, r0, #9
	lsrs r2, r2, #0xb
	movs r0, #0x80
	lsls r0, r0, #0x13
	orrs r2, r0
	adds r0, r1, #0
	adds r1, r3, #0
	bl CpuSet
	adds r1, r4, #1
	lsls r1, r1, #0x10
	lsrs r2, r1, #0x10
	lsls r0, r5, #0x10
	cmp r1, r0
	blt _08092B20
_08092B66:
	movs r0, #2
	movs r1, #0
	bl sub_8092278
	ldr r1, _08092CD0 @ =0x02000000
	bl Decompress
	lsls r0, r5, #0x10
	movs r2, #0
	adds r5, r0, #0
	mov r4, r8
	lsls r6, r4, #0x10
	cmp r5, #0
	ble _08092BDE
	mov r1, sb
	lsls r0, r1, #0x10
	asrs r0, r0, #0x10
	ldr r4, _08092CD4 @ =0x0600A000
	adds r4, r4, r0
	mov r8, r4
	ldr r1, [sp, #8]
	lsls r0, r1, #0x10
	asrs r7, r0, #0x10
_08092B94:
	lsls r0, r2, #0x10
	asrs r4, r0, #0x10
	lsls r0, r4, #4
	subs r0, r0, r4
	lsls r0, r0, #4
	mov r2, r8
	adds r3, r0, r2
	adds r0, r7, r4
	lsls r1, r0, #4
	subs r1, r1, r0
	lsls r1, r1, #4
	mov r2, sl
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	adds r1, r1, r0
	ldr r0, _08092CD0 @ =0x02000000
	adds r1, r1, r0
	ldr r2, [sp, #0x14]
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge _08092BC2
	adds r0, #3
_08092BC2:
	lsls r2, r0, #9
	lsrs r2, r2, #0xb
	movs r0, #0x80
	lsls r0, r0, #0x13
	orrs r2, r0
	adds r0, r1, #0
	adds r1, r3, #0
	bl CpuSet
	adds r0, r4, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r0, r5
	blt _08092B94
_08092BDE:
	movs r0, #3
	movs r1, #0
	bl sub_8092278
	ldr r1, _08092CD0 @ =0x02000000
	bl Decompress
	movs r2, #0
	cmp r6, #0
	ble _08092C4A
	ldr r4, [sp, #0xc]
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	mov r8, r0
	ldr r1, [sp]
	lsls r0, r1, #0x10
	asrs r7, r0, #0x10
_08092C00:
	asrs r1, r5, #0x10
	lsls r0, r2, #0x10
	asrs r4, r0, #0x10
	adds r1, r1, r4
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #4
	ldr r2, _08092CD4 @ =0x0600A000
	adds r3, r0, r2
	mov r0, r8
	adds r1, r0, r4
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #4
	adds r0, r0, r7
	ldr r1, _08092CD0 @ =0x02000000
	adds r1, r0, r1
	mov r2, sb
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge _08092C2E
	adds r0, #3
_08092C2E:
	lsls r2, r0, #9
	lsrs r2, r2, #0xb
	movs r0, #0x80
	lsls r0, r0, #0x13
	orrs r2, r0
	adds r0, r1, #0
	adds r1, r3, #0
	bl CpuSet
	adds r0, r4, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r0, r6
	blt _08092C00
_08092C4A:
	movs r0, #4
	movs r1, #0
	bl sub_8092278
	ldr r1, _08092CD0 @ =0x02000000
	bl Decompress
	movs r2, #0
	cmp r6, #0
	ble _08092CBE
	mov r4, sb
	lsls r0, r4, #0x10
	asrs r0, r0, #0x10
	ldr r1, _08092CD4 @ =0x0600A000
	adds r1, r1, r0
	mov r8, r1
	ldr r4, [sp, #0x10]
	lsls r0, r4, #0x10
	asrs r7, r0, #0x10
_08092C70:
	asrs r1, r5, #0x10
	lsls r0, r2, #0x10
	asrs r4, r0, #0x10
	adds r1, r1, r4
	lsls r0, r1, #4
	subs r0, r0, r1
	lsls r0, r0, #4
	mov r1, r8
	adds r3, r0, r1
	adds r0, r7, r4
	lsls r1, r0, #4
	subs r1, r1, r0
	lsls r1, r1, #4
	ldr r2, [sp, #4]
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	adds r1, r1, r0
	ldr r0, _08092CD0 @ =0x02000000
	adds r1, r1, r0
	ldr r2, [sp, #0x14]
	lsls r0, r2, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0
	bge _08092CA2
	adds r0, #3
_08092CA2:
	lsls r2, r0, #9
	lsrs r2, r2, #0xb
	movs r0, #0x80
	lsls r0, r0, #0x13
	orrs r2, r0
	adds r0, r1, #0
	adds r1, r3, #0
	bl CpuSet
	adds r0, r4, #1
	lsls r0, r0, #0x10
	lsrs r2, r0, #0x10
	cmp r0, r6
	blt _08092C70
_08092CBE:
	add sp, #0x18
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08092CD0: .4byte 0x02000000
_08092CD4: .4byte 0x0600A000

	thumb_func_start sub_8092CD8
sub_8092CD8: @ 0x08092CD8
	push {r4, lr}
	adds r1, r0, #0
	ldr r0, _08092CF4 @ =0x0868C3EC
	bl SpawnProc
	adds r4, r0, #0
	ldr r0, _08092CF8 @ =0x0868C324
	bl Proc_Find
	str r0, [r4, #0x4c]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08092CF4: .4byte 0x0868C3EC
_08092CF8: .4byte 0x0868C324

	thumb_func_start sub_8092CFC
sub_8092CFC: @ 0x08092CFC
	adds r2, r0, #0
	adds r2, #0x66
	movs r1, #0
	strh r1, [r2]
	adds r0, #0x68
	strh r1, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_8092D0C
sub_8092D0C: @ 0x08092D0C
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #0xc
	mov r8, r0
	ldr r5, [r0, #0x4c]
	adds r0, #0x66
	movs r1, #0
	ldrsh r4, [r0, r1]
	cmp r4, #0
	beq _08092D32
	cmp r4, #1
	beq _08092DE8
	adds r7, r5, #0
	adds r7, #0x48
	adds r6, r5, #0
	adds r6, #0x4a
	b _08092E36
_08092D32:
	mov r0, r8
	adds r0, #0x68
	movs r6, #1
	ldrh r3, [r0]
	ands r6, r3
	mov sb, r0
	cmp r6, #0
	beq _08092D7C
	movs r0, #1
	movs r1, #1
	bl sub_809228C
	str r4, [r5, #0x2c]
	str r4, [r5, #0x30]
	movs r0, #0xf0
	lsls r0, r0, #7
	str r0, [r5, #0x34]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [r5, #0x38]
	str r4, [r5, #0x44]
	adds r3, r5, #0
	adds r3, #0x48
	movs r0, #0x80
	lsls r0, r0, #1
	strh r0, [r3]
	adds r2, r5, #0
	adds r2, #0x4a
	strh r0, [r2]
	ldr r1, _08092D78 @ =gDispIo
	movs r0, #0x10
	ldrb r4, [r1]
	orrs r0, r4
	b _08092DB4
	.align 2, 0
_08092D78: .4byte gDispIo
_08092D7C:
	movs r0, #0
	movs r1, #1
	bl sub_809228C
	str r6, [r5, #0x2c]
	str r6, [r5, #0x30]
	ldr r0, [r5, #0x3c]
	ldr r1, _08092DDC @ =0xFFFF8800
	adds r0, r0, r1
	str r0, [r5, #0x34]
	ldr r0, [r5, #0x40]
	ldr r3, _08092DE0 @ =0xFFFFB000
	adds r0, r0, r3
	str r0, [r5, #0x38]
	str r6, [r5, #0x44]
	adds r3, r5, #0
	adds r3, #0x48
	movs r0, #0x80
	lsls r0, r0, #2
	strh r0, [r3]
	adds r2, r5, #0
	adds r2, #0x4a
	strh r0, [r2]
	ldr r1, _08092DE4 @ =gDispIo
	movs r0, #0x11
	rsbs r0, r0, #0
	ldrb r4, [r1]
	ands r0, r4
_08092DB4:
	strb r0, [r1]
	adds r7, r3, #0
	adds r6, r2, #0
	mov r1, sb
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #7
	bne _08092E36
	mov r0, r8
	adds r0, #0x66
	ldrh r1, [r0]
	adds r1, #1
	strh r1, [r0]
	movs r0, #0
	mov r3, sb
	strh r0, [r3]
	b _08092E36
	.align 2, 0
_08092DDC: .4byte 0xFFFF8800
_08092DE0: .4byte 0xFFFFB000
_08092DE4: .4byte gDispIo
_08092DE8:
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x80
	lsls r2, r2, #1
	mov r4, r8
	adds r4, #0x68
	movs r0, #0
	ldrsh r3, [r4, r0]
	movs r0, #0x20
	str r0, [sp]
	movs r0, #5
	bl Interpolate
	adds r2, r5, #0
	adds r2, #0x4a
	strh r0, [r2]
	adds r1, r5, #0
	adds r1, #0x48
	strh r0, [r1]
	ldr r0, [r5, #0x3c]
	ldr r3, _08092E60 @ =0xFFFF8800
	adds r0, r0, r3
	str r0, [r5, #0x34]
	ldr r0, [r5, #0x40]
	ldr r3, _08092E64 @ =0xFFFFB000
	adds r0, r0, r3
	str r0, [r5, #0x38]
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	adds r7, r1, #0
	adds r6, r2, #0
	cmp r0, #0x21
	bne _08092E36
	mov r0, r8
	bl Proc_Break
_08092E36:
	ldr r0, [r5, #0x2c]
	ldr r1, [r5, #0x30]
	ldr r2, [r5, #0x34]
	ldr r3, [r5, #0x38]
	ldr r4, [r5, #0x44]
	str r4, [sp]
	movs r5, #0
	ldrsh r4, [r7, r5]
	str r4, [sp, #4]
	movs r5, #0
	ldrsh r4, [r6, r5]
	str r4, [sp, #8]
	bl sub_8092EB0
	add sp, #0xc
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08092E60: .4byte 0xFFFF8800
_08092E64: .4byte 0xFFFFB000

	thumb_func_start sub_8092E68
sub_8092E68: @ 0x08092E68
	push {lr}
	ldr r0, _08092E84 @ =0x0868C3C4
	bl Proc_Find
	cmp r0, #0
	bne _08092E8C
	ldr r0, _08092E88 @ =0x0868C3EC
	bl Proc_Find
	cmp r0, #0
	bne _08092E8C
	movs r0, #0
	b _08092E8E
	.align 2, 0
_08092E84: .4byte 0x0868C3C4
_08092E88: .4byte 0x0868C3EC
_08092E8C:
	movs r0, #1
_08092E8E:
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8092E94
sub_8092E94: @ 0x08092E94
	push {lr}
	ldr r0, _08092EA8 @ =0x0868C3C4
	bl Proc_EndEach
	ldr r0, _08092EAC @ =0x0868C3EC
	bl Proc_EndEach
	pop {r0}
	bx r0
	.align 2, 0
_08092EA8: .4byte 0x0868C3C4
_08092EAC: .4byte 0x0868C3EC

	thumb_func_start sub_8092EB0
sub_8092EB0: @ 0x08092EB0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #8
	mov sb, r0
	mov sl, r1
	adds r6, r2, #0
	mov r8, r3
	ldr r0, [sp, #0x28]
	ldr r1, [sp, #0x2c]
	ldr r2, [sp, #0x30]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	str r1, [sp]
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	str r2, [sp, #4]
	movs r1, #0x20
	bl Div
	adds r5, r0, #0
	movs r1, #2
	bl Div
	adds r4, r0, #0
	movs r0, #1
	ands r0, r5
	cmp r0, #0
	beq _08092F18
	ldr r2, _08092F10 @ =0x08353328
	ldr r3, _08092F14 @ =0x000003FF
	adds r1, r4, #0
	ands r1, r3
	lsls r1, r1, #2
	adds r1, r1, r2
	adds r0, r4, #1
	ands r0, r3
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r1, [r1]
	ldr r0, [r0]
	adds r1, r1, r0
	asrs r7, r1, #1
	adds r3, r2, #0
	b _08092F26
	.align 2, 0
_08092F10: .4byte 0x08353328
_08092F14: .4byte 0x000003FF
_08092F18:
	ldr r1, _08092F50 @ =0x08353328
	ldr r0, _08092F54 @ =0x000003FF
	ands r0, r4
	lsls r0, r0, #2
	adds r0, r0, r1
	ldr r7, [r0]
	adds r3, r1, #0
_08092F26:
	movs r0, #1
	ands r0, r5
	cmp r0, #0
	beq _08092F5C
	movs r0, #0x80
	lsls r0, r0, #1
	adds r1, r4, r0
	ldr r2, _08092F54 @ =0x000003FF
	ands r1, r2
	lsls r1, r1, #2
	adds r1, r1, r3
	ldr r5, _08092F58 @ =0x00000101
	adds r0, r4, r5
	ands r0, r2
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r1, [r1]
	ldr r0, [r0]
	adds r1, r1, r0
	asrs r5, r1, #1
	b _08092F6C
	.align 2, 0
_08092F50: .4byte 0x08353328
_08092F54: .4byte 0x000003FF
_08092F58: .4byte 0x00000101
_08092F5C:
	movs r1, #0x80
	lsls r1, r1, #1
	adds r0, r4, r1
	ldr r1, _08093050 @ =0x000003FF
	ands r0, r1
	lsls r0, r0, #2
	adds r0, r0, r3
	ldr r5, [r0]
_08092F6C:
	mov r0, sb
	cmp r0, #0
	bge _08092F74
	adds r0, #0xff
_08092F74:
	asrs r0, r0, #8
	mov sb, r0
	mov r0, sl
	cmp r0, #0
	bge _08092F80
	adds r0, #0xff
_08092F80:
	asrs r0, r0, #8
	mov sl, r0
	adds r0, r6, #0
	cmp r6, #0
	bge _08092F8C
	adds r0, #0xff
_08092F8C:
	asrs r6, r0, #8
	mov r0, r8
	cmp r0, #0
	bge _08092F96
	adds r0, #0xff
_08092F96:
	asrs r0, r0, #8
	mov r8, r0
	ldr r4, _08093054 @ =gDispIo
	ldr r2, [sp]
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	movs r0, #0x80
	lsls r0, r0, #9
	bl __divsi3
	adds r1, r0, #0
	adds r0, r1, #0
	muls r0, r5, r0
	cmp r0, #0
	bge _08092FB6
	adds r0, #0xff
_08092FB6:
	asrs r0, r0, #0xf
	ldr r3, _08093058 @ =0x030026F8
	strh r0, [r3]
	adds r0, r1, #0
	muls r0, r7, r0
	cmp r0, #0
	bge _08092FC6
	adds r0, #0xff
_08092FC6:
	asrs r0, r0, #0xf
	ldr r1, _0809305C @ =0x030026FA
	strh r0, [r1]
	ldr r2, [sp, #4]
	lsls r1, r2, #0x10
	asrs r1, r1, #0x10
	movs r0, #0x80
	lsls r0, r0, #9
	bl __divsi3
	adds r1, r0, #0
	adds r0, r1, #0
	muls r0, r7, r0
	cmp r0, #0
	bge _08092FE6
	adds r0, #0xff
_08092FE6:
	asrs r0, r0, #0xf
	rsbs r0, r0, #0
	movs r3, #0x4c
	adds r3, r3, r4
	mov ip, r3
	strh r0, [r3]
	adds r0, r1, #0
	muls r0, r5, r0
	cmp r0, #0
	bge _08092FFC
	adds r0, #0xff
_08092FFC:
	asrs r0, r0, #0xf
	ldr r5, _08093060 @ =0x030026FE
	strh r0, [r5]
	ldr r7, _08093058 @ =0x030026F8
	movs r1, #0
	ldrsh r0, [r7, r1]
	mov r2, sb
	subs r3, r2, r6
	adds r1, r0, #0
	muls r1, r3, r1
	ldr r5, _0809305C @ =0x030026FA
	movs r7, #0
	ldrsh r0, [r5, r7]
	mov r5, sl
	mov r7, r8
	subs r2, r5, r7
	muls r0, r2, r0
	adds r1, r1, r0
	lsls r0, r6, #8
	adds r1, r1, r0
	str r1, [r4, #0x50]
	mov r1, ip
	movs r5, #0
	ldrsh r0, [r1, r5]
	muls r0, r3, r0
	ldr r7, _08093060 @ =0x030026FE
	movs r3, #0
	ldrsh r1, [r7, r3]
	muls r1, r2, r1
	adds r0, r0, r1
	mov r5, r8
	lsls r1, r5, #8
	adds r0, r0, r1
	str r0, [r4, #0x54]
	add sp, #8
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08093050: .4byte 0x000003FF
_08093054: .4byte gDispIo
_08093058: .4byte 0x030026F8
_0809305C: .4byte 0x030026FA
_08093060: .4byte 0x030026FE

	thumb_func_start sub_8093064
sub_8093064: @ 0x08093064
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	sub sp, #4
	adds r4, r1, #0
	adds r5, r2, #0
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	ldr r6, _080930CC @ =0x08353328
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r3, r2
	ldr r2, _080930D0 @ =0x000003FF
	ands r1, r2
	lsls r1, r1, #2
	adds r1, r1, r6
	ldr r1, [r1]
	mov r8, r1
	mov r1, r8
	muls r1, r4, r1
	lsls r1, r1, #1
	asrs r1, r1, #0x10
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	ands r3, r2
	lsls r3, r3, #2
	adds r3, r3, r6
	ldr r3, [r3]
	adds r2, r5, #0
	muls r2, r3, r2
	lsls r2, r2, #1
	asrs r2, r2, #0x10
	muls r3, r4, r3
	asrs r3, r3, #0xf
	rsbs r3, r3, #0
	lsls r3, r3, #0x10
	asrs r3, r3, #0x10
	mov r4, r8
	muls r4, r5, r4
	lsls r4, r4, #1
	asrs r4, r4, #0x10
	str r4, [sp]
	bl PutSpriteAffine
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080930CC: .4byte 0x08353328
_080930D0: .4byte 0x000003FF

	thumb_func_start StartWorldMapIntroScen
StartWorldMapIntroScen: @ 0x080930D4
	push {r4, r5, lr}
	ldr r5, _0809310C @ =ChapterAssets
	ldr r4, _08093110 @ =gPlaySt
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetChapterInfo
	adds r0, #0x3b
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r0, [r0]
	cmp r0, #0
	beq _08093106
	movs r0, #0xe
	ldrsb r0, [r4, r0]
	bl GetChapterInfo
	adds r0, #0x3b
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r5
	ldr r0, [r0]
	bl StartEvent
_08093106:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809310C: .4byte ChapterAssets
_08093110: .4byte gPlaySt

	thumb_func_start sub_8093114
sub_8093114: @ 0x08093114
	push {lr}
	movs r0, #4
	bl FadeBgmOut
	pop {r0}
	bx r0

	thumb_func_start sub_8093120
sub_8093120: @ 0x08093120
	push {lr}
	movs r0, #1
	bl FadeBgmOut
	pop {r0}
	bx r0

	thumb_func_start SetWMFlag
SetWMFlag: @ 0x0809312C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _0809314C @ =0x0868C648
	bl Proc_Find
	cmp r0, #0
	beq _08093144
	lsls r1, r4, #2
	adds r0, #0x30
	adds r0, r0, r1
	str r5, [r0]
_08093144:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809314C: .4byte 0x0868C648

	thumb_func_start GetWMFlag
GetWMFlag: @ 0x08093150
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08093164 @ =0x0868C648
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	bne _08093168
	movs r0, #0
	b _08093170
	.align 2, 0
_08093164: .4byte 0x0868C648
_08093168:
	lsls r0, r4, #2
	adds r1, #0x30
	adds r1, r1, r0
	ldr r0, [r1]
_08093170:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start SetWMDot
SetWMDot: @ 0x08093178
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08093198 @ =0x0868C648
	bl Proc_Find
	cmp r0, #0
	beq _08093190
	lsls r1, r4, #2
	adds r0, #0x40
	adds r0, r0, r1
	str r5, [r0]
_08093190:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08093198: .4byte 0x0868C648

	thumb_func_start GetWMDot
GetWMDot: @ 0x0809319C
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080931B0 @ =0x0868C648
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	bne _080931B4
	movs r0, #0
	b _080931BC
	.align 2, 0
_080931B0: .4byte 0x0868C648
_080931B4:
	lsls r0, r4, #2
	adds r1, #0x40
	adds r1, r1, r0
	ldr r0, [r1]
_080931BC:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start SetWMHighlight
SetWMHighlight: @ 0x080931C4
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _080931E4 @ =0x0868C648
	bl Proc_Find
	cmp r0, #0
	beq _080931DC
	lsls r1, r4, #2
	adds r0, #0x48
	adds r0, r0, r1
	str r5, [r0]
_080931DC:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080931E4: .4byte 0x0868C648

	thumb_func_start GetWMHighlight
GetWMHighlight: @ 0x080931E8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _080931FC @ =0x0868C648
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	bne _08093200
	movs r0, #0
	b _08093208
	.align 2, 0
_080931FC: .4byte 0x0868C648
_08093200:
	lsls r0, r4, #2
	adds r1, #0x48
	adds r1, r1, r0
	ldr r0, [r1]
_08093208:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start SetWMMapText
SetWMMapText: @ 0x08093210
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _08093230 @ =0x0868C648
	bl Proc_Find
	cmp r0, #0
	beq _08093228
	lsls r1, r4, #2
	adds r0, #0x50
	adds r0, r0, r1
	str r5, [r0]
_08093228:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08093230: .4byte 0x0868C648

	thumb_func_start GetWMMapText
GetWMMapText: @ 0x08093234
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08093248 @ =0x0868C648
	bl Proc_Find
	adds r1, r0, #0
	cmp r1, #0
	bne _0809324C
	movs r0, #0
	b _08093254
	.align 2, 0
_08093248: .4byte 0x0868C648
_0809324C:
	lsls r0, r4, #2
	adds r1, #0x50
	adds r1, r1, r0
	ldr r0, [r1]
_08093254:
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_809325C
sub_809325C: @ 0x0809325C
	ldr r1, _08093280 @ =0x0868C414
	lsls r2, r0, #1
	adds r2, r2, r0
	lsls r2, r2, #2
	adds r2, r2, r1
	ldr r0, [r2]
	ldrh r3, [r0]
	lsrs r1, r3, #1
	lsls r1, r1, #1
	adds r0, r0, r1
	ldrb r2, [r2, #8]
	lsls r1, r2, #1
	adds r1, r1, r0
	ldrh r1, [r1]
	lsrs r1, r1, #1
	lsls r1, r1, #1
	adds r0, r0, r1
	bx lr
	.align 2, 0
_08093280: .4byte 0x0868C414

	thumb_func_start sub_8093284
sub_8093284: @ 0x08093284
	ldrh r0, [r0]
	bx lr

	thumb_func_start sub_8093288
sub_8093288: @ 0x08093288
	push {r4, lr}
	lsls r2, r1, #1
	adds r2, r2, r1
	lsls r2, r2, #1
	adds r2, r2, r0
	ldr r4, _080932CC @ =0x000001FF
	ldrh r2, [r2, #4]
	ands r4, r2
	ldr r0, _080932D0 @ =0x0868C648
	bl Proc_Find
	adds r1, r0, #0
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r4
	cmp r0, #0
	beq _080932AE
	ldr r0, _080932D4 @ =0xFFFFFE00
	orrs r4, r0
_080932AE:
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0
	bne _080932C2
	adds r0, r4, #0
	movs r1, #2
	bl Div
	adds r4, r0, #0
_080932C2:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080932CC: .4byte 0x000001FF
_080932D0: .4byte 0x0868C648
_080932D4: .4byte 0xFFFFFE00

	thumb_func_start sub_80932D8
sub_80932D8: @ 0x080932D8
	push {r4, lr}
	lsls r2, r1, #1
	adds r2, r2, r1
	lsls r2, r2, #1
	adds r2, r2, r0
	ldrb r4, [r2, #2]
	ldr r0, _08093314 @ =0x0868C648
	bl Proc_Find
	adds r1, r0, #0
	movs r0, #0x80
	ands r0, r4
	cmp r0, #0
	beq _080932F8
	ldr r0, _08093318 @ =0xFFFFFF00
	orrs r4, r0
_080932F8:
	adds r0, r1, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0
	bne _0809330C
	adds r0, r4, #0
	movs r1, #2
	bl Div
	adds r4, r0, #0
_0809330C:
	adds r0, r4, #0
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08093314: .4byte 0x0868C648
_08093318: .4byte 0xFFFFFF00

	thumb_func_start sub_809331C
sub_809331C: @ 0x0809331C
	push {r4, r5, r6, lr}
	adds r3, r0, #0
	movs r1, #0
	movs r0, #0
	strh r0, [r3, #0x2a]
	strh r0, [r3, #0x2c]
	adds r0, r3, #0
	adds r0, #0x2e
	strb r1, [r0]
	ldr r6, _08093388 @ =0x0868C658
	movs r4, #0
	movs r2, #3
	adds r1, r3, #0
	adds r1, #0x3c
_08093338:
	str r4, [r1]
	subs r1, #4
	subs r2, #1
	cmp r2, #0
	bge _08093338
	adds r4, r3, #0
	adds r4, #0x50
	adds r5, r3, #0
	adds r5, #0x48
	adds r2, r3, #0
	adds r2, #0x40
	movs r0, #0
	adds r1, r3, #0
	adds r1, #0x44
_08093354:
	str r0, [r1]
	subs r1, #4
	cmp r1, r2
	bge _08093354
	adds r2, r4, #0
	movs r0, #0
	adds r1, r2, #4
_08093362:
	str r0, [r1]
	subs r1, #4
	cmp r1, r2
	bge _08093362
	adds r2, r5, #0
	movs r0, #0
	adds r1, r2, #4
_08093370:
	str r0, [r1]
	subs r1, #4
	cmp r1, r2
	bge _08093370
	adds r0, r6, #0
	adds r1, r3, #0
	bl SpawnProc
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08093388: .4byte 0x0868C658

	thumb_func_start sub_809338C
sub_809338C: @ 0x0809338C
	adds r0, #0x64
	movs r1, #0
	strh r1, [r0]
	bx lr

	thumb_func_start sub_8093394
sub_8093394: @ 0x08093394
	push {r4, lr}
	sub sp, #0x38
	adds r4, r0, #0
	ldr r1, _080933EC @ =0x08354728
	mov r0, sp
	movs r2, #0x37
	bl memcpy
	adds r4, #0x64
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	movs r1, #0
	ldrsh r0, [r4, r1]
	add r0, sp
	ldrb r0, [r0]
	cmp r0, #0xff
	bne _080933BC
	movs r0, #0
	strh r0, [r4]
_080933BC:
	movs r1, #0
	ldrsh r0, [r4, r1]
	add r0, sp
	ldrb r0, [r0]
	lsls r4, r0, #5
	ldr r0, _080933F0 @ =0x082D37E4
	adds r0, r4, r0
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080933F4 @ =0x082D3764
	adds r4, r4, r0
	movs r1, #0x88
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	add sp, #0x38
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080933EC: .4byte 0x08354728
_080933F0: .4byte 0x082D37E4
_080933F4: .4byte 0x082D3764

	thumb_func_start sub_80933F8
sub_80933F8: @ 0x080933F8
	push {lr}
	ldr r0, _08093430 @ =0x082D33B8
	ldr r1, _08093434 @ =0x06016200
	bl Decompress
	ldr r0, _08093438 @ =0x082D36E4
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x80
	bl ApplyPaletteExt
	ldr r0, _0809343C @ =0x082D3864
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x40
	bl ApplyPaletteExt
	bl sub_8092838
	ldr r0, _08093440 @ =0x0868C648
	movs r1, #3
	bl SpawnProc
	bl sub_80934A0
	pop {r0}
	bx r0
	.align 2, 0
_08093430: .4byte 0x082D33B8
_08093434: .4byte 0x06016200
_08093438: .4byte 0x082D36E4
_0809343C: .4byte 0x082D3864
_08093440: .4byte 0x0868C648

	thumb_func_start sub_8093444
sub_8093444: @ 0x08093444
	push {lr}
	ldr r0, _08093458 @ =0x0868C648
	bl Proc_Find
	cmp r0, #0
	beq _08093452
	movs r0, #1
_08093452:
	pop {r1}
	bx r1
	.align 2, 0
_08093458: .4byte 0x0868C648

	thumb_func_start sub_809345C
sub_809345C: @ 0x0809345C
	push {lr}
	movs r0, #8
	bl Proc_EndEachMarked
	bl EndEachAnimProc
	bl EndPutTalkSpriteText
	ldr r0, _08093478 @ =0x0868C648
	bl Proc_EndEach
	pop {r0}
	bx r0
	.align 2, 0
_08093478: .4byte 0x0868C648

	thumb_func_start sub_809347C
sub_809347C: @ 0x0809347C
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	ldr r0, _0809349C @ =0x0868C648
	bl Proc_Find
	subs r4, #0x78
	strh r4, [r0, #0x2a]
	subs r5, #0x50
	strh r5, [r0, #0x2c]
	adds r0, #0x2e
	movs r1, #1
	strb r1, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809349C: .4byte 0x0868C648

	thumb_func_start sub_80934A0
sub_80934A0: @ 0x080934A0
	push {lr}
	ldr r0, _080934B8 @ =0x0868C648
	bl Proc_Find
	movs r2, #0
	movs r1, #0
	strh r1, [r0, #0x2a]
	strh r1, [r0, #0x2c]
	adds r0, #0x2e
	strb r2, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_080934B8: .4byte 0x0868C648

	thumb_func_start sub_80934BC
sub_80934BC: @ 0x080934BC
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r5, r0, #0
	adds r6, r1, #0
	ldr r0, _08093510 @ =0x0868C648
	bl Proc_Find
	lsls r1, r5, #1
	adds r1, r1, r5
	lsls r1, r1, #2
	ldr r2, _08093514 @ =0x0868C414
	adds r2, r1, r2
	movs r3, #4
	ldrsh r1, [r2, r3]
	ldrh r7, [r0, #0x2a]
	subs r4, r1, r7
	movs r3, #6
	ldrsh r1, [r2, r3]
	ldrh r7, [r0, #0x2c]
	subs r3, r1, r7
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0
	bne _080934F4
	asrs r4, r4, #1
	asrs r3, r3, #1
	subs r4, #2
	subs r3, #2
_080934F4:
	ldrh r0, [r2, #0xa]
	str r0, [sp]
	ldrb r2, [r2, #9]
	lsls r0, r2, #8
	str r0, [sp, #4]
	adds r0, r5, #0
	adds r1, r6, #0
	adds r2, r4, #0
	bl sub_80923C8
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08093510: .4byte 0x0868C648
_08093514: .4byte 0x0868C414

	thumb_func_start sub_8093518
sub_8093518: @ 0x08093518
	push {lr}
	ldr r0, _08093554 @ =0x082D33B8
	ldr r1, _08093558 @ =0x06016200
	bl Decompress
	ldr r0, _0809355C @ =0x082D36E4
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x80
	bl ApplyPaletteExt
	ldr r0, _08093560 @ =Pal_SystemObjects
	movs r1, #0xd8
	lsls r1, r1, #2
	movs r2, #0x40
	bl ApplyPaletteExt
	ldr r0, _08093564 @ =0x082AA9A8
	ldr r1, _08093568 @ =0x06016800
	bl Decompress
	ldr r0, _0809356C @ =0x082AAD5C
	movs r1, #0xc8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r0}
	bx r0
	.align 2, 0
_08093554: .4byte 0x082D33B8
_08093558: .4byte 0x06016200
_0809355C: .4byte 0x082D36E4
_08093560: .4byte Pal_SystemObjects
_08093564: .4byte 0x082AA9A8
_08093568: .4byte 0x06016800
_0809356C: .4byte 0x082AAD5C

	thumb_func_start StartWMIntroRotation
StartWMIntroRotation: @ 0x08093570
	push {lr}
	adds r1, r0, #0
	ldr r0, _08093580 @ =0x0868C668
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
_08093580: .4byte 0x0868C668

	thumb_func_start sub_8093584
sub_8093584: @ 0x08093584
	adds r3, r0, #0
	adds r1, r3, #0
	adds r1, #0x44
	movs r2, #0
	movs r0, #0x80
	lsls r0, r0, #2
	strh r0, [r1]
	adds r1, #4
	movs r0, #0x80
	strh r0, [r1]
	adds r0, r3, #0
	adds r0, #0x64
	strh r2, [r0]
	bx lr

	thumb_func_start sub_80935A0
sub_80935A0: @ 0x080935A0
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	adds r7, r0, #0
	movs r1, #0x80
	lsls r1, r1, #8
	adds r4, r7, #0
	adds r4, #0x64
	movs r0, #0
	ldrsh r3, [r4, r0]
	movs r5, #0x23
	str r5, [sp]
	movs r0, #5
	movs r2, #0
	bl Interpolate
	adds r6, r0, #0
	movs r1, #0x80
	lsls r1, r1, #3
	movs r2, #0x80
	lsls r2, r2, #1
	ldrh r3, [r4]
	adds r0, r3, #1
	strh r0, [r4]
	lsls r3, r3, #0x10
	asrs r3, r3, #0x10
	str r5, [sp]
	movs r0, #5
	bl Interpolate
	movs r2, #0xf0
	lsls r2, r2, #7
	movs r3, #0xa0
	lsls r3, r3, #7
	str r6, [sp]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp, #4]
	str r0, [sp, #8]
	movs r0, #0
	movs r1, #0
	bl sub_8092EB0
	ldrh r4, [r4]
	cmp r4, #0x28
	bne _08093600
	adds r0, r7, #0
	bl Proc_Break
_08093600:
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8093608
sub_8093608: @ 0x08093608
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sb, r0
	movs r0, #0x64
	add sb, r0
	movs r0, #0
	mov r1, sb
	strh r0, [r1]
	bl sub_8069C34
	bl sub_8069C74
	ldr r2, _080936E0 @ =gDispIo+0x3C
	mov ip, r2
	ldr r0, _080936E4 @ =0x0000FFE0
	ldrh r3, [r2]
	ands r0, r3
	movs r1, #0x1f
	orrs r0, r1
	strh r0, [r2]
	subs r2, #0x3c
	movs r4, #0x20
	mov r6, ip
	ldrb r0, [r6]
	orrs r0, r4
	strb r0, [r6]
	ldrb r0, [r2, #1]
	orrs r0, r4
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #8
	rsbs r0, r0, #0
	add r0, ip
	mov sl, r0
	ldrb r0, [r0]
	orrs r0, r4
	mov r1, sl
	strb r0, [r1]
	mov r7, ip
	subs r7, #6
	movs r2, #0x21
	rsbs r2, r2, #0
	adds r0, r2, #0
	ldrb r3, [r7]
	ands r0, r3
	strb r0, [r7]
	movs r1, #1
	mov r6, sl
	ldrb r0, [r6]
	orrs r0, r1
	movs r3, #2
	mov r8, r3
	mov r6, r8
	orrs r0, r6
	movs r3, #4
	orrs r0, r3
	movs r5, #8
	orrs r0, r5
	movs r3, #0x10
	orrs r0, r3
	mov r6, sl
	strb r0, [r6]
	ldrb r0, [r7]
	orrs r1, r0
	mov r6, r8
	orrs r1, r6
	movs r0, #4
	orrs r1, r0
	orrs r1, r5
	orrs r1, r3
	strb r1, [r7]
	mov r1, sl
	ldrb r1, [r1]
	orrs r4, r1
	mov r3, sl
	strb r4, [r3]
	ldrb r6, [r7]
	ands r2, r6
	strb r2, [r7]
	movs r0, #0x3f
	mov r1, ip
	ldrb r1, [r1]
	ands r0, r1
	movs r1, #0x80
	orrs r0, r1
	mov r2, ip
	strb r0, [r2]
	movs r3, #0
	strb r3, [r2, #8]
	strb r3, [r2, #9]
	mov r6, sb
	ldrh r0, [r6]
	strb r0, [r2, #0xa]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080936E0: .4byte gDispIo+0x3C
_080936E4: .4byte 0x0000FFE0

	thumb_func_start sub_80936E8
sub_80936E8: @ 0x080936E8
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	adds r4, r6, #0
	adds r4, #0x64
	movs r0, #0
	ldrsh r3, [r4, r0]
	movs r0, #0x2d
	str r0, [sp]
	movs r0, #5
	movs r1, #1
	movs r2, #0xc8
	bl Interpolate
	adds r2, r0, #0
	movs r0, #0x78
	movs r1, #0x50
	bl sub_8069DA4
	ldr r5, _08093760 @ =gDispIo
	adds r2, r5, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x80
	orrs r0, r1
	strb r0, [r2]
	adds r0, r5, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	movs r0, #0
	ldrsh r3, [r4, r0]
	movs r0, #0x28
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r1, r5, #0
	adds r1, #0x46
	strb r0, [r1]
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x28
	bne _08093758
	adds r0, r6, #0
	bl Proc_Break
_08093758:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08093760: .4byte gDispIo

	thumb_func_start sub_8093764
sub_8093764: @ 0x08093764
	push {r4, lr}
	ldr r4, _080937A8 @ =gDispIo
	adds r1, r4, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r2, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	movs r0, #0
	bl SetOnHBlankA
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r4, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r4, #1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_080937A8: .4byte gDispIo

	thumb_func_start StartWMHighlight
StartWMHighlight: @ 0x080937AC
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r1, #0
	ldr r0, _080937D0 @ =0x0868C704
	movs r1, #3
	bl SpawnProc
	adds r1, r0, #0
	adds r0, #0x64
	strh r5, [r0]
	adds r0, #2
	strh r4, [r0]
	adds r0, r4, #0
	bl SetWMHighlight
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080937D0: .4byte 0x0868C704

	thumb_func_start sub_80937D4
sub_80937D4: @ 0x080937D4
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r7, _0809389C @ =0x0868C6B0
	adds r4, r5, #0
	adds r4, #0x64
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r1, r0, #1
	adds r1, r1, r0
	lsls r1, r1, #2
	adds r1, r1, r7
	ldr r2, [r1]
	adds r6, r5, #0
	adds r6, #0x66
	movs r1, #0
	ldrsh r0, [r6, r1]
	ldr r1, _080938A0 @ =0x06015100
	cmp r0, #0
	bne _080937FC
	ldr r1, _080938A4 @ =0x06014000
_080937FC:
	adds r0, r2, #0
	bl Decompress
	ldr r0, _080938A8 @ =0x082D3398
	movs r1, #0xd0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r2, #0
	ldrsh r1, [r4, r2]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r1, r7, #4
	adds r0, r0, r1
	ldr r0, [r0]
	movs r1, #0xd
	bl StartAnim
	adds r1, r0, #0
	str r1, [r5, #0x50]
	movs r4, #0
	ldrsh r0, [r6, r4]
	ldr r2, _080938AC @ =0x0000A288
	adds r4, r2, #0
	cmp r0, #0
	bne _0809383A
	movs r0, #0xa2
	lsls r0, r0, #8
	adds r4, r0, #0
_0809383A:
	movs r2, #0
	movs r3, #0
	strh r4, [r1, #0x22]
	ldr r1, _080938B0 @ =gDispIo
	mov ip, r1
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r4, [r1]
	ands r0, r4
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x44
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x45
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r2, [r0]
	ldr r0, _080938B4 @ =0x0000FFE0
	mov r1, ip
	ldrh r1, [r1, #0x3c]
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	ldr r1, _080938B8 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	mov r4, ip
	strh r0, [r4, #0x3c]
	mov r1, ip
	adds r1, #0x3d
	movs r0, #0x20
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	str r3, [r5, #0x54]
	adds r1, r5, #0
	adds r1, #0x44
	movs r0, #0xc0
	strh r0, [r1]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809389C: .4byte 0x0868C6B0
_080938A0: .4byte 0x06015100
_080938A4: .4byte 0x06014000
_080938A8: .4byte 0x082D3398
_080938AC: .4byte 0x0000A288
_080938B0: .4byte gDispIo
_080938B4: .4byte 0x0000FFE0
_080938B8: .4byte 0x0000E0FF

	thumb_func_start sub_80938BC
sub_80938BC: @ 0x080938BC
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r5, r0, #0
	ldr r0, [r5, #0x50]
	ldr r2, _08093954 @ =0x0868C6B0
	adds r1, r5, #0
	adds r1, #0x64
	movs r3, #0
	ldrsh r1, [r1, r3]
	lsls r3, r1, #1
	adds r3, r3, r1
	lsls r3, r3, #2
	adds r3, r3, r2
	ldrb r1, [r3, #8]
	movs r2, #0x80
	lsls r2, r2, #3
	ldrb r3, [r3, #9]
	orrs r2, r3
	bl Anim_Display
	ldr r1, _08093958 @ =gSinLut
	adds r2, r5, #0
	adds r2, #0x44
	ldrb r7, [r2]
	lsls r0, r7, #1
	adds r0, r0, r1
	movs r3, #0
	ldrsh r1, [r0, r3]
	lsls r0, r1, #1
	adds r0, r0, r1
	asrs r0, r0, #0xb
	adds r3, r0, #0
	adds r3, #8
	ldrh r0, [r2]
	adds r0, #3
	movs r6, #0
	strh r0, [r2]
	ldr r1, _0809395C @ =gDispIo
	adds r4, r1, #0
	adds r4, #0x3c
	movs r2, #0x3f
	ldrb r7, [r4]
	ands r2, r7
	strb r2, [r4]
	movs r0, #0x44
	adds r0, r0, r1
	mov r8, r0
	strb r3, [r0]
	movs r0, #0x10
	subs r0, r0, r3
	movs r7, #0x45
	adds r7, r7, r1
	strb r0, [r7]
	adds r1, #0x46
	strb r6, [r1]
	ldr r0, [r5, #0x54]
	cmp r0, #0
	beq _08093948
	cmp r3, #2
	bne _08093948
	strb r2, [r4]
	mov r0, r8
	strb r6, [r0]
	movs r0, #0x10
	strb r0, [r7]
	strb r6, [r1]
	adds r0, r5, #0
	bl Proc_End
_08093948:
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08093954: .4byte 0x0868C6B0
_08093958: .4byte gSinLut
_0809395C: .4byte gDispIo

	thumb_func_start sub_8093960
sub_8093960: @ 0x08093960
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x50]
	bl Anim_End
	adds r4, #0x66
	movs r1, #0
	ldrsh r0, [r4, r1]
	movs r1, #0
	bl SetWMHighlight
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_809397C
sub_809397C: @ 0x0809397C
	push {lr}
	bl GetWMHighlight
	cmp r0, #0
	beq _0809398A
	bl Proc_End
_0809398A:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8093990
sub_8093990: @ 0x08093990
	push {r4, lr}
	movs r4, #0
_08093994:
	adds r0, r4, #0
	bl sub_809397C
	adds r4, #1
	cmp r4, #1
	ble _08093994
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80939A8
sub_80939A8: @ 0x080939A8
	push {lr}
	bl GetWMHighlight
	adds r1, r0, #0
	cmp r1, #0
	beq _080939B8
	movs r0, #1
	str r0, [r1, #0x54]
_080939B8:
	pop {r0}
	bx r0

	thumb_func_start WMHighlightExists
WMHighlightExists: @ 0x080939BC
	push {lr}
	bl GetWMHighlight
	cmp r0, #0
	bne _080939CA
	movs r0, #0
	b _080939CC
_080939CA:
	movs r0, #1
_080939CC:
	pop {r1}
	bx r1

	thumb_func_start sub_80939D0
sub_80939D0: @ 0x080939D0
	push {lr}
	movs r0, #0
	bl GetWMHighlight
	cmp r0, #0
	bne _080939EA
	movs r0, #1
	bl GetWMHighlight
	cmp r0, #0
	bne _080939EA
	movs r0, #0
	b _080939EC
_080939EA:
	movs r0, #1
_080939EC:
	pop {r1}
	bx r1

	thumb_func_start sub_80939F0
sub_80939F0: @ 0x080939F0
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	adds r4, r0, #0
	adds r5, r1, #0
	mov r8, r2
	adds r7, r3, #0
	adds r0, r7, #0
	bl GetWMDot
	adds r6, r0, #0
	lsls r4, r4, #0x10
	lsls r5, r5, #0x10
	lsrs r4, r4, #0x10
	orrs r4, r5
	str r4, [sp, #8]
	add r4, sp, #8
	adds r0, r4, #0
	bl sub_8093FD8
	cmp r6, #0
	beq _08093A34
	add r0, sp, #8
	movs r2, #0
	ldrsh r1, [r0, r2]
	movs r3, #2
	ldrsh r2, [r4, r3]
	movs r3, #0xc4
	lsls r3, r3, #2
	adds r0, r6, #0
	bl SetAnimProcParams
	b _08093A62
_08093A34:
	ldr r0, _08093A70 @ =0x082D3674
	add r1, sp, #8
	movs r2, #0
	ldrsh r1, [r1, r2]
	movs r3, #2
	ldrsh r2, [r4, r3]
	movs r3, #0xf
	mov r4, r8
	ands r3, r4
	lsls r3, r3, #0xc
	movs r4, #0xc4
	lsls r4, r4, #2
	orrs r3, r4
	movs r4, #1
	str r4, [sp]
	movs r4, #0xa
	str r4, [sp, #4]
	bl StartAnimProc
	adds r1, r0, #0
	adds r0, r7, #0
	bl SetWMDot
_08093A62:
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08093A70: .4byte 0x082D3674

	thumb_func_start EndWMDot
EndWMDot: @ 0x08093A74
	push {r4, lr}
	adds r4, r0, #0
	bl GetWMDot
	cmp r0, #0
	beq _08093A84
	bl EndAnimProc
_08093A84:
	adds r0, r4, #0
	movs r1, #0
	bl SetWMDot
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start StartWMFlag
StartWMFlag: @ 0x08093A94
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #0xc
	adds r4, r0, #0
	adds r5, r1, #0
	adds r7, r2, #0
	mov r8, r3
	mov r0, r8
	bl GetWMFlag
	adds r6, r0, #0
	lsls r4, r4, #0x10
	lsls r5, r5, #0x10
	lsrs r4, r4, #0x10
	orrs r4, r5
	str r4, [sp, #8]
	add r4, sp, #8
	adds r0, r4, #0
	bl sub_8093FD8
	cmp r6, #0
	beq _08093AE0
	add r0, sp, #8
	movs r2, #0
	ldrsh r1, [r0, r2]
	movs r3, #2
	ldrsh r2, [r4, r3]
	movs r3, #0xf
	ands r3, r7
	lsls r3, r3, #0xc
	movs r0, #0xc4
	lsls r0, r0, #2
	orrs r3, r0
	adds r0, r6, #0
	bl SetAnimProcParams
	b _08093B0A
_08093AE0:
	ldr r0, _08093B18 @ =0x082D3674
	add r1, sp, #8
	movs r2, #0
	ldrsh r1, [r1, r2]
	movs r3, #2
	ldrsh r2, [r4, r3]
	movs r3, #0xf
	ands r3, r7
	lsls r3, r3, #0xc
	movs r4, #0xc4
	lsls r4, r4, #2
	orrs r3, r4
	str r6, [sp]
	movs r4, #7
	str r4, [sp, #4]
	bl StartAnimProc
	adds r1, r0, #0
	mov r0, r8
	bl SetWMFlag
_08093B0A:
	add sp, #0xc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08093B18: .4byte 0x082D3674

	thumb_func_start EndWMFlag
EndWMFlag: @ 0x08093B1C
	push {r4, lr}
	adds r4, r0, #0
	bl GetWMFlag
	cmp r0, #0
	beq _08093B2C
	bl EndAnimProc
_08093B2C:
	adds r0, r4, #0
	movs r1, #0
	bl SetWMFlag
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start StartWMMapText
StartWMMapText: @ 0x08093B3C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r6, r2, #0
	mov r8, r3
	ldr r7, [sp, #0x1c]
	ldr r5, [sp, #0x20]
	lsls r0, r0, #0x10
	lsls r1, r1, #0x10
	lsrs r0, r0, #0x10
	orrs r0, r1
	str r0, [sp]
	mov r4, sp
	mov r0, sp
	bl sub_8093FD8
	ldr r0, _08093B9C @ =0x0868C8D8
	movs r1, #3
	bl SpawnProc
	adds r1, r0, #0
	mov r0, sp
	movs r2, #0
	ldrsh r0, [r0, r2]
	str r0, [r1, #0x2c]
	movs r2, #2
	ldrsh r0, [r4, r2]
	str r0, [r1, #0x30]
	adds r0, r1, #0
	adds r0, #0x64
	strh r6, [r0]
	adds r0, #2
	mov r2, r8
	strh r2, [r0]
	adds r0, #2
	strh r7, [r0]
	adds r0, #2
	strh r5, [r0]
	adds r0, r5, #0
	bl SetWMMapText
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08093B9C: .4byte 0x0868C8D8

	thumb_func_start sub_8093BA0
sub_8093BA0: @ 0x08093BA0
	push {lr}
	bl GetWMMapText
	cmp r0, #0
	beq _08093BAE
	bl Proc_End
_08093BAE:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8093BB4
sub_8093BB4: @ 0x08093BB4
	push {lr}
	bl GetWMMapText
	adds r1, r0, #0
	cmp r1, #0
	beq _08093BC4
	movs r0, #1
	str r0, [r1, #0x54]
_08093BC4:
	pop {r0}
	bx r0

	thumb_func_start sub_8093BC8
sub_8093BC8: @ 0x08093BC8
	push {r4, r5, lr}
	adds r5, r1, #0
	ldr r4, _08093C14 @ =gBuf
	adds r1, r4, #0
	bl Decompress
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #8
	movs r3, #4
	bl sub_8015298
	movs r1, #0x80
	lsls r1, r1, #3
	adds r0, r4, r1
	movs r2, #0x80
	lsls r2, r2, #1
	adds r1, r5, r2
	movs r2, #4
	movs r3, #4
	bl sub_8015298
	movs r0, #0xc0
	lsls r0, r0, #3
	adds r4, r4, r0
	movs r1, #0xc0
	lsls r1, r1, #1
	adds r5, r5, r1
	adds r0, r4, #0
	adds r1, r5, #0
	movs r2, #1
	movs r3, #4
	bl sub_8015298
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08093C14: .4byte gBuf

	thumb_func_start sub_8093C18
sub_8093C18: @ 0x08093C18
	adds r2, r0, #0
	adds r2, #0x44
	movs r1, #0
	strh r1, [r2]
	str r1, [r0, #0x54]
	bx lr

	thumb_func_start sub_8093C24
sub_8093C24: @ 0x08093C24
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldr r0, _08093C58 @ =0x082D38A4
	movs r1, #0xb
	bl StartAnim
	str r0, [r4, #0x50]
	adds r2, r0, #0
	adds r0, r4, #0
	adds r0, #0x6a
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r1, #0xa2
	lsls r1, r1, #2
	cmp r0, #0
	bne _08093C46
	subs r1, #0x88
_08093C46:
	adds r0, r4, #0
	adds r0, #0x68
	movs r3, #0
	ldrsh r0, [r0, r3]
	cmp r0, #0
	bne _08093C5C
	movs r0, #0xa0
	lsls r0, r0, #7
	b _08093C60
	.align 2, 0
_08093C58: .4byte 0x082D38A4
_08093C5C:
	movs r0, #0x80
	lsls r0, r0, #7
_08093C60:
	orrs r0, r1
	strh r0, [r2, #0x22]
	ldr r2, _08093C8C @ =0x0868C734
	adds r3, r4, #0
	adds r3, #0x64
	movs r0, #0
	ldrsh r1, [r3, r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r2, #8
	adds r0, r0, r2
	ldr r1, [r0]
	ldr r0, _08093C90 @ =0x082D5910
	adds r5, r3, #0
	cmp r1, r0
	bne _08093C94
	ldr r0, [r4, #0x50]
	movs r1, #1
	bl Anim_SetAnimId
	b _08093C9C
	.align 2, 0
_08093C8C: .4byte 0x0868C734
_08093C90: .4byte 0x082D5910
_08093C94:
	ldr r0, [r4, #0x50]
	movs r1, #2
	bl Anim_SetAnimId
_08093C9C:
	ldr r6, _08093D34 @ =0x0868C734
	movs r2, #0
	ldrsh r1, [r5, r2]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r1, r6, #4
	adds r0, r0, r1
	ldr r2, [r0]
	adds r4, #0x6a
	movs r3, #0
	ldrsh r0, [r4, r3]
	ldr r1, _08093D38 @ =0x06015100
	cmp r0, #0
	bne _08093CBC
	ldr r1, _08093D3C @ =0x06014000
_08093CBC:
	adds r0, r2, #0
	bl sub_8093BC8
	movs r0, #0
	ldrsh r1, [r5, r0]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	adds r1, r6, #0
	adds r1, #8
	adds r0, r0, r1
	ldr r3, [r0]
	movs r1, #0
	ldrsh r0, [r4, r1]
	ldr r1, _08093D40 @ =0x06015300
	cmp r0, #0
	bne _08093CE0
	ldr r1, _08093D44 @ =0x06014200
_08093CE0:
	adds r0, r3, #0
	bl sub_8093BC8
	ldr r2, _08093D48 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r3, r2, #0
	adds r3, #0x45
	movs r0, #0x10
	strb r0, [r3]
	adds r0, r2, #0
	adds r0, #0x46
	strb r1, [r0]
	ldr r0, _08093D4C @ =0x0000FFE0
	ldrh r1, [r2, #0x3c]
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	ldr r1, _08093D50 @ =0x0000E0FF
	ands r0, r1
	movs r3, #0x80
	lsls r3, r3, #3
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2, #0x3c]
	adds r1, r2, #0
	adds r1, #0x3d
	movs r0, #0x20
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08093D34: .4byte 0x0868C734
_08093D38: .4byte 0x06015100
_08093D3C: .4byte 0x06014000
_08093D40: .4byte 0x06015300
_08093D44: .4byte 0x06014200
_08093D48: .4byte gDispIo
_08093D4C: .4byte 0x0000FFE0
_08093D50: .4byte 0x0000E0FF

	thumb_func_start sub_8093D54
sub_8093D54: @ 0x08093D54
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r5, r0, #0
	ldr r0, [r5, #0x50]
	ldr r1, [r5, #0x2c]
	ldr r2, [r5, #0x30]
	movs r3, #0x80
	lsls r3, r3, #3
	orrs r2, r3
	adds r3, r5, #0
	adds r3, #0x64
	movs r4, #0
	ldrsh r3, [r3, r4]
	adds r4, r5, #0
	adds r4, #0x66
	movs r6, #0
	ldrsh r4, [r4, r6]
	str r4, [sp]
	adds r4, r5, #0
	adds r4, #0x68
	movs r6, #0
	ldrsh r4, [r4, r6]
	str r4, [sp, #4]
	bl sub_8093EAC
	adds r0, r5, #0
	adds r0, #0x44
	ldrh r1, [r0]
	adds r1, #1
	movs r3, #0
	strh r1, [r0]
	ldr r4, _08093DD0 @ =gDispIo
	adds r2, r4, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r6, [r2]
	ands r0, r6
	strb r0, [r2]
	adds r2, r1, #0
	adds r0, r4, #0
	adds r0, #0x44
	strb r2, [r0]
	movs r0, #0x10
	subs r0, r0, r2
	adds r2, r4, #0
	adds r2, #0x45
	strb r0, [r2]
	adds r0, r4, #0
	adds r0, #0x46
	strb r3, [r0]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x10
	cmp r1, #0xf
	ble _08093DC6
	adds r0, r5, #0
	bl Proc_Break
_08093DC6:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08093DD0: .4byte gDispIo

	thumb_func_start sub_8093DD4
sub_8093DD4: @ 0x08093DD4
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r5, r0, #0
	ldr r0, [r5, #0x50]
	ldr r1, [r5, #0x2c]
	ldr r2, [r5, #0x30]
	adds r3, r5, #0
	adds r3, #0x64
	movs r4, #0
	ldrsh r3, [r3, r4]
	adds r4, r5, #0
	adds r4, #0x66
	movs r6, #0
	ldrsh r4, [r4, r6]
	str r4, [sp]
	adds r4, r5, #0
	adds r4, #0x68
	movs r6, #0
	ldrsh r4, [r4, r6]
	str r4, [sp, #4]
	bl sub_8093EAC
	ldr r0, [r5, #0x54]
	cmp r0, #0
	beq _08093E0C
	adds r0, r5, #0
	bl Proc_Break
_08093E0C:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_8093E14
sub_8093E14: @ 0x08093E14
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r5, r0, #0
	ldr r0, [r5, #0x50]
	ldr r1, [r5, #0x2c]
	ldr r2, [r5, #0x30]
	movs r3, #0x80
	lsls r3, r3, #3
	orrs r2, r3
	adds r3, r5, #0
	adds r3, #0x64
	movs r4, #0
	ldrsh r3, [r3, r4]
	adds r4, r5, #0
	adds r4, #0x66
	movs r6, #0
	ldrsh r4, [r4, r6]
	str r4, [sp]
	adds r4, r5, #0
	adds r4, #0x68
	movs r6, #0
	ldrsh r4, [r4, r6]
	str r4, [sp, #4]
	bl sub_8093EAC
	adds r0, r5, #0
	adds r0, #0x44
	ldrh r2, [r0]
	subs r2, #1
	movs r3, #0
	strh r2, [r0]
	ldr r4, _08093E8C @ =gDispIo
	adds r1, r4, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r6, [r1]
	ands r0, r6
	strb r0, [r1]
	adds r1, r2, #0
	adds r0, r4, #0
	adds r0, #0x44
	strb r1, [r0]
	movs r0, #0x10
	subs r0, r0, r1
	adds r1, r4, #0
	adds r1, #0x45
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x46
	strb r3, [r0]
	lsls r2, r2, #0x10
	cmp r2, #0
	bne _08093E84
	adds r0, r5, #0
	bl Proc_Break
_08093E84:
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08093E8C: .4byte gDispIo

	thumb_func_start sub_8093E90
sub_8093E90: @ 0x08093E90
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x6a
	movs r1, #0
	ldrsh r0, [r0, r1]
	movs r1, #0
	bl SetWMMapText
	ldr r0, [r4, #0x50]
	bl Anim_End
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8093EAC
sub_8093EAC: @ 0x08093EAC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	str r0, [sp, #4]
	adds r4, r1, #0
	adds r7, r2, #0
	str r3, [sp, #8]
	ldr r0, [sp, #0x30]
	mov r8, r0
	ldr r5, [sp, #0x34]
	ldr r1, _08093EEC @ =0xFFFFFE00
	mov sb, r1
	mov r2, sb
	ands r2, r4
	mov sb, r2
	ldr r0, _08093EF0 @ =0xFFFFFF00
	mov sl, r0
	mov r1, sl
	ands r1, r7
	mov sl, r1
	mov r2, r8
	cmp r2, #1
	beq _08093F08
	cmp r2, #1
	bgt _08093EF4
	cmp r2, #0
	beq _08093F00
	b _08093F0A
	.align 2, 0
_08093EEC: .4byte 0xFFFFFE00
_08093EF0: .4byte 0xFFFFFF00
_08093EF4:
	mov r0, r8
	cmp r0, #2
	beq _08093F04
	cmp r0, #3
	beq _08093F08
	b _08093F0A
_08093F00:
	subs r4, #2
	b _08093F0A
_08093F04:
	subs r4, #3
	b _08093F0A
_08093F08:
	adds r4, #2
_08093F0A:
	lsls r5, r5, #1
	subs r5, #1
	movs r0, #1
	rsbs r0, r0, #0
	mov r1, r8
	lsls r1, r1, #1
	str r1, [sp, #0xc]
	cmp r5, r0
	beq _08093F54
	ldr r1, _08093F64 @ =0x0868C940
	ldr r0, [sp, #0xc]
	add r0, r8
	lsls r0, r0, #2
	adds r6, r0, r1
_08093F26:
	ldr r1, _08093F68 @ =0x000001FF
	ands r1, r4
	add r1, sb
	movs r2, #0xff
	ands r2, r7
	add r2, sl
	ldr r3, [r6]
	ldr r0, _08093F6C @ =0x00004320
	str r0, [sp]
	movs r0, #0xb
	bl PutSpriteExt
	movs r2, #4
	ldrsh r0, [r6, r2]
	adds r4, r4, r0
	movs r1, #6
	ldrsh r0, [r6, r1]
	adds r7, r7, r0
	subs r5, #1
	movs r0, #1
	rsbs r0, r0, #0
	cmp r5, r0
	bne _08093F26
_08093F54:
	mov r2, r8
	cmp r2, #1
	beq _08093F96
	cmp r2, #1
	bgt _08093F70
	cmp r2, #0
	beq _08093F7E
	b _08093F96
	.align 2, 0
_08093F64: .4byte 0x0868C940
_08093F68: .4byte 0x000001FF
_08093F6C: .4byte 0x00004320
_08093F70:
	mov r0, r8
	cmp r0, #2
	beq _08093F7C
	cmp r0, #3
	beq _08093F94
	b _08093F96
_08093F7C:
	adds r4, #2
_08093F7E:
	ldr r0, _08093F90 @ =0x0868C734
	ldr r2, [sp, #8]
	lsls r1, r2, #1
	adds r1, r1, r2
	lsls r1, r1, #2
	adds r1, r1, r0
	ldr r0, [r1]
	subs r4, r4, r0
	b _08093F96
	.align 2, 0
_08093F90: .4byte 0x0868C734
_08093F94:
	subs r4, #2
_08093F96:
	ldr r0, _08093FD0 @ =0x0868C940
	ldr r2, [sp, #0xc]
	add r2, r8
	lsls r2, r2, #2
	adds r2, r2, r0
	movs r0, #8
	ldrsh r1, [r2, r0]
	adds r1, r4, r1
	ldr r0, _08093FD4 @ =0x000001FF
	ands r1, r0
	add r1, sb
	movs r0, #0xa
	ldrsh r2, [r2, r0]
	adds r2, r7, r2
	movs r0, #0xff
	ands r2, r0
	add r2, sl
	ldr r0, [sp, #4]
	bl Anim_Display
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08093FD0: .4byte 0x0868C940
_08093FD4: .4byte 0x000001FF

	thumb_func_start sub_8093FD8
sub_8093FD8: @ 0x08093FD8
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _0809400C @ =0x0868C648
	bl Proc_Find
	ldrh r1, [r4]
	ldrh r3, [r0, #0x2a]
	subs r2, r1, r3
	strh r2, [r4]
	ldrh r5, [r4, #2]
	ldrh r3, [r0, #0x2c]
	subs r1, r5, r3
	strh r1, [r4, #2]
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r0, #0
	bne _08094006
	lsls r0, r2, #0x10
	asrs r0, r0, #0x11
	strh r0, [r4]
	lsls r0, r1, #0x10
	asrs r0, r0, #0x11
	strh r0, [r4, #2]
_08094006:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809400C: .4byte 0x0868C648

	thumb_func_start PlayWMIntroBGM
PlayWMIntroBGM: @ 0x08094010
	push {lr}
	ldr r0, _0809402C @ =gPlaySt
	ldrb r0, [r0, #0xe]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	bl GetChapterInfo
	ldrb r0, [r0, #0x17]
	movs r1, #0
	bl StartBgm
	pop {r0}
	bx r0
	.align 2, 0
_0809402C: .4byte gPlaySt

	thumb_func_start sub_8094030
sub_8094030: @ 0x08094030
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	adds r5, r1, #0
	adds r6, r2, #0
	adds r1, r3, #0
	ldr r0, _08094058 @ =0x0868C970
	bl SpawnProcLocking
	ldr r1, _0809405C @ =0x000003FF
	ands r1, r4
	lsls r1, r1, #5
	ldr r2, _08094060 @ =0x06010000
	adds r1, r1, r2
	str r1, [r0, #0x4c]
	str r5, [r0, #0x54]
	str r6, [r0, #0x58]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08094058: .4byte 0x0868C970
_0809405C: .4byte 0x000003FF
_08094060: .4byte 0x06010000

	thumb_func_start sub_8094064
sub_8094064: @ 0x08094064
	adds r0, #0x64
	movs r1, #0
	strh r1, [r0]
	bx lr

	thumb_func_start sub_809406C
sub_809406C: @ 0x0809406C
	push {r4, r5, r6, r7, lr}
	adds r3, r0, #0
	ldr r6, [r3, #0x4c]
	movs r1, #0
	b _080940C8
_08094076:
	movs r2, #0
	lsls r0, r1, #2
	adds r5, r1, #0
	adds r5, #8
	adds r4, r0, r6
_08094080:
	lsls r0, r2, #2
	adds r1, r0, r4
	ldr r0, [r1, #4]
	str r0, [r1]
	ldr r0, [r1, #8]
	str r0, [r1, #4]
	ldr r0, [r1, #0xc]
	str r0, [r1, #8]
	ldr r0, [r1, #0x10]
	str r0, [r1, #0xc]
	ldr r0, [r1, #0x14]
	str r0, [r1, #0x10]
	ldr r0, [r1, #0x18]
	str r0, [r1, #0x14]
	ldr r0, [r1, #0x1c]
	str r0, [r1, #0x18]
	ldr r0, _080940B0 @ =0x000002FF
	cmp r2, r0
	bgt _080940B4
	movs r7, #0x80
	lsls r7, r7, #3
	adds r0, r1, r7
	ldr r0, [r0]
	b _080940B6
	.align 2, 0
_080940B0: .4byte 0x000002FF
_080940B4:
	ldr r0, [r3, #0x58]
_080940B6:
	str r0, [r1, #0x1c]
	movs r0, #0x80
	lsls r0, r0, #1
	adds r2, r2, r0
	movs r0, #0xc0
	lsls r0, r0, #2
	cmp r2, r0
	ble _08094080
	adds r1, r5, #0
_080940C8:
	ldr r0, [r3, #0x54]
	lsls r0, r0, #3
	cmp r1, r0
	blt _08094076
	adds r1, r3, #0
	adds r1, #0x64
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xf
	ble _080940E8
	adds r0, r3, #0
	bl Proc_Break
_080940E8:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80940F0
sub_80940F0: @ 0x080940F0
	push {lr}
	bl sub_8073324
	ldr r0, _08094104 @ =0x0868C988
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_08094104: .4byte 0x0868C988

	thumb_func_start sub_8094108
sub_8094108: @ 0x08094108
	adds r0, #0x34
	movs r1, #1
	strb r1, [r0]
	bx lr

	thumb_func_start sub_8094110
sub_8094110: @ 0x08094110
	push {lr}
	movs r1, #0
	str r1, [r0, #0x2c]
	ldr r1, _08094128 @ =gPlaySt
	ldrb r1, [r1, #0xe]
	adds r2, r0, #0
	adds r2, #0x35
	strb r1, [r2]
	bl sub_8094108
	pop {r0}
	bx r0
	.align 2, 0
_08094128: .4byte gPlaySt

	thumb_func_start sub_809412C
sub_809412C: @ 0x0809412C
	push {r4, r5, r6, lr}
	adds r5, r0, #0
	ldr r4, [r5, #0x2c]
	bl IsEventRunning
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _08094204
	adds r0, r5, #0
	adds r0, #0x34
	ldrb r1, [r0]
	adds r6, r0, #0
	cmp r1, #0
	bne _08094158
	movs r0, #1
	rsbs r0, r0, #0
	movs r1, #9
	bl DebugInitObj
	adds r0, r5, #0
	bl sub_8094108
_08094158:
	movs r0, #0x70
	movs r1, #0x64
	adds r2, r4, #0
	movs r3, #4
	bl DebugPutObjNumber
	ldr r1, _0809417C @ =gKeySt
	ldr r2, [r1]
	movs r0, #4
	ldrh r3, [r2, #8]
	ands r0, r3
	cmp r0, #0
	beq _08094180
	adds r0, r5, #0
	bl Proc_Break
	b _08094204
	.align 2, 0
_0809417C: .4byte gKeySt
_08094180:
	ldrh r2, [r2, #6]
	movs r0, #0x40
	ands r0, r2
	cmp r0, #0
	beq _0809418C
	adds r4, #1
_0809418C:
	movs r0, #0x80
	ands r0, r2
	cmp r0, #0
	beq _08094196
	subs r4, #1
_08094196:
	movs r0, #0x10
	ands r0, r2
	cmp r0, #0
	beq _080941A0
	adds r4, #0xa
_080941A0:
	movs r0, #0x20
	ands r0, r2
	cmp r0, #0
	beq _080941AA
	subs r4, #0xa
_080941AA:
	movs r0, #0x80
	lsls r0, r0, #1
	ands r0, r2
	cmp r0, #0
	beq _080941B6
	adds r4, #0x64
_080941B6:
	movs r0, #0x80
	lsls r0, r0, #2
	ands r0, r2
	cmp r0, #0
	beq _080941C2
	subs r4, #0x64
_080941C2:
	cmp r4, #0
	bge _080941C8
	movs r4, #0
_080941C8:
	cmp r4, #0x26
	ble _080941CE
	movs r4, #0x26
_080941CE:
	ldr r0, [r5, #0x2c]
	cmp r4, r0
	beq _080941E2
	movs r0, #1
	rsbs r0, r0, #0
	movs r1, #9
	bl DebugInitObj
	str r4, [r5, #0x2c]
	b _08094204
_080941E2:
	ldr r1, [r1]
	movs r0, #1
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _08094204
	movs r0, #0
	strb r0, [r6]
	ldr r1, _0809420C @ =gPlaySt
	adds r0, r5, #0
	adds r0, #0x35
	ldrb r0, [r0]
	strb r0, [r1, #0xe]
	ldr r0, _08094210 @ =ProcScr_Unk_0868C304
	movs r1, #3
	bl SpawnProc
_08094204:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809420C: .4byte gPlaySt
_08094210: .4byte ProcScr_Unk_0868C304

	thumb_func_start sub_8094214
sub_8094214: @ 0x08094214
	push {lr}
	adds r1, r0, #0
	ldr r0, _08094224 @ =0x0868FDB4
	bl SpawnProcLocking
	pop {r0}
	bx r0
	.align 2, 0
_08094224: .4byte 0x0868FDB4

	thumb_func_start sub_8094228
sub_8094228: @ 0x08094228
	push {lr}
	movs r0, #0
	bl SetOnHBlankA
	pop {r0}
	bx r0

	thumb_func_start sub_8094234
sub_8094234: @ 0x08094234
	push {r4, r5, lr}
	ldr r0, _080943BC @ =0x0868FE0C
	bl InitBgs
	bl sub_8015344
	bl ResetText
	ldr r3, _080943C0 @ =gDispIo
	movs r0, #1
	ldrb r1, [r3, #1]
	orrs r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x11
	rsbs r1, r1, #0
	ands r0, r1
	strb r0, [r3, #1]
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r2, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r2, [r0]
	ldr r0, _080943C4 @ =0x0000FFE0
	ldrh r2, [r3, #0x3c]
	ands r0, r2
	movs r1, #1
	orrs r0, r1
	ldr r1, _080943C8 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #4
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	bl sub_8069C34
	ldr r0, _080943CC @ =sub_8069FD8
	bl SetOnHBlankA
	bl sub_806A7AC
	ldr r4, _080943D0 @ =0x0831B0A8
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r4, _080943D4 @ =gBuf
	ldr r1, _080943D8 @ =0x08320434
	movs r2, #0x80
	lsls r2, r2, #7
	adds r0, r4, #0
	bl TmApplyTsa_t
	ldr r1, _080943DC @ =gBg3Tm
	movs r2, #0x80
	lsls r2, r2, #4
	adds r0, r4, #0
	bl sub_8015260
	ldr r0, _080943E0 @ =0x08320D98
	movs r1, #0x80
	movs r2, #0x80
	bl ApplyPaletteExt
	movs r0, #4
	bl sub_80154AC
	movs r0, #5
	bl sub_80154AC
	movs r0, #6
	bl sub_80154AC
	movs r0, #7
	bl sub_80154AC
	ldr r4, _080943E4 @ =gBg0Tm
	adds r0, r4, #0
	movs r1, #0
	bl TmFill
	ldr r0, _080943E8 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080943EC @ =0x08349A78
	movs r1, #0x60
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r5, _080943F0 @ =0x0834658C
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r2, _080943F4 @ =0x06000020
	adds r1, r1, r2
	adds r0, r5, #0
	bl Decompress
	adds r0, r4, #4
	ldr r1, _080943F8 @ =0x00003001
	bl sub_8094438
	adds r0, r4, #0
	adds r0, #0xc4
	ldr r1, _080943FC @ =0x00003041
	bl sub_8094438
	movs r1, #0xc2
	lsls r1, r1, #1
	adds r0, r4, r1
	ldr r1, _08094400 @ =0x00003081
	bl sub_8094438
	movs r2, #0xa1
	lsls r2, r2, #2
	adds r0, r4, r2
	ldr r1, _08094404 @ =0x000030C1
	bl sub_8094438
	movs r1, #0xd1
	lsls r1, r1, #2
	adds r0, r4, r1
	ldr r1, _08094408 @ =0x00003101
	bl sub_8094438
	ldr r2, _0809440C @ =0x00000404
	adds r0, r4, r2
	ldr r1, _08094410 @ =0x00003141
	bl sub_8094438
	ldr r1, _08094414 @ =0x000004C4
	adds r0, r4, r1
	ldr r1, _08094418 @ =0x00003181
	bl sub_8094438
	ldr r2, _0809441C @ =0x00000584
	adds r0, r4, r2
	ldr r1, _08094420 @ =0x000031C1
	bl sub_8094438
	ldr r1, _08094424 @ =0x00000644
	adds r0, r4, r1
	ldr r1, _08094428 @ =0x00003201
	bl sub_8094438
	ldr r2, _0809442C @ =0x00000744
	adds r4, r4, r2
	ldr r1, _08094430 @ =0x00003241
	adds r0, r4, #0
	bl sub_8094438
	movs r0, #1
	bl EnableBgSync
	movs r0, #2
	bl EnableBgSync
	ldr r2, _08094434 @ =0x0000FF60
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	movs r0, #0x47
	bl m4aSongNumStart
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080943BC: .4byte 0x0868FE0C
_080943C0: .4byte gDispIo
_080943C4: .4byte 0x0000FFE0
_080943C8: .4byte 0x0000E0FF
_080943CC: .4byte sub_8069FD8
_080943D0: .4byte 0x0831B0A8
_080943D4: .4byte gBuf
_080943D8: .4byte 0x08320434
_080943DC: .4byte gBg3Tm
_080943E0: .4byte 0x08320D98
_080943E4: .4byte gBg0Tm
_080943E8: .4byte gBg1Tm
_080943EC: .4byte 0x08349A78
_080943F0: .4byte 0x0834658C
_080943F4: .4byte 0x06000020
_080943F8: .4byte 0x00003001
_080943FC: .4byte 0x00003041
_08094400: .4byte 0x00003081
_08094404: .4byte 0x000030C1
_08094408: .4byte 0x00003101
_0809440C: .4byte 0x00000404
_08094410: .4byte 0x00003141
_08094414: .4byte 0x000004C4
_08094418: .4byte 0x00003181
_0809441C: .4byte 0x00000584
_08094420: .4byte 0x000031C1
_08094424: .4byte 0x00000644
_08094428: .4byte 0x00003201
_0809442C: .4byte 0x00000744
_08094430: .4byte 0x00003241
_08094434: .4byte 0x0000FF60

	thumb_func_start sub_8094438
sub_8094438: @ 0x08094438
	push {r4, lr}
	adds r2, r0, #0
	adds r4, r1, #0
	movs r1, #0
	adds r3, r4, #0
	adds r3, #0x20
_08094444:
	adds r0, r4, r1
	strh r0, [r2]
	adds r0, r2, #0
	adds r0, #0x40
	strh r3, [r0]
	adds r2, #2
	adds r3, #1
	adds r1, #1
	cmp r1, #0x1f
	ble _08094444
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8094460
sub_8094460: @ 0x08094460
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r5, r6, #0
	adds r5, #0x64
	movs r0, #0xe4
	lsls r0, r0, #2
	ldrh r1, [r5]
	cmp r1, r0
	bne _080944AA
	ldr r4, _080944D8 @ =0x0202230C
	ldr r1, _080944DC @ =0x00003281
	adds r0, r4, #0
	bl sub_8094438
	adds r0, r4, #0
	adds r0, #0xc0
	ldr r1, _080944E0 @ =0x000032C1
	bl sub_8094438
	movs r1, #0xc0
	lsls r1, r1, #1
	adds r0, r4, r1
	ldr r1, _080944E4 @ =0x00003301
	bl sub_8094438
	movs r1, #0xe0
	lsls r1, r1, #2
	adds r0, r4, r1
	ldr r1, _080944E8 @ =0x00003341
	bl sub_8094438
	movs r0, #1
	bl EnableBgSync
	movs r0, #2
	bl EnableBgSync
_080944AA:
	ldr r0, _080944EC @ =gKeySt
	ldr r1, [r0]
	movs r0, #8
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _080944BE
	adds r0, r6, #0
	bl Proc_Break
_080944BE:
	ldrh r0, [r5]
	adds r1, r0, #1
	strh r1, [r5]
	lsls r0, r0, #0x10
	ldr r1, _080944F0 @ =0x06C70000
	cmp r0, r1
	ble _080944D2
	adds r0, r6, #0
	bl Proc_Break
_080944D2:
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080944D8: .4byte 0x0202230C
_080944DC: .4byte 0x00003281
_080944E0: .4byte 0x000032C1
_080944E4: .4byte 0x00003301
_080944E8: .4byte 0x00003341
_080944EC: .4byte gKeySt
_080944F0: .4byte 0x06C70000

	thumb_func_start sub_80944F4
sub_80944F4: @ 0x080944F4
	adds r1, r0, #0
	adds r1, #0x64
	movs r2, #0
	strh r2, [r1]
	adds r0, #0x66
	strh r2, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_8094504
sub_8094504: @ 0x08094504
	push {lr}
	adds r3, r0, #0
	adds r2, r3, #0
	adds r2, #0x64
	ldrh r0, [r2]
	adds r1, r0, #1
	strh r1, [r2]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #2
	ble _08094528
	movs r0, #0
	strh r0, [r2]
	adds r1, r3, #0
	adds r1, #0x66
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
_08094528:
	adds r0, r3, #0
	adds r0, #0x66
	ldrh r2, [r0]
	subs r2, #0x90
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	pop {r0}
	bx r0

	thumb_func_start sub_8094540
sub_8094540: @ 0x08094540
	push {r4, r5, r6, r7, lr}
	adds r7, r0, #0
	ldr r4, _080945EC @ =gDispIo
	movs r0, #8
	rsbs r0, r0, #0
	ldrb r1, [r4]
	ands r0, r1
	strb r0, [r4]
	movs r0, #0
	bl InitBgs
	bl sub_804BE98
	bl sub_8057EF4
	adds r0, r7, #0
	adds r0, #0x2e
	movs r5, #0
	strb r5, [r0]
	ldr r1, _080945F0 @ =0x0869056C
	subs r0, #1
	ldrb r0, [r0]
	lsls r0, r0, #2
	adds r0, r0, r1
	ldrb r0, [r0]
	adds r1, r7, #0
	adds r1, #0x30
	strb r0, [r1]
	movs r6, #0
	strh r5, [r7, #0x2a]
	str r5, [r7, #0x34]
	str r5, [r7, #0x38]
	ldrb r1, [r1]
	adds r0, r7, #0
	bl sub_8094C80
	str r0, [r7, #0x34]
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r4, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r4, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	bl GetGameTime
	str r0, [r7, #0x40]
	str r5, [r7, #0x3c]
	adds r1, r7, #0
	adds r1, #0x2c
	movs r0, #1
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x32
	strb r6, [r0]
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080945EC: .4byte gDispIo
_080945F0: .4byte 0x0869056C

	thumb_func_start sub_80945F4
sub_80945F4: @ 0x080945F4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r4, r0, #0
	bl GetGameTime
	ldr r1, [r4, #0x40]
	subs r0, r0, r1
	str r0, [r4, #0x3c]
	adds r5, r4, #0
	adds r5, #0x2c
	ldrb r0, [r5]
	cmp r0, #2
	beq _08094644
	cmp r0, #2
	bgt _0809461A
	cmp r0, #1
	beq _08094620
	b _080946C4
_0809461A:
	cmp r0, #3
	beq _080946B2
	b _080946C4
_08094620:
	ldr r0, _08094640 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0xb
	ldrh r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _080946C4
	movs r0, #0
	bl SetNextGameAction
	adds r0, r4, #0
	movs r1, #4
	bl Proc_Goto
	b _080946C4
	.align 2, 0
_08094640: .4byte gKeySt
_08094644:
	adds r3, r4, #0
	adds r3, #0x30
	ldrb r5, [r3]
	ldr r0, _0809469C @ =0x0869056C
	mov r8, r0
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r2, [r1]
	movs r6, #0x2d
	adds r6, r6, r4
	ldrb r7, [r6]
	lsls r0, r7, #2
	adds r0, r2, r0
	add r0, r8
	ldrb r0, [r0]
	adds r0, #4
	cmp r5, r0
	blt _080946A4
	adds r0, r2, #1
	strb r0, [r1]
	ldrb r2, [r1]
	ldrb r1, [r6]
	lsls r0, r1, #2
	adds r0, r2, r0
	add r0, r8
	ldrb r1, [r0]
	adds r0, r1, #0
	cmp r0, #0xff
	beq _08094682
	cmp r2, #3
	bls _080946A0
_08094682:
	movs r0, #1
	bl SetNextGameAction
	adds r0, r4, #0
	movs r1, #5
	bl Proc_Goto
	movs r0, #1
	rsbs r0, r0, #0
	bl FadeBgmOut
	b _080946C4
	.align 2, 0
_0809469C: .4byte 0x0869056C
_080946A0:
	strb r1, [r3]
	b _080946A8
_080946A4:
	adds r0, r5, #1
	strb r0, [r3]
_080946A8:
	adds r0, r4, #0
	movs r1, #2
	bl Proc_Goto
	b _080946C4
_080946B2:
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r1, [r0]
	adds r0, r4, #0
	bl sub_8095AB8
	str r0, [r4, #0x38]
	movs r0, #1
	strb r0, [r5]
_080946C4:
	movs r0, #0
	strh r0, [r4, #0x2a]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80946D4
sub_80946D4: @ 0x080946D4
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x38]
	cmp r0, #0
	beq _080946E4
	movs r1, #4
	bl Proc_Goto
_080946E4:
	ldr r2, _08094720 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	adds r0, r4, #0
	adds r0, #0x30
	ldrb r1, [r0]
	adds r0, r4, #0
	bl sub_8094C80
	str r0, [r4, #0x34]
	adds r1, r4, #0
	adds r1, #0x2c
	movs r0, #1
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08094720: .4byte gDispIo

	thumb_func_start sub_8094724
sub_8094724: @ 0x08094724
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _08094794 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0xb
	ldrh r1, [r1, #4]
	ands r0, r1
	cmp r0, #0
	beq _08094752
	adds r4, r5, #0
	adds r4, #0x32
	ldrb r0, [r4]
	cmp r0, #0
	bne _08094752
	movs r0, #0
	bl SetNextGameAction
	movs r0, #1
	strb r0, [r4]
	adds r0, r5, #0
	movs r1, #4
	bl Proc_Goto
_08094752:
	ldrh r0, [r5, #0x2a]
	cmp r0, #0
	bne _0809475C
	bl sub_8057F24
_0809475C:
	ldrh r0, [r5, #0x2a]
	adds r0, #1
	adds r1, r0, #0
	strh r0, [r5, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x11
	cmp r0, #0xd
	bls _0809479C
	ldr r2, _08094798 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	adds r0, r5, #0
	bl Proc_Break
	b _080947A4
	.align 2, 0
_08094794: .4byte gKeySt
_08094798: .4byte gDispIo
_0809479C:
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	bl sub_809485C
_080947A4:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80947AC
sub_80947AC: @ 0x080947AC
	push {lr}
	movs r0, #1
	bl FadeBgmOut
	pop {r0}
	bx r0

	thumb_func_start sub_80947B8
sub_80947B8: @ 0x080947B8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x34]
	cmp r0, #0
	beq _080947C8
	movs r1, #4
	bl Proc_Goto
_080947C8:
	ldr r0, [r4, #0x38]
	cmp r0, #0
	beq _080947D4
	movs r1, #4
	bl Proc_Goto
_080947D4:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80947DC
sub_80947DC: @ 0x080947DC
	push {r4, lr}
	adds r4, r0, #0
	bl sub_804BEB8
	adds r0, r4, #0
	bl CleanupGame
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_80947F0
sub_80947F0: @ 0x080947F0
	push {r4, lr}
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _08094808 @ =0x0868FE34
	bl SpawnProcLocking
	adds r0, #0x2d
	strb r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08094808: .4byte 0x0868FE34

	thumb_func_start sub_809480C
sub_809480C: @ 0x0809480C
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r3, _08094854 @ =gPal
	ldr r2, _08094858 @ =0x02000000
	movs r1, #0x80
	lsls r1, r1, #2
_08094818:
	ldrh r0, [r3]
	strh r0, [r2]
	adds r3, #2
	adds r2, #2
	subs r1, #1
	cmp r1, #0
	bne _08094818
	ldr r4, _08094858 @ =0x02000000
	ldrh r5, [r5, #0x2a]
	lsrs r3, r5, #1
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	bl sub_805B5C8
	ldr r2, _08094854 @ =gPal
	movs r1, #0x80
	lsls r1, r1, #2
_0809483C:
	ldrh r0, [r4]
	strh r0, [r2]
	adds r4, #2
	adds r2, #2
	subs r1, #1
	cmp r1, #0
	bne _0809483C
	bl EnablePalSync
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08094854: .4byte gPal
_08094858: .4byte 0x02000000

	thumb_func_start sub_809485C
sub_809485C: @ 0x0809485C
	push {r4, lr}
	adds r4, r0, #0
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _08094874 @ =0x0868FEDC
	movs r1, #4
	bl SpawnProc
	strh r4, [r0, #0x2a]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08094874: .4byte 0x0868FEDC

	thumb_func_start sub_8094878
sub_8094878: @ 0x08094878
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	str r2, [sp, #8]
	str r3, [sp, #0xc]
	ldr r2, [sp, #0x30]
	ldr r3, [sp, #0x34]
	ldr r4, [sp, #0x38]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp, #4]
	lsls r1, r1, #0x18
	lsrs r7, r1, #0x18
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	mov sl, r2
	lsls r3, r3, #0x10
	lsrs r3, r3, #0x10
	mov r8, r3
	lsls r4, r4, #0x18
	lsrs r4, r4, #0x18
	movs r5, #1
	ldr r2, _080948D4 @ =gPal
	movs r0, #0x80
	lsls r0, r0, #1
	ldr r1, _080948D8 @ =0x0000021E
	adds r6, r2, r1
	adds r0, r4, r0
	lsls r1, r7, #5
	lsls r0, r0, #1
	adds r0, r0, r2
	adds r3, r0, #2
	ldr r0, _080948DC @ =0x00000222
	adds r1, r1, r0
	adds r1, r1, r2
_080948C4:
	adds r0, r5, r4
	cmp r0, #0xf
	ble _080948E0
	ldrh r0, [r6]
	strh r0, [r1]
	adds r2, r7, #1
	mov sb, r2
	b _080948E8
	.align 2, 0
_080948D4: .4byte gPal
_080948D8: .4byte 0x0000021E
_080948DC: .4byte 0x00000222
_080948E0:
	ldrh r0, [r3]
	strh r0, [r1]
	adds r0, r7, #1
	mov sb, r0
_080948E8:
	adds r1, #2
	adds r3, #2
	adds r5, #1
	cmp r5, #0xf
	ble _080948C4
	bl EnablePalSync
	mov r1, sl
	cmp r1, #7
	bhi _08094900
	movs r2, #8
	mov sl, r2
_08094900:
	mov r3, r8
	cmp r3, #7
	bhi _0809490A
	movs r0, #8
	mov r8, r0
_0809490A:
	ldr r4, _080949A8 @ =gSinLut
	ldr r1, _080949AC @ =gSinLut+0x80
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, sl
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r3, #0
	ldrsh r0, [r4, r3]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r1, sl
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	ldr r2, _080949AC @ =gSinLut+0x80
	movs r3, #0
	ldrsh r0, [r2, r3]
	lsls r0, r0, #4
	mov r1, r8
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	adds r0, r7, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	ldr r0, _080949B0 @ =0x000001FF
	ldr r1, [sp, #8]
	ands r1, r0
	str r1, [sp, #8]
	lsls r1, r7, #9
	ldr r2, [sp, #8]
	adds r1, r2, r1
	ldr r3, [sp, #0xc]
	ands r3, r0
	str r3, [sp, #0xc]
	ldr r2, _080949B4 @ =0x08690288
	ldr r3, [sp, #4]
	adds r0, r3, r7
	lsls r0, r0, #2
	adds r0, r0, r2
	ldr r3, [r0]
	movs r0, #0xf
	mov r2, sb
	ands r2, r0
	lsls r0, r2, #0xc
	str r0, [sp]
	movs r0, #4
	ldr r2, [sp, #0xc]
	bl PutSpriteExt
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080949A8: .4byte gSinLut
_080949AC: .4byte gSinLut+0x80
_080949B0: .4byte 0x000001FF
_080949B4: .4byte 0x08690288

	thumb_func_start sub_80949B8
sub_80949B8: @ 0x080949B8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r5, r0, #0
	ldr r2, _08094A04 @ =gDispIo
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #0
	strh r0, [r5, #0x2a]
	adds r2, r5, #0
	adds r2, #0x30
	ldrb r0, [r2]
	cmp r0, #0
	bne _08094A0C
	adds r1, r5, #0
	adds r1, #0x2f
	movs r0, #0
	strb r0, [r1]
	mov sb, r2
	ldr r2, _08094A08 @ =0x08690288
	mov ip, r2
	movs r0, #0x2e
	adds r0, r0, r5
	mov r8, r0
	movs r2, #0x34
	adds r2, r2, r5
	mov sl, r2
	b _08094A42
	.align 2, 0
_08094A04: .4byte gDispIo
_08094A08: .4byte 0x08690288
_08094A0C:
	movs r4, #0
	movs r3, #0
	mov sb, r2
	adds r1, r5, #0
	adds r1, #0x2f
	ldr r0, _08094A78 @ =0x08690288
	mov ip, r0
	movs r2, #0x2e
	adds r2, r2, r5
	mov r8, r2
	movs r0, #0x34
	adds r0, r0, r5
	mov sl, r0
	mov r6, sb
	adds r7, r1, #0
	mov r2, ip
_08094A2C:
	adds r2, #4
	adds r4, #1
	ldr r0, [r2]
	cmp r0, #0
	bne _08094A2C
	adds r3, #1
	ldrb r0, [r6]
	cmp r3, r0
	bne _08094A2C
	adds r0, r4, #1
	strb r0, [r7]
_08094A42:
	movs r0, #0
	mov r2, r8
	strb r0, [r2]
	ldrb r1, [r1]
	lsls r0, r1, #2
	mov r2, ip
	adds r1, r0, r2
	ldr r0, [r1]
	cmp r0, #0
	beq _08094A66
	mov r2, r8
_08094A58:
	ldrb r0, [r2]
	adds r0, #1
	strb r0, [r2]
	adds r1, #4
	ldr r0, [r1]
	cmp r0, #0
	bne _08094A58
_08094A66:
	mov r0, sb
	ldrb r0, [r0]
	cmp r0, #0x13
	bls _08094A84
	ldr r0, _08094A7C @ =0x08357140
	ldr r1, _08094A80 @ =0x06010000
	bl Decompress
	b _08094A8C
	.align 2, 0
_08094A78: .4byte 0x08690288
_08094A7C: .4byte 0x08357140
_08094A80: .4byte 0x06010000
_08094A84:
	ldr r0, _08094B0C @ =0x08354780
	ldr r1, _08094B10 @ =0x06010000
	bl Decompress
_08094A8C:
	ldr r0, _08094B14 @ =0x08354760
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r4, _08094B18 @ =0x0835A368
	movs r1, #0xf0
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	movs r1, #0xf8
	lsls r1, r1, #2
	adds r0, r4, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08094B1C @ =0x083599AC
	ldr r1, _08094B20 @ =0x06016000
	bl Decompress
	mov r1, sl
	movs r2, #0
	adds r0, r1, #0
	adds r0, #0x24
_08094AC2:
	str r2, [r0]
	subs r0, #4
	cmp r0, r1
	bge _08094AC2
	mov r2, r8
	ldrb r2, [r2]
	lsls r1, r2, #3
	mov r0, r8
	ldrb r0, [r0]
	subs r1, r1, r0
	lsls r1, r1, #2
	movs r0, #0xf0
	subs r0, r0, r1
	asrs r0, r0, #1
	subs r0, #0x10
	ldr r2, _08094B24 @ =0x000001FF
	adds r1, r2, #0
	ands r0, r1
	strh r0, [r5, #0x2c]
	adds r0, r5, #0
	movs r1, #0
	bl sub_8094EE8
	str r0, [r5, #0x34]
	mov r0, sb
	ldrb r1, [r0]
	adds r0, r5, #0
	bl sub_80951DC
	str r0, [r5, #0x5c]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08094B0C: .4byte 0x08354780
_08094B10: .4byte 0x06010000
_08094B14: .4byte 0x08354760
_08094B18: .4byte 0x0835A368
_08094B1C: .4byte 0x083599AC
_08094B20: .4byte 0x06016000
_08094B24: .4byte 0x000001FF

	thumb_func_start sub_8094B28
sub_8094B28: @ 0x08094B28
	push {r4, r5, lr}
	adds r4, r0, #0
	ldr r0, _08094B7C @ =gDispIo
	mov ip, r0
	mov r3, ip
	adds r3, #0x3c
	movs r2, #0x3f
	ldrb r0, [r3]
	ands r2, r0
	movs r0, #0x80
	orrs r2, r0
	mov r0, ip
	adds r0, #0x44
	movs r5, #0
	strb r5, [r0]
	adds r0, #1
	strb r5, [r0]
	ldrh r0, [r4, #0x2a]
	lsrs r1, r0, #1
	movs r0, #0x10
	subs r0, r0, r1
	mov r1, ip
	adds r1, #0x46
	strb r0, [r1]
	movs r0, #0x20
	orrs r2, r0
	strb r2, [r3]
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x20
	bne _08094B74
	strh r5, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
_08094B74:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08094B7C: .4byte gDispIo

	thumb_func_start sub_8094B80
sub_8094B80: @ 0x08094B80
	push {r4, r5, r6, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x5f
	bls _08094B94
	adds r0, r4, #0
	bl Proc_Break
	movs r0, #0
	b _08094BD8
_08094B94:
	cmp r0, #0xf
	bls _08094BD4
	ldrh r1, [r4, #0x2a]
	adds r6, r1, #0
	subs r6, #0x10
	movs r0, #3
	ands r0, r6
	cmp r0, #0
	bne _08094BD4
	adds r0, r6, #0
	cmp r6, #0
	bge _08094BB0
	adds r0, r1, #0
	subs r0, #0xd
_08094BB0:
	asrs r0, r0, #2
	adds r5, r0, #1
	adds r0, r4, #0
	adds r0, #0x2e
	ldrb r0, [r0]
	cmp r5, r0
	bge _08094BD4
	lsls r1, r5, #0x18
	lsrs r1, r1, #0x18
	adds r0, r4, #0
	bl sub_8094EE8
	adds r2, r0, #0
	lsls r1, r5, #2
	adds r0, r4, #0
	adds r0, #0x34
	adds r0, r0, r1
	str r2, [r0]
_08094BD4:
	ldrh r0, [r4, #0x2a]
	adds r0, #1
_08094BD8:
	strh r0, [r4, #0x2a]
	pop {r4, r5, r6}
	pop {r0}
	bx r0

	thumb_func_start sub_8094BE0
sub_8094BE0: @ 0x08094BE0
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x14
	bne _08094BF2
	ldr r0, [r4, #0x5c]
	movs r1, #4
	bl Proc_Goto
_08094BF2:
	ldrh r0, [r4, #0x2a]
	cmp r0, #0x4f
	bls _08094C0E
	adds r0, r4, #0
	bl Proc_Break
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r1, r4, #0
	adds r1, #0x30
	ldrb r0, [r1]
	adds r0, #1
	strb r0, [r1]
	b _08094C48
_08094C0E:
	ldrh r5, [r4, #0x2a]
	adds r0, r5, #0
	movs r1, #6
	bl __umodsi3
	lsls r0, r0, #0x10
	cmp r0, #0
	bne _08094C42
	adds r0, r5, #0
	movs r1, #6
	bl __udivsi3
	adds r1, r4, #0
	adds r1, #0x2e
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	ldrb r1, [r1]
	cmp r0, r1
	bhs _08094C42
	lsls r0, r0, #2
	adds r1, r4, #0
	adds r1, #0x34
	adds r1, r1, r0
	ldr r0, [r1]
	bl Proc_Break
_08094C42:
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	strh r0, [r4, #0x2a]
_08094C48:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8094C50
sub_8094C50: @ 0x08094C50
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	adds r4, r6, #0
	adds r4, #0x34
	movs r5, #7
_08094C5A:
	ldr r0, [r4]
	cmp r0, #0
	beq _08094C64
	bl Proc_End
_08094C64:
	adds r4, #4
	subs r5, #1
	cmp r5, #0
	bge _08094C5A
	ldr r0, [r6, #0x60]
	movs r1, #0
	str r1, [r0, #0x34]
	adds r0, #0x2c
	movs r1, #3
	strb r1, [r0]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8094C80
sub_8094C80: @ 0x08094C80
	push {r4, r5, lr}
	adds r5, r0, #0
	lsls r4, r1, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _08094CB4 @ =0x0868FEFC
	adds r1, r5, #0
	bl SpawnProc
	adds r2, r0, #0
	str r5, [r2, #0x60]
	adds r0, #0x30
	strb r4, [r0]
	movs r3, #0
	movs r1, #9
	adds r0, #0x28
_08094C9E:
	str r3, [r0]
	subs r0, #4
	subs r1, #1
	cmp r1, #0
	bge _08094C9E
	movs r0, #0
	str r0, [r2, #0x5c]
	adds r0, r2, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08094CB4: .4byte 0x0868FEFC

	thumb_func_start sub_8094CB8
sub_8094CB8: @ 0x08094CB8
	push {r4, lr}
	movs r1, #0
	strh r1, [r0, #0x2a]
	ldr r2, [r0, #0x14]
	adds r1, r2, #0
	adds r1, #0x2f
	ldrb r1, [r1]
	strh r1, [r0, #0x2c]
	adds r3, r0, #0
	adds r3, #0x2e
	ldrb r4, [r3]
	lsls r1, r4, #3
	subs r1, r1, r4
	lsls r1, r1, #2
	ldrh r2, [r2, #0x2c]
	adds r1, r2, r1
	ldr r3, _08094CE8 @ =0x000001FF
	adds r2, r3, #0
	ands r1, r2
	strh r1, [r0, #0x30]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08094CE8: .4byte 0x000001FF

	thumb_func_start sub_8094CEC
sub_8094CEC: @ 0x08094CEC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x10
	adds r7, r0, #0
	movs r0, #0x2e
	adds r0, r0, r7
	mov sb, r0
	ldrb r1, [r0]
	mov sl, r1
	cmp r1, #0
	bne _08094DC0
	ldr r3, _08094DB8 @ =gSinLut
	movs r2, #0xa0
	lsls r2, r2, #1
	adds r0, r3, r2
	movs r5, #0
	ldrsh r6, [r0, r5]
	asrs r6, r6, #6
	adds r0, r3, #0
	adds r0, #0xc0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r4, r0, #1
	adds r4, r4, r0
	asrs r4, r4, #9
	ldrh r0, [r7, #0x2a]
	movs r2, #0xc0
	subs r2, r2, r0
	movs r1, #0xff
	ands r2, r1
	adds r1, r2, #0
	adds r1, #0x40
	lsls r1, r1, #1
	adds r1, r1, r3
	movs r5, #0
	ldrsh r1, [r1, r5]
	asrs r5, r1, #6
	lsls r2, r2, #1
	adds r2, r2, r3
	movs r1, #0
	ldrsh r2, [r2, r1]
	lsls r1, r2, #1
	adds r1, r1, r2
	asrs r3, r1, #9
	lsls r0, r0, #8
	movs r1, #0x60
	str r3, [sp, #0xc]
	bl __divsi3
	movs r2, #0x80
	lsls r2, r2, #2
	adds r1, r2, #0
	subs r1, r1, r0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	ldrh r0, [r7, #0x2c]
	mov r8, r0
	mov r2, sb
	ldrb r2, [r2]
	mov sb, r2
	ldrh r0, [r7, #0x30]
	adds r5, r0, r5
	subs r5, r5, r6
	ldr r0, _08094DBC @ =0x000001FF
	ands r5, r0
	subs r4, #0x18
	ldr r3, [sp, #0xc]
	subs r4, r3, r4
	ands r4, r0
	str r1, [sp]
	str r1, [sp, #4]
	ldrh r0, [r7, #0x2a]
	movs r1, #0xc
	bl __divsi3
	movs r1, #8
	subs r1, r1, r0
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	str r1, [sp, #8]
	mov r0, r8
	mov r1, sb
	adds r2, r5, #0
	adds r3, r4, #0
	bl sub_8094878
	ldrh r0, [r7, #0x2a]
	adds r0, #4
	strh r0, [r7, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x60
	bne _08094E10
	mov r1, sl
	strh r1, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_Break
	b _08094E10
	.align 2, 0
_08094DB8: .4byte gSinLut
_08094DBC: .4byte 0x000001FF
_08094DC0:
	ldrh r1, [r7, #0x2a]
	adds r0, r1, #0
	adds r2, r1, #0
	asrs r6, r0, #4
	movs r0, #0x10
	subs r5, r0, r6
	adds r3, r5, #0
	ldrh r4, [r7, #0x2c]
	mov r2, sb
	ldrb r5, [r2]
	ldrh r0, [r7, #0x30]
	subs r2, r0, r3
	movs r0, #0x18
	subs r3, r0, r3
	str r1, [sp]
	movs r1, #0x80
	lsls r1, r1, #1
	mov r8, r1
	str r1, [sp, #4]
	movs r0, #0x10
	subs r0, r0, r6
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #8]
	adds r0, r4, #0
	adds r1, r5, #0
	bl sub_8094878
	ldrh r0, [r7, #0x2a]
	adds r0, #0x10
	strh r0, [r7, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, r8
	bne _08094E10
	movs r0, #0
	strh r0, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_Break
_08094E10:
	add sp, #0x10
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8094E20
sub_8094E20: @ 0x08094E20
	push {r4, r5, lr}
	sub sp, #0xc
	adds r4, r0, #0
	ldrh r0, [r4, #0x2c]
	adds r1, r4, #0
	adds r1, #0x2e
	ldrb r1, [r1]
	ldrh r2, [r4, #0x30]
	movs r3, #0x80
	lsls r3, r3, #1
	str r3, [sp]
	str r3, [sp, #4]
	movs r5, #0
	str r5, [sp, #8]
	movs r3, #0x18
	bl sub_8094878
	strh r5, [r4, #0x2a]
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8094E4C
sub_8094E4C: @ 0x08094E4C
	push {r4, r5, r6, r7, lr}
	sub sp, #0xc
	adds r4, r0, #0
	ldrh r2, [r4, #0x2a]
	movs r0, #0x80
	lsls r0, r0, #1
	adds r6, r2, r0
	subs r0, r0, r2
	mov ip, r0
	ldrh r0, [r4, #0x30]
	cmp r0, #0xff
	bls _08094E78
	adds r1, r2, #0
	muls r1, r2, r1
	asrs r1, r1, #7
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	subs r0, r0, r1
	lsls r0, r0, #3
	rsbs r0, r0, #0
	b _08094E86
_08094E78:
	movs r1, #0xff
	ands r1, r0
	subs r1, #0x58
	adds r0, r2, #0
	muls r0, r2, r0
	asrs r0, r0, #7
	muls r0, r1, r0
_08094E86:
	cmp r0, #0
	bge _08094E8C
	adds r0, #0xff
_08094E8C:
	asrs r0, r0, #8
	ldrh r3, [r4, #0x2c]
	adds r5, r4, #0
	adds r5, #0x2e
	ldrb r1, [r5]
	ldrh r7, [r4, #0x30]
	adds r2, r7, r0
	lsls r0, r6, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp]
	mov r6, ip
	lsls r0, r6, #0x10
	lsrs r0, r0, #0x10
	str r0, [sp, #4]
	ldrh r0, [r4, #0x2a]
	asrs r0, r0, #4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	str r0, [sp, #8]
	adds r0, r3, #0
	movs r3, #0x18
	bl sub_8094878
	movs r0, #0x80
	lsls r0, r0, #1
	ldrh r7, [r4, #0x2a]
	cmp r7, r0
	bne _08094ED8
	ldr r0, [r4, #0x14]
	ldrb r5, [r5]
	lsls r1, r5, #2
	adds r0, #0x34
	adds r0, r0, r1
	movs r1, #0
	str r1, [r0]
	adds r0, r4, #0
	bl Proc_Break
_08094ED8:
	ldrh r0, [r4, #0x2a]
	adds r0, #8
	strh r0, [r4, #0x2a]
	add sp, #0xc
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8094EE8
sub_8094EE8: @ 0x08094EE8
	push {r4, lr}
	adds r2, r0, #0
	lsls r4, r1, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _08094F04 @ =0x0868FF4C
	adds r1, r2, #0
	bl SpawnProc
	adds r1, r0, #0
	adds r1, #0x2e
	strb r4, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_08094F04: .4byte 0x0868FF4C

	thumb_func_start sub_8094F08
sub_8094F08: @ 0x08094F08
	push {lr}
	bl EnablePalSync
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8094F14
sub_8094F14: @ 0x08094F14
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	adds r3, r0, #0
	movs r0, #0
	strh r0, [r3, #0x2a]
	ldr r0, _08094F88 @ =gPal
	movs r1, #0
	movs r4, #0xf
	ldr r2, _08094F8C @ =0x000003FE
	adds r0, r0, r2
_08094F2A:
	strh r1, [r0]
	subs r0, #2
	subs r4, #1
	cmp r4, #0
	bge _08094F2A
	adds r0, r3, #0
	adds r0, #0x2e
	movs r1, #0
	strb r1, [r0]
	adds r2, r3, #0
	adds r2, #0x2d
	strb r1, [r2]
	movs r4, #0
	adds r7, r3, #0
	adds r7, #0x2c
	ldr r1, _08094F90 @ =0x08690A99
	mov r8, r1
	adds r6, r0, #0
	adds r5, r2, #0
_08094F50:
	ldrb r0, [r7]
	add r0, r8
	ldrb r0, [r0]
	bl GetJobInfo
	adds r0, #0x28
	adds r0, r0, r4
	ldrb r0, [r0]
	cmp r0, #0
	beq _08094F74
	movs r0, #1
	lsls r0, r4
	ldrb r2, [r6]
	orrs r0, r2
	strb r0, [r6]
	ldrb r0, [r5]
	adds r0, #1
	strb r0, [r5]
_08094F74:
	adds r4, #1
	cmp r4, #7
	ble _08094F50
	bl EnablePalSync
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08094F88: .4byte gPal
_08094F8C: .4byte 0x000003FE
_08094F90: .4byte 0x08690A99

	thumb_func_start sub_8094F94
sub_8094F94: @ 0x08094F94
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	sub sp, #4
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	mov r8, r0
	lsls r1, r1, #0x18
	movs r7, #0xe0
	lsls r7, r7, #8
	cmp r1, #0
	beq _08094FB2
	movs r7, #0xf0
	lsls r7, r7, #8
_08094FB2:
	ldr r4, _08094FF4 @ =0x086900F8
	str r7, [sp]
	movs r0, #4
	movs r1, #0x74
	movs r2, #0x48
	adds r3, r4, #0
	bl PutSpriteExt
	movs r5, #0
	cmp r5, r8
	bge _0809501E
	mov sb, r4
	movs r6, #0x74
	movs r4, #0x74
_08094FCE:
	mov r0, r8
	subs r0, #1
	cmp r5, r0
	bge _08094FF8
	str r7, [sp]
	movs r0, #4
	adds r1, r4, #0
	movs r2, #0x48
	mov r3, sb
	bl PutSpriteExt
	str r7, [sp]
	movs r0, #4
	adds r1, r6, #0
	movs r2, #0x48
	mov r3, sb
	bl PutSpriteExt
	b _08095014
	.align 2, 0
_08094FF4: .4byte 0x086900F8
_08094FF8:
	str r7, [sp]
	movs r0, #4
	adds r1, r4, #0
	movs r2, #0x48
	ldr r3, _0809502C @ =0x086900F0
	bl PutSpriteExt
	str r7, [sp]
	movs r0, #4
	adds r1, r6, #0
	movs r2, #0x48
	ldr r3, _08095030 @ =0x08690100
	bl PutSpriteExt
_08095014:
	adds r6, #8
	subs r4, #8
	adds r5, #1
	cmp r5, r8
	blt _08094FCE
_0809501E:
	add sp, #4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809502C: .4byte 0x086900F0
_08095030: .4byte 0x08690100

	thumb_func_start sub_8095034
sub_8095034: @ 0x08095034
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
	lsls r1, r1, #0x18
	lsrs r1, r1, #0x18
	mov r8, r1
	lsls r2, r2, #0x18
	lsrs r2, r2, #0x18
	mov sb, r2
	movs r0, #0xe0
	lsls r0, r0, #8
	mov sl, r0
	cmp r5, #0
	beq _08095060
	movs r1, #0xf0
	lsls r1, r1, #8
	mov sl, r1
_08095060:
	movs r4, #0
	ldr r6, _080950F0 @ =gPal
	movs r7, #0xf8
	lsls r7, r7, #2
	adds r3, r6, r7
	lsls r2, r5, #0x10
	movs r0, #0xf0
	lsls r0, r0, #1
	mov ip, r0
_08095072:
	adds r0, r5, r4
	movs r1, #0xf
	cmp r0, #0xf
	bgt _0809507C
	lsrs r1, r2, #0x10
_0809507C:
	mov r7, ip
	adds r0, r1, r7
	lsls r0, r0, #1
	adds r0, r0, r6
	ldrh r0, [r0]
	strh r0, [r3]
	adds r3, #2
	movs r0, #0x80
	lsls r0, r0, #9
	adds r2, r2, r0
	adds r4, #1
	cmp r4, #0xf
	ble _08095072
	bl EnablePalSync
	movs r4, #0
	mov r1, r8
	lsls r0, r1, #5
	subs r0, #0x88
	ldr r6, _080950F4 @ =0x086900BC
	rsbs r5, r0, #0
_080950A6:
	mov r0, sb
	asrs r0, r4
	movs r1, #1
	ands r0, r1
	cmp r0, #0
	beq _080950C8
	ldr r1, _080950F8 @ =0x000001FF
	ands r1, r5
	ldr r3, [r6]
	movs r0, #0xf0
	lsls r0, r0, #8
	str r0, [sp]
	movs r0, #4
	movs r2, #0x50
	bl PutSpriteExt
	adds r5, #0x20
_080950C8:
	adds r6, #4
	adds r4, #1
	cmp r4, #7
	ble _080950A6
	ldr r3, _080950FC @ =0x086900DC
	mov r7, sl
	str r7, [sp]
	movs r0, #4
	movs r1, #0x90
	movs r2, #0x50
	bl PutSpriteExt
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080950F0: .4byte gPal
_080950F4: .4byte 0x086900BC
_080950F8: .4byte 0x000001FF
_080950FC: .4byte 0x086900DC

	thumb_func_start sub_8095100
sub_8095100: @ 0x08095100
	push {r4, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	adds r1, r0, #0
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0xd
	bhi _08095120
	lsls r0, r1, #0x18
	lsrs r0, r0, #0x18
	movs r1, #0
	bl sub_8094F94
	b _08095132
_08095120:
	movs r0, #0xe
	movs r1, #0
	bl sub_8094F94
	movs r0, #0
	strh r0, [r4, #0x2a]
	adds r0, r4, #0
	bl Proc_Break
_08095132:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_8095138
sub_8095138: @ 0x08095138
	push {r4, r5, lr}
	adds r4, r0, #0
	ldrh r0, [r4, #0x2a]
	adds r0, #1
	adds r1, r0, #0
	strh r0, [r4, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x10
	bls _08095156
	movs r5, #0
	adds r0, r4, #0
	bl Proc_Break
	b _0809515E
_08095156:
	movs r0, #0x10
	subs r0, r0, r1
	lsls r0, r0, #0x18
	lsrs r5, r0, #0x18
_0809515E:
	movs r0, #0xe
	movs r1, #0
	bl sub_8094F94
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r1, [r0]
	adds r0, #1
	ldrb r2, [r0]
	adds r0, r5, #0
	bl sub_8095034
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_809517C
sub_809517C: @ 0x0809517C
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0xe
	movs r1, #0
	bl sub_8094F94
	adds r0, r4, #0
	adds r0, #0x2d
	ldrb r1, [r0]
	adds r0, #1
	ldrb r2, [r0]
	movs r0, #0
	bl sub_8095034
	movs r0, #0
	strh r0, [r4, #0x2a]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80951A4
sub_80951A4: @ 0x080951A4
	push {lr}
	adds r2, r0, #0
	ldrh r0, [r2, #0x2a]
	adds r0, #1
	strh r0, [r2, #0x2a]
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x11
	cmp r0, #0x10
	bls _080951BE
	adds r0, r2, #0
	bl Proc_Break
	b _080951D8
_080951BE:
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	adds r1, r2, #0
	adds r1, #0x2d
	ldrb r1, [r1]
	adds r2, #0x2e
	ldrb r2, [r2]
	bl sub_8095034
	movs r0, #0xe
	movs r1, #1
	bl sub_8094F94
_080951D8:
	pop {r0}
	bx r0

	thumb_func_start sub_80951DC
sub_80951DC: @ 0x080951DC
	push {r4, lr}
	adds r2, r0, #0
	lsls r4, r1, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _080951F8 @ =0x0868FF84
	adds r1, r2, #0
	bl SpawnProc
	adds r1, r0, #0
	adds r1, #0x2c
	strb r4, [r1]
	pop {r4}
	pop {r1}
	bx r1
	.align 2, 0
_080951F8: .4byte 0x0868FF84

	thumb_func_start sub_80951FC
sub_80951FC: @ 0x080951FC
	ldr r0, _08095224 @ =0x04000006
	ldrh r0, [r0]
	adds r0, #1
	lsls r0, r0, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x6d
	bhi _08095234
	ldr r3, _08095228 @ =0x04000008
	ldrh r2, [r3]
	ldr r1, _0809522C @ =0x0000FFFC
	adds r0, r1, #0
	ands r0, r2
	adds r0, #2
	strh r0, [r3]
	ldr r2, _08095230 @ =0x0400000C
	ldrh r0, [r2]
	ands r1, r0
	adds r1, #2
	b _0809524A
	.align 2, 0
_08095224: .4byte 0x04000006
_08095228: .4byte 0x04000008
_0809522C: .4byte 0x0000FFFC
_08095230: .4byte 0x0400000C
_08095234:
	ldr r3, _08095250 @ =0x04000008
	ldrh r2, [r3]
	ldr r1, _08095254 @ =0x0000FFFC
	adds r0, r1, #0
	ands r0, r2
	adds r0, #1
	strh r0, [r3]
	ldr r2, _08095258 @ =0x0400000C
	ldrh r0, [r2]
	ands r1, r0
	adds r1, #1
_0809524A:
	strh r1, [r2]
	bx lr
	.align 2, 0
_08095250: .4byte 0x04000008
_08095254: .4byte 0x0000FFFC
_08095258: .4byte 0x0400000C

	thumb_func_start sub_809525C
sub_809525C: @ 0x0809525C
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	ldr r0, _08095328 @ =gDispIo
	mov ip, r0
	mov r2, ip
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	mov r1, ip
	adds r1, #0x44
	movs r2, #0
	movs r3, #0x10
	mov r8, r3
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x46
	strb r2, [r0]
	ldr r0, _0809532C @ =0x0000FFE0
	mov r1, ip
	ldrh r1, [r1, #0x3c]
	ands r0, r1
	movs r1, #2
	orrs r0, r1
	ldr r1, _08095330 @ =0x0000E0FF
	ands r0, r1
	movs r3, #0xe0
	lsls r3, r3, #5
	adds r1, r3, #0
	orrs r0, r1
	mov r1, ip
	strh r0, [r1, #0x3c]
	movs r5, #0x20
	ldrb r0, [r1, #1]
	orrs r0, r5
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r3, ip
	strb r0, [r3, #1]
	mov r0, ip
	adds r0, #0x2d
	strb r2, [r0]
	adds r0, #4
	strb r2, [r0]
	mov r1, ip
	adds r1, #0x2c
	movs r0, #0xf0
	strb r0, [r1]
	adds r1, #4
	movs r0, #0xa0
	strb r0, [r1]
	mov r6, ip
	adds r6, #0x34
	movs r0, #1
	ldrb r1, [r6]
	orrs r1, r0
	movs r2, #2
	orrs r1, r2
	movs r4, #4
	orrs r1, r4
	movs r3, #8
	orrs r1, r3
	mov r2, r8
	orrs r1, r2
	mov r7, ip
	adds r7, #0x36
	ldrb r2, [r7]
	orrs r0, r2
	movs r2, #3
	rsbs r2, r2, #0
	ands r0, r2
	orrs r0, r4
	orrs r0, r3
	mov r3, r8
	orrs r0, r3
	orrs r1, r5
	strb r1, [r6]
	movs r1, #0x21
	rsbs r1, r1, #0
	ands r0, r1
	strb r0, [r7]
	mov r0, ip
	adds r0, #0x3d
	ldrb r1, [r0]
	orrs r5, r1
	strb r5, [r0]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08095328: .4byte gDispIo
_0809532C: .4byte 0x0000FFE0
_08095330: .4byte 0x0000E0FF

	thumb_func_start sub_8095334
sub_8095334: @ 0x08095334
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x38
	adds r7, r0, #0
	movs r0, #0
	str r0, [sp, #0x1c]
	add r1, sp, #4
	ldr r0, _08095358 @ =0x0835C80C
	ldm r0!, {r2, r3, r4}
	stm r1!, {r2, r3, r4}
	ldm r0!, {r2, r3, r6}
	stm r1!, {r2, r3, r6}
	movs r6, #4
	ldr r4, _0809535C @ =0x08690A99
	b _08095362
	.align 2, 0
_08095358: .4byte 0x0835C80C
_0809535C: .4byte 0x08690A99
_08095360:
	adds r6, #1
_08095362:
	movs r0, #0x31
	adds r0, r0, r7
	mov sl, r0
	cmp r6, #7
	bgt _08095384
	ldrb r1, [r0]
	adds r0, r1, r4
	ldrb r0, [r0]
	bl GetJobInfo
	adds r0, #0x28
	adds r0, r0, r6
	ldrb r0, [r0]
	cmp r0, #0
	beq _08095360
	movs r2, #1
	str r2, [sp, #0x1c]
_08095384:
	movs r0, #0
	strh r0, [r7, #0x2a]
	strh r0, [r7, #0x2c]
	strh r0, [r7, #0x2e]
	adds r1, r7, #0
	adds r1, #0x3e
	movs r0, #1
	strb r0, [r1]
	adds r1, #6
	movs r0, #0xfa
	strb r0, [r1]
	ldr r0, _080953EC @ =gBg0Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080953F0 @ =gBg1Tm
	movs r1, #0
	bl TmFill
	ldr r0, _080953F4 @ =gBg2Tm
	movs r1, #0
	bl TmFill
	mov r3, sl
	ldrb r0, [r3]
	cmp r0, #0
	bne _08095400
	strh r0, [r7, #0x2e]
	ldr r4, _080953F8 @ =0x086905F8
	mov r8, r4
	adds r5, r7, #0
	adds r5, #0x30
	ldr r4, _080953FC @ =gDispIo
	adds r6, r7, #0
	adds r6, #0x38
	str r6, [sp, #0x24]
	movs r0, #0x39
	adds r0, r0, r7
	mov sb, r0
	adds r1, r7, #0
	adds r1, #0x3a
	str r1, [sp, #0x28]
	adds r2, r7, #0
	adds r2, #0x3b
	str r2, [sp, #0x2c]
	adds r3, r7, #0
	adds r3, #0x3c
	str r3, [sp, #0x30]
	adds r6, #5
	str r6, [sp, #0x34]
	b _08095448
	.align 2, 0
_080953EC: .4byte gBg0Tm
_080953F0: .4byte gBg1Tm
_080953F4: .4byte gBg2Tm
_080953F8: .4byte 0x086905F8
_080953FC: .4byte gDispIo
_08095400:
	movs r6, #0
	movs r2, #0
	ldr r0, _080955E8 @ =0x086905F8
	mov r8, r0
	adds r5, r7, #0
	adds r5, #0x30
	ldr r4, _080955EC @ =gDispIo
	adds r1, r7, #0
	adds r1, #0x38
	str r1, [sp, #0x24]
	movs r3, #0x39
	adds r3, r3, r7
	mov sb, r3
	adds r0, r7, #0
	adds r0, #0x3a
	str r0, [sp, #0x28]
	adds r1, #3
	str r1, [sp, #0x2c]
	adds r3, r7, #0
	adds r3, #0x3c
	str r3, [sp, #0x30]
	adds r0, #3
	str r0, [sp, #0x34]
	mov r3, sl
	mov r1, r8
_08095432:
	adds r1, #4
	adds r6, #1
	ldrb r0, [r1, #1]
	cmp r0, #0
	bne _08095432
	adds r2, #1
	ldrb r0, [r3]
	cmp r2, r0
	bne _08095432
	adds r0, r6, #1
	strh r0, [r7, #0x2e]
_08095448:
	ldrh r1, [r7, #0x2e]
	lsls r0, r1, #2
	add r0, r8
	ldrb r0, [r0]
	strb r0, [r5]
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r2, [r4, #1]
	ands r0, r2
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r4, #1]
	bl ResetTextFont
	bl ResetText
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r3, [r4, #0xc]
	ands r0, r3
	movs r2, #2
	orrs r0, r2
	strb r0, [r4, #0xc]
	adds r0, r1, #0
	ldrb r6, [r4, #0x10]
	ands r0, r6
	orrs r0, r2
	strb r0, [r4, #0x10]
	ldrb r0, [r4, #0x14]
	ands r1, r0
	orrs r1, r2
	strb r1, [r4, #0x14]
	movs r0, #3
	ldrb r1, [r4, #0x18]
	orrs r0, r1
	strb r0, [r4, #0x18]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r4, _080955F0 @ =0x0831B0A8
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r5, #0xc0
	lsls r5, r5, #0x13
	adds r1, r1, r5
	adds r0, r4, #0
	bl Decompress
	ldr r0, _080955F4 @ =0x0835AB08
	movs r1, #0xa0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _080955F8 @ =gBg3Tm
	ldr r1, _080955FC @ =0x0835AB28
	movs r2, #0xa0
	lsls r2, r2, #8
	bl TmApplyTsa_t
	ldr r4, _08095600 @ =0x0835A3E8
	movs r0, #2
	bl GetBgChrOffset
	adds r1, r0, #0
	adds r1, r1, r5
	adds r0, r4, #0
	bl Decompress
	ldr r0, _08095604 @ =0x0835A5D0
	movs r1, #0x90
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _08095608 @ =gBg2Tm
	ldr r1, _0809560C @ =0x0835A5F0
	movs r2, #0x90
	lsls r2, r2, #8
	bl TmApplyTsa_t
	movs r0, #0xf
	bl EnableBgSync
	ldr r5, _08095610 @ =gBg0Tm
	adds r0, r5, #0
	movs r1, #0
	bl TmFill
	ldr r4, _08095614 @ =0x08690A99
	mov r2, sl
	ldrb r2, [r2]
	adds r0, r2, r4
	ldrb r0, [r0]
	bl GetJobInfo
	ldrb r0, [r0, #0xb]
	ldr r3, [sp, #0x24]
	strb r0, [r3]
	mov r6, sl
	ldrb r6, [r6]
	adds r0, r6, r4
	ldrb r0, [r0]
	bl GetJobInfo
	ldrb r0, [r0, #0xc]
	mov r1, sb
	strb r0, [r1]
	mov r2, sl
	ldrb r2, [r2]
	adds r0, r2, r4
	ldrb r0, [r0]
	bl GetJobInfo
	ldrb r0, [r0, #0xd]
	ldr r3, [sp, #0x28]
	strb r0, [r3]
	mov r6, sl
	ldrb r6, [r6]
	adds r0, r6, r4
	ldrb r0, [r0]
	bl GetJobInfo
	ldrb r0, [r0, #0xe]
	ldr r1, [sp, #0x2c]
	strb r0, [r1]
	mov r2, sl
	ldrb r2, [r2]
	adds r0, r2, r4
	ldrb r0, [r0]
	bl GetJobInfo
	ldrb r0, [r0, #0xf]
	ldr r3, [sp, #0x30]
	strb r0, [r3]
	mov r6, sl
	ldrb r6, [r6]
	adds r4, r6, r4
	ldrb r0, [r4]
	bl GetJobInfo
	ldrb r0, [r0, #0x10]
	ldr r1, [sp, #0x34]
	strb r0, [r1]
	movs r6, #0
	ldr r2, _08095618 @ =0x0200FF24
	str r2, [sp, #0x20]
	movs r3, #0x4a
	adds r3, r3, r5
	mov sb, r3
	adds r5, #0x42
	mov r8, r5
	adds r4, r2, #0
	add r5, sp, #4
_080955B2:
	adds r0, r4, #0
	movs r1, #3
	bl InitText
	adds r0, r4, #0
	bl ClearText
	adds r0, r4, #0
	movs r1, #3
	bl Text_SetColor
	adds r0, r4, #0
	movs r1, #0
	bl Text_SetCursor
	ldr r0, [sp, #0x1c]
	cmp r0, #0
	beq _08095620
	cmp r6, #1
	bne _08095620
	ldr r0, [sp, #0x20]
	adds r0, #8
	ldr r1, _0809561C @ =0x0835C824
	bl Text_DrawString
	b _08095628
	.align 2, 0
_080955E8: .4byte 0x086905F8
_080955EC: .4byte gDispIo
_080955F0: .4byte 0x0831B0A8
_080955F4: .4byte 0x0835AB08
_080955F8: .4byte gBg3Tm
_080955FC: .4byte 0x0835AB28
_08095600: .4byte 0x0835A3E8
_08095604: .4byte 0x0835A5D0
_08095608: .4byte gBg2Tm
_0809560C: .4byte 0x0835A5F0
_08095610: .4byte gBg0Tm
_08095614: .4byte 0x08690A99
_08095618: .4byte 0x0200FF24
_0809561C: .4byte 0x0835C824
_08095620:
	ldr r1, [r5]
	adds r0, r4, #0
	bl Text_DrawString
_08095628:
	adds r0, r4, #0
	mov r1, r8
	bl PutText
	ldr r1, [sp, #0x24]
	adds r0, r1, r6
	ldrb r2, [r0]
	mov r0, sb
	movs r1, #0
	bl PutNumber
	movs r2, #0x80
	add sb, r2
	add r8, r2
	adds r4, #8
	adds r5, #4
	adds r6, #1
	cmp r6, #5
	ble _080955B2
	movs r5, #0
	adds r0, r7, #0
	bl sub_8095D2C
	str r0, [r7, #0x40]
	movs r0, #0x80
	lsls r0, r0, #1
	movs r1, #2
	movs r2, #0
	bl InitTalk
	bl SetInitTalkTextFont
	bl ClearTalkText
	bl EndTalk
	ldr r1, _08095800 @ =0x086905B0
	mov r3, sl
	ldrb r3, [r3]
	lsls r0, r3, #1
	adds r0, r0, r1
	ldrh r2, [r0]
	movs r0, #2
	movs r1, #0xf
	bl StartTalkMsg
	movs r0, #0
	bl SetTalkPrintColor
	movs r0, #1
	bl SetTalkFlag
	movs r0, #2
	bl SetTalkFlag
	movs r0, #4
	bl SetTalkFlag
	movs r0, #8
	bl SetTalkFlag
	movs r0, #0x40
	bl SetTalkFlag
	movs r0, #4
	bl SetTalkPrintDelay
	ldr r0, _08095804 @ =0x02000400
	movs r2, #0
	movs r1, #0x82
	lsls r1, r1, #1
	strh r1, [r0, #2]
	movs r1, #0x58
	strh r1, [r0, #4]
	ldr r1, _08095808 @ =0x0869058C
	mov r4, sl
	ldrb r4, [r4]
	adds r1, r4, r1
	ldrb r1, [r1]
	strh r1, [r0, #6]
	movs r1, #6
	strh r1, [r0, #8]
	strb r2, [r0, #1]
	movs r4, #1
	strh r4, [r0, #0xa]
	movs r1, #0xc0
	lsls r1, r1, #1
	strh r1, [r0, #0xc]
	movs r1, #2
	strh r1, [r0, #0xe]
	ldr r1, _0809580C @ =0x02000434
	str r1, [r0, #0x18]
	ldr r1, _08095810 @ =0x02002434
	str r1, [r0, #0x20]
	ldr r1, _08095814 @ =0x02007C34
	str r1, [r0, #0x1c]
	ldr r1, _08095818 @ =0x02007CD4
	str r1, [r0, #0x24]
	ldr r2, _0809581C @ =0x0200A6D4
	str r2, [r0, #0x2c]
	ldr r3, _08095820 @ =0x086909A4
	mov r6, sl
	ldrb r6, [r6]
	lsls r1, r6, #2
	mov r7, sl
	ldrb r7, [r7]
	adds r1, r1, r7
	adds r1, r1, r3
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	strh r1, [r2]
	mov r6, sl
	ldrb r6, [r6]
	lsls r1, r6, #2
	mov r7, sl
	ldrb r7, [r7]
	adds r1, r1, r7
	adds r1, #1
	adds r1, r1, r3
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	strh r1, [r2, #2]
	mov r6, sl
	ldrb r6, [r6]
	lsls r1, r6, #2
	mov r7, sl
	ldrb r7, [r7]
	adds r1, r1, r7
	adds r1, #2
	adds r1, r1, r3
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	strh r1, [r2, #4]
	mov r6, sl
	ldrb r6, [r6]
	lsls r1, r6, #2
	mov r7, sl
	ldrb r7, [r7]
	adds r1, r1, r7
	adds r1, #3
	adds r1, r1, r3
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	strh r1, [r2, #6]
	mov r6, sl
	ldrb r6, [r6]
	lsls r1, r6, #2
	mov r7, sl
	ldrb r7, [r7]
	adds r1, r1, r7
	adds r1, #4
	adds r1, r1, r3
	ldrb r1, [r1]
	lsls r1, r1, #0x18
	asrs r1, r1, #0x18
	strh r1, [r2, #8]
	movs r1, #0xa0
	lsls r1, r1, #2
	strh r1, [r2, #0xe]
	movs r3, #0xf
	strh r3, [r2, #0x10]
	subs r1, #0x80
	strh r1, [r2, #0xa]
	strh r3, [r2, #0xc]
	strh r4, [r2, #0x12]
	ldr r1, _08095824 @ =gBg1Tm
	str r1, [r2, #0x14]
	ldr r1, _08095828 @ =0x0200A6FC
	str r1, [r2, #0x18]
	ldr r1, _0809582C @ =0x0200C6FC
	str r1, [r2, #0x1c]
	ldr r1, _08095830 @ =0x0200CEFC
	str r1, [r2, #0x20]
	ldr r1, _08095834 @ =sub_809525C
	str r1, [r2, #0x24]
	bl sub_804BED8
	ldr r4, _08095838 @ =0x0200DEFC
	ldr r1, _0809583C @ =0x08690A53
	mov r2, sl
	ldrb r2, [r2]
	lsls r0, r2, #1
	adds r0, r0, r1
	ldrb r0, [r0]
	strh r0, [r4]
	movs r0, #0xa
	strh r0, [r4, #2]
	movs r0, #0xe0
	lsls r0, r0, #2
	strh r0, [r4, #4]
	mov r3, sl
	ldrb r3, [r3]
	lsls r0, r3, #1
	adds r1, #1
	adds r0, r0, r1
	ldrb r0, [r0]
	strh r0, [r4, #6]
	movs r0, #0xb
	strh r0, [r4, #8]
	movs r0, #0xf0
	lsls r0, r0, #2
	strh r0, [r4, #0xa]
	strh r5, [r4, #0xc]
	ldr r0, _08095840 @ =0x0000FFFF
	strh r0, [r4, #0xe]
	ldr r0, _08095844 @ =0x06010000
	str r0, [r4, #0x1c]
	ldr r0, _08095848 @ =0x0200DF24
	str r0, [r4, #0x20]
	adds r0, r4, #0
	bl sub_804BF40
	movs r3, #0x98
	lsls r3, r3, #1
	movs r0, #0x68
	str r0, [sp]
	adds r0, r4, #0
	movs r1, #0xd0
	movs r2, #0x68
	bl sub_804C318
	ldr r0, _0809584C @ =sub_80951FC
	bl SetOnHBlankA
	add sp, #0x38
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08095800: .4byte 0x086905B0
_08095804: .4byte 0x02000400
_08095808: .4byte 0x0869058C
_0809580C: .4byte 0x02000434
_08095810: .4byte 0x02002434
_08095814: .4byte 0x02007C34
_08095818: .4byte 0x02007CD4
_0809581C: .4byte 0x0200A6D4
_08095820: .4byte 0x086909A4
_08095824: .4byte gBg1Tm
_08095828: .4byte 0x0200A6FC
_0809582C: .4byte 0x0200C6FC
_08095830: .4byte 0x0200CEFC
_08095834: .4byte sub_809525C
_08095838: .4byte 0x0200DEFC
_0809583C: .4byte 0x08690A53
_08095840: .4byte 0x0000FFFF
_08095844: .4byte 0x06010000
_08095848: .4byte 0x0200DF24
_0809584C: .4byte sub_80951FC

	thumb_func_start sub_8095850
sub_8095850: @ 0x08095850
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	adds r5, r7, #0
	adds r5, #0x44
	movs r0, #0x50
	ldrh r1, [r7, #0x2a]
	subs r0, r0, r1
	movs r1, #0xe
	bl __divsi3
	adds r0, #1
	ldrb r1, [r5]
	subs r0, r1, r0
	strb r0, [r5]
	lsls r0, r0, #0x18
	lsrs r0, r0, #0x18
	cmp r0, #0xb3
	bhi _08095882
	movs r0, #0xb4
	strb r0, [r5]
_08095882:
	ldr r0, _08095934 @ =gDispIo
	mov ip, r0
	movs r2, #1
	ldrb r0, [r0, #1]
	orrs r0, r2
	movs r1, #2
	mov r8, r1
	mov r1, r8
	orrs r0, r1
	movs r1, #4
	mov sl, r1
	mov r1, sl
	orrs r0, r1
	movs r1, #8
	mov sb, r1
	mov r1, sb
	orrs r0, r1
	movs r4, #0x10
	orrs r0, r4
	movs r1, #0x20
	orrs r0, r1
	movs r1, #0x41
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r1, ip
	strb r0, [r1, #1]
	mov r0, ip
	adds r0, #0x2d
	movs r1, #0
	strb r1, [r0]
	ldrh r6, [r7, #0x2a]
	adds r1, r6, #0
	movs r0, #0x50
	subs r0, r0, r1
	mov r3, ip
	adds r3, #0x31
	strb r0, [r3]
	subs r3, #5
	movs r0, #0xf0
	strb r0, [r3]
	adds r1, #0x50
	mov r0, ip
	adds r0, #0x30
	strb r1, [r0]
	adds r0, #4
	ldrb r1, [r0]
	orrs r2, r1
	mov r1, r8
	orrs r2, r1
	mov r1, sl
	orrs r2, r1
	mov r1, sb
	orrs r2, r1
	orrs r2, r4
	strb r2, [r0]
	mov r2, ip
	adds r2, #0x36
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2]
	lsls r0, r6, #0x10
	lsrs r0, r0, #0x10
	cmp r0, #0x50
	bne _08095938
	movs r0, #0xb4
	strb r0, [r5]
	movs r0, #0
	strh r0, [r7, #0x2a]
	adds r0, r7, #0
	bl Proc_Break
	ldr r0, [r7, #0x40]
	bl sub_8095D48
	b _0809593C
	.align 2, 0
_08095934: .4byte gDispIo
_08095938:
	adds r0, r6, #4
	strh r0, [r7, #0x2a]
_0809593C:
	ldr r0, _08095974 @ =0x02000400
	adds r4, r7, #0
	adds r4, #0x44
	ldrb r1, [r4]
	movs r2, #0x58
	bl sub_804BE20
	ldr r0, _08095978 @ =0x0200DEFC
	ldrb r3, [r4]
	adds r1, r3, #0
	subs r1, #0x30
	adds r3, #0x30
	movs r2, #0x68
	str r2, [sp]
	bl sub_804C318
	ldr r0, [r7, #0x40]
	movs r1, #0x78
	bl sub_8095D40
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08095974: .4byte 0x02000400
_08095978: .4byte 0x0200DEFC

	thumb_func_start sub_809597C
sub_809597C: @ 0x0809597C
	push {r4, r5, r6, r7, lr}
	adds r4, r0, #0
	movs r6, #0
	ldrh r1, [r4, #0x2c]
	ldr r0, _08095994 @ =0x0000018F
	cmp r1, r0
	bls _08095998
	ldr r0, [r4, #0x34]
	adds r0, #0x2c
	movs r1, #2
	strb r1, [r0]
	b _080959E8
	.align 2, 0
_08095994: .4byte 0x0000018F
_08095998:
	ldrh r2, [r4, #0x2a]
	adds r2, #1
	strh r2, [r4, #0x2a]
	adds r0, r1, #1
	strh r0, [r4, #0x2c]
	ldr r1, _08095A18 @ =0x086905F8
	ldrh r3, [r4, #0x2e]
	lsls r0, r3, #2
	adds r1, r0, r1
	ldrb r0, [r1, #1]
	cmp r0, #0
	beq _080959E8
	adds r1, r0, #0
	lsls r0, r2, #0x10
	lsrs r0, r0, #0x10
	cmp r0, r1
	bhi _080959EC
	cmp r1, #0xff
	bne _080959E8
	adds r5, r4, #0
	adds r5, #0x3e
	ldrb r0, [r5]
	cmp r0, #0
	beq _080959DA
	ldr r0, _08095A1C @ =0x02000400
	bl sub_804BE4C
	lsls r0, r0, #0x18
	cmp r0, #0
	bne _080959EC
	ldrb r0, [r5]
	cmp r0, #0
	bne _080959E8
_080959DA:
	ldr r0, _08095A1C @ =0x02000400
	bl sub_804BE80
	lsls r0, r0, #0x18
	cmp r0, #0
	beq _080959E8
	movs r6, #1
_080959E8:
	cmp r6, #0
	beq _08095A62
_080959EC:
	ldrh r0, [r4, #0x2e]
	adds r0, #1
	strh r0, [r4, #0x2e]
	ldr r7, _08095A18 @ =0x086905F8
	lsls r0, r0, #2
	adds r1, r0, r7
	ldrb r0, [r1, #1]
	cmp r0, #0
	beq _08095A62
	ldrb r2, [r1]
	cmp r2, #0xff
	bne _08095A20
	ldr r0, _08095A1C @ =0x02000400
	bl sub_804BE6C
	adds r1, r4, #0
	adds r1, #0x3e
	movs r0, #0
	strb r0, [r1]
	adds r6, r4, #0
	adds r6, #0x30
	b _08095A52
	.align 2, 0
_08095A18: .4byte 0x086905F8
_08095A1C: .4byte 0x02000400
_08095A20:
	adds r0, r4, #0
	adds r0, #0x30
	adds r6, r0, #0
	ldrb r0, [r6]
	cmp r0, r2
	beq _08095A52
	ldr r5, _08095A68 @ =0x02000400
	ldrb r0, [r1]
	strh r0, [r5, #8]
	adds r0, r5, #0
	bl sub_804BCC8
	ldrh r1, [r4, #0x2e]
	lsls r0, r1, #2
	adds r0, r0, r7
	ldrb r0, [r0]
	cmp r0, #4
	bne _08095A4A
	adds r0, r5, #0
	bl sub_804BE6C
_08095A4A:
	adds r1, r4, #0
	adds r1, #0x3e
	movs r0, #1
	strb r0, [r1]
_08095A52:
	ldr r1, _08095A6C @ =0x086905F8
	ldrh r2, [r4, #0x2e]
	lsls r0, r2, #2
	adds r0, r0, r1
	ldrb r0, [r0]
	movs r1, #0
	strb r0, [r6]
	strh r1, [r4, #0x2a]
_08095A62:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08095A68: .4byte 0x02000400
_08095A6C: .4byte 0x086905F8

	thumb_func_start nullsub_47
nullsub_47: @ 0x08095A70
	bx lr
	.align 2, 0

	thumb_func_start sub_8095A74
sub_8095A74: @ 0x08095A74
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0
	bl SetOnHBlankA
	bl EndTalk
	bl sub_8057F24
	ldr r0, _08095AB0 @ =0x0200DEFC
	bl sub_804C2EC
	bl sub_8057F08
	ldr r0, _08095AB4 @ =0x02000400
	bl sub_804BF00
	ldr r0, [r4, #0x40]
	cmp r0, #0
	beq _08095AA2
	movs r1, #4
	bl Proc_Goto
_08095AA2:
	ldr r1, [r4, #0x34]
	movs r0, #0
	str r0, [r1, #0x38]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08095AB0: .4byte 0x0200DEFC
_08095AB4: .4byte 0x02000400

	thumb_func_start sub_8095AB8
sub_8095AB8: @ 0x08095AB8
	push {r4, r5, lr}
	adds r5, r0, #0
	lsls r4, r1, #0x18
	lsrs r4, r4, #0x18
	ldr r0, _08095ADC @ =0x0868FFCC
	adds r1, r5, #0
	bl SpawnProc
	adds r2, r0, #0
	adds r2, #0x31
	movs r1, #0
	strb r4, [r2]
	str r5, [r0, #0x34]
	str r1, [r0, #0x40]
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0
_08095ADC: .4byte 0x0868FFCC

	thumb_func_start sub_8095AE0
sub_8095AE0: @ 0x08095AE0
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov ip, r0
	ldr r0, [r0, #0x14]
	mov r1, ip
	str r0, [r1, #0x30]
	movs r1, #0
	movs r0, #0
	mov r2, ip
	strh r0, [r2, #0x2a]
	adds r2, #0x42
	strb r1, [r2]
	mov r1, ip
	adds r1, #0x43
	movs r0, #0xfa
	strb r0, [r1]
	movs r4, #0
	ldr r0, _08095B48 @ =0x08690D44
	mov sb, r0
	movs r1, #0x34
	add r1, ip
	mov r8, r1
	adds r7, r2, #0
	mov sl, sb
_08095B16:
	lsls r0, r4, #2
	ldr r2, _08095B4C @ =0x0200FF54
	adds r0, r0, r2
	movs r1, #0
	strb r1, [r0]
	strb r1, [r0, #1]
	mov r1, ip
	ldr r0, [r1, #0x30]
	adds r0, #0x31
	ldrb r0, [r0]
	lsls r3, r0, #2
	mov r2, sb
	adds r0, r3, r2
	ldr r0, [r0]
	adds r0, r0, r4
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _08095B64
	mov r0, r8
	adds r1, r0, r4
	movs r0, #0xff
	strb r0, [r1]
	b _08095B98
	.align 2, 0
_08095B48: .4byte 0x08690D44
_08095B4C: .4byte 0x0200FF54
_08095B50:
	mov r1, r8
	adds r0, r1, r4
	strb r5, [r0]
	ldrb r2, [r3, #6]
	ldrb r1, [r3, #5]
	subs r0, r2, r1
	ldrb r2, [r7]
	adds r0, r2, r0
	strb r0, [r7]
	b _08095B92
_08095B64:
	movs r5, #0
	ldr r1, _08095BBC @ =0x08690C14
	ldr r0, [r1]
	adds r6, r4, #1
	cmp r0, #0
	beq _08095B92
	mov r2, sl
	adds r0, r3, r2
	ldr r0, [r0]
	adds r0, r0, r4
	movs r2, #0
	ldrsb r2, [r0, r2]
	adds r3, r1, #0
_08095B7E:
	movs r0, #4
	ldrsb r0, [r3, r0]
	cmp r0, r2
	beq _08095B50
	adds r1, #8
	adds r3, #8
	adds r5, #1
	ldr r0, [r1]
	cmp r0, #0
	bne _08095B7E
_08095B92:
	adds r4, r6, #0
	cmp r4, #0xd
	ble _08095B16
_08095B98:
	ldr r1, _08095BC0 @ =0x06010000
	ldr r0, _08095BC4 @ =0x0835B040
	bl Decompress
	ldr r0, _08095BC8 @ =0x0835C034
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x40
	bl ApplyPaletteExt
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08095BBC: .4byte 0x08690C14
_08095BC0: .4byte 0x06010000
_08095BC4: .4byte 0x0835B040
_08095BC8: .4byte 0x0835C034

	thumb_func_start sub_8095BCC
sub_8095BCC: @ 0x08095BCC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #0x20
	str r0, [sp, #0x10]
	ldr r1, _08095D1C @ =0x0835C829
	add r0, sp, #4
	movs r2, #0xc
	bl memcpy
	movs r0, #0
	mov sb, r0
	ldr r1, [sp, #0x10]
	adds r1, #0x42
	str r1, [sp, #0x18]
	ldr r2, [sp, #0x10]
	adds r2, #0x43
	str r2, [sp, #0x1c]
	ldr r3, [sp, #0x10]
	adds r3, #0x34
	str r3, [sp, #0x14]
_08095BFA:
	ldr r1, [sp, #0x10]
	ldr r0, [r1, #0x30]
	adds r0, #0x38
	add r0, sb
	ldrb r0, [r0]
	mov r8, r0
	movs r7, #0
	lsrs r0, r0, #2
	movs r2, #1
	add r2, sb
	mov sl, r2
	cmp r7, r0
	bge _08095C3E
	adds r6, r0, #0
	movs r4, #0x30
	mov r3, sb
	lsls r5, r3, #4
	adds r7, r6, #0
_08095C1E:
	ldr r0, _08095D20 @ =0x0869006C
	ldr r3, [r0, #0xc]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	adds r1, r4, #0
	adds r2, r5, #0
	adds r2, #0x10
	bl PutSpriteExt
	adds r4, #8
	subs r7, #1
	cmp r7, #0
	bne _08095C1E
	adds r7, r6, #0
_08095C3E:
	movs r0, #3
	mov r1, r8
	ands r0, r1
	cmp r0, #0
	beq _08095C68
	lsls r1, r7, #3
	adds r1, #0x30
	mov r3, sb
	lsls r2, r3, #4
	adds r2, #0x10
	subs r0, #1
	lsls r0, r0, #2
	ldr r3, _08095D20 @ =0x0869006C
	adds r0, r0, r3
	ldr r3, [r0]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #0xd
	bl PutSpriteExt
_08095C68:
	mov sb, sl
	mov r0, sb
	cmp r0, #5
	ble _08095BFA
	movs r0, #0x78
	ldr r1, [sp, #0x18]
	ldrb r1, [r1]
	subs r0, r0, r1
	lsrs r1, r0, #0x1f
	adds r0, r0, r1
	asrs r0, r0, #1
	ldr r2, [sp, #0x1c]
	ldrb r2, [r2]
	adds r7, r2, r0
	movs r3, #0
	mov sb, r3
	ldr r1, [sp, #0x14]
	ldrb r0, [r1]
	cmp r0, #0xff
	beq _08095D00
	ldr r5, _08095D24 @ =0x08690C14
	adds r4, r1, #0
_08095C94:
	ldrb r2, [r4]
	lsls r0, r2, #3
	adds r0, r0, r5
	movs r1, #5
	ldrsb r1, [r0, r1]
	subs r1, r7, r1
	movs r3, #7
	ldrsb r3, [r0, r3]
	movs r2, #8
	subs r2, r2, r3
	ldr r3, [r0]
	movs r0, #0xa0
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
	ldrb r3, [r4]
	lsls r0, r3, #3
	adds r0, r0, r5
	movs r1, #5
	ldrsb r1, [r0, r1]
	subs r1, r7, r1
	subs r1, #2
	movs r3, #7
	ldrsb r3, [r0, r3]
	movs r2, #6
	subs r2, r2, r3
	ldr r3, [r0]
	movs r0, #0x80
	lsls r0, r0, #7
	str r0, [sp]
	movs r0, #4
	bl PutSpriteExt
	ldrb r1, [r4]
	lsls r0, r1, #3
	adds r0, r0, r5
	movs r1, #6
	ldrsb r1, [r0, r1]
	ldrb r0, [r0, #5]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	subs r1, r1, r0
	adds r7, r7, r1
	adds r4, #1
	movs r2, #1
	add sb, r2
	mov r3, sb
	cmp r3, #0xd
	bgt _08095D00
	ldrb r0, [r4]
	cmp r0, #0xff
	bne _08095C94
_08095D00:
	ldr r1, [sp, #0x10]
	ldrh r0, [r1, #0x2a]
	cmp r0, #0xfe
	bhi _08095D0C
	adds r0, #1
	strh r0, [r1, #0x2a]
_08095D0C:
	add sp, #0x20
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08095D1C: .4byte 0x0835C829
_08095D20: .4byte 0x0869006C
_08095D24: .4byte 0x08690C14

	thumb_func_start nullsub_48
nullsub_48: @ 0x08095D28
	bx lr
	.align 2, 0

	thumb_func_start sub_8095D2C
sub_8095D2C: @ 0x08095D2C
	push {lr}
	adds r1, r0, #0
	ldr r0, _08095D3C @ =0x08690014
	bl SpawnProc
	pop {r1}
	bx r1
	.align 2, 0
_08095D3C: .4byte 0x08690014

	thumb_func_start sub_8095D40
sub_8095D40: @ 0x08095D40
	adds r0, #0x43
	strb r1, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_8095D48
sub_8095D48: @ 0x08095D48
	ldr r0, _08095D54 @ =0x0200FF54
	movs r1, #0x80
	strb r1, [r0]
	movs r1, #2
	strb r1, [r0, #1]
	bx lr
	.align 2, 0
_08095D54: .4byte 0x0200FF54

	thumb_func_start nullsub_49
nullsub_49: @ 0x08095D58
	bx lr
	.align 2, 0

	thumb_func_start sub_8095D5C
sub_8095D5C: @ 0x08095D5C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08095D7C @ =0x08690E7C
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x61
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	adds r0, r1, #0
	b _08095D80
	.align 2, 0
_08095D7C: .4byte 0x08690E7C
_08095D80:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8095D88
sub_8095D88: @ 0x08095D88
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, _08095DEC @ =0x08690E70
	ldr r2, [r7, #4]
	adds r1, r2, #0
	adds r2, #0x61
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r7]
	ldr r0, [r0]
	adds r1, r1, r0
	str r1, [r7, #8]
	bl SetInitTalkTextFont
	bl ClearTalkText
	ldr r1, [r7, #8]
	adds r0, r1, #0
	bl DecodeMsg
	adds r2, r0, #0
	ldr r3, [r7, #4]
	movs r0, #8
	movs r1, #2
	bl StartTalkExt
	movs r0, #0
	bl SetTalkPrintColor
	movs r0, #1
	bl SetTalkFlag
	movs r0, #2
	bl SetTalkFlag
	movs r0, #4
	bl SetTalkFlag
	movs r0, #1
	bl SetActiveTalkFace
	add sp, #0xc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08095DEC: .4byte 0x08690E70

	thumb_func_start sub_8095DF0
sub_8095DF0: @ 0x08095DF0
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r3, [r7, #4]
	ldr r0, [r7]
	movs r1, #0
	movs r2, #0
	bl sub_8095E90
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8095E10
sub_8095E10: @ 0x08095E10
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, [r7, #4]
	ldr r0, [r7]
	movs r2, #0
	movs r3, #0
	bl sub_8095E90
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8095E30
sub_8095E30: @ 0x08095E30
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, [r7, #4]
	ldr r0, [r7]
	movs r2, #1
	movs r3, #0
	bl sub_8095E90
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8095E50
sub_8095E50: @ 0x08095E50
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, [r7, #4]
	ldr r0, [r7]
	movs r2, #2
	movs r3, #0
	bl sub_8095E90
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8095E70
sub_8095E70: @ 0x08095E70
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, [r7, #4]
	ldr r0, [r7]
	movs r2, #0
	movs r3, #0
	bl sub_8095E90
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8095E90
sub_8095E90: @ 0x08095E90
	push {r7, lr}
	sub sp, #0x1c
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	adds r0, r2, #0
	str r3, [r7, #0xc]
	adds r1, r7, #0
	adds r1, #8
	strb r0, [r1]
	bl sub_8073324
	ldr r0, [r7, #0xc]
	cmp r0, #0
	beq _08095EC0
	ldr r0, _08095EBC @ =0x08690F00
	ldr r1, [r7, #0xc]
	bl SpawnProcLocking
	str r0, [r7, #0x10]
	b _08095ECC
	.align 2, 0
_08095EBC: .4byte 0x08690F00
_08095EC0:
	ldr r1, _08095EFC @ =0x08690F00
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #0x10]
_08095ECC:
	ldr r0, [r7, #0x10]
	adds r1, r7, #0
	adds r1, #8
	adds r2, r0, #0
	adds r0, #0x61
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, [r7, #0x10]
	ldr r1, [r7]
	str r1, [r0, #0x2c]
	ldr r0, [r7, #4]
	cmp r0, #0
	beq _08095F00
	ldr r0, [r7, #4]
	str r0, [r7, #0x14]
	b _08095F04
	.align 2, 0
_08095EFC: .4byte 0x08690F00
_08095F00:
	ldr r0, _08095F10 @ =0x08690E60
	str r0, [r7, #0x14]
_08095F04:
	movs r0, #0
	str r0, [r7, #0x18]
_08095F08:
	ldr r0, [r7, #0x18]
	cmp r0, #0x14
	ble _08095F14
	b _08095F4C
	.align 2, 0
_08095F10: .4byte 0x08690E60
_08095F14:
	adds r0, r7, #0
	adds r0, #0x14
	ldr r1, [r0]
	ldrh r2, [r1]
	adds r1, #2
	str r1, [r0]
	adds r0, r2, #0
	bl CreateItem
	ldr r1, [r7, #0x10]
	ldr r2, [r7, #0x18]
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r3, r1, #0
	adds r3, #0x30
	adds r1, r3, r2
	ldrh r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r0
	adds r0, r2, #0
	strh r0, [r1]
	ldr r0, [r7, #0x18]
	adds r1, r0, #1
	str r1, [r7, #0x18]
	b _08095F08
_08095F4C:
	ldr r1, [r7, #0x10]
	adds r0, r1, #0
	bl sub_8095F5C
	add sp, #0x1c
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8095F5C
sub_8095F5C: @ 0x08095F5C
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	str r0, [r7, #4]
_08095F68:
	ldr r0, [r7]
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, #0x30
	adds r1, r0, r1
	ldrh r0, [r1]
	cmp r0, #0
	bne _08095F7C
	b _08095F84
_08095F7C:
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _08095F68
_08095F84:
	ldr r1, [r7]
	ldr r2, [r7, #4]
	adds r0, r2, #0
	adds r2, r1, #0
	adds r1, #0x5a
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r0, r3
	adds r2, r0, #0
	strb r2, [r1]
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	adds r0, r1, #0
	bl GetUnitItemCount
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x5b
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r0
	adds r0, r2, #0
	strb r0, [r1]
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8095FC4
sub_8095FC4: @ 0x08095FC4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	ldr r1, _08095FE4 @ =0x08690F00
	adds r0, r1, #0
	bl Proc_Find
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x60
	ldrb r0, [r1]
	cmp r0, #0
	bne _08095FE8
	b _08095FEE
	.align 2, 0
_08095FE4: .4byte 0x08690F00
_08095FE8:
	ldr r0, [r7]
	bl sub_80970BC
_08095FEE:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8095FF8
sub_8095FF8: @ 0x08095FF8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	ldr r1, _08096018 @ =0x08690F00
	adds r0, r1, #0
	bl Proc_Find
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x60
	ldrb r0, [r1]
	cmp r0, #1
	bne _0809601C
	b _08096022
	.align 2, 0
_08096018: .4byte 0x08690F00
_0809601C:
	ldr r0, [r7]
	bl sub_80972AC
_08096022:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809602C
sub_809602C: @ 0x0809602C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _08096048 @ =0x000002C3
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_8095D88
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08096048: .4byte 0x000002C3

	thumb_func_start sub_809604C
sub_809604C: @ 0x0809604C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl GetTalkChoiceResult
	cmp r0, #1
	beq _08096076
	cmp r0, #1
	bgt _08096066
	cmp r0, #0
	beq _0809606C
	b _0809606C
_08096066:
	cmp r0, #2
	beq _08096080
	b _0809606C
_0809606C:
	ldr r0, [r7]
	movs r1, #0xc
	bl Proc_Goto
	b _080960B0
_08096076:
	ldr r0, [r7]
	movs r1, #1
	bl Proc_Goto
	b _080960B0
_08096080:
	ldr r0, [r7]
	ldr r1, [r0, #0x2c]
	adds r0, r1, #0
	bl GetUnitItemCount
	cmp r0, #0
	bne _080960A8
	ldr r1, _080960A4 @ =0x000002D5
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_8095D88
	ldr r0, [r7]
	movs r1, #7
	bl Proc_Goto
	b _080960B0
	.align 2, 0
_080960A4: .4byte 0x000002D5
_080960A8:
	ldr r0, [r7]
	movs r1, #4
	bl Proc_Goto
_080960B0:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80960B8
sub_80960B8: @ 0x080960B8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r1, #0xb3
	lsls r1, r1, #2
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_8095D88
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80960D4
sub_80960D4: @ 0x080960D4
	push {r4, r5, r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, [r7]
	str r0, [r7, #8]
	ldr r1, [r7, #4]
	adds r0, r1, #0
	movs r1, #6
	bl DivRem
	str r0, [r7, #0xc]
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	movs r0, #4
	bl EnableBgSync
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r2, _08096128 @ =0x0203DCB8
	adds r1, r0, r2
	adds r0, r1, #0
	bl ClearText
	ldr r0, [r7, #8]
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, #0x30
	adds r1, r0, r1
	ldrh r0, [r1]
	str r0, [r7, #0x10]
	ldr r0, [r7, #0x10]
	cmp r0, #0
	bne _0809612C
	b _08096154
	.align 2, 0
_08096128: .4byte 0x0203DCB8
_0809612C:
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r1, _0809615C @ =0x0203DCB8
	adds r0, r0, r1
	ldr r1, [r7, #0x10]
	ldr r3, [r7, #8]
	ldr r2, [r3, #0x2c]
	ldr r3, [r7, #4]
	adds r4, r3, #0
	lsls r3, r4, #1
	movs r4, #0x1f
	ands r3, r4
	lsls r4, r3, #5
	adds r3, r4, #0
	lsls r4, r3, #1
	ldr r5, _08096160 @ =0x02022B16
	adds r3, r4, r5
	bl sub_8097444
_08096154:
	add sp, #0x14
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809615C: .4byte 0x0203DCB8
_08096160: .4byte 0x02022B16

	thumb_func_start sub_8096164
sub_8096164: @ 0x08096164
	push {r4, r5, r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, [r7]
	str r0, [r7, #8]
	ldr r1, [r7, #4]
	adds r0, r1, #0
	movs r1, #6
	bl DivRem
	str r0, [r7, #0xc]
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	movs r0, #4
	bl EnableBgSync
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r2, _080961B8 @ =0x0203DCB8
	adds r1, r0, r2
	adds r0, r1, #0
	bl ClearText
	ldr r0, [r7, #8]
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, #0x30
	adds r1, r0, r1
	ldrh r0, [r1]
	str r0, [r7, #0x10]
	ldr r0, [r7, #0x10]
	cmp r0, #0
	bne _080961BC
	b _080961E4
	.align 2, 0
_080961B8: .4byte 0x0203DCB8
_080961BC:
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r1, _080961EC @ =0x0203DCB8
	adds r0, r0, r1
	ldr r1, [r7, #0x10]
	ldr r3, [r7, #8]
	ldr r2, [r3, #0x2c]
	ldr r3, [r7, #4]
	adds r4, r3, #0
	lsls r3, r4, #1
	movs r4, #0x1f
	ands r3, r4
	lsls r4, r3, #5
	adds r3, r4, #0
	lsls r4, r3, #1
	ldr r5, _080961F0 @ =0x02022B16
	adds r3, r4, r5
	bl sub_80974A0
_080961E4:
	add sp, #0x14
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080961EC: .4byte 0x0203DCB8
_080961F0: .4byte 0x02022B16

	thumb_func_start sub_80961F4
sub_80961F4: @ 0x080961F4
	push {r4, r7, lr}
	sub sp, #0x10
	add r7, sp, #0xc
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5e
	ldrb r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5a
	ldrb r1, [r2]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r4, r3, #0
	adds r4, #0x5f
	ldrb r3, [r4]
	movs r2, #0x48
	str r2, [sp]
	ldr r2, _08096230 @ =sub_80960D4
	str r2, [sp, #4]
	ldr r2, [r7]
	str r2, [sp, #8]
	movs r2, #5
	bl sub_8097AC4
	add sp, #0x10
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08096230: .4byte sub_80960D4

	thumb_func_start sub_8096234
sub_8096234: @ 0x08096234
	push {r4, r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	adds r0, r7, #4
	movs r1, #0
	strb r1, [r0]
	bl sub_8097BC0
	bl sub_8097D10
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r2, r0, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	adds r4, r0, #0
	bl sub_8097CF4
	lsls r2, r4, #0x10
	lsrs r1, r2, #0x10
	lsls r2, r0, #0x10
	lsrs r0, r2, #0x10
	cmp r1, r0
	beq _08096278
	adds r0, r7, #4
	movs r1, #1
	strb r1, [r0]
_08096278:
	bl sub_8097CF4
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x5c
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r0
	adds r0, r2, #0
	strb r0, [r1]
	bl sub_8097D34
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x5d
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r0
	adds r0, r2, #0
	strb r0, [r1]
	ldr r0, [r7]
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x5c
	adds r2, r0, #0
	adds r0, #0x5e
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r0, [r7]
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x5d
	adds r2, r0, #0
	adds r0, #0x5f
	ldrb r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrb r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strb r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5d
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r1, #0
	subs r2, #0x48
	subs r1, r0, r2
	movs r0, #0x38
	bl sub_80415CC
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x62
	ldrb r0, [r1]
	cmp r0, #0
	beq _0809635A
	adds r0, r7, #4
	movs r1, #0
	ldrsb r1, [r0, r1]
	cmp r1, #0
	beq _0809635A
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5d
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r1, #0
	subs r2, #0x48
	subs r1, r0, r2
	ldr r0, [r7]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x5c
	ldrb r2, [r3]
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r0, #0x30
	adds r3, r0, r2
	ldrh r2, [r3]
	movs r0, #0x38
	bl sub_80706FC
_0809635A:
	bl sub_809773C
	bl sub_8097DA8
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _0809636C
	b _080964D8
_0809636C:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x62
	ldrb r0, [r1]
	cmp r0, #0
	beq _080963AE
	ldr r1, _080963A8 @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #0x81
	lsls r2, r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080963A4
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x62
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	bl sub_807089C
_080963A4:
	b _080964D8
	.align 2, 0
_080963A8: .4byte gKeySt
_080963AC:
	.byte 0x36, 0xE0
_080963AE:
	ldr r1, _08096418 @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _0809641C
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x62
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5d
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r1, #0
	subs r2, #0x48
	subs r1, r0, r2
	ldr r0, [r7]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x5c
	ldrb r2, [r3]
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r0, #0x30
	adds r3, r0, r2
	ldrh r2, [r3]
	movs r0, #0x38
	bl sub_80706FC
	b _080964D8
	.align 2, 0
_08096418: .4byte gKeySt
_0809641C:
	ldr r1, [r7]
	ldr r0, [r1, #0x2c]
	ldr r1, [r7]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x5c
	ldrb r2, [r3]
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r1, #0x30
	adds r2, r1, r2
	ldrh r1, [r2]
	bl sub_809750C
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	str r0, [r7, #8]
	ldr r1, _08096474 @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _0809649C
	bl GetGold
	ldr r1, [r7, #8]
	cmp r1, r0
	ble _0809647C
	ldr r1, _08096478 @ =0x000002DB
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_8095D88
	ldr r0, [r7]
	movs r1, #1
	bl Proc_Goto
	b _08096494
	.align 2, 0
_08096474: .4byte gKeySt
_08096478: .4byte 0x000002DB
_0809647C:
	ldr r1, [r7, #8]
	adds r0, r1, #0
	bl SetTalkNumber
	ldr r1, _08096498 @ =0x000002DE
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_8095D88
	ldr r0, [r7]
	bl Proc_Break
_08096494:
	b _080964D8
	.align 2, 0
_08096498: .4byte 0x000002DE
_0809649C:
	ldr r1, _080964D0 @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #2
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080964D8
	ldr r0, _080964D4 @ =gPlaySt
	ldrb r1, [r0, #0x1d]
	lsls r2, r1, #0x1e
	lsrs r0, r2, #0x1f
	cmp r0, #0
	bne _080964C4
	movs r0, #0x6b
	bl m4aSongNumStart
_080964C4:
	ldr r0, [r7]
	movs r1, #7
	bl Proc_Goto
	b _080964D8
	.align 2, 0
_080964D0: .4byte gKeySt
_080964D4: .4byte gPlaySt
_080964D8:
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80964E0
sub_80964E0: @ 0x080964E0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl GetTalkChoiceResult
	cmp r0, #1
	beq _08096500
	cmp r0, #1
	bgt _080964FA
	cmp r0, #0
	beq _08096502
	b _08096502
_080964FA:
	cmp r0, #2
	beq _08096502
	b _08096502
_08096500:
	b _0809650C
_08096502:
	ldr r0, [r7]
	movs r1, #1
	bl Proc_Goto
	b _0809650C
_0809650C:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8096514
sub_8096514: @ 0x08096514
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5b
	ldrb r0, [r1]
	cmp r0, #4
	bls _08096538
	ldr r1, _08096534 @ =0x000002E7
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_8095D88
	b _08096562
	.align 2, 0
_08096534: .4byte 0x000002E7
_08096538:
	ldr r1, [r7]
	ldr r0, [r1, #0x2c]
	ldr r1, [r7]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x5c
	ldrb r2, [r3]
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r1, #0x30
	adds r2, r1, r2
	ldrh r1, [r2]
	bl UnitAddItem
	ldr r0, [r7]
	bl sub_8097830
	ldr r0, [r7]
	movs r1, #3
	bl Proc_Goto
_08096562:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809656C
sub_809656C: @ 0x0809656C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl GetTalkChoiceResult
	cmp r0, #1
	beq _0809658C
	cmp r0, #1
	bgt _08096586
	cmp r0, #0
	beq _0809658E
	b _0809658E
_08096586:
	cmp r0, #2
	beq _0809658E
	b _0809658E
_0809658C:
	b _08096598
_0809658E:
	ldr r0, [r7]
	movs r1, #0xb
	bl Proc_Goto
	b _08096598
_08096598:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80965A0
sub_80965A0: @ 0x080965A0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _080965BC @ =0x000002ED
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_8095D88
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080965BC: .4byte 0x000002ED

	thumb_func_start sub_80965C0
sub_80965C0: @ 0x080965C0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5c
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, #0x30
	adds r1, r0, r1
	ldrh r2, [r1]
	adds r0, r2, #0
	bl AddSupplyItem
	ldr r0, [r7]
	bl sub_8097830
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80965F0
sub_80965F0: @ 0x080965F0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _0809660C @ =0x000002EA
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_8095D88
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809660C: .4byte 0x000002EA

	thumb_func_start sub_8096610
sub_8096610: @ 0x08096610
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl CountSupplyItems
	cmp r0, #0x63
	bgt _08096628
	ldr r0, [r7]
	movs r1, #0xa
	bl Proc_Goto
_08096628:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8096630
sub_8096630: @ 0x08096630
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r1, #0xbc
	lsls r1, r1, #2
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_8095D88
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_809664C
sub_809664C: @ 0x0809664C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _08096668 @ =0x000002CF
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_8095D88
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08096668: .4byte 0x000002CF

	thumb_func_start sub_809666C
sub_809666C: @ 0x0809666C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _08096688 @ =0x000002D2
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_8095D88
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08096688: .4byte 0x000002D2

	thumb_func_start sub_809668C
sub_809668C: @ 0x0809668C
	push {r7, lr}
	sub sp, #0x10
	add r7, sp, #0xc
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5b
	ldrb r1, [r2]
	movs r2, #0x48
	str r2, [sp]
	ldr r2, _080966C0 @ =sub_8096164
	str r2, [sp, #4]
	ldr r2, [r7]
	str r2, [sp, #8]
	movs r2, #5
	movs r3, #0
	bl sub_8097AC4
	add sp, #0x10
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080966C0: .4byte sub_8096164

	thumb_func_start sub_80966C4
sub_80966C4: @ 0x080966C4
	push {r4, r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	adds r0, r7, #4
	movs r1, #0
	strb r1, [r0]
	bl sub_8097BC0
	bl sub_8097D10
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r2, r0, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	adds r4, r0, #0
	bl sub_8097CF4
	lsls r2, r4, #0x10
	lsrs r1, r2, #0x10
	lsls r2, r0, #0x10
	lsrs r0, r2, #0x10
	cmp r1, r0
	beq _08096708
	adds r0, r7, #4
	movs r1, #1
	strb r1, [r0]
_08096708:
	bl sub_8097CF4
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x5c
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r0
	adds r0, r2, #0
	strb r0, [r1]
	bl sub_8097D34
	ldr r1, [r7]
	adds r2, r1, #0
	adds r1, #0x5d
	ldrb r2, [r1]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r0
	adds r0, r2, #0
	strb r0, [r1]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5d
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r1, #0
	subs r2, #0x48
	subs r1, r0, r2
	movs r0, #0x38
	bl sub_80415CC
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x62
	ldrb r0, [r1]
	cmp r0, #0
	beq _080967B0
	adds r0, r7, #4
	movs r1, #0
	ldrsb r1, [r0, r1]
	cmp r1, #0
	beq _080967B0
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5d
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r1, #0
	subs r2, #0x48
	subs r1, r0, r2
	ldr r2, [r7]
	ldr r0, [r2, #0x2c]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x5c
	ldrb r2, [r3]
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r0, #0x1c
	adds r3, r0, r2
	ldrh r2, [r3]
	movs r0, #0x38
	bl sub_80706FC
_080967B0:
	bl sub_8097DA8
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _080967BE
	b _0809693C
_080967BE:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x62
	ldrb r0, [r1]
	cmp r0, #0
	beq _080967FE
	ldr r1, _080967F8 @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #0x81
	lsls r2, r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _080967F6
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x62
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	bl sub_807089C
_080967F6:
	b _0809693C
	.align 2, 0
_080967F8: .4byte gKeySt
_080967FC:
	.byte 0x38, 0xE0
_080967FE:
	ldr r1, _0809686C @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #0x80
	lsls r2, r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _08096870
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x62
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5c
	ldrb r0, [r1]
	adds r1, r0, #0
	lsls r0, r1, #4
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5d
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #4
	adds r2, r1, #0
	subs r2, #0x48
	subs r1, r0, r2
	ldr r2, [r7]
	ldr r0, [r2, #0x2c]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x5c
	ldrb r2, [r3]
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r0, #0x1c
	adds r3, r0, r2
	ldrh r2, [r3]
	movs r0, #0x38
	bl sub_80706FC
	b _0809693C
	.align 2, 0
_0809686C: .4byte gKeySt
_08096870:
	ldr r1, _080968C0 @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #1
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _08096900
	ldr r1, [r7]
	ldr r0, [r1, #0x2c]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5c
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, #0x1c
	adds r1, r0, r1
	ldrh r2, [r1]
	adds r0, r2, #0
	bl sub_80975C8
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	bne _080968C4
	movs r1, #0xb9
	lsls r1, r1, #2
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_8095D88
	ldr r0, [r7]
	movs r1, #4
	bl Proc_Goto
	b _080968FA
	.align 2, 0
_080968C0: .4byte gKeySt
_080968C4:
	ldr r1, [r7]
	ldr r0, [r1, #0x2c]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5c
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, #0x1c
	adds r1, r0, r1
	ldrh r2, [r1]
	adds r0, r2, #0
	bl sub_80975A0
	lsls r2, r0, #0x10
	lsrs r1, r2, #0x10
	adds r0, r1, #0
	bl SetTalkNumber
	ldr r1, _080968FC @ =0x000002DE
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_8095D88
	ldr r0, [r7]
	bl Proc_Break
_080968FA:
	b _0809693C
	.align 2, 0
_080968FC: .4byte 0x000002DE
_08096900:
	ldr r1, _08096934 @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #2
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _0809693C
	ldr r0, _08096938 @ =gPlaySt
	ldrb r1, [r0, #0x1d]
	lsls r2, r1, #0x1e
	lsrs r0, r2, #0x1f
	cmp r0, #0
	bne _08096928
	movs r0, #0x6b
	bl m4aSongNumStart
_08096928:
	ldr r0, [r7]
	movs r1, #8
	bl Proc_Goto
	b _0809693C
	.align 2, 0
_08096934: .4byte gKeySt
_08096938: .4byte gPlaySt
_0809693C:
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8096944
sub_8096944: @ 0x08096944
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	bl GetTalkChoiceResult
	cmp r0, #1
	beq _08096964
	cmp r0, #1
	bgt _0809695E
	cmp r0, #0
	beq _080969FA
	b _080969FA
_0809695E:
	cmp r0, #2
	beq _080969FA
	b _080969FA
_08096964:
	movs r0, #0xb9
	movs r1, #8
	bl PlaySeDelayed
	ldr r0, _080969F0 @ =gAction
	ldrb r1, [r0, #0x11]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x14
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x11]
	bl GetGold
	str r0, [r7, #4]
	ldr r1, [r7]
	ldr r0, [r1, #0x2c]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5c
	ldrb r1, [r2]
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, #0x1c
	adds r1, r0, r1
	ldrh r2, [r1]
	adds r0, r2, #0
	bl sub_80975A0
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	ldr r1, [r7, #4]
	adds r0, r1, r0
	str r0, [r7, #4]
	ldr r1, [r7, #4]
	adds r0, r1, #0
	bl SetGold
	ldr r1, [r7]
	ldr r0, [r1, #0x2c]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x5c
	ldrb r1, [r2]
	bl UnitRemoveItem
	ldr r0, [r7]
	bl sub_8095F5C
	ldr r0, [r7]
	bl sub_80972AC
	ldr r1, _080969F4 @ =0x02021CBE
	adds r0, r1, #0
	bl sub_8097084
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5b
	ldrb r0, [r1]
	cmp r0, #0
	bne _080969F8
	ldr r0, [r7]
	movs r1, #7
	bl Proc_Goto
	b _08096A04
	.align 2, 0
_080969F0: .4byte gAction
_080969F4: .4byte 0x02021CBE
_080969F8:
	b _08096A04
_080969FA:
	ldr r0, [r7]
	movs r1, #4
	bl Proc_Goto
	b _08096A04
_08096A04:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8096A0C
sub_8096A0C: @ 0x08096A0C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r1, #0xb6
	lsls r1, r1, #2
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_8095D88
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8096A28
sub_8096A28: @ 0x08096A28
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x5c
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _08096A54 @ =0x000002C6
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_8095D88
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08096A54: .4byte 0x000002C6

	thumb_func_start sub_8096A58
sub_8096A58: @ 0x08096A58
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _08096A74 @ =0x000002C9
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_8095D88
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08096A74: .4byte 0x000002C9

	thumb_func_start sub_8096A78
sub_8096A78: @ 0x08096A78
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _08096A94 @ =0x000002E1
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_8095D88
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08096A94: .4byte 0x000002E1

	thumb_func_start sub_8096A98
sub_8096A98: @ 0x08096A98
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _08096AB8 @ =0x08691190
	adds r0, r1, #0
	bl Proc_EndEach
	ldr r0, _08096ABC @ =ProcScr_Mu
	ldr r1, _08096AC0 @ =sub_80610D0
	bl Proc_ForEach
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08096AB8: .4byte 0x08691190
_08096ABC: .4byte ProcScr_Mu
_08096AC0: .4byte sub_80610D0

	thumb_func_start sub_8096AC4
sub_8096AC4: @ 0x08096AC4
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08096AF4 @ =gBmSt
	ldrb r1, [r0, #4]
	movs r2, #0x10
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x18
	lsrs r0, r1, #0x18
	cmp r0, #0
	bne _08096AEA
	ldr r1, _08096AF8 @ =0x08690E88
	adds r0, r1, #0
	ldr r1, [r7]
	bl SpawnProcLocking
_08096AEA:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08096AF4: .4byte gBmSt
_08096AF8: .4byte 0x08690E88

	thumb_func_start sub_8096AFC
sub_8096AFC: @ 0x08096AFC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08096B24 @ =gBmSt
	ldrb r1, [r0, #4]
	movs r2, #0x10
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x18
	lsrs r0, r1, #0x18
	cmp r0, #0
	bne _08096B2C
	ldr r1, _08096B28 @ =0x08690EC0
	adds r0, r1, #0
	ldr r1, [r7]
	bl SpawnProcLocking
	b _08096B30
	.align 2, 0
_08096B24: .4byte gBmSt
_08096B28: .4byte 0x08690EC0
_08096B2C:
	bl ClearTalk
_08096B30:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8096B38
sub_8096B38: @ 0x08096B38
	push {r4, r7, lr}
	sub sp, #0xc
	add r7, sp, #4
	str r0, [r7]
	movs r0, #0x38
	movs r1, #0
	bl StartBgm
	ldr r0, _08096C5C @ =ProcScr_Mu
	ldr r1, _08096C60 @ =MU_Hide
	bl Proc_ForEach
	bl sub_8097638
	ldr r0, _08096C64 @ =gDispIo
	ldrb r1, [r0, #0xc]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0xc]
	ldr r0, _08096C64 @ =gDispIo
	ldrb r1, [r0, #0x10]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x10]
	ldr r0, _08096C64 @ =gDispIo
	ldrb r1, [r0, #0x14]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0x14]
	ldr r0, _08096C64 @ =gDispIo
	ldrb r1, [r0, #0x18]
	movs r2, #3
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0x18]
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r1, #0
	movs r1, #2
	movs r2, #0
	bl InitTalk
	bl InitFaces
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x5c
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x5e
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x5f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x5d
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x60
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x62
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	movs r1, #0x90
	lsls r1, r1, #2
	adds r0, r1, #0
	movs r1, #3
	bl sub_809777C
	ldr r0, [r7]
	bl sub_8095D5C
	movs r1, #1
	str r1, [sp]
	movs r1, #0x20
	movs r2, #8
	movs r3, #3
	bl StartTalkFace
	ldr r0, _08096C68 @ =0x082DC944
	ldr r1, _08096C6C @ =gBuf
	bl Decompress
	ldr r0, _08096C70 @ =gBg1Tm
	ldr r1, _08096C6C @ =gBuf
	movs r2, #0x80
	lsls r2, r2, #5
	bl TmApplyTsa_t
	movs r0, #0
	str r0, [sp]
	movs r0, #6
	movs r1, #8
	movs r2, #0x14
	movs r3, #0xc
	bl sub_8041358
	movs r0, #2
	bl EnableBgSync
	ldr r0, [r7]
	bl sub_8096F70
	movs r0, #0
	str r0, [r7, #4]
_08096C52:
	ldr r0, [r7, #4]
	cmp r0, #5
	ble _08096C74
	b _08096C94
	.align 2, 0
_08096C5C: .4byte ProcScr_Mu
_08096C60: .4byte MU_Hide
_08096C64: .4byte gDispIo
_08096C68: .4byte 0x082DC944
_08096C6C: .4byte gBuf
_08096C70: .4byte gBg1Tm
_08096C74:
	ldr r0, [r7, #4]
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r2, _08096C90 @ =0x0203DCB8
	adds r1, r0, r2
	adds r0, r1, #0
	movs r1, #0x14
	bl InitText
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _08096C52
	.align 2, 0
_08096C90: .4byte 0x0203DCB8
_08096C94:
	ldr r0, [r7]
	bl sub_8097180
	ldr r0, _08096F50 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08096F50 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x40
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08096F50 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #4
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #0xfb
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0xfb
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2d
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x38
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x31
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x48
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xf0
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x30
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x98
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x33
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #8
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2e
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xf0
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x32
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x38
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0xc0
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F50 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #8
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08096F54 @ =gDispIo+0x3C
	ldr r1, _08096F54 @ =gDispIo+0x3C
	ldrh r2, [r1]
	ldr r3, _08096F58 @ =0x0000FFE0
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08096F54 @ =gDispIo+0x3C
	ldr r1, _08096F54 @ =gDispIo+0x3C
	ldrh r2, [r1]
	movs r3, #8
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08096F54 @ =gDispIo+0x3C
	ldr r1, _08096F54 @ =gDispIo+0x3C
	ldrh r2, [r1]
	ldr r3, _08096F5C @ =0x0000E0FF
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08096F54 @ =gDispIo+0x3C
	ldr r1, _08096F54 @ =gDispIo+0x3C
	ldrh r2, [r1]
	strh r2, [r0]
	ldr r4, _08096F60 @ =0x08336D5C
	movs r0, #3
	bl GetBgChrOffset
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r0, r2
	adds r0, r4, #0
	bl Decompress
	ldr r0, _08096F64 @ =gBg3Tm
	ldr r1, _08096F68 @ =0x083278EC
	movs r2, #0xc0
	lsls r2, r2, #8
	bl TmApplyTsa_t
	ldr r0, _08096F6C @ =0x083278AC
	movs r1, #0xe0
	lsls r1, r1, #1
	movs r2, #0x40
	bl ApplyPaletteExt
	movs r0, #8
	bl EnableBgSync
	add sp, #0xc
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08096F50: .4byte gDispIo
_08096F54: .4byte gDispIo+0x3C
_08096F58: .4byte 0x0000FFE0
_08096F5C: .4byte 0x0000E0FF
_08096F60: .4byte 0x08336D5C
_08096F64: .4byte gBg3Tm
_08096F68: .4byte 0x083278EC
_08096F6C: .4byte 0x083278AC

	thumb_func_start sub_8096F70
sub_8096F70: @ 0x08096F70
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r0, _08096FF8 @ =0x082DCA2C
	ldr r1, _08096FFC @ =0x06014C00
	bl Decompress
	ldr r1, _08097000 @ =0x08691190
	adds r0, r1, #0
	ldr r1, [r7]
	bl SpawnProc
	str r0, [r7, #4]
	ldr r0, [r7, #4]
	adds r1, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xac
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7, #4]
	adds r1, r0, #0
	adds r0, #0x66
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x2c
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, [r7, #4]
	adds r1, r0, #0
	adds r0, #0x68
	ldrh r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	ldr r3, _08097004 @ =0x00004260
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _08097008 @ =0x0810FF78
	movs r1, #0xa0
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r1, _0809700C @ =0x02021CC0
	adds r0, r1, #0
	bl sub_8097014
	ldr r1, _08097010 @ =0x02021CBE
	adds r0, r1, #0
	bl sub_8097084
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08096FF8: .4byte 0x082DCA2C
_08096FFC: .4byte 0x06014C00
_08097000: .4byte 0x08691190
_08097004: .4byte 0x00004260
_08097008: .4byte 0x0810FF78
_0809700C: .4byte 0x02021CC0
_08097010: .4byte 0x02021CBE

	thumb_func_start sub_8097014
sub_8097014: @ 0x08097014
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	ldr r1, _08097044 @ =0x03001570
	adds r0, r1, #0
	movs r1, #1
	bl InitText
	ldr r2, _08097048 @ =0x0835CA44
	ldr r0, [r7]
	movs r1, #3
	bl PutString
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08097044: .4byte 0x03001570
_08097048: .4byte 0x0835CA44

	thumb_func_start sub_809704C
sub_809704C: @ 0x0809704C
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
_08097056:
	ldr r0, [r7, #4]
	cmp r0, #0
	bgt _0809705E
	b _0809707C
_0809705E:
	ldr r0, [r7]
	movs r1, #0
	strh r1, [r0]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r0, #0x40
	movs r1, #0
	strh r1, [r0]
	ldr r0, [r7]
	subs r1, r0, #2
	str r1, [r7]
	ldr r0, [r7, #4]
	subs r1, r0, #1
	str r1, [r7, #4]
	b _08097056
_0809707C:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8097084
sub_8097084: @ 0x08097084
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	ldr r0, [r7]
	movs r1, #6
	bl sub_809704C
	bl GetGold
	adds r2, r0, #0
	ldr r0, [r7]
	movs r1, #2
	bl PutNumber
	movs r0, #1
	bl EnableBgSync
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80970BC
sub_80970BC: @ 0x080970BC
	push {r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x60
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _0809710C @ =0x08691138
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	ldr r1, [r7]
	str r1, [r0, #0x54]
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	str r0, [r7, #4]
_080970FA:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	adds r1, r0, #5
	ldr r0, [r7, #4]
	cmp r0, r1
	blt _08097110
	b _08097150
	.align 2, 0
_0809710C: .4byte 0x08691138
_08097110:
	ldr r1, [r7, #4]
	adds r0, r1, #0
	movs r1, #6
	bl DivRem
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r1, _08097148 @ =0x0203DCB8
	adds r0, r0, r1
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #1
	movs r2, #0x1f
	ands r1, r2
	lsls r2, r1, #5
	adds r1, r2, #0
	lsls r2, r1, #1
	ldr r3, _0809714C @ =0x02022B16
	adds r1, r2, r3
	bl PutBlankText
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _080970FA
	.align 2, 0
_08097148: .4byte 0x0203DCB8
_0809714C: .4byte 0x02022B16
_08097150:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	adds r1, r0, #0
	lsls r0, r1, #4
	adds r1, r0, #0
	adds r0, r1, #0
	subs r0, #0x48
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r2, r0, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	movs r0, #4
	bl EnableBgSync
	add sp, #0x10
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8097180
sub_8097180: @ 0x08097180
	push {r4, r5, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	str r0, [r7, #4]
_0809719C:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	adds r1, r0, #5
	ldr r0, [r7, #4]
	cmp r0, r1
	blt _080971AE
	b _080971D8
_080971AE:
	ldr r1, [r7, #4]
	adds r0, r1, #0
	movs r1, #6
	bl DivRem
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r2, _080971D4 @ =0x0203DCB8
	adds r1, r0, r2
	adds r0, r1, #0
	bl ClearText
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _0809719C
	.align 2, 0
_080971D4: .4byte 0x0203DCB8
_080971D8:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	str r0, [r7, #4]
_080971E2:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	adds r1, r0, #5
	ldr r0, [r7, #4]
	cmp r0, r1
	blt _080971F4
	b _08097250
_080971F4:
	ldr r1, [r7, #4]
	adds r0, r1, #0
	movs r1, #6
	bl DivRem
	str r0, [r7, #0xc]
	ldr r0, [r7]
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, #0x30
	adds r1, r0, r1
	ldrh r0, [r1]
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	cmp r0, #0
	bne _08097218
	b _08097250
_08097218:
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r1, _08097248 @ =0x0203DCB8
	adds r0, r0, r1
	ldr r1, [r7, #8]
	ldr r3, [r7]
	ldr r2, [r3, #0x2c]
	ldr r3, [r7, #4]
	adds r4, r3, #0
	lsls r3, r4, #1
	movs r4, #0x1f
	ands r3, r4
	lsls r4, r3, #5
	adds r3, r4, #0
	lsls r4, r3, #1
	ldr r5, _0809724C @ =0x02022B16
	adds r3, r4, r5
	bl sub_8097444
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _080971E2
	.align 2, 0
_08097248: .4byte 0x0203DCB8
_0809724C: .4byte 0x02022B16
_08097250:
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x5f
	ldrb r0, [r1]
	adds r1, r0, #0
	lsls r0, r1, #4
	adds r1, r0, #0
	adds r0, r1, #0
	subs r0, #0x48
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r2, r0, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	movs r0, #4
	bl EnableBgSync
	add sp, #0x10
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8097280
sub_8097280: @ 0x08097280
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x54]
	adds r0, r1, #0
	bl sub_80961F4
	ldr r0, [r7]
	ldr r1, [r0, #0x54]
	adds r0, r1, #0
	bl sub_8097180
	ldr r0, [r7]
	bl Proc_Break
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80972AC
sub_80972AC: @ 0x080972AC
	push {r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	adds r1, r0, #0
	adds r0, #0x60
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #1
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r1, _080972F4 @ =0x08691148
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	ldr r1, [r7]
	str r1, [r0, #0x54]
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	movs r0, #0
	str r0, [r7, #4]
_080972EC:
	ldr r0, [r7, #4]
	cmp r0, #4
	ble _080972F8
	b _08097338
	.align 2, 0
_080972F4: .4byte 0x08691148
_080972F8:
	ldr r1, [r7, #4]
	adds r0, r1, #0
	movs r1, #6
	bl DivRem
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r1, _08097330 @ =0x0203DCB8
	adds r0, r0, r1
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #1
	movs r2, #0x1f
	ands r1, r2
	lsls r2, r1, #5
	adds r1, r2, #0
	lsls r2, r1, #1
	ldr r3, _08097334 @ =0x02022B16
	adds r1, r2, r3
	bl PutBlankText
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _080972EC
	.align 2, 0
_08097330: .4byte 0x0203DCB8
_08097334: .4byte 0x02022B16
_08097338:
	ldr r2, _08097350 @ =0x0000FFB8
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	movs r0, #4
	bl EnableBgSync
	add sp, #0x10
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08097350: .4byte 0x0000FFB8

	thumb_func_start sub_8097354
sub_8097354: @ 0x08097354
	push {r4, r5, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	movs r0, #0
	str r0, [r7, #4]
_0809736A:
	ldr r0, [r7, #4]
	cmp r0, #4
	ble _08097372
	b _0809739C
_08097372:
	ldr r1, [r7, #4]
	adds r0, r1, #0
	movs r1, #6
	bl DivRem
	str r0, [r7, #0xc]
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r2, _08097398 @ =0x0203DCB8
	adds r1, r0, r2
	adds r0, r1, #0
	bl ClearText
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _0809736A
	.align 2, 0
_08097398: .4byte 0x0203DCB8
_0809739C:
	movs r0, #0
	str r0, [r7, #4]
_080973A0:
	ldr r0, [r7, #4]
	cmp r0, #4
	ble _080973A8
	b _08097408
_080973A8:
	ldr r1, [r7, #4]
	adds r0, r1, #0
	movs r1, #6
	bl DivRem
	str r0, [r7, #0xc]
	ldr r1, [r7]
	ldr r0, [r1, #0x2c]
	ldr r1, [r7, #4]
	adds r2, r1, #0
	lsls r1, r2, #1
	adds r0, #0x1c
	adds r1, r0, r1
	ldrh r0, [r1]
	str r0, [r7, #8]
	ldr r0, [r7, #8]
	cmp r0, #0
	bne _080973CE
	b _08097408
_080973CE:
	ldr r0, [r7, #0xc]
	adds r1, r0, #0
	lsls r0, r1, #3
	ldr r1, _08097400 @ =0x0203DCB8
	adds r0, r0, r1
	ldr r1, [r7, #8]
	ldr r3, [r7]
	ldr r2, [r3, #0x2c]
	ldr r3, [r7, #4]
	adds r4, r3, #0
	lsls r3, r4, #1
	movs r4, #0x1f
	ands r3, r4
	lsls r4, r3, #5
	adds r3, r4, #0
	lsls r4, r3, #1
	ldr r5, _08097404 @ =0x02022B16
	adds r3, r4, r5
	bl sub_80974A0
	ldr r0, [r7, #4]
	adds r1, r0, #1
	str r1, [r7, #4]
	b _080973A0
	.align 2, 0
_08097400: .4byte 0x0203DCB8
_08097404: .4byte 0x02022B16
_08097408:
	movs r0, #4
	bl EnableBgSync
	add sp, #0x10
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8097418
sub_8097418: @ 0x08097418
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	ldr r1, [r0, #0x54]
	adds r0, r1, #0
	bl sub_809668C
	ldr r0, [r7]
	ldr r1, [r0, #0x54]
	adds r0, r1, #0
	bl sub_8097354
	ldr r0, [r7]
	bl Proc_Break
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8097444
sub_8097444: @ 0x08097444
	push {r4, r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, [r7, #8]
	ldr r1, [r7, #4]
	bl sub_809750C
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	str r0, [r7, #0x10]
	ldr r4, [r7, #4]
	ldr r0, [r7, #8]
	ldr r1, [r7, #4]
	bl IsItemDisplayUseable
	lsls r1, r0, #0x18
	asrs r2, r1, #0x18
	ldr r3, [r7, #0xc]
	ldr r0, [r7]
	adds r1, r4, #0
	bl sub_8016694
	ldr r0, [r7, #0xc]
	adds r4, r0, #0
	adds r4, #0x22
	bl GetGold
	ldr r1, [r7, #0x10]
	cmp r0, r1
	blt _0809748C
	movs r1, #2
	b _0809748E
_0809748C:
	movs r1, #1
_0809748E:
	ldr r2, [r7, #0x10]
	adds r0, r4, #0
	bl PutNumber
	add sp, #0x14
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80974A0
sub_80974A0: @ 0x080974A0
	push {r4, r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r4, [r7, #4]
	ldr r0, [r7, #8]
	ldr r1, [r7, #4]
	bl IsItemDisplayUseable
	lsls r1, r0, #0x18
	asrs r2, r1, #0x18
	ldr r3, [r7, #0xc]
	ldr r0, [r7]
	adds r1, r4, #0
	bl sub_8016694
	ldr r1, [r7, #4]
	adds r0, r1, #0
	bl sub_80975C8
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _080974F2
	ldr r0, [r7, #0xc]
	adds r4, r0, #0
	adds r4, #0x22
	ldr r1, [r7, #4]
	adds r0, r1, #0
	bl sub_80975A0
	lsls r1, r0, #0x10
	lsrs r2, r1, #0x10
	adds r0, r4, #0
	movs r1, #2
	bl PutNumber
	b _080974FE
_080974F2:
	ldr r3, _08097508 @ =0x0835CA78
	ldr r0, [r7]
	movs r1, #0x5c
	movs r2, #2
	bl Text_InsertDrawString
_080974FE:
	add sp, #0x10
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08097508: .4byte 0x0835CA78

	thumb_func_start sub_809750C
sub_809750C: @ 0x0809750C
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r1, [r7, #4]
	adds r0, r1, #0
	bl GetItemValue
	str r0, [r7, #8]
	ldr r0, _0809757C @ =gBmSt
	ldrb r1, [r0, #4]
	movs r2, #0x10
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x18
	lsrs r0, r1, #0x18
	cmp r0, #0
	beq _08097558
	ldr r0, [r7, #8]
	bl __floatsidf
	adds r3, r1, #0
	adds r2, r0, #0
	adds r1, r3, #0
	adds r0, r2, #0
	ldr r2, _08097580 @ =0x3FF80000
	ldr r3, _08097584 @ =0x00000000
	bl __muldf3
	adds r3, r1, #0
	adds r2, r0, #0
	adds r1, r3, #0
	adds r0, r2, #0
	bl __fixdfsi
	str r0, [r7, #8]
_08097558:
	ldr r0, [r7]
	movs r1, #0x6e
	bl UnitHasItem
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _0809758A
	ldr r0, [r7, #8]
	asrs r1, r0, #0x1f
	lsrs r2, r1, #0x1f
	adds r1, r0, r2
	asrs r0, r1, #1
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r1, r0, #0x10
	adds r0, r1, #0
	b _08097596
	.align 2, 0
_0809757C: .4byte gBmSt
_08097580: .4byte 0x3FF80000
_08097584: .4byte 0x00000000
_08097588:
	.byte 0x05, 0xE0
_0809758A:
	ldr r1, [r7, #8]
	adds r0, r1, #0
	lsls r2, r0, #0x10
	lsrs r1, r2, #0x10
	adds r0, r1, #0
	b _08097596
_08097596:
	add sp, #0xc
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_80975A0
sub_80975A0: @ 0x080975A0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl GetItemValue
	asrs r1, r0, #0x1f
	lsrs r2, r1, #0x1f
	adds r1, r0, r2
	asrs r0, r1, #1
	adds r1, r0, #0
	lsls r0, r1, #0x10
	lsrs r1, r0, #0x10
	adds r0, r1, #0
	b _080975C0
_080975C0:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_80975C8
sub_80975C8: @ 0x080975C8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl GetItemAttributes
	movs r1, #0x10
	ands r0, r1
	cmp r0, #0
	beq _080975E2
	movs r0, #0
	b _080975F8
_080975E2:
	ldr r0, [r7]
	bl sub_80975A0
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	bne _080975F4
	movs r0, #0
	b _080975F8
_080975F4:
	movs r0, #1
	b _080975F8
_080975F8:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8097600
sub_8097600: @ 0x08097600
	push {r4, r5, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	adds r1, #0x64
	movs r2, #0
	ldrsh r0, [r1, r2]
	ldr r2, [r7]
	adds r1, r2, #0
	adds r2, #0x66
	movs r3, #0
	ldrsh r1, [r2, r3]
	ldr r2, _08097634 @ =0x08691158
	ldr r4, [r7]
	adds r3, r4, #0
	adds r4, #0x68
	movs r5, #0
	ldrsh r3, [r4, r5]
	bl PutOamHiRam
	add sp, #4
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08097634: .4byte 0x08691158

	thumb_func_start sub_8097638
sub_8097638: @ 0x08097638
	push {r7, lr}
	mov r7, sp
	ldr r0, _08097714 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08097714 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08097714 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #4
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08097714 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08097714 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08097714 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08097714 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0xbf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08097714 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	movs r0, #0
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #3
	movs r1, #0
	movs r2, #0
	bl SetBgOffset
	ldr r1, _08097718 @ =gBg0Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	ldr r1, _0809771C @ =gBg1Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	ldr r1, _08097720 @ =gBg2Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	ldr r1, _08097724 @ =gBg3Tm
	adds r0, r1, #0
	movs r1, #0
	bl TmFill
	movs r0, #0xf
	bl EnableBgSync
	bl ResetText
	bl LoadUiFrameGraphics
	bl InitIcons
	movs r0, #4
	bl ApplyIconPalettes
	movs r1, #1
	rsbs r1, r1, #0
	movs r0, #0
	bl sub_8070E70
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08097714: .4byte gDispIo
_08097718: .4byte gBg0Tm
_0809771C: .4byte gBg1Tm
_08097720: .4byte gBg2Tm
_08097724: .4byte gBg3Tm

	thumb_func_start sub_8097728
sub_8097728: @ 0x08097728
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl sub_809773C
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_809773C
sub_809773C: @ 0x0809773C
	push {r7, lr}
	mov r7, sp
	bl sub_8097DD8
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _0809775A
	movs r2, #0xc9
	lsls r2, r2, #6
	movs r0, #0x78
	movs r1, #0x40
	movs r3, #1
	bl sub_80977C0
_0809775A:
	bl sub_8097DFC
	lsls r1, r0, #0x18
	asrs r0, r1, #0x18
	cmp r0, #0
	beq _08097774
	movs r2, #0xc9
	lsls r2, r2, #6
	movs r0, #0x78
	movs r1, #0x98
	movs r3, #0
	bl sub_80977C0
_08097774:
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809777C
sub_809777C: @ 0x0809777C
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	ldr r0, _080977B4 @ =0x08320E18
	ldr r1, [r7]
	lsls r2, r1, #0x16
	lsrs r1, r2, #0x16
	lsls r2, r1, #5
	ldr r3, _080977B8 @ =0x06010000
	adds r1, r2, r3
	bl Decompress
	ldr r0, _080977BC @ =0x08319E88
	ldr r2, [r7, #4]
	adds r1, r2, #0
	adds r1, #0x10
	adds r2, r1, #0
	lsls r1, r2, #5
	movs r2, #0x20
	bl ApplyPaletteExt
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080977B4: .4byte 0x08320E18
_080977B8: .4byte 0x06010000
_080977BC: .4byte 0x08319E88

	thumb_func_start sub_80977C0
sub_80977C0: @ 0x080977C0
	push {r4, r7, lr}
	sub sp, #0x1c
	add r7, sp, #4
	str r0, [r7]
	str r1, [r7, #4]
	adds r0, r2, #0
	str r3, [r7, #0xc]
	adds r1, r7, #0
	adds r1, #8
	strh r0, [r1]
	bl GetGameTime
	adds r1, r0, #0
	adds r0, r1, #0
	movs r1, #0x28
	bl DivRem
	str r0, [r7, #0x10]
	ldr r1, [r7, #0x10]
	adds r0, r1, #0
	movs r1, #8
	bl Div
	adds r1, r0, #0
	lsls r0, r1, #1
	str r0, [r7, #0x10]
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bne _08097802
	movs r0, #0x80
	lsls r0, r0, #6
	str r0, [r7, #0x14]
	b _08097806
_08097802:
	movs r0, #0
	str r0, [r7, #0x14]
_08097806:
	ldr r0, [r7]
	ldr r2, [r7, #0x14]
	adds r1, r0, #0
	orrs r1, r2
	ldr r2, [r7, #4]
	ldr r3, _0809782C @ =0x085C39D8
	adds r0, r7, #0
	adds r0, #8
	ldrh r4, [r0]
	ldr r0, [r7, #0x10]
	adds r4, r4, r0
	str r4, [sp]
	movs r0, #2
	bl PutSpriteExt
	add sp, #0x1c
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809782C: .4byte 0x085C39D8

	thumb_func_start sub_8097830
sub_8097830: @ 0x08097830
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	movs r0, #0xb9
	movs r1, #8
	bl PlaySeDelayed
	ldr r0, _080978A4 @ =gAction
	ldrb r1, [r0, #0x11]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x14
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x11]
	bl GetGold
	str r0, [r7, #4]
	ldr r1, [r7]
	ldr r0, [r1, #0x2c]
	ldr r1, [r7]
	ldr r3, [r7]
	adds r2, r3, #0
	adds r3, #0x5c
	ldrb r2, [r3]
	adds r3, r2, #0
	lsls r2, r3, #1
	adds r1, #0x30
	adds r2, r1, r2
	ldrh r1, [r2]
	bl sub_809750C
	lsls r1, r0, #0x10
	lsrs r0, r1, #0x10
	ldr r1, [r7, #4]
	subs r0, r1, r0
	str r0, [r7, #4]
	ldr r1, [r7, #4]
	adds r0, r1, #0
	bl SetGold
	ldr r0, [r7]
	bl sub_8095F5C
	ldr r0, [r7]
	bl sub_8097180
	ldr r1, _080978A8 @ =0x02021CBE
	adds r0, r1, #0
	bl sub_8097084
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080978A4: .4byte gAction
_080978A8: .4byte 0x02021CBE

	thumb_func_start sub_80978AC
sub_80978AC: @ 0x080978AC
	push {r7, lr}
	sub sp, #0x10
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	adds r0, r2, #0
	adds r1, r7, #0
	adds r1, #8
	strb r0, [r1]
	ldr r0, [r7]
	cmp r0, #0
	bge _080978C8
	movs r0, #0
	str r0, [r7]
_080978C8:
	ldr r0, [r7]
	ldr r1, [r7, #4]
	cmp r0, r1
	blt _080978D6
	ldr r0, [r7, #4]
	subs r1, r0, #1
	str r1, [r7]
_080978D6:
	ldr r0, [r7]
	str r0, [r7, #0xc]
	ldr r1, _08097920 @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r2, #0x40
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _0809792C
	ldr r0, [r7]
	cmp r0, #0
	bne _08097924
	adds r0, r7, #0
	adds r0, #8
	movs r1, #0
	ldrsb r1, [r0, r1]
	cmp r1, #0
	beq _0809791E
	ldr r1, _08097920 @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #0x40
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _0809791E
	ldr r0, [r7, #4]
	subs r1, r0, #1
	str r1, [r7]
_0809791E:
	b _0809792A
	.align 2, 0
_08097920: .4byte gKeySt
_08097924:
	ldr r0, [r7]
	subs r1, r0, #1
	str r1, [r7]
_0809792A:
	b _0809797E
_0809792C:
	ldr r1, _08097974 @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	movs r2, #0x80
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _0809797E
	ldr r1, [r7, #4]
	subs r0, r1, #1
	ldr r1, [r7]
	cmp r1, r0
	bne _08097978
	adds r0, r7, #0
	adds r0, #8
	movs r1, #0
	ldrsb r1, [r0, r1]
	cmp r1, #0
	beq _08097972
	ldr r1, _08097974 @ =gKeySt
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #0x80
	adds r0, r1, #0
	ands r0, r2
	adds r2, r0, #0
	lsls r1, r2, #0x10
	lsrs r0, r1, #0x10
	cmp r0, #0
	beq _08097972
	movs r0, #0
	str r0, [r7]
_08097972:
	b _0809797E
	.align 2, 0
_08097974: .4byte gKeySt
_08097978:
	ldr r0, [r7]
	adds r1, r0, #1
	str r1, [r7]
_0809797E:
	ldr r0, [r7, #0xc]
	ldr r1, [r7]
	cmp r0, r1
	beq _08097998
	ldr r0, _080979A0 @ =gPlaySt
	ldrb r1, [r0, #0x1d]
	lsls r2, r1, #0x1e
	lsrs r0, r2, #0x1f
	cmp r0, #0
	bne _08097998
	movs r0, #0x66
	bl m4aSongNumStart
_08097998:
	ldr r1, [r7]
	adds r0, r1, #0
	b _080979A4
	.align 2, 0
_080979A0: .4byte gPlaySt
_080979A4:
	add sp, #0x10
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_80979AC
sub_80979AC: @ 0x080979AC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _080979C4 @ =0x0203DD04
	ldr r1, [r7]
	str r1, [r0]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080979C4: .4byte 0x0203DD04

	thumb_func_start sub_80979C8
sub_80979C8: @ 0x080979C8
	push {r7, lr}
	sub sp, #0x14
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	str r3, [r7, #0xc]
	ldr r0, _080979F0 @ =0x0203DD04
	ldr r1, [r0]
	str r1, [r7, #0x10]
	ldr r0, _080979F0 @ =0x0203DD04
	ldr r1, [r7]
	str r1, [r0]
	ldr r0, [r7]
	ldr r1, [r7, #0x10]
	cmp r0, r1
	bne _080979F4
	movs r0, #0
	b _08097A4A
	.align 2, 0
_080979F0: .4byte 0x0203DD04
_080979F4:
	ldr r0, [r7, #8]
	ldr r1, [r7, #4]
	cmp r0, r1
	ble _08097A00
	movs r0, #0
	b _08097A4A
_08097A00:
	ldr r0, [r7]
	ldr r1, [r7, #0x10]
	cmp r0, r1
	bge _08097A24
	ldr r0, [r7, #0xc]
	cmp r0, #0
	bne _08097A12
	movs r0, #0
	b _08097A4A
_08097A12:
	ldr r0, [r7]
	ldr r1, [r7, #0xc]
	subs r0, r0, r1
	cmp r0, #0
	bgt _08097A22
	movs r0, #1
	rsbs r0, r0, #0
	b _08097A4A
_08097A22:
	b _08097A46
_08097A24:
	ldr r0, [r7, #8]
	ldr r1, [r7, #0xc]
	adds r0, r0, r1
	ldr r1, [r7, #4]
	cmp r0, r1
	bne _08097A34
	movs r0, #0
	b _08097A4A
_08097A34:
	ldr r0, [r7]
	ldr r1, [r7, #0xc]
	subs r0, r0, r1
	ldr r2, [r7, #8]
	subs r1, r2, #1
	cmp r0, r1
	blt _08097A46
	movs r0, #1
	b _08097A4A
_08097A46:
	movs r0, #0
	b _08097A4A
_08097A4A:
	add sp, #0x14
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8097A54
sub_8097A54: @ 0x08097A54
	push {r7, lr}
	sub sp, #0xc
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	str r2, [r7, #8]
	ldr r0, [r7]
	ldr r1, [r7, #4]
	subs r0, r0, r1
	cmp r0, #0
	blt _08097A78
	ldr r0, [r7]
	ldr r1, [r7, #4]
	subs r0, r0, r1
	ldr r1, [r7, #8]
	cmp r0, r1
	blt _08097A86
	b _08097A8C
_08097A78:
	ldr r0, [r7, #4]
	ldr r1, [r7]
	subs r0, r0, r1
	ldr r1, [r7, #8]
	cmp r0, r1
	blt _08097A86
	b _08097A8C
_08097A86:
	ldr r1, [r7, #4]
	adds r0, r1, #0
	b _08097ABA
_08097A8C:
	ldr r0, [r7, #4]
	ldr r1, [r7]
	subs r0, r0, r1
	cmp r0, #0
	bgt _08097AAC
	ldr r0, [r7]
	ldr r1, [r7, #4]
	ldr r2, [r7]
	subs r1, r1, r2
	cmp r1, #0
	bge _08097AAA
	ldr r1, [r7, #8]
	adds r2, r1, #0
	rsbs r1, r2, #0
	adds r0, r0, r1
_08097AAA:
	b _08097AB2
_08097AAC:
	ldr r1, [r7]
	ldr r2, [r7, #8]
	adds r0, r1, r2
_08097AB2:
	str r0, [r7]
	ldr r1, [r7]
	adds r0, r1, #0
	b _08097ABA
_08097ABA:
	add sp, #0xc
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8097AC4
sub_8097AC4: @ 0x08097AC4
	push {r4, r5, r7, lr}
	sub sp, #8
	mov r7, sp
	adds r5, r0, #0
	adds r4, r1, #0
	adds r1, r2, #0
	adds r0, r3, #0
	adds r2, r7, #0
	adds r3, r5, #0
	strh r3, [r2]
	adds r2, r7, #2
	adds r3, r4, #0
	strh r3, [r2]
	adds r2, r7, #4
	strh r1, [r2]
	adds r1, r7, #6
	strh r0, [r1]
	adds r0, r7, #0
	ldrh r1, [r0]
	adds r0, r1, #0
	bl sub_80979AC
	ldr r1, _08097BBC @ =0x086911A8
	ldr r0, [r1]
	adds r1, r7, #0
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrh r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r1, _08097BBC @ =0x086911A8
	ldr r0, [r1]
	adds r1, r7, #2
	ldrh r2, [r0, #2]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrh r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #2]
	ldr r1, _08097BBC @ =0x086911A8
	ldr r0, [r1]
	adds r1, r7, #4
	ldrh r2, [r0, #4]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrh r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #4]
	ldr r1, _08097BBC @ =0x086911A8
	ldr r0, [r1]
	adds r1, r7, #6
	ldrh r2, [r0, #6]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	ldrh r1, [r1]
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #6]
	ldr r1, _08097BBC @ =0x086911A8
	ldr r0, [r1]
	ldrh r1, [r0, #8]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x10
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #8]
	ldr r1, _08097BBC @ =0x086911A8
	ldr r0, [r1]
	ldrh r1, [r0, #0xa]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #4
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0xa]
	ldr r1, _08097BBC @ =0x086911A8
	ldr r0, [r1]
	ldr r1, [r7, #0x1c]
	str r1, [r0, #0x14]
	ldr r1, _08097BBC @ =0x086911A8
	ldr r0, [r1]
	ldr r1, [r7, #0x20]
	str r1, [r0, #0x18]
	ldr r1, _08097BBC @ =0x086911A8
	ldr r0, [r1]
	ldr r1, [r7, #0x18]
	rsbs r2, r1, #0
	str r2, [r0, #0x10]
	ldr r1, _08097BBC @ =0x086911A8
	ldr r0, [r1]
	adds r1, r7, #6
	ldrh r2, [r1]
	adds r3, r2, #0
	lsls r1, r3, #4
	ldrh r2, [r0, #0xc]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0xc]
	add sp, #8
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08097BBC: .4byte 0x086911A8

	thumb_func_start sub_8097BC0
sub_8097BC0: @ 0x08097BC0
	push {r4, r7, lr}
	mov r7, sp
	ldr r0, _08097C1C @ =0x086911A8
	ldr r1, [r0]
	ldrh r0, [r1]
	ldr r2, _08097C1C @ =0x086911A8
	ldr r1, [r2]
	ldrh r2, [r1, #2]
	adds r1, r2, #0
	movs r2, #0
	bl sub_80978AC
	adds r1, r0, #0
	ldr r2, _08097C1C @ =0x086911A8
	ldr r0, [r2]
	ldrh r2, [r0]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0]
	ldr r0, _08097C1C @ =0x086911A8
	ldr r1, [r0]
	ldrh r0, [r1]
	ldr r1, _08097C1C @ =0x086911A8
	ldr r2, [r1]
	ldrh r1, [r2, #2]
	ldr r2, _08097C1C @ =0x086911A8
	ldr r3, [r2]
	ldrh r2, [r3, #4]
	ldr r3, _08097C1C @ =0x086911A8
	ldr r4, [r3]
	ldrh r3, [r4, #6]
	bl sub_80979C8
	cmp r0, #0
	beq _08097C26
	cmp r0, #0
	bgt _08097C20
	movs r1, #1
	cmn r0, r1
	beq _08097C74
	b _08097C26
	.align 2, 0
_08097C1C: .4byte 0x086911A8
_08097C20:
	cmp r0, #1
	beq _08097C28
	b _08097C26
_08097C26:
	b _08097CB4
_08097C28:
	ldr r1, _08097C70 @ =0x086911A8
	ldr r0, [r1]
	ldr r1, _08097C70 @ =0x086911A8
	ldr r0, [r1]
	ldr r2, _08097C70 @ =0x086911A8
	ldr r1, [r2]
	ldrh r2, [r1, #6]
	adds r1, r2, #1
	ldrh r2, [r0, #6]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #6]
	ldr r1, _08097C70 @ =0x086911A8
	ldr r0, [r1]
	ldr r1, _08097C70 @ =0x086911A8
	ldr r2, [r1]
	ldr r1, [r2, #0x18]
	ldr r2, _08097C70 @ =0x086911A8
	ldr r3, [r2]
	ldrh r2, [r3, #6]
	ldr r4, _08097C70 @ =0x086911A8
	ldr r3, [r4]
	ldrh r4, [r3, #4]
	adds r3, r2, r4
	subs r2, r3, #1
	ldr r3, [r0, #0x14]
	adds r0, r1, #0
	adds r1, r2, #0
	bl _call_via_r3
	b _08097CB4
	.align 2, 0
_08097C70: .4byte 0x086911A8
_08097C74:
	ldr r1, _08097CB0 @ =0x086911A8
	ldr r0, [r1]
	ldr r1, _08097CB0 @ =0x086911A8
	ldr r0, [r1]
	ldr r2, _08097CB0 @ =0x086911A8
	ldr r1, [r2]
	ldrh r2, [r1, #6]
	subs r1, r2, #1
	ldrh r2, [r0, #6]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #6]
	ldr r1, _08097CB0 @ =0x086911A8
	ldr r0, [r1]
	ldr r1, _08097CB0 @ =0x086911A8
	ldr r2, [r1]
	ldr r1, [r2, #0x18]
	ldr r2, _08097CB0 @ =0x086911A8
	ldr r3, [r2]
	ldrh r2, [r3, #6]
	ldr r3, [r0, #0x14]
	adds r0, r1, #0
	adds r1, r2, #0
	bl _call_via_r3
	b _08097CB4
	.align 2, 0
_08097CB0: .4byte 0x086911A8
_08097CB4:
	ldr r0, _08097CF0 @ =0x086911A8
	ldr r1, [r0]
	ldrh r0, [r1, #0xc]
	ldr r1, _08097CF0 @ =0x086911A8
	ldr r2, [r1]
	ldrh r1, [r2, #6]
	ldr r3, _08097CF0 @ =0x086911A8
	ldr r2, [r3]
	ldrh r3, [r2, #8]
	muls r1, r3, r1
	ldr r2, _08097CF0 @ =0x086911A8
	ldr r3, [r2]
	ldrh r2, [r3, #0xa]
	bl sub_8097A54
	adds r1, r0, #0
	ldr r2, _08097CF0 @ =0x086911A8
	ldr r0, [r2]
	ldrh r2, [r0, #0xc]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0xc]
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08097CF0: .4byte 0x086911A8

	thumb_func_start sub_8097CF4
sub_8097CF4: @ 0x08097CF4
	push {r7, lr}
	mov r7, sp
	ldr r1, _08097D04 @ =0x086911A8
	ldr r0, [r1]
	ldrh r1, [r0]
	adds r0, r1, #0
	b _08097D08
	.align 2, 0
_08097D04: .4byte 0x086911A8
_08097D08:
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8097D10
sub_8097D10: @ 0x08097D10
	push {r7, lr}
	mov r7, sp
	ldr r1, _08097D28 @ =0x086911A8
	ldr r0, [r1]
	ldr r2, _08097D28 @ =0x086911A8
	ldr r1, [r2]
	ldrh r2, [r1, #0xc]
	ldr r0, [r0, #0x10]
	adds r1, r2, r0
	adds r0, r1, #0
	b _08097D2C
	.align 2, 0
_08097D28: .4byte 0x086911A8
_08097D2C:
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8097D34
sub_8097D34: @ 0x08097D34
	push {r7, lr}
	mov r7, sp
	ldr r1, _08097D44 @ =0x086911A8
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	adds r0, r1, #0
	b _08097D48
	.align 2, 0
_08097D44: .4byte 0x086911A8
_08097D48:
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8097D50
sub_8097D50: @ 0x08097D50
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _08097D78 @ =0x086911A8
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	ldrh r2, [r0, #8]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #8]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08097D78: .4byte 0x086911A8

	thumb_func_start sub_8097D7C
sub_8097D7C: @ 0x08097D7C
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _08097DA4 @ =0x086911A8
	ldr r0, [r1]
	ldr r2, [r7]
	adds r1, r2, #0
	ldrh r2, [r0, #0xa]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0, #0xa]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08097DA4: .4byte 0x086911A8

	thumb_func_start sub_8097DA8
sub_8097DA8: @ 0x08097DA8
	push {r7, lr}
	mov r7, sp
	ldr r0, _08097DC8 @ =0x086911A8
	ldr r1, [r0]
	ldrh r0, [r1, #0xc]
	ldr r1, _08097DC8 @ =0x086911A8
	ldr r2, [r1]
	ldrh r1, [r2, #6]
	ldr r3, _08097DC8 @ =0x086911A8
	ldr r2, [r3]
	ldrh r3, [r2, #8]
	muls r1, r3, r1
	cmp r0, r1
	beq _08097DCC
	movs r0, #1
	b _08097DD0
	.align 2, 0
_08097DC8: .4byte 0x086911A8
_08097DCC:
	movs r0, #0
	b _08097DD0
_08097DD0:
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8097DD8
sub_8097DD8: @ 0x08097DD8
	push {r7, lr}
	mov r7, sp
	ldr r1, _08097DEC @ =0x086911A8
	ldr r0, [r1]
	ldrh r1, [r0, #6]
	cmp r1, #0
	beq _08097DF0
	movs r0, #1
	b _08097DF4
	.align 2, 0
_08097DEC: .4byte 0x086911A8
_08097DF0:
	movs r0, #0
	b _08097DF4
_08097DF4:
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8097DFC
sub_8097DFC: @ 0x08097DFC
	push {r7, lr}
	mov r7, sp
	ldr r0, _08097E1C @ =0x086911A8
	ldr r1, [r0]
	ldrh r0, [r1, #6]
	ldr r2, _08097E1C @ =0x086911A8
	ldr r1, [r2]
	ldrh r2, [r1, #4]
	adds r0, r0, r2
	ldr r2, _08097E1C @ =0x086911A8
	ldr r1, [r2]
	ldrh r2, [r1, #2]
	cmp r0, r2
	bge _08097E20
	movs r0, #1
	b _08097E24
	.align 2, 0
_08097E1C: .4byte 0x086911A8
_08097E20:
	movs r0, #0
	b _08097E24
_08097E24:
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8097E2C
sub_8097E2C: @ 0x08097E2C
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	ldr r0, _08097E6C @ =gMPlayTable
	ldr r2, _08097E70 @ =gSongTable
	adds r1, r2, #0
	movs r1, #0xe6
	lsls r1, r1, #1
	adds r2, r2, r1
	ldrh r1, [r2]
	adds r3, r1, #0
	lsls r2, r3, #1
	adds r2, r2, r1
	lsls r1, r2, #2
	adds r0, r0, r1
	ldr r1, [r0]
	str r1, [r7, #4]
	ldr r0, [r7, #4]
	ldr r1, [r0, #4]
	lsls r2, r1, #0x10
	lsrs r0, r2, #0x10
	cmp r0, #0
	bne _08097E76
	ldr r0, [r7, #4]
	ldr r1, [r0, #4]
	lsrs r2, r1, #0x1f
	lsls r0, r2, #0x1f
	cmp r0, #0
	bne _08097E76
	movs r0, #0
	b _08097E7A
	.align 2, 0
_08097E6C: .4byte gMPlayTable
_08097E70: .4byte gSongTable
_08097E74:
	.byte 0x01, 0xE0
_08097E76:
	movs r0, #1
	b _08097E7A
_08097E7A:
	add sp, #8
	pop {r7}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8097E84
sub_8097E84: @ 0x08097E84
	push {r7, lr}
	mov r7, sp
	ldr r0, _08097EA4 @ =gActiveUnit
	ldr r1, [r0]
	adds r0, r1, #0
	bl ArenaBegin
	ldr r1, _08097EA8 @ =0x086911AC
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08097EA4: .4byte gActiveUnit
_08097EA8: .4byte 0x086911AC

	thumb_func_start sub_8097EAC
sub_8097EAC: @ 0x08097EAC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	ldr r1, _08097EC8 @ =0x0869130C
	adds r0, r1, #0
	movs r1, #3
	bl SpawnProc
	str r0, [r7]
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08097EC8: .4byte 0x0869130C

	thumb_func_start sub_8097ECC
sub_8097ECC: @ 0x08097ECC
	push {r4, r7, lr}
	sub sp, #8
	add r7, sp, #4
	str r0, [r7]
	ldr r0, _08098220 @ =ProcScr_Mu
	ldr r1, _08098224 @ =MU_Hide
	bl Proc_ForEach
	bl sub_8097638
	ldr r0, _08098228 @ =gDispIo
	ldrb r1, [r0, #0xc]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0xc]
	ldr r0, _08098228 @ =gDispIo
	ldrb r1, [r0, #0x10]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	movs r3, #2
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x10]
	ldr r0, _08098228 @ =gDispIo
	ldrb r1, [r0, #0x14]
	movs r2, #0xfc
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0x14]
	ldr r0, _08098228 @ =gDispIo
	ldrb r1, [r0, #0x18]
	movs r2, #3
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0x18]
	movs r1, #0x80
	lsls r1, r1, #2
	adds r0, r1, #0
	movs r1, #2
	movs r2, #0
	bl InitTalk
	bl InitFaces
	movs r0, #1
	str r0, [sp]
	movs r0, #0xba
	movs r1, #0x20
	movs r2, #8
	movs r3, #3
	bl StartTalkFace
	ldr r0, _0809822C @ =0x082DC944
	ldr r1, _08098230 @ =gBuf
	bl Decompress
	ldr r0, _08098234 @ =gBg1Tm
	ldr r1, _08098230 @ =gBuf
	movs r2, #0x80
	lsls r2, r2, #5
	bl TmApplyTsa_t
	ldr r1, _08098238 @ =0x02022508
	adds r0, r1, #0
	movs r1, #0x1e
	movs r2, #0xc
	movs r3, #0
	bl TmFillRect_t
	movs r0, #2
	bl EnableBgSync
	ldr r0, [r7]
	bl sub_8096F70
	ldr r0, _08098228 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08098228 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x40
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08098228 @ =gDispIo
	ldrb r1, [r0, #1]
	movs r2, #0x7f
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #1]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #4
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #0xfb
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #1
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #2
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0xfb
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #8
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0x10
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2d
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x58
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x31
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x48
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2c
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xf0
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x30
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x98
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2f
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x33
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #8
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x2e
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0xf0
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x32
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x38
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x34
	ldrb r1, [r0]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x35
	ldrb r1, [r0]
	movs r2, #0x20
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x36
	ldrb r1, [r0]
	movs r2, #0xdf
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x3c
	ldrb r1, [r0]
	movs r2, #0xc0
	orrs r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x44
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x45
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _08098228 @ =gDispIo
	adds r1, r0, #0
	adds r0, #0x46
	ldrb r1, [r0]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #8
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0]
	ldr r0, _0809823C @ =gDispIo+0x3C
	ldr r1, _0809823C @ =gDispIo+0x3C
	ldrh r2, [r1]
	ldr r3, _08098240 @ =0x0000FFE0
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _0809823C @ =gDispIo+0x3C
	ldr r1, _0809823C @ =gDispIo+0x3C
	ldrh r2, [r1]
	movs r3, #8
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _0809823C @ =gDispIo+0x3C
	ldr r1, _0809823C @ =gDispIo+0x3C
	ldrh r2, [r1]
	ldr r3, _08098244 @ =0x0000E0FF
	adds r1, r2, #0
	ands r1, r3
	adds r2, r1, #0
	strh r2, [r0]
	ldr r0, _0809823C @ =gDispIo+0x3C
	ldr r1, _0809823C @ =gDispIo+0x3C
	ldrh r2, [r1]
	strh r2, [r0]
	ldr r4, _08098248 @ =0x082D80B0
	movs r0, #3
	bl GetBgChrOffset
	movs r2, #0xc0
	lsls r2, r2, #0x13
	adds r1, r0, r2
	adds r0, r4, #0
	bl Decompress
	ldr r0, _0809824C @ =gBg3Tm
	ldr r1, _08098250 @ =0x082DAC8C
	movs r2, #0xc0
	lsls r2, r2, #8
	bl TmApplyTsa_t
	ldr r0, _08098254 @ =0x082DB140
	movs r1, #0xc0
	lsls r1, r1, #1
	movs r2, #0x80
	bl ApplyPaletteExt
	movs r0, #8
	bl EnableBgSync
	add sp, #8
	pop {r4, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08098220: .4byte ProcScr_Mu
_08098224: .4byte MU_Hide
_08098228: .4byte gDispIo
_0809822C: .4byte 0x082DC944
_08098230: .4byte gBuf
_08098234: .4byte gBg1Tm
_08098238: .4byte 0x02022508
_0809823C: .4byte gDispIo+0x3C
_08098240: .4byte 0x0000FFE0
_08098244: .4byte 0x0000E0FF
_08098248: .4byte 0x082D80B0
_0809824C: .4byte gBg3Tm
_08098250: .4byte 0x082DAC8C
_08098254: .4byte 0x082DB140

	thumb_func_start sub_8098258
sub_8098258: @ 0x08098258
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, _08098284 @ =gArenaSt
	ldr r1, [r0]
	ldr r2, _08098288 @ =gBattleUnitA
	adds r0, r1, #0
	adds r1, r2, #0
	bl UpdateUnitFromBattle
	ldr r0, _0809828C @ =gActiveUnit
	ldr r1, [r0]
	adds r0, r1, #0
	bl MU_Start
	bl MU_SetDefaultFacing_Auto
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08098284: .4byte gArenaSt
_08098288: .4byte gBattleUnitA
_0809828C: .4byte gActiveUnit

	thumb_func_start sub_8098290
sub_8098290: @ 0x08098290
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _080982AC @ =0x000002F3
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_80985D8
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080982AC: .4byte 0x000002F3

	thumb_func_start sub_80982B0
sub_80982B0: @ 0x080982B0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl ArenaGetMatchupGoldValue
	adds r1, r0, #0
	adds r0, r1, #0
	bl SetTalkNumber
	movs r1, #0xbd
	lsls r1, r1, #2
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_80985D8
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80982D8
sub_80982D8: @ 0x080982D8
	push {r4, r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl GetTalkChoiceResult
	cmp r0, #1
	beq _08098310
	cmp r0, #1
	bgt _080982F2
	cmp r0, #0
	beq _080982F8
	b _080982F8
_080982F2:
	cmp r0, #2
	beq _080982F8
	b _080982F8
_080982F8:
	ldr r1, _0809830C @ =0x000002F6
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_80985D8
	ldr r0, [r7]
	movs r1, #2
	bl Proc_Goto
	b _08098338
	.align 2, 0
_0809830C: .4byte 0x000002F6
_08098310:
	bl ArenaGetMatchupGoldValue
	adds r4, r0, #0
	bl GetGold
	cmp r4, r0
	bgt _08098322
	b _08098338
_08098320:
	.byte 0x09, 0xE0
_08098322:
	movs r1, #0xbf
	lsls r1, r1, #2
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_80985D8
	ldr r0, [r7]
	movs r1, #2
	bl Proc_Goto
	b _08098338
_08098338:
	add sp, #4
	pop {r4, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8098340
sub_8098340: @ 0x08098340
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	bl GetGold
	str r0, [r7, #4]
	bl ArenaGetMatchupGoldValue
	ldr r1, [r7, #4]
	subs r0, r1, r0
	str r0, [r7, #4]
	ldr r1, [r7, #4]
	adds r0, r1, #0
	bl SetGold
	ldr r0, _08098388 @ =gPlaySt
	ldrb r1, [r0, #0x1d]
	lsls r2, r1, #0x1e
	lsrs r0, r2, #0x1f
	cmp r0, #0
	bne _08098372
	movs r0, #0xb9
	bl m4aSongNumStart
_08098372:
	ldr r1, _0809838C @ =0x02021CBE
	adds r0, r1, #0
	bl sub_8097084
	ldr r0, [r7]
	bl sub_8098624
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08098388: .4byte gPlaySt
_0809838C: .4byte 0x02021CBE

	thumb_func_start sub_8098390
sub_8098390: @ 0x08098390
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _080983AC @ =0x000002F7
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_80985D8
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080983AC: .4byte 0x000002F7

	thumb_func_start sub_80983B0
sub_80983B0: @ 0x080983B0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _080983CC @ =0x000002F5
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_80985D8
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080983CC: .4byte 0x000002F5

	thumb_func_start sub_80983D0
sub_80983D0: @ 0x080983D0
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r1, #1
	rsbs r1, r1, #0
	adds r0, r1, #0
	bl FadeBgmOut
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80983EC
sub_80983EC: @ 0x080983EC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	movs r1, #7
	bl Proc_Mark
	bl ClearTalk
	ldr r1, _0809846C @ =0x08691190
	adds r0, r1, #0
	bl Proc_EndEach
	ldr r0, _08098470 @ =gAction
	ldrb r1, [r0, #0x11]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	movs r3, #0x16
	adds r1, r2, #0
	orrs r1, r3
	adds r2, r1, #0
	strb r2, [r0, #0x11]
	ldr r1, _08098474 @ =gActiveUnit
	ldr r0, [r1]
	ldr r2, _08098474 @ =gActiveUnit
	ldr r1, [r2]
	ldrh r2, [r1, #0xc]
	movs r3, #0x40
	adds r1, r2, #0
	orrs r1, r3
	ldrh r2, [r0, #0xc]
	movs r3, #0
	ands r2, r3
	adds r3, r2, #0
	adds r2, r3, #0
	orrs r2, r1
	adds r1, r2, #0
	strh r1, [r0, #0xc]
	ldr r0, _08098474 @ =gActiveUnit
	ldr r1, [r0]
	adds r0, r1, #0
	bl sub_808495C
	bl MU_EndAll
	ldr r0, _08098470 @ =gAction
	ldrb r1, [r0, #0x15]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0x15]
	ldr r0, _08098474 @ =gActiveUnit
	ldr r1, [r0]
	adds r0, r1, #0
	bl BattleGenerateArena
	bl BeginBattleAnimations
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809846C: .4byte 0x08691190
_08098470: .4byte gAction
_08098474: .4byte gActiveUnit

	thumb_func_start sub_8098478
sub_8098478: @ 0x08098478
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl StartPartialGameLock
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8098490
sub_8098490: @ 0x08098490
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r0, [r7]
	bl sub_8097ECC
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80984A8
sub_80984A8: @ 0x080984A8
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	bl GetGold
	str r0, [r7, #4]
	bl ArenaGetResult
	cmp r0, #2
	beq _08098504
	cmp r0, #2
	bgt _080984C8
	cmp r0, #1
	beq _080984D2
	b _08098548
_080984C8:
	cmp r0, #3
	beq _08098514
	cmp r0, #4
	beq _08098538
	b _08098548
_080984D2:
	bl ArenaGetMatchupGoldValue
	adds r1, r0, #0
	lsls r2, r1, #1
	adds r0, r2, #0
	bl SetTalkNumber
	movs r1, #0xbe
	lsls r1, r1, #2
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_80985D8
	bl ArenaGetMatchupGoldValue
	adds r1, r0, #0
	lsls r0, r1, #1
	ldr r1, [r7, #4]
	adds r0, r1, r0
	str r0, [r7, #4]
	ldr r1, [r7, #4]
	adds r0, r1, #0
	bl SetGold
	b _08098548
_08098504:
	ldr r1, _08098510 @ =0x000002F9
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_80985D8
	b _08098548
	.align 2, 0
_08098510: .4byte 0x000002F9
_08098514:
	ldr r1, _08098534 @ =0x000002FB
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_80985D8
	bl ArenaGetMatchupGoldValue
	ldr r1, [r7, #4]
	adds r0, r1, r0
	str r0, [r7, #4]
	ldr r1, [r7, #4]
	adds r0, r1, #0
	bl SetGold
	b _08098548
	.align 2, 0
_08098534: .4byte 0x000002FB
_08098538:
	ldr r1, _08098544 @ =0x000002FA
	adds r0, r1, #0
	ldr r1, [r7]
	bl sub_80985D8
	b _08098548
	.align 2, 0
_08098544: .4byte 0x000002FA
_08098548:
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8098550
sub_8098550: @ 0x08098550
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl ArenaGetResult
	cmp r0, #2
	beq _080985A0
	cmp r0, #2
	bgt _0809856A
	cmp r0, #1
	beq _08098574
	b _080985A4
_0809856A:
	cmp r0, #3
	beq _08098574
	cmp r0, #4
	beq _080985A2
	b _080985A4
_08098574:
	ldr r1, _08098598 @ =0x02021CBE
	adds r0, r1, #0
	bl sub_8097084
	ldr r0, _0809859C @ =gPlaySt
	ldrb r1, [r0, #0x1d]
	lsls r2, r1, #0x1e
	lsrs r0, r2, #0x1f
	cmp r0, #0
	bne _0809858E
	movs r0, #0xb9
	bl m4aSongNumStart
_0809858E:
	ldr r0, [r7]
	movs r1, #0x3c
	bl StartTemporaryLock
	b _080985A4
	.align 2, 0
_08098598: .4byte 0x02021CBE
_0809859C: .4byte gPlaySt
_080985A0:
	b _080985A4
_080985A2:
	b _080985A4
_080985A4:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80985AC
sub_80985AC: @ 0x080985AC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	ldr r1, _080985CC @ =0x08691190
	adds r0, r1, #0
	bl Proc_EndEach
	ldr r0, _080985D0 @ =ProcScr_Mu
	ldr r1, _080985D4 @ =sub_80610D0
	bl Proc_ForEach
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080985CC: .4byte 0x08691190
_080985D0: .4byte ProcScr_Mu
_080985D4: .4byte sub_80610D0

	thumb_func_start sub_80985D8
sub_80985D8: @ 0x080985D8
	push {r7, lr}
	sub sp, #8
	mov r7, sp
	str r0, [r7]
	str r1, [r7, #4]
	bl SetInitTalkTextFont
	bl ClearTalkText
	ldr r0, [r7]
	bl DecodeMsg
	adds r2, r0, #0
	ldr r3, [r7, #4]
	movs r0, #8
	movs r1, #2
	bl StartTalkExt
	movs r0, #0
	bl SetTalkPrintColor
	movs r0, #1
	bl SetTalkFlag
	movs r0, #2
	bl SetTalkFlag
	movs r0, #4
	bl SetTalkFlag
	movs r0, #1
	bl SetActiveTalkFace
	add sp, #8
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8098624
sub_8098624: @ 0x08098624
	push {r4, r5, r7, lr}
	sub sp, #8
	add r7, sp, #4
	str r0, [r7]
	movs r0, #0
	str r0, [sp]
	movs r0, #7
	movs r1, #9
	movs r2, #0x10
	movs r3, #6
	bl sub_8041358
	movs r0, #0
	bl SetTextFont
	bl InitSystemTextFont
	ldr r4, _080986C0 @ =0x02021D98
	ldr r5, _080986C4 @ =0x08677DB8
	bl GetLang
	adds r1, r0, #0
	lsls r0, r1, #2
	adds r1, r5, r0
	ldr r2, [r1]
	adds r0, r4, #0
	movs r1, #0
	bl PutString
	ldr r0, _080986C8 @ =0x02021DA0
	ldr r1, _080986CC @ =gArenaSt
	ldr r3, [r1, #4]
	movs r2, #8
	ldrsb r2, [r3, r2]
	movs r1, #2
	bl PutNumber
	ldr r4, _080986D0 @ =0x02021E18
	ldr r0, _080986CC @ =gArenaSt
	ldr r1, [r0, #4]
	ldr r0, [r1]
	ldrh r1, [r0]
	adds r0, r1, #0
	bl DecodeMsg
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #0
	bl PutString
	ldr r4, _080986D4 @ =0x02021DA6
	ldr r0, _080986CC @ =gArenaSt
	ldr r1, [r0, #4]
	ldr r0, [r1, #4]
	ldrh r1, [r0]
	adds r0, r1, #0
	bl DecodeMsg
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #0
	bl PutString
	ldr r4, _080986D8 @ =0x02021E26
	ldr r0, _080986CC @ =gArenaSt
	ldrh r1, [r0, #0x1c]
	adds r0, r1, #0
	bl GetItemName
	adds r2, r0, #0
	adds r0, r4, #0
	movs r1, #0
	bl PutString
	add sp, #8
	pop {r4, r5, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080986C0: .4byte 0x02021D98
_080986C4: .4byte 0x08677DB8
_080986C8: .4byte 0x02021DA0
_080986CC: .4byte gArenaSt
_080986D0: .4byte 0x02021E18
_080986D4: .4byte 0x02021DA6
_080986D8: .4byte 0x02021E26

	thumb_func_start sub_80986DC
sub_80986DC: @ 0x080986DC
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl ArenaGetResult
	cmp r0, #1
	beq _080986EE
	b _08098708
_080986EE:
	ldr r0, _08098704 @ =gPlaySt
	ldrb r1, [r0, #0x1d]
	lsls r2, r1, #0x1f
	lsrs r0, r2, #0x1f
	cmp r0, #0
	bne _08098702
	movs r0, #0x46
	movs r1, #0
	bl StartBgmCore
_08098702:
	b _08098728
	.align 2, 0
_08098704: .4byte gPlaySt
_08098708:
	ldr r0, _08098724 @ =gPlaySt
	ldrb r1, [r0, #0x1d]
	lsls r2, r1, #0x1f
	lsrs r0, r2, #0x1f
	cmp r0, #0
	bne _0809871C
	movs r0, #0x39
	movs r1, #0
	bl StartBgmCore
_0809871C:
	ldr r0, [r7]
	bl Proc_End
	b _08098728
	.align 2, 0
_08098724: .4byte gPlaySt
_08098728:
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8098730
sub_8098730: @ 0x08098730
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0x39
	movs r1, #0
	movs r2, #0
	bl StartBgmExt
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809874C
sub_809874C: @ 0x0809874C
	push {r7, lr}
	mov r7, sp
	ldr r1, _08098760 @ =0x0869141C
	adds r0, r1, #0
	bl StartEvent
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_08098760: .4byte 0x0869141C

	thumb_func_start sub_8098764
sub_8098764: @ 0x08098764
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	bl GetTalkChoiceResult
	cmp r0, #1
	beq _08098784
	cmp r0, #1
	bgt _0809877E
	cmp r0, #0
	beq _0809878C
	b _0809878C
_0809877E:
	cmp r0, #2
	beq _08098788
	b _0809878C
_08098784:
	movs r0, #1
	b _08098790
_08098788:
	movs r0, #0
	b _08098790
_0809878C:
	movs r0, #0
	b _08098790
_08098790:
	add sp, #4
	pop {r7}
	pop {r1}
	bx r1

	thumb_func_start sub_8098798
sub_8098798: @ 0x08098798
	push {r7, lr}
	mov r7, sp
	ldr r0, _080987B4 @ =gAction
	ldrb r1, [r0, #0x16]
	movs r2, #0
	ands r1, r2
	adds r2, r1, #0
	strb r2, [r0, #0x16]
	movs r0, #3
	bl sub_80857B0
	pop {r7}
	pop {r0}
	bx r0
	.align 2, 0
_080987B4: .4byte gAction

	thumb_func_start sub_80987B8
sub_80987B8: @ 0x080987B8
	push {r7, lr}
	sub sp, #4
	mov r7, sp
	str r0, [r7]
	movs r0, #0
	bl SetNextGameAction
	ldr r0, [r7]
	bl EventEndBattleMap
	add sp, #4
	pop {r7}
	pop {r0}
	bx r0

	thumb_func_start sub_80987D4
sub_80987D4: @ 0x080987D4
	push {lr}
	ldr r0, _080987E4 @ =ProcScr_OpeningSequence
	movs r1, #3
	bl SpawnProc
	pop {r0}
	bx r0
	.align 2, 0
_080987E4: .4byte ProcScr_OpeningSequence

	thumb_func_start sub_80987E8
sub_80987E8: @ 0x080987E8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08098824 @ =gKeySt
	ldr r1, [r0]
	movs r0, #0xb
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0809881C
	movs r0, #2
	bl SetNextGameAction
	ldr r1, _08098828 @ =0x03005284
	movs r0, #1
	strb r0, [r1]
	movs r0, #9
	bl Proc_EndEachMarked
	bl sub_809882C
	movs r0, #1
	bl FadeBgmOut
	adds r0, r4, #0
	bl Proc_Break
_0809881C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08098824: .4byte gKeySt
_08098828: .4byte 0x03005284

	thumb_func_start sub_809882C
sub_809882C: @ 0x0809882C
	push {r4, lr}
	ldr r1, _0809885C @ =gPal
	movs r2, #0
	movs r0, #0
	strh r0, [r1]
	ldr r3, _08098860 @ =gDispIo
	strb r0, [r3, #1]
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r4, [r1]
	ands r0, r4
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809885C: .4byte gPal
_08098860: .4byte gDispIo

	thumb_func_start nullsub_50
nullsub_50: @ 0x08098864
	bx lr
	.align 2, 0

	thumb_func_start sub_8098868
sub_8098868: @ 0x08098868
	push {lr}
	ldr r0, _080988B0 @ =0x08691604
	bl InitBgs
	ldr r2, _080988B4 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	movs r1, #0x21
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #0x20
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	bl SetAllBlackPals
	bl EnablePalSync
	movs r0, #0
	bl sub_8098AD8
	ldr r1, _080988B8 @ =0x03005284
	movs r0, #0
	strb r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_080988B0: .4byte 0x08691604
_080988B4: .4byte gDispIo
_080988B8: .4byte 0x03005284

	thumb_func_start nullsub_51
nullsub_51: @ 0x080988BC
	bx lr
	.align 2, 0

	thumb_func_start sub_80988C0
sub_80988C0: @ 0x080988C0
	push {lr}
	ldr r0, _08098924 @ =0x0869161C
	bl InitBgs
	bl sub_8015344
	ldr r3, _08098928 @ =gDispIo
	movs r0, #8
	rsbs r0, r0, #0
	ldrb r1, [r3]
	ands r0, r1
	strb r0, [r3]
	movs r0, #1
	ldrb r2, [r3, #1]
	orrs r0, r2
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	movs r1, #0x21
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #0x20
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r2, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_08098924: .4byte 0x0869161C
_08098928: .4byte gDispIo

	thumb_func_start sub_809892C
sub_809892C: @ 0x0809892C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	str r3, [sp]
	ldr r7, _080989F4 @ =gDispIo
	movs r3, #0x20
	mov ip, r3
	mov r4, ip
	ldrb r5, [r7, #1]
	orrs r4, r5
	movs r5, #0x41
	rsbs r5, r5, #0
	ands r4, r5
	movs r5, #0x7f
	ands r4, r5
	strb r4, [r7, #1]
	adds r5, r7, #0
	adds r5, #0x2d
	movs r4, #0
	strb r4, [r5]
	adds r5, #4
	movs r4, #0x10
	strb r4, [r5]
	subs r5, #5
	movs r4, #0xf0
	strb r4, [r5]
	adds r5, #4
	movs r4, #0x90
	strb r4, [r5]
	movs r3, #0x34
	adds r3, r3, r7
	mov sl, r3
	movs r6, #1
	ands r0, r6
	subs r4, #0x92
	ldrb r5, [r3]
	ands r4, r5
	orrs r4, r0
	ands r1, r6
	lsls r1, r1, #1
	movs r0, #3
	rsbs r0, r0, #0
	mov sb, r0
	ands r4, r0
	orrs r4, r1
	ands r2, r6
	lsls r2, r2, #2
	movs r3, #5
	rsbs r3, r3, #0
	mov r8, r3
	ands r4, r3
	orrs r4, r2
	ldr r5, [sp]
	ands r5, r6
	lsls r3, r5, #3
	movs r2, #9
	rsbs r2, r2, #0
	ands r4, r2
	orrs r4, r3
	ldr r0, [sp, #0x24]
	ands r0, r6
	lsls r1, r0, #4
	movs r0, #0x11
	rsbs r0, r0, #0
	ands r4, r0
	orrs r4, r1
	adds r1, r7, #0
	adds r1, #0x36
	movs r5, #2
	rsbs r5, r5, #0
	ldrb r3, [r1]
	ands r5, r3
	mov r3, sb
	ands r5, r3
	mov r3, r8
	ands r5, r3
	ands r5, r2
	ands r5, r0
	mov r0, ip
	orrs r4, r0
	mov r3, sl
	strb r4, [r3]
	movs r0, #0x21
	rsbs r0, r0, #0
	ands r5, r0
	strb r5, [r1]
	bl EnablePalSync
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080989F4: .4byte gDispIo

	thumb_func_start sub_80989F8
sub_80989F8: @ 0x080989F8
	push {lr}
	ldr r0, _08098A14 @ =0x03005284
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _08098A0E
	movs r0, #0x42
	movs r1, #0
	bl StartBgmCore
_08098A0E:
	pop {r0}
	bx r0
	.align 2, 0
_08098A14: .4byte 0x03005284

	thumb_func_start sub_8098A18
sub_8098A18: @ 0x08098A18
	push {r4, lr}
	adds r1, r0, #0
	ldr r4, _08098A3C @ =0x08691634
	ldr r3, _08098A40 @ =0x03005290
	movs r0, #0
	adds r2, r3, #0
	adds r2, #0x1c
_08098A26:
	str r0, [r2]
	subs r2, #4
	cmp r2, r3
	bge _08098A26
	adds r0, r4, #0
	bl SpawnProc
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08098A3C: .4byte 0x08691634
_08098A40: .4byte 0x03005290

	thumb_func_start sub_8098A44
sub_8098A44: @ 0x08098A44
	movs r1, #0
	str r1, [r0, #0x54]
	bx lr
	.align 2, 0

	thumb_func_start sub_8098A4C
sub_8098A4C: @ 0x08098A4C
	ldr r1, [r0, #0x54]
	adds r1, #1
	str r1, [r0, #0x54]
	bx lr

	thumb_func_start sub_8098A54
sub_8098A54: @ 0x08098A54
	push {lr}
	ldr r0, _08098A70 @ =0x08691634
	bl Proc_Find
	ldr r2, _08098A74 @ =0x03005290
	ldr r1, [r2]
	adds r1, #1
	str r1, [r2]
	lsls r1, r1, #2
	adds r1, r1, r2
	ldr r0, [r0, #0x54]
	str r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08098A70: .4byte 0x08691634
_08098A74: .4byte 0x03005290

	thumb_func_start sub_8098A78
sub_8098A78: @ 0x08098A78
	push {lr}
	movs r0, #0
	bl sub_8098AFC
	pop {r0}
	bx r0

	thumb_func_start sub_8098A84
sub_8098A84: @ 0x08098A84
	push {lr}
	movs r0, #1
	bl sub_8098AFC
	pop {r0}
	bx r0

	thumb_func_start sub_8098A90
sub_8098A90: @ 0x08098A90
	push {lr}
	movs r0, #2
	bl sub_8098AFC
	pop {r0}
	bx r0

	thumb_func_start sub_8098A9C
sub_8098A9C: @ 0x08098A9C
	push {lr}
	movs r0, #3
	bl sub_8098AFC
	pop {r0}
	bx r0

	thumb_func_start sub_8098AA8
sub_8098AA8: @ 0x08098AA8
	push {lr}
	movs r0, #4
	bl sub_8098AFC
	pop {r0}
	bx r0

	thumb_func_start sub_8098AB4
sub_8098AB4: @ 0x08098AB4
	push {lr}
	movs r0, #5
	bl sub_8098AFC
	pop {r0}
	bx r0

	thumb_func_start sub_8098AC0
sub_8098AC0: @ 0x08098AC0
	push {lr}
	movs r0, #6
	bl sub_8098AFC
	pop {r0}
	bx r0

	thumb_func_start sub_8098ACC
sub_8098ACC: @ 0x08098ACC
	push {lr}
	movs r0, #7
	bl sub_8098AFC
	pop {r0}
	bx r0

	thumb_func_start sub_8098AD8
sub_8098AD8: @ 0x08098AD8
	push {lr}
	lsls r0, r0, #5
	ldr r1, _08098AF8 @ =0x08380ECC
	adds r0, r0, r1
	movs r1, #0xf8
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	bl sub_809937C
	bl sub_8099404
	pop {r0}
	bx r0
	.align 2, 0
_08098AF8: .4byte 0x08380ECC

	thumb_func_start sub_8098AFC
sub_8098AFC: @ 0x08098AFC
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	adds r7, r0, #0
	ldr r1, _08098B74 @ =0x08691738
	lsls r0, r7, #2
	adds r0, r0, r1
	ldr r0, [r0]
	bl DecodeMsg
	adds r4, r0, #0
	ldr r2, _08098B78 @ =0x08691778
	lsls r1, r7, #1
	adds r1, r1, r7
	lsls r1, r1, #2
	adds r0, r2, #0
	adds r0, #8
	adds r0, r1, r0
	ldr r6, [r0]
	adds r1, r1, r2
	ldrh r5, [r1]
	movs r0, #0
	mov r8, r0
	cmp r4, #0
	beq _08098B66
	mov sb, r1
	ldr r1, _08098B7C @ =0x08691498
	mov sl, r1
_08098B38:
	adds r0, r7, #0
	adds r1, r5, #0
	mov r2, r8
	adds r3, r4, #0
	bl sub_8098B80
	adds r0, r4, #0
	bl sub_8099358
	adds r4, r0, #0
	adds r5, #0x14
	mov r1, sb
	ldrh r0, [r1, #2]
	cmp r0, #0
	beq _08098B62
	mov r1, sl
	ldr r0, [r1]
	ldrh r1, [r6]
	adds r0, r1, r0
	add r8, r0
	adds r6, #2
_08098B62:
	cmp r4, #0
	bne _08098B38
_08098B66:
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08098B74: .4byte 0x08691738
_08098B78: .4byte 0x08691778
_08098B7C: .4byte 0x08691498

	thumb_func_start sub_8098B80
sub_8098B80: @ 0x08098B80
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	mov r8, r0
	adds r6, r1, #0
	adds r4, r2, #0
	adds r5, r3, #0
	ldr r0, _08098BB0 @ =0x086917D8
	movs r1, #3
	bl SpawnProc
	adds r1, r0, #0
	adds r1, #0x44
	strh r4, [r1]
	str r5, [r0, #0x4c]
	str r6, [r0, #0x30]
	mov r1, r8
	str r1, [r0, #0x54]
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08098BB0: .4byte 0x086917D8

	thumb_func_start sub_8098BB4
sub_8098BB4: @ 0x08098BB4
	adds r0, #0x44
	movs r1, #0
	strh r1, [r0]
	bx lr

	thumb_func_start sub_8098BBC
sub_8098BBC: @ 0x08098BBC
	push {lr}
	adds r2, r0, #0
	adds r1, r2, #0
	adds r1, #0x44
	ldrh r0, [r1]
	subs r0, #1
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	bgt _08098BD6
	adds r0, r2, #0
	bl Proc_Break
_08098BD6:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8098BDC
sub_8098BDC: @ 0x08098BDC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, [r4, #0x4c]
	bl sub_8099328
	movs r1, #0xf0
	subs r1, r1, r0
	lsrs r0, r1, #0x1f
	adds r1, r1, r0
	asrs r1, r1, #1
	str r1, [r4, #0x2c]
	adds r4, #0x64
	movs r0, #0
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8098C00
sub_8098C00: @ 0x08098C00
	push {r4, r5, r6, r7, lr}
	adds r5, r0, #0
	ldr r6, [r5, #0x4c]
	ldr r1, [r5, #0x54]
	lsls r0, r1, #1
	adds r0, r0, r1
	lsls r0, r0, #2
	ldr r1, _08098C38 @ =0x08691778
	adds r7, r0, r1
	adds r1, r5, #0
	adds r1, #0x64
	movs r0, #1
	ldrh r2, [r1]
	subs r0, r0, r2
	strh r0, [r1]
	lsls r0, r0, #0x10
	cmp r0, #0
	beq _08098C88
_08098C24:
	ldrb r0, [r6]
	cmp r0, #0
	blt _08098C3C
	cmp r0, #1
	ble _08098C78
	cmp r0, #4
	bne _08098C3C
	adds r6, #1
	b _08098C80
	.align 2, 0
_08098C38: .4byte 0x08691778
_08098C3C:
	ldr r0, _08098C74 @ =0x08691858
	movs r1, #3
	bl SpawnProc
	adds r4, r0, #0
	ldr r0, [r5, #0x54]
	str r0, [r4, #0x54]
	ldr r0, [r5, #0x2c]
	str r0, [r4, #0x2c]
	ldr r0, [r5, #0x30]
	movs r1, #0xff
	ands r0, r1
	ldrh r1, [r7, #4]
	adds r0, r1, r0
	str r0, [r4, #0x30]
	adds r0, r6, #0
	bl sub_80992DC
	adds r4, #0x4a
	strh r0, [r4]
	adds r0, r6, #0
	bl sub_8099314
	ldr r1, [r5, #0x2c]
	adds r1, r1, r0
	str r1, [r5, #0x2c]
	adds r6, #2
	b _08098C80
	.align 2, 0
_08098C74: .4byte 0x08691858
_08098C78:
	adds r0, r5, #0
	bl Proc_Break
	b _08098C88
_08098C80:
	str r6, [r5, #0x4c]
	ldrh r0, [r7, #2]
	cmp r0, #0
	beq _08098C24
_08098C88:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start nullsub_52
nullsub_52: @ 0x08098C90
	bx lr
	.align 2, 0

	thumb_func_start sub_8098C94
sub_8098C94: @ 0x08098C94
	push {lr}
	ldr r0, _08098CA0 @ =0x08691858
	bl Proc_EndEach
	pop {r0}
	bx r0
	.align 2, 0
_08098CA0: .4byte 0x08691858

	thumb_func_start sub_8098CA4
sub_8098CA4: @ 0x08098CA4
	push {lr}
	ldr r0, _08098CB8 @ =0x02002800
	movs r1, #0
	str r1, [r0]
	ldr r0, _08098CBC @ =0x08691858
	bl Proc_BreakEach
	pop {r0}
	bx r0
	.align 2, 0
_08098CB8: .4byte 0x02002800
_08098CBC: .4byte 0x08691858

	thumb_func_start sub_8098CC0
sub_8098CC0: @ 0x08098CC0
	push {r4, r5, lr}
	adds r0, #0x64
	movs r4, #0
	movs r1, #0
	strh r1, [r0]
	ldr r2, _08098D04 @ =gDispIo+0x3C
	ldr r0, _08098D08 @ =0x0000FFE0
	ldrh r1, [r2]
	ands r0, r1
	movs r3, #0x10
	orrs r0, r3
	ldr r1, _08098D0C @ =0x0000E0FF
	ands r0, r1
	movs r5, #0xe0
	lsls r5, r5, #3
	adds r1, r5, #0
	orrs r0, r1
	strh r0, [r2]
	movs r0, #0x20
	ldrb r1, [r2, #1]
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #0x3f
	ldrb r5, [r2]
	ands r0, r5
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	strb r3, [r2, #8]
	strb r4, [r2, #9]
	strb r4, [r2, #0xa]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08098D04: .4byte gDispIo+0x3C
_08098D08: .4byte 0x0000FFE0
_08098D0C: .4byte 0x0000E0FF

	thumb_func_start sub_8098D10
sub_8098D10: @ 0x08098D10
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x64
	ldrh r1, [r6]
	movs r2, #0
	ldrsh r0, [r6, r2]
	cmp r0, #0x1f
	bgt _08098D78
	adds r0, r1, #1
	movs r5, #0
	strh r0, [r6]
	ldr r7, _08098D74 @ =gDispIo
	adds r2, r7, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	movs r2, #0
	ldrsh r3, [r6, r2]
	movs r4, #0x20
	str r4, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r1, r7, #0
	adds r1, #0x44
	strb r0, [r1]
	movs r0, #0
	ldrsh r3, [r6, r0]
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r1, r7, #0
	adds r1, #0x45
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x46
	strb r5, [r0]
	b _08098DA2
	.align 2, 0
_08098D74: .4byte gDispIo
_08098D78:
	ldr r3, _08098DAC @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r2, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	bl sub_8098C94
	adds r0, r4, #0
	bl Proc_Break
_08098DA2:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08098DAC: .4byte gDispIo

	thumb_func_start sub_8098DB0
sub_8098DB0: @ 0x08098DB0
	adds r0, #0x64
	movs r3, #0
	movs r1, #0
	strh r1, [r0]
	ldr r1, _08098DE0 @ =gDispIo+0x3C
	ldr r0, _08098DE4 @ =0x0000FFE0
	ldrh r2, [r1]
	ands r0, r2
	ldr r2, _08098DE8 @ =0x0000E0FF
	ands r0, r2
	strh r0, [r1]
	movs r0, #0x20
	ldrb r2, [r1, #1]
	orrs r0, r2
	strb r0, [r1, #1]
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	movs r0, #0x10
	strb r0, [r1, #8]
	strb r3, [r1, #9]
	strb r3, [r1, #0xa]
	bx lr
	.align 2, 0
_08098DE0: .4byte gDispIo+0x3C
_08098DE4: .4byte 0x0000FFE0
_08098DE8: .4byte 0x0000E0FF

	thumb_func_start sub_8098DEC
sub_8098DEC: @ 0x08098DEC
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r2, r4, #0
	adds r2, #0x64
	ldrh r1, [r2]
	movs r3, #0
	ldrsh r0, [r2, r3]
	cmp r0, #0x1f
	bgt _08098E3C
	adds r0, r1, #1
	movs r4, #0
	strh r0, [r2]
	ldr r5, _08098E38 @ =gDispIo
	adds r1, r5, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	movs r0, #0
	ldrsh r3, [r2, r0]
	movs r0, #0x20
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r1, r5, #0
	adds r1, #0x44
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x45
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	b _08098E66
	.align 2, 0
_08098E38: .4byte gDispIo
_08098E3C:
	ldr r3, _08098E70 @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r2, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	bl sub_8098C94
	adds r0, r4, #0
	bl Proc_Break
_08098E66:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08098E70: .4byte gDispIo

	thumb_func_start sub_8098E74
sub_8098E74: @ 0x08098E74
	push {r4, lr}
	adds r0, #0x64
	movs r3, #0
	movs r1, #0
	strh r1, [r0]
	ldr r2, _08098EBC @ =gDispIo+0x3C
	ldr r0, _08098EC0 @ =0x0000FFE0
	ldrh r1, [r2]
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	ldr r1, _08098EC4 @ =0x0000E0FF
	ands r0, r1
	movs r4, #0x80
	lsls r4, r4, #5
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r2]
	movs r0, #0x21
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	strb r0, [r2, #1]
	movs r0, #0x3f
	ldrb r4, [r2]
	ands r0, r4
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	strb r3, [r2, #8]
	movs r0, #0x10
	strb r0, [r2, #9]
	strb r3, [r2, #0xa]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08098EBC: .4byte gDispIo+0x3C
_08098EC0: .4byte 0x0000FFE0
_08098EC4: .4byte 0x0000E0FF

	thumb_func_start sub_8098EC8
sub_8098EC8: @ 0x08098EC8
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r6, r4, #0
	adds r6, #0x64
	ldrh r1, [r6]
	movs r2, #0
	ldrsh r0, [r6, r2]
	cmp r0, #0x1f
	bgt _08098F30
	adds r0, r1, #1
	movs r5, #0
	strh r0, [r6]
	ldr r7, _08098F2C @ =gDispIo
	adds r2, r7, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	movs r2, #0
	ldrsh r3, [r6, r2]
	movs r4, #0x20
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r1, r7, #0
	adds r1, #0x44
	strb r0, [r1]
	movs r0, #0
	ldrsh r3, [r6, r0]
	str r4, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r1, r7, #0
	adds r1, #0x45
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x46
	strb r5, [r0]
	b _08098F5A
	.align 2, 0
_08098F2C: .4byte gDispIo
_08098F30:
	ldr r3, _08098F64 @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r2, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	bl sub_8098C94
	adds r0, r4, #0
	bl Proc_Break
_08098F5A:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08098F64: .4byte gDispIo

	thumb_func_start sub_8098F68
sub_8098F68: @ 0x08098F68
	push {r4, r5, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x64
	movs r0, #0
	strh r0, [r1]
	adds r5, r4, #0
	adds r5, #0x4a
	ldrh r0, [r5]
	bl sub_8099424
	ldrh r0, [r5]
	ldr r3, _08098FA0 @ =0x08691778
	ldr r2, [r4, #0x54]
	lsls r1, r2, #1
	adds r1, r1, r2
	lsls r1, r1, #2
	adds r1, r1, r3
	ldrh r1, [r1, #2]
	adds r2, r4, #0
	bl sub_809947C
	ldr r1, _08098FA4 @ =0xFFFFF000
	adds r0, r0, r1
	strh r0, [r5]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08098FA0: .4byte 0x08691778
_08098FA4: .4byte 0xFFFFF000

	thumb_func_start sub_8098FA8
sub_8098FA8: @ 0x08098FA8
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r3, [r7, #0x58]
	ldr r1, _08098FD8 @ =0x08691494
	ldr r0, [r1]
	cmp r3, r0
	blt _08098FDC
	movs r0, #0
	str r0, [r7, #0x58]
	ldr r0, [r7, #0x54]
	bl sub_80993E8
	adds r0, r7, #0
	bl Proc_Break
	adds r0, r7, #0
	bl sub_80990B8
	b _0809909C
	.align 2, 0
_08098FD8: .4byte 0x08691494
_08098FDC:
	adds r3, #1
	str r3, [r7, #0x58]
	ldr r2, [r7, #0x30]
	adds r1, r2, #0
	adds r1, #8
	str r0, [sp]
	movs r0, #4
	bl Interpolate
	adds r2, r0, #0
	movs r0, #0x80
	lsls r0, r0, #1
	mov sb, r0
	add r2, sb
	ldr r0, [r7, #0x54]
	lsls r0, r0, #9
	ldr r1, [r7, #0x2c]
	adds r1, r1, r0
	ldr r3, _080990AC @ =Sprite_16x16
	adds r0, r7, #0
	adds r0, #0x4a
	ldrh r0, [r0]
	str r0, [sp]
	movs r0, #0
	bl PutSpriteExt
	ldr r5, _080990B0 @ =gSinLut
	movs r1, #0x80
	adds r1, r1, r5
	mov sl, r1
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	mov r8, r0
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	mov r8, r0
	movs r1, #0
	ldrsh r4, [r5, r1]
	rsbs r4, r4, #0
	lsls r4, r4, #4
	ldr r3, [r7, #0x58]
	ldr r2, _080990B4 @ =0x08691494
	ldr r0, [r2]
	str r0, [sp]
	movs r0, #4
	movs r1, #1
	mov r2, sb
	bl Interpolate
	adds r1, r0, #0
	adds r0, r4, #0
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r1, #0
	ldrsh r0, [r5, r1]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	mov r2, sl
	movs r0, #0
	ldrsh r4, [r2, r0]
	lsls r4, r4, #4
	ldr r3, [r7, #0x58]
	ldr r1, _080990B4 @ =0x08691494
	ldr r0, [r1]
	str r0, [sp]
	movs r0, #4
	movs r1, #1
	mov r2, sb
	bl Interpolate
	adds r1, r0, #0
	adds r0, r4, #0
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r7, #0x54]
	str r0, [sp]
	adds r0, r1, #0
	mov r1, r8
	adds r2, r6, #0
	adds r3, r5, #0
	bl SetObjAffine
_0809909C:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080990AC: .4byte Sprite_16x16
_080990B0: .4byte gSinLut
_080990B4: .4byte 0x08691494

	thumb_func_start sub_80990B8
sub_80990B8: @ 0x080990B8
	push {r4, r5, lr}
	sub sp, #4
	ldr r1, [r0, #0x2c]
	ldr r2, [r0, #0x30]
	ldr r3, _080990E0 @ =Sprite_16x16
	movs r4, #0x4a
	adds r4, r4, r0
	adds r0, #0x64
	movs r5, #0
	ldrsh r0, [r0, r5]
	ldrh r4, [r4]
	adds r0, r4, r0
	str r0, [sp]
	movs r0, #0
	bl PutSpriteExt
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_080990E0: .4byte Sprite_16x16

	thumb_func_start sub_80990E4
sub_80990E4: @ 0x080990E4
	push {lr}
	bl sub_8099520
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80990F0
sub_80990F0: @ 0x080990F0
	push {lr}
	bl sub_80990B8
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80990FC
sub_80990FC: @ 0x080990FC
	push {r4, r5, r6, lr}
	mov r6, sl
	mov r5, sb
	mov r4, r8
	push {r4, r5, r6}
	sub sp, #4
	mov r8, r0
	bl sub_80993AC
	mov r1, r8
	str r0, [r1, #0x54]
	movs r0, #1
	str r0, [r1, #0x58]
	ldr r4, _08099190 @ =gSinLut
	movs r2, #0x80
	adds r2, r2, r4
	mov sl, r2
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	movs r1, #1
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	movs r1, #0x80
	lsls r1, r1, #1
	mov sb, r1
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	lsls r0, r0, #4
	movs r1, #1
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r1, sl
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	mov r2, r8
	ldr r1, [r2, #0x54]
	str r0, [sp]
	adds r0, r1, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08099190: .4byte gSinLut

	thumb_func_start sub_8099194
sub_8099194: @ 0x08099194
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r0, _080991C0 @ =0x08691494
	mov sl, r0
	ldr r3, [r7, #0x58]
	ldr r0, [r0]
	cmp r3, r0
	blt _080991C4
	movs r0, #0
	str r0, [r7, #0x58]
	ldr r0, [r7, #0x54]
	bl sub_80993E8
	adds r0, r7, #0
	bl Proc_Break
	b _0809929A
	.align 2, 0
_080991C0: .4byte 0x08691494
_080991C4:
	adds r3, #1
	str r3, [r7, #0x58]
	ldr r1, [r7, #0x2c]
	adds r2, r1, #0
	adds r2, #0x10
	str r0, [sp]
	movs r0, #4
	bl Interpolate
	adds r4, r0, #0
	ldr r0, [r7, #0x54]
	lsls r0, r0, #9
	adds r4, r4, r0
	ldr r1, [r7, #0x30]
	adds r2, r1, #0
	adds r2, #0x10
	ldr r3, [r7, #0x58]
	mov r5, sl
	ldr r0, [r5]
	str r0, [sp]
	movs r0, #4
	bl Interpolate
	adds r2, r0, #0
	movs r0, #0x80
	lsls r0, r0, #1
	mov sb, r0
	add r2, sb
	ldr r3, _080992AC @ =Sprite_16x16
	adds r0, r7, #0
	adds r0, #0x4a
	ldrh r0, [r0]
	str r0, [sp]
	movs r0, #0
	adds r1, r4, #0
	bl PutSpriteExt
	ldr r1, _080992B0 @ =gSinLut
	mov r8, r1
	ldr r2, _080992B4 @ =gSinLut+0x80
	movs r5, #0
	ldrsh r4, [r2, r5]
	lsls r4, r4, #4
	ldr r3, [r7, #0x58]
	mov r1, sl
	ldr r0, [r1]
	str r0, [sp]
	movs r0, #0
	mov r1, sb
	movs r2, #2
	bl Interpolate
	adds r1, r0, #0
	adds r0, r4, #0
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	mov r2, r8
	movs r5, #0
	ldrsh r0, [r2, r5]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	mov r0, r8
	movs r1, #0
	ldrsh r4, [r0, r1]
	lsls r4, r4, #4
	ldr r3, [r7, #0x58]
	mov r2, sl
	ldr r0, [r2]
	str r0, [sp]
	movs r0, #0
	mov r1, sb
	movs r2, #2
	bl Interpolate
	adds r1, r0, #0
	adds r0, r4, #0
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	ldr r1, _080992B4 @ =gSinLut+0x80
	movs r2, #0
	ldrsh r0, [r1, r2]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, [r7, #0x54]
	str r0, [sp]
	adds r0, r1, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
_0809929A:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080992AC: .4byte Sprite_16x16
_080992B0: .4byte gSinLut
_080992B4: .4byte gSinLut+0x80

	thumb_func_start sub_80992B8
sub_80992B8: @ 0x080992B8
	push {lr}
	ldr r0, _080992C8 @ =0x08691858
	ldr r1, _080992CC @ =sub_80992D0
	bl Proc_ForEach
	pop {r0}
	bx r0
	.align 2, 0
_080992C8: .4byte 0x08691858
_080992CC: .4byte sub_80992D0

	thumb_func_start sub_80992D0
sub_80992D0: @ 0x080992D0
	adds r0, #0x64
	movs r1, #0x80
	lsls r1, r1, #4
	strh r1, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_80992DC
sub_80992DC: @ 0x080992DC
	push {r4, r5, lr}
	ldr r2, _080992FC @ =0x08691644
	movs r3, #0
	ldrb r1, [r2]
	cmp r1, #0
	beq _0809930A
	ldrb r4, [r0]
_080992EA:
	cmp r1, r4
	bne _08099300
	ldrb r1, [r2, #1]
	ldrb r5, [r0, #1]
	cmp r1, r5
	bne _08099300
	adds r0, r3, #0
	b _0809930C
	.align 2, 0
_080992FC: .4byte 0x08691644
_08099300:
	adds r3, #1
	adds r2, #2
	ldrb r1, [r2]
	cmp r1, #0
	bne _080992EA
_0809930A:
	movs r0, #0x40
_0809930C:
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8099314
sub_8099314: @ 0x08099314
	push {lr}
	bl sub_80992DC
	ldr r1, _08099324 @ =0x086916E5
	adds r0, r0, r1
	ldrb r0, [r0]
	pop {r1}
	bx r1
	.align 2, 0
_08099324: .4byte 0x086916E5

	thumb_func_start sub_8099328
sub_8099328: @ 0x08099328
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r5, #0
	b _08099348
_08099330:
	ldrb r0, [r4]
	cmp r0, #1
	beq _0809934E
	cmp r0, #4
	bne _0809933E
	adds r4, #1
	b _08099348
_0809933E:
	adds r0, r4, #0
	bl sub_8099314
	adds r5, r5, r0
	adds r4, #2
_08099348:
	ldrb r0, [r4]
	cmp r0, #0
	bne _08099330
_0809934E:
	adds r0, r5, #0
	pop {r4, r5}
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8099358
sub_8099358: @ 0x08099358
	adds r1, r0, #0
	b _08099370
_0809935C:
	ldrb r0, [r1]
	cmp r0, #1
	beq _0809936A
	cmp r0, #4
	bne _0809936E
	adds r1, #1
	b _08099370
_0809936A:
	adds r0, r1, #1
	b _08099378
_0809936E:
	adds r1, #2
_08099370:
	ldrb r0, [r1]
	cmp r0, #0
	bne _0809935C
	movs r0, #0
_08099378:
	bx lr
	.align 2, 0

	thumb_func_start sub_809937C
sub_809937C: @ 0x0809937C
	push {r4, r5, r6, lr}
	movs r3, #0
	ldr r6, _080993A8 @ =0x03005280
	movs r4, #7
	movs r5, #1
_08099386:
	asrs r2, r3, #3
	adds r2, r2, r6
	adds r1, r3, #0
	ands r1, r4
	adds r0, r5, #0
	lsls r0, r1
	ldrb r1, [r2]
	bics r1, r0
	adds r0, r1, #0
	strb r0, [r2]
	adds r3, #1
	cmp r3, #0x1f
	ble _08099386
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_080993A8: .4byte 0x03005280

	thumb_func_start sub_80993AC
sub_80993AC: @ 0x080993AC
	push {r4, r5, r6, r7, lr}
	movs r4, #0
	ldr r7, _080993D8 @ =0x03005280
	movs r6, #7
	movs r5, #1
_080993B6:
	asrs r0, r4, #3
	adds r3, r0, r7
	ldrb r2, [r3]
	adds r1, r4, #0
	ands r1, r6
	adds r0, r2, #0
	asrs r0, r1
	ands r0, r5
	cmp r0, #0
	bne _080993DC
	adds r0, r5, #0
	lsls r0, r1
	orrs r2, r0
	strb r2, [r3]
	adds r0, r4, #0
	b _080993E2
	.align 2, 0
_080993D8: .4byte 0x03005280
_080993DC:
	adds r4, #1
	cmp r4, #0x1f
	ble _080993B6
_080993E2:
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1

	thumb_func_start sub_80993E8
sub_80993E8: @ 0x080993E8
	ldr r1, _08099400 @ =0x03005280
	asrs r2, r0, #3
	adds r2, r2, r1
	movs r1, #7
	ands r1, r0
	movs r0, #1
	lsls r0, r1
	ldrb r1, [r2]
	bics r1, r0
	adds r0, r1, #0
	strb r0, [r2]
	bx lr
	.align 2, 0
_08099400: .4byte 0x03005280

	thumb_func_start sub_8099404
sub_8099404: @ 0x08099404
	push {lr}
	ldr r0, _08099418 @ =0x0837F478
	ldr r1, _0809941C @ =0x02000000
	bl Decompress
	ldr r1, _08099420 @ =0x02002800
	movs r0, #0
	str r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_08099418: .4byte 0x0837F478
_0809941C: .4byte 0x02000000
_08099420: .4byte 0x02002800

	thumb_func_start sub_8099424
sub_8099424: @ 0x08099424
	push {r4, r5, lr}
	adds r2, r0, #0
	ldr r0, _0809946C @ =0x02002800
	ldr r0, [r0]
	movs r5, #0xf
	adds r1, r0, #0
	ands r1, r5
	lsls r1, r1, #1
	movs r4, #0xf0
	ands r0, r4
	lsls r0, r0, #2
	adds r1, r1, r0
	movs r0, #0x80
	lsls r0, r0, #2
	adds r1, r1, r0
	ldr r3, _08099470 @ =0x000003FF
	ands r1, r3
	lsls r1, r1, #5
	ldr r0, _08099474 @ =0x06010000
	adds r1, r1, r0
	adds r0, r2, #0
	ands r0, r5
	lsls r0, r0, #1
	ands r2, r4
	lsls r2, r2, #2
	adds r0, r0, r2
	ands r0, r3
	lsls r0, r0, #5
	ldr r2, _08099478 @ =0x02000000
	adds r0, r0, r2
	movs r2, #0
	bl sub_80995B0
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809946C: .4byte 0x02002800
_08099470: .4byte 0x000003FF
_08099474: .4byte 0x06010000
_08099478: .4byte 0x02000000

	thumb_func_start sub_809947C
sub_809947C: @ 0x0809947C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	mov sb, r1
	mov sl, r2
	ldr r1, _080994EC @ =0x02002800
	mov r8, r1
	ldr r3, [r1]
	movs r2, #0xf
	mov ip, r2
	adds r2, r3, #0
	mov r1, ip
	ands r2, r1
	lsls r2, r2, #1
	movs r5, #0xf0
	adds r1, r3, #0
	ands r1, r5
	lsls r1, r1, #2
	adds r2, r2, r1
	movs r1, #0x80
	lsls r1, r1, #2
	adds r6, r2, r1
	ldr r4, _080994F0 @ =0x000003FF
	adds r1, r6, #0
	ands r1, r4
	lsls r1, r1, #5
	ldr r2, _080994F4 @ =0x06010000
	adds r7, r1, r2
	adds r1, r0, #0
	mov r2, ip
	ands r1, r2
	lsls r1, r1, #1
	ands r0, r5
	lsls r0, r0, #2
	adds r1, r1, r0
	ands r1, r4
	lsls r1, r1, #5
	ldr r0, _080994F8 @ =0x02000000
	adds r4, r1, r0
	adds r3, #1
	mov r0, r8
	str r3, [r0]
	mov r1, sb
	cmp r1, #0
	beq _08099500
	ldr r0, _080994FC @ =0x08691890
	mov r1, sl
	bl SpawnProc
	str r7, [r0, #0x30]
	str r4, [r0, #0x2c]
	mov r2, sb
	strh r2, [r0, #0x3c]
	b _0809950A
	.align 2, 0
_080994EC: .4byte 0x02002800
_080994F0: .4byte 0x000003FF
_080994F4: .4byte 0x06010000
_080994F8: .4byte 0x02000000
_080994FC: .4byte 0x08691890
_08099500:
	ldr r2, _0809951C @ =0x0000FFFF
	adds r0, r4, #0
	adds r1, r7, #0
	bl sub_80995B0
_0809950A:
	adds r0, r6, #0
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r1}
	bx r1
	.align 2, 0
_0809951C: .4byte 0x0000FFFF

	thumb_func_start sub_8099520
sub_8099520: @ 0x08099520
	push {lr}
	adds r2, r0, #0
	movs r1, #0xc0
	lsls r1, r1, #1
	movs r0, #0x1f
	bl sub_809947C
	pop {r1}
	bx r1
	.align 2, 0

	thumb_func_start sub_8099534
sub_8099534: @ 0x08099534
	movs r1, #0
	str r1, [r0, #0x34]
	strh r1, [r0, #0x38]
	ldrh r1, [r0, #0x3c]
	strh r1, [r0, #0x3a]
	bx lr

	thumb_func_start sub_8099540
sub_8099540: @ 0x08099540
	push {r4, lr}
	adds r4, r0, #0
	ldrh r1, [r4, #0x38]
	ldrh r2, [r4, #0x3a]
	b _0809955C
_0809954A:
	ldr r0, [r4, #0x2c]
	ldr r1, [r4, #0x30]
	ldr r2, [r4, #0x34]
	adds r2, #1
	str r2, [r4, #0x34]
	bl sub_80995B0
	ldrh r1, [r4, #0x38]
	ldr r2, _0809957C @ =0xFFFFFF00
_0809955C:
	adds r0, r1, r2
	strh r0, [r4, #0x38]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0xff
	bgt _0809954A
	ldr r0, [r4, #0x34]
	cmp r0, #0x3f
	ble _08099574
	adds r0, r4, #0
	bl Proc_Break
_08099574:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809957C: .4byte 0xFFFFFF00

	thumb_func_start sub_8099580
sub_8099580: @ 0x08099580
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #7
	ands r0, r2
	lsls r0, r0, #2
	movs r3, #0xf
	lsls r3, r0
	asrs r2, r2, #3
	cmp r2, #0xf
	ble _08099596
	adds r2, #0xf0
_08099596:
	lsls r0, r2, #2
	adds r2, r0, r1
	ldr r1, [r2]
	bics r1, r3
	adds r0, r0, r4
	ldr r0, [r0]
	ands r0, r3
	adds r1, r1, r0
	str r1, [r2]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_80995B0
sub_80995B0: @ 0x080995B0
	push {r4, r5, r6, r7, lr}
	sub sp, #8
	adds r7, r0, #0
	adds r6, r1, #0
	adds r5, r2, #0
	cmp r5, #0
	beq _08099604
	ldr r0, _080995FC @ =0x0000FFFF
	cmp r5, r0
	beq _08099624
	subs r5, #1
	ldr r0, _08099600 @ =0x086918B0
	lsls r4, r5, #1
	adds r4, r4, r0
	ldrh r2, [r4]
	adds r0, r7, #0
	bl sub_8099580
	ldrh r2, [r4]
	adds r2, #0x40
	adds r0, r7, #0
	adds r1, r6, #0
	bl sub_8099580
	ldrh r2, [r4]
	adds r2, #0x80
	adds r0, r7, #0
	adds r1, r6, #0
	bl sub_8099580
	ldrh r2, [r4]
	adds r2, #0xc0
	adds r0, r7, #0
	adds r1, r6, #0
	bl sub_8099580
	b _0809963C
	.align 2, 0
_080995FC: .4byte 0x0000FFFF
_08099600: .4byte 0x086918B0
_08099604:
	str r5, [sp]
	ldr r4, _08099620 @ =0x01000010
	mov r0, sp
	adds r1, r6, #0
	adds r2, r4, #0
	bl CpuFastSet
	str r5, [sp, #4]
	add r0, sp, #4
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r6, r2
	adds r2, r4, #0
	b _08099638
	.align 2, 0
_08099620: .4byte 0x01000010
_08099624:
	adds r0, r7, #0
	adds r1, r6, #0
	movs r2, #0x10
	bl CpuFastSet
	movs r1, #0x80
	lsls r1, r1, #3
	adds r0, r7, r1
	adds r1, r6, r1
	movs r2, #0x10
_08099638:
	bl CpuFastSet
_0809963C:
	add sp, #8
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0

	thumb_func_start sub_8099644
sub_8099644: @ 0x08099644
	push {lr}
	movs r0, #0x1f
	movs r1, #1
	bl sub_8014ACC
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8099654
sub_8099654: @ 0x08099654
	push {r4, r5, lr}
	sub sp, #4
	adds r1, r0, #0
	ldr r0, _0809966C @ =0x03005284
	movs r5, #0
	ldrsb r5, [r0, r5]
	cmp r5, #0
	beq _08099670
	adds r0, r1, #0
	bl Proc_End
	b _08099700
	.align 2, 0
_0809966C: .4byte 0x03005284
_08099670:
	bl sub_8099BE4
	ldr r0, _08099708 @ =0x0836A494
	ldr r1, _0809970C @ =gBg0Tm
	movs r4, #0xa0
	lsls r4, r4, #1
	adds r2, r4, #0
	movs r3, #0
	bl sub_80998D4
	ldr r0, _08099710 @ =0x083674BC
	ldr r1, _08099714 @ =gBg1Tm
	movs r2, #0
	movs r3, #1
	bl sub_80998D4
	ldr r0, _08099718 @ =0x0836A094
	ldr r1, _0809971C @ =gBg3Tm
	adds r2, r4, #0
	movs r3, #3
	bl sub_80998D4
	ldr r0, _08099720 @ =0x0836A888
	ldr r4, _08099724 @ =gBuf
	adds r1, r4, #0
	bl Decompress
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r4, #0
	movs r1, #0
	bl ApplyPaletteExt
	ldr r0, _08099728 @ =gPal
	strh r5, [r0]
	movs r0, #6
	bl SetBlackPal
	ldr r4, _0809972C @ =0x08367B30
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r0, _08099730 @ =0x06002800
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r4, _08099734 @ =0x08364AB4
	movs r0, #1
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	movs r0, #0xf
	bl EnableBgSync
	movs r0, #1
	bl sub_8098AD8
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #0
	movs r3, #1
	bl sub_809892C
_08099700:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08099708: .4byte 0x0836A494
_0809970C: .4byte gBg0Tm
_08099710: .4byte 0x083674BC
_08099714: .4byte gBg1Tm
_08099718: .4byte 0x0836A094
_0809971C: .4byte gBg3Tm
_08099720: .4byte 0x0836A888
_08099724: .4byte gBuf
_08099728: .4byte gPal
_0809972C: .4byte 0x08367B30
_08099730: .4byte 0x06002800
_08099734: .4byte 0x08364AB4

	thumb_func_start sub_8099738
sub_8099738: @ 0x08099738
	push {lr}
	adds r3, r0, #0
	ldr r0, _0809974C @ =0x0201F2C8
	movs r1, #0xe
	movs r2, #0x64
	bl StartPalFade
	pop {r0}
	bx r0
	.align 2, 0
_0809974C: .4byte 0x0201F2C8

	thumb_func_start sub_8099750
sub_8099750: @ 0x08099750
	push {lr}
	adds r3, r0, #0
	ldr r0, _08099764 @ =0x0201F1A8
	movs r1, #6
	movs r2, #0xb4
	bl StartPalFade
	pop {r0}
	bx r0
	.align 2, 0
_08099764: .4byte 0x0201F1A8

	thumb_func_start sub_8099768
sub_8099768: @ 0x08099768
	push {lr}
	adds r3, r0, #0
	ldr r0, _08099780 @ =Pal_AllBlack
	movs r1, #6
	movs r2, #0x64
	bl StartPalFade
	movs r1, #0x2c
	bl SetPalFadeStop
	pop {r0}
	bx r0
	.align 2, 0
_08099780: .4byte Pal_AllBlack

	thumb_func_start sub_8099784
sub_8099784: @ 0x08099784
	push {lr}
	movs r0, #6
	movs r1, #1
	bl sub_8014ACC
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8099794
sub_8099794: @ 0x08099794
	adds r0, #0x64
	movs r1, #0
	strh r1, [r0]
	bx lr

	thumb_func_start sub_809979C
sub_809979C: @ 0x0809979C
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	adds r1, r5, #0
	adds r1, #0x64
	ldrh r2, [r1]
	movs r3, #0
	ldrsh r0, [r1, r3]
	cmp r0, #0xc7
	bgt _080997B6
	adds r0, r2, #1
	strh r0, [r1]
	b _080997BC
_080997B6:
	adds r0, r5, #0
	bl Proc_Break
_080997BC:
	ldr r4, _08099804 @ =gDispIo
	adds r2, r4, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	ldr r0, _08099808 @ =0x0869149C
	ldr r2, [r0]
	adds r0, r5, #0
	adds r0, #0x64
	movs r1, #0
	ldrsh r3, [r0, r1]
	movs r0, #0xc8
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	adds r1, r4, #0
	adds r1, #0x44
	movs r2, #0
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r4, #0
	adds r0, #0x46
	strb r2, [r0]
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08099804: .4byte gDispIo
_08099808: .4byte 0x0869149C

	thumb_func_start sub_809980C
sub_809980C: @ 0x0809980C
	adds r2, r0, #0
	movs r3, #0
	movs r1, #3
	adds r0, #0x30
_08099814:
	strh r3, [r0]
	subs r0, #2
	subs r1, #1
	cmp r1, #0
	bge _08099814
	movs r0, #0
	strh r0, [r2, #0x34]
	bx lr

	thumb_func_start sub_8099824
sub_8099824: @ 0x08099824
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	movs r5, #0
_0809982A:
	lsls r1, r5, #1
	adds r4, r6, #0
	adds r4, #0x2a
	adds r4, r4, r1
	ldr r0, _08099864 @ =0x08380F4C
	adds r1, r1, r0
	ldrh r0, [r4]
	ldrh r1, [r1]
	adds r1, r0, r1
	strh r1, [r4]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x18
	adds r0, r5, #0
	bl sub_809992C
	lsls r0, r5, #0x10
	lsrs r0, r0, #0x10
	ldrh r4, [r4]
	lsrs r1, r4, #8
	movs r2, #0
	bl SetBgOffset
	adds r5, #1
	cmp r5, #3
	ble _0809982A
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08099864: .4byte 0x08380F4C

	thumb_func_start sub_8099868
sub_8099868: @ 0x08099868
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r7, r0, #0
	ldrh r0, [r7, #0x34]
	adds r1, r0, #1
	strh r1, [r7, #0x34]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	mov r8, r0
	movs r6, #0
_08099880:
	ldr r0, _080998D0 @ =0x08380F4C
	lsls r5, r6, #1
	adds r0, r5, r0
	ldrh r1, [r0]
	movs r0, #0x3c
	str r0, [sp]
	movs r0, #0
	movs r2, #0x80
	lsls r2, r2, #2
	mov r3, r8
	bl Interpolate
	adds r1, r0, #0
	adds r4, r7, #0
	adds r4, #0x2a
	adds r4, r4, r5
	ldrh r0, [r4]
	adds r1, r0, r1
	strh r1, [r4]
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x18
	adds r0, r6, #0
	bl sub_809992C
	lsls r0, r6, #0x10
	lsrs r0, r0, #0x10
	ldrh r4, [r4]
	lsrs r1, r4, #8
	movs r2, #0
	bl SetBgOffset
	adds r6, #1
	cmp r6, #3
	ble _08099880
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_080998D0: .4byte 0x08380F4C

	thumb_func_start sub_80998D4
sub_80998D4: @ 0x080998D4
	push {r4, r5, r6, lr}
	mov r6, sb
	mov r5, r8
	push {r5, r6}
	mov sb, r1
	adds r5, r2, #0
	adds r6, r3, #0
	ldr r4, _08099924 @ =gBuf
	adds r1, r4, #0
	bl Decompress
	movs r0, #0x80
	lsls r0, r0, #4
	mov r8, r0
	lsls r5, r5, #0x10
	lsrs r5, r5, #0x10
	adds r0, r4, #0
	mov r1, sb
	mov r2, r8
	adds r3, r5, #0
	bl sub_80152C4
	movs r0, #0x80
	lsls r0, r0, #4
	adds r4, r4, r0
	lsls r6, r6, #0xb
	ldr r0, _08099928 @ =0x02002804
	adds r6, r6, r0
	adds r0, r4, #0
	adds r1, r6, #0
	mov r2, r8
	adds r3, r5, #0
	bl sub_80152C4
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08099924: .4byte gBuf
_08099928: .4byte 0x02002804

	thumb_func_start sub_809992C
sub_809992C: @ 0x0809992C
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r0, r1, #0
	cmp r1, #0
	bge _08099938
	adds r0, r1, #7
_08099938:
	asrs r0, r0, #3
	subs r4, r0, #1
	movs r0, #0x1f
	ands r4, r0
	cmp r1, #8
	ble _08099970
	adds r0, r5, #0
	adds r1, r4, #0
	movs r2, #0
	bl GetTmOffsetById
	adds r2, r0, #0
	lsls r0, r5, #0xb
	lsls r1, r4, #1
	adds r0, r0, r1
	ldr r1, _08099978 @ =0x02002804
	adds r1, r0, r1
	movs r3, #0x1f
_0809995C:
	ldrh r0, [r1]
	strh r0, [r2]
	adds r2, #0x40
	adds r1, #0x40
	subs r3, #1
	cmp r3, #0
	bge _0809995C
	adds r0, r5, #0
	bl EnableBgSyncById
_08099970:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08099978: .4byte 0x02002804

	thumb_func_start sub_809997C
sub_809997C: @ 0x0809997C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r1, r0, #0
	ldr r0, _08099994 @ =0x03005284
	movs r6, #0
	ldrsb r6, [r0, r6]
	cmp r6, #0
	beq _08099998
	adds r0, r1, #0
	bl Proc_End
	b _080999FE
	.align 2, 0
_08099994: .4byte 0x03005284
_08099998:
	bl sub_8099CCC
	ldr r4, _08099A08 @ =0x0836A9AC
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, _08099A0C @ =0x0836EEFC
	ldr r1, _08099A10 @ =gBg0Tm
	bl Decompress
	ldr r0, _08099A14 @ =0x0836F610
	ldr r4, _08099A18 @ =gBuf
	adds r1, r4, #0
	bl Decompress
	movs r5, #0x80
	lsls r5, r5, #2
	adds r0, r4, #0
	movs r1, #0
	adds r2, r5, #0
	bl ApplyPaletteExt
	ldr r4, _08099A1C @ =gPal
	strh r6, [r4]
	ldr r0, _08099A20 @ =0x083747A4
	ldr r1, _08099A24 @ =0x06010000
	bl Decompress
	ldr r0, _08099A28 @ =0x08375888
	adds r1, r5, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	strh r6, [r4]
	movs r0, #0xf
	bl EnableBgSync
	movs r0, #1
	str r0, [sp]
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_809892C
_080999FE:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08099A08: .4byte 0x0836A9AC
_08099A0C: .4byte 0x0836EEFC
_08099A10: .4byte gBg0Tm
_08099A14: .4byte 0x0836F610
_08099A18: .4byte gBuf
_08099A1C: .4byte gPal
_08099A20: .4byte 0x083747A4
_08099A24: .4byte 0x06010000
_08099A28: .4byte 0x08375888

	thumb_func_start sub_8099A2C
sub_8099A2C: @ 0x08099A2C
	push {lr}
	ldr r3, _08099A78 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r2, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r1, #1
	movs r0, #6
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r2, [r0]
	ldr r0, _08099A7C @ =0x0000FFE0
	ldrh r2, [r3, #0x3c]
	ands r0, r2
	movs r1, #3
	orrs r0, r1
	ldr r1, _08099A80 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #5
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	movs r0, #2
	bl sub_8098AD8
	pop {r0}
	bx r0
	.align 2, 0
_08099A78: .4byte gDispIo
_08099A7C: .4byte 0x0000FFE0
_08099A80: .4byte 0x0000E0FF

	thumb_func_start sub_8099A84
sub_8099A84: @ 0x08099A84
	push {lr}
	ldr r0, [r0, #0x50]
	bl Anim_End
	pop {r0}
	bx r0

	thumb_func_start sub_8099A90
sub_8099A90: @ 0x08099A90
	push {r4, lr}
	adds r4, r0, #0
	movs r0, #0x10
	bl SetBlackPal
	movs r0, #0x11
	bl SetBlackPal
	movs r0, #0x12
	bl SetBlackPal
	movs r0, #0x13
	bl SetBlackPal
	adds r1, r4, #0
	adds r1, #0x64
	movs r0, #0
	strh r0, [r1]
	ldr r0, _08099ACC @ =0x08375908
	movs r1, #0xd
	bl StartAnim
	str r0, [r4, #0x50]
	movs r1, #0xc0
	lsls r1, r1, #4
	strh r1, [r0, #0x22]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08099ACC: .4byte 0x08375908

	thumb_func_start sub_8099AD0
sub_8099AD0: @ 0x08099AD0
	push {r4, r5, lr}
	adds r5, r0, #0
	adds r4, r5, #0
	adds r4, #0x64
	ldrh r0, [r4]
	cmp r0, #2
	bne _08099AEC
	ldr r0, _08099B0C @ =0x083758A8
	ldr r1, _08099B10 @ =0x086914A0
	ldr r2, [r1]
	movs r1, #0x11
	adds r3, r5, #0
	bl StartPalFade
_08099AEC:
	ldr r0, _08099B14 @ =0x08375888
	movs r2, #0
	ldrsh r1, [r4, r2]
	adds r1, #0x10
	ldr r2, _08099B10 @ =0x086914A0
	ldr r2, [r2]
	adds r3, r5, #0
	bl StartPalFade
	ldrh r0, [r4]
	adds r0, #1
	strh r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_08099B0C: .4byte 0x083758A8
_08099B10: .4byte 0x086914A0
_08099B14: .4byte 0x08375888

	thumb_func_start sub_8099B18
sub_8099B18: @ 0x08099B18
	push {r4, lr}
	ldr r4, [r0, #0x50]
	bl sub_8099BCC
	movs r1, #0xb4
	subs r1, r1, r0
	adds r0, r4, #0
	movs r2, #0x10
	bl Anim_Display
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8099B34
sub_8099B34: @ 0x08099B34
	adds r1, r0, #0
	adds r1, #0x64
	movs r2, #0
	strh r2, [r1]
	adds r0, #0x66
	strh r2, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_8099B44
sub_8099B44: @ 0x08099B44
	push {lr}
	adds r1, r0, #0
	adds r1, #0x64
	ldrh r0, [r1]
	adds r0, #0x18
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x18
	bl sub_8099BA8
	pop {r0}
	bx r0

	thumb_func_start sub_8099B5C
sub_8099B5C: @ 0x08099B5C
	push {r4, r5, lr}
	sub sp, #4
	adds r5, r0, #0
	movs r1, #0x80
	lsls r1, r1, #1
	adds r4, r5, #0
	adds r4, #0x66
	ldrh r3, [r4]
	adds r0, r3, #1
	strh r0, [r4]
	lsls r3, r3, #0x10
	asrs r3, r3, #0x10
	movs r0, #0x1e
	str r0, [sp]
	movs r0, #0
	movs r2, #0x18
	bl Interpolate
	adds r1, r5, #0
	adds r1, #0x64
	ldrh r2, [r1]
	adds r0, r2, r0
	strh r0, [r1]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x18
	bl sub_8099BA8
	movs r1, #0
	ldrsh r0, [r4, r1]
	cmp r0, #0x1d
	ble _08099BA0
	adds r0, r5, #0
	bl Proc_Break
_08099BA0:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0

	thumb_func_start sub_8099BA8
sub_8099BA8: @ 0x08099BA8
	push {r4, lr}
	adds r4, r0, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	movs r0, #0
	adds r1, r4, #0
	movs r2, #0
	bl SetBgOffset
	movs r0, #2
	adds r1, r4, #0
	movs r2, #0
	bl SetBgOffset
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_8099BCC
sub_8099BCC: @ 0x08099BCC
	push {lr}
	ldr r0, _08099BE0 @ =0x08691B20
	bl Proc_Find
	adds r0, #0x64
	ldrh r0, [r0]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x18
	pop {r1}
	bx r1
	.align 2, 0
_08099BE0: .4byte 0x08691B20

	thumb_func_start sub_8099BE4
sub_8099BE4: @ 0x08099BE4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	ldr r0, _08099CB8 @ =0x08691B38
	bl InitBgs
	movs r0, #0xf
	bl DisableBgSync
	ldr r0, _08099CBC @ =gDispIo
	mov ip, r0
	movs r0, #8
	rsbs r0, r0, #0
	mov r1, ip
	ldrb r1, [r1]
	ands r0, r1
	mov r2, ip
	strb r0, [r2]
	movs r5, #1
	ldrb r0, [r2, #1]
	orrs r0, r5
	movs r6, #2
	orrs r0, r6
	movs r1, #5
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	movs r1, #0x21
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #0x20
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r2, #1]
	mov r4, ip
	adds r4, #0x3c
	movs r2, #0x3f
	ldrb r7, [r4]
	ands r2, r7
	movs r0, #0x44
	add r0, ip
	mov r8, r0
	movs r1, #0
	mov sb, r1
	movs r3, #0x10
	movs r6, #0x46
	add r6, ip
	mov sl, r6
	subs r1, #4
	adds r0, r1, #0
	mov r7, ip
	ldrb r7, [r7, #0xc]
	ands r0, r7
	mov r6, ip
	strb r0, [r6, #0xc]
	adds r0, r1, #0
	ldrb r7, [r6, #0x10]
	ands r0, r7
	orrs r0, r5
	strb r0, [r6, #0x10]
	ldrb r0, [r6, #0x14]
	ands r1, r0
	movs r5, #2
	orrs r1, r5
	strb r1, [r6, #0x14]
	movs r0, #3
	ldrb r6, [r6, #0x18]
	orrs r0, r6
	mov r7, ip
	strb r0, [r7, #0x18]
	movs r0, #0x40
	orrs r2, r0
	strb r2, [r4]
	mov r0, r8
	strb r3, [r0]
	ldr r1, _08099CC0 @ =0x030026F5
	strb r3, [r1]
	mov r5, sb
	mov r2, sl
	strb r5, [r2]
	ldr r0, _08099CC4 @ =0x0000FFE0
	ldrh r6, [r7, #0x3c]
	ands r0, r6
	movs r1, #1
	orrs r0, r1
	ldr r1, _08099CC8 @ =0x0000E0FF
	ands r0, r1
	movs r7, #0xe0
	lsls r7, r7, #4
	adds r1, r7, #0
	orrs r0, r1
	mov r1, ip
	strh r0, [r1, #0x3c]
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_08099CB8: .4byte 0x08691B38
_08099CBC: .4byte gDispIo
_08099CC0: .4byte 0x030026F5
_08099CC4: .4byte 0x0000FFE0
_08099CC8: .4byte 0x0000E0FF

	thumb_func_start sub_8099CCC
sub_8099CCC: @ 0x08099CCC
	push {lr}
	ldr r0, _08099D34 @ =0x08691B50
	bl InitBgs
	movs r0, #0xf
	bl DisableBgSync
	ldr r3, _08099D38 @ =gDispIo
	movs r0, #8
	rsbs r0, r0, #0
	ldrb r1, [r3]
	ands r0, r1
	strb r0, [r3]
	movs r0, #1
	ldrb r2, [r3, #1]
	orrs r0, r2
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	movs r1, #0x21
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #0x20
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r2, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	pop {r0}
	bx r0
	.align 2, 0
_08099D34: .4byte 0x08691B50
_08099D38: .4byte gDispIo

	thumb_func_start sub_8099D3C
sub_8099D3C: @ 0x08099D3C
	push {lr}
	adds r1, r0, #0
	ldr r0, _08099D54 @ =0x03005284
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08099D58
	adds r0, r1, #0
	bl Proc_End
	b _08099D9C
	.align 2, 0
_08099D54: .4byte 0x03005284
_08099D58:
	bl sub_80988C0
	ldr r2, _08099DA0 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r3, [r2, #0xc]
	ands r0, r3
	strb r0, [r2, #0xc]
	movs r0, #3
	ldrb r3, [r2, #0x10]
	orrs r0, r3
	strb r0, [r2, #0x10]
	adds r0, r1, #0
	ldrb r3, [r2, #0x14]
	ands r0, r3
	strb r0, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	ands r1, r0
	strb r1, [r2, #0x18]
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
_08099D9C:
	pop {r0}
	bx r0
	.align 2, 0
_08099DA0: .4byte gDispIo

	thumb_func_start sub_8099DA4
sub_8099DA4: @ 0x08099DA4
	push {r4, lr}
	sub sp, #0x10
	bl sub_80988C0
	ldr r2, _08099E38 @ =gDispIo
	movs r1, #4
	rsbs r1, r1, #0
	adds r0, r1, #0
	ldrb r3, [r2, #0xc]
	ands r0, r3
	strb r0, [r2, #0xc]
	movs r0, #3
	ldrb r3, [r2, #0x10]
	orrs r0, r3
	strb r0, [r2, #0x10]
	adds r0, r1, #0
	ldrb r3, [r2, #0x14]
	ands r0, r3
	strb r0, [r2, #0x14]
	ldrb r0, [r2, #0x18]
	ands r1, r0
	strb r1, [r2, #0x18]
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	ldr r4, _08099E3C @ =0x08141320
	movs r0, #1
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r3, _08099E40 @ =0x06000020
	adds r1, r1, r3
	adds r0, r4, #0
	bl Decompress
	ldr r0, _08099E44 @ =0x08143AB8
	ldr r4, _08099E48 @ =gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, _08099E4C @ =gBg1Tm
	movs r1, #0x20
	str r1, [sp]
	movs r1, #0x13
	str r1, [sp, #4]
	str r4, [sp, #8]
	movs r1, #0
	str r1, [sp, #0xc]
	movs r2, #1
	movs r3, #1
	bl sub_8014F70
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #0
	movs r3, #0
	bl sub_809892C
	add sp, #0x10
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08099E38: .4byte gDispIo
_08099E3C: .4byte 0x08141320
_08099E40: .4byte 0x06000020
_08099E44: .4byte 0x08143AB8
_08099E48: .4byte gBuf
_08099E4C: .4byte gBg1Tm

	thumb_func_start sub_8099E50
sub_8099E50: @ 0x08099E50
	push {r4, lr}
	adds r1, r0, #0
	ldr r0, _08099E68 @ =0x03005284
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _08099E6C
	adds r0, r1, #0
	bl Proc_End
	b _08099E9C
	.align 2, 0
_08099E68: .4byte 0x03005284
_08099E6C:
	ldr r4, _08099EA4 @ =0x08378F54
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r0, _08099EA8 @ =0x06000020
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, _08099EAC @ =0x08379DCC
	ldr r4, _08099EB0 @ =gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, _08099EB4 @ =gBg0Tm
	adds r1, r4, #0
	movs r2, #1
	bl TmApplyTsa_t
	ldr r0, _08099EB8 @ =0x08379F8C
	ldr r1, _08099EBC @ =0x06010800
	bl Decompress
_08099E9C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08099EA4: .4byte 0x08378F54
_08099EA8: .4byte 0x06000020
_08099EAC: .4byte 0x08379DCC
_08099EB0: .4byte gBuf
_08099EB4: .4byte gBg0Tm
_08099EB8: .4byte 0x08379F8C
_08099EBC: .4byte 0x06010800

	thumb_func_start sub_8099EC0
sub_8099EC0: @ 0x08099EC0
	push {r4, r5, r6, lr}
	mov r6, r8
	push {r6}
	mov r8, r0
	ldr r3, _08099F7C @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r6, #0
	movs r0, #0xe
	strb r0, [r1]
	adds r1, #1
	movs r2, #0x10
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x46
	strb r6, [r0]
	ldr r0, _08099F80 @ =0x0000FFE0
	ldrh r4, [r3, #0x3c]
	ands r0, r4
	movs r1, #1
	orrs r0, r1
	ldr r1, _08099F84 @ =0x0000E0FF
	ands r0, r1
	movs r4, #0x90
	lsls r4, r4, #5
	adds r1, r4, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	adds r1, r3, #0
	adds r1, #0x3d
	movs r0, #0x20
	ldrb r4, [r1]
	orrs r0, r4
	strb r0, [r1]
	movs r0, #1
	ldrb r1, [r3, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #5
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #4
	ands r0, r1
	orrs r0, r2
	strb r0, [r3, #1]
	movs r0, #1
	bl sub_8098AD8
	movs r0, #0xf
	bl EnableBgSync
	ldr r4, _08099F88 @ =0x08379D2C
	adds r0, r4, #0
	movs r1, #0x20
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r5, _08099F8C @ =gPal
	strh r6, [r5]
	subs r4, #0x20
	adds r0, r4, #0
	movs r1, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	strh r6, [r5]
	movs r0, #0x10
	bl SetBlackPal
	bl sub_8069C34
	ldr r0, _08099F90 @ =sub_806A040
	bl SetOnHBlankA
	ldr r0, _08099F94 @ =0x08691CC0
	mov r1, r8
	bl SpawnProc
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_08099F7C: .4byte gDispIo
_08099F80: .4byte 0x0000FFE0
_08099F84: .4byte 0x0000E0FF
_08099F88: .4byte 0x08379D2C
_08099F8C: .4byte gPal
_08099F90: .4byte sub_806A040
_08099F94: .4byte 0x08691CC0

	thumb_func_start nullsub_53
nullsub_53: @ 0x08099F98
	bx lr
	.align 2, 0

	thumb_func_start sub_8099F9C
sub_8099F9C: @ 0x08099F9C
	push {lr}
	ldr r0, [r0, #0x50]
	bl Anim_End
	pop {r0}
	bx r0

	thumb_func_start sub_8099FA8
sub_8099FA8: @ 0x08099FA8
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _08099FCC @ =0x0837AAE8
	movs r1, #2
	bl StartAnim
	str r0, [r4, #0x50]
	movs r2, #0
	movs r1, #0x88
	lsls r1, r1, #3
	strh r1, [r0, #0x22]
	movs r0, #0xc8
	str r0, [r4, #0x30]
	adds r4, #0x44
	strh r2, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_08099FCC: .4byte 0x0837AAE8

	thumb_func_start sub_8099FD0
sub_8099FD0: @ 0x08099FD0
	push {r4, r5, lr}
	sub sp, #4
	adds r4, r0, #0
	adds r2, r4, #0
	adds r2, #0x44
	movs r0, #0
	ldrsh r1, [r2, r0]
	ldr r0, _0809A010 @ =0x086914E0
	ldr r5, [r0]
	cmp r1, r5
	bgt _08099FFE
	ldrh r3, [r2]
	adds r0, r3, #1
	strh r0, [r2]
	lsls r3, r3, #0x10
	asrs r3, r3, #0x10
	str r5, [sp]
	movs r0, #0
	movs r1, #0xc8
	movs r2, #0x80
	bl Interpolate
	str r0, [r4, #0x30]
_08099FFE:
	ldr r0, [r4, #0x50]
	ldr r2, [r4, #0x30]
	movs r1, #0x78
	bl Anim_Display
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809A010: .4byte 0x086914E0

	thumb_func_start sub_809A014
sub_809A014: @ 0x0809A014
	push {lr}
	adds r3, r0, #0
	adds r1, r3, #0
	adds r1, #0x64
	movs r0, #0
	strh r0, [r1]
	ldr r0, _0809A030 @ =0x0837AAC8
	movs r2, #0x82
	lsls r2, r2, #1
	movs r1, #0x10
	bl StartPalFade
	pop {r0}
	bx r0
	.align 2, 0
_0809A030: .4byte 0x0837AAC8

	thumb_func_start sub_809A034
sub_809A034: @ 0x0809A034
	push {lr}
	adds r2, r0, #0
	adds r2, #0x64
	ldrh r1, [r2]
	adds r1, #1
	strh r1, [r2]
	bl sub_809A0A8
	pop {r0}
	bx r0

	thumb_func_start sub_809A048
sub_809A048: @ 0x0809A048
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x64
	ldrh r0, [r1]
	adds r0, #1
	strh r0, [r1]
	adds r0, r4, #0
	bl sub_809A068
	adds r0, r4, #0
	bl sub_809A0A8
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_809A068
sub_809A068: @ 0x0809A068
	push {lr}
	adds r0, #0x64
	ldrh r0, [r0]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x12
	movs r1, #6
	bl __modsi3
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, _0809A09C @ =0x08380F54
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #5
	ldr r1, _0809A0A0 @ =0x0837AA68
	adds r0, r0, r1
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r1, _0809A0A4 @ =gPal
	movs r0, #0
	strh r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0809A09C: .4byte 0x08380F54
_0809A0A0: .4byte 0x0837AA68
_0809A0A4: .4byte gPal

	thumb_func_start sub_809A0A8
sub_809A0A8: @ 0x0809A0A8
	push {lr}
	adds r0, #0x64
	ldrh r0, [r0]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x13
	movs r1, #7
	ands r0, r1
	ldr r1, _0809A0D4 @ =0x08691C78
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r0, r0, #5
	ldr r1, _0809A0D8 @ =0x08379D0C
	adds r0, r0, r1
	movs r1, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r1, _0809A0DC @ =gPal
	movs r0, #0
	strh r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0809A0D4: .4byte 0x08691C78
_0809A0D8: .4byte 0x08379D0C
_0809A0DC: .4byte gPal

	thumb_func_start sub_809A0E0
sub_809A0E0: @ 0x0809A0E0
	push {r4, lr}
	adds r4, r0, #0
	bl sub_809A114
	adds r4, #0x64
	movs r0, #0
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_809A0F4
sub_809A0F4: @ 0x0809A0F4
	push {lr}
	adds r2, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	adds r1, #1
	strh r1, [r0]
	movs r0, #7
	ands r1, r0
	cmp r1, #0
	bne _0809A10E
	adds r0, r2, #0
	bl sub_809A13C
_0809A10E:
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809A114
sub_809A114: @ 0x0809A114
	push {lr}
	ldr r0, _0809A130 @ =0x0837AB18
	ldr r1, _0809A134 @ =0x06010000
	bl Decompress
	ldr r0, _0809A138 @ =0x0837ACB0
	movs r1, #0x88
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	pop {r0}
	bx r0
	.align 2, 0
_0809A130: .4byte 0x0837AB18
_0809A134: .4byte 0x06010000
_0809A138: .4byte 0x0837ACB0

	thumb_func_start sub_809A13C
sub_809A13C: @ 0x0809A13C
	push {r4, lr}
	adds r1, r0, #0
	ldr r0, _0809A1AC @ =0x08691CA8
	bl SpawnProc
	adds r4, r0, #0
	bl RandNextB
	movs r1, #0xf1
	bl DivRem
	adds r0, #0x28
	strh r0, [r4, #0x2a]
	movs r0, #0xa0
	strh r0, [r4, #0x2c]
	bl RandNextB
	movs r1, #8
	bl DivRem
	ldr r1, _0809A1B0 @ =0x08380F5A
	adds r0, r0, r1
	ldrb r1, [r0]
	adds r0, r4, #0
	adds r0, #0x30
	strb r1, [r0]
	bl RandNextB
	movs r1, #4
	bl DivRem
	adds r0, #2
	adds r1, r4, #0
	adds r1, #0x2e
	strb r0, [r1]
	bl RandNextB
	movs r1, #4
	bl DivRem
	adds r0, #3
	adds r1, r4, #0
	adds r1, #0x2f
	strb r0, [r1]
	bl RandNextB
	ldr r1, _0809A1B4 @ =0x00000101
	bl DivRem
	adds r1, r4, #0
	adds r1, #0x31
	strb r0, [r1]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809A1AC: .4byte 0x08691CA8
_0809A1B0: .4byte 0x08380F5A
_0809A1B4: .4byte 0x00000101

	thumb_func_start sub_809A1B8
sub_809A1B8: @ 0x0809A1B8
	movs r1, #0
	strh r1, [r0, #0x32]
	bx lr
	.align 2, 0

	thumb_func_start sub_809A1C0
sub_809A1C0: @ 0x0809A1C0
	push {r4, r5, lr}
	sub sp, #4
	mov ip, r0
	ldr r3, _0809A238 @ =gSinLut
	mov r1, ip
	adds r1, #0x31
	ldrh r2, [r0, #0x32]
	lsls r0, r2, #2
	ldrb r1, [r1]
	adds r0, r1, r0
	movs r1, #0xff
	ands r0, r1
	lsls r0, r0, #1
	adds r0, r0, r3
	movs r1, #0
	ldrsh r0, [r0, r1]
	asrs r3, r0, #8
	lsrs r2, r2, #4
	cmp r2, #7
	ble _0809A1EA
	movs r2, #7
_0809A1EA:
	ldr r1, _0809A23C @ =0x08380F62
	mov r0, ip
	adds r0, #0x30
	ldrb r0, [r0]
	lsls r0, r0, #3
	adds r0, r0, r2
	adds r0, r0, r1
	ldrb r0, [r0]
	lsls r4, r0, #1
	mov r0, ip
	adds r0, #0x2e
	mov r2, ip
	ldrh r2, [r2, #0x2a]
	ldrb r0, [r0]
	subs r0, r2, r0
	mov r5, ip
	strh r0, [r5, #0x2a]
	mov r0, ip
	adds r0, #0x2f
	ldrh r1, [r5, #0x2c]
	ldrb r0, [r0]
	subs r2, r1, r0
	strh r2, [r5, #0x2c]
	ldrh r0, [r5, #0x32]
	adds r0, #1
	strh r0, [r5, #0x32]
	movs r1, #0x2a
	ldrsh r0, [r5, r1]
	adds r1, r0, r3
	cmp r1, #0
	blt _0809A22E
	lsls r0, r2, #0x10
	cmp r0, #0
	bge _0809A240
_0809A22E:
	mov r0, ip
	bl Proc_Break
	b _0809A256
	.align 2, 0
_0809A238: .4byte gSinLut
_0809A23C: .4byte 0x08380F62
_0809A240:
	mov r3, ip
	movs r5, #0x2c
	ldrsh r2, [r3, r5]
	ldr r3, _0809A260 @ =Sprite_16x16
	movs r0, #0xa0
	lsls r0, r0, #5
	adds r0, r4, r0
	str r0, [sp]
	movs r0, #2
	bl PutSpriteExt
_0809A256:
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809A260: .4byte Sprite_16x16

	thumb_func_start sub_809A264
sub_809A264: @ 0x0809A264
	adds r0, #0x64
	movs r1, #0
	strh r1, [r0]
	bx lr

	thumb_func_start sub_809A26C
sub_809A26C: @ 0x0809A26C
	push {r4, r5, lr}
	adds r4, r0, #0
	movs r0, #1
	movs r1, #0
	bl sub_806A87C
	adds r4, #0x64
	movs r2, #0
	ldrsh r1, [r4, r2]
	ldr r2, _0809A2BC @ =0x086914D4
	movs r3, #0
	ldrsh r2, [r2, r3]
	ldr r3, _0809A2C0 @ =0x086914D0
	movs r5, #0
	ldrsh r3, [r3, r5]
	bl sub_806A330
	movs r0, #1
	movs r1, #0xa0
	bl sub_806A87C
	movs r2, #0
	ldrsh r1, [r4, r2]
	ldr r2, _0809A2C4 @ =0x086914DC
	movs r3, #0
	ldrsh r2, [r2, r3]
	ldr r3, _0809A2C8 @ =0x086914D8
	movs r5, #0
	ldrsh r3, [r3, r5]
	bl sub_806A330
	bl sub_806A424
	ldrh r0, [r4]
	adds r0, #2
	strh r0, [r4]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809A2BC: .4byte 0x086914D4
_0809A2C0: .4byte 0x086914D0
_0809A2C4: .4byte 0x086914DC
_0809A2C8: .4byte 0x086914D8

	thumb_func_start sub_809A2CC
sub_809A2CC: @ 0x0809A2CC
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	ldr r0, _0809A2E4 @ =0x03005284
	movs r6, #0
	ldrsb r6, [r0, r6]
	cmp r6, #0
	beq _0809A2E8
	adds r0, r7, #0
	bl Proc_End
	b _0809A36E
	.align 2, 0
_0809A2E4: .4byte 0x03005284
_0809A2E8:
	bl sub_809A900
	bl SetAllBlackPals
	ldr r4, _0809A378 @ =0x08376FDC
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r5, #0xc0
	lsls r5, r5, #0x13
	adds r1, r1, r5
	adds r0, r4, #0
	bl Decompress
	ldr r4, _0809A37C @ =0x08378C60
	ldr r1, _0809A380 @ =gBg0Tm
	adds r0, r4, #0
	bl Decompress
	ldr r1, _0809A384 @ =gBg1Tm
	adds r0, r4, #0
	bl Decompress
	ldr r4, _0809A388 @ =0x08375B84
	movs r0, #2
	bl GetBgChrOffset
	adds r1, r0, #0
	adds r1, r1, r5
	adds r0, r4, #0
	bl Decompress
	ldr r0, _0809A38C @ =0x08376B70
	ldr r1, _0809A390 @ =gBg2Tm
	bl Decompress
	ldr r0, _0809A394 @ =0x08376DF4
	ldr r4, _0809A398 @ =gBuf
	adds r1, r4, #0
	bl Decompress
	movs r2, #0x80
	lsls r2, r2, #2
	adds r0, r4, #0
	movs r1, #0
	bl ApplyPaletteExt
	ldr r0, _0809A39C @ =gPal
	strh r6, [r0]
	movs r0, #0xf
	bl EnableBgSync
	ldr r0, _0809A3A0 @ =0x08691DE8
	adds r1, r7, #0
	bl SpawnProc
	movs r0, #3
	bl sub_8098AD8
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #0
	bl sub_809892C
_0809A36E:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809A378: .4byte 0x08376FDC
_0809A37C: .4byte 0x08378C60
_0809A380: .4byte gBg0Tm
_0809A384: .4byte gBg1Tm
_0809A388: .4byte 0x08375B84
_0809A38C: .4byte 0x08376B70
_0809A390: .4byte gBg2Tm
_0809A394: .4byte 0x08376DF4
_0809A398: .4byte gBuf
_0809A39C: .4byte gPal
_0809A3A0: .4byte 0x08691DE8

	thumb_func_start sub_809A3A4
sub_809A3A4: @ 0x0809A3A4
	adds r0, #0x64
	movs r3, #0
	movs r1, #0
	strh r1, [r0]
	ldr r1, _0809A3CC @ =gDispIo+0x3C
	ldr r0, _0809A3D0 @ =0x0000FFE0
	ldrh r2, [r1]
	ands r0, r2
	movs r2, #1
	orrs r0, r2
	strh r0, [r1]
	movs r0, #0xc0
	ldrb r2, [r1]
	orrs r0, r2
	strb r0, [r1]
	strb r3, [r1, #8]
	strb r3, [r1, #9]
	strb r3, [r1, #0xa]
	bx lr
	.align 2, 0
_0809A3CC: .4byte gDispIo+0x3C
_0809A3D0: .4byte 0x0000FFE0

	thumb_func_start sub_809A3D4
sub_809A3D4: @ 0x0809A3D4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r8, r0
	mov r4, r8
	adds r4, #0x64
	ldrh r0, [r4]
	adds r0, #1
	movs r7, #0
	strh r0, [r4]
	ldr r5, _0809A474 @ =gDispIo
	adds r6, r5, #0
	adds r6, #0x3c
	movs r0, #0xc0
	ldrb r1, [r6]
	orrs r0, r1
	strb r0, [r6]
	ldr r0, _0809A478 @ =0x030026F4
	strb r7, [r0]
	movs r1, #0x45
	adds r1, r1, r5
	mov sl, r1
	strb r7, [r1]
	ldr r0, _0809A47C @ =0x086914CC
	ldr r2, [r0]
	movs r0, #0
	ldrsh r3, [r4, r0]
	ldr r0, _0809A480 @ =0x086914C8
	ldr r0, [r0]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	bl Interpolate
	movs r1, #0x46
	adds r1, r1, r5
	mov sb, r1
	strb r0, [r1]
	ldrh r4, [r4]
	cmp r4, #0x20
	bne _0809A464
	mov r0, r8
	bl Proc_Break
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r5, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r5, #1]
	movs r0, #0x3f
	ldrb r1, [r6]
	ands r0, r1
	strb r0, [r6]
	movs r0, #0x10
	ldr r1, _0809A478 @ =0x030026F4
	strb r0, [r1]
	mov r0, sl
	strb r7, [r0]
	mov r1, sb
	strb r7, [r1]
_0809A464:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809A474: .4byte gDispIo
_0809A478: .4byte 0x030026F4
_0809A47C: .4byte 0x086914CC
_0809A480: .4byte 0x086914C8

	thumb_func_start sub_809A484
sub_809A484: @ 0x0809A484
	push {r4, r5, lr}
	adds r2, r0, #0
	adds r2, #0x64
	movs r4, #0
	movs r3, #0
	movs r5, #0x10
	movs r1, #0x10
	strh r1, [r2]
	adds r0, #0x44
	strh r3, [r0]
	ldr r3, _0809A4C0 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	strb r4, [r0]
	adds r0, #1
	strb r5, [r0]
	adds r0, #1
	strb r4, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809A4C0: .4byte gDispIo

	thumb_func_start sub_809A4C4
sub_809A4C4: @ 0x0809A4C4
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r6, r0, #0
	adds r4, r6, #0
	adds r4, #0x64
	ldrh r0, [r4]
	adds r0, #1
	movs r1, #0
	mov r8, r1
	strh r0, [r4]
	ldr r7, _0809A534 @ =gDispIo
	adds r2, r7, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	movs r0, #0
	ldrsh r3, [r4, r0]
	ldr r5, _0809A538 @ =0x086914BC
	ldr r0, [r5]
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r1, r7, #0
	adds r1, #0x44
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x46
	mov r1, r8
	strb r1, [r0]
	movs r0, #0
	ldrsh r1, [r4, r0]
	ldr r0, [r5]
	cmp r1, r0
	bne _0809A526
	adds r0, r6, #0
	bl Proc_Break
_0809A526:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809A534: .4byte gDispIo
_0809A538: .4byte 0x086914BC

	thumb_func_start sub_809A53C
sub_809A53C: @ 0x0809A53C
	push {lr}
	adds r3, r0, #0
	adds r2, r3, #0
	adds r2, #0x44
	ldrh r0, [r2]
	adds r1, r0, #1
	strh r1, [r2]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, _0809A560 @ =0x086914C4
	ldr r1, [r1]
	cmp r0, r1
	blt _0809A55C
	adds r0, r3, #0
	bl Proc_Break
_0809A55C:
	pop {r0}
	bx r0
	.align 2, 0
_0809A560: .4byte 0x086914C4

	thumb_func_start sub_809A564
sub_809A564: @ 0x0809A564
	adds r0, #0x64
	movs r1, #0
	strh r1, [r0]
	ldr r2, _0809A580 @ =gDispIo+0x3C
	ldr r0, _0809A584 @ =0x0000E0FF
	ldrh r1, [r2]
	ands r0, r1
	movs r3, #0xc0
	lsls r3, r3, #3
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2]
	bx lr
	.align 2, 0
_0809A580: .4byte gDispIo+0x3C
_0809A584: .4byte 0x0000E0FF

	thumb_func_start sub_809A588
sub_809A588: @ 0x0809A588
	push {r4, r5, r6, r7, lr}
	mov r7, r8
	push {r7}
	sub sp, #4
	adds r6, r0, #0
	adds r4, r6, #0
	adds r4, #0x64
	ldrh r0, [r4]
	adds r0, #1
	movs r1, #0
	mov r8, r1
	strh r0, [r4]
	ldr r7, _0809A5F8 @ =gDispIo
	adds r2, r7, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r7, #0
	adds r1, #0x44
	movs r0, #0x10
	strb r0, [r1]
	movs r0, #0
	ldrsh r3, [r4, r0]
	ldr r5, _0809A5FC @ =0x086914C0
	ldr r0, [r5]
	str r0, [sp]
	movs r0, #0
	movs r1, #0x10
	movs r2, #0
	bl Interpolate
	adds r1, r7, #0
	adds r1, #0x45
	strb r0, [r1]
	adds r0, r7, #0
	adds r0, #0x46
	mov r1, r8
	strb r1, [r0]
	movs r0, #0
	ldrsh r1, [r4, r0]
	ldr r0, [r5]
	cmp r1, r0
	bne _0809A5EC
	adds r0, r6, #0
	bl Proc_Break
_0809A5EC:
	add sp, #4
	pop {r3}
	mov r8, r3
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809A5F8: .4byte gDispIo
_0809A5FC: .4byte 0x086914C0

	thumb_func_start sub_809A600
sub_809A600: @ 0x0809A600
	adds r0, #0x64
	movs r1, #0
	strh r1, [r0]
	ldr r2, _0809A630 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	ldr r0, _0809A634 @ =0x0000FFE0
	ldrh r1, [r2, #0x3c]
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	strh r0, [r2, #0x3c]
	bx lr
	.align 2, 0
_0809A630: .4byte gDispIo
_0809A634: .4byte 0x0000FFE0

	thumb_func_start sub_809A638
sub_809A638: @ 0x0809A638
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	mov r8, r0
	ldr r5, _0809A6D8 @ =gDispIo
	adds r7, r5, #0
	adds r7, #0x3c
	movs r0, #0xc0
	ldrb r1, [r7]
	orrs r0, r1
	strb r0, [r7]
	movs r2, #0x44
	adds r2, r2, r5
	mov sl, r2
	movs r6, #0
	strb r6, [r2]
	movs r3, #0x45
	adds r3, r3, r5
	mov sb, r3
	strb r6, [r3]
	mov r4, r8
	adds r4, #0x64
	ldrh r3, [r4]
	adds r0, r3, #1
	strh r0, [r4]
	lsls r3, r3, #0x10
	asrs r3, r3, #0x10
	movs r0, #0x20
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r1, r5, #0
	adds r1, #0x46
	strb r0, [r1]
	movs r2, #0
	ldrsh r0, [r4, r2]
	cmp r0, #0x1f
	ble _0809A6C6
	movs r0, #0x3f
	ldrb r3, [r7]
	ands r0, r3
	strb r0, [r7]
	movs r2, #0x10
	movs r0, #0x10
	mov r3, sl
	strb r0, [r3]
	mov r0, sb
	strb r6, [r0]
	strb r6, [r1]
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r5, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	orrs r0, r2
	strb r0, [r5, #1]
	mov r0, r8
	bl Proc_Break
_0809A6C6:
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809A6D8: .4byte gDispIo

	thumb_func_start sub_809A6DC
sub_809A6DC: @ 0x0809A6DC
	adds r0, #0x64
	movs r1, #0
	strh r1, [r0]
	bx lr

	thumb_func_start sub_809A6E4
sub_809A6E4: @ 0x0809A6E4
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r7, r0, #0
	ldr r2, _0809A728 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	adds r2, r7, #0
	adds r2, #0x64
	movs r6, #0
	ldrsh r1, [r2, r6]
	ldr r0, _0809A72C @ =0x086914B8
	ldr r0, [r0]
	cmp r1, r0
	bge _0809A730
	ldrh r0, [r2]
	adds r0, #1
	strh r0, [r2]
	b _0809A736
	.align 2, 0
_0809A728: .4byte gDispIo
_0809A72C: .4byte 0x086914B8
_0809A730:
	adds r0, r7, #0
	bl Proc_Break
_0809A736:
	movs r0, #0x80
	lsls r0, r0, #1
	mov sl, r0
	movs r2, #0xa0
	lsls r2, r2, #3
	movs r1, #0x64
	adds r1, r1, r7
	mov sb, r1
	movs r6, #0
	ldrsh r3, [r1, r6]
	ldr r5, _0809A7F0 @ =0x086914B8
	ldr r0, [r5]
	str r0, [sp]
	movs r0, #4
	mov r1, sl
	bl Interpolate
	adds r4, r0, #0
	ldr r0, _0809A7F4 @ =0x086914A8
	ldr r1, [r0]
	mov r0, sb
	movs r2, #0
	ldrsh r3, [r0, r2]
	ldr r0, [r5]
	str r0, [sp]
	movs r0, #4
	movs r2, #0
	bl Interpolate
	ldr r3, _0809A7F8 @ =0x08353328
	mov r6, sl
	adds r1, r4, r6
	ldr r2, _0809A7FC @ =0x000003FF
	ands r1, r2
	lsls r1, r1, #2
	adds r1, r1, r3
	ldr r1, [r1]
	adds r6, r1, #0
	muls r6, r0, r6
	asrs r6, r6, #7
	mov r8, r6
	ands r4, r2
	lsls r4, r4, #2
	adds r4, r4, r3
	ldr r1, [r4]
	adds r6, r1, #0
	muls r6, r0, r6
	asrs r6, r6, #7
	movs r2, #0x80
	lsls r2, r2, #7
	mov r0, sb
	movs r1, #0
	ldrsh r3, [r0, r1]
	ldr r0, [r5]
	str r0, [sp]
	movs r0, #4
	movs r1, #0
	bl Interpolate
	adds r4, r0, #0
	lsls r4, r4, #2
	ldr r0, _0809A800 @ =0x086914A4
	ldr r1, [r0]
	lsls r1, r1, #8
	mov r2, sb
	movs r0, #0
	ldrsh r3, [r2, r0]
	ldr r0, [r5]
	str r0, [sp]
	movs r0, #4
	mov r2, sl
	bl Interpolate
	adds r5, r0, #0
	mov r0, r8
	adds r1, r6, #0
	adds r2, r4, #0
	adds r3, r5, #0
	bl sub_809A868
	mov r1, r8
	str r1, [r7, #0x2c]
	str r6, [r7, #0x30]
	str r4, [r7, #0x54]
	str r5, [r7, #0x58]
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809A7F0: .4byte 0x086914B8
_0809A7F4: .4byte 0x086914A8
_0809A7F8: .4byte 0x08353328
_0809A7FC: .4byte 0x000003FF
_0809A800: .4byte 0x086914A4

	thumb_func_start sub_809A804
sub_809A804: @ 0x0809A804
	adds r0, #0x44
	movs r1, #0
	strh r1, [r0]
	bx lr

	thumb_func_start sub_809A80C
sub_809A80C: @ 0x0809A80C
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r5, r0, #0
	ldr r1, [r5, #0x30]
	ldr r0, _0809A850 @ =0x086914B4
	ldr r2, [r0]
	lsls r2, r2, #8
	subs r2, r1, r2
	adds r6, r5, #0
	adds r6, #0x44
	movs r0, #0
	ldrsh r3, [r6, r0]
	ldr r4, _0809A854 @ =0x086914B0
	ldr r0, [r4]
	str r0, [sp]
	movs r0, #0
	bl Interpolate
	adds r1, r0, #0
	ldr r0, [r5, #0x2c]
	ldr r2, [r5, #0x54]
	ldr r3, [r5, #0x58]
	bl sub_809A868
	movs r0, #0
	ldrsh r1, [r6, r0]
	ldr r0, [r4]
	cmp r1, r0
	bge _0809A858
	ldrh r0, [r6]
	adds r0, #1
	strh r0, [r6]
	b _0809A85E
	.align 2, 0
_0809A850: .4byte 0x086914B4
_0809A854: .4byte 0x086914B0
_0809A858:
	adds r0, r5, #0
	bl Proc_Break
_0809A85E:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809A868
sub_809A868: @ 0x0809A868
	push {r4, r5, lr}
	sub sp, #0xc
	adds r5, r2, #0
	ldr r2, _0809A89C @ =0xFFFFF000
	adds r0, r0, r2
	ldr r2, _0809A8A0 @ =0x086914AC
	ldr r4, [r2]
	adds r2, r4, #0
	subs r2, #0x50
	lsls r2, r2, #8
	adds r1, r1, r2
	movs r2, #0xd0
	lsls r2, r2, #7
	lsls r4, r4, #8
	str r5, [sp]
	lsls r3, r3, #0x10
	asrs r3, r3, #0x10
	str r3, [sp, #4]
	str r3, [sp, #8]
	adds r3, r4, #0
	bl sub_8092EB0
	add sp, #0xc
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809A89C: .4byte 0xFFFFF000
_0809A8A0: .4byte 0x086914AC

	thumb_func_start sub_809A8A4
sub_809A8A4: @ 0x0809A8A4
	adds r1, r0, #0
	adds r1, #0x64
	movs r2, #0
	strh r2, [r1]
	adds r0, #0x66
	strh r2, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_809A8B4
sub_809A8B4: @ 0x0809A8B4
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x64
	ldrh r0, [r1]
	adds r0, #2
	strh r0, [r1]
	adds r4, #0x66
	ldrh r0, [r4]
	adds r0, #3
	strh r0, [r4]
	ldrh r1, [r1]
	lsls r2, r1, #0x10
	asrs r1, r2, #0x14
	adds r1, #0x10
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	asrs r2, r2, #0x13
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0
	bl SetBgOffset
	ldrh r4, [r4]
	lsls r2, r4, #0x10
	asrs r1, r2, #0x14
	rsbs r1, r1, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	asrs r2, r2, #0x13
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #1
	bl SetBgOffset
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_809A900
sub_809A900: @ 0x0809A900
	push {r4, r5, lr}
	ldr r0, _0809A9DC @ =0x08691DF8
	bl InitBgs
	movs r0, #0xf
	bl DisableBgSync
	ldr r0, _0809A9E0 @ =gDispIo
	mov ip, r0
	movs r0, #8
	rsbs r0, r0, #0
	mov r1, ip
	ldrb r1, [r1]
	ands r0, r1
	movs r2, #1
	orrs r0, r2
	mov r3, ip
	strb r0, [r3]
	ldrb r0, [r3, #1]
	orrs r0, r2
	movs r3, #2
	orrs r0, r3
	movs r1, #5
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	movs r1, #0x21
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #0x20
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	mov r4, ip
	strb r0, [r4, #1]
	subs r1, #0x83
	adds r0, r1, #0
	ldrb r5, [r4, #0xc]
	ands r0, r5
	strb r0, [r4, #0xc]
	adds r0, r1, #0
	ldrb r4, [r4, #0x10]
	ands r0, r4
	orrs r0, r3
	mov r5, ip
	strb r0, [r5, #0x10]
	adds r0, r1, #0
	ldrb r3, [r5, #0x14]
	ands r0, r3
	orrs r0, r2
	strb r0, [r5, #0x14]
	ldrb r4, [r5, #0x18]
	ands r1, r4
	strb r1, [r5, #0x18]
	mov r2, ip
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r5, [r2]
	ands r0, r5
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r2, #9
	movs r0, #0x10
	strb r0, [r2]
	mov r0, ip
	adds r0, #0x46
	strb r1, [r0]
	ldr r0, _0809A9E4 @ =0x0000FFE0
	mov r1, ip
	ldrh r1, [r1, #0x3c]
	ands r0, r1
	movs r1, #1
	orrs r0, r1
	ldr r1, _0809A9E8 @ =0x0000E0FF
	ands r0, r1
	movs r2, #0xc0
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	mov r3, ip
	strh r0, [r3, #0x3c]
	mov r1, ip
	adds r1, #0x3d
	movs r0, #0x20
	ldrb r4, [r1]
	orrs r0, r4
	strb r0, [r1]
	movs r0, #0
	movs r1, #4
	bl SetBgBpp
	movs r0, #1
	movs r1, #4
	bl SetBgBpp
	movs r0, #2
	movs r1, #8
	bl SetBgBpp
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809A9DC: .4byte 0x08691DF8
_0809A9E0: .4byte gDispIo
_0809A9E4: .4byte 0x0000FFE0
_0809A9E8: .4byte 0x0000E0FF

	thumb_func_start sub_809A9EC
sub_809A9EC: @ 0x0809A9EC
	push {r4, lr}
	ldr r4, _0809AA14 @ =0x0837ACD0
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, _0809AA18 @ =0x0837C844
	ldr r1, _0809AA1C @ =gBuf
	bl Decompress
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809AA14: .4byte 0x0837ACD0
_0809AA18: .4byte 0x0837C844
_0809AA1C: .4byte gBuf

	thumb_func_start sub_809AA20
sub_809AA20: @ 0x0809AA20
	push {r4, r5, r6, lr}
	sub sp, #0x10
	adds r4, r0, #0
	adds r6, r1, #0
	ldr r5, _0809AA6C @ =gBg0Tm
	adds r0, r5, #0
	movs r1, #0xff
	bl TmFill
	ldr r0, _0809AA70 @ =0x08691E10
	lsls r4, r4, #2
	adds r4, r4, r0
	ldrb r0, [r4, #1]
	str r0, [sp]
	movs r0, #0x14
	str r0, [sp, #4]
	ldrb r1, [r4]
	lsls r0, r1, #1
	ldr r1, _0809AA74 @ =gBuf
	adds r0, r0, r1
	str r0, [sp, #8]
	movs r0, #2
	ldrsb r0, [r4, r0]
	str r0, [sp, #0xc]
	adds r0, r5, #0
	adds r1, r6, #0
	movs r2, #0
	movs r3, #0
	bl sub_8014E98
	movs r0, #1
	bl EnableBgSync
	add sp, #0x10
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809AA6C: .4byte gBg0Tm
_0809AA70: .4byte 0x08691E10
_0809AA74: .4byte gBuf

	thumb_func_start sub_809AA78
sub_809AA78: @ 0x0809AA78
	push {lr}
	ldr r0, _0809AA94 @ =0x03005284
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	bne _0809AA8E
	movs r0, #0x44
	movs r1, #0
	bl StartBgmCore
_0809AA8E:
	pop {r0}
	bx r0
	.align 2, 0
_0809AA94: .4byte 0x03005284

	thumb_func_start sub_809AA98
sub_809AA98: @ 0x0809AA98
	push {r4, r5, lr}
	adds r5, r0, #0
	ldr r0, _0809AAB0 @ =0x03005284
	movs r4, #0
	ldrsb r4, [r0, r4]
	cmp r4, #0
	beq _0809AAB4
	adds r0, r5, #0
	bl Proc_End
	b _0809AAE6
	.align 2, 0
_0809AAB0: .4byte 0x03005284
_0809AAB4:
	bl sub_80988C0
	bl SetAllBlackPals
	ldr r2, _0809AAEC @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bl sub_809A9EC
	adds r0, r5, #0
	adds r0, #0x64
	strh r4, [r0]
	subs r0, #0x20
	strh r4, [r0]
_0809AAE6:
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809AAEC: .4byte gDispIo

	thumb_func_start sub_809AAF0
sub_809AAF0: @ 0x0809AAF0
	push {r4, r5, r6, r7, lr}
	adds r6, r0, #0
	adds r7, r6, #0
	adds r7, #0x64
	movs r1, #0
	ldrsh r0, [r7, r1]
	lsls r0, r0, #2
	ldr r1, _0809AB10 @ =0x08691E30
	adds r5, r0, r1
	ldrh r0, [r5, #2]
	cmp r0, #0
	bne _0809AB14
	adds r0, r6, #0
	bl Proc_Break
	b _0809AB42
	.align 2, 0
_0809AB10: .4byte 0x08691E30
_0809AB14:
	adds r4, r6, #0
	adds r4, #0x44
	ldrh r1, [r4]
	movs r2, #0
	ldrsh r0, [r4, r2]
	cmp r0, #0
	beq _0809AB28
	subs r0, r1, #1
	strh r0, [r4]
	b _0809AB42
_0809AB28:
	ldrb r0, [r5]
	ldrb r1, [r5, #1]
	bl sub_809AA20
	ldr r0, _0809AB48 @ =0x08691EB8
	adds r1, r6, #0
	bl SpawnProc
	ldrh r0, [r5, #2]
	strh r0, [r4]
	ldrh r0, [r7]
	adds r0, #1
	strh r0, [r7]
_0809AB42:
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809AB48: .4byte 0x08691EB8

	thumb_func_start sub_809AB4C
sub_809AB4C: @ 0x0809AB4C
	push {lr}
	ldr r0, _0809AB9C @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809AB5E
	movs r0, #0x93
	bl m4aSongNumStart
_0809AB5E:
	ldr r3, _0809ABA0 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x80
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _0809ABA4 @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	movs r1, #0x1f
	orrs r0, r1
	strh r0, [r3, #0x3c]
	movs r0, #0x20
	ldrb r1, [r2]
	orrs r0, r1
	strb r0, [r2]
	pop {r0}
	bx r0
	.align 2, 0
_0809AB9C: .4byte gPlaySt
_0809ABA0: .4byte gDispIo
_0809ABA4: .4byte 0x0000FFE0

	thumb_func_start sub_809ABA8
sub_809ABA8: @ 0x0809ABA8
	push {r4, lr}
	ldr r3, _0809ABE4 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x80
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r4, #0
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #8
	strb r0, [r1]
	ldr r0, _0809ABE8 @ =0x0837CB0C
	movs r1, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0809ABEC @ =gPal
	strh r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809ABE4: .4byte gDispIo
_0809ABE8: .4byte 0x0837CB0C
_0809ABEC: .4byte gPal

	thumb_func_start sub_809ABF0
sub_809ABF0: @ 0x0809ABF0
	push {r4, lr}
	ldr r2, _0809AC28 @ =gDispIo
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r1, #8
	movs r4, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x45
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	ldr r0, _0809AC2C @ =0x0837CB2C
	movs r1, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r0, _0809AC30 @ =gPal
	strh r4, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809AC28: .4byte gDispIo
_0809AC2C: .4byte 0x0837CB2C
_0809AC30: .4byte gPal

	thumb_func_start sub_809AC34
sub_809AC34: @ 0x0809AC34
	push {lr}
	ldr r0, _0809AC4C @ =0x0837CB4C
	movs r1, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r1, _0809AC50 @ =gPal
	movs r0, #0
	strh r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0809AC4C: .4byte 0x0837CB4C
_0809AC50: .4byte gPal

	thumb_func_start sub_809AC54
sub_809AC54: @ 0x0809AC54
	push {lr}
	ldr r0, _0809AC6C @ =0x0837CB6C
	movs r1, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r1, _0809AC70 @ =gPal
	movs r0, #0
	strh r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0809AC6C: .4byte 0x0837CB6C
_0809AC70: .4byte gPal

	thumb_func_start sub_809AC74
sub_809AC74: @ 0x0809AC74
	push {lr}
	ldr r0, _0809AC8C @ =Pal_AllBlack
	movs r1, #0
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r1, _0809AC90 @ =gPal
	movs r0, #0
	strh r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0809AC8C: .4byte Pal_AllBlack
_0809AC90: .4byte gPal

	thumb_func_start sub_809AC94
sub_809AC94: @ 0x0809AC94
	push {r4, r5, lr}
	ldr r0, _0809AD20 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809ACA6
	movs r0, #0x94
	bl m4aSongNumStart
_0809ACA6:
	ldr r5, _0809AD24 @ =gBg0Tm
	adds r0, r5, #0
	movs r1, #0
	bl TmFill
	ldr r4, _0809AD28 @ =0x0837CB8C
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r0, #0xc0
	lsls r0, r0, #0x13
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	ldr r0, _0809AD2C @ =0x0837EEB4
	adds r1, r5, #0
	bl Decompress
	ldr r0, _0809AD30 @ =0x0837F418
	movs r1, #0
	movs r2, #0x60
	bl ApplyPaletteExt
	movs r0, #1
	bl EnableBgSync
	ldr r3, _0809AD34 @ =gDispIo
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x80
	orrs r0, r1
	strb r0, [r2]
	adds r0, r3, #0
	adds r0, #0x44
	movs r1, #0
	strb r1, [r0]
	adds r0, #1
	strb r1, [r0]
	adds r1, r3, #0
	adds r1, #0x46
	movs r0, #0x10
	strb r0, [r1]
	ldr r0, _0809AD38 @ =0x0000FFE0
	ldrh r1, [r3, #0x3c]
	ands r0, r1
	movs r1, #0x1e
	orrs r0, r1
	strh r0, [r3, #0x3c]
	movs r0, #0x20
	ldrb r1, [r2]
	orrs r0, r1
	strb r0, [r2]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809AD20: .4byte gPlaySt
_0809AD24: .4byte gBg0Tm
_0809AD28: .4byte 0x0837CB8C
_0809AD2C: .4byte 0x0837EEB4
_0809AD30: .4byte 0x0837F418
_0809AD34: .4byte gDispIo
_0809AD38: .4byte 0x0000FFE0

	thumb_func_start sub_809AD3C
sub_809AD3C: @ 0x0809AD3C
	ldr r3, _0809AD60 @ =gDispIo
	adds r1, r3, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r2, [r1]
	ands r0, r2
	strb r0, [r1]
	adds r1, #8
	movs r2, #0
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	bx lr
	.align 2, 0
_0809AD60: .4byte gDispIo

	thumb_func_start sub_809AD64
sub_809AD64: @ 0x0809AD64
	ldr r2, _0809AD84 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	subs r1, #8
	ands r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_0809AD84: .4byte gDispIo

	thumb_func_start sub_809AD88
sub_809AD88: @ 0x0809AD88
	push {lr}
	adds r1, r0, #0
	ldr r0, _0809ADA0 @ =0x03005284
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0809ADA4
	adds r0, r1, #0
	bl Proc_End
	b _0809ADC2
	.align 2, 0
_0809ADA0: .4byte 0x03005284
_0809ADA4:
	ldr r2, _0809ADC8 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
_0809ADC2:
	pop {r0}
	bx r0
	.align 2, 0
_0809ADC8: .4byte gDispIo

	thumb_func_start sub_809ADCC
sub_809ADCC: @ 0x0809ADCC
	push {r4, r5, lr}
	sub sp, #4
	bl sub_809B0E8
	ldr r4, _0809AE44 @ =0x08375ADC
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	ldr r0, _0809AE48 @ =0x06000020
	adds r1, r1, r0
	adds r0, r4, #0
	bl Decompress
	bl sub_809AED4
	ldr r4, _0809AE4C @ =0x0836F6D4
	movs r0, #2
	bl GetBgChrOffset
	adds r1, r0, #0
	movs r5, #0xc0
	lsls r5, r5, #0x13
	adds r1, r1, r5
	adds r0, r4, #0
	bl Decompress
	ldr r4, _0809AE50 @ =0x08373F80
	movs r0, #2
	bl GetBgTilemapOffset
	adds r1, r0, #0
	adds r1, r1, r5
	adds r0, r4, #0
	bl Decompress
	ldr r0, _0809AE54 @ =0x08374670
	ldr r4, _0809AE58 @ =gBuf
	adds r1, r4, #0
	bl Decompress
	ldr r0, _0809AE5C @ =0x08375B64
	movs r1, #0xd0
	lsls r1, r1, #1
	adds r4, r4, r1
	adds r1, r4, #0
	movs r2, #0x20
	bl sub_8015260
	movs r0, #1
	str r0, [sp]
	movs r1, #1
	movs r2, #1
	movs r3, #0
	bl sub_809892C
	add sp, #4
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809AE44: .4byte 0x08375ADC
_0809AE48: .4byte 0x06000020
_0809AE4C: .4byte 0x0836F6D4
_0809AE50: .4byte 0x08373F80
_0809AE54: .4byte 0x08374670
_0809AE58: .4byte gBuf
_0809AE5C: .4byte 0x08375B64

	thumb_func_start sub_809AE60
sub_809AE60: @ 0x0809AE60
	push {lr}
	ldr r2, _0809AE94 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #2
	orrs r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	ldr r0, _0809AE98 @ =gBuf
	movs r2, #0x80
	lsls r2, r2, #2
	movs r1, #0
	bl ApplyPaletteExt
	ldr r1, _0809AE9C @ =gPal
	movs r0, #0
	strh r0, [r1]
	pop {r0}
	bx r0
	.align 2, 0
_0809AE94: .4byte gDispIo
_0809AE98: .4byte gBuf
_0809AE9C: .4byte gPal

	thumb_func_start sub_809AEA0
sub_809AEA0: @ 0x0809AEA0
	ldr r2, _0809AEC0 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	bx lr
	.align 2, 0
_0809AEC0: .4byte gDispIo

	thumb_func_start sub_809AEC4
sub_809AEC4: @ 0x0809AEC4
	push {lr}
	movs r0, #0xd
	movs r1, #1
	bl sub_8014ACC
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809AED4
sub_809AED4: @ 0x0809AED4
	push {r4, r5, r6, lr}
	sub sp, #8
	movs r5, #0
	ldr r0, _0809AF24 @ =0x086914F8
	ldr r0, [r0]
	cmp r5, r0
	bge _0809AF14
	movs r6, #4
_0809AEE4:
	bl RandNextB
	movs r1, #0x1d
	bl DivRem
	adds r4, r0, #0
	bl RandNextB
	movs r1, #0x1d
	bl DivRem
	adds r2, r0, #0
	str r6, [sp]
	str r6, [sp, #4]
	ldr r0, _0809AF28 @ =gBg0Tm
	adds r1, r4, #0
	ldr r3, _0809AF2C @ =0x0000D001
	bl sub_8014E30
	adds r5, #1
	ldr r0, _0809AF24 @ =0x086914F8
	ldr r0, [r0]
	cmp r5, r0
	blt _0809AEE4
_0809AF14:
	movs r0, #1
	bl EnableBgSync
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809AF24: .4byte 0x086914F8
_0809AF28: .4byte gBg0Tm
_0809AF2C: .4byte 0x0000D001

	thumb_func_start sub_809AF30
sub_809AF30: @ 0x0809AF30
	push {lr}
	sub sp, #4
	adds r1, r0, #0
	ldr r0, _0809AF4C @ =0x03005284
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0809AF50
	adds r0, r1, #0
	bl Proc_End
	b _0809AF6E
	.align 2, 0
_0809AF4C: .4byte 0x03005284
_0809AF50:
	bl sub_809B188
	movs r0, #0xd
	bl EnableBgSync
	movs r0, #2
	bl sub_8098AD8
	movs r0, #1
	str r0, [sp]
	movs r1, #0
	movs r2, #1
	movs r3, #0
	bl sub_809892C
_0809AF6E:
	add sp, #4
	pop {r0}
	bx r0

	thumb_func_start sub_809AF74
sub_809AF74: @ 0x0809AF74
	adds r1, r0, #0
	adds r1, #0x64
	movs r2, #0
	strh r2, [r1]
	adds r0, #0x66
	strh r2, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_809AF84
sub_809AF84: @ 0x0809AF84
	push {r4, r5, lr}
	adds r0, #0x64
	ldrh r1, [r0]
	adds r1, #1
	strh r1, [r0]
	movs r3, #0
	ldrsh r2, [r0, r3]
	ldr r0, _0809AFDC @ =0x086914F0
	ldr r0, [r0]
	adds r3, r2, #0
	muls r3, r0, r3
	ldr r0, _0809AFE0 @ =0x086914F4
	ldr r0, [r0]
	adds r5, r2, #0
	muls r5, r0, r5
	movs r0, #1
	ands r1, r0
	movs r4, #0x30
	cmp r1, #0
	beq _0809AFAE
	movs r4, #0
_0809AFAE:
	adds r1, r3, r4
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	adds r2, r4, #0
	subs r2, #0x10
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0
	bl SetBgOffset
	adds r1, r5, #0
	adds r1, #0x18
	adds r1, r1, r4
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	adds r2, r4, #0
	adds r2, #8
	movs r0, #1
	bl SetBgOffset
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809AFDC: .4byte 0x086914F0
_0809AFE0: .4byte 0x086914F4

	thumb_func_start sub_809AFE4
sub_809AFE4: @ 0x0809AFE4
	push {r4, lr}
	adds r4, r0, #0
	bl sub_809AF84
	adds r4, #0x66
	ldrh r1, [r4]
	adds r1, #1
	strh r1, [r4]
	lsls r1, r1, #0x10
	asrs r1, r1, #0x13
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r0, #2
	movs r2, #0
	bl SetBgOffset
	ldrh r4, [r4]
	lsls r1, r4, #0x10
	asrs r1, r1, #0x13
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	movs r0, #3
	movs r2, #0
	bl SetBgOffset
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_809B01C
sub_809B01C: @ 0x0809B01C
	adds r0, #0x64
	movs r1, #0
	strh r1, [r0]
	bx lr

	thumb_func_start sub_809B024
sub_809B024: @ 0x0809B024
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r1, r0, #0
	adds r6, r1, #0
	adds r6, #0x64
	ldrh r0, [r6]
	adds r0, #1
	strh r0, [r6]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x1f
	ble _0809B042
	adds r0, r1, #0
	bl Proc_Break
_0809B042:
	ldr r5, _0809B090 @ =gDispIo
	adds r2, r5, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	movs r0, #0
	ldrsh r3, [r6, r0]
	movs r4, #0x20
	str r4, [sp]
	movs r0, #0
	movs r1, #6
	movs r2, #4
	bl Interpolate
	adds r1, r5, #0
	adds r1, #0x44
	strb r0, [r1]
	movs r1, #0
	ldrsh r3, [r6, r1]
	str r4, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r1, r5, #0
	adds r1, #0x45
	strb r0, [r1]
	adds r1, #1
	movs r0, #0
	strb r0, [r1]
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809B090: .4byte gDispIo

	thumb_func_start sub_809B094
sub_809B094: @ 0x0809B094
	adds r1, r0, #0
	adds r1, #0x64
	movs r2, #0
	strh r2, [r1]
	adds r0, #0x66
	strh r2, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_809B0A4
sub_809B0A4: @ 0x0809B0A4
	push {r4, lr}
	adds r4, r0, #0
	adds r1, r4, #0
	adds r1, #0x64
	ldrh r0, [r1]
	adds r0, #0xa0
	strh r0, [r1]
	adds r4, #0x66
	ldrh r0, [r4]
	adds r0, #0x40
	strh r0, [r4]
	ldrh r1, [r1]
	lsls r2, r1, #0x10
	asrs r2, r2, #0x18
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	ldrh r4, [r4]
	lsls r0, r4, #0x10
	asrs r0, r0, #0x18
	movs r2, #0xb4
	subs r2, r2, r0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	movs r1, #0
	bl SetBgOffset
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_809B0E8
sub_809B0E8: @ 0x0809B0E8
	push {r4, r5, lr}
	ldr r0, _0809B180 @ =0x086920A0
	bl InitBgs
	movs r0, #0xf
	bl DisableBgSync
	ldr r0, _0809B184 @ =gDispIo
	mov ip, r0
	movs r0, #8
	rsbs r0, r0, #0
	mov r1, ip
	ldrb r1, [r1]
	ands r0, r1
	mov r2, ip
	strb r0, [r2]
	movs r3, #1
	ldrb r1, [r2, #1]
	orrs r1, r3
	movs r0, #2
	orrs r1, r0
	movs r0, #5
	rsbs r0, r0, #0
	ands r1, r0
	subs r0, #4
	ands r1, r0
	movs r0, #0x10
	orrs r1, r0
	movs r2, #4
	rsbs r2, r2, #0
	adds r0, r2, #0
	mov r4, ip
	ldrb r4, [r4, #0xc]
	ands r0, r4
	mov r5, ip
	strb r0, [r5, #0xc]
	adds r0, r2, #0
	ldrb r4, [r5, #0x10]
	ands r0, r4
	strb r0, [r5, #0x10]
	adds r0, r2, #0
	ldrb r5, [r5, #0x14]
	ands r0, r5
	orrs r0, r3
	mov r3, ip
	strb r0, [r3, #0x14]
	ldrb r4, [r3, #0x18]
	ands r2, r4
	strb r2, [r3, #0x18]
	movs r0, #0x21
	rsbs r0, r0, #0
	ands r1, r0
	subs r0, #0x20
	ands r1, r0
	movs r0, #0x7f
	ands r1, r0
	strb r1, [r3, #1]
	mov r1, ip
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r5, [r1]
	ands r0, r5
	strb r0, [r1]
	adds r1, #8
	movs r2, #0
	movs r0, #0x10
	strb r0, [r1]
	mov r0, ip
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	pop {r4, r5}
	pop {r0}
	bx r0
	.align 2, 0
_0809B180: .4byte 0x086920A0
_0809B184: .4byte gDispIo

	thumb_func_start sub_809B188
sub_809B188: @ 0x0809B188
	push {lr}
	ldr r0, _0809B210 @ =0x086920B8
	bl InitBgs
	movs r0, #0xf
	bl DisableBgSync
	ldr r3, _0809B214 @ =gDispIo
	movs r0, #8
	rsbs r0, r0, #0
	ldrb r1, [r3]
	ands r0, r1
	strb r0, [r3]
	movs r0, #1
	ldrb r2, [r3, #1]
	orrs r0, r2
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #4
	orrs r0, r1
	movs r1, #9
	rsbs r1, r1, #0
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	movs r1, #0x21
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #0x20
	ands r0, r1
	movs r1, #0x7f
	ands r0, r1
	strb r0, [r3, #1]
	adds r2, r3, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r1, r3, #0
	adds r1, #0x44
	movs r2, #0
	movs r0, #6
	strb r0, [r1]
	adds r0, r3, #0
	adds r0, #0x45
	strb r2, [r0]
	adds r0, #1
	strb r2, [r0]
	ldr r0, _0809B218 @ =0x0000FFE0
	ldrh r2, [r3, #0x3c]
	ands r0, r2
	movs r1, #1
	orrs r0, r1
	ldr r1, _0809B21C @ =0x0000E0FF
	ands r0, r1
	movs r2, #0x80
	lsls r2, r2, #3
	adds r1, r2, #0
	orrs r0, r1
	strh r0, [r3, #0x3c]
	bl SetAllBlackPals
	pop {r0}
	bx r0
	.align 2, 0
_0809B210: .4byte 0x086920B8
_0809B214: .4byte gDispIo
_0809B218: .4byte 0x0000FFE0
_0809B21C: .4byte 0x0000E0FF

	thumb_func_start sub_809B220
sub_809B220: @ 0x0809B220
	push {r4, r5, r6, r7, lr}
	mov r7, sb
	mov r6, r8
	push {r6, r7}
	adds r4, r0, #0
	adds r5, r2, #0
	adds r7, r3, #0
	lsls r1, r1, #0x10
	lsrs r1, r1, #0x10
	mov r8, r1
	movs r2, #0
_0809B236:
	movs r0, #0
	adds r2, r2, r7
	mov sb, r2
	cmp r0, r7
	bge _0809B26C
_0809B240:
	movs r2, #0
	adds r1, r0, #1
	mov ip, r1
	lsls r6, r0, #5
_0809B248:
	movs r1, #0
	adds r3, r2, r5
	cmp r1, r5
	bge _0809B260
	mov r0, r8
	adds r2, r0, r6
_0809B254:
	adds r0, r2, r1
	strh r0, [r4]
	adds r4, #2
	adds r1, #1
	cmp r1, r5
	blt _0809B254
_0809B260:
	adds r2, r3, #0
	cmp r2, #0x1f
	ble _0809B248
	mov r0, ip
	cmp r0, r7
	blt _0809B240
_0809B26C:
	mov r2, sb
	cmp r2, #0x1f
	ble _0809B236
	pop {r3, r4}
	mov r8, r3
	mov sb, r4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809B280
sub_809B280: @ 0x0809B280
	push {r4, lr}
	adds r1, r0, #0
	ldr r0, _0809B298 @ =0x03005284
	movs r4, #0
	ldrsb r4, [r0, r4]
	cmp r4, #0
	beq _0809B29C
	adds r0, r1, #0
	bl Proc_End
	b _0809B2E8
	.align 2, 0
_0809B298: .4byte 0x03005284
_0809B29C:
	bl sub_80988C0
	bl SetAllBlackPals
	ldr r2, _0809B2F0 @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	subs r1, #4
	ands r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	adds r1, r2, #0
	adds r1, #0x3c
	movs r0, #0x3f
	ldrb r3, [r1]
	ands r0, r3
	strb r0, [r1]
	adds r1, #8
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r2, #0
	adds r0, #0x45
	strb r4, [r0]
	adds r0, #1
	strb r4, [r0]
	movs r0, #0
	bl sub_8098AD8
	bl sub_8098AC0
_0809B2E8:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809B2F0: .4byte gDispIo

	thumb_func_start sub_809B2F4
sub_809B2F4: @ 0x0809B2F4
	adds r0, #0x64
	movs r1, #0
	strh r1, [r0]
	bx lr

	thumb_func_start sub_809B2FC
sub_809B2FC: @ 0x0809B2FC
	push {r4, lr}
	adds r4, r0, #0
	adds r0, #0x64
	ldrh r1, [r0]
	adds r1, #1
	strh r1, [r0]
	movs r2, #0
	ldrsh r1, [r0, r2]
	ldr r0, _0809B328 @ =0x08692118
	ldr r0, [r0]
	cmp r1, r0
	blt _0809B32C
	movs r0, #1
	bl SetNextGameAction
	adds r0, r4, #0
	bl sub_8014870
	adds r0, r4, #0
	bl Proc_Break
	b _0809B35C
	.align 2, 0
_0809B328: .4byte 0x08692118
_0809B32C:
	ldr r0, _0809B364 @ =gKeySt
	ldr r1, [r0]
	movs r0, #9
	ldrh r1, [r1, #8]
	ands r0, r1
	cmp r0, #0
	beq _0809B35C
	ldr r0, _0809B368 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809B34A
	movs r0, #0x6d
	bl m4aSongNumStart
_0809B34A:
	movs r0, #0
	bl SetNextGameAction
	adds r0, r4, #0
	bl sub_8014888
	adds r0, r4, #0
	bl Proc_Break
_0809B35C:
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809B364: .4byte gKeySt
_0809B368: .4byte gPlaySt

	thumb_func_start sub_809B36C
sub_809B36C: @ 0x0809B36C
	push {lr}
	bl EndEachAnimProc
	pop {r0}
	bx r0
	.align 2, 0

	thumb_func_start sub_809B378
sub_809B378: @ 0x0809B378
	push {lr}
	adds r1, r0, #0
	ldr r0, _0809B394 @ =0x03005284
	ldrb r0, [r0]
	lsls r0, r0, #0x18
	asrs r0, r0, #0x18
	cmp r0, #0
	beq _0809B38E
	adds r0, r1, #0
	bl Proc_End
_0809B38E:
	pop {r0}
	bx r0
	.align 2, 0
_0809B394: .4byte 0x03005284

	thumb_func_start sub_809B398
sub_809B398: @ 0x0809B398
	push {r4, r5, r6, lr}
	adds r6, r0, #0
	ldr r0, _0809B478 @ =0x08692240
	bl InitBgs
	movs r0, #0xf
	bl DisableBgSync
	ldr r2, _0809B47C @ =gDispIo
	movs r0, #2
	rsbs r0, r0, #0
	ldrb r1, [r2, #1]
	ands r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	movs r0, #2
	bl GetBgTilemapOffset
	movs r5, #0xc0
	lsls r5, r5, #0x13
	adds r0, r0, r5
	movs r1, #0x80
	lsls r1, r1, #5
	movs r2, #0
	bl sub_8015208
	ldr r4, _0809B480 @ =0x0835CC90
	movs r0, #0
	bl GetBgChrOffset
	adds r1, r0, #0
	adds r1, r1, r5
	adds r0, r4, #0
	bl Decompress
	ldr r4, _0809B484 @ =0x0835F780
	movs r0, #0
	bl GetBgTilemapOffset
	adds r1, r0, #0
	adds r1, r1, r5
	adds r0, r4, #0
	bl Decompress
	ldr r4, _0809B488 @ =0x0835F9EC
	movs r0, #1
	bl GetBgTilemapOffset
	adds r1, r0, #0
	adds r1, r1, r5
	adds r0, r4, #0
	bl Decompress
	ldr r4, _0809B48C @ =0x0835F3A8
	movs r0, #2
	bl GetBgTilemapOffset
	adds r1, r0, #0
	adds r1, r1, r5
	adds r0, r4, #0
	bl Decompress
	ldr r0, _0809B490 @ =0x0835CB90
	movs r2, #0x80
	lsls r2, r2, #1
	movs r1, #0
	bl ApplyPaletteExt
	ldr r4, _0809B494 @ =0x0835FC3C
	movs r0, #3
	bl GetBgChrOffset
	adds r1, r0, #0
	adds r1, r1, r5
	adds r0, r4, #0
	bl Decompress
	ldr r0, _0809B498 @ =0x08364418
	movs r1, #0xf0
	lsls r1, r1, #1
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r2, _0809B49C @ =gBg3Tm
	movs r1, #0
	ldr r4, _0809B4A0 @ =0x0000027F
	ldr r0, _0809B4A4 @ =0xFFFFF000
	adds r3, r0, #0
_0809B458:
	adds r0, r1, r3
	strh r0, [r2]
	adds r2, #2
	adds r1, #1
	cmp r1, r4
	ble _0809B458
	movs r0, #8
	bl EnableBgSync
	adds r1, r6, #0
	adds r1, #0x64
	movs r0, #0
	strh r0, [r1]
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809B478: .4byte 0x08692240
_0809B47C: .4byte gDispIo
_0809B480: .4byte 0x0835CC90
_0809B484: .4byte 0x0835F780
_0809B488: .4byte 0x0835F9EC
_0809B48C: .4byte 0x0835F3A8
_0809B490: .4byte 0x0835CB90
_0809B494: .4byte 0x0835FC3C
_0809B498: .4byte 0x08364418
_0809B49C: .4byte gBg3Tm
_0809B4A0: .4byte 0x0000027F
_0809B4A4: .4byte 0xFFFFF000

	thumb_func_start sub_809B4A8
sub_809B4A8: @ 0x0809B4A8
	push {r4, r5, r6, lr}
	sub sp, #8
	adds r6, r0, #0
	ldr r0, _0809B524 @ =0x0835E6DC
	ldr r1, _0809B528 @ =0x06010000
	bl Decompress
	ldr r0, _0809B52C @ =0x0835CB90
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0xa0
	bl ApplyPaletteExt
	ldr r5, _0809B530 @ =0x0835F2C8
	movs r0, #3
	str r0, [sp]
	movs r4, #0
	str r4, [sp, #4]
	adds r0, r5, #0
	movs r1, #0xa3
	movs r2, #0x1b
	movs r3, #0
	bl StartAnimProc
	str r4, [sp]
	str r4, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x78
	movs r2, #0x55
	movs r3, #0
	bl StartAnimProc
	movs r0, #1
	str r0, [sp]
	str r4, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x78
	movs r2, #0x78
	movs r3, #0
	bl StartAnimProc
	movs r0, #2
	str r0, [sp]
	str r4, [sp, #4]
	adds r0, r5, #0
	movs r1, #0x78
	movs r2, #0x98
	movs r3, #0
	bl StartAnimProc
	ldr r0, _0809B534 @ =0x08692258
	adds r1, r6, #0
	bl SpawnProc
	ldr r0, _0809B538 @ =0x08692298
	adds r1, r6, #0
	bl SpawnProc
	add sp, #8
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809B524: .4byte 0x0835E6DC
_0809B528: .4byte 0x06010000
_0809B52C: .4byte 0x0835CB90
_0809B530: .4byte 0x0835F2C8
_0809B534: .4byte 0x08692258
_0809B538: .4byte 0x08692298

	thumb_func_start sub_809B53C
sub_809B53C: @ 0x0809B53C
	adds r1, r0, #0
	adds r1, #0x64
	movs r2, #0
	strh r2, [r1]
	adds r0, #0x66
	strh r2, [r0]
	bx lr
	.align 2, 0

	thumb_func_start sub_809B54C
sub_809B54C: @ 0x0809B54C
	push {lr}
	adds r2, r0, #0
	adds r3, r2, #0
	adds r3, #0x64
	ldrh r0, [r3]
	adds r1, r0, #1
	strh r1, [r3]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #3
	ble _0809B586
	movs r0, #0
	strh r0, [r3]
	adds r2, #0x66
	ldrh r0, [r2]
	adds r0, #1
	movs r1, #0xf
	ands r0, r1
	strh r0, [r2]
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #1
	ldr r1, _0809B58C @ =0x0835F388
	adds r0, r0, r1
	movs r1, #0x8c
	lsls r1, r1, #2
	movs r2, #2
	bl ApplyPaletteExt
_0809B586:
	pop {r0}
	bx r0
	.align 2, 0
_0809B58C: .4byte 0x0835F388

	thumb_func_start sub_809B590
sub_809B590: @ 0x0809B590
	push {r4, lr}
	ldr r1, _0809B5FC @ =gDispIo
	mov ip, r1
	movs r1, #1
	mov r2, ip
	ldrb r2, [r2, #1]
	orrs r1, r2
	movs r2, #3
	rsbs r2, r2, #0
	ands r1, r2
	subs r2, #2
	ands r1, r2
	movs r2, #8
	orrs r1, r2
	movs r2, #0x10
	orrs r1, r2
	mov r3, ip
	strb r1, [r3, #1]
	adds r3, #0x3c
	ldr r1, _0809B600 @ =0x0000FFE0
	mov r4, ip
	ldrh r4, [r4, #0x3c]
	ands r1, r4
	movs r2, #1
	orrs r1, r2
	ldr r2, _0809B604 @ =0x0000E0FF
	ands r1, r2
	movs r4, #0x80
	lsls r4, r4, #4
	adds r2, r4, #0
	orrs r1, r2
	mov r2, ip
	strh r1, [r2, #0x3c]
	movs r1, #0x3f
	ldrb r4, [r3]
	ands r1, r4
	movs r2, #0x40
	orrs r1, r2
	strb r1, [r3]
	mov r1, ip
	adds r1, #0x44
	movs r2, #0
	strb r2, [r1]
	adds r3, #9
	movs r1, #0x10
	strb r1, [r3]
	mov r1, ip
	adds r1, #0x46
	strb r2, [r1]
	adds r0, #0x64
	strh r2, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809B5FC: .4byte gDispIo
_0809B600: .4byte 0x0000FFE0
_0809B604: .4byte 0x0000E0FF

	thumb_func_start sub_809B608
sub_809B608: @ 0x0809B608
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	adds r6, r7, #0
	adds r6, #0x64
	ldrh r0, [r6]
	adds r0, #1
	movs r5, #0
	strh r0, [r6]
	movs r0, #0
	ldrsh r3, [r6, r0]
	ldr r4, _0809B694 @ =0x08692120
	ldr r0, [r4]
	str r0, [sp]
	movs r0, #5
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	ldr r1, _0809B698 @ =gDispIo
	mov ip, r1
	mov r3, ip
	adds r3, #0x3c
	movs r1, #0x3f
	ldrb r2, [r3]
	ands r1, r2
	movs r2, #0x40
	orrs r1, r2
	strb r1, [r3]
	mov r1, ip
	adds r1, #0x44
	strb r0, [r1]
	movs r1, #0x10
	subs r1, r1, r0
	mov r0, ip
	adds r0, #0x45
	strb r1, [r0]
	adds r0, #1
	strb r5, [r0]
	movs r1, #0x10
	rsbs r1, r1, #0
	movs r0, #0
	ldrsh r3, [r6, r0]
	ldr r0, [r4]
	str r0, [sp]
	movs r0, #5
	movs r2, #0
	bl Interpolate
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #0
	movs r1, #0
	bl SetBgOffset
	movs r2, #0
	ldrsh r1, [r6, r2]
	ldr r0, [r4]
	cmp r1, r0
	blt _0809B68C
	adds r0, r7, #0
	bl Proc_Break
	movs r0, #0
	strh r0, [r6]
_0809B68C:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809B694: .4byte 0x08692120
_0809B698: .4byte gDispIo

	thumb_func_start sub_809B69C
sub_809B69C: @ 0x0809B69C
	adds r0, #0x64
	movs r1, #0
	strh r1, [r0]
	bx lr

	thumb_func_start sub_809B6A4
sub_809B6A4: @ 0x0809B6A4
	push {lr}
	adds r3, r0, #0
	adds r2, r3, #0
	adds r2, #0x64
	ldrh r0, [r2]
	adds r1, r0, #1
	strh r1, [r2]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	ldr r1, _0809B6C8 @ =0x0869212C
	ldr r1, [r1]
	cmp r0, r1
	blt _0809B6C4
	adds r0, r3, #0
	bl Proc_Break
_0809B6C4:
	pop {r0}
	bx r0
	.align 2, 0
_0809B6C8: .4byte 0x0869212C

	thumb_func_start sub_809B6CC
sub_809B6CC: @ 0x0809B6CC
	ldr r3, _0809B6F0 @ =gDispIo
	movs r1, #1
	ldrb r2, [r3, #1]
	orrs r1, r2
	movs r2, #3
	rsbs r2, r2, #0
	ands r1, r2
	movs r2, #4
	orrs r1, r2
	movs r2, #8
	orrs r1, r2
	movs r2, #0x10
	orrs r1, r2
	strb r1, [r3, #1]
	adds r0, #0x64
	movs r1, #0
	strh r1, [r0]
	bx lr
	.align 2, 0
_0809B6F0: .4byte gDispIo

	thumb_func_start sub_809B6F4
sub_809B6F4: @ 0x0809B6F4
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	adds r5, r7, #0
	adds r5, #0x64
	ldrh r0, [r5]
	adds r0, #1
	strh r0, [r5]
	movs r0, #0
	ldrsh r3, [r5, r0]
	ldr r6, _0809B758 @ =0x0869211C
	ldr r0, [r6]
	str r0, [sp]
	movs r0, #4
	movs r1, #0xf0
	movs r2, #0
	bl Interpolate
	adds r4, r0, #0
	lsls r4, r4, #0x10
	lsrs r4, r4, #0x10
	movs r0, #0
	ldrsh r3, [r5, r0]
	ldr r0, [r6]
	str r0, [sp]
	movs r0, #4
	movs r1, #0x69
	movs r2, #0
	bl Interpolate
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #2
	adds r1, r4, #0
	bl SetBgOffset
	movs r0, #0
	ldrsh r1, [r5, r0]
	ldr r0, [r6]
	cmp r1, r0
	blt _0809B74E
	adds r0, r7, #0
	bl Proc_Break
_0809B74E:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809B758: .4byte 0x0869211C

	thumb_func_start sub_809B75C
sub_809B75C: @ 0x0809B75C
	push {r4, lr}
	ldr r1, _0809B7C8 @ =gDispIo
	mov ip, r1
	movs r1, #1
	mov r2, ip
	ldrb r2, [r2, #1]
	orrs r1, r2
	movs r2, #2
	orrs r1, r2
	movs r2, #4
	orrs r1, r2
	movs r2, #8
	orrs r1, r2
	movs r2, #0x10
	orrs r1, r2
	mov r3, ip
	strb r1, [r3, #1]
	adds r3, #0x3c
	ldr r1, _0809B7CC @ =0x0000FFE0
	mov r4, ip
	ldrh r4, [r4, #0x3c]
	ands r1, r4
	movs r2, #2
	orrs r1, r2
	ldr r2, _0809B7D0 @ =0x0000E0FF
	ands r1, r2
	movs r4, #0xc0
	lsls r4, r4, #4
	adds r2, r4, #0
	orrs r1, r2
	mov r2, ip
	strh r1, [r2, #0x3c]
	movs r1, #0x3f
	ldrb r4, [r3]
	ands r1, r4
	movs r2, #0x40
	orrs r1, r2
	strb r1, [r3]
	mov r1, ip
	adds r1, #0x44
	movs r2, #0
	strb r2, [r1]
	adds r3, #9
	movs r1, #0x10
	strb r1, [r3]
	mov r1, ip
	adds r1, #0x46
	strb r2, [r1]
	adds r0, #0x64
	strh r2, [r0]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809B7C8: .4byte gDispIo
_0809B7CC: .4byte 0x0000FFE0
_0809B7D0: .4byte 0x0000E0FF

	thumb_func_start sub_809B7D4
sub_809B7D4: @ 0x0809B7D4
	push {r4, r5, r6, r7, lr}
	sub sp, #4
	adds r7, r0, #0
	adds r4, r7, #0
	adds r4, #0x64
	ldrh r0, [r4]
	adds r0, #1
	movs r6, #0
	strh r0, [r4]
	movs r0, #0
	ldrsh r3, [r4, r0]
	ldr r5, _0809B85C @ =0x08692124
	ldr r0, [r5]
	str r0, [sp]
	movs r0, #4
	movs r1, #8
	movs r2, #0
	bl Interpolate
	adds r2, r0, #0
	lsls r2, r2, #0x10
	lsrs r2, r2, #0x10
	movs r0, #1
	movs r1, #0
	bl SetBgOffset
	movs r1, #0
	ldrsh r3, [r4, r1]
	ldr r0, [r5]
	str r0, [sp]
	movs r0, #4
	movs r1, #0
	movs r2, #8
	bl Interpolate
	ldr r2, _0809B860 @ =gDispIo
	mov ip, r2
	mov r3, ip
	adds r3, #0x3c
	movs r1, #0x3f
	ldrb r2, [r3]
	ands r1, r2
	movs r2, #0x40
	orrs r1, r2
	strb r1, [r3]
	mov r1, ip
	adds r1, #0x44
	strb r0, [r1]
	movs r1, #0x10
	subs r1, r1, r0
	mov r0, ip
	adds r0, #0x45
	strb r1, [r0]
	adds r0, #1
	strb r6, [r0]
	movs r0, #0
	ldrsh r1, [r4, r0]
	ldr r0, [r5]
	cmp r1, r0
	blt _0809B852
	adds r0, r7, #0
	bl Proc_Break
_0809B852:
	add sp, #4
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809B85C: .4byte 0x08692124
_0809B860: .4byte gDispIo

	thumb_func_start sub_809B864
sub_809B864: @ 0x0809B864
	ldr r1, _0809B894 @ =gDispIo
	mov ip, r1
	mov r3, ip
	adds r3, #0x3c
	movs r1, #0x3f
	ldrb r2, [r3]
	ands r1, r2
	movs r2, #0x40
	orrs r1, r2
	strb r1, [r3]
	mov r1, ip
	adds r1, #0x44
	movs r2, #0
	strb r2, [r1]
	adds r3, #9
	movs r1, #0x10
	strb r1, [r3]
	mov r1, ip
	adds r1, #0x46
	strb r2, [r1]
	adds r0, #0x64
	strh r2, [r0]
	bx lr
	.align 2, 0
_0809B894: .4byte gDispIo

	thumb_func_start sub_809B898
sub_809B898: @ 0x0809B898
	push {r4, r5, r6, lr}
	sub sp, #4
	adds r6, r0, #0
	ldr r5, _0809B8F8 @ =gDispIo
	adds r2, r5, #0
	adds r2, #0x3c
	movs r0, #0x3f
	ldrb r1, [r2]
	ands r0, r1
	movs r1, #0x40
	orrs r0, r1
	strb r0, [r2]
	adds r4, r6, #0
	adds r4, #0x64
	movs r0, #0
	ldrsh r3, [r4, r0]
	movs r0, #0x18
	str r0, [sp]
	movs r0, #0
	movs r1, #0
	movs r2, #0x10
	bl Interpolate
	adds r1, r5, #0
	adds r1, #0x44
	movs r2, #0
	strb r0, [r1]
	adds r1, #1
	movs r0, #0x10
	strb r0, [r1]
	adds r0, r5, #0
	adds r0, #0x46
	strb r2, [r0]
	ldrh r0, [r4]
	adds r1, r0, #1
	strh r1, [r4]
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	cmp r0, #0x17
	ble _0809B8EE
	adds r0, r6, #0
	bl Proc_Break
_0809B8EE:
	add sp, #4
	pop {r4, r5, r6}
	pop {r0}
	bx r0
	.align 2, 0
_0809B8F8: .4byte gDispIo

	thumb_func_start sub_809B8FC
sub_809B8FC: @ 0x0809B8FC
	push {r4, lr}
	adds r4, r0, #0
	ldr r0, _0809B954 @ =0x08364438
	ldr r1, _0809B958 @ =0x06014000
	bl Decompress
	ldr r0, _0809B95C @ =0x08364A94
	movs r1, #0x80
	lsls r1, r1, #2
	movs r2, #0x20
	bl ApplyPaletteExt
	ldr r2, _0809B960 @ =gDispIo
	movs r0, #1
	ldrb r1, [r2, #1]
	orrs r0, r1
	movs r1, #3
	rsbs r1, r1, #0
	ands r0, r1
	subs r1, #2
	ands r0, r1
	movs r1, #8
	orrs r0, r1
	movs r1, #0x10
	orrs r0, r1
	strb r0, [r2, #1]
	ldr r0, _0809B964 @ =0x0000FFE0
	ldrh r3, [r2, #0x3c]
	ands r0, r3
	movs r1, #0x10
	orrs r0, r1
	ldr r1, _0809B968 @ =0x0000E0FF
	ands r0, r1
	movs r3, #0xf0
	lsls r3, r3, #4
	adds r1, r3, #0
	orrs r0, r1
	strh r0, [r2, #0x3c]
	adds r4, #0x64
	movs r0, #0
	strh r0, [r4]
	pop {r4}
	pop {r0}
	bx r0
	.align 2, 0
_0809B954: .4byte 0x08364438
_0809B958: .4byte 0x06014000
_0809B95C: .4byte 0x08364A94
_0809B960: .4byte gDispIo
_0809B964: .4byte 0x0000FFE0
_0809B968: .4byte 0x0000E0FF

	thumb_func_start sub_809B96C
sub_809B96C: @ 0x0809B96C
	push {r4, lr}
	adds r4, r0, #0
	bl sub_809B99C
	adds r2, r4, #0
	adds r2, #0x64
	movs r1, #0
	ldrsh r0, [r2, r1]
	ldr r1, _0809B98C @ =0x08692128
	ldr r1, [r1]
	cmp r0, r1
	bne _0809B990
	adds r0, r4, #0
	bl Proc_Break
	b _0809B996
	.align 2, 0
_0809B98C: .4byte 0x08692128
_0809B990:
	ldrh r0, [r2]
	adds r0, #1
	strh r0, [r2]
_0809B996:
	pop {r4}
	pop {r0}
	bx r0

	thumb_func_start sub_809B99C
sub_809B99C: @ 0x0809B99C
	push {r4, r5, r6, r7, lr}
	mov r7, sl
	mov r6, sb
	mov r5, r8
	push {r5, r6, r7}
	sub sp, #4
	adds r4, r0, #0
	adds r4, #0x64
	movs r0, #0
	ldrsh r3, [r4, r0]
	ldr r5, _0809BAD8 @ =0x08692128
	ldr r0, [r5]
	str r0, [sp]
	movs r0, #4
	movs r1, #0x96
	movs r2, #0
	bl Interpolate
	adds r7, r0, #0
	movs r1, #0
	ldrsh r3, [r4, r1]
	ldr r0, [r5]
	str r0, [sp]
	movs r0, #4
	movs r1, #0x64
	movs r2, #0
	bl Interpolate
	adds r6, r0, #0
	movs r2, #0
	ldrsh r3, [r4, r2]
	ldr r0, [r5]
	str r0, [sp]
	movs r0, #4
	movs r1, #0x80
	movs r2, #0x80
	lsls r2, r2, #2
	bl Interpolate
	mov sb, r0
	movs r0, #0x8f
	lsls r0, r0, #2
	mov r8, r0
	adds r0, r7, r0
	ldr r5, _0809BADC @ =0x000001FF
	ands r0, r5
	movs r2, #0x90
	lsls r2, r2, #1
	adds r1, r6, r2
	movs r2, #0xff
	mov sl, r2
	ands r1, r2
	ldr r2, _0809BAE0 @ =0x08692300
	movs r3, #0x80
	lsls r3, r3, #2
	bl PutOamHiRam
	lsls r0, r7, #1
	adds r0, r0, r7
	cmp r0, #0
	bge _0809BA18
	adds r0, #7
_0809BA18:
	asrs r0, r0, #3
	add r0, r8
	ands r0, r5
	lsrs r1, r6, #0x1f
	adds r1, r6, r1
	asrs r1, r1, #1
	movs r2, #0x90
	lsls r2, r2, #1
	adds r1, r1, r2
	mov r2, sl
	ands r1, r2
	ldr r2, _0809BAE4 @ =0x086922F8
	movs r3, #0x80
	lsls r3, r3, #2
	bl PutOamHiRam
	adds r0, r7, #0
	cmp r0, #0
	bge _0809BA40
	adds r0, #7
_0809BA40:
	asrs r4, r0, #3
	add r4, r8
	ands r4, r5
	adds r0, r6, #0
	movs r1, #6
	bl __divsi3
	adds r1, r0, #0
	movs r0, #0x90
	lsls r0, r0, #1
	adds r1, r1, r0
	mov r2, sl
	ands r1, r2
	ldr r2, _0809BAE8 @ =0x086922F0
	adds r0, r4, #0
	movs r3, #0x80
	lsls r3, r3, #2
	bl PutOamHiRam
	ldr r4, _0809BAEC @ =gSinLut
	movs r0, #0x80
	adds r0, r0, r4
	mov r8, r0
	movs r1, #0
	ldrsh r0, [r0, r1]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r6, r0, #0
	lsls r6, r6, #0x10
	asrs r6, r6, #0x10
	movs r2, #0
	ldrsh r0, [r4, r2]
	rsbs r0, r0, #0
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r5, r0, #0
	lsls r5, r5, #0x10
	asrs r5, r5, #0x10
	movs r1, #0
	ldrsh r0, [r4, r1]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	adds r4, r0, #0
	lsls r4, r4, #0x10
	asrs r4, r4, #0x10
	mov r2, r8
	movs r1, #0
	ldrsh r0, [r2, r1]
	lsls r0, r0, #4
	mov r1, sb
	bl Div
	lsls r0, r0, #0x10
	asrs r0, r0, #0x10
	str r0, [sp]
	movs r0, #0
	adds r1, r6, #0
	adds r2, r5, #0
	adds r3, r4, #0
	bl SetObjAffine
	add sp, #4
	pop {r3, r4, r5}
	mov r8, r3
	mov sb, r4
	mov sl, r5
	pop {r4, r5, r6, r7}
	pop {r0}
	bx r0
	.align 2, 0
_0809BAD8: .4byte 0x08692128
_0809BADC: .4byte 0x000001FF
_0809BAE0: .4byte 0x08692300
_0809BAE4: .4byte 0x086922F8
_0809BAE8: .4byte 0x086922F0
_0809BAEC: .4byte gSinLut

	thumb_func_start sub_809BAF0
sub_809BAF0: @ 0x0809BAF0
	push {lr}
	movs r0, #1
	movs r1, #0
	movs r2, #0
	bl StartBgmExt
	pop {r0}
	bx r0

	thumb_func_start sub_809BB00
sub_809BB00: @ 0x0809BB00
	push {lr}
	ldr r0, _0809BB18 @ =gPlaySt
	ldrb r0, [r0, #0x1d]
	lsls r0, r0, #0x1e
	cmp r0, #0
	blt _0809BB12
	movs r0, #0x92
	bl m4aSongNumStart
_0809BB12:
	pop {r0}
	bx r0
	.align 2, 0
_0809BB18: .4byte gPlaySt
